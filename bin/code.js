function Bridge(){this.enabled=!!(window&&window.parent&&window.parent.bridgeEnabled),this.call=function(n){for(var e=[],i=1,r=arguments.length;r>i;i++)e.push(arguments[i]);return window.parent[n].apply(null,e)}}Bridge.getInstance=function(){return Bridge.instance||(Bridge.instance=new Bridge),Bridge.instance};

/***********************************/
/*http://www.layabox.com  2017/3/23*/
/***********************************/
var Laya = window.Laya = (function (window, document) {
	var Laya = {
		__internals: [],
		__packages: {},
		__classmap: { 'Object': Object, 'Function': Function, 'Array': Array, 'String': String },
		__sysClass: { 'object': 'Object', 'array': 'Array', 'string': 'String', 'dictionary': 'Dictionary' },
		__propun: { writable: true, enumerable: false, configurable: true },
		__presubstr: String.prototype.substr,
		__substr: function (ofs, sz) { return arguments.length == 1 ? Laya.__presubstr.call(this, ofs) : Laya.__presubstr.call(this, ofs, sz > 0 ? sz : (this.length + sz)); },
		__init: function (_classs) { _classs.forEach(function (o) { o.__init$ && o.__init$(); }); },
		__isClass: function (o) { return o && (o.__isclass || o == Object || o == String || o == Array); },
		__newvec: function (sz, value) {
			var d = [];
			d.length = sz;
			for (var i = 0; i < sz; i++) d[i] = value;
			return d;
		},
		__extend: function (d, b) {
			for (var p in b) {
				if (!b.hasOwnProperty(p)) continue;
				var gs = Object.getOwnPropertyDescriptor(b, p);
				var g = gs.get, s = gs.set;
				if (g || s) {
					if (g && s)
						Object.defineProperty(d, p, gs);
					else {
						g && Object.defineProperty(d, p, g);
						s && Object.defineProperty(d, p, s);
					}
				}
				else d[p] = b[p];
			}
			function __() { Laya.un(this, 'constructor', d); } __.prototype = b.prototype; d.prototype = new __(); Laya.un(d.prototype, '__imps', Laya.__copy({}, b.prototype.__imps));
		},
		__copy: function (dec, src) {
			if (!src) return null;
			dec = dec || {};
			for (var i in src) dec[i] = src[i];
			return dec;
		},
		__package: function (name, o) {
			if (Laya.__packages[name]) return;
			Laya.__packages[name] = true;
			var p = window, strs = name.split('.');
			if (strs.length > 1) {
				for (var i = 0, sz = strs.length - 1; i < sz; i++) {
					var c = p[strs[i]];
					p = c ? c : (p[strs[i]] = {});
				}
			}
			p[strs[strs.length - 1]] || (p[strs[strs.length - 1]] = o || {});
		},
		__hasOwnProperty: function (name, o) {
			o = o || this;
			function classHas(name, o) {
				if (Object.hasOwnProperty.call(o.prototype, name)) return true;
				var s = o.prototype.__super;
				return s == null ? null : classHas(name, s);
			}
			return (Object.hasOwnProperty.call(o, name)) || classHas(name, o.__class);
		},
		__typeof: function (o, value) {
			if (!o || !value) return false;
			if (value === String) return (typeof o === 'string');
			if (value === Number) return (typeof o === 'number');
			if (value.__interface__) value = value.__interface__;
			else if (typeof value != 'string') return (o instanceof value);
			return (o.__imps && o.__imps[value]) || (o.__class == value);
		},
		__as: function (value, type) {
			return (this.__typeof(value, type)) ? value : null;
		},
		interface: function (name, _super) {
			Laya.__package(name, {});
			var ins = Laya.__internals;
			var a = ins[name] = ins[name] || { self: name };
			if (_super) {
				var supers = _super.split(',');
				a.extend = [];
				for (var i = 0; i < supers.length; i++) {
					var nm = supers[i];
					ins[nm] = ins[nm] || { self: nm };
					a.extend.push(ins[nm]);
				}
			}
			var o = window, words = name.split('.');
			for (var i = 0; i < words.length - 1; i++) o = o[words[i]];
			o[words[words.length - 1]] = { __interface__: name };
		},
		class: function (o, fullName, _super, miniName) {
			_super && Laya.__extend(o, _super);
			if (fullName) {
				Laya.__package(fullName, o);
				Laya.__classmap[fullName] = o;
				if (fullName.indexOf('.') > 0) {
					if (fullName.indexOf('laya.') == 0) {
						var paths = fullName.split('.');
						miniName = miniName || paths[paths.length - 1];
						if (Laya[miniName]) console.log("Warning!,this class[" + miniName + "] already exist:", Laya[miniName]);
						Laya[miniName] = o;
					}
				}
				else {
					if (fullName == "Main")
						window.Main = o;
					else {
						if (Laya[fullName]) {
							console.log("Error!,this class[" + fullName + "] already exist:", Laya[fullName]);
						}
						Laya[fullName] = o;
					}
				}
			}
			var un = Laya.un, p = o.prototype;
			un(p, 'hasOwnProperty', Laya.__hasOwnProperty);
			un(p, '__class', o);
			un(p, '__super', _super);
			un(p, '__className', fullName);
			un(o, '__super', _super);
			un(o, '__className', fullName);
			un(o, '__isclass', true);
			un(o, 'super', function (o) { this.__super.call(o); });
		},
		imps: function (dec, src) {
			if (!src) return null;
			var d = dec.__imps || Laya.un(dec, '__imps', {});
			function __(name) {
				var c, exs;
				if (!(c = Laya.__internals[name])) return;
				d[name] = true;
				if (!(exs = c.extend)) return;
				for (var i = 0; i < exs.length; i++) {
					__(exs[i].self);
				}
			}
			for (var i in src) __(i);
		},
		getset: function (isStatic, o, name, getfn, setfn) {
			if (!isStatic) {
				getfn && Laya.un(o, '_$get_' + name, getfn);
				setfn && Laya.un(o, '_$set_' + name, setfn);
			}
			else {
				getfn && (o['_$GET_' + name] = getfn);
				setfn && (o['_$SET_' + name] = setfn);
			}
			if (getfn && setfn)
				Object.defineProperty(o, name, { get: getfn, set: setfn, enumerable: false });
			else {
				getfn && Object.defineProperty(o, name, { get: getfn, enumerable: false });
				setfn && Object.defineProperty(o, name, { set: setfn, enumerable: false });
			}
		},
		static: function (_class, def) {
			for (var i = 0, sz = def.length; i < sz; i += 2) {
				if (def[i] == 'length')
					_class.length = def[i + 1].call(_class);
				else {
					function tmp() {
						var name = def[i];
						var getfn = def[i + 1];
						Object.defineProperty(_class, name, {
							get: function () { delete this[name]; return this[name] = getfn.call(this); },
							set: function (v) { delete this[name]; this[name] = v; }, enumerable: true, configurable: true
						});
					}
					tmp();
				}
			}
		},
		un: function (obj, name, value) {
			value || (value = obj[name]);
			Laya.__propun.value = value;
			Object.defineProperty(obj, name, Laya.__propun);
			return value;
		},
		uns: function (obj, names) {
			names.forEach(function (o) { Laya.un(obj, o) });
		}
	};

	window.console = window.console || ({ log: function () { } });
	window.trace = window.console.log;
	Error.prototype.throwError = function () { throw arguments; };
	//String.prototype.substr=Laya.__substr;
	Object.defineProperty(Array.prototype, 'fixed', { enumerable: false });

	return Laya;
})(window, document);

(function (window, document, Laya) {
	var __un = Laya.un, __uns = Laya.uns, __static = Laya.static, __class = Laya.class, __getset = Laya.getset, __newvec = Laya.__newvec;

})(window, document, Laya);


(function (window, document, Laya) {
	var __un = Laya.un, __uns = Laya.uns, __static = Laya.static, __class = Laya.class, __getset = Laya.getset, __newvec = Laya.__newvec;
	Laya.interface('laya.runtime.IMarket');
	Laya.interface('laya.filters.IFilter');
	Laya.interface('laya.display.ILayout');
	Laya.interface('laya.resource.IDispose');
	Laya.interface('laya.runtime.IPlatform');
	Laya.interface('laya.resource.IDestroy');
	Laya.interface('laya.runtime.IConchNode');
	Laya.interface('laya.filters.IFilterAction');
	Laya.interface('laya.runtime.ICPlatformClass');
	Laya.interface('laya.resource.ICreateResource');
	Laya.interface('laya.runtime.IConchRenderObject');
	Laya.interface('laya.runtime.IPlatformClass', 'laya.runtime.IPlatform');
	/**
	*@private
	*/
	//class laya.utils.RunDriver
	var RunDriver = (function () {
		function RunDriver() { };
		__class(RunDriver, 'laya.utils.RunDriver');
		RunDriver.FILTER_ACTIONS = [];
		RunDriver.pixelRatio = -1;
		RunDriver._charSizeTestDiv = null
		RunDriver.now = function () {
			return /*__JS__ */Date.now();
		}

		RunDriver.getWindow = function () {
			return /*__JS__ */window;
		}

		RunDriver.getPixelRatio = function () {
			if (RunDriver.pixelRatio < 0) {
				var ctx = Browser.context;
				var backingStore = ctx.backingStorePixelRatio || ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;
				RunDriver.pixelRatio = (Browser.window.devicePixelRatio || 1) / backingStore;
				if (RunDriver.pixelRatio < 1) RunDriver.pixelRatio = 1;
			}
			return RunDriver.pixelRatio;
		}

		RunDriver.getIncludeStr = function (name) {
			return null;
		}

		RunDriver.createShaderCondition = function (conditionScript) {
			var fn = "(function() {return " + conditionScript + ";})";
			return Browser.window.eval(fn);
		}

		RunDriver.fontMap = [];
		RunDriver.measureText = function (txt, font) {
			var isChinese = RunDriver.hanzi.test(txt);
			if (isChinese && RunDriver.fontMap[font]) {
				return RunDriver.fontMap[font];
			};
			var ctx = Browser.context;
			ctx.font = font;
			var r = ctx.measureText(txt);
			if (isChinese) RunDriver.fontMap[font] = r;
			return r;
		}

		RunDriver.getWebGLContext = function (canvas) {
		};

		RunDriver.beginFlush = function () {
		};

		RunDriver.endFinish = function () {
		};

		RunDriver.addToAtlas = null
		RunDriver.flashFlushImage = function (atlasWebGLCanvas) {
		};

		RunDriver.drawToCanvas = function (sprite, _renderType, canvasWidth, canvasHeight, offsetX, offsetY) {
			var canvas = HTMLCanvas.create("2D");
			var context = new RenderContext(canvasWidth, canvasHeight, canvas);
			RenderSprite.renders[_renderType]._fun(sprite, context, offsetX, offsetY);
			return canvas;
		}

		RunDriver.createParticleTemplate2D = null
		RunDriver.createGLTextur = null;
		RunDriver.createWebGLContext2D = null;
		RunDriver.changeWebGLSize = function (w, h) {
		};

		RunDriver.createRenderSprite = function (type, next) {
			return new RenderSprite(type, next);
		}

		RunDriver.createFilterAction = function (type) {
			return new ColorFilterAction();
		}

		RunDriver.createGraphics = function () {
			return new Graphics();
		}

		RunDriver.clear = function (value) {
			Render._context.ctx.clear();
		}

		RunDriver.clearAtlas = function (value) {
		};

		RunDriver.isAtlas = function (bitmap) {
			return false;
		}

		RunDriver.addTextureToAtlas = function (value) {
		};

		RunDriver.getTexturePixels = function (value, x, y, width, height) {
			return null;
		}

		RunDriver.skinAniSprite = function () {
			return null;
		}

		__static(RunDriver,
			['hanzi', function () { return this.hanzi = new RegExp("^[\u4E00-\u9FA5]$"); }
			]);
		return RunDriver;
	})()


	/**
	*<code>Laya</code> 是全局对象的引用入口集。
	*Laya类引用了一些常用的全局对象，比如Laya.stage：舞台，Laya.timer：时间管理器，Laya.loader：加载管理器，使用时注意大小写。
	*/
	//class Laya
	var ___Laya = (function () {
		//function Laya(){};
		/**
		*表示是否捕获全局错误并弹出提示。默认为false。
		*适用于移动设备等不方便调试的时候，设置为true后，如有未知错误，可以弹窗抛出详细错误堆栈。
		*/
		__getset(1, Laya, 'alertGlobalError', null, function (value) {
			var erralert = 0;
			if (value) {
				Browser.window.onerror = function (msg, url, line, column, detail) {
					if (erralert++ < 5 && detail)
						alert("出错啦，请把此信息截图给研发商\n" + msg + "\n" + detail.stack);
				}
			} else {
				Browser.window.onerror = null;
			}
		});

		Laya.init = function (width, height, __plugins) {
			var plugins = []; for (var i = 2, sz = arguments.length; i < sz; i++)plugins.push(arguments[i]);
			if (Laya._isinit) return;
			ArrayBuffer.prototype.slice || (ArrayBuffer.prototype.slice = Laya._arrayBufferSlice);
			Laya._isinit = true;
			Browser.__init__();
			Context.__init__();
			Graphics.__init__();
			Laya.timer = new Timer();
			Laya.loader = new LoaderManager();
			WeakObject.__init__();
			for (var i = 0, n = plugins.length; i < n; i++) {
				if (plugins[i].enable) plugins[i].enable();
			}
			Font.__init__();
			Style.__init__();
			ResourceManager.__init__();
			CacheManger.beginCheck();
			Laya._currentStage = Laya.stage = new Stage();
			Laya.stage.conchModel && Laya.stage.conchModel.setRootNode();
			var location = Browser.window.location;
			var pathName = location.pathname;
			pathName = pathName.charAt(2) == ':' ? pathName.substring(1) : pathName;
			URL.rootPath = URL.basePath = URL.getPath(location.protocol == "file:" ? pathName : location.protocol + "//" + location.host + location.pathname);
			Laya.render = new Render(0, 0);
			Laya.stage.size(width, height);
			RenderSprite.__init__();
			KeyBoardManager.__init__();
			MouseManager.instance.__init__(Laya.stage, Render.canvas);
			Input.__init__();
			SoundManager.autoStopMusic = true;
			LocalStorage.__init__();
			return Render.canvas;
		}

		Laya._arrayBufferSlice = function (start, end) {
			var arr =/*__JS__ */this;
			var arrU8List = new Uint8Array(arr, start, end - start);
			var newU8List = new Uint8Array(arrU8List.length);
			newU8List.set(arrU8List);
			return newU8List.buffer;
		}

		Laya.stage = null;
		Laya.timer = null;
		Laya.loader = null;
		Laya.version = "1.7.10";
		Laya.render = null
		Laya._currentStage = null
		Laya._isinit = false;
		__static(Laya,
			['conchMarket', function () { return this.conchMarket =/*__JS__ */window.conch ? conchMarket : null; }, 'PlatformClass', function () { return this.PlatformClass =/*__JS__ */window.PlatformClass; }
			]);
		return Laya;
	})()


	/**
	*Config 用于配置一些全局参数。如需更改，请在初始化引擎之前设置。
	*/
	//class Config
	var Config = (function () {
		function Config() { };
		__class(Config, 'Config');
		Config.WebGLTextCacheCount = 500;
		Config.atlasEnable = false;
		Config.showCanvasMark = false;
		Config.animationInterval = 50;
		Config.isAntialias = false;
		Config.isAlpha = false;
		Config.premultipliedAlpha = true;
		Config.isStencil = true;
		Config.preserveDrawingBuffer = false;
		return Config;
	})()


	/**
	*<code>EventDispatcher</code> 类是可调度事件的所有类的基类。
	*/
	//class laya.events.EventDispatcher
	var EventDispatcher = (function () {
		var EventHandler;
		function EventDispatcher() {
			this._events = null;
		}

		__class(EventDispatcher, 'laya.events.EventDispatcher');
		var __proto = EventDispatcher.prototype;
		/**
		*检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。
		*@param type 事件的类型。
		*@return 如果指定类型的侦听器已注册，则值为 true；否则，值为 false。
		*/
		__proto.hasListener = function (type) {
			var listener = this._events && this._events[type];
			return !!listener;
		}

		/**
		*派发事件。
		*@param type 事件类型。
		*@param data （可选）回调数据。<b>注意：</b>如果是需要传递多个参数 p1,p2,p3,...可以使用数组结构如：[p1,p2,p3,...] ；如果需要回调单个参数 p ，且 p 是一个数组，则需要使用结构如：[p]，其他的单个参数 p ，可以直接传入参数 p。
		*@return 此事件类型是否有侦听者，如果有侦听者则值为 true，否则值为 false。
		*/
		__proto.event = function (type, data) {
			if (!this._events || !this._events[type]) return false;
			var listeners = this._events[type];
			if (listeners.run) {
				if (listeners.once) delete this._events[type];
				data != null ? listeners.runWith(data) : listeners.run();
			} else {
				for (var i = 0, n = listeners.length; i < n; i++) {
					var listener = listeners[i];
					if (listener) {
						(data != null) ? listener.runWith(data) : listener.run();
					}
					if (!listener || listener.once) {
						listeners.splice(i, 1);
						i--;
						n--;
					}
				}
				if (listeners.length === 0 && this._events) delete this._events[type];
			}
			return true;
		}

		/**
		*使用 EventDispatcher 对象注册指定类型的事件侦听器对象，以使侦听器能够接收事件通知。
		*@param type 事件的类型。
		*@param caller 事件侦听函数的执行域。
		*@param listener 事件侦听函数。
		*@param args （可选）事件侦听函数的回调参数。
		*@return 此 EventDispatcher 对象。
		*/
		__proto.on = function (type, caller, listener, args) {
			return this._createListener(type, caller, listener, args, false);
		}

		/**
		*使用 EventDispatcher 对象注册指定类型的事件侦听器对象，以使侦听器能够接收事件通知，此侦听事件响应一次后自动移除。
		*@param type 事件的类型。
		*@param caller 事件侦听函数的执行域。
		*@param listener 事件侦听函数。
		*@param args （可选）事件侦听函数的回调参数。
		*@return 此 EventDispatcher 对象。
		*/
		__proto.once = function (type, caller, listener, args) {
			return this._createListener(type, caller, listener, args, true);
		}

		/**@private */
		__proto._createListener = function (type, caller, listener, args, once, offBefore) {
			(offBefore === void 0) && (offBefore = true);
			offBefore && this.off(type, caller, listener, once);
			var handler = EventHandler.create(caller || this, listener, args, once);
			this._events || (this._events = {});
			var events = this._events;
			if (!events[type]) events[type] = handler;
			else {
				if (!events[type].run) events[type].push(handler);
				else events[type] = [events[type], handler];
			}
			return this;
		}

		/**
		*从 EventDispatcher 对象中删除侦听器。
		*@param type 事件的类型。
		*@param caller 事件侦听函数的执行域。
		*@param listener 事件侦听函数。
		*@param onceOnly （可选）如果值为 true ,则只移除通过 once 方法添加的侦听器。
		*@return 此 EventDispatcher 对象。
		*/
		__proto.off = function (type, caller, listener, onceOnly) {
			(onceOnly === void 0) && (onceOnly = false);
			if (!this._events || !this._events[type]) return this;
			var listeners = this._events[type];
			if (listener != null) {
				if (listeners.run) {
					if ((!caller || listeners.caller === caller) && listeners.method === listener && (!onceOnly || listeners.once)) {
						delete this._events[type];
						listeners.recover();
					}
				} else {
					var count = 0;
					for (var i = 0, n = listeners.length; i < n; i++) {
						var item = listeners[i];
						if (item && (!caller || item.caller === caller) && item.method === listener && (!onceOnly || item.once)) {
							count++;
							listeners[i] = null;
							item.recover();
						}
					}
					if (count === n) delete this._events[type];
				}
			}
			return this;
		}

		/**
		*从 EventDispatcher 对象中删除指定事件类型的所有侦听器。
		*@param type （可选）事件类型，如果值为 null，则移除本对象所有类型的侦听器。
		*@return 此 EventDispatcher 对象。
		*/
		__proto.offAll = function (type) {
			var events = this._events;
			if (!events) return this;
			if (type) {
				this._recoverHandlers(events[type]);
				delete events[type];
			} else {
				for (var name in events) {
					this._recoverHandlers(events[name]);
				}
				this._events = null;
			}
			return this;
		}

		__proto._recoverHandlers = function (arr) {
			if (!arr) return;
			if (arr.run) {
				arr.recover();
			} else {
				for (var i = arr.length - 1; i > -1; i--) {
					if (arr[i]) {
						arr[i].recover();
						arr[i] = null;
					}
				}
			}
		}

		/**
		*检测指定事件类型是否是鼠标事件。
		*@param type 事件的类型。
		*@return 如果是鼠标事件，则值为 true;否则，值为 false。
		*/
		__proto.isMouseEvent = function (type) {
			return EventDispatcher.MOUSE_EVENTS[type];
		}

		EventDispatcher.MOUSE_EVENTS = { "rightmousedown": true, "rightmouseup": true, "rightclick": true, "mousedown": true, "mouseup": true, "mousemove": true, "mouseover": true, "mouseout": true, "click": true, "doubleclick": true };
		EventDispatcher.__init$ = function () {
			Object.defineProperty(laya.events.EventDispatcher.prototype, "_events", { enumerable: false, writable: true });
			/**@private */
			//class EventHandler extends laya.utils.Handler
			EventHandler = (function (_super) {
				function EventHandler(caller, method, args, once) {
					EventHandler.__super.call(this, caller, method, args, once);
				}
				__class(EventHandler, '', _super);
				var __proto = EventHandler.prototype;
				__proto.recover = function () {
					if (this._id > 0) {
						this._id = 0;
						EventHandler._pool.push(this.clear());
					}
				}
				EventHandler.create = function (caller, method, args, once) {
					(once === void 0) && (once = true);
					if (EventHandler._pool.length) return EventHandler._pool.pop().setTo(caller, method, args, once);
					return new EventHandler(caller, method, args, once);
				}
				EventHandler._pool = [];
				return EventHandler;
			})(Handler)
		}

		return EventDispatcher;
	})()


	/**
	*<p><code>Handler</code> 是事件处理器类。</p>
	*<p>推荐使用 Handler.create()方法从对象池创建，减少对象创建消耗。创建的 Handler 对象不再使用后，可以使用 Handler.recover()将其回收到对象池，回收后不要再使用此对象，否则会导致不可预料的错误。</p>
	*<p><b>注意：</b>由于鼠标事件也用本对象池，不正确的回收及调用，可能会影响鼠标事件的执行。</p>
	*/
	//class laya.utils.Handler
	var Handler = (function () {
		function Handler(caller, method, args, once) {
			//this.caller=null;
			//this.method=null;
			//this.args=null;
			this.once = false;
			this._id = 0;
			(once === void 0) && (once = false);
			this.setTo(caller, method, args, once);
		}

		__class(Handler, 'laya.utils.Handler');
		var __proto = Handler.prototype;
		/**
		*设置此对象的指定属性值。
		*@param caller 执行域(this)。
		*@param method 回调方法。
		*@param args 携带的参数。
		*@param once 是否只执行一次，如果为true，执行后执行recover()进行回收。
		*@return 返回 handler 本身。
		*/
		__proto.setTo = function (caller, method, args, once) {
			this._id = Handler._gid++;
			this.caller = caller;
			this.method = method;
			this.args = args;
			this.once = once;
			return this;
		}

		/**
		*执行处理器。
		*/
		__proto.run = function () {
			if (this.method == null) return null;
			var id = this._id;
			var result = this.method.apply(this.caller, this.args);
			this._id === id && this.once && this.recover();
			return result;
		}

		/**
		*执行处理器，携带额外数据。
		*@param data 附加的回调数据，可以是单数据或者Array(作为多参)。
		*/
		__proto.runWith = function (data) {
			if (this.method == null) return null;
			var id = this._id;
			if (data == null)
				var result = this.method.apply(this.caller, this.args);
			else if (!this.args && !data.unshift) result = this.method.call(this.caller, data);
			else if (this.args) result = this.method.apply(this.caller, this.args.concat(data));
			else result = this.method.apply(this.caller, data);
			this._id === id && this.once && this.recover();
			return result;
		}

		/**
		*清理对象引用。
		*/
		__proto.clear = function () {
			this.caller = null;
			this.method = null;
			this.args = null;
			return this;
		}

		/**
		*清理并回收到 Handler 对象池内。
		*/
		__proto.recover = function () {
			if (this._id > 0) {
				this._id = 0;
				Handler._pool.push(this.clear());
			}
		}

		Handler.create = function (caller, method, args, once) {
			(once === void 0) && (once = true);
			if (Handler._pool.length) return Handler._pool.pop().setTo(caller, method, args, once);
			return new Handler(caller, method, args, once);
		}

		Handler._pool = [];
		Handler._gid = 1;
		return Handler;
	})()


	/**
	*<code>BitmapFont</code> 是位图字体类，用于定义位图字体信息。
	*/
	//class laya.display.BitmapFont
	var BitmapFont = (function () {
		function BitmapFont() {
			this._texture = null;
			this._fontCharDic = {};
			this._fontWidthMap = {};
			this._complete = null;
			this._path = null;
			this._maxWidth = 0;
			this._spaceWidth = 10;
			this._padding = null;
			this.fontSize = 12;
			this.autoScaleSize = false;
			this.letterSpacing = 0;
		}

		__class(BitmapFont, 'laya.display.BitmapFont');
		var __proto = BitmapFont.prototype;
		/**
		*通过指定位图字体文件路径，加载位图字体文件，加载完成后会自动解析。
		*@param path 位图字体文件的路径。
		*@param complete 加载并解析完成的回调。
		*/
		__proto.loadFont = function (path, complete) {
			this._path = path;
			this._complete = complete;
			Laya.loader.load([{ url: this._path, type:/*laya.net.Loader.XML*/"xml" }, { url: this._path.replace(".fnt", ".png"), type:/*laya.net.Loader.IMAGE*/"image" }], Handler.create(this, this.onLoaded));
		}

		/**
		*@private
		*/
		__proto.onLoaded = function () {
			this.parseFont(Loader.getRes(this._path), Loader.getRes(this._path.replace(".fnt", ".png")));
			this._complete && this._complete.run();
		}

		/**
		*解析字体文件。
		*@param xml 字体文件XML。
		*@param texture 字体的纹理。
		*/
		__proto.parseFont = function (xml, texture) {
			if (xml == null || texture == null) return;
			this._texture = texture;
			var tX = 0;
			var tScale = 1;
			var tInfo = xml.getElementsByTagName("info");
			this.fontSize = parseInt(tInfo[0].attributes["size"].nodeValue);
			var tPadding = tInfo[0].attributes["padding"].nodeValue;
			var tPaddingArray = tPadding.split(",");
			this._padding = [parseInt(tPaddingArray[0]), parseInt(tPaddingArray[1]), parseInt(tPaddingArray[2]), parseInt(tPaddingArray[3])];
			var chars = xml.getElementsByTagName("char");
			var i = 0;
			for (i = 0; i < chars.length; i++) {
				var tAttribute = chars[i].attributes;
				var tId = parseInt(tAttribute["id"].nodeValue);
				var xOffset = parseInt(tAttribute["xoffset"].nodeValue) / tScale;
				var yOffset = parseInt(tAttribute["yoffset"].nodeValue) / tScale;
				var xAdvance = parseInt(tAttribute["xadvance"].nodeValue) / tScale;
				var region = new Rectangle();
				region.x = parseInt(tAttribute["x"].nodeValue);
				region.y = parseInt(tAttribute["y"].nodeValue);
				region.width = parseInt(tAttribute["width"].nodeValue);
				region.height = parseInt(tAttribute["height"].nodeValue);
				var tTexture = Texture.create(texture, region.x, region.y, region.width, region.height, xOffset, yOffset);
				this._maxWidth = Math.max(this._maxWidth, xAdvance + this.letterSpacing);
				this._fontCharDic[tId] = tTexture;
				this._fontWidthMap[tId] = xAdvance;
			}
		}

		/**
		*获取指定字符的字体纹理对象。
		*@param char 字符。
		*@return 指定的字体纹理对象。
		*/
		__proto.getCharTexture = function (char) {
			return this._fontCharDic[char.charCodeAt(0)];
		}

		/**
		*销毁位图字体，调用Text.unregisterBitmapFont 时，默认会销毁。
		*/
		__proto.destroy = function () {
			if (this._texture) {
				for (var p in this._fontCharDic) {
					var tTexture = this._fontCharDic[p];
					if (tTexture) tTexture.destroy();
				}
				this._texture.destroy();
				this._fontCharDic = null;
				this._fontWidthMap = null;
				this._texture = null;
			}
		}

		/**
		*设置空格的宽（如果字体库有空格，这里就可以不用设置了）。
		*@param spaceWidth 宽度，单位为像素。
		*/
		__proto.setSpaceWidth = function (spaceWidth) {
			this._spaceWidth = spaceWidth;
		}

		/**
		*获取指定字符的宽度。
		*@param char 字符。
		*@return 宽度。
		*/
		__proto.getCharWidth = function (char) {
			var code = char.charCodeAt(0);
			if (this._fontWidthMap[code]) return this._fontWidthMap[code] + this.letterSpacing;
			if (char == " ") return this._spaceWidth + this.letterSpacing;
			return 0;
		}

		/**
		*获取指定文本内容的宽度。
		*@param text 文本内容。
		*@return 宽度。
		*/
		__proto.getTextWidth = function (text) {
			var tWidth = 0;
			for (var i = 0, n = text.length; i < n; i++) {
				tWidth += this.getCharWidth(text.charAt(i));
			}
			return tWidth;
		}

		/**
		*获取最大字符宽度。
		*/
		__proto.getMaxWidth = function () {
			return this._maxWidth;
		}

		/**
		*获取最大字符高度。
		*/
		__proto.getMaxHeight = function () {
			return this.fontSize;
		}

		/**
		*@private
		*将指定的文本绘制到指定的显示对象上。
		*/
		__proto.drawText = function (text, sprite, drawX, drawY, align, width) {
			var tWidth = this.getTextWidth(text);
			var tTexture;
			var dx = 0;
			align === "center" && (dx = (width - tWidth) / 2);
			align === "right" && (dx = (width - tWidth));
			var tX = 0;
			for (var i = 0, n = text.length; i < n; i++) {
				tTexture = this.getCharTexture(text.charAt(i));
				if (tTexture) {
					sprite.graphics.drawTexture(tTexture, drawX + tX + dx, drawY);
					tX += this.getCharWidth(text.charAt(i));
				}
			}
		}

		return BitmapFont;
	})()


	/**
	*@private
	*<code>Style</code> 类是元素样式定义类。
	*/
	//class laya.display.css.Style
	var Style = (function () {
		function Style() {
			this.alpha = 1;
			this.visible = true;
			this.scrollRect = null;
			this.blendMode = null;
			this._type = 0;
			this._tf = Style._TF_EMPTY;
		}

		__class(Style, 'laya.display.css.Style');
		var __proto = Style.prototype;
		__proto.getTransform = function () {
			return this._tf;
		}

		__proto.setTransform = function (value) {
			this._tf = value === 'none' || !value ? Style._TF_EMPTY : value;
		}

		__proto.setTranslateX = function (value) {
			this._tf === Style._TF_EMPTY && (this._tf = new TransformInfo());
			this._tf.translateX = value;
		}

		__proto.setTranslateY = function (value) {
			this._tf === Style._TF_EMPTY && (this._tf = new TransformInfo());
			this._tf.translateY = value;
		}

		__proto.setScaleX = function (value) {
			this._tf === Style._TF_EMPTY && (this._tf = new TransformInfo());
			this._tf.scaleX = value;
		}

		__proto.setScale = function (x, y) {
			this._tf === Style._TF_EMPTY && (this._tf = new TransformInfo());
			this._tf.scaleX = x;
			this._tf.scaleY = y;
		}

		__proto.setScaleY = function (value) {
			this._tf === Style._TF_EMPTY && (this._tf = new TransformInfo());
			this._tf.scaleY = value;
		}

		__proto.setRotate = function (value) {
			this._tf === Style._TF_EMPTY && (this._tf = new TransformInfo());
			this._tf.rotate = value;
		}

		__proto.setSkewX = function (value) {
			this._tf === Style._TF_EMPTY && (this._tf = new TransformInfo());
			this._tf.skewX = value;
		}

		__proto.setSkewY = function (value) {
			this._tf === Style._TF_EMPTY && (this._tf = new TransformInfo());
			this._tf.skewY = value;
		}

		/**销毁此对象。*/
		__proto.destroy = function () {
			this.scrollRect = null;
		}

		/**@private */
		__proto.render = function (sprite, context, x, y) { }
		/**@private */
		__proto.getCSSStyle = function () {
			return CSSStyle.EMPTY;
		}

		/**@private */
		__proto._enableLayout = function () {
			return false;
		}

		/**X 轴缩放值。*/
		__getset(0, __proto, 'scaleX', function () {
			return this._tf.scaleX;
		}, function (value) {
			this.setScaleX(value);
		});

		/**元素应用的 2D 或 3D 转换的值。该属性允许我们对元素进行旋转、缩放、移动或倾斜。*/
		__getset(0, __proto, 'transform', function () {
			return this.getTransform();
		}, function (value) {
			this.setTransform(value);
		});

		/**定义转换，只是用 X 轴的值。*/
		__getset(0, __proto, 'translateX', function () {
			return this._tf.translateX;
		}, function (value) {
			this.setTranslateX(value);
		});

		/**定义转换，只是用 Y 轴的值。*/
		__getset(0, __proto, 'translateY', function () {
			return this._tf.translateY;
		}, function (value) {
			this.setTranslateY(value);
		});

		/**Y 轴缩放值。*/
		__getset(0, __proto, 'scaleY', function () {
			return this._tf.scaleY;
		}, function (value) {
			this.setScaleY(value);
		});

		/**表示元素是否显示为块级元素。*/
		__getset(0, __proto, 'block', function () {
			return (this._type & 0x1) != 0;
		});

		/**定义沿着 Y 轴的 2D 倾斜转换。*/
		__getset(0, __proto, 'skewY', function () {
			return this._tf.skewY;
		}, function (value) {
			this.setSkewY(value);
		});

		/**定义旋转角度。*/
		__getset(0, __proto, 'rotate', function () {
			return this._tf.rotate;
		}, function (value) {
			this.setRotate(value);
		});

		/**定义沿着 X 轴的 2D 倾斜转换。*/
		__getset(0, __proto, 'skewX', function () {
			return this._tf.skewX;
		}, function (value) {
			this.setSkewX(value);
		});

		/**表示元素的左内边距。*/
		__getset(0, __proto, 'paddingLeft', function () {
			return 0;
		});

		/**表示元素的上内边距。*/
		__getset(0, __proto, 'paddingTop', function () {
			return 0;
		});

		/**是否为绝对定位。*/
		__getset(0, __proto, 'absolute', function () {
			return true;
		});

		Style.__init__ = function () {
			Style._TF_EMPTY = new TransformInfo();
			Style.EMPTY = new Style();
		}

		Style.EMPTY = null
		Style._TF_EMPTY = null
		return Style;
	})()


	/**
	*@private
	*<code>Font</code> 类是字体显示定义类。
	*/
	//class laya.display.css.Font
	var Font = (function () {
		function Font(src) {
			this._type = 0;
			this._weight = 0;
			this._decoration = null;
			this._text = null;
			this.indent = 0;
			this._color = Color.create(Font.defaultColor);
			this.family = Font.defaultFamily;
			this.stroke = Font._STROKE;
			this.size = Font.defaultSize;
			src && src !== Font.EMPTY && src.copyTo(this);
		}

		__class(Font, 'laya.display.css.Font');
		var __proto = Font.prototype;
		/**
		*字体样式字符串。
		*/
		__proto.set = function (value) {
			this._text = null;
			var strs = value.split(' ');
			for (var i = 0, n = strs.length; i < n; i++) {
				var str = strs[i];
				switch (str) {
					case 'italic':
						this.italic = true;
						continue;
					case 'bold':
						this.bold = true;
						continue;
				}
				if (str.indexOf('px') > 0) {
					this.size = parseInt(str);
					this.family = strs[i + 1];
					i++;
					continue;
				}
			}
		}

		/**
		*返回字体样式字符串。
		*@return 字体样式字符串。
		*/
		__proto.toString = function () {
			this._text = ""
			this.italic && (this._text += "italic ");
			this.bold && (this._text += "bold ");
			return this._text += this.size + "px " + this.family;
		}

		/**
		*将当前的属性值复制到传入的 <code>Font</code> 对象。
		*@param dec 一个 Font 对象。
		*/
		__proto.copyTo = function (dec) {
			dec._type = this._type;
			dec._text = this._text;
			dec._weight = this._weight;
			dec._color = this._color;
			dec.family = this.family;
			dec.stroke = this.stroke != Font._STROKE ? this.stroke.slice() : Font._STROKE;
			dec.indent = this.indent;
			dec.size = this.size;
		}

		/**
		*表示是否为密码格式。
		*/
		__getset(0, __proto, 'password', function () {
			return (this._type & 0x400) !== 0;
		}, function (value) {
			value ? (this._type |= 0x400) : (this._type &= ~0x400);
		});

		/**
		*表示颜色字符串。
		*/
		__getset(0, __proto, 'color', function () {
			return this._color.strColor;
		}, function (value) {
			this._color = Color.create(value);
		});

		/**
		*表示是否为斜体。
		*/
		__getset(0, __proto, 'italic', function () {
			return (this._type & 0x200) !== 0;
		}, function (value) {
			value ? (this._type |= 0x200) : (this._type &= ~0x200);
		});

		/**
		*表示是否为粗体。
		*/
		__getset(0, __proto, 'bold', function () {
			return (this._type & 0x800) !== 0;
		}, function (value) {
			value ? (this._type |= 0x800) : (this._type &= ~0x800);
		});

		/**
		*文本的粗细。
		*/
		__getset(0, __proto, 'weight', function () {
			return "" + this._weight;
		}, function (value) {
			var weight = 0;
			switch (value) {
				case 'normal':
					break;
				case 'bold':
					this.bold = true;
					weight = 700;
					break;
				case 'bolder':
					weight = 800;
					break;
				case 'lighter':
					weight = 100;
					break;
				default:
					weight = parseInt(value);
			}
			this._weight = weight;
			this._text = null;
		});

		/**
		*规定添加到文本的修饰。
		*/
		__getset(0, __proto, 'decoration', function () {
			return this._decoration ? this._decoration.value : "none";
		}, function (value) {
			var strs = value.split(' ');
			this._decoration || (this._decoration = {});
			switch (strs[0]) {
				case '_':
					this._decoration.type = 'underline'
					break;
				case '-':
					this._decoration.type = 'line-through'
					break;
				case 'overline':
					this._decoration.type = 'overline'
					break;
				default:
					this._decoration.type = strs[0];
			}
			strs[1] && (this._decoration.color = Color.create(strs));
			this._decoration.value = value;
		});

		Font.__init__ = function () {
			Font.EMPTY = new Font(null);
		}

		Font.EMPTY = null
		Font.defaultColor = "#000000";
		Font.defaultSize = 12;
		Font.defaultFamily = "Arial";
		Font.defaultFont = "12px Arial";
		Font._STROKE = [0, "#000000"];
		Font._ITALIC = 0x200;
		Font._PASSWORD = 0x400;
		Font._BOLD = 0x800;
		return Font;
	})()


	/**
	*@private
	*/
	//class laya.display.css.TransformInfo
	var TransformInfo = (function () {
		function TransformInfo() {
			this.translateX = 0;
			this.translateY = 0;
			this.scaleX = 1;
			this.scaleY = 1;
			this.rotate = 0;
			this.skewX = 0;
			this.skewY = 0;
		}

		__class(TransformInfo, 'laya.display.css.TransformInfo');
		return TransformInfo;
	})()


	/**
	*<code>Graphics</code> 类用于创建绘图显示对象。Graphics可以同时绘制多个位图或者矢量图，还可以结合save，restore，transform，scale，rotate，translate，alpha等指令对绘图效果进行变化。
	*Graphics以命令流方式存储，可以通过cmds属性访问所有命令流。Graphics是比Sprite更轻量级的对象，合理使用能提高应用性能(比如把大量的节点绘图改为一个节点的Graphics命令集合，能减少大量节点创建消耗)。
	*@see laya.display.Sprite#graphics
	*/
	//class laya.display.Graphics
	var Graphics = (function () {
		function Graphics() {
			//this._sp=null;
			this._one = null;
			this._cmds = null;
			//this._vectorgraphArray=null;
			//this._graphicBounds=null;
			this._render = this._renderEmpty;
			if (Render.isConchNode) {
				/*__JS__ */this._nativeObj = new _conchGraphics();;
				/*__JS__ */this.id = this._nativeObj.conchID;;
			}
		}

		__class(Graphics, 'laya.display.Graphics');
		var __proto = Graphics.prototype;
		/**
		*<p>销毁此对象。</p>
		*/
		__proto.destroy = function () {
			this.clear();
			if (this._graphicBounds) this._graphicBounds.destroy();
			this._graphicBounds = null;
			this._vectorgraphArray = null;
			this._sp && (this._sp._renderType = 0);
			this._sp = null;
		}

		/**
		*<p>清空绘制命令。</p>
		*@param recoverCmds 是否回收绘图指令
		*/
		__proto.clear = function (recoverCmds) {
			(recoverCmds === void 0) && (recoverCmds = false);
			if (recoverCmds) {
				var tCmd = this._one;
				if (this._cmds) {
					var i = 0, len = this._cmds.length;
					for (i = 0; i < len; i++) {
						tCmd = this._cmds[i];
						if (tCmd && (tCmd.callee === Render._context._drawTexture || tCmd.callee === Render._context._drawTextureWithTransform)) {
							tCmd[0] = null;
							Graphics._cache.push(tCmd);
						}
					}
					this._cmds.length = 0;
				} else if (tCmd) {
					if (tCmd && (tCmd.callee === Render._context._drawTexture || tCmd.callee === Render._context._drawTextureWithTransform)) {
						tCmd[0] = null;
						Graphics._cache.push(tCmd);
					}
				}
			} else {
				this._cmds = null;
			}
			this._one = null;
			this._render = this._renderEmpty;
			this._sp && (this._sp._renderType &= ~ /*laya.renders.RenderSprite.IMAGE*/0x01 & ~ /*laya.renders.RenderSprite.GRAPHICS*/0x200);
			this._repaint();
			if (this._vectorgraphArray) {
				for (i = 0, len = this._vectorgraphArray.length; i < len; i++) {
					VectorGraphManager.getInstance().deleteShape(this._vectorgraphArray[i]);
				}
				this._vectorgraphArray.length = 0;
			}
		}

		/**@private */
		__proto._clearBoundsCache = function () {
			if (this._graphicBounds) this._graphicBounds.reset();
		}

		/**@private */
		__proto._initGraphicBounds = function () {
			if (!this._graphicBounds) {
				this._graphicBounds = new GraphicsBounds();
				this._graphicBounds._graphics = this;
			}
		}

		/**
		*@private
		*重绘此对象。
		*/
		__proto._repaint = function () {
			this._clearBoundsCache();
			this._sp && this._sp.repaint();
		}

		/**@private */
		__proto._isOnlyOne = function () {
			return !this._cmds || this._cmds.length === 0;
		}

		/**
		*获取位置及宽高信息矩阵(比较耗CPU，频繁使用会造成卡顿，尽量少用)。
		*@param realSize （可选）使用图片的真实大小，默认为false
		*@return 位置与宽高组成的 一个 Rectangle 对象。
		*/
		__proto.getBounds = function (realSize) {
			(realSize === void 0) && (realSize = false);
			this._initGraphicBounds();
			return this._graphicBounds.getBounds(realSize);
		}

		/**
		*@private
		*@param realSize （可选）使用图片的真实大小，默认为false
		*获取端点列表。
		*/
		__proto.getBoundPoints = function (realSize) {
			(realSize === void 0) && (realSize = false);
			this._initGraphicBounds();
			return this._graphicBounds.getBoundPoints(realSize);
		}

		__proto._addCmd = function (a) {
			this._cmds = this._cmds || [];
			a.callee = a.shift();
			this._cmds.push(a);
		}

		/**
		*绘制纹理。
		*@param tex 纹理。
		*@param x （可选）X轴偏移量。
		*@param y （可选）Y轴偏移量。
		*@param width （可选）宽度。
		*@param height （可选）高度。
		*@param m （可选）矩阵信息。
		*@param alpha （可选）透明度。
		*/
		__proto.drawTexture = function (tex, x, y, width, height, m, alpha) {
			(x === void 0) && (x = 0);
			(y === void 0) && (y = 0);
			(width === void 0) && (width = 0);
			(height === void 0) && (height = 0);
			(alpha === void 0) && (alpha = 1);
			if (!tex || alpha < 0.01) return null;
			if (!width) width = tex.sourceWidth;
			if (!height) height = tex.sourceHeight;
			var wRate = width / tex.sourceWidth;
			var hRate = height / tex.sourceHeight;
			width = tex.width * wRate;
			height = tex.height * hRate;
			if (tex.loaded && (width <= 0 || height <= 0)) return null;
			x += tex.offsetX * wRate;
			y += tex.offsetY * hRate;
			this._sp && (this._sp._renderType |=/*laya.renders.RenderSprite.GRAPHICS*/0x200);
			if (Graphics._cache.length) {
				var args = Graphics._cache.pop();
				args[0] = tex;
				args[1] = x;
				args[2] = y;
				args[3] = width;
				args[4] = height;
				args[5] = m;
				args[6] = alpha;
			} else {
				args = [tex, x, y, width, height, m, alpha];
			}
			args.callee = (m || alpha != 1) ? Render._context._drawTextureWithTransform : Render._context._drawTexture;
			if (this._one == null && !m && alpha == 1) {
				this._one = args;
				this._render = this._renderOneImg;
			} else {
				this._saveToCmd(args.callee, args);
			}
			if (!tex.loaded) {
				tex.once(/*laya.events.Event.LOADED*/"loaded", this, this._textureLoaded, [tex, args]);
			}
			this._repaint();
			return args;
		}

		/**
		*@private 清理贴图并替换为最新的
		*@param tex
		*/
		__proto.cleanByTexture = function (tex, x, y, width, height) {
			(width === void 0) && (width = 0);
			(height === void 0) && (height = 0);
			if (!tex) return this.clear();
			if (this._one && this._render === this._renderOneImg) {
				if (!width) width = tex.sourceWidth;
				if (!height) height = tex.sourceHeight;
				var wRate = width / tex.sourceWidth;
				var hRate = height / tex.sourceHeight;
				width = tex.width * wRate;
				height = tex.height * hRate;
				x += tex.offsetX * wRate;
				y += tex.offsetY * hRate;
				this._one[0] = tex;
				this._one[1] = x;
				this._one[2] = y;
				this._one[3] = width;
				this._one[4] = height;
			} else {
				this.clear();
				tex && this.drawTexture(tex, x, y, width, height);
			}
		}

		/**
		*批量绘制同样纹理。
		*@param tex 纹理。
		*@param pos 绘制次数和坐标。
		*/
		__proto.drawTextures = function (tex, pos) {
			if (!tex) return;
			this._saveToCmd(Render._context._drawTextures, [tex, pos]);
		}

		/**
		*用texture填充。
		*@param tex 纹理。
		*@param x X轴偏移量。
		*@param y Y轴偏移量。
		*@param width （可选）宽度。
		*@param height （可选）高度。
		*@param type （可选）填充类型 repeat|repeat-x|repeat-y|no-repeat
		*@param offset （可选）贴图纹理偏移
		*
		*/
		__proto.fillTexture = function (tex, x, y, width, height, type, offset) {
			(width === void 0) && (width = 0);
			(height === void 0) && (height = 0);
			(type === void 0) && (type = "repeat");
			if (!tex) return;
			var args = [tex, x, y, width, height, type, offset || Point.EMPTY, {}];
			if (!tex.loaded) {
				tex.once(/*laya.events.Event.LOADED*/"loaded", this, this._textureLoaded, [tex, args]);
			}
			this._saveToCmd(Render._context._fillTexture, args);
		}

		__proto._textureLoaded = function (tex, param) {
			param[3] = param[3] || tex.width;
			param[4] = param[4] || tex.height;
			this._repaint();
		}

		/**
		*@private
		*保存到命令流。
		*/
		__proto._saveToCmd = function (fun, args) {
			this._sp && (this._sp._renderType |=/*laya.renders.RenderSprite.GRAPHICS*/0x200);
			if (this._one == null) {
				this._one = args;
				this._render = this._renderOne;
			} else {
				this._sp && (this._sp._renderType &= ~ /*laya.renders.RenderSprite.IMAGE*/0x01);
				this._render = this._renderAll;
				(this._cmds || (this._cmds = [])).length === 0 && this._cmds.push(this._one);
				this._cmds.push(args);
			}
			args.callee = fun;
			this._repaint();
			return args;
		}

		/**
		*设置剪裁区域，超出剪裁区域的坐标不显示。
		*@param x X 轴偏移量。
		*@param y Y 轴偏移量。
		*@param width 宽度。
		*@param height 高度。
		*/
		__proto.clipRect = function (x, y, width, height) {
			this._saveToCmd(Render._context._clipRect, [x, y, width, height]);
		}

		/**
		*在画布上绘制文本。
		*@param text 在画布上输出的文本。
		*@param x 开始绘制文本的 x 坐标位置（相对于画布）。
		*@param y 开始绘制文本的 y 坐标位置（相对于画布）。
		*@param font 定义字号和字体，比如"20px Arial"。
		*@param color 定义文本颜色，比如"#ff0000"。
		*@param textAlign 文本对齐方式，可选值："left"，"center"，"right"。
		*/
		__proto.fillText = function (text, x, y, font, color, textAlign, underLine) {
			(underLine === void 0) && (underLine = 0);
			this._saveToCmd(Render._context._fillText, [text, x, y, font || Font.defaultFont, color, textAlign]);
		}

		/**
		*在画布上绘制“被填充且镶边的”文本。
		*@param text 在画布上输出的文本。
		*@param x 开始绘制文本的 x 坐标位置（相对于画布）。
		*@param y 开始绘制文本的 y 坐标位置（相对于画布）。
		*@param font 定义字体和字号，比如"20px Arial"。
		*@param fillColor 定义文本颜色，比如"#ff0000"。
		*@param borderColor 定义镶边文本颜色。
		*@param lineWidth 镶边线条宽度。
		*@param textAlign 文本对齐方式，可选值："left"，"center"，"right"。
		*/
		__proto.fillBorderText = function (text, x, y, font, fillColor, borderColor, lineWidth, textAlign) {
			this._saveToCmd(Render._context._fillBorderText, [text, x, y, font || Font.defaultFont, fillColor, borderColor, lineWidth, textAlign]);
		}

		/**
		*在画布上绘制文本（没有填色）。文本的默认颜色是黑色。
		*@param text 在画布上输出的文本。
		*@param x 开始绘制文本的 x 坐标位置（相对于画布）。
		*@param y 开始绘制文本的 y 坐标位置（相对于画布）。
		*@param font 定义字体和字号，比如"20px Arial"。
		*@param color 定义文本颜色，比如"#ff0000"。
		*@param lineWidth 线条宽度。
		*@param textAlign 文本对齐方式，可选值："left"，"center"，"right"。
		*/
		__proto.strokeText = function (text, x, y, font, color, lineWidth, textAlign) {
			this._saveToCmd(Render._context._strokeText, [text, x, y, font || Font.defaultFont, color, lineWidth, textAlign]);
		}

		/**
		*设置透明度。
		*@param value 透明度。
		*/
		__proto.alpha = function (value) {
			this._saveToCmd(Render._context._alpha, [value]);
		}

		/**
		*设置当前透明度。
		*@param value 透明度。
		*/
		__proto.setAlpha = function (value) {
			this._saveToCmd(Render._context._setAlpha, [value]);
		}

		/**
		*替换绘图的当前转换矩阵。
		*@param mat 矩阵。
		*@param pivotX （可选）水平方向轴心点坐标。
		*@param pivotY （可选）垂直方向轴心点坐标。
		*/
		__proto.transform = function (matrix, pivotX, pivotY) {
			(pivotX === void 0) && (pivotX = 0);
			(pivotY === void 0) && (pivotY = 0);
			this._saveToCmd(Render._context._transform, [matrix, pivotX, pivotY]);
		}

		/**
		*旋转当前绘图。(推荐使用transform，性能更高)
		*@param angle 旋转角度，以弧度计。
		*@param pivotX （可选）水平方向轴心点坐标。
		*@param pivotY （可选）垂直方向轴心点坐标。
		*/
		__proto.rotate = function (angle, pivotX, pivotY) {
			(pivotX === void 0) && (pivotX = 0);
			(pivotY === void 0) && (pivotY = 0);
			this._saveToCmd(Render._context._rotate, [angle, pivotX, pivotY]);
		}

		/**
		*缩放当前绘图至更大或更小。(推荐使用transform，性能更高)
		*@param scaleX 水平方向缩放值。
		*@param scaleY 垂直方向缩放值。
		*@param pivotX （可选）水平方向轴心点坐标。
		*@param pivotY （可选）垂直方向轴心点坐标。
		*/
		__proto.scale = function (scaleX, scaleY, pivotX, pivotY) {
			(pivotX === void 0) && (pivotX = 0);
			(pivotY === void 0) && (pivotY = 0);
			this._saveToCmd(Render._context._scale, [scaleX, scaleY, pivotX, pivotY]);
		}

		/**
		*重新映射画布上的 (0,0)位置。
		*@param x 添加到水平坐标（x）上的值。
		*@param y 添加到垂直坐标（y）上的值。
		*/
		__proto.translate = function (x, y) {
			this._saveToCmd(Render._context._translate, [x, y]);
		}

		/**
		*保存当前环境的状态。
		*/
		__proto.save = function () {
			this._saveToCmd(Render._context._save, []);
		}

		/**
		*返回之前保存过的路径状态和属性。
		*/
		__proto.restore = function () {
			this._saveToCmd(Render._context._restore, []);
		}

		/**
		*@private
		*替换文本内容。
		*@param text 文本内容。
		*@return 替换成功则值为true，否则值为flase。
		*/
		__proto.replaceText = function (text) {
			this._repaint();
			var cmds = this._cmds;
			if (!cmds) {
				if (this._one && this._isTextCmd(this._one.callee)) {
					if (this._one[0].toUpperCase) this._one[0] = text;
					else this._one[0].setText(text);
					return true;
				}
			} else {
				for (var i = cmds.length - 1; i > -1; i--) {
					if (this._isTextCmd(cmds[i].callee)) {
						if (cmds[i][0].toUpperCase) cmds[i][0] = text;
						else cmds[i][0].setText(text);
						return true;
					}
				}
			}
			return false;
		}

		/**@private */
		__proto._isTextCmd = function (fun) {
			return fun === Render._context._fillText || fun === Render._context._fillBorderText || fun === Render._context._strokeText;
		}

		/**
		*@private
		*替换文本颜色。
		*@param color 颜色。
		*/
		__proto.replaceTextColor = function (color) {
			this._repaint();
			var cmds = this._cmds;
			if (!cmds) {
				if (this._one && this._isTextCmd(this._one.callee)) {
					this._one[4] = color;
					if (!this._one[0].toUpperCase) this._one[0].changed = true;
				}
			} else {
				for (var i = cmds.length - 1; i > -1; i--) {
					if (this._isTextCmd(cmds[i].callee)) {
						cmds[i][4] = color;
						if (!cmds[i][0].toUpperCase) cmds[i][0].changed = true;
					}
				}
			}
		}

		/**
		*加载并显示一个图片。
		*@param url 图片地址。
		*@param x （可选）显示图片的x位置。
		*@param y （可选）显示图片的y位置。
		*@param width （可选）显示图片的宽度，设置为0表示使用图片默认宽度。
		*@param height （可选）显示图片的高度，设置为0表示使用图片默认高度。
		*@param complete （可选）加载完成回调。
		*/
		__proto.loadImage = function (url, x, y, width, height, complete) {
			var _$this = this;
			(x === void 0) && (x = 0);
			(y === void 0) && (y = 0);
			(width === void 0) && (width = 0);
			(height === void 0) && (height = 0);
			var tex = Loader.getRes(url);
			if (tex) onloaded(tex);
			else Laya.loader.load(url, Handler.create(null, onloaded), null,/*laya.net.Loader.IMAGE*/"image");
			function onloaded(tex) {
				if (tex) {
					_$this.drawTexture(tex, x, y, width, height);
					if (complete != null) complete.call(_$this._sp, tex);
				}
			}
		}

		/**
		*@private
		*/
		__proto._renderEmpty = function (sprite, context, x, y) { }
		/**
		*@private
		*/
		__proto._renderAll = function (sprite, context, x, y) {
			var cmds = this._cmds, cmd;
			for (var i = 0, n = cmds.length; i < n; i++) {
				(cmd = cmds[i]).callee.call(context, x, y, cmd);
			}
		}

		/**
		*@private
		*/
		__proto._renderOne = function (sprite, context, x, y) {
			this._one.callee.call(context, x, y, this._one);
		}

		/**
		*@private
		*/
		__proto._renderOneImg = function (sprite, context, x, y) {
			this._one.callee.call(context, x, y, this._one);
			if (sprite._renderType !== 2305) {
				sprite._renderType |=/*laya.renders.RenderSprite.IMAGE*/0x01;
			}
		}

		/**
		*绘制一条线。
		*@param fromX X轴开始位置。
		*@param fromY Y轴开始位置。
		*@param toX X轴结束位置。
		*@param toY Y轴结束位置。
		*@param lineColor 颜色。
		*@param lineWidth （可选）线条宽度。
		*/
		__proto.drawLine = function (fromX, fromY, toX, toY, lineColor, lineWidth) {
			(lineWidth === void 0) && (lineWidth = 1);
			var tId = 0;
			if (Render.isWebGL) {
				tId = VectorGraphManager.getInstance().getId();
				if (this._vectorgraphArray == null) this._vectorgraphArray = [];
				this._vectorgraphArray.push(tId);
			};
			var offset = lineWidth % 2 === 0 ? 0 : 0.5;
			var arr = [fromX + offset, fromY + offset, toX + offset, toY + offset, lineColor, lineWidth, tId];
			this._saveToCmd(Render._context._drawLine, arr);
		}

		/**
		*绘制一系列线段。
		*@param x 开始绘制的X轴位置。
		*@param y 开始绘制的Y轴位置。
		*@param points 线段的点集合。格式:[x1,y1,x2,y2,x3,y3...]。
		*@param lineColor 线段颜色，或者填充绘图的渐变对象。
		*@param lineWidth （可选）线段宽度。
		*/
		__proto.drawLines = function (x, y, points, lineColor, lineWidth) {
			(lineWidth === void 0) && (lineWidth = 1);
			var tId = 0;
			if (!points || points.length < 4) return;
			if (Render.isWebGL) {
				tId = VectorGraphManager.getInstance().getId();
				if (this._vectorgraphArray == null) this._vectorgraphArray = [];
				this._vectorgraphArray.push(tId);
			};
			var offset = lineWidth % 2 === 0 ? 0 : 0.5;
			var arr = [x + offset, y + offset, points, lineColor, lineWidth, tId];
			this._saveToCmd(Render._context._drawLines, arr);
		}

		/**
		*绘制一系列曲线。
		*@param x 开始绘制的 X 轴位置。
		*@param y 开始绘制的 Y 轴位置。
		*@param points 线段的点集合，格式[startx,starty,ctrx,ctry,startx,starty...]。
		*@param lineColor 线段颜色，或者填充绘图的渐变对象。
		*@param lineWidth （可选）线段宽度。
		*/
		__proto.drawCurves = function (x, y, points, lineColor, lineWidth) {
			(lineWidth === void 0) && (lineWidth = 1);
			var arr = [x, y, points, lineColor, lineWidth];
			this._saveToCmd(Render._context._drawCurves, arr);
		}

		/**
		*绘制矩形。
		*@param x 开始绘制的 X 轴位置。
		*@param y 开始绘制的 Y 轴位置。
		*@param width 矩形宽度。
		*@param height 矩形高度。
		*@param fillColor 填充颜色，或者填充绘图的渐变对象。
		*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
		*@param lineWidth （可选）边框宽度。
		*/
		__proto.drawRect = function (x, y, width, height, fillColor, lineColor, lineWidth) {
			(lineWidth === void 0) && (lineWidth = 1);
			var offset = lineColor ? lineWidth / 2 : 0;
			var lineOffset = lineColor ? lineWidth : 0;
			var arr = [x + offset, y + offset, width - lineOffset, height - lineOffset, fillColor, lineColor, lineWidth];
			this._saveToCmd(Render._context._drawRect, arr);
		}

		/**
		*绘制圆形。
		*@param x 圆点X 轴位置。
		*@param y 圆点Y 轴位置。
		*@param radius 半径。
		*@param fillColor 填充颜色，或者填充绘图的渐变对象。
		*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
		*@param lineWidth （可选）边框宽度。
		*/
		__proto.drawCircle = function (x, y, radius, fillColor, lineColor, lineWidth) {
			(lineWidth === void 0) && (lineWidth = 1);
			var offset = lineColor ? lineWidth / 2 : 0;
			var tId = 0;
			if (Render.isWebGL) {
				tId = VectorGraphManager.getInstance().getId();
				if (this._vectorgraphArray == null) this._vectorgraphArray = [];
				this._vectorgraphArray.push(tId);
			};
			var arr = [x, y, radius - offset, fillColor, lineColor, lineWidth, tId];
			this._saveToCmd(Render._context._drawCircle, arr);
		}

		/**
		*绘制扇形。
		*@param x 开始绘制的 X 轴位置。
		*@param y 开始绘制的 Y 轴位置。
		*@param radius 扇形半径。
		*@param startAngle 开始角度。
		*@param endAngle 结束角度。
		*@param fillColor 填充颜色，或者填充绘图的渐变对象。
		*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
		*@param lineWidth （可选）边框宽度。
		*/
		__proto.drawPie = function (x, y, radius, startAngle, endAngle, fillColor, lineColor, lineWidth) {
			(lineWidth === void 0) && (lineWidth = 1);
			var offset = lineColor ? lineWidth / 2 : 0;
			var lineOffset = lineColor ? lineWidth : 0;
			var tId = 0;
			if (Render.isWebGL) {
				tId = VectorGraphManager.getInstance().getId();
				if (this._vectorgraphArray == null) this._vectorgraphArray = [];
				this._vectorgraphArray.push(tId);
			};
			var arr = [x + offset, y + offset, radius - lineOffset, startAngle, endAngle, fillColor, lineColor, lineWidth, tId];
			arr[3] = Utils.toRadian(startAngle);
			arr[4] = Utils.toRadian(endAngle);
			this._saveToCmd(Render._context._drawPie, arr);
		}

		/**
		*绘制多边形。
		*@param x 开始绘制的 X 轴位置。
		*@param y 开始绘制的 Y 轴位置。
		*@param points 多边形的点集合。
		*@param fillColor 填充颜色，或者填充绘图的渐变对象。
		*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
		*@param lineWidth （可选）边框宽度。
		*/
		__proto.drawPoly = function (x, y, points, fillColor, lineColor, lineWidth) {
			(lineWidth === void 0) && (lineWidth = 1);
			var tId = 0;
			if (Render.isWebGL) {
				tId = VectorGraphManager.getInstance().getId();
				if (this._vectorgraphArray == null) this._vectorgraphArray = [];
				this._vectorgraphArray.push(tId);
				var tIsConvexPolygon = false;
				if (points.length > 6) {
					tIsConvexPolygon = false;
				} else {
					tIsConvexPolygon = true;
				}
			};
			var offset = lineColor ? (lineWidth % 2 === 0 ? 0 : 0.5) : 0;
			var arr = [x + offset, y + offset, points, fillColor, lineColor, lineWidth, tId, tIsConvexPolygon];
			this._saveToCmd(Render._context._drawPoly, arr);
		}

		/**
		*绘制路径。
		*@param x 开始绘制的 X 轴位置。
		*@param y 开始绘制的 Y 轴位置。
		*@param paths 路径集合，路径支持以下格式：[["moveTo",x,y],["lineTo",x,y,x,y,x,y],["arcTo",x1,y1,x2,y2,r],["closePath"]]。
		*@param brush （可选）刷子定义，支持以下设置{fillStyle}。
		*@param pen （可选）画笔定义，支持以下设置{strokeStyle,lineWidth,lineJoin,lineCap,miterLimit}。
		*/
		__proto.drawPath = function (x, y, paths, brush, pen) {
			var arr = [x, y, paths, brush, pen];
			this._saveToCmd(Render._context._drawPath, arr);
		}

		/**
		*@private
		*命令流。存储了所有绘制命令。
		*/
		__getset(0, __proto, 'cmds', function () {
			return this._cmds;
		}, function (value) {
			this._sp && (this._sp._renderType |=/*laya.renders.RenderSprite.GRAPHICS*/0x200);
			this._cmds = value;
			this._render = this._renderAll;
			this._repaint();
		});

		Graphics.__init__ = function () {
			if (Render.isConchNode) {
				var from = laya.display.Graphics.prototype;
				var to =/*__JS__ */ConchGraphics.prototype;
				var list = ["clear", "destroy", "alpha", "rotate", "transform", "scale", "translate", "save", "restore", "clipRect", "blendMode", "fillText", "fillBorderText", "_fands", "drawRect", "drawCircle", "drawPie", "drawPoly", "drawPath", "drawImageM", "drawLine", "drawLines", "_drawPs", "drawCurves", "replaceText", "replaceTextColor", "_fillImage", "fillTexture", "setSkinMesh", "drawParticle", "drawImageS"];
				for (var i = 0, len = list.length; i <= len; i++) {
					var temp = list[i];
					from[temp] = to[temp];
				}
				from._saveToCmd = null;
				if (to.drawImageS) {
					from.drawTextures = function (tex, pos) {
						if (!tex) return;
						if (!(tex.loaded && tex.bitmap && tex.source)) {
							return;
						};
						var uv = tex.uv, w = tex.bitmap.width, h = tex.bitmap.height;
						this.drawImageS(tex.bitmap.source, uv[0] * w, uv[1] * h, (uv[2] - uv[0]) * w, (uv[5] - uv[3]) * h, tex.offsetX, tex.offsetY, tex.width, tex.height, pos);
					}
				}
				from.drawTexture = function (tex, x, y, width, height, m, alpha) {
					(x === void 0) && (x = 0);
					(y === void 0) && (y = 0);
					(width === void 0) && (width = 0);
					(height === void 0) && (height = 0);
					(alpha === void 0) && (alpha = 1);
					if (!tex) return;
					if (!tex.loaded) {
						tex.once(/*laya.events.Event.LOADED*/"loaded", this, function () {
							this.drawTexture(tex, x, y, width, height, m);
						});
						return;
					}
					if (!(tex.loaded && tex.bitmap && tex.source)) {
						return;
					}
					if (!width) width = tex.sourceWidth;
					if (!height) height = tex.sourceHeight;
					width = width - tex.sourceWidth + tex.width;
					height = height - tex.sourceHeight + tex.height;
					if (width <= 0 || height <= 0) return;
					x += tex.offsetX;
					y += tex.offsetY;
					var uv = tex.uv, w = tex.bitmap.width, h = tex.bitmap.height;
					this.drawImageM(tex.bitmap.source, uv[0] * w, uv[1] * h, (uv[2] - uv[0]) * w, (uv[5] - uv[3]) * h, x, y, width, height, m, alpha);
					this._repaint();
				}
				from.fillTexture = function (tex, x, y, width, height, type, offset) {
					(width === void 0) && (width = 0);
					(height === void 0) && (height = 0);
					(type === void 0) && (type = "repeat");
					if (!tex) return;
					if (tex.loaded) {
						var ctxi = Render._context.ctx;
						var w = tex.bitmap.width, h = tex.bitmap.height, uv = tex.uv;
						var pat;
						if (tex.uv != Texture.DEF_UV) {
							pat = ctxi.createPattern(tex.bitmap.source, type, uv[0] * w, uv[1] * h, (uv[2] - uv[0]) * w, (uv[5] - uv[3]) * h);
						} else {
							pat = ctxi.createPattern(tex.bitmap.source, type);
						};
						var sX = 0, sY = 0;
						if (offset) {
							x += offset.x % tex.width;
							y += offset.y % tex.height;
							sX -= offset.x % tex.width;
							sY -= offset.y % tex.height;
						}
						this._fillImage(pat, x, y, sX, sY, width, height);
					}
				}
			}
		}

		Graphics._cache = [];
		return Graphics;
	})()


	/**
	*@private
	*Graphic bounds数据类
	*/
	//class laya.display.GraphicsBounds
	var GraphicsBounds = (function () {
		function GraphicsBounds() {
			//this._temp=null;
			//this._bounds=null;
			//this._rstBoundPoints=null;
			this._cacheBoundsType = false;
			//this._graphics=null;
		}

		__class(GraphicsBounds, 'laya.display.GraphicsBounds');
		var __proto = GraphicsBounds.prototype;
		/**
		*销毁
		*/
		__proto.destroy = function () {
			this._graphics = null;
			this._temp = null;
			this._rstBoundPoints = null;
			this._bounds = null;
		}

		/**
		*重置数据
		*/
		__proto.reset = function () {
			this._temp && (this._temp.length = 0);
		}

		/**
		*获取位置及宽高信息矩阵(比较耗CPU，频繁使用会造成卡顿，尽量少用)。
		*@param realSize （可选）使用图片的真实大小，默认为false
		*@return 位置与宽高组成的 一个 Rectangle 对象。
		*/
		__proto.getBounds = function (realSize) {
			(realSize === void 0) && (realSize = false);
			if (!this._bounds || !this._temp || this._temp.length < 1 || realSize != this._cacheBoundsType) {
				this._bounds = Rectangle._getWrapRec(this.getBoundPoints(realSize), this._bounds)
			}
			this._cacheBoundsType = realSize;
			return this._bounds;
		}

		/**
		*@private
		*@param realSize （可选）使用图片的真实大小，默认为false
		*获取端点列表。
		*/
		__proto.getBoundPoints = function (realSize) {
			(realSize === void 0) && (realSize = false);
			if (!this._temp || this._temp.length < 1 || realSize != this._cacheBoundsType)
				this._temp = this._getCmdPoints(realSize);
			this._cacheBoundsType = realSize;
			return this._rstBoundPoints = Utils.copyArray(this._rstBoundPoints, this._temp);
		}

		__proto._getCmdPoints = function (realSize) {
			(realSize === void 0) && (realSize = false);
			var context = Render._context;
			var cmds = this._graphics.cmds;
			var rst;
			rst = this._temp || (this._temp = []);
			rst.length = 0;
			if (!cmds && this._graphics._one != null) {
				GraphicsBounds._tempCmds.length = 0;
				GraphicsBounds._tempCmds.push(this._graphics._one);
				cmds = GraphicsBounds._tempCmds;
			}
			if (!cmds)
				return rst;
			var matrixs;
			matrixs = GraphicsBounds._tempMatrixArrays;
			matrixs.length = 0;
			var tMatrix = GraphicsBounds._initMatrix;
			tMatrix.identity();
			var tempMatrix = GraphicsBounds._tempMatrix;
			var cmd;
			var tex;
			for (var i = 0, n = cmds.length; i < n; i++) {
				cmd = cmds[i];
				switch (cmd.callee) {
					case context._save:
					case 7:
						matrixs.push(tMatrix);
						tMatrix = tMatrix.clone();
						break;
					case context._restore:
					case 8:
						tMatrix = matrixs.pop();
						break;
					case context._scale:
					case 5:
						tempMatrix.identity();
						tempMatrix.translate(-cmd[2], -cmd[3]);
						tempMatrix.scale(cmd[0], cmd[1]);
						tempMatrix.translate(cmd[2], cmd[3]);
						this._switchMatrix(tMatrix, tempMatrix);
						break;
					case context._rotate:
					case 3:
						tempMatrix.identity();
						tempMatrix.translate(-cmd[1], -cmd[2]);
						tempMatrix.rotate(cmd[0]);
						tempMatrix.translate(cmd[1], cmd[2]);
						this._switchMatrix(tMatrix, tempMatrix);
						break;
					case context._translate:
					case 6:
						tempMatrix.identity();
						tempMatrix.translate(cmd[0], cmd[1]);
						this._switchMatrix(tMatrix, tempMatrix);
						break;
					case context._transform:
					case 4:
						tempMatrix.identity();
						tempMatrix.translate(-cmd[1], -cmd[2]);
						tempMatrix.concat(cmd[0]);
						tempMatrix.translate(cmd[1], cmd[2]);
						this._switchMatrix(tMatrix, tempMatrix);
						break;
					case 16:
					case 24:
						GraphicsBounds._addPointArrToRst(rst, Rectangle._getBoundPointS(cmd[0], cmd[1], cmd[2], cmd[3]), tMatrix);
						break;
					case 17:
						tMatrix.copyTo(tempMatrix);
						tempMatrix.concat(cmd[4]);
						GraphicsBounds._addPointArrToRst(rst, Rectangle._getBoundPointS(cmd[0], cmd[1], cmd[2], cmd[3]), tempMatrix);
						break;
					case context._drawTexture:
						tex = cmd[0];
						if (realSize) {
							if (cmd[3] && cmd[4]) {
								GraphicsBounds._addPointArrToRst(rst, Rectangle._getBoundPointS(cmd[1], cmd[2], cmd[3], cmd[4]), tMatrix);
							} else {
								tex = cmd[0];
								GraphicsBounds._addPointArrToRst(rst, Rectangle._getBoundPointS(cmd[1], cmd[2], tex.width, tex.height), tMatrix);
							}
						} else {
							var wRate = (cmd[3] || tex.sourceWidth) / tex.width;
							var hRate = (cmd[4] || tex.sourceHeight) / tex.height;
							var oWidth = wRate * tex.sourceWidth;
							var oHeight = hRate * tex.sourceHeight;
							var offX = tex.offsetX > 0 ? tex.offsetX : 0;
							var offY = tex.offsetY > 0 ? tex.offsetY : 0;
							offX *= wRate;
							offY *= hRate;
							GraphicsBounds._addPointArrToRst(rst, Rectangle._getBoundPointS(cmd[1] - offX, cmd[2] - offY, oWidth, oHeight), tMatrix);
						}
						break;
					case context._fillTexture:
						if (cmd[3] && cmd[4]) {
							GraphicsBounds._addPointArrToRst(rst, Rectangle._getBoundPointS(cmd[1], cmd[2], cmd[3], cmd[4]), tMatrix);
						} else {
							tex = cmd[0];
							GraphicsBounds._addPointArrToRst(rst, Rectangle._getBoundPointS(cmd[1], cmd[2], tex.width, tex.height), tMatrix);
						}
						break;
					case context._drawTextureWithTransform: ;
						var drawMatrix;
						if (cmd[5]) {
							tMatrix.copyTo(tempMatrix);
							tempMatrix.concat(cmd[5]);
							drawMatrix = tempMatrix;
						} else {
							drawMatrix = tMatrix;
						}
						if (realSize) {
							if (cmd[3] && cmd[4]) {
								GraphicsBounds._addPointArrToRst(rst, Rectangle._getBoundPointS(cmd[1], cmd[2], cmd[3], cmd[4]), drawMatrix);
							} else {
								tex = cmd[0];
								GraphicsBounds._addPointArrToRst(rst, Rectangle._getBoundPointS(cmd[1], cmd[2], tex.width, tex.height), drawMatrix);
							}
						} else {
							tex = cmd[0];
							wRate = (cmd[3] || tex.sourceWidth) / tex.width;
							hRate = (cmd[4] || tex.sourceHeight) / tex.height;
							oWidth = wRate * tex.sourceWidth;
							oHeight = hRate * tex.sourceHeight;
							offX = tex.offsetX > 0 ? tex.offsetX : 0;
							offY = tex.offsetY > 0 ? tex.offsetY : 0;
							offX *= wRate;
							offY *= hRate;
							GraphicsBounds._addPointArrToRst(rst, Rectangle._getBoundPointS(cmd[1] - offX, cmd[2] - offY, oWidth, oHeight), drawMatrix);
						}
						break;
					case context._drawRect:
					case 13:
						GraphicsBounds._addPointArrToRst(rst, Rectangle._getBoundPointS(cmd[0], cmd[1], cmd[2], cmd[3]), tMatrix);
						break;
					case context._drawCircle:
					case context._fillCircle:
					case 14:
						GraphicsBounds._addPointArrToRst(rst, Rectangle._getBoundPointS(cmd[0] - cmd[2], cmd[1] - cmd[2], cmd[2] + cmd[2], cmd[2] + cmd[2]), tMatrix);
						break;
					case context._drawLine:
					case 20:
						GraphicsBounds._tempPoints.length = 0;
						var lineWidth = NaN;
						lineWidth = cmd[5] * 0.5;
						if (cmd[0] == cmd[2]) {
							GraphicsBounds._tempPoints.push(cmd[0] + lineWidth, cmd[1], cmd[2] + lineWidth, cmd[3], cmd[0] - lineWidth, cmd[1], cmd[2] - lineWidth, cmd[3]);
						} else if (cmd[1] == cmd[3]) {
							GraphicsBounds._tempPoints.push(cmd[0], cmd[1] + lineWidth, cmd[2], cmd[3] + lineWidth, cmd[0], cmd[1] - lineWidth, cmd[2], cmd[3] - lineWidth);
						} else {
							GraphicsBounds._tempPoints.push(cmd[0], cmd[1], cmd[2], cmd[3]);
						}
						GraphicsBounds._addPointArrToRst(rst, GraphicsBounds._tempPoints, tMatrix);
						break;
					case context._drawCurves:
					case 22:
						GraphicsBounds._addPointArrToRst(rst, Bezier.I.getBezierPoints(cmd[2]), tMatrix, cmd[0], cmd[1]);
						break;
					case context._drawPoly:
					case context._drawLines:
					case 18:
						GraphicsBounds._addPointArrToRst(rst, cmd[2], tMatrix, cmd[0], cmd[1]);
						break;
					case context._drawPath:
					case 19:
						GraphicsBounds._addPointArrToRst(rst, this._getPathPoints(cmd[2]), tMatrix, cmd[0], cmd[1]);
						break;
					case context._drawPie:
					case 15:
						GraphicsBounds._addPointArrToRst(rst, this._getPiePoints(cmd[0], cmd[1], cmd[2], cmd[3], cmd[4]), tMatrix);
						break;
				}
			}
			if (rst.length > 200) {
				rst = Utils.copyArray(rst, Rectangle._getWrapRec(rst)._getBoundPoints());
			} else if (rst.length > 8)
				rst = GrahamScan.scanPList(rst);
			return rst;
		}

		__proto._switchMatrix = function (tMatix, tempMatrix) {
			tempMatrix.concat(tMatix);
			tempMatrix.copyTo(tMatix);
		}

		__proto._getPiePoints = function (x, y, radius, startAngle, endAngle) {
			var rst = GraphicsBounds._tempPoints;
			GraphicsBounds._tempPoints.length = 0;
			rst.push(x, y);
			var dP = Math.PI / 10;
			var i = NaN;
			for (i = startAngle; i < endAngle; i += dP) {
				rst.push(x + radius * Math.cos(i), y + radius * Math.sin(i));
			}
			if (endAngle != i) {
				rst.push(x + radius * Math.cos(endAngle), y + radius * Math.sin(endAngle));
			}
			return rst;
		}

		__proto._getPathPoints = function (paths) {
			var i = 0, len = 0;
			var rst = GraphicsBounds._tempPoints;
			rst.length = 0;
			len = paths.length;
			var tCMD;
			for (i = 0; i < len; i++) {
				tCMD = paths[i];
				if (tCMD.length > 1) {
					rst.push(tCMD[1], tCMD[2]);
					if (tCMD.length > 3) {
						rst.push(tCMD[3], tCMD[4]);
					}
				}
			}
			return rst;
		}

		GraphicsBounds._addPointArrToRst = function (rst, points, matrix, dx, dy) {
			(dx === void 0) && (dx = 0);
			(dy === void 0) && (dy = 0);
			var i = 0, len = 0;
			len = points.length;
			for (i = 0; i < len; i += 2) {
				GraphicsBounds._addPointToRst(rst, points[i] + dx, points[i + 1] + dy, matrix);
			}
		}

		GraphicsBounds._addPointToRst = function (rst, x, y, matrix) {
			var _tempPoint = Point.TEMP;
			_tempPoint.setTo(x ? x : 0, y ? y : 0);
			matrix.transformPoint(_tempPoint);
			rst.push(_tempPoint.x, _tempPoint.y);
		}

		GraphicsBounds._tempPoints = [];
		GraphicsBounds._tempMatrixArrays = [];
		GraphicsBounds._tempCmds = [];
		__static(GraphicsBounds,
			['_tempMatrix', function () { return this._tempMatrix = new Matrix(); }, '_initMatrix', function () { return this._initMatrix = new Matrix(); }
			]);
		return GraphicsBounds;
	})()


	/**
	*<code>Event</code> 是事件类型的集合。一般当发生事件时，<code>Event</code> 对象将作为参数传递给事件侦听器。
	*/
	//class laya.events.Event
	var Event = (function () {
		function Event() {
			//this.type=null;
			//this.nativeEvent=null;
			//this.target=null;
			//this.currentTarget=null;
			//this._stoped=false;
			//this.touchId=0;
			//this.keyCode=0;
			//this.delta=0;
		}

		__class(Event, 'laya.events.Event');
		var __proto = Event.prototype;
		/**
		*设置事件数据。
		*@param type 事件类型。
		*@param currentTarget 事件目标触发对象。
		*@param target 事件当前冒泡对象。
		*@return 返回当前 Event 对象。
		*/
		__proto.setTo = function (type, currentTarget, target) {
			this.type = type;
			this.currentTarget = currentTarget;
			this.target = target;
			return this;
		}

		/**
		*阻止对事件流中当前节点的后续节点中的所有事件侦听器进行处理。此方法不会影响当前节点 (currentTarget)中的任何事件侦听器。
		*/
		__proto.stopPropagation = function () {
			this._stoped = true;
		}

		/**鼠标在 Stage 上的 Y 轴坐标*/
		__getset(0, __proto, 'stageY', function () {
			return Laya.stage.mouseY;
		});

		/**
		*包含按下或释放的键的字符代码值。字符代码值为英文键盘值。
		*/
		__getset(0, __proto, 'charCode', function () {
			return this.nativeEvent.charCode;
		});

		/**
		*触摸点列表。
		*/
		__getset(0, __proto, 'touches', function () {
			var arr = this.nativeEvent.touches;
			if (arr) {
				var stage = Laya.stage;
				for (var i = 0, n = arr.length; i < n; i++) {
					var e = arr[i];
					var point = Point.TEMP;
					point.setTo(e.clientX, e.clientY);
					stage._canvasTransform.invertTransformPoint(point);
					stage.transform.invertTransformPoint(point);
					e.stageX = point.x;
					e.stageY = point.y;
				}
			}
			return arr;
		});

		/**
		*表示键在键盘上的位置。这对于区分在键盘上多次出现的键非常有用。<br>
		*例如，您可以根据此属性的值来区分左 Shift 键和右 Shift 键：左 Shift 键的值为 KeyLocation.LEFT，右 Shift 键的值为 KeyLocation.RIGHT。另一个示例是区分标准键盘 (KeyLocation.STANDARD)与数字键盘 (KeyLocation.NUM_PAD)上按下的数字键。
		*/
		__getset(0, __proto, 'keyLocation', function () {
			return this.nativeEvent.keyLocation;
		});

		/**
		*表示 Ctrl 键是处于活动状态 (true)还是非活动状态 (false)。
		*/
		__getset(0, __proto, 'ctrlKey', function () {
			return this.nativeEvent.ctrlKey;
		});

		/**
		*表示 Alt 键是处于活动状态 (true)还是非活动状态 (false)。
		*/
		__getset(0, __proto, 'altKey', function () {
			return this.nativeEvent.altKey;
		});

		/**
		*表示 Shift 键是处于活动状态 (true)还是非活动状态 (false)。
		*/
		__getset(0, __proto, 'shiftKey', function () {
			return this.nativeEvent.shiftKey;
		});

		/**鼠标在 Stage 上的 X 轴坐标*/
		__getset(0, __proto, 'stageX', function () {
			return Laya.stage.mouseX;
		});

		Event.EMPTY = new Event();
		Event.MOUSE_DOWN = "mousedown";
		Event.MOUSE_UP = "mouseup";
		Event.CLICK = "click";
		Event.RIGHT_MOUSE_DOWN = "rightmousedown";
		Event.RIGHT_MOUSE_UP = "rightmouseup";
		Event.RIGHT_CLICK = "rightclick";
		Event.MOUSE_MOVE = "mousemove";
		Event.MOUSE_OVER = "mouseover";
		Event.MOUSE_OUT = "mouseout";
		Event.MOUSE_WHEEL = "mousewheel";
		Event.ROLL_OVER = "mouseover";
		Event.ROLL_OUT = "mouseout";
		Event.DOUBLE_CLICK = "doubleclick";
		Event.CHANGE = "change";
		Event.CHANGED = "changed";
		Event.RESIZE = "resize";
		Event.ADDED = "added";
		Event.REMOVED = "removed";
		Event.DISPLAY = "display";
		Event.UNDISPLAY = "undisplay";
		Event.ERROR = "error";
		Event.COMPLETE = "complete";
		Event.LOADED = "loaded";
		Event.PROGRESS = "progress";
		Event.INPUT = "input";
		Event.RENDER = "render";
		Event.OPEN = "open";
		Event.MESSAGE = "message";
		Event.CLOSE = "close";
		Event.KEY_DOWN = "keydown";
		Event.KEY_PRESS = "keypress";
		Event.KEY_UP = "keyup";
		Event.FRAME = "enterframe";
		Event.DRAG_START = "dragstart";
		Event.DRAG_MOVE = "dragmove";
		Event.DRAG_END = "dragend";
		Event.ENTER = "enter";
		Event.SELECT = "select";
		Event.BLUR = "blur";
		Event.FOCUS = "focus";
		Event.VISIBILITY_CHANGE = "visibilitychange";
		Event.FOCUS_CHANGE = "focuschange";
		Event.PLAYED = "played";
		Event.PAUSED = "paused";
		Event.STOPPED = "stopped";
		Event.START = "start";
		Event.END = "end";
		Event.ENABLE_CHANGED = "enablechanged";
		Event.ACTIVE_IN_HIERARCHY_CHANGED = "activeinhierarchychanged";
		Event.COMPONENT_ADDED = "componentadded";
		Event.COMPONENT_REMOVED = "componentremoved";
		Event.LAYER_CHANGED = "layerchanged";
		Event.HIERARCHY_LOADED = "hierarchyloaded";
		Event.RECOVERED = "recovered";
		Event.RELEASED = "released";
		Event.LINK = "link";
		Event.LABEL = "label";
		Event.FULL_SCREEN_CHANGE = "fullscreenchange";
		Event.DEVICE_LOST = "devicelost";
		Event.MESH_CHANGED = "meshchanged";
		Event.MATERIAL_CHANGED = "materialchanged";
		Event.WORLDMATRIX_NEEDCHANGE = "worldmatrixneedchanged";
		Event.ANIMATION_CHANGED = "animationchanged";
		return Event;
	})()


	/**
	*<code>Keyboard</code> 类的属性是一些常数，这些常数表示控制游戏时最常用的键。
	*/
	//class laya.events.Keyboard
	var Keyboard = (function () {
		function Keyboard() { };
		__class(Keyboard, 'laya.events.Keyboard');
		Keyboard.NUMBER_0 = 48;
		Keyboard.NUMBER_1 = 49;
		Keyboard.NUMBER_2 = 50;
		Keyboard.NUMBER_3 = 51;
		Keyboard.NUMBER_4 = 52;
		Keyboard.NUMBER_5 = 53;
		Keyboard.NUMBER_6 = 54;
		Keyboard.NUMBER_7 = 55;
		Keyboard.NUMBER_8 = 56;
		Keyboard.NUMBER_9 = 57;
		Keyboard.A = 65;
		Keyboard.B = 66;
		Keyboard.C = 67;
		Keyboard.D = 68;
		Keyboard.E = 69;
		Keyboard.F = 70;
		Keyboard.G = 71;
		Keyboard.H = 72;
		Keyboard.I = 73;
		Keyboard.J = 74;
		Keyboard.K = 75;
		Keyboard.L = 76;
		Keyboard.M = 77;
		Keyboard.N = 78;
		Keyboard.O = 79;
		Keyboard.P = 80;
		Keyboard.Q = 81;
		Keyboard.R = 82;
		Keyboard.S = 83;
		Keyboard.T = 84;
		Keyboard.U = 85;
		Keyboard.V = 86;
		Keyboard.W = 87;
		Keyboard.X = 88;
		Keyboard.Y = 89;
		Keyboard.Z = 90;
		Keyboard.F1 = 112;
		Keyboard.F2 = 113;
		Keyboard.F3 = 114;
		Keyboard.F4 = 115;
		Keyboard.F5 = 116;
		Keyboard.F6 = 117;
		Keyboard.F7 = 118;
		Keyboard.F8 = 119;
		Keyboard.F9 = 120;
		Keyboard.F10 = 121;
		Keyboard.F11 = 122;
		Keyboard.F12 = 123;
		Keyboard.F13 = 124;
		Keyboard.F14 = 125;
		Keyboard.F15 = 126;
		Keyboard.NUMPAD = 21;
		Keyboard.NUMPAD_0 = 96;
		Keyboard.NUMPAD_1 = 97;
		Keyboard.NUMPAD_2 = 98;
		Keyboard.NUMPAD_3 = 99;
		Keyboard.NUMPAD_4 = 100;
		Keyboard.NUMPAD_5 = 101;
		Keyboard.NUMPAD_6 = 102;
		Keyboard.NUMPAD_7 = 103;
		Keyboard.NUMPAD_8 = 104;
		Keyboard.NUMPAD_9 = 105;
		Keyboard.NUMPAD_ADD = 107;
		Keyboard.NUMPAD_DECIMAL = 110;
		Keyboard.NUMPAD_DIVIDE = 111;
		Keyboard.NUMPAD_ENTER = 108;
		Keyboard.NUMPAD_MULTIPLY = 106;
		Keyboard.NUMPAD_SUBTRACT = 109;
		Keyboard.SEMICOLON = 186;
		Keyboard.EQUAL = 187;
		Keyboard.COMMA = 188;
		Keyboard.MINUS = 189;
		Keyboard.PERIOD = 190;
		Keyboard.SLASH = 191;
		Keyboard.BACKQUOTE = 192;
		Keyboard.LEFTBRACKET = 219;
		Keyboard.BACKSLASH = 220;
		Keyboard.RIGHTBRACKET = 221;
		Keyboard.QUOTE = 222;
		Keyboard.ALTERNATE = 18;
		Keyboard.BACKSPACE = 8;
		Keyboard.CAPS_LOCK = 20;
		Keyboard.COMMAND = 15;
		Keyboard.CONTROL = 17;
		Keyboard.DELETE = 46;
		Keyboard.ENTER = 13;
		Keyboard.ESCAPE = 27;
		Keyboard.PAGE_UP = 33;
		Keyboard.PAGE_DOWN = 34;
		Keyboard.END = 35;
		Keyboard.HOME = 36;
		Keyboard.LEFT = 37;
		Keyboard.UP = 38;
		Keyboard.RIGHT = 39;
		Keyboard.DOWN = 40;
		Keyboard.SHIFT = 16;
		Keyboard.SPACE = 32;
		Keyboard.TAB = 9;
		Keyboard.INSERT = 45;
		return Keyboard;
	})()


	/**
	*<p><code>KeyBoardManager</code> 是键盘事件管理类。该类从浏览器中接收键盘事件，并派发该事件。</p>
	*<p>派发事件时若 Stage.focus 为空则只从 Stage 上派发该事件，否则将从 Stage.focus 对象开始一直冒泡派发该事件。所以在 Laya.stage 上监听键盘事件一定能够收到，如果在其他地方监听，则必须处在Stage.focus的冒泡链上才能收到该事件。</p>
	*<p>用户可以通过代码 Laya.stage.focus=someNode 的方式来设置focus对象。</p>
	*<p>用户可统一的根据事件对象中 e.keyCode 来判断按键类型，该属性兼容了不同浏览器的实现。</p>
	*/
	//class laya.events.KeyBoardManager
	var KeyBoardManager = (function () {
		function KeyBoardManager() { };
		__class(KeyBoardManager, 'laya.events.KeyBoardManager');
		KeyBoardManager.__init__ = function () {
			KeyBoardManager._addEvent("keydown");
			KeyBoardManager._addEvent("keypress");
			KeyBoardManager._addEvent("keyup");
		}

		KeyBoardManager._addEvent = function (type) {
			Browser.document.addEventListener(type, function (e) {
				laya.events.KeyBoardManager._dispatch(e, type);
			}, true);
		}

		KeyBoardManager._dispatch = function (e, type) {
			if (!KeyBoardManager.enabled) return;
			KeyBoardManager._event._stoped = false;
			KeyBoardManager._event.nativeEvent = e;
			KeyBoardManager._event.keyCode = e.keyCode || e.which || e.charCode;
			if (type === "keydown") KeyBoardManager._pressKeys[KeyBoardManager._event.keyCode] = true;
			else if (type === "keyup") KeyBoardManager._pressKeys[KeyBoardManager._event.keyCode] = null;
			var target = (Laya.stage.focus && (Laya.stage.focus.event != null) && Laya.stage.focus.displayedInStage) ? Laya.stage.focus : Laya.stage;
			var ct = target;
			while (ct) {
				ct.event(type, KeyBoardManager._event.setTo(type, ct, target));
				ct = ct.parent;
			}
		}

		KeyBoardManager.hasKeyDown = function (key) {
			return KeyBoardManager._pressKeys[key];
		}

		KeyBoardManager._pressKeys = {};
		KeyBoardManager.enabled = true;
		__static(KeyBoardManager,
			['_event', function () { return this._event = new Event(); }
			]);
		return KeyBoardManager;
	})()


	/**
	*<p><code>KeyLocation</code> 类包含表示在键盘或类似键盘的输入设备上按键位置的常量。</p>
	*<p><code>KeyLocation</code> 常数用在键盘事件对象的 <code>keyLocation </code>属性中。</p>
	*/
	//class laya.events.KeyLocation
	var KeyLocation = (function () {
		function KeyLocation() { };
		__class(KeyLocation, 'laya.events.KeyLocation');
		KeyLocation.STANDARD = 0;
		KeyLocation.LEFT = 1;
		KeyLocation.RIGHT = 2;
		KeyLocation.NUM_PAD = 3;
		return KeyLocation;
	})()


	/**
	*<p><code>MouseManager</code> 是鼠标、触摸交互管理器。</p>
	*<p>鼠标事件流包括捕获阶段、目标阶段、冒泡阶段。<br/>
	*捕获阶段：此阶段引擎会从stage开始递归检测stage及其子对象，直到找到命中的目标对象或者未命中任何对象；<br/>
	*目标阶段：找到命中的目标对象；<br/>
	*冒泡阶段：事件离开目标对象，按节点层级向上逐层通知，直到到达舞台的过程。</p>
	*/
	//class laya.events.MouseManager
	var MouseManager = (function () {
		function MouseManager() {
			this.mouseX = 0;
			this.mouseY = 0;
			this.disableMouseEvent = false;
			this.mouseDownTime = 0;
			this.mouseMoveAccuracy = 2;
			this._stage = null;
			this._target = null;
			this._lastMoveTimer = 0;
			this._isLeftMouse = false;
			this._eventList = [];
			this._touchIDs = {};
			this._id = 1;
			this._tTouchID = 0;
			this._event = new Event();
			this._matrix = new Matrix();
			this._point = new Point();
			this._rect = new Rectangle();
			this._prePoint = new Point();
			this._curTouchID = NaN;
		}

		__class(MouseManager, 'laya.events.MouseManager');
		var __proto = MouseManager.prototype;
		/**
		*@private
		*初始化。
		*/
		__proto.__init__ = function (stage, canvas) {
			var _$this = this;
			this._stage = stage;
			var _this = this;
			var list = this._eventList;
			canvas.oncontextmenu = function (e) {
				if (MouseManager.enabled) return false;
			}
			canvas.addEventListener('mousedown', function (e) {
				if (MouseManager.enabled) {
					if (!Browser.onIE) e.preventDefault();
					list.push(e);
					_this.mouseDownTime = Browser.now();
				}
			});
			canvas.addEventListener('mouseup', function (e) {
				if (MouseManager.enabled) {
					e.preventDefault();
					list.push(e);
					_this.mouseDownTime = -Browser.now();
				}
			}, true);
			canvas.addEventListener('mousemove', function (e) {
				if (MouseManager.enabled) {
					e.preventDefault();
					var now = Browser.now();
					if (now - _this._lastMoveTimer < 10) return;
					_this._lastMoveTimer = now;
					list.push(e);
				}
			}, true);
			canvas.addEventListener("mouseout", function (e) {
				if (MouseManager.enabled) list.push(e);
			})
			canvas.addEventListener("mouseover", function (e) {
				if (MouseManager.enabled) list.push(e);
			})
			canvas.addEventListener("touchstart", function (e) {
				if (MouseManager.enabled) {
					list.push(e);
					if (!Input.isInputting) e.preventDefault();
					_this.mouseDownTime = Browser.now();
				}
			});
			canvas.addEventListener("touchend", function (e) {
				if (MouseManager.enabled) {
					if (!Input.isInputting) e.preventDefault();
					list.push(e);
					_this.mouseDownTime = -Browser.now();
				} else {
					_$this._curTouchID = NaN;
				}
			}, true);
			canvas.addEventListener("touchmove", function (e) {
				if (MouseManager.enabled) {
					e.preventDefault();
					list.push(e);
				}
			}, true);
			canvas.addEventListener("touchcancel", function (e) {
				if (MouseManager.enabled) {
					e.preventDefault();
					list.push(e);
				} else {
					_$this._curTouchID = NaN;
				}
			}, true);
			canvas.addEventListener('mousewheel', function (e) {
				if (MouseManager.enabled) list.push(e);
			});
			canvas.addEventListener('DOMMouseScroll', function (e) {
				if (MouseManager.enabled) list.push(e);
			});
		}

		__proto.initEvent = function (e, nativeEvent) {
			var _this = this;
			_this._event._stoped = false;
			_this._event.nativeEvent = nativeEvent || e;
			_this._target = null;
			this._point.setTo(e.pageX || e.clientX, e.pageY || e.clientY);
			this._stage._canvasTransform.invertTransformPoint(this._point);
			_this.mouseX = this._point.x;
			_this.mouseY = this._point.y;
			_this._event.touchId = e.identifier || 0;
			this._tTouchID = _this._event.touchId;
			var evt;
			evt = TouchManager.I._event;
			evt._stoped = false;
			evt.nativeEvent = _this._event.nativeEvent;
			evt.touchId = _this._event.touchId;
		}

		__proto.checkMouseWheel = function (e) {
			this._event.delta = e.wheelDelta ? e.wheelDelta * 0.025 : -e.detail;
			var _lastOvers = TouchManager.I.getLastOvers();
			for (var i = 0, n = _lastOvers.length; i < n; i++) {
				var ele = _lastOvers[i];
				ele.event(/*laya.events.Event.MOUSE_WHEEL*/"mousewheel", this._event.setTo(/*laya.events.Event.MOUSE_WHEEL*/"mousewheel", ele, this._target));
			}
		}

		// _stage.event(Event.MOUSE_WHEEL,_event.setTo(Event.MOUSE_WHEEL,_stage,_target));
		__proto.onMouseMove = function (ele) {
			TouchManager.I.onMouseMove(ele, this._tTouchID);
		}

		__proto.onMouseDown = function (ele) {
			if (Input.isInputting && Laya.stage.focus && Laya.stage.focus["focus"] && !Laya.stage.focus.contains(this._target)) {
				var pre_input = Laya.stage.focus['_tf'] || Laya.stage.focus;
				var new_input = ele['_tf'] || ele;
				if ((new_input instanceof laya.display.Input) && new_input.multiline == pre_input.multiline)
					pre_input['_focusOut']();
				else
					pre_input.focus = false;
			}
			TouchManager.I.onMouseDown(ele, this._tTouchID, this._isLeftMouse);
		}

		__proto.onMouseUp = function (ele) {
			TouchManager.I.onMouseUp(ele, this._tTouchID, this._isLeftMouse);
		}

		__proto.check = function (sp, mouseX, mouseY, callBack) {
			this._point.setTo(mouseX, mouseY);
			sp.fromParentPoint(this._point);
			mouseX = this._point.x;
			mouseY = this._point.y;
			var scrollRect = sp.scrollRect;
			if (scrollRect) {
				this._rect.setTo(scrollRect.x, scrollRect.y, scrollRect.width, scrollRect.height);
				if (!this._rect.contains(mouseX, mouseY)) return false;
			}
			if (!this.disableMouseEvent) {
				if (sp.hitTestPrior && !sp.mouseThrough && !this.hitTest(sp, mouseX, mouseY)) {
					return false;
				}
				for (var i = sp._childs.length - 1; i > -1; i--) {
					var child = sp._childs[i];
					if (!child.destroyed && child.mouseEnabled && child.visible) {
						if (this.check(child, mouseX, mouseY, callBack)) return true;
					}
				}
			};
			var isHit = (sp.hitTestPrior && !sp.mouseThrough && !this.disableMouseEvent) ? true : this.hitTest(sp, mouseX, mouseY);
			if (isHit) {
				this._target = sp;
				callBack.call(this, sp);
			} else if (callBack === this.onMouseUp && sp === this._stage) {
				this._target = this._stage;
				callBack.call(this, this._target);
			}
			return isHit;
		}

		__proto.hitTest = function (sp, mouseX, mouseY) {
			var isHit = false;
			if (sp.scrollRect) {
				mouseX -= sp.scrollRect.x;
				mouseY -= sp.scrollRect.y;
			}
			if ((sp.hitArea instanceof laya.utils.HitArea)) {
				return sp.hitArea.isHit(mouseX, mouseY);
			}
			if (sp.width > 0 && sp.height > 0 || sp.mouseThrough || sp.hitArea) {
				if (!sp.mouseThrough) {
					var hitRect = this._rect;
					if (sp.hitArea) hitRect = sp.hitArea;
					else hitRect.setTo(0, 0, sp.width, sp.height);
					isHit = hitRect.contains(mouseX, mouseY);
				} else {
					isHit = sp.getGraphicBounds().contains(mouseX, mouseY);
				}
			}
			return isHit;
		}

		/**
		*执行事件处理。
		*/
		__proto.runEvent = function () {
			var len = this._eventList.length;
			if (!len) return;
			var _this = this;
			var i = 0;
			while (i < len) {
				var evt = this._eventList[i];
				if (evt.type !== 'mousemove') this._prePoint.x = this._prePoint.y = -1000000;
				switch (evt.type) {
					case 'mousedown':
						this._touchIDs[0] = this._id++;
						if (!MouseManager._isTouchRespond) {
							_this._isLeftMouse = evt.button === 0;
							_this.initEvent(evt);
							_this.check(_this._stage, _this.mouseX, _this.mouseY, _this.onMouseDown);
						} else
							MouseManager._isTouchRespond = false;
						break;
					case 'mouseup':
						_this._isLeftMouse = evt.button === 0;
						_this.initEvent(evt);
						_this.check(_this._stage, _this.mouseX, _this.mouseY, _this.onMouseUp);
						break;
					case 'mousemove':
						if ((Math.abs(this._prePoint.x - evt.clientX) + Math.abs(this._prePoint.y - evt.clientY)) >= this.mouseMoveAccuracy) {
							this._prePoint.x = evt.clientX;
							this._prePoint.y = evt.clientY;
							_this.initEvent(evt);
							_this.check(_this._stage, _this.mouseX, _this.mouseY, _this.onMouseMove);
						}
						break;
					case "touchstart":
						MouseManager._isTouchRespond = true;
						_this._isLeftMouse = true;
						var touches = evt.changedTouches;
						for (var j = 0, n = touches.length; j < n; j++) {
							var touch = touches[j];
							if (MouseManager.multiTouchEnabled || isNaN(this._curTouchID)) {
								this._curTouchID = touch.identifier;
								if (this._id % 200 === 0) this._touchIDs = {};
								this._touchIDs[touch.identifier] = this._id++;
								_this.initEvent(touch, evt);
								_this.check(_this._stage, _this.mouseX, _this.mouseY, _this.onMouseDown);
							}
						}
						break;
					case "touchend":
					case "touchcancel":
						MouseManager._isTouchRespond = true;
						_this._isLeftMouse = true;
						var touchends = evt.changedTouches;
						for (j = 0, n = touchends.length; j < n; j++) {
							touch = touchends[j];
							if (MouseManager.multiTouchEnabled || touch.identifier == this._curTouchID) {
								this._curTouchID = NaN;
								_this.initEvent(touch, evt);
								var isChecked = false;
								isChecked = _this.check(_this._stage, _this.mouseX, _this.mouseY, _this.onMouseUp);
								if (!isChecked) {
									_this.onMouseUp(null);
								}
							}
						}
						break;
					case "touchmove": ;
						var touchemoves = evt.changedTouches;
						for (j = 0, n = touchemoves.length; j < n; j++) {
							touch = touchemoves[j];
							if (MouseManager.multiTouchEnabled || touch.identifier == this._curTouchID) {
								_this.initEvent(touch, evt);
								_this.check(_this._stage, _this.mouseX, _this.mouseY, _this.onMouseMove);
							}
						}
						break;
					case "wheel":
					case "mousewheel":
					case "DOMMouseScroll":
						_this.checkMouseWheel(evt);
						break;
					case "mouseout":
						TouchManager.I.stageMouseOut();
						break;
					case "mouseover":
						_this._stage.event(/*laya.events.Event.MOUSE_OVER*/"mouseover", _this._event.setTo(/*laya.events.Event.MOUSE_OVER*/"mouseover", _this._stage, _this._stage));
						break;
				}
				i++;
			}
			this._eventList.length = 0;
		}

		MouseManager.enabled = true;
		MouseManager.multiTouchEnabled = true;
		MouseManager._isTouchRespond = false;
		__static(MouseManager,
			['instance', function () { return this.instance = new MouseManager(); }
			]);
		return MouseManager;
	})()


	/**
	*@private
	*Touch事件管理类，处理多点触控下的鼠标事件
	*/
	//class laya.events.TouchManager
	var TouchManager = (function () {
		function TouchManager() {
			this.preOvers = [];
			this.preDowns = [];
			this.preRightDowns = [];
			this.enable = true;
			this._lastClickTime = 0;
			this._event = new Event();
		}

		__class(TouchManager, 'laya.events.TouchManager');
		var __proto = TouchManager.prototype;
		__proto._clearTempArrs = function () {
			TouchManager._oldArr.length = 0;
			TouchManager._newArr.length = 0;
			TouchManager._tEleArr.length = 0;
		}

		/**
		*从touch表里查找对应touchID的数据
		*@param touchID touch ID
		*@param arr touch表
		*@return
		*
		*/
		__proto.getTouchFromArr = function (touchID, arr) {
			var i = 0, len = 0;
			len = arr.length;
			var tTouchO;
			for (i = 0; i < len; i++) {
				tTouchO = arr[i];
				if (tTouchO.id == touchID) {
					return tTouchO;
				}
			}
			return null;
		}

		/**
		*从touch表里移除一个元素
		*@param touchID touch ID
		*@param arr touch表
		*
		*/
		__proto.removeTouchFromArr = function (touchID, arr) {
			var i = 0;
			for (i = arr.length - 1; i >= 0; i--) {
				if (arr[i].id == touchID) {
					arr.splice(i, 1);
				}
			}
		}

		/**
		*创建一个touch数据
		*@param ele 当前的根节点
		*@param touchID touchID
		*@return
		*
		*/
		__proto.createTouchO = function (ele, touchID) {
			var rst;
			rst = Pool.getItem("TouchData") || {};
			rst.id = touchID;
			rst.tar = ele;
			return rst;
		}

		/**
		*处理touchStart
		*@param ele 根节点
		*@param touchID touchID
		*@param isLeft （可选）是否为左键
		*/
		__proto.onMouseDown = function (ele, touchID, isLeft) {
			(isLeft === void 0) && (isLeft = false);
			if (!this.enable)
				return;
			var preO;
			var tO;
			var arrs;
			preO = this.getTouchFromArr(touchID, this.preOvers);
			arrs = this.getEles(ele, null, TouchManager._tEleArr);
			if (!preO) {
				tO = this.createTouchO(ele, touchID);
				this.preOvers.push(tO);
			} else {
				preO.tar = ele;
			}
			if (Browser.onMobile)
				this.sendEvents(arrs,/*laya.events.Event.MOUSE_OVER*/"mouseover", touchID);
			var preDowns;
			preDowns = isLeft ? this.preDowns : this.preRightDowns;
			preO = this.getTouchFromArr(touchID, preDowns);
			if (!preO) {
				tO = this.createTouchO(ele, touchID);
				preDowns.push(tO);
			} else {
				preO.tar = ele;
			}
			this.sendEvents(arrs, isLeft ? /*laya.events.Event.MOUSE_DOWN*/"mousedown" :/*laya.events.Event.RIGHT_MOUSE_DOWN*/"rightmousedown", touchID);
			this._clearTempArrs();
		}

		/**
		*派发事件。
		*@param eles 对象列表。
		*@param type 事件类型。
		*@param touchID （可选）touchID，默认为0。
		*/
		__proto.sendEvents = function (eles, type, touchID) {
			(touchID === void 0) && (touchID = 0);
			var i = 0, len = 0;
			len = eles.length;
			this._event._stoped = false;
			var _target;
			_target = eles[0];
			var tE;
			for (i = 0; i < len; i++) {
				tE = eles[i];
				if (tE.destroyed) return;
				tE.event(type, this._event.setTo(type, tE, _target));
				if (this._event._stoped)
					break;
			}
		}

		/**
		*获取对象列表。
		*@param start 起始节点。
		*@param end 结束节点。
		*@param rst 返回值。如果此值不为空，则将其赋值为计算结果，从而避免创建新数组；如果此值为空，则创建新数组返回。
		*@return Array 返回节点列表。
		*/
		__proto.getEles = function (start, end, rst) {
			if (!rst) {
				rst = [];
			} else {
				rst.length = 0;
			}
			while (start && start != end) {
				rst.push(start);
				start = start.parent;
			}
			return rst;
		}

		/**
		*touchMove时处理out事件和over时间。
		*@param eleNew 新的根节点。
		*@param elePre 旧的根节点。
		*@param touchID （可选）touchID，默认为0。
		*/
		__proto.checkMouseOutAndOverOfMove = function (eleNew, elePre, touchID) {
			(touchID === void 0) && (touchID = 0);
			if (elePre == eleNew)
				return;
			var tar;
			var arrs;
			var i = 0, len = 0;
			if (elePre.contains(eleNew)) {
				arrs = this.getEles(eleNew, elePre, TouchManager._tEleArr);
				this.sendEvents(arrs,/*laya.events.Event.MOUSE_OVER*/"mouseover", touchID);
			} else if (eleNew.contains(elePre)) {
				arrs = this.getEles(elePre, eleNew, TouchManager._tEleArr);
				this.sendEvents(arrs,/*laya.events.Event.MOUSE_OUT*/"mouseout", touchID);
			} else {
				arrs = TouchManager._tEleArr;
				arrs.length = 0;
				var oldArr;
				oldArr = this.getEles(elePre, null, TouchManager._oldArr);
				var newArr;
				newArr = this.getEles(eleNew, null, TouchManager._newArr);
				len = oldArr.length;
				var tIndex = 0;
				for (i = 0; i < len; i++) {
					tar = oldArr[i];
					tIndex = newArr.indexOf(tar);
					if (tIndex >= 0) {
						newArr.splice(tIndex, newArr.length - tIndex);
						break;
					} else {
						arrs.push(tar);
					}
				}
				if (arrs.length > 0) {
					this.sendEvents(arrs,/*laya.events.Event.MOUSE_OUT*/"mouseout", touchID);
				}
				if (newArr.length > 0) {
					this.sendEvents(newArr,/*laya.events.Event.MOUSE_OVER*/"mouseover", touchID);
				}
			}
		}

		/**
		*处理TouchMove事件
		*@param ele 根节点
		*@param touchID touchID
		*
		*/
		__proto.onMouseMove = function (ele, touchID) {
			if (!this.enable)
				return;
			var preO;
			preO = this.getTouchFromArr(touchID, this.preOvers);
			var arrs;
			var tO;
			if (!preO) {
				arrs = this.getEles(ele, null, TouchManager._tEleArr);
				this.sendEvents(arrs,/*laya.events.Event.MOUSE_OVER*/"mouseover", touchID);
				this.preOvers.push(this.createTouchO(ele, touchID));
			} else {
				this.checkMouseOutAndOverOfMove(ele, preO.tar);
				preO.tar = ele;
				arrs = this.getEles(ele, null, TouchManager._tEleArr);
			}
			this.sendEvents(arrs,/*laya.events.Event.MOUSE_MOVE*/"mousemove", touchID);
			this._clearTempArrs();
		}

		__proto.getLastOvers = function () {
			TouchManager._tEleArr.length = 0;
			if (this.preOvers.length > 0 && this.preOvers[0].tar) {
				return this.getEles(this.preOvers[0].tar, null, TouchManager._tEleArr);
			}
			TouchManager._tEleArr.push(Laya.stage);
			return TouchManager._tEleArr;
		}

		__proto.stageMouseOut = function () {
			var lastOvers;
			lastOvers = this.getLastOvers();
			this.sendEvents(lastOvers,/*laya.events.Event.MOUSE_OUT*/"mouseout", 0);
		}

		/**
		*处理TouchEnd事件
		*@param ele 根节点
		*@param touchID touchID
		*@param isLeft 是否为左键
		*/
		__proto.onMouseUp = function (ele, touchID, isLeft) {
			(isLeft === void 0) && (isLeft = false);
			if (!this.enable)
				return;
			var preO;
			var tO;
			var arrs;
			var oldArr;
			var i = 0, len = 0;
			var tar;
			var sendArr;
			var onMobile = Browser.onMobile;
			arrs = this.getEles(ele, null, TouchManager._tEleArr);
			this.sendEvents(arrs, isLeft ? /*laya.events.Event.MOUSE_UP*/"mouseup" :/*laya.events.Event.RIGHT_MOUSE_UP*/"rightmouseup", touchID);
			var preDowns;
			preDowns = isLeft ? this.preDowns : this.preRightDowns;
			preO = this.getTouchFromArr(touchID, preDowns);
			if (!preO) {
			} else {
				var isDouble = false;
				var now = Browser.now();
				isDouble = now - this._lastClickTime < 300;
				this._lastClickTime = now;
				if (ele == preO.tar) {
					sendArr = arrs;
				} else {
					oldArr = this.getEles(preO.tar, null, TouchManager._oldArr);
					sendArr = TouchManager._newArr;
					sendArr.length = 0;
					len = oldArr.length;
					for (i = 0; i < len; i++) {
						tar = oldArr[i];
						if (arrs.indexOf(tar) >= 0) {
							sendArr.push(tar);
						}
					}
				}
				if (sendArr.length > 0) {
					this.sendEvents(sendArr, isLeft ? /*laya.events.Event.CLICK*/"click" :/*laya.events.Event.RIGHT_CLICK*/"rightclick", touchID);
				}
				if (isLeft && isDouble) {
					this.sendEvents(sendArr,/*laya.events.Event.DOUBLE_CLICK*/"doubleclick", touchID);
				}
				this.removeTouchFromArr(touchID, preDowns);
				preO.tar = null;
				Pool.recover("TouchData", preO);
			}
			preO = this.getTouchFromArr(touchID, this.preOvers);
			if (!preO) {
			} else {
				if (onMobile) {
					sendArr = this.getEles(preO.tar, null, sendArr);
					if (sendArr && sendArr.length > 0) {
						this.sendEvents(sendArr,/*laya.events.Event.MOUSE_OUT*/"mouseout", touchID);
					}
					this.removeTouchFromArr(touchID, this.preOvers);
					preO.tar = null;
					Pool.recover("TouchData", preO);
				}
			}
			this._clearTempArrs();
		}

		TouchManager._oldArr = [];
		TouchManager._newArr = [];
		TouchManager._tEleArr = [];
		__static(TouchManager,
			['I', function () { return this.I = new TouchManager(); }
			]);
		return TouchManager;
	})()


	/**
	*<code>Filter</code> 是滤镜基类。
	*/
	//class laya.filters.Filter
	var Filter = (function () {
		function Filter() {
			this._action = null;
		}

		__class(Filter, 'laya.filters.Filter');
		var __proto = Filter.prototype;
		Laya.imps(__proto, { "laya.filters.IFilter": true })
		/**@private */
		__proto.callNative = function (sp) { }
		/**@private 滤镜类型。*/
		__getset(0, __proto, 'type', function () { return -1 });
		/**@private 滤镜动作。*/
		__getset(0, __proto, 'action', function () { return this._action });
		Filter.BLUR = 0x10;
		Filter.COLOR = 0x20;
		Filter.GLOW = 0x08;
		Filter._filterStart = null
		Filter._filterEnd = null
		Filter._EndTarget = null
		Filter._recycleScope = null
		Filter._filter = null
		Filter._useSrc = null
		Filter._endSrc = null
		Filter._useOut = null
		Filter._endOut = null
		return Filter;
	})()


	/**
	*@private
	*<code>ColorFilterAction</code> 是一个颜色滤镜应用类。
	*/
	//class laya.filters.ColorFilterAction
	var ColorFilterAction = (function () {
		function ColorFilterAction() {
			this.data = null;
		}

		__class(ColorFilterAction, 'laya.filters.ColorFilterAction');
		var __proto = ColorFilterAction.prototype;
		Laya.imps(__proto, { "laya.filters.IFilterAction": true })
		/**
		*给指定的对象应用颜色滤镜。
		*@param srcCanvas 需要应用画布对象。
		*@return 应用了滤镜后的画布对象。
		*/
		__proto.apply = function (srcCanvas) {
			var ctx = srcCanvas.ctx.ctx;
			var canvas = srcCanvas.ctx.ctx.canvas;
			if (canvas.width == 0 || canvas.height == 0) return canvas;
			var imgdata = ctx.getImageData(0, 0, canvas.width, canvas.height);
			var data = imgdata.data;
			var nData;
			for (var i = 0, n = data.length; i < n; i += 4) {
				nData = this.getColor(data[i], data[i + 1], data[i + 2], data[i + 3]);
				if (data[i + 3] == 0) continue;
				data[i] = nData[0];
				data[i + 1] = nData[1];
				data[i + 2] = nData[2];
				data[i + 3] = nData[3];
			}
			ctx.putImageData(imgdata, 0, 0);
			return srcCanvas;
		}

		__proto.getColor = function (red, green, blue, alpha) {
			var rst = [];
			if (this.data._mat && this.data._alpha) {
				var mat = this.data._mat;
				var tempAlpha = this.data._alpha;
				rst[0] = mat[0] * red + mat[1] * green + mat[2] * blue + mat[3] * alpha + tempAlpha[0];
				rst[1] = mat[4] * red + mat[5] * green + mat[6] * blue + mat[7] * alpha + tempAlpha[1];
				rst[2] = mat[8] * red + mat[9] * green + mat[10] * blue + mat[11] * alpha + tempAlpha[2];
				rst[3] = mat[12] * red + mat[13] * green + mat[14] * blue + mat[15] * alpha + tempAlpha[3];
			}
			return rst;
		}

		return ColorFilterAction;
	})()


	/**
	*@private
	*/
	//class laya.maths.Arith
	var Arith = (function () {
		function Arith() { };
		__class(Arith, 'laya.maths.Arith');
		Arith.formatR = function (r) {
			if (r > Math.PI) r -= Math.PI * 2;
			if (r < -Math.PI) r += Math.PI * 2;
			return r;
		}

		Arith.isPOT = function (w, h) {
			return (w > 0 && (w & (w - 1)) === 0 && h > 0 && (h & (h - 1)) === 0);
		}

		Arith.setMatToArray = function (mat, array) {
			mat.a, mat.b, 0, 0, mat.c, mat.d, 0, 0, 0, 0, 1, 0, mat.tx + 20, mat.ty + 20, 0, 1
			array[0] = mat.a;
			array[1] = mat.b;
			array[4] = mat.c;
			array[5] = mat.d;
			array[12] = mat.tx;
			array[13] = mat.ty;
		}

		return Arith;
	})()


	/**
	*@private
	*计算贝塞尔曲线的工具类。
	*/
	//class laya.maths.Bezier
	var Bezier = (function () {
		function Bezier() {
			this._controlPoints = [new Point(), new Point(), new Point()];
			this._calFun = this.getPoint2;
		}

		__class(Bezier, 'laya.maths.Bezier');
		var __proto = Bezier.prototype;
		/**@private */
		__proto._switchPoint = function (x, y) {
			var tPoint = this._controlPoints.shift();
			tPoint.setTo(x, y);
			this._controlPoints.push(tPoint);
		}

		/**
		*计算二次贝塞尔点。
		*@param t
		*@param rst
		*
		*/
		__proto.getPoint2 = function (t, rst) {
			var p1 = this._controlPoints[0];
			var p2 = this._controlPoints[1];
			var p3 = this._controlPoints[2];
			var lineX = Math.pow((1 - t), 2) * p1.x + 2 * t * (1 - t) * p2.x + Math.pow(t, 2) * p3.x;
			var lineY = Math.pow((1 - t), 2) * p1.y + 2 * t * (1 - t) * p2.y + Math.pow(t, 2) * p3.y;
			rst.push(lineX, lineY);
		}

		/**
		*计算三次贝塞尔点
		*@param t
		*@param rst
		*
		*/
		__proto.getPoint3 = function (t, rst) {
			var p1 = this._controlPoints[0];
			var p2 = this._controlPoints[1];
			var p3 = this._controlPoints[2];
			var p4 = this._controlPoints[3];
			var lineX = Math.pow((1 - t), 3) * p1.x + 3 * p2.x * t * (1 - t) * (1 - t) + 3 * p3.x * t * t * (1 - t) + p4.x * Math.pow(t, 3);
			var lineY = Math.pow((1 - t), 3) * p1.y + 3 * p2.y * t * (1 - t) * (1 - t) + 3 * p3.y * t * t * (1 - t) + p4.y * Math.pow(t, 3);
			rst.push(lineX, lineY);
		}

		/**
		*计算贝塞尔点序列
		*@param count
		*@param rst
		*
		*/
		__proto.insertPoints = function (count, rst) {
			var i = NaN;
			count = count > 0 ? count : 5;
			var dLen = NaN;
			dLen = 1 / count;
			for (i = 0; i <= 1; i += dLen) {
				this._calFun(i, rst);
			}
		}

		/**
		*获取贝塞尔曲线上的点。
		*@param pList 控制点[x0,y0,x1,y1...]
		*@param inSertCount 每次曲线的插值数量
		*@return
		*
		*/
		__proto.getBezierPoints = function (pList, inSertCount, count) {
			(inSertCount === void 0) && (inSertCount = 5);
			(count === void 0) && (count = 2);
			var i = 0, len = 0;
			len = pList.length;
			if (len < (count + 1) * 2) return [];
			var rst;
			rst = [];
			switch (count) {
				case 2:
					this._calFun = this.getPoint2;
					break;
				case 3:
					this._calFun = this.getPoint3;
					break;
				default:
					return [];
			}
			while (this._controlPoints.length <= count) {
				this._controlPoints.push(new Point());
			}
			for (i = 0; i < count * 2; i += 2) {
				this._switchPoint(pList[i], pList[i + 1]);
			}
			for (i = count * 2; i < len; i += 2) {
				this._switchPoint(pList[i], pList[i + 1]);
				if ((i / 2) % count == 0)
					this.insertPoints(inSertCount, rst);
			}
			return rst;
		}

		__static(Bezier,
			['I', function () { return this.I = new Bezier(); }
			]);
		return Bezier;
	})()


	/**
	*@private
	*凸包算法。
	*/
	//class laya.maths.GrahamScan
	var GrahamScan = (function () {
		function GrahamScan() { };
		__class(GrahamScan, 'laya.maths.GrahamScan');
		GrahamScan.multiply = function (p1, p2, p0) {
			return ((p1.x - p0.x) * (p2.y - p0.y) - (p2.x - p0.x) * (p1.y - p0.y));
		}

		GrahamScan.dis = function (p1, p2) {
			return (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);
		}

		GrahamScan._getPoints = function (count, tempUse, rst) {
			(tempUse === void 0) && (tempUse = false);
			if (!GrahamScan._mPointList) GrahamScan._mPointList = [];
			while (GrahamScan._mPointList.length < count) GrahamScan._mPointList.push(new Point());
			if (!rst) rst = [];
			rst.length = 0;
			if (tempUse) {
				GrahamScan.getFrom(rst, GrahamScan._mPointList, count);
			} else {
				GrahamScan.getFromR(rst, GrahamScan._mPointList, count);
			}
			return rst;
		}

		GrahamScan.getFrom = function (rst, src, count) {
			var i = 0;
			for (i = 0; i < count; i++) {
				rst.push(src[i]);
			}
			return rst;
		}

		GrahamScan.getFromR = function (rst, src, count) {
			var i = 0;
			for (i = 0; i < count; i++) {
				rst.push(src.pop());
			}
			return rst;
		}

		GrahamScan.pListToPointList = function (pList, tempUse) {
			(tempUse === void 0) && (tempUse = false);
			var i = 0, len = pList.length / 2, rst = GrahamScan._getPoints(len, tempUse, GrahamScan._tempPointList);
			for (i = 0; i < len; i++) {
				rst[i].setTo(pList[i + i], pList[i + i + 1]);
			}
			return rst;
		}

		GrahamScan.pointListToPlist = function (pointList) {
			var i = 0, len = pointList.length, rst = GrahamScan._temPList, tPoint;
			rst.length = 0;
			for (i = 0; i < len; i++) {
				tPoint = pointList[i];
				rst.push(tPoint.x, tPoint.y);
			}
			return rst;
		}

		GrahamScan.scanPList = function (pList) {
			return Utils.copyArray(pList, GrahamScan.pointListToPlist(GrahamScan.scan(GrahamScan.pListToPointList(pList, true))));
		}

		GrahamScan.scan = function (PointSet) {
			var i = 0, j = 0, k = 0, top = 2, tmp, n = PointSet.length, ch;
			var _tmpDic = {};
			var key;
			ch = GrahamScan._temArr;
			ch.length = 0;
			n = PointSet.length;
			for (i = n - 1; i >= 0; i--) {
				tmp = PointSet[i];
				key = tmp.x + "_" + tmp.y;
				if (!_tmpDic.hasOwnProperty(key)) {
					_tmpDic[key] = true;
					ch.push(tmp);
				}
			}
			n = ch.length;
			Utils.copyArray(PointSet, ch);
			for (i = 1; i < n; i++)
				if ((PointSet[i].y < PointSet[k].y) || ((PointSet[i].y == PointSet[k].y) && (PointSet[i].x < PointSet[k].x)))
					k = i;
			tmp = PointSet[0];
			PointSet[0] = PointSet[k];
			PointSet[k] = tmp;
			for (i = 1; i < n - 1; i++) {
				k = i;
				for (j = i + 1; j < n; j++)
					if ((GrahamScan.multiply(PointSet[j], PointSet[k], PointSet[0]) > 0) || ((GrahamScan.multiply(PointSet[j], PointSet[k], PointSet[0]) == 0) && (GrahamScan.dis(PointSet[0], PointSet[j]) < GrahamScan.dis(PointSet[0], PointSet[k]))))
						k = j;
				tmp = PointSet[i];
				PointSet[i] = PointSet[k];
				PointSet[k] = tmp;
			}
			ch = GrahamScan._temArr;
			ch.length = 0;
			if (PointSet.length < 3) {
				return Utils.copyArray(ch, PointSet);
			}
			ch.push(PointSet[0], PointSet[1], PointSet[2]);
			for (i = 3; i < n; i++) {
				while (ch.length >= 2 && GrahamScan.multiply(PointSet[i], ch[ch.length - 1], ch[ch.length - 2]) >= 0) ch.pop();
				PointSet[i] && ch.push(PointSet[i]);
			}
			return ch;
		}

		GrahamScan._mPointList = null
		GrahamScan._tempPointList = [];
		GrahamScan._temPList = [];
		GrahamScan._temArr = [];
		return GrahamScan;
	})()


	/**
	*@private
	*<code>MathUtil</code> 是一个数据处理工具类。
	*/
	//class laya.maths.MathUtil
	var MathUtil = (function () {
		function MathUtil() { };
		__class(MathUtil, 'laya.maths.MathUtil');
		MathUtil.subtractVector3 = function (l, r, o) {
			o[0] = l[0] - r[0];
			o[1] = l[1] - r[1];
			o[2] = l[2] - r[2];
		}

		MathUtil.lerp = function (left, right, amount) {
			return left * (1 - amount) + right * amount;
		}

		MathUtil.scaleVector3 = function (f, b, e) {
			e[0] = f[0] * b;
			e[1] = f[1] * b;
			e[2] = f[2] * b;
		}

		MathUtil.lerpVector3 = function (l, r, t, o) {
			var ax = l[0], ay = l[1], az = l[2];
			o[0] = ax + t * (r[0] - ax);
			o[1] = ay + t * (r[1] - ay);
			o[2] = az + t * (r[2] - az);
		}

		MathUtil.lerpVector4 = function (l, r, t, o) {
			var ax = l[0], ay = l[1], az = l[2], aw = l[3];
			o[0] = ax + t * (r[0] - ax);
			o[1] = ay + t * (r[1] - ay);
			o[2] = az + t * (r[2] - az);
			o[3] = aw + t * (r[3] - aw);
		}

		MathUtil.slerpQuaternionArray = function (a, Offset1, b, Offset2, t, out, Offset3) {
			var ax = a[Offset1 + 0], ay = a[Offset1 + 1], az = a[Offset1 + 2], aw = a[Offset1 + 3], bx = b[Offset2 + 0], by = b[Offset2 + 1], bz = b[Offset2 + 2], bw = b[Offset2 + 3];
			var omega, cosom, sinom, scale0, scale1;
			cosom = ax * bx + ay * by + az * bz + aw * bw;
			if (cosom < 0.0) {
				cosom = -cosom;
				bx = -bx;
				by = -by;
				bz = -bz;
				bw = -bw;
			}
			if ((1.0 - cosom) > 0.000001) {
				omega = Math.acos(cosom);
				sinom = Math.sin(omega);
				scale0 = Math.sin((1.0 - t) * omega) / sinom;
				scale1 = Math.sin(t * omega) / sinom;
			} else {
				scale0 = 1.0 - t;
				scale1 = t;
			}
			out[Offset3 + 0] = scale0 * ax + scale1 * bx;
			out[Offset3 + 1] = scale0 * ay + scale1 * by;
			out[Offset3 + 2] = scale0 * az + scale1 * bz;
			out[Offset3 + 3] = scale0 * aw + scale1 * bw;
			return out;
		}

		MathUtil.getRotation = function (x0, y0, x1, y1) {
			return Math.atan2(y1 - y0, x1 - x0) / Math.PI * 180;
		}

		MathUtil.sortBigFirst = function (a, b) {
			if (a == b)
				return 0;
			return b > a ? 1 : -1;
		}

		MathUtil.sortSmallFirst = function (a, b) {
			if (a == b)
				return 0;
			return b > a ? -1 : 1;
		}

		MathUtil.sortNumBigFirst = function (a, b) {
			return parseFloat(b) - parseFloat(a);
		}

		MathUtil.sortNumSmallFirst = function (a, b) {
			return parseFloat(a) - parseFloat(b);
		}

		MathUtil.sortByKey = function (key, bigFirst, forceNum) {
			(bigFirst === void 0) && (bigFirst = false);
			(forceNum === void 0) && (forceNum = true);
			var _sortFun;
			if (bigFirst) {
				_sortFun = forceNum ? MathUtil.sortNumBigFirst : MathUtil.sortBigFirst;
			} else {
				_sortFun = forceNum ? MathUtil.sortNumSmallFirst : MathUtil.sortSmallFirst;
			}
			return function (a, b) {
				return _sortFun(a[key], b[key]);
			}
		}

		return MathUtil;
	})()


	/**
	*<p> <code>Matrix</code> 类表示一个转换矩阵，它确定如何将点从一个坐标空间映射到另一个坐标空间。</p>
	*<p>您可以对一个显示对象执行不同的图形转换，方法是设置 Matrix 对象的属性，将该 Matrix 对象应用于 Transform 对象的 matrix 属性，然后应用该 Transform 对象作为显示对象的 transform 属性。这些转换函数包括平移（x 和 y 重新定位）、旋转、缩放和倾斜。</p>
	*/
	//class laya.maths.Matrix
	var Matrix = (function () {
		function Matrix(a, b, c, d, tx, ty) {
			//this.a=NaN;
			//this.b=NaN;
			//this.c=NaN;
			//this.d=NaN;
			//this.tx=NaN;
			//this.ty=NaN;
			this.inPool = false;
			this.bTransform = false;
			(a === void 0) && (a = 1);
			(b === void 0) && (b = 0);
			(c === void 0) && (c = 0);
			(d === void 0) && (d = 1);
			(tx === void 0) && (tx = 0);
			(ty === void 0) && (ty = 0);
			this.a = a;
			this.b = b;
			this.c = c;
			this.d = d;
			this.tx = tx;
			this.ty = ty;
			this._checkTransform();
		}

		__class(Matrix, 'laya.maths.Matrix');
		var __proto = Matrix.prototype;
		/**
		*将本矩阵设置为单位矩阵。
		*@return 返回当前矩形。
		*/
		__proto.identity = function () {
			this.a = this.d = 1;
			this.b = this.tx = this.ty = this.c = 0;
			this.bTransform = false;
			return this;
		}

		/**@private*/
		__proto._checkTransform = function () {
			return this.bTransform = (this.a !== 1 || this.b !== 0 || this.c !== 0 || this.d !== 1);
		}

		/**
		*设置沿 x 、y 轴平移每个点的距离。
		*@param x 沿 x 轴平移每个点的距离。
		*@param y 沿 y 轴平移每个点的距离。
		*@return 返回对象本身
		*/
		__proto.setTranslate = function (x, y) {
			this.tx = x;
			this.ty = y;
			return this;
		}

		/**
		*沿 x 和 y 轴平移矩阵，平移的变化量由 x 和 y 参数指定。
		*@param x 沿 x 轴向右移动的量（以像素为单位）。
		*@param y 沿 y 轴向下移动的量（以像素为单位）。
		*@return 返回此矩形对象。
		*/
		__proto.translate = function (x, y) {
			this.tx += x;
			this.ty += y;
			return this;
		}

		/**
		*对矩阵应用缩放转换。
		*@param x 用于沿 x 轴缩放对象的乘数。
		*@param y 用于沿 y 轴缩放对象的乘数。
		*/
		__proto.scale = function (x, y) {
			this.a *= x;
			this.d *= y;
			this.c *= x;
			this.b *= y;
			this.tx *= x;
			this.ty *= y;
			this.bTransform = true;
		}

		/**
		*对 Matrix 对象应用旋转转换。
		*@param angle 以弧度为单位的旋转角度。
		*/
		__proto.rotate = function (angle) {
			var cos = Math.cos(angle);
			var sin = Math.sin(angle);
			var a1 = this.a;
			var c1 = this.c;
			var tx1 = this.tx;
			this.a = a1 * cos - this.b * sin;
			this.b = a1 * sin + this.b * cos;
			this.c = c1 * cos - this.d * sin;
			this.d = c1 * sin + this.d * cos;
			this.tx = tx1 * cos - this.ty * sin;
			this.ty = tx1 * sin + this.ty * cos;
			this.bTransform = true;
		}

		/**
		*对 Matrix 对象应用倾斜转换。
		*@param x 沿着 X 轴的 2D 倾斜弧度。
		*@param y 沿着 Y 轴的 2D 倾斜弧度。
		*@return 当前 Matrix 对象。
		*/
		__proto.skew = function (x, y) {
			var tanX = Math.tan(x);
			var tanY = Math.tan(y);
			var a1 = this.a;
			var b1 = this.b;
			this.a += tanY * this.c;
			this.b += tanY * this.d;
			this.c += tanX * a1;
			this.d += tanX * b1;
			return this;
		}

		/**
		*对指定的点应用当前矩阵的逆转化并返回此点。
		*@param out 待转化的点 Point 对象。
		*@return 返回out
		*/
		__proto.invertTransformPoint = function (out) {
			var a1 = this.a;
			var b1 = this.b;
			var c1 = this.c;
			var d1 = this.d;
			var tx1 = this.tx;
			var n = a1 * d1 - b1 * c1;
			var a2 = d1 / n;
			var b2 = -b1 / n;
			var c2 = -c1 / n;
			var d2 = a1 / n;
			var tx2 = (c1 * this.ty - d1 * tx1) / n;
			var ty2 = -(a1 * this.ty - b1 * tx1) / n;
			return out.setTo(a2 * out.x + c2 * out.y + tx2, b2 * out.x + d2 * out.y + ty2);
		}

		/**
		*将 Matrix 对象表示的几何转换应用于指定点。
		*@param out 用来设定输出结果的点。
		*@return 返回out
		*/
		__proto.transformPoint = function (out) {
			return out.setTo(this.a * out.x + this.c * out.y + this.tx, this.b * out.x + this.d * out.y + this.ty);
		}

		/**
		*将 Matrix 对象表示的几何转换应用于指定点，忽略tx、ty。
		*@param out 用来设定输出结果的点。
		*@return 返回out
		*/
		__proto.transformPointN = function (out) {
			return out.setTo(this.a * out.x + this.c * out.y, this.b * out.x + this.d * out.y);
		}

		/**
		*@private
		*将 Matrix 对象表示的几何转换应用于指定点。
		*@param data 点集合。
		*@param out 存储应用转化的点的列表。
		*@return 返回out数组
		*/
		__proto.transformPointArray = function (data, out) {
			var len = data.length;
			for (var i = 0; i < len; i += 2) {
				var x = data[i], y = data[i + 1];
				out[i] = this.a * x + this.c * y + this.tx;
				out[i + 1] = this.b * x + this.d * y + this.ty;
			}
			return out;
		}

		/**
		*@private
		*将 Matrix 对象表示的几何缩放转换应用于指定点。
		*@param data 点集合。
		*@param out 存储应用转化的点的列表。
		*@return 返回out数组
		*/
		__proto.transformPointArrayScale = function (data, out) {
			var len = data.length;
			for (var i = 0; i < len; i += 2) {
				var x = data[i], y = data[i + 1];
				out[i] = this.a * x + this.c * y;
				out[i + 1] = this.b * x + this.d * y;
			}
			return out;
		}

		/**
		*获取 X 轴缩放值。
		*@return X 轴缩放值。
		*/
		__proto.getScaleX = function () {
			return this.b === 0 ? this.a : Math.sqrt(this.a * this.a + this.b * this.b);
		}

		/**
		*获取 Y 轴缩放值。
		*@return Y 轴缩放值。
		*/
		__proto.getScaleY = function () {
			return this.c === 0 ? this.d : Math.sqrt(this.c * this.c + this.d * this.d);
		}

		/**
		*执行原始矩阵的逆转换。
		*@return 当前矩阵对象。
		*/
		__proto.invert = function () {
			var a1 = this.a;
			var b1 = this.b;
			var c1 = this.c;
			var d1 = this.d;
			var tx1 = this.tx;
			var n = a1 * d1 - b1 * c1;
			this.a = d1 / n;
			this.b = -b1 / n;
			this.c = -c1 / n;
			this.d = a1 / n;
			this.tx = (c1 * this.ty - d1 * tx1) / n;
			this.ty = -(a1 * this.ty - b1 * tx1) / n;
			return this;
		}

		/**
		*将 Matrix 的成员设置为指定值。
		*@param a 缩放或旋转图像时影响像素沿 x 轴定位的值。
		*@param b 旋转或倾斜图像时影响像素沿 y 轴定位的值。
		*@param c 旋转或倾斜图像时影响像素沿 x 轴定位的值。
		*@param d 缩放或旋转图像时影响像素沿 y 轴定位的值。
		*@param tx 沿 x 轴平移每个点的距离。
		*@param ty 沿 y 轴平移每个点的距离。
		*@return 当前矩阵对象。
		*/
		__proto.setTo = function (a, b, c, d, tx, ty) {
			this.a = a, this.b = b, this.c = c, this.d = d, this.tx = tx, this.ty = ty;
			return this;
		}

		/**
		*将指定矩阵与当前矩阵连接，从而将这两个矩阵的几何效果有效地结合在一起。
		*@param matrix 要连接到源矩阵的矩阵。
		*@return 当前矩阵。
		*/
		__proto.concat = function (matrix) {
			var a = this.a;
			var c = this.c;
			var tx = this.tx;
			this.a = a * matrix.a + this.b * matrix.c;
			this.b = a * matrix.b + this.b * matrix.d;
			this.c = c * matrix.a + this.d * matrix.c;
			this.d = c * matrix.b + this.d * matrix.d;
			this.tx = tx * matrix.a + this.ty * matrix.c + matrix.tx;
			this.ty = tx * matrix.b + this.ty * matrix.d + matrix.ty;
			return this;
		}

		/**
		*@private
		*对矩阵应用缩放转换。反向相乘
		*@param x 用于沿 x 轴缩放对象的乘数。
		*@param y 用于沿 y 轴缩放对象的乘数。
		*/
		__proto.scaleEx = function (x, y) {
			var ba = this.a, bb = this.b, bc = this.c, bd = this.d;
			if (bb !== 0 || bc !== 0) {
				this.a = x * ba;
				this.b = x * bb;
				this.c = y * bc;
				this.d = y * bd;
			} else {
				this.a = x * ba;
				this.b = 0 * bd;
				this.c = 0 * ba;
				this.d = y * bd;
			}
			this.bTransform = true;
		}

		/**
		*@private
		*对 Matrix 对象应用旋转转换。反向相乘
		*@param angle 以弧度为单位的旋转角度。
		*/
		__proto.rotateEx = function (angle) {
			var cos = Math.cos(angle);
			var sin = Math.sin(angle);
			var ba = this.a, bb = this.b, bc = this.c, bd = this.d;
			if (bb !== 0 || bc !== 0) {
				this.a = cos * ba + sin * bc;
				this.b = cos * bb + sin * bd;
				this.c = -sin * ba + cos * bc;
				this.d = -sin * bb + cos * bd;
			} else {
				this.a = cos * ba;
				this.b = sin * bd;
				this.c = -sin * ba;
				this.d = cos * bd;
			}
			this.bTransform = true;
		}

		/**
		*返回此 Matrix 对象的副本。
		*@return 与原始实例具有完全相同的属性的新 Matrix 实例。
		*/
		__proto.clone = function () {
			var dec = Matrix.create();
			dec.a = this.a;
			dec.b = this.b;
			dec.c = this.c;
			dec.d = this.d;
			dec.tx = this.tx;
			dec.ty = this.ty;
			dec.bTransform = this.bTransform;
			return dec;
		}

		/**
		*将当前 Matrix 对象中的所有矩阵数据复制到指定的 Matrix 对象中。
		*@param dec 要复制当前矩阵数据的 Matrix 对象。
		*@return 已复制当前矩阵数据的 Matrix 对象。
		*/
		__proto.copyTo = function (dec) {
			dec.a = this.a;
			dec.b = this.b;
			dec.c = this.c;
			dec.d = this.d;
			dec.tx = this.tx;
			dec.ty = this.ty;
			dec.bTransform = this.bTransform;
			return dec;
		}

		/**
		*返回列出该 Matrix 对象属性的文本值。
		*@return 一个字符串，它包含 Matrix 对象的属性值：a、b、c、d、tx 和 ty。
		*/
		__proto.toString = function () {
			return this.a + "," + this.b + "," + this.c + "," + this.d + "," + this.tx + "," + this.ty;
		}

		/**
		*销毁此对象。
		*/
		__proto.destroy = function () {
			if (this.inPool) return;
			var cache = Matrix._cache;
			this.inPool = true;
			cache._length || (cache._length = 0);
			cache[cache._length++] = this;
			this.a = this.d = 1;
			this.b = this.c = this.tx = this.ty = 0;
			this.bTransform = false;
		}

		Matrix.mul = function (m1, m2, out) {
			var aa = m1.a, ab = m1.b, ac = m1.c, ad = m1.d, atx = m1.tx, aty = m1.ty;
			var ba = m2.a, bb = m2.b, bc = m2.c, bd = m2.d, btx = m2.tx, bty = m2.ty;
			if (bb !== 0 || bc !== 0) {
				out.a = aa * ba + ab * bc;
				out.b = aa * bb + ab * bd;
				out.c = ac * ba + ad * bc;
				out.d = ac * bb + ad * bd;
				out.tx = ba * atx + bc * aty + btx;
				out.ty = bb * atx + bd * aty + bty;
			} else {
				out.a = aa * ba;
				out.b = ab * bd;
				out.c = ac * ba;
				out.d = ad * bd;
				out.tx = ba * atx + btx;
				out.ty = bd * aty + bty;
			}
			return out;
		}

		Matrix.mul16 = function (m1, m2, out) {
			var aa = m1.a, ab = m1.b, ac = m1.c, ad = m1.d, atx = m1.tx, aty = m1.ty;
			var ba = m2.a, bb = m2.b, bc = m2.c, bd = m2.d, btx = m2.tx, bty = m2.ty;
			if (bb !== 0 || bc !== 0) {
				out[0] = aa * ba + ab * bc;
				out[1] = aa * bb + ab * bd;
				out[4] = ac * ba + ad * bc;
				out[5] = ac * bb + ad * bd;
				out[12] = ba * atx + bc * aty + btx;
				out[13] = bb * atx + bd * aty + bty;
			} else {
				out[0] = aa * ba;
				out[1] = ab * bd;
				out[4] = ac * ba;
				out[5] = ad * bd;
				out[12] = ba * atx + btx;
				out[13] = bd * aty + bty;
			}
			return out;
		}

		Matrix.mulPre = function (m1, ba, bb, bc, bd, btx, bty, out) {
			var aa = m1.a, ab = m1.b, ac = m1.c, ad = m1.d, atx = m1.tx, aty = m1.ty;
			if (bb !== 0 || bc !== 0) {
				out.a = aa * ba + ab * bc;
				out.b = aa * bb + ab * bd;
				out.c = ac * ba + ad * bc;
				out.d = ac * bb + ad * bd;
				out.tx = ba * atx + bc * aty + btx;
				out.ty = bb * atx + bd * aty + bty;
			} else {
				out.a = aa * ba;
				out.b = ab * bd;
				out.c = ac * ba;
				out.d = ad * bd;
				out.tx = ba * atx + btx;
				out.ty = bd * aty + bty;
			}
			return out;
		}

		Matrix.mulPos = function (m1, aa, ab, ac, ad, atx, aty, out) {
			var ba = m1.a, bb = m1.b, bc = m1.c, bd = m1.d, btx = m1.tx, bty = m1.ty;
			if (bb !== 0 || bc !== 0) {
				out.a = aa * ba + ab * bc;
				out.b = aa * bb + ab * bd;
				out.c = ac * ba + ad * bc;
				out.d = ac * bb + ad * bd;
				out.tx = ba * atx + bc * aty + btx;
				out.ty = bb * atx + bd * aty + bty;
			} else {
				out.a = aa * ba;
				out.b = ab * bd;
				out.c = ac * ba;
				out.d = ad * bd;
				out.tx = ba * atx + btx;
				out.ty = bd * aty + bty;
			}
			return out;
		}

		Matrix.preMul = function (parent, self, out) {
			var pa = parent.a, pb = parent.b, pc = parent.c, pd = parent.d;
			var na = self.a, nb = self.b, nc = self.c, nd = self.d, ntx = self.tx, nty = self.ty;
			out.a = na * pa;
			out.b = out.c = 0;
			out.d = nd * pd;
			out.tx = ntx * pa + parent.tx;
			out.ty = nty * pd + parent.ty;
			if (nb !== 0 || nc !== 0 || pb !== 0 || pc !== 0) {
				out.a += nb * pc;
				out.d += nc * pb;
				out.b += na * pb + nb * pd;
				out.c += nc * pa + nd * pc;
				out.tx += nty * pc;
				out.ty += ntx * pb;
			}
			return out;
		}

		Matrix.preMulXY = function (parent, x, y, out) {
			var pa = parent.a, pb = parent.b, pc = parent.c, pd = parent.d;
			out.a = pa;
			out.b = pb;
			out.c = pc;
			out.d = pd;
			out.tx = x * pa + parent.tx + y * pc;
			out.ty = y * pd + parent.ty + x * pb;
			return out;
		}

		Matrix.create = function () {
			var cache = Matrix._cache;
			var mat = !cache._length ? (new Matrix()) : cache[--cache._length];
			mat.inPool = false;
			return mat;
		}

		Matrix.EMPTY = new Matrix();
		Matrix.TEMP = new Matrix();
		Matrix._cache = [];
		return Matrix;
	})()


	/**
	*<code>Point</code> 对象表示二维坐标系统中的某个位置，其中 x 表示水平轴，y 表示垂直轴。
	*/
	//class laya.maths.Point
	var Point = (function () {
		function Point(x, y) {
			//this.x=NaN;
			//this.y=NaN;
			(x === void 0) && (x = 0);
			(y === void 0) && (y = 0);
			this.x = x;
			this.y = y;
		}

		__class(Point, 'laya.maths.Point');
		var __proto = Point.prototype;
		/**
		*将 <code>Point</code> 的成员设置为指定值。
		*@param x 水平坐标。
		*@param y 垂直坐标。
		*@return 当前 Point 对象。
		*/
		__proto.setTo = function (x, y) {
			this.x = x;
			this.y = y;
			return this;
		}

		/**
		*计算当前点和目标点(x，y)的距离。
		*@param x 水平坐标。
		*@param y 垂直坐标。
		*@return 返回当前点和目标点之间的距离。
		*/
		__proto.distance = function (x, y) {
			return Math.sqrt((this.x - x) * (this.x - x) + (this.y - y) * (this.y - y));
		}

		/**返回包含 x 和 y 坐标的值的字符串。*/
		__proto.toString = function () {
			return this.x + "," + this.y;
		}

		/**
		*标准化向量。
		*/
		__proto.normalize = function () {
			var d = Math.sqrt(this.x * this.x + this.y * this.y);
			if (d > 0) {
				var id = 1.0 / d;
				this.x *= id;
				this.y *= id;
			}
		}

		Point.TEMP = new Point();
		Point.EMPTY = new Point();
		return Point;
	})()


	/**
	*<p><code>Rectangle</code> 对象是按其位置（由它左上角的点 (x,y)确定）以及宽度和高度定义的区域。</p>
	*<p>Rectangle 类的 x、y、width 和 height 属性相互独立；更改一个属性的值不会影响其他属性。</p>
	*/
	//class laya.maths.Rectangle
	var Rectangle = (function () {
		function Rectangle(x, y, width, height) {
			//this.x=NaN;
			//this.y=NaN;
			//this.width=NaN;
			//this.height=NaN;
			(x === void 0) && (x = 0);
			(y === void 0) && (y = 0);
			(width === void 0) && (width = 0);
			(height === void 0) && (height = 0);
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
		}

		__class(Rectangle, 'laya.maths.Rectangle');
		var __proto = Rectangle.prototype;
		/**
		*将 Rectangle 的属性设置为指定值。
		*@param x x 矩形左上角的 X 轴坐标。
		*@param y x 矩形左上角的 Y 轴坐标。
		*@param width 矩形的宽度。
		*@param height 矩形的高。
		*@return 返回属性值修改后的矩形对象本身。
		*/
		__proto.setTo = function (x, y, width, height) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return this;
		}

		/**
		*复制 source 对象的属性值到此矩形对象中。
		*@param sourceRect 源 Rectangle 对象。
		*@return 返回属性值修改后的矩形对象本身。
		*/
		__proto.copyFrom = function (source) {
			this.x = source.x;
			this.y = source.y;
			this.width = source.width;
			this.height = source.height;
			return this;
		}

		/**
		*确定由此 Rectangle 对象定义的矩形区域内是否包含指定的点。
		*@param x 点的 X 轴坐标值（水平位置）。
		*@param y 点的 Y 轴坐标值（垂直位置）。
		*@return 如果 Rectangle 对象包含指定的点，则值为 true；否则为 false。
		*/
		__proto.contains = function (x, y) {
			if (this.width <= 0 || this.height <= 0) return false;
			if (x >= this.x && x < this.right) {
				if (y >= this.y && y < this.bottom) {
					return true;
				}
			}
			return false;
		}

		/**
		*确定在 rect 参数中指定的对象是否与此 Rectangle 对象相交。此方法检查指定的 Rectangle 对象的 x、y、width 和 height 属性，以查看它是否与此 Rectangle 对象相交。
		*@param rect Rectangle 对象。
		*@return 如果传入的矩形对象与此对象相交，则返回 true 值，否则返回 false。
		*/
		__proto.intersects = function (rect) {
			return !(rect.x > (this.x + this.width) || (rect.x + rect.width) < this.x || rect.y > (this.y + this.height) || (rect.y + rect.height) < this.y);
		}

		/**
		*如果在 rect 参数中指定的 Rectangle 对象与此 Rectangle 对象相交，则返回交集区域作为 Rectangle 对象。如果矩形不相交，则此方法返回null。
		*@param rect 待比较的矩形区域。
		*@param out （可选）待输出的矩形区域。如果为空则创建一个新的。建议：尽量复用对象，减少对象创建消耗。
		*@return 返回相交的矩形区域对象。
		*/
		__proto.intersection = function (rect, out) {
			if (!this.intersects(rect)) return null;
			out || (out = new Rectangle());
			out.x = Math.max(this.x, rect.x);
			out.y = Math.max(this.y, rect.y);
			out.width = Math.min(this.right, rect.right) - out.x;
			out.height = Math.min(this.bottom, rect.bottom) - out.y;
			return out;
		}

		/**
		*<p>矩形联合，通过填充两个矩形之间的水平和垂直空间，将这两个矩形组合在一起以创建一个新的 Rectangle 对象。</p>
		*<p>注意：union()方法忽略高度或宽度值为 0 的矩形，如：var rect2:Rectangle=new Rectangle(300,300,50,0);</p>
		*@param 要添加到此 Rectangle 对象的 Rectangle 对象。
		*@param out 用于存储输出结果的矩形对象。如果为空，则创建一个新的。建议：尽量复用对象，减少对象创建消耗。Rectangle.TEMP对象用于对象复用。
		*@return 充当两个矩形的联合的新 Rectangle 对象。
		*/
		__proto.union = function (source, out) {
			out || (out = new Rectangle());
			this.clone(out);
			if (source.width <= 0 || source.height <= 0) return out;
			out.addPoint(source.x, source.y);
			out.addPoint(source.right, source.bottom);
			return this;
		}

		/**
		*返回一个 Rectangle 对象，其 x、y、width 和 height 属性的值与当前 Rectangle 对象的对应值相同。
		*@param out （可选）用于存储结果的矩形对象。如果为空，则创建一个新的。建议：尽量复用对象，减少对象创建消耗。。Rectangle.TEMP对象用于对象复用。
		*@return Rectangle 对象，其 x、y、width 和 height 属性的值与当前 Rectangle 对象的对应值相同。
		*/
		__proto.clone = function (out) {
			out || (out = new Rectangle());
			out.x = this.x;
			out.y = this.y;
			out.width = this.width;
			out.height = this.height;
			return out;
		}

		/**
		*当前 Rectangle 对象的水平位置 x 和垂直位置 y 以及高度 width 和宽度 height 以逗号连接成的字符串。
		*/
		__proto.toString = function () {
			return this.x + "," + this.y + "," + this.width + "," + this.height;
		}

		/**
		*检测传入的 Rectangle 对象的属性是否与当前 Rectangle 对象的属性 x、y、width、height 属性值都相等。
		*@param rect 待比较的 Rectangle 对象。
		*@return 如果判断的属性都相等，则返回 true ,否则返回 false。
		*/
		__proto.equals = function (rect) {
			if (!rect || rect.x !== this.x || rect.y !== this.y || rect.width !== this.width || rect.height !== this.height) return false;
			return true;
		}

		/**
		*<p>为当前矩形对象加一个点，以使当前矩形扩展为包含当前矩形和此点的最小矩形。</p>
		*<p>此方法会修改本对象。</p>
		*@param x 点的 X 坐标。
		*@param y 点的 Y 坐标。
		*@return 返回此 Rectangle 对象。
		*/
		__proto.addPoint = function (x, y) {
			this.x > x && (this.width += this.x - x, this.x = x);
			this.y > y && (this.height += this.y - y, this.y = y);
			if (this.width < x - this.x) this.width = x - this.x;
			if (this.height < y - this.y) this.height = y - this.y;
			return this;
		}

		/**
		*@private
		*返回代表当前矩形的顶点数据。
		*@return 顶点数据。
		*/
		__proto._getBoundPoints = function () {
			var rst = Rectangle._temB;
			rst.length = 0;
			if (this.width == 0 || this.height == 0) return rst;
			rst.push(this.x, this.y, this.x + this.width, this.y, this.x, this.y + this.height, this.x + this.width, this.y + this.height);
			return rst;
		}

		/**
		*确定此 Rectangle 对象是否为空。
		*@return 如果 Rectangle 对象的宽度或高度小于等于 0，则返回 true 值，否则返回 false。
		*/
		__proto.isEmpty = function () {
			if (this.width <= 0 || this.height <= 0) return true;
			return false;
		}

		/**此矩形右侧的 X 轴坐标。 x 和 width 属性的和。*/
		__getset(0, __proto, 'right', function () {
			return this.x + this.width;
		});

		/**此矩形底端的 Y 轴坐标。y 和 height 属性的和。*/
		__getset(0, __proto, 'bottom', function () {
			return this.y + this.height;
		});

		Rectangle._getBoundPointS = function (x, y, width, height) {
			var rst = Rectangle._temA;
			rst.length = 0;
			if (width == 0 || height == 0) return rst;
			rst.push(x, y, x + width, y, x, y + height, x + width, y + height);
			return rst;
		}

		Rectangle._getWrapRec = function (pointList, rst) {
			if (!pointList || pointList.length < 1) return rst ? rst.setTo(0, 0, 0, 0) : Rectangle.TEMP.setTo(0, 0, 0, 0);
			rst = rst ? rst : new Rectangle();
			var i, len = pointList.length, minX, maxX, minY, maxY, tPoint = Point.TEMP;
			minX = minY = 99999;
			maxX = maxY = -minX;
			for (i = 0; i < len; i += 2) {
				tPoint.x = pointList[i];
				tPoint.y = pointList[i + 1];
				minX = minX < tPoint.x ? minX : tPoint.x;
				minY = minY < tPoint.y ? minY : tPoint.y;
				maxX = maxX > tPoint.x ? maxX : tPoint.x;
				maxY = maxY > tPoint.y ? maxY : tPoint.y;
			}
			return rst.setTo(minX, minY, maxX - minX, maxY - minY);
		}

		Rectangle.EMPTY = new Rectangle();
		Rectangle.TEMP = new Rectangle();
		Rectangle._temB = [];
		Rectangle._temA = [];
		return Rectangle;
	})()


	/**
	*<code>SoundManager</code> 是一个声音管理类。提供了对背景音乐、音效的播放控制方法。
	*引擎默认有两套声音方案：WebAudio和H5Audio
	*播放音效，优先使用WebAudio播放声音，如果WebAudio不可用，则用H5Audio播放，H5Audio在部分机器上有兼容问题（比如不能混音，播放有延迟等）。
	*播放背景音乐，则使用H5Audio播放（使用WebAudio会增加特别大的内存，并且要等加载完毕后才能播放，有延迟）
	*建议背景音乐用mp3类型，音效用wav或者mp3类型（如果打包为app，音效只能用wav格式）。
	*详细教程及声音格式请参考：http://ldc.layabox.com/doc/?nav=ch-as-1-7-0
	*/
	//class laya.media.SoundManager
	var SoundManager = (function () {
		function SoundManager() { };
		__class(SoundManager, 'laya.media.SoundManager');
		/**
		*失去焦点后是否自动停止背景音乐。
		*@param v Boolean 失去焦点后是否自动停止背景音乐。
		*
		*/
		/**
		*失去焦点后是否自动停止背景音乐。
		*/
		__getset(1, SoundManager, 'autoStopMusic', function () {
			return SoundManager._autoStopMusic;
		}, function (v) {
			Laya.stage.off(/*laya.events.Event.BLUR*/"blur", null, SoundManager._stageOnBlur);
			Laya.stage.off(/*laya.events.Event.FOCUS*/"focus", null, SoundManager._stageOnFocus);
			Laya.stage.off(/*laya.events.Event.VISIBILITY_CHANGE*/"visibilitychange", null, SoundManager._visibilityChange);
			SoundManager._autoStopMusic = v;
			if (v) {
				Laya.stage.on(/*laya.events.Event.BLUR*/"blur", null, SoundManager._stageOnBlur);
				Laya.stage.on(/*laya.events.Event.FOCUS*/"focus", null, SoundManager._stageOnFocus);
				Laya.stage.on(/*laya.events.Event.VISIBILITY_CHANGE*/"visibilitychange", null, SoundManager._visibilityChange);
			}
		});

		/**
		*背景音乐和所有音效是否静音。
		*/
		__getset(1, SoundManager, 'muted', function () {
			return SoundManager._muted;
		}, function (value) {
			if (value) {
				SoundManager.stopAllSound();
			}
			SoundManager.musicMuted = value;
			SoundManager._muted = value;
		});

		/**
		*背景音乐（不包括音效）是否静音。
		*/
		__getset(1, SoundManager, 'musicMuted', function () {
			return SoundManager._musicMuted;
		}, function (value) {
			if (value) {
				if (SoundManager._tMusic)
					SoundManager.stopSound(SoundManager._tMusic);
				SoundManager._musicMuted = value;
			} else {
				SoundManager._musicMuted = value;
				if (SoundManager._tMusic) {
					SoundManager.playMusic(SoundManager._tMusic);
				}
			}
		});

		/**
		*所有音效（不包括背景音乐）是否静音。
		*/
		__getset(1, SoundManager, 'soundMuted', function () {
			return SoundManager._soundMuted;
		}, function (value) {
			SoundManager._soundMuted = value;
		});

		SoundManager.addChannel = function (channel) {
			if (SoundManager._channels.indexOf(channel) >= 0) return;
			SoundManager._channels.push(channel);
		}

		SoundManager.removeChannel = function (channel) {
			var i = 0;
			for (i = SoundManager._channels.length - 1; i >= 0; i--) {
				if (SoundManager._channels[i] == channel) {
					SoundManager._channels.splice(i, 1);
				}
			}
		}

		SoundManager.disposeSoundIfNotUsed = function (url) {
			var i = 0;
			for (i = SoundManager._channels.length - 1; i >= 0; i--) {
				if (SoundManager._channels[i].url == url) {
					return;
				}
			}
			SoundManager.destroySound(url);
		}

		SoundManager._visibilityChange = function () {
			if (Laya.stage.isVisibility) {
				SoundManager._stageOnFocus();
			} else {
				SoundManager._stageOnBlur();
			}
		}

		SoundManager._stageOnBlur = function () {
			SoundManager._isActive = false;
			if (SoundManager._musicChannel) {
				if (!SoundManager._musicChannel.isStopped) {
					SoundManager._blurPaused = true;
					SoundManager._musicLoops = SoundManager._musicChannel.loops;
					SoundManager._musicCompleteHandler = SoundManager._musicChannel.completeHandler;
					SoundManager._musicPosition = SoundManager._musicChannel.position;
					SoundManager._musicChannel.stop();
					Laya.stage.once(/*laya.events.Event.MOUSE_DOWN*/"mousedown", null, SoundManager._stageOnFocus);
				}
			}
			SoundManager.stopAllSound();
		}

		SoundManager._stageOnFocus = function () {
			SoundManager._isActive = true;
			Laya.stage.off(/*laya.events.Event.MOUSE_DOWN*/"mousedown", null, SoundManager._stageOnFocus);
			if (SoundManager._blurPaused) {
				if (SoundManager._tMusic) {
					SoundManager.playMusic(SoundManager._tMusic, SoundManager._musicLoops, SoundManager._musicCompleteHandler, SoundManager._musicPosition);
				}
				SoundManager._blurPaused = false;
			}
		}

		SoundManager.playSound = function (url, loops, complete, soundClass, startTime) {
			(loops === void 0) && (loops = 1);
			(startTime === void 0) && (startTime = 0);
			if (!SoundManager._isActive || !url) return null;
			if (SoundManager._muted) return null;
			url = URL.formatURL(url);
			if (url == SoundManager._tMusic) {
				if (SoundManager._musicMuted) return null;
			} else {
				if (Render.isConchApp) {
					var ext = Utils.getFileExtension(url);
					if (ext != "wav" && ext != "ogg") {
						alert("The sound only supports wav or ogg format,for optimal performance reason,please refer to the official website document.");
						return null;
					}
				}
				if (SoundManager._soundMuted) return null;
			};
			var tSound = Laya.loader.getRes(url);
			if (!soundClass) soundClass = SoundManager._soundClass;
			if (!tSound) {
				tSound = new soundClass();
				tSound.load(url);
				Loader.cacheRes(url, tSound);
			};
			var channel;
			channel = tSound.play(startTime, loops);
			if (!channel) return null;
			channel.url = url;
			channel.volume = (url == SoundManager._tMusic) ? SoundManager.musicVolume : SoundManager.soundVolume;
			channel.completeHandler = complete;
			return channel;
		}

		SoundManager.destroySound = function (url) {
			var tSound = Laya.loader.getRes(url);
			if (tSound) {
				Loader.clearRes(url);
				tSound.dispose();
			}
		}

		SoundManager.playMusic = function (url, loops, complete, startTime) {
			(loops === void 0) && (loops = 0);
			(startTime === void 0) && (startTime = 0);
			url = URL.formatURL(url);
			SoundManager._tMusic = url;
			if (SoundManager._musicChannel) SoundManager._musicChannel.stop();
			return SoundManager._musicChannel = SoundManager.playSound(url, loops, complete, SoundManager.useAudioMusic ? AudioSound : null, startTime);
		}

		SoundManager.stopSound = function (url) {
			url = URL.formatURL(url);
			var i = 0;
			var channel;
			for (i = SoundManager._channels.length - 1; i >= 0; i--) {
				channel = SoundManager._channels[i];
				if (channel.url == url) {
					channel.stop();
				}
			}
		}

		SoundManager.stopAll = function () {
			SoundManager._tMusic = null;
			var i = 0;
			var channel;
			for (i = SoundManager._channels.length - 1; i >= 0; i--) {
				channel = SoundManager._channels[i];
				channel.stop();
			}
		}

		SoundManager.stopAllSound = function () {
			var i = 0;
			var channel;
			for (i = SoundManager._channels.length - 1; i >= 0; i--) {
				channel = SoundManager._channels[i];
				if (channel.url != SoundManager._tMusic) {
					channel.stop();
				}
			}
		}

		SoundManager.stopMusic = function () {
			if (SoundManager._musicChannel) SoundManager._musicChannel.stop();
			SoundManager._tMusic = null;
		}

		SoundManager.setSoundVolume = function (volume, url) {
			if (url) {
				url = URL.formatURL(url);
				SoundManager._setVolume(url, volume);
			} else {
				SoundManager.soundVolume = volume;
				var i = 0;
				var channel;
				for (i = SoundManager._channels.length - 1; i >= 0; i--) {
					channel = SoundManager._channels[i];
					if (channel.url != SoundManager._tMusic) {
						channel.volume = volume;
					}
				}
			}
		}

		SoundManager.setMusicVolume = function (volume) {
			SoundManager.musicVolume = volume;
			SoundManager._setVolume(SoundManager._tMusic, volume);
		}

		SoundManager._setVolume = function (url, volume) {
			url = URL.formatURL(url);
			var i = 0;
			var channel;
			for (i = SoundManager._channels.length - 1; i >= 0; i--) {
				channel = SoundManager._channels[i];
				if (channel.url == url) {
					channel.volume = volume;
				}
			}
		}

		SoundManager.musicVolume = 1;
		SoundManager.soundVolume = 1;
		SoundManager.playbackRate = 1;
		SoundManager.useAudioMusic = true;
		SoundManager._muted = false;
		SoundManager._soundMuted = false;
		SoundManager._musicMuted = false;
		SoundManager._tMusic = null;
		SoundManager._musicChannel = null;
		SoundManager._channels = [];
		SoundManager._autoStopMusic = false;
		SoundManager._blurPaused = false;
		SoundManager._isActive = true;
		SoundManager._musicLoops = 0;
		SoundManager._musicPosition = 0;
		SoundManager._musicCompleteHandler = null;
		SoundManager._soundClass = null
		SoundManager.autoReleaseSound = true;
		return SoundManager;
	})()


	/**
	*<p> <code>LocalStorage</code> 类用于没有时间限制的数据存储。</p>
	*/
	//class laya.net.LocalStorage
	var LocalStorage = (function () {
		var Storage;
		function LocalStorage() { };
		__class(LocalStorage, 'laya.net.LocalStorage');
		LocalStorage.__init__ = function () {
			if (!LocalStorage._baseClass) {
				LocalStorage._baseClass = Storage;
				Storage.init();
			}
			LocalStorage.items = LocalStorage._baseClass.items;
			LocalStorage.support = LocalStorage._baseClass.support;
		}

		LocalStorage.setItem = function (key, value) {
			LocalStorage._baseClass.setItem(key, value);
		}

		LocalStorage.getItem = function (key) {
			return LocalStorage._baseClass.getItem(key);
		}

		LocalStorage.setJSON = function (key, value) {
			LocalStorage._baseClass.setJSON(key, value);
		}

		LocalStorage.getJSON = function (key) {
			return LocalStorage._baseClass.getJSON(key);
		}

		LocalStorage.removeItem = function (key) {
			LocalStorage._baseClass.removeItem(key);
		}

		LocalStorage.clear = function () {
			LocalStorage._baseClass.clear();
		}

		LocalStorage._baseClass = null
		LocalStorage.items = null
		LocalStorage.support = false;
		LocalStorage.__init$ = function () {
			//class Storage
			Storage = (function () {
				function Storage() { };
				__class(Storage, '');
				Storage.init = function () {
					/*__JS__ */try { Storage.items = window.localStorage; Storage.setItem('laya', '1'); Storage.removeItem('laya'); Storage.support = true; } catch (e) { } if (!Storage.support) console.log('LocalStorage is not supprot or browser is private mode.');
				}
				Storage.setItem = function (key, value) {
					try {
						Storage.support && Storage.items.setItem(key, value);
					} catch (e) {
						console.warn("set localStorage failed", e);
					}
				}
				Storage.getItem = function (key) {
					return Storage.support ? Storage.items.getItem(key) : null;
				}
				Storage.setJSON = function (key, value) {
					try {
						Storage.support && Storage.items.setItem(key, JSON.stringify(value));
					} catch (e) {
						console.warn("set localStorage failed", e);
					}
				}
				Storage.getJSON = function (key) {
					return JSON.parse(Storage.support ? Storage.items.getItem(key) : null);
				}
				Storage.removeItem = function (key) {
					Storage.support && Storage.items.removeItem(key);
				}
				Storage.clear = function () {
					Storage.support && Storage.items.clear();
				}
				Storage.items = null
				Storage.support = false;
				return Storage;
			})()
		}

		return LocalStorage;
	})()


	/**
	*<p>资源版本的生成由layacmd或IDE完成，使用 <code>ResourceVersion</code> 简化使用过程。</p>
	*<p>调用 <code>enable</code> 启用资源版本管理。</p>
	*/
	//class laya.net.ResourceVersion
	var ResourceVersion = (function () {
		function ResourceVersion() { };
		__class(ResourceVersion, 'laya.net.ResourceVersion');
		ResourceVersion.enable = function (manifestFile, callback) {
			Laya.loader.load(manifestFile, Handler.create(null, ResourceVersion.onManifestLoaded, [callback]), null,/*laya.net.Loader.JSON*/"json");
			URL.customFormat = ResourceVersion.addVersionPrefix;
		}

		ResourceVersion.onManifestLoaded = function (callback, data) {
			ResourceVersion.manifest = data;
			callback.run();
			if (!data) {
				console.warn("资源版本清单文件不存在，不使用资源版本管理。忽略ERR_FILE_NOT_FOUND错误。");
			}
		}

		ResourceVersion.addVersionPrefix = function (originURL) {
			if (ResourceVersion.manifest && ResourceVersion.manifest[originURL])
				return ResourceVersion.manifest[originURL] + "/" + originURL;
			return originURL;
		}

		ResourceVersion.manifest = null
		return ResourceVersion;
	})()


	/**
	*<p> <code>URL</code> 类用于定义地址信息。</p>
	*/
	//class laya.net.URL
	var URL = (function () {
		function URL(url) {
			this._url = null;
			this._path = null;
			this._url = URL.formatURL(url);
			this._path = URL.getPath(url);
		}

		__class(URL, 'laya.net.URL');
		var __proto = URL.prototype;
		/**地址的路径。*/
		__getset(0, __proto, 'path', function () {
			return this._path;
		});

		/**格式化后的地址。*/
		__getset(0, __proto, 'url', function () {
			return this._url;
		});

		URL.formatURL = function (url, base) {
			if (!url) return "null path";
			if (url.indexOf(":") > 0) return url;
			if (URL.customFormat != null) url = URL.customFormat(url, base);
			var char1 = url.charAt(0);
			if (char1 === ".") {
				return URL.formatRelativePath((base || URL.basePath) + url);
			} else if (char1 === '~') {
				return URL.rootPath + url.substring(1);
			} else if (char1 === "d") {
				if (url.indexOf("data:image") === 0) return url;
			} else if (char1 === "/") {
				return url;
			}
			return (base || URL.basePath) + url;
		}

		URL.formatRelativePath = function (value) {
			var parts = value.split("/");
			for (var i = 0, len = parts.length; i < len; i++) {
				if (parts[i] == '..') {
					parts.splice(i - 1, 2);
					i -= 2;
				}
			}
			return parts.join('/');
		}

		URL.isAbsolute = function (url) {
			return url.indexOf(":") > 0 || url.charAt(0) == '/';
		}

		URL.getPath = function (url) {
			var ofs = url.lastIndexOf('/');
			return ofs > 0 ? url.substr(0, ofs + 1) : "";
		}

		URL.getFileName = function (url) {
			var ofs = url.lastIndexOf('/');
			return ofs > 0 ? url.substr(ofs + 1) : url;
		}

		URL.version = {};
		URL.basePath = "";
		URL.rootPath = "";
		URL.customFormat = function (url) {
			var newUrl = URL.version[url];
			if (!Render.isConchApp && newUrl) url += "?v=" + newUrl;
			return url;
		}

		return URL;
	})()


	/**
	*@private
	*<code>Render</code> 是渲染管理类。它是一个单例，可以使用 Laya.render 访问。
	*/
	//class laya.renders.Render
	var Render = (function () {
		function Render(width, height) {
			this._timeId = 0;
			var style = Render._mainCanvas.source.style;
			style.position = 'absolute';
			style.top = style.left = "0px";
			style.background = "#000000";
			Render._mainCanvas.source.id = "layaCanvas";
			var isWebGl = laya.renders.Render.isWebGL;
			Render._mainCanvas.source.width = width;
			Render._mainCanvas.source.height = height;
			isWebGl && Render.WebGL.init(Render._mainCanvas, width, height);
			Browser.container.appendChild(Render._mainCanvas.source);
			Render._context = new RenderContext(width, height, isWebGl ? null : Render._mainCanvas);
			Render._context.ctx.setIsMainContext();
			Browser.window.requestAnimationFrame(loop);
			function loop() {
				Laya.stage._loop();
				Browser.window.requestAnimationFrame(loop);
			}
			Laya.stage.on("visibilitychange", this, this._onVisibilitychange);
		}

		__class(Render, 'laya.renders.Render');
		var __proto = Render.prototype;
		/**@private */
		__proto._onVisibilitychange = function () {
			if (!Laya.stage.isVisibility) {
				this._timeId = Browser.window.setInterval(this._enterFrame, 1000);
			} else if (this._timeId != 0) {
				Browser.window.clearInterval(this._timeId);
			}
		}

		/**@private */
		__proto._enterFrame = function (e) {
			Laya.stage._loop();
		}

		/**目前使用的渲染器。*/
		__getset(1, Render, 'context', function () {
			return Render._context;
		});

		/**渲染使用的原生画布引用。 */
		__getset(1, Render, 'canvas', function () {
			return Render._mainCanvas.source;
		});

		Render._context = null
		Render._mainCanvas = null
		Render.WebGL = null
		Render.isConchNode = false;
		Render.isConchApp = false;
		Render.isConchWebGL = false;
		Render.isWebGL = false;
		Render.is3DMode = false;
		Render.optimizeTextureMemory = function (url, texture) {
			return true;
		}

		Render.__init$ = function () {
			/*__JS__ */window.ConchRenderType = window.ConchRenderType || 1;
			/*__JS__ */window.ConchRenderType |= (!window.conch ? 0 : 0x04);; {
				Render.isConchNode =/*__JS__ */(window.ConchRenderType & 5) == 5;
				Render.isConchApp =/*__JS__ */(window.ConchRenderType & 0x04) == 0x04;
				Render.isConchWebGL =/*__JS__ */window.ConchRenderType == 6;
			};;
		}

		return Render;
	})()


	/**
	*@private
	*渲染环境
	*/
	//class laya.renders.RenderContext
	var RenderContext = (function () {
		function RenderContext(width, height, canvas) {
			this.x = 0;
			this.y = 0;
			//this.canvas=null;
			//this.ctx=null;
			this._drawTexture = function (x, y, args) {
				if (args[0].loaded) this.ctx.drawTexture(args[0], args[1], args[2], args[3], args[4], x, y);
			}
			this._fillTexture = function (x, y, args) {
				if (args[0].loaded) this.ctx.fillTexture(args[0], args[1] + x, args[2] + y, args[3], args[4], args[5], args[6], args[7]);
			}
			this._drawTextureWithTransform = function (x, y, args) {
				if (args[0].loaded) this.ctx.drawTextureWithTransform(args[0], args[1], args[2], args[3], args[4], args[5], x, y, args[6]);
			}
			this._fillQuadrangle = function (x, y, args) {
				this.ctx.fillQuadrangle(args[0], args[1], args[2], args[3], args[4]);
			}
			this._drawRect = function (x, y, args) {
				var ctx = this.ctx;
				if (args[4] != null) {
					ctx.fillStyle = args[4];
					ctx.fillRect(x + args[0], y + args[1], args[2], args[3], null);
				}
				if (args[5] != null) {
					ctx.strokeStyle = args[5];
					ctx.lineWidth = args[6];
					ctx.strokeRect(x + args[0], y + args[1], args[2], args[3], args[6]);
				}
			}
			this._drawPie = function (x, y, args) {
				var ctx = this.ctx;
				Render.isWebGL && ctx.setPathId(args[8]);
				ctx.beginPath();
				if (Render.isWebGL) {
					ctx.movePath(args[0] + x, args[1] + y);
					ctx.moveTo(0, 0);
				} else {
					ctx.moveTo(x + args[0], y + args[1]);
				}
				ctx.arc(x + args[0], y + args[1], args[2], args[3], args[4]);
				ctx.closePath();
				this._fillAndStroke(args[5], args[6], args[7], true);
			}
			this._clipRect = function (x, y, args) {
				this.ctx.clipRect(x + args[0], y + args[1], args[2], args[3]);
			}
			this._fillRect = function (x, y, args) {
				this.ctx.fillRect(x + args[0], y + args[1], args[2], args[3], args[4]);
			}
			this._drawCircle = function (x, y, args) {
				var ctx = this.ctx;
				Render.isWebGL && ctx.setPathId(args[6]);
				Stat.drawCall++;
				ctx.beginPath();
				Render.isWebGL && ctx.movePath(args[0] + x, args[1] + y);
				ctx.arc(args[0] + x, args[1] + y, args[2], 0, RenderContext.PI2);
				ctx.closePath();
				this._fillAndStroke(args[3], args[4], args[5], true);
			}
			this._fillCircle = function (x, y, args) {
				Stat.drawCall++;
				var ctx = this.ctx;
				ctx.beginPath();
				ctx.fillStyle = args[3];
				ctx.arc(args[0] + x, args[1] + y, args[2], 0, RenderContext.PI2);
				ctx.fill();
			}
			this._setShader = function (x, y, args) {
				this.ctx.setShader(args[0]);
			}
			this._drawLine = function (x, y, args) {
				var ctx = this.ctx;
				Render.isWebGL && ctx.setPathId(args[6]);
				ctx.beginPath();
				ctx.strokeStyle = args[4];
				ctx.lineWidth = args[5];
				if (Render.isWebGL) {
					ctx.movePath(x, y);
					ctx.moveTo(args[0], args[1]);
					ctx.lineTo(args[2], args[3]);
				} else {
					ctx.moveTo(x + args[0], y + args[1]);
					ctx.lineTo(x + args[2], y + args[3]);
				}
				ctx.stroke();
			}
			this._drawLines = function (x, y, args) {
				var ctx = this.ctx;
				Render.isWebGL && ctx.setPathId(args[5]);
				ctx.beginPath();
				x += args[0], y += args[1];
				Render.isWebGL && ctx.movePath(x, y);
				ctx.strokeStyle = args[3];
				ctx.lineWidth = args[4];
				var points = args[2];
				var i = 2, n = points.length;
				if (Render.isWebGL) {
					ctx.moveTo(points[0], points[1]);
					while (i < n) {
						ctx.lineTo(points[i++], points[i++]);
					}
				} else {
					ctx.moveTo(x + points[0], y + points[1]);
					while (i < n) {
						ctx.lineTo(x + points[i++], y + points[i++]);
					}
				}
				ctx.stroke();
			}
			this._drawLinesWebGL = function (x, y, args) {
				this.ctx.drawLines(x + this.x + args[0], y + this.y + args[1], args[2], args[3], args[4]);
			}
			this._drawCurves = function (x, y, args) {
				this.ctx.drawCurves(x, y, args);
			}
			this._draw = function (x, y, args) {
				args[0].call(null, this, x, y);
			}
			this._transformByMatrix = function (x, y, args) {
				this.ctx.transformByMatrix(args[0]);
			}
			this._setTransform = function (x, y, args) {
				this.ctx.setTransform(args[0], args[1], args[2], args[3], args[4], args[5]);
			}
			this._setTransformByMatrix = function (x, y, args) {
				this.ctx.setTransformByMatrix(args[0]);
			}
			this._save = function (x, y, args) {
				this.ctx.save();
			}
			this._restore = function (x, y, args) {
				this.ctx.restore();
			}
			this._translate = function (x, y, args) {
				this.ctx.translate(args[0], args[1]);
			}
			this._transform = function (x, y, args) {
				this.ctx.translate(args[1] + x, args[2] + y);
				var mat = args[0];
				this.ctx.transform(mat.a, mat.b, mat.c, mat.d, mat.tx, mat.ty);
				this.ctx.translate(-x - args[1], -y - args[2]);
			}
			this._rotate = function (x, y, args) {
				this.ctx.translate(args[1] + x, args[2] + y);
				this.ctx.rotate(args[0]);
				this.ctx.translate(-x - args[1], -y - args[2]);
			}
			this._scale = function (x, y, args) {
				this.ctx.translate(args[2] + x, args[3] + y);
				this.ctx.scale(args[0], args[1]);
				this.ctx.translate(-x - args[2], -y - args[3]);
			}
			this._alpha = function (x, y, args) {
				this.ctx.globalAlpha *= args[0];
			}
			this._setAlpha = function (x, y, args) {
				this.ctx.globalAlpha = args[0];
			}
			this._fillText = function (x, y, args) {
				this.ctx.fillText(args[0], args[1] + x, args[2] + y, args[3], args[4], args[5]);
			}
			this._strokeText = function (x, y, args) {
				this.ctx.strokeText(args[0], args[1] + x, args[2] + y, args[3], args[4], args[5], args[6]);
			}
			this._fillBorderText = function (x, y, args) {
				this.ctx.fillBorderText(args[0], args[1] + x, args[2] + y, args[3], args[4], args[5], args[6], args[7]);
			}
			this._blendMode = function (x, y, args) {
				this.ctx.globalCompositeOperation = args[0];
			}
			this._beginClip = function (x, y, args) {
				this.ctx.beginClip && this.ctx.beginClip(x + args[0], y + args[1], args[2], args[3]);
			}
			this._setIBVB = function (x, y, args) {
				this.ctx.setIBVB(args[0] + x, args[1] + y, args[2], args[3], args[4], args[5], args[6], args[7]);
			}
			this._fillTrangles = function (x, y, args) {
				this.ctx.fillTrangles(args[0], args[1] + x, args[2] + y, args[3], args[4]);
			}
			this._drawPath = function (x, y, args) {
				var ctx = this.ctx;
				Render.isWebGL && ctx.setPathId(-1);
				ctx.beginPath();
				x += args[0], y += args[1];
				Render.isWebGL && ctx.movePath(x, y);
				var paths = args[2];
				for (var i = 0, n = paths.length; i < n; i++) {
					var path = paths[i];
					switch (path[0]) {
						case "moveTo":
							Render.isWebGL ? ctx.moveTo(path[1], path[2]) : ctx.moveTo(x + path[1], y + path[2]);
							break;
						case "lineTo":
							Render.isWebGL ? ctx.lineTo(path[1], path[2]) : ctx.lineTo(x + path[1], y + path[2]);
							break;
						case "arcTo":
							Render.isWebGL ? ctx.arcTo(path[1], path[2], path[3], path[4], path[5]) : ctx.arcTo(x + path[1], y + path[2], x + path[3], y + path[4], path[5]);
							break;
						case "closePath":
							ctx.closePath();
							break;
					}
				};
				var brush = args[3];
				if (brush != null) {
					ctx.fillStyle = brush.fillStyle;
					ctx.fill();
				};
				var pen = args[4];
				if (pen != null) {
					ctx.strokeStyle = pen.strokeStyle;
					ctx.lineWidth = pen.lineWidth || 1;
					ctx.lineJoin = pen.lineJoin;
					ctx.lineCap = pen.lineCap;
					ctx.miterLimit = pen.miterLimit;
					ctx.stroke();
				}
			}
			this.drawPoly = function (x, y, args) {
				this.ctx.drawPoly(x + this.x + args[0], y + this.y + args[1], args[2], args[3], args[4], args[5], args[6]);
			}
			this._drawPoly = function (x, y, args) {
				var ctx = this.ctx;
				var points = args[2];
				var i = 2, n = points.length;
				if (Render.isWebGL) {
					ctx.setPathId(args[6]);
					ctx.beginPath();
					x += args[0], y += args[1];
					ctx.movePath(x, y);
					ctx.moveTo(points[0], points[1]);
					while (i < n) {
						ctx.lineTo(points[i++], points[i++]);
					}
				} else {
					ctx.beginPath();
					x += args[0], y += args[1];
					ctx.moveTo(x + points[0], y + points[1]);
					while (i < n) {
						ctx.lineTo(x + points[i++], y + points[i++]);
					}
				}
				ctx.closePath();
				this._fillAndStroke(args[3], args[4], args[5], args[7]);
			}
			this._drawSkin = function (x, y, args) {
				var tSprite = args[0];
				if (tSprite) {
					var ctx = this.ctx;
					tSprite.render(ctx, x, y);
				}
			}
			this._drawParticle = function (x, y, args) {
				this.ctx.drawParticle(x + this.x, y + this.y, args[0]);
			}
			if (canvas) {
				this.ctx = canvas.getContext('2d');
			} else {
				canvas = HTMLCanvas.create("3D");
				this.ctx = RunDriver.createWebGLContext2D(canvas);
				canvas._setContext(this.ctx);
			}
			canvas.size(width, height);
			this.canvas = canvas;
		}

		__class(RenderContext, 'laya.renders.RenderContext');
		var __proto = RenderContext.prototype;
		/**销毁当前渲染环境*/
		__proto.destroy = function () {
			if (this.canvas) {
				this.canvas.destroy();
				this.canvas = null;
			}
			if (this.ctx) {
				this.ctx.destroy();
				this.ctx = null;
			}
		}

		__proto.drawTexture = function (tex, x, y, width, height) {
			if (tex.loaded) this.ctx.drawTexture(tex, x, y, width, height, this.x, this.y);
		}

		__proto._drawTextures = function (x, y, args) {
			if (args[0].loaded) this.ctx.drawTextures(args[0], args[1], x + this.x, y + this.y);
		}

		__proto.drawTextureWithTransform = function (tex, x, y, width, height, m, alpha) {
			if (tex.loaded) this.ctx.drawTextureWithTransform(tex, x, y, width, height, m, this.x, this.y, alpha);
		}

		__proto.fillQuadrangle = function (tex, x, y, point4, m) {
			this.ctx.fillQuadrangle(tex, x, y, point4, m);
		}

		__proto.drawCanvas = function (canvas, x, y, width, height) {
			this.ctx.drawCanvas(canvas, x + this.x, y + this.y, width, height);
		}

		__proto.drawRect = function (x, y, width, height, color, lineWidth) {
			(lineWidth === void 0) && (lineWidth = 1);
			var ctx = this.ctx;
			ctx.strokeStyle = color;
			ctx.lineWidth = lineWidth;
			ctx.strokeRect(x + this.x, y + this.y, width, height, lineWidth);
		}

		__proto._fillAndStroke = function (fillColor, strokeColor, lineWidth, isConvexPolygon) {
			(isConvexPolygon === void 0) && (isConvexPolygon = false);
			var ctx = this.ctx;
			if (fillColor != null) {
				ctx.fillStyle = fillColor;
				if (Render.isWebGL) {
					ctx.fill(isConvexPolygon);
				} else {
					ctx.fill();
				}
			}
			if (strokeColor != null && lineWidth > 0) {
				ctx.strokeStyle = strokeColor;
				ctx.lineWidth = lineWidth;
				ctx.stroke();
			}
		}

		//ctx.translate(-x-args[0],-y-args[1]);
		__proto.clipRect = function (x, y, width, height) {
			this.ctx.clipRect(x + this.x, y + this.y, width, height);
		}

		__proto.fillRect = function (x, y, width, height, fillStyle) {
			this.ctx.fillRect(x + this.x, y + this.y, width, height, fillStyle);
		}

		__proto.drawCircle = function (x, y, radius, color, lineWidth) {
			(lineWidth === void 0) && (lineWidth = 1);
			Stat.drawCall++;
			var ctx = this.ctx;
			ctx.beginPath();
			ctx.strokeStyle = color;
			ctx.lineWidth = lineWidth;
			ctx.arc(x + this.x, y + this.y, radius, 0, RenderContext.PI2);
			ctx.stroke();
		}

		__proto.fillCircle = function (x, y, radius, color) {
			Stat.drawCall++;
			var ctx = this.ctx;
			ctx.beginPath();
			ctx.fillStyle = color;
			ctx.arc(x + this.x, y + this.y, radius, 0, RenderContext.PI2);
			ctx.fill();
		}

		__proto.setShader = function (shader) {
			this.ctx.setShader(shader);
		}

		__proto.drawLine = function (fromX, fromY, toX, toY, color, lineWidth) {
			(lineWidth === void 0) && (lineWidth = 1);
			var ctx = this.ctx;
			ctx.beginPath();
			ctx.strokeStyle = color;
			ctx.lineWidth = lineWidth;
			ctx.moveTo(this.x + fromX, this.y + fromY);
			ctx.lineTo(this.x + toX, this.y + toY);
			ctx.stroke();
		}

		__proto.clear = function () {
			this.ctx.clear();
		}

		__proto.transformByMatrix = function (value) {
			this.ctx.transformByMatrix(value);
		}

		__proto.setTransform = function (a, b, c, d, tx, ty) {
			this.ctx.setTransform(a, b, c, d, tx, ty);
		}

		__proto.setTransformByMatrix = function (value) {
			this.ctx.setTransformByMatrix(value);
		}

		__proto.save = function () {
			this.ctx.save();
		}

		__proto.restore = function () {
			this.ctx.restore();
		}

		__proto.translate = function (x, y) {
			this.ctx.translate(x, y);
		}

		__proto.transform = function (a, b, c, d, tx, ty) {
			this.ctx.transform(a, b, c, d, tx, ty);
		}

		__proto.rotate = function (angle) {
			this.ctx.rotate(angle);
		}

		__proto.scale = function (scaleX, scaleY) {
			this.ctx.scale(scaleX, scaleY);
		}

		__proto.alpha = function (value) {
			this.ctx.globalAlpha *= value;
		}

		__proto.setAlpha = function (value) {
			this.ctx.globalAlpha = value;
		}

		__proto.fillWords = function (words, x, y, font, color, underLine) {
			(underLine === void 0) && (underLine = 0);
			this.ctx.fillWords(words, x, y, font, color, underLine);
		}

		/***@private */
		__proto.fillBorderWords = function (words, x, y, font, fillColor, borderColor, lineWidth) {
			this.ctx.fillBorderWords(words, x, y, font, fillColor, borderColor, lineWidth);
		}

		__proto.fillText = function (text, x, y, font, color, textAlign) {
			this.ctx.fillText(text, x + this.x, y + this.y, font, color, textAlign);
		}

		__proto.strokeText = function (text, x, y, font, color, lineWidth, textAlign) {
			this.ctx.strokeText(text, x + this.x, y + this.y, font, color, lineWidth, textAlign);
		}

		__proto.blendMode = function (type) {
			this.ctx.globalCompositeOperation = type;
		}

		__proto.flush = function () {
			this.ctx.flush && this.ctx.flush();
		}

		__proto.addRenderObject = function (o) {
			this.ctx.addRenderObject(o);
		}

		__proto.beginClip = function (x, y, w, h) {
			this.ctx.beginClip && this.ctx.beginClip(x, y, w, h);
		}

		__proto.endClip = function () {
			this.ctx.endClip && this.ctx.endClip();
		}

		__proto.fillTrangles = function (x, y, args) {
			this.ctx.fillTrangles(args[0], args[1], args[2], args[3], args.length > 4 ? args[4] : null);
		}

		RenderContext.PI2 = 2 * Math.PI;
		return RenderContext;
	})()


	/**
	*@private
	*精灵渲染器
	*/
	//class laya.renders.RenderSprite
	var RenderSprite = (function () {
		function RenderSprite(type, next) {
			//this._next=null;
			//this._fun=null;
			this._next = next || RenderSprite.NORENDER;
			switch (type) {
				case 0:
					this._fun = this._no;
					return;
				case 0x01:
					this._fun = this._image;
					return;
				case 0x02:
					this._fun = this._alpha;
					return;
				case 0x04:
					this._fun = this._transform;
					return;
				case 0x08:
					this._fun = this._blend;
					return;
				case 0x10:
					this._fun = this._canvas;
					return;
				case 0x40:
					this._fun = this._mask;
					return;
				case 0x80:
					this._fun = this._clip;
					return;
				case 0x100:
					this._fun = this._style;
					return;
				case 0x200:
					this._fun = this._graphics;
					return;
				case 0x800:
					this._fun = this._childs;
					return;
				case 0x400:
					this._fun = this._custom;
					return;
				case 0x01 | 0x200:
					this._fun = this._image2;
					return;
				case 0x01 | 0x04 | 0x200:
					this._fun = this._image2;
					return;
				case 0x20:
					this._fun = Filter._filter;
					return;
				case 0x11111:
					this._fun = RenderSprite._initRenderFun;
					return;
			}
			this.onCreate(type);
		}

		__class(RenderSprite, 'laya.renders.RenderSprite');
		var __proto = RenderSprite.prototype;
		__proto.onCreate = function (type) { }
		__proto._style = function (sprite, context, x, y) {
			sprite._style.render(sprite, context, x, y);
			var next = this._next;
			next._fun.call(next, sprite, context, x, y);
		}

		__proto._no = function (sprite, context, x, y) { }
		__proto._custom = function (sprite, context, x, y) {
			sprite.customRender(context, x, y);
			var tf = sprite._style._tf;
			this._next._fun.call(this._next, sprite, context, x - tf.translateX, y - tf.translateY);
		}

		__proto._clip = function (sprite, context, x, y) {
			var next = this._next;
			if (next == RenderSprite.NORENDER) return;
			var r = sprite._style.scrollRect;
			context.ctx.save();
			context.ctx.clipRect(x, y, r.width, r.height);
			next._fun.call(next, sprite, context, x - r.x, y - r.y);
			context.ctx.restore();
		}

		__proto._blend = function (sprite, context, x, y) {
			var style = sprite._style;
			if (style.blendMode) {
				context.ctx.globalCompositeOperation = style.blendMode;
			};
			var next = this._next;
			next._fun.call(next, sprite, context, x, y);
			context.ctx.globalCompositeOperation = "source-over";
		}

		__proto._mask = function (sprite, context, x, y) {
			var next = this._next;
			next._fun.call(next, sprite, context, x, y);
			var mask = sprite.mask;
			if (mask) {
				context.ctx.globalCompositeOperation = "destination-in";
				if (mask.numChildren > 0 || !mask.graphics._isOnlyOne()) {
					mask.cacheAsBitmap = true;
				}
				mask.render(context, x - sprite.pivotX, y - sprite.pivotY);
			}
			context.ctx.globalCompositeOperation = "source-over";
		}

		__proto._graphics = function (sprite, context, x, y) {
			var tf = sprite._style._tf;
			sprite._graphics && sprite._graphics._render(sprite, context, x - tf.translateX, y - tf.translateY);
			var next = this._next;
			next._fun.call(next, sprite, context, x, y);
		}

		__proto._image = function (sprite, context, x, y) {
			var style = sprite._style;
			context.ctx.drawTexture2(x, y, style._tf.translateX, style._tf.translateY, sprite.transform, style.alpha, style.blendMode, sprite._graphics._one);
		}

		__proto._image2 = function (sprite, context, x, y) {
			var tf = sprite._style._tf;
			context.ctx.drawTexture2(x, y, tf.translateX, tf.translateY, sprite.transform, 1, null, sprite._graphics._one);
		}

		__proto._alpha = function (sprite, context, x, y) {
			var style = sprite._style;
			var alpha;
			if ((alpha = style.alpha) > 0.01 || sprite._needRepaint()) {
				var temp = context.ctx.globalAlpha;
				context.ctx.globalAlpha *= alpha;
				var next = this._next;
				next._fun.call(next, sprite, context, x, y);
				context.ctx.globalAlpha = temp;
			}
		}

		__proto._transform = function (sprite, context, x, y) {
			var transform = sprite.transform, _next = this._next;
			if (transform && _next != RenderSprite.NORENDER) {
				context.save();
				context.transform(transform.a, transform.b, transform.c, transform.d, transform.tx + x, transform.ty + y);
				_next._fun.call(_next, sprite, context, 0, 0);
				context.restore();
			} else
				_next._fun.call(_next, sprite, context, x, y);
		}

		__proto._childs = function (sprite, context, x, y) {
			var style = sprite._style;
			var tf = style._tf;
			x = x - tf.translateX + style.paddingLeft;
			y = y - tf.translateY + style.paddingTop;
			if (style._calculation) {
				var words = sprite._getWords();
				if (words) {
					var tStyle = style;
					if (tStyle) {
						if (tStyle.stroke) {
							context.fillBorderWords(words, x, y, tStyle.font, tStyle.color, tStyle.strokeColor, tStyle.stroke);
						} else {
							context.fillWords(words, x, y, tStyle.font, tStyle.color, tStyle.underLine);
						}
					}
				}
			};
			var childs = sprite._childs, n = childs.length, ele;
			if (sprite.viewport || (sprite.optimizeScrollRect && sprite._style.scrollRect)) {
				var rect = sprite.viewport || sprite._style.scrollRect;
				var left = rect.x;
				var top = rect.y;
				var right = rect.right;
				var bottom = rect.bottom;
				var _x = NaN, _y = NaN;
				for (i = 0; i < n; ++i) {
					if ((ele = childs[i]).visible && ((_x = ele._x) < right && (_x + ele.width) > left && (_y = ele._y) < bottom && (_y + ele.height) > top)) {
						ele.render(context, x, y);
					}
				}
			} else {
				for (var i = 0; i < n; ++i)
					(ele = (childs[i]))._style.visible && ele.render(context, x, y);
			}
		}

		//}
		__proto._canvas = function (sprite, context, x, y) {
			var _cacheCanvas = sprite._$P.cacheCanvas;
			if (!_cacheCanvas) {
				this._next._fun.call(this._next, sprite, context, x, y);
				return;
			}
			_cacheCanvas.type === 'bitmap' ? (Stat.canvasBitmap++) : (Stat.canvasNormal++);
			var tx = _cacheCanvas.ctx;
			if (sprite._needRepaint() || !tx) {
				this._canvas_repaint(sprite, context, x, y);
			}
			else {
				var tRec = _cacheCanvas._cacheRec;
				context.drawCanvas(tx.canvas, x + tRec.x, y + tRec.y, tRec.width, tRec.height);
			}
		}

		__proto._canvas_repaint = function (sprite, context, x, y) {
			var _cacheCanvas = sprite._$P.cacheCanvas;
			var _next = this._next;
			if (!_cacheCanvas) {
				_next._fun.call(_next, sprite, tx, x, y);
				return;
			};
			var tx = _cacheCanvas.ctx;
			var _repaint = sprite._needRepaint() || (!tx);
			var canvas;
			var left;
			var top;
			var tRec;
			var tCacheType = _cacheCanvas.type;
			tCacheType === 'bitmap' ? (Stat.canvasBitmap++) : (Stat.canvasNormal++);
			if (_repaint) {
				if (!_cacheCanvas._cacheRec)
					_cacheCanvas._cacheRec = new Rectangle();
				var w, h;
				if (!Render.isWebGL || tCacheType === "bitmap") {
					tRec = sprite.getSelfBounds();
					tRec.x = tRec.x - sprite.pivotX;
					tRec.y = tRec.y - sprite.pivotY;
					tRec.x = tRec.x - 16;
					tRec.y = tRec.y - 16;
					tRec.width = tRec.width + 32;
					tRec.height = tRec.height + 32;
					tRec.x = Math.floor(tRec.x + x) - x;
					tRec.y = Math.floor(tRec.y + y) - y;
					tRec.width = Math.floor(tRec.width);
					tRec.height = Math.floor(tRec.height);
					_cacheCanvas._cacheRec.copyFrom(tRec);
				} else {
					_cacheCanvas._cacheRec.setTo(-sprite.pivotX, -sprite.pivotY, 1, 1);
				}
				tRec = _cacheCanvas._cacheRec;
				var scaleX = Render.isWebGL ? 1 : Browser.pixelRatio * Laya.stage.clientScaleX;
				var scaleY = Render.isWebGL ? 1 : Browser.pixelRatio * Laya.stage.clientScaleY;
				if (!Render.isWebGL) {
					var chainScaleX = 1;
					var chainScaleY = 1;
					var tar;
					tar = sprite;
					while (tar && tar != Laya.stage) {
						chainScaleX *= tar.scaleX;
						chainScaleY *= tar.scaleY;
						tar = tar.parent;
					}
					if (Render.isWebGL) {
						if (chainScaleX < 1) scaleX *= chainScaleX;
						if (chainScaleY < 1) scaleY *= chainScaleY;
					} else {
						if (chainScaleX > 1) scaleX *= chainScaleX;
						if (chainScaleY > 1) scaleY *= chainScaleY;
					}
				}
				if (sprite.scrollRect) {
					var scrollRect = sprite.scrollRect;
					tRec.x -= scrollRect.x;
					tRec.y -= scrollRect.y;
				}
				w = tRec.width * scaleX;
				h = tRec.height * scaleY;
				left = tRec.x;
				top = tRec.y;
				if (Render.isWebGL && tCacheType === 'bitmap' && (w > 2048 || h > 2048)) {
					console.warn("cache bitmap size larger than 2048,cache ignored");
					if (_cacheCanvas.ctx) {
						Pool.recover("RenderContext", _cacheCanvas.ctx);
						_cacheCanvas.ctx.canvas.size(0, 0);
						_cacheCanvas.ctx = null;
					}
					_next._fun.call(_next, sprite, context, x, y);
					return;
				}
				if (!tx) {
					tx = _cacheCanvas.ctx = Pool.getItem("RenderContext") || new RenderContext(w, h, HTMLCanvas.create(/*laya.resource.HTMLCanvas.TYPEAUTO*/"AUTO"));
				}
				tx.ctx.sprite = sprite;
				canvas = tx.canvas;
				canvas.clear();
				(canvas.width != w || canvas.height != h) && canvas.size(w, h);
				if (tCacheType === 'bitmap') canvas.context.asBitmap = true;
				else if (tCacheType === 'normal') canvas.context.asBitmap = false;
				var t;
				if (scaleX != 1 || scaleY != 1) {
					var ctx = (tx).ctx;
					ctx.save();
					ctx.scale(scaleX, scaleY);
					if (!Render.isConchWebGL && Render.isConchApp) {
						t = sprite._$P.cf;
						t && ctx.setFilterMatrix && ctx.setFilterMatrix(t._mat, t._alpha);
					}
					_next._fun.call(_next, sprite, tx, -left, -top);
					ctx.restore();
					if (!Render.isConchApp || Render.isConchWebGL) sprite._applyFilters();
				} else {
					ctx = (tx).ctx;
					if (!Render.isConchWebGL && Render.isConchApp) {
						t = sprite._$P.cf;
						t && ctx.setFilterMatrix && ctx.setFilterMatrix(t._mat, t._alpha);
					}
					_next._fun.call(_next, sprite, tx, -left, -top);
					if (!Render.isConchApp || Render.isConchWebGL) sprite._applyFilters();
				}
				if (sprite._$P.staticCache) _cacheCanvas.reCache = false;
				Stat.canvasReCache++;
			} else {
				tRec = _cacheCanvas._cacheRec;
				left = tRec.x;
				top = tRec.y;
				canvas = tx.canvas;
			}
			context.drawCanvas(canvas, x + left, y + top, tRec.width, tRec.height);
		}

		RenderSprite.__init__ = function () {
			var i = 0, len = 0;
			var initRender;
			initRender = RunDriver.createRenderSprite(0x11111, null);
			len = RenderSprite.renders.length = 0x800 * 2;
			for (i = 0; i < len; i++)
				RenderSprite.renders[i] = initRender;
			RenderSprite.renders[0] = RunDriver.createRenderSprite(0, null);
			function _initSame(value, o) {
				var n = 0;
				for (var i = 0; i < value.length; i++) {
					n |= value[i];
					RenderSprite.renders[n] = o;
				}
			}
			_initSame([0x01, 0x200, 0x04, 0x02], new RenderSprite(0x01, null));
			RenderSprite.renders[0x01 | 0x200] = RunDriver.createRenderSprite(0x01 | 0x200, null);
			RenderSprite.renders[0x01 | 0x04 | 0x200] = new RenderSprite(0x01 | 0x04 | 0x200, null);
		}

		RenderSprite._initRenderFun = function (sprite, context, x, y) {
			var type = sprite._renderType;
			var r = RenderSprite.renders[type] = RenderSprite._getTypeRender(type);
			r._fun(sprite, context, x, y);
		}

		RenderSprite._getTypeRender = function (type) {
			var rst = null;
			var tType = 0x800;
			while (tType > 1) {
				if (tType & type)
					rst = RunDriver.createRenderSprite(tType, rst);
				tType = tType >> 1;
			}
			return rst;
		}

		RenderSprite.IMAGE = 0x01;
		RenderSprite.ALPHA = 0x02;
		RenderSprite.TRANSFORM = 0x04;
		RenderSprite.BLEND = 0x08;
		RenderSprite.CANVAS = 0x10;
		RenderSprite.FILTERS = 0x20;
		RenderSprite.MASK = 0x40;
		RenderSprite.CLIP = 0x80;
		RenderSprite.STYLE = 0x100;
		RenderSprite.GRAPHICS = 0x200;
		RenderSprite.CUSTOM = 0x400;
		RenderSprite.CHILDS = 0x800;
		RenderSprite.INIT = 0x11111;
		RenderSprite.renders = [];
		RenderSprite.NORENDER = new RenderSprite(0, null);
		return RenderSprite;
	})()


	/**
	*@private
	*Context扩展类
	*/
	//class laya.resource.Context
	var Context = (function () {
		function Context() {
			//this._canvas=null;
			this._repaint = false;
		}

		__class(Context, 'laya.resource.Context');
		var __proto = Context.prototype;
		__proto.replaceReset = function () {
			var i = 0, len = 0;
			len = Context.replaceKeys.length;
			var key;
			for (i = 0; i < len; i++) {
				key = Context.replaceKeys[i];
				this[Context.newKeys[i]] = this[key];
			}
		}

		__proto.replaceResotre = function () {
			/*__JS__ */this.__restore();
			/*__JS__ */this.__reset();
		}

		__proto.setIsMainContext = function () { }
		__proto.drawTextures = function (tex, pos, tx, ty) {
			Stat.drawCall += pos.length / 2;
			var w = tex.width;
			var h = tex.height;
			for (var i = 0, sz = pos.length; i < sz; i += 2) {
				this.drawTexture(tex, pos[i], pos[i + 1], w, h, tx, ty);
			}
		}

		/***@private */
		__proto.drawCanvas = function (canvas, x, y, width, height) {
			Stat.drawCall++;
			this.drawImage(canvas.source, x, y, width, height);
		}

		/***@private */
		__proto.fillRect = function (x, y, width, height, style) {
			Stat.drawCall++;
			style && (this.fillStyle = style);
			/*__JS__ */this.__fillRect(x, y, width, height);
		}

		/***@private */
		__proto.fillText = function (text, x, y, font, color, textAlign) {
			Stat.drawCall++;
			if (arguments.length > 3 && font != null) {
				this.font = font;
				this.fillStyle = color;
				/*__JS__ */this.textAlign = textAlign;
				this.textBaseline = "top";
			}
			/*__JS__ */this.__fillText(text, x, y);
		}

		/***@private */
		__proto.fillBorderText = function (text, x, y, font, fillColor, borderColor, lineWidth, textAlign) {
			Stat.drawCall++;
			this.font = font;
			this.fillStyle = fillColor;
			this.textBaseline = "top";
			/*__JS__ */this.strokeStyle = borderColor;
			/*__JS__ */this.lineWidth = lineWidth;
			/*__JS__ */this.textAlign = textAlign;
			/*__JS__ */this.__strokeText(text, x, y);
			/*__JS__ */this.__fillText(text, x, y);
		}

		/***@private */
		__proto.strokeText = function (text, x, y, font, color, lineWidth, textAlign) {
			Stat.drawCall++;
			if (arguments.length > 3 && font != null) {
				this.font = font;
				/*__JS__ */this.strokeStyle = color;
				/*__JS__ */this.lineWidth = lineWidth;
				/*__JS__ */this.textAlign = textAlign;
				this.textBaseline = "top";
			}
			/*__JS__ */this.__strokeText(text, x, y);
		}

		/***@private */
		__proto.transformByMatrix = function (value) {
			this.transform(value.a, value.b, value.c, value.d, value.tx, value.ty);
		}

		/***@private */
		__proto.setTransformByMatrix = function (value) {
			this.setTransform(value.a, value.b, value.c, value.d, value.tx, value.ty);
		}

		/***@private */
		__proto.clipRect = function (x, y, width, height) {
			Stat.drawCall++;
			this.beginPath();
			this.rect(x, y, width, height);
			this.clip();
		}

		/***@private */
		__proto.drawTexture = function (tex, x, y, width, height, tx, ty) {
			Stat.drawCall++;
			var uv = tex.uv, w = tex.bitmap.width, h = tex.bitmap.height;
			this.drawImage(tex.source, uv[0] * w, uv[1] * h, (uv[2] - uv[0]) * w, (uv[5] - uv[3]) * h, x + tx, y + ty, width, height);
		}

		/***@private */
		__proto.drawTextureWithTransform = function (tex, x, y, width, height, m, tx, ty, alpha) {
			Stat.drawCall++;
			var uv = tex.uv, w = tex.bitmap.width, h = tex.bitmap.height;
			this.save();
			alpha != 1 && (this.globalAlpha *= alpha);
			if (m) {
				this.transform(m.a, m.b, m.c, m.d, m.tx + tx, m.ty + ty);
				this.drawImage(tex.source, uv[0] * w, uv[1] * h, (uv[2] - uv[0]) * w, (uv[5] - uv[3]) * h, x, y, width, height);
			} else {
				this.drawImage(tex.source, uv[0] * w, uv[1] * h, (uv[2] - uv[0]) * w, (uv[5] - uv[3]) * h, x + tx, y + ty, width, height);
			}
			this.restore();
		}

		/***@private */
		__proto.drawTexture2 = function (x, y, pivotX, pivotY, m, alpha, blendMode, args2) {
			'use strict';
			var tex = args2[0];
			if (!(tex.loaded && tex.bitmap && tex.source)) {
				return;
			}
			Stat.drawCall++;
			var alphaChanged = alpha !== 1;
			if (alphaChanged) {
				var temp = this.globalAlpha;
				this.globalAlpha *= alpha;
			};
			var uv = tex.uv, w = tex.bitmap.width, h = tex.bitmap.height;
			if (m) {
				this.save();
				this.transform(m.a, m.b, m.c, m.d, m.tx + x, m.ty + y);
				this.drawImage(tex.source, uv[0] * w, uv[1] * h, (uv[2] - uv[0]) * w, (uv[5] - uv[3]) * h, args2[1] - pivotX, args2[2] - pivotY, args2[3], args2[4]);
				this.restore();
			} else {
				this.drawImage(tex.source, uv[0] * w, uv[1] * h, (uv[2] - uv[0]) * w, (uv[5] - uv[3]) * h, args2[1] - pivotX + x, args2[2] - pivotY + y, args2[3], args2[4]);
			}
			if (alphaChanged) this.globalAlpha = temp;
		}

		__proto.fillTexture = function (texture, x, y, width, height, type, offset, other) {
			if (!other.pat) {
				if (texture.uv != Texture.DEF_UV) {
					var canvas = new HTMLCanvas("2D");
					canvas.getContext('2d');
					canvas.size(texture.width, texture.height);
					canvas.context.drawTexture(texture, 0, 0, texture.width, texture.height, 0, 0);
					texture = new Texture(canvas);
				}
				other.pat = this.createPattern(texture.bitmap.source, type);
			};
			var oX = x, oY = y;
			var sX = 0, sY = 0;
			if (offset) {
				oX += offset.x % texture.width;
				oY += offset.y % texture.height;
				sX -= offset.x % texture.width;
				sY -= offset.y % texture.height;
			}
			this.translate(oX, oY);
			this.fillRect(sX, sY, width, height, other.pat);
			this.translate(-oX, -oY);
		}

		/***@private */
		__proto.flush = function () {
			return 0;
		}

		/***@private */
		__proto.fillWords = function (words, x, y, font, color, underLine) {
			font && (this.font = font);
			color && (this.fillStyle = color);
			var _this = this;
			this.textBaseline = "top";
			/*__JS__ */this.textAlign = 'left';
			for (var i = 0, n = words.length; i < n; i++) {
				var a = words[i];
				/*__JS__ */this.__fillText(a.char, a.x + x, a.y + y);
				if (underLine === 1) {
					var tHeight = a.height;
					var dX = a.style.letterSpacing * 0.5;
					if (!dX) dX = 0;
					this.beginPath();
					this.strokeStyle = color;
					this.lineWidth = 1;
					this.moveTo(x + a.x - dX, y + a.y + tHeight);
					this.lineTo(x + a.x + a.width + dX, y + a.y + tHeight);
					this.stroke();
				}
			}
		}

		/***@private */
		__proto.fillBorderWords = function (words, x, y, font, color, borderColor, lineWidth) {
			font && (this.font = font);
			color && (this.fillStyle = color);
			this.textBaseline = "top";
			/*__JS__ */this.lineWidth = lineWidth;
			/*__JS__ */this.textAlign = 'left';
			/*__JS__ */this.strokeStyle = borderColor;
			for (var i = 0, n = words.length; i < n; i++) {
				var a = words[i];
				/*__JS__ */this.__strokeText(a.char, a.x + x, a.y + y);
				/*__JS__ */this.__fillText(a.char, a.x + x, a.y + y);
			}
		}

		/***@private */
		__proto.destroy = function () {
			/*__JS__ */this.canvas.width = this.canvas.height = 0;
		}

		/***@private */
		__proto.clear = function () {
			this.clearRect(0, 0, this._canvas.width, this._canvas.height);
			this._repaint = false;
		}

		__proto.drawCurves = function (x, y, args) {
			this.beginPath();
			this.strokeStyle = args[3];
			this.lineWidth = args[4];
			var points = args[2];
			x += args[0], y += args[1];
			this.moveTo(x + points[0], y + points[1]);
			var i = 2, n = points.length;
			while (i < n) {
				this.quadraticCurveTo(x + points[i++], y + points[i++], x + points[i++], y + points[i++]);
			}
			this.stroke();
		}

		Context.__init__ = function (to) {
			var from = laya.resource.Context.prototype;
			to = to || /*__JS__ */CanvasRenderingContext2D.prototype;
			to.__fillText = to.fillText;
			to.__fillRect = to.fillRect;
			to.__strokeText = to.strokeText;
			var funs = ['drawTextures', 'fillWords', 'fillBorderWords', 'setIsMainContext', 'fillRect', 'strokeText', 'fillTexture', 'fillText', 'transformByMatrix', 'setTransformByMatrix', 'clipRect', 'drawTexture', 'drawTexture2', 'drawTextureWithTransform', 'flush', 'clear', 'destroy', 'drawCanvas', 'fillBorderText', 'drawCurves'];
			funs.forEach(function (i) {
				to[i] = from[i];
			});
			var canvasO =/*__JS__ */HTMLCanvasElement.prototype;
			if (!Context.replaceCanvasGetSet(canvasO, "width")) return;
			if (!Context.replaceCanvasGetSet(canvasO, "height")) return;
			var i = 0, len = 0;
			len = Context.replaceKeys.length;
			for (i = 0; i < len; i++) {
				if (!Context.replaceGetSet(to, Context.replaceKeys[i])) return;
			}
			to.__reset = from.replaceReset;
			to.__restore = to.restore;
			to.restore = from.replaceResotre;
		}

		Context.replaceCanvasGetSet = function (tar, key) {
			var oldO =/*__JS__ */Object.getOwnPropertyDescriptor(tar, key);
			if (!oldO || !oldO.configurable) return false;
			var newO = {};
			var tkey;
			for (tkey in oldO) {
				if (tkey != "set") {
					newO[tkey] = oldO[tkey];
				}
			};
			var preFun = oldO["set"];
			newO["set"] = function (v) {
				var _self =/*__JS__ */this;
				preFun.call(_self, v);
				var _ct = _self.getContext("2d");
				if (_ct && "__reset" in _ct) {
					_ct.__reset();
				}
			}
			/*__JS__ */Object.defineProperty(tar, key, newO);
			return true;
		}

		Context.replaceGetSet = function (tar, key) {
			var oldO =/*__JS__ */Object.getOwnPropertyDescriptor(tar, key);
			if (!oldO || !oldO.configurable) return false;
			var newO = {};
			var tkey;
			for (tkey in oldO) {
				if (tkey != "set") {
					newO[tkey] = oldO[tkey];
				}
			};
			var preFun = oldO["set"];
			var dataKey = "___" + key + "__";
			Context.newKeys.push(dataKey);
			newO["set"] = function (v) {
				var _self =/*__JS__ */this;
				if (v != _self[dataKey]) {
					_self[dataKey] = v;
					preFun.call(_self, v);
				}
			}
			/*__JS__ */Object.defineProperty(tar, key, newO);
			return true;
		}

		Context._default = new Context();
		Context.newKeys = [];
		__static(Context,
			['replaceKeys', function () { return this.replaceKeys = ["font", "fillStyle", "textBaseline"]; }
			]);
		return Context;
	})()


	/**
	*@private
	*<code>ResourceManager</code> 是资源管理类。它用于资源的载入、获取、销毁。
	*/
	//class laya.resource.ResourceManager
	var ResourceManager = (function () {
		function ResourceManager() {
			this._id = 0;
			this._name = null;
			this._resources = null;
			this._memorySize = 0;
			this._garbageCollectionRate = NaN;
			this._isOverflow = false;
			this.autoRelease = false;
			this.autoReleaseMaxSize = 0;
			this._id = ++ResourceManager._uniqueIDCounter;
			this._name = "Content Manager";
			ResourceManager._isResourceManagersSorted = false;
			this._memorySize = 0;
			this._isOverflow = false;
			this.autoRelease = false;
			this.autoReleaseMaxSize = 1024 * 1024 * 512;
			this._garbageCollectionRate = 0.2;
			ResourceManager._resourceManagers.push(this);
			this._resources = [];
		}

		__class(ResourceManager, 'laya.resource.ResourceManager');
		var __proto = ResourceManager.prototype;
		Laya.imps(__proto, { "laya.resource.IDispose": true })
		/**
		*获取指定索引的资源 Resource 对象。
		*@param 索引。
		*@return 资源 Resource 对象。
		*/
		__proto.getResourceByIndex = function (index) {
			return this._resources[index];
		}

		/**
		*获取此管理器所管理的资源个数。
		*@return 资源个数。
		*/
		__proto.getResourcesLength = function () {
			return this._resources.length;
		}

		/**
		*添加指定资源。
		*@param resource 需要添加的资源 Resource 对象。
		*@return 是否添加成功。
		*/
		__proto.addResource = function (resource) {
			if (resource.resourceManager)
				resource.resourceManager.removeResource(resource);
			var index = this._resources.indexOf(resource);
			if (index === -1) {
				resource._resourceManager = this;
				this._resources.push(resource);
				this.addSize(resource.memorySize);
				return true;
			}
			return false;
		}

		/**
		*移除指定资源。
		*@param resource 需要移除的资源 Resource 对象
		*@return 是否移除成功。
		*/
		__proto.removeResource = function (resource) {
			var index = this._resources.indexOf(resource);
			if (index !== -1) {
				this._resources.splice(index, 1);
				resource._resourceManager = null;
				this._memorySize -= resource.memorySize;
				return true;
			}
			return false;
		}

		/**
		*卸载此资源管理器载入的资源。
		*/
		__proto.unload = function () {
			var tempResources = this._resources.slice(0, this._resources.length);
			for (var i = 0; i < tempResources.length; i++) {
				var resource = tempResources[i];
				resource.dispose();
			}
			tempResources.length = 0;
		}

		/**
		*设置唯一名字。
		*@param newName 名字，如果名字重复则自动加上“-copy”。
		*/
		__proto.setUniqueName = function (newName) {
			var isUnique = true;
			for (var i = 0; i < ResourceManager._resourceManagers.length; i++) {
				if (ResourceManager._resourceManagers[i]._name !== newName || ResourceManager._resourceManagers[i] === this)
					continue;
				isUnique = false;
				return;
			}
			if (isUnique) {
				if (this.name != newName) {
					this.name = newName;
					ResourceManager._isResourceManagersSorted = false;
				}
			} else {
				this.setUniqueName(newName.concat("-copy"));
			}
		}

		/**释放资源。*/
		__proto.dispose = function () {
			if (this === ResourceManager._systemResourceManager)
				throw new Error("systemResourceManager不能被释放！");
			ResourceManager._resourceManagers.splice(ResourceManager._resourceManagers.indexOf(this), 1);
			ResourceManager._isResourceManagersSorted = false;
			var tempResources = this._resources.slice(0, this._resources.length);
			for (var i = 0; i < tempResources.length; i++) {
				var resource = tempResources[i];
				resource.resourceManager.removeResource(resource);
				resource.dispose();
			}
			tempResources.length = 0;
		}

		/**
		*增加内存。
		*@param add 需要增加的内存大小。
		*/
		__proto.addSize = function (add) {
			if (add) {
				if (this.autoRelease && add > 0)
					((this._memorySize + add) > this.autoReleaseMaxSize) && (this.garbageCollection((1 - this._garbageCollectionRate) * this.autoReleaseMaxSize));
				this._memorySize += add;
			}
		}

		/**
		*垃圾回收。
		*@param reserveSize 保留尺寸。
		*/
		__proto.garbageCollection = function (reserveSize) {
			var all = this._resources;
			all = all.slice();
			all.sort(function (a, b) {
				if (!a || !b)
					throw new Error("a或b不能为空！");
				if (a.released && b.released)
					return 0;
				else if (a.released)
					return 1;
				else if (b.released)
					return -1;
				return a._lastUseFrameCount - b._lastUseFrameCount;
			});
			var currentFrameCount = Stat.loopCount;
			for (var i = 0, n = all.length; i < n; i++) {
				var resou = all[i];
				if (currentFrameCount - resou._lastUseFrameCount > 1) {
					resou.releaseResource();
				} else {
					if (this._memorySize >= reserveSize)
						this._isOverflow = true;
					return;
				}
				if (this._memorySize < reserveSize) {
					this._isOverflow = false;
					return;
				}
			}
		}

		/**
		*唯一标识 ID 。
		*/
		__getset(0, __proto, 'id', function () {
			return this._id;
		});

		/**
		*名字。
		*/
		__getset(0, __proto, 'name', function () {
			return this._name;
		}, function (value) {
			if ((value || value !== "") && this._name !== value) {
				this._name = value;
				ResourceManager._isResourceManagersSorted = false;
			}
		});

		/**
		*此管理器所管理资源的累计内存，以字节为单位。
		*/
		__getset(0, __proto, 'memorySize', function () {
			return this._memorySize;
		});

		/**
		*系统资源管理器。
		*/
		__getset(1, ResourceManager, 'systemResourceManager', function () {
			(ResourceManager._systemResourceManager === null) && (ResourceManager._systemResourceManager = new ResourceManager(), ResourceManager._systemResourceManager._name = "System Resource Manager");
			return ResourceManager._systemResourceManager;
		});

		/**
		*排序后的资源管理器列表。
		*/
		__getset(1, ResourceManager, 'sortedResourceManagersByName', function () {
			if (!ResourceManager._isResourceManagersSorted) {
				ResourceManager._isResourceManagersSorted = true;
				ResourceManager._resourceManagers.sort(ResourceManager.compareResourceManagersByName);
			}
			return ResourceManager._resourceManagers;
		});

		ResourceManager.__init__ = function () {
			ResourceManager.currentResourceManager = ResourceManager.systemResourceManager;
		}

		ResourceManager.getLoadedResourceManagerByIndex = function (index) {
			return ResourceManager._resourceManagers[index];
		}

		ResourceManager.getLoadedResourceManagersCount = function () {
			return ResourceManager._resourceManagers.length;
		}

		ResourceManager.recreateContentManagers = function (force) {
			(force === void 0) && (force = false);
			var temp = ResourceManager.currentResourceManager;
			for (var i = 0; i < ResourceManager._resourceManagers.length; i++) {
				ResourceManager.currentResourceManager = ResourceManager._resourceManagers[i];
				for (var j = 0; j < ResourceManager.currentResourceManager._resources.length; j++) {
					ResourceManager.currentResourceManager._resources[j].releaseResource(force);
					ResourceManager.currentResourceManager._resources[j].activeResource(force);
				}
			}
			ResourceManager.currentResourceManager = temp;
		}

		ResourceManager.releaseContentManagers = function (force) {
			(force === void 0) && (force = false);
			var temp = ResourceManager.currentResourceManager;
			for (var i = 0; i < ResourceManager._resourceManagers.length; i++) {
				ResourceManager.currentResourceManager = ResourceManager._resourceManagers[i];
				for (var j = 0; j < ResourceManager.currentResourceManager._resources.length; j++) {
					var resource = ResourceManager.currentResourceManager._resources[j];
					(!resource.released) && (resource.releaseResource(force));
				}
			}
			ResourceManager.currentResourceManager = temp;
		}

		ResourceManager.compareResourceManagersByName = function (left, right) {
			if (left == right)
				return 0;
			var x = left._name;
			var y = right._name;
			if (x == null) {
				if (y == null)
					return 0;
				else
					return -1;
			} else {
				if (y == null)
					return 1;
				else {
					var retval = x.localeCompare(y);
					if (retval != 0)
						return retval;
					else {
						right.setUniqueName(y);
						y = right._name;
						return x.localeCompare(y);
					}
				}
			}
		}

		ResourceManager._uniqueIDCounter = 0;
		ResourceManager._systemResourceManager = null
		ResourceManager._isResourceManagersSorted = false;
		ResourceManager._resourceManagers = [];
		ResourceManager.currentResourceManager = null
		return ResourceManager;
	})()


	/**
	*@private
	*/
	//class laya.system.System
	var System = (function () {
		function System() { };
		__class(System, 'laya.system.System');
		System.changeDefinition = function (name, classObj) {
			Laya[name] = classObj;
			var str = name + "=classObj";
			/*__JS__ */eval(str);
		}

		System.__init__ = function () {
			if (Render.isConchApp) {
				/*__JS__ */conch.disableConchResManager();
				/*__JS__ */conch.disableConchAutoRestoreLostedDevice();
			}
		}

		return System;
	})()


	SoundManager;
	/**
	*<code>Browser</code> 是浏览器代理类。封装浏览器及原生 js 提供的一些功能。
	*/
	//class laya.utils.Browser
	var Browser = (function () {
		function Browser() { };
		__class(Browser, 'laya.utils.Browser');
		/**设备像素比。*/
		__getset(1, Browser, 'pixelRatio', function () {
			Browser.__init__();
			if (Browser.userAgent.indexOf("Mozilla/6.0(Linux; Android 6.0; HUAWEI NXT-AL10 Build/HUAWEINXT-AL10)") > -1) return 2;
			return RunDriver.getPixelRatio();
		});

		/**浏览器窗口物理高度。考虑了设备像素比。*/
		__getset(1, Browser, 'height', function () {
			Browser.__init__();
			return ((Laya.stage && Laya.stage.canvasRotation) ? Browser.clientWidth : Browser.clientHeight) * Browser.pixelRatio;
		});

		/**
		*浏览器窗口可视宽度。
		*通过分析浏览器信息获得。浏览器多个属性值优先级为：window.innerWidth(包含滚动条宽度)> document.body.clientWidth(不包含滚动条宽度)，如果前者为0或为空，则选择后者。
		*/
		__getset(1, Browser, 'clientWidth', function () {
			Browser.__init__();
			return Browser.window.innerWidth || Browser.document.body.clientWidth;
		});

		/**浏览器原生 window 对象的引用。*/
		__getset(1, Browser, 'window', function () {
			Browser.__init__();
			return Browser._window;
		});

		/**
		*浏览器窗口可视高度。
		*通过分析浏览器信息获得。浏览器多个属性值优先级为：window.innerHeight(包含滚动条高度)> document.body.clientHeight(不包含滚动条高度)> document.documentElement.clientHeight(不包含滚动条高度)，如果前者为0或为空，则选择后者。
		*/
		__getset(1, Browser, 'clientHeight', function () {
			Browser.__init__();
			return Browser.window.innerHeight || Browser.document.body.clientHeight || Browser.document.documentElement.clientHeight;
		});

		/**浏览器窗口物理宽度。考虑了设备像素比。*/
		__getset(1, Browser, 'width', function () {
			Browser.__init__();
			return ((Laya.stage && Laya.stage.canvasRotation) ? Browser.clientHeight : Browser.clientWidth) * Browser.pixelRatio;
		});

		/**画布容器，用来盛放画布的容器。方便对画布进行控制*/
		__getset(1, Browser, 'container', function () {
			Browser.__init__();
			if (!Browser._container) {
				Browser._container = Browser.createElement("div");
				Browser._container.id = "layaContainer";
				Browser.document.body.appendChild(Browser._container);
			}
			return Browser._container;
		}, function (value) {
			Browser._container = value;
		});

		/**浏览器原生 document 对象的引用。*/
		__getset(1, Browser, 'document', function () {
			Browser.__init__();
			return Browser._document;
		});

		Browser.__init__ = function () {
			SoundManager;
			if (Browser._window) return;
			Browser._window = RunDriver.getWindow();
			Browser._document = Browser.window.document;
			Browser._window.addEventListener('message', function (e) {
				laya.utils.Browser._onMessage(e);
			}, false);
			/*__JS__ */Browser.document.__createElement = Browser.document.createElement;
			/*__JS__ */window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (c) { return window.setTimeout(c, 1000 / 60); };;
			/*__JS__ */var $BS = window.document.body.style; $BS.margin = 0; $BS.overflow = 'hidden';;
			/*__JS__ */var metas = window.document.getElementsByTagName('meta');;
			/*__JS__ */var i = 0, flag = false, content = 'width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no';;
			/*__JS__ */while (i < metas.length) { var meta = metas[i]; if (meta.name == 'viewport') { meta.content = content; flag = true; break; } i++; };
			/*__JS__ */if (!flag) { meta = document.createElement('meta'); meta.name = 'viewport', meta.content = content; document.getElementsByTagName('head')[0].appendChild(meta); };
			Browser.userAgent =/*[SAFE]*/ Browser.window.navigator.userAgent;
			Browser.u =/*[SAFE]*/ Browser.userAgent;
			Browser.onIOS =/*[SAFE]*/ !!Browser.u.match(/\(i[^;]+;(U;)? CPU.+Mac OS X/);
			Browser.onMobile =/*[SAFE]*/ Browser.u.indexOf("Mobile") > -1;
			Browser.onIPhone =/*[SAFE]*/ Browser.u.indexOf("iPhone") > -1;
			Browser.onIPad =/*[SAFE]*/ Browser.u.indexOf("iPad") > -1;
			Browser.onAndriod =/*[SAFE]*/ Browser.u.indexOf('Android') > -1 || Browser.u.indexOf('Adr') > -1;
			Browser.onWP =/*[SAFE]*/ Browser.u.indexOf("Windows Phone") > -1;
			Browser.onQQBrowser =/*[SAFE]*/ Browser.u.indexOf("QQBrowser") > -1;
			Browser.onMQQBrowser =/*[SAFE]*/ Browser.u.indexOf("MQQBrowser") > -1 || (Browser.u.indexOf("Mobile") > -1 && Browser.u.indexOf("QQ") > -1);
			Browser.onIE =/*[SAFE]*/ !!Browser.window.ActiveXObject || "ActiveXObject" in Browser.window;
			Browser.onWeiXin =/*[SAFE]*/ Browser.u.indexOf('MicroMessenger') > -1;
			Browser.onPC =/*[SAFE]*/ !Browser.onMobile;
			Browser.onSafari =/*[SAFE]*/ !!Browser.u.match(/Version\/\d+\.\d\x20Mobile\/\S+\x20Safari/);
			Browser.httpProtocol =/*[SAFE]*/ Browser.window.location.protocol == "http:";
			Browser.webAudioEnabled =/*[SAFE]*/ Browser.window["AudioContext"] || Browser.window["webkitAudioContext"] || Browser.window["mozAudioContext"] ? true : false;
			Browser.soundType =/*[SAFE]*/ Browser.webAudioEnabled ? "WEBAUDIOSOUND" : "AUDIOSOUND";
			/*__JS__ */Sound = Browser.webAudioEnabled ? WebAudioSound : AudioSound;;
			/*__JS__ */if (Browser.webAudioEnabled) WebAudioSound.initWebAudio();;
			AudioSound._initMusicAudio();
			/*__JS__ */Browser.enableTouch = (('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch);
			/*__JS__ */window.focus();
			/*__JS__ */SoundManager._soundClass = Sound;;
			Render._mainCanvas = Render._mainCanvas || HTMLCanvas.create('2D');
			if (Browser.canvas) return;
			Browser.canvas = HTMLCanvas.create('2D');
			Browser.context = Browser.canvas.getContext('2d');
		}

		Browser._onMessage = function (e) {
			if (!e.data) return;
			if (e.data.name == "size") {
				Browser.window.innerWidth = e.data.width;
				Browser.window.innerHeight = e.data.height;
				Browser.window.__innerHeight = e.data.clientHeight;
				if (!Browser.document.createEvent) {
					console.warn("no document.createEvent");
					return;
				};
				var evt = Browser.document.createEvent("HTMLEvents");
				evt.initEvent("resize", false, false);
				Browser.window.dispatchEvent(evt);
				return;
			}
		}

		Browser.createElement = function (type) {
			Browser.__init__();
			return Browser.document.__createElement(type);
		}

		Browser.getElementById = function (type) {
			Browser.__init__();
			return Browser.document.getElementById(type);
		}

		Browser.removeElement = function (ele) {
			if (ele && ele.parentNode) ele.parentNode.removeChild(ele);
		}

		Browser.now = function () {
			return RunDriver.now();
		}

		Browser._window = null
		Browser._document = null
		Browser._container = null
		Browser.userAgent = null
		Browser.u = null
		Browser.onIOS = false;
		Browser.onMobile = false;
		Browser.onIPhone = false;
		Browser.onIPad = false;
		Browser.onAndriod = false;
		Browser.onAndroid = false;
		Browser.onWP = false;
		Browser.onQQBrowser = false;
		Browser.onMQQBrowser = false;
		Browser.onSafari = false;
		Browser.onIE = false;
		Browser.onWeiXin = false;
		Browser.onPC = false;
		Browser.httpProtocol = false;
		Browser.webAudioEnabled = false;
		Browser.soundType = null
		Browser.enableTouch = false;
		Browser.canvas = null
		Browser.context = null
		Browser.__init$ = function () {
			AudioSound;
			WebAudioSound;
		}

		return Browser;
	})()


	/**
	*<p> <code>Byte</code> 类提供用于优化读取、写入以及处理二进制数据的方法和属性。</p>
	*<p><b>注意：</b> <code>Byte</code> 类适用于需要在字节层访问数据的高级开发人员。</p>
	*/
	//class laya.utils.Byte
	var Byte = (function () {
		function Byte(data) {
			this._xd_ = true;
			this._allocated_ = 8;
			//this._d_=null;
			//this._u8d_=null;
			this._pos_ = 0;
			this._length = 0;
			if (data) {
				this._u8d_ = new Uint8Array(data);
				this._d_ = new DataView(this._u8d_.buffer);
				this._length = this._d_.byteLength;
			} else {
				this.___resizeBuffer(this._allocated_);
			}
		}

		__class(Byte, 'laya.utils.Byte');
		var __proto = Byte.prototype;
		/**@private */
		__proto.___resizeBuffer = function (len) {
			try {
				var newByteView = new Uint8Array(len);
				if (this._u8d_ != null) {
					if (this._u8d_.length <= len) newByteView.set(this._u8d_);
					else newByteView.set(this._u8d_.subarray(0, len));
				}
				this._u8d_ = newByteView;
				this._d_ = new DataView(newByteView.buffer);
			} catch (err) {
				throw "___resizeBuffer err:" + len;
			}
		}

		/**
		*<p>常用于解析固定格式的字节流。</p>
		*<p>先从字节流的当前字节偏移位置处读取一个 <code>Uint16</code> 值，然后以此值为长度，读取此长度的字符串。</p>
		*@return 读取的字符串。
		*/
		__proto.getString = function () {
			return this.rUTF(this.getUint16());
		}

		/**
		*从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Float32Array</code> 对象并返回此对象。
		*@param start 开始位置。
		*@param len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
		*@return 读取的 Float32Array 对象。
		*/
		__proto.getFloat32Array = function (start, len) {
			var end = start + len;
			end = (end > this._length) ? this._length : end;
			var v = new Float32Array(this._d_.buffer.slice(start, end));
			this._pos_ = end;
			return v;
		}

		/**
		*从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Uint8Array</code> 对象并返回此对象。
		*@param start 开始位置。
		*@param len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
		*@return 读取的 Uint8Array 对象。
		*/
		__proto.getUint8Array = function (start, len) {
			var end = start + len;
			end = (end > this._length) ? this._length : end;
			var v = new Uint8Array(this._d_.buffer.slice(start, end));
			this._pos_ = end;
			return v;
		}

		/**
		*从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Int16Array</code> 对象并返回此对象。
		*@param start 开始读取的字节偏移量位置。
		*@param len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
		*@return 读取的 Uint8Array 对象。
		*/
		__proto.getInt16Array = function (start, len) {
			var end = start + len;
			end = (end > this._length) ? this._length : end;
			var v = new Int16Array(this._d_.buffer.slice(start, end));
			this._pos_ = end;
			return v;
		}

		/**
		*从字节流的当前字节偏移位置处读取一个 IEEE 754 单精度（32 位）浮点数。
		*@return 单精度（32 位）浮点数。
		*/
		__proto.getFloat32 = function () {
			if (this._pos_ + 4 > this._length) throw "getFloat32 error - Out of bounds";
			var v = this._d_.getFloat32(this._pos_, this._xd_);
			this._pos_ += 4;
			return v;
		}

		/**
		*从字节流的当前字节偏移量位置处读取一个 IEEE 754 双精度（64 位）浮点数。
		*@return 双精度（64 位）浮点数。
		*/
		__proto.getFloat64 = function () {
			if (this._pos_ + 8 > this._length) throw "getFloat64 error - Out of bounds";
			var v = this._d_.getFloat64(this._pos_, this._xd_);
			this._pos_ += 8;
			return v;
		}

		/**
		*在字节流的当前字节偏移量位置处写入一个 IEEE 754 单精度（32 位）浮点数。
		*@param value 单精度（32 位）浮点数。
		*/
		__proto.writeFloat32 = function (value) {
			this.ensureWrite(this._pos_ + 4);
			this._d_.setFloat32(this._pos_, value, this._xd_);
			this._pos_ += 4;
		}

		/**
		*在字节流的当前字节偏移量位置处写入一个 IEEE 754 双精度（64 位）浮点数。
		*@param value 双精度（64 位）浮点数。
		*/
		__proto.writeFloat64 = function (value) {
			this.ensureWrite(this._pos_ + 8);
			this._d_.setFloat64(this._pos_, value, this._xd_);
			this._pos_ += 8;
		}

		/**
		*从字节流的当前字节偏移量位置处读取一个 Int32 值。
		*@return Int32 值。
		*/
		__proto.getInt32 = function () {
			if (this._pos_ + 4 > this._length) throw "getInt32 error - Out of bounds";
			var float = this._d_.getInt32(this._pos_, this._xd_);
			this._pos_ += 4;
			return float;
		}

		/**
		*从字节流的当前字节偏移量位置处读取一个 Uint32 值。
		*@return Uint32 值。
		*/
		__proto.getUint32 = function () {
			if (this._pos_ + 4 > this._length) throw "getUint32 error - Out of bounds";
			var v = this._d_.getUint32(this._pos_, this._xd_);
			this._pos_ += 4;
			return v;
		}

		/**
		*在字节流的当前字节偏移量位置处写入指定的 Int32 值。
		*@param value 需要写入的 Int32 值。
		*/
		__proto.writeInt32 = function (value) {
			this.ensureWrite(this._pos_ + 4);
			this._d_.setInt32(this._pos_, value, this._xd_);
			this._pos_ += 4;
		}

		/**
		*在字节流的当前字节偏移量位置处写入 Uint32 值。
		*@param value 需要写入的 Uint32 值。
		*/
		__proto.writeUint32 = function (value) {
			this.ensureWrite(this._pos_ + 4);
			this._d_.setUint32(this._pos_, value, this._xd_);
			this._pos_ += 4;
		}

		/**
		*从字节流的当前字节偏移量位置处读取一个 Int16 值。
		*@return Int16 值。
		*/
		__proto.getInt16 = function () {
			if (this._pos_ + 2 > this._length) throw "getInt16 error - Out of bounds";
			var us = this._d_.getInt16(this._pos_, this._xd_);
			this._pos_ += 2;
			return us;
		}

		/**
		*从字节流的当前字节偏移量位置处读取一个 Uint16 值。
		*@return Uint16 值。
		*/
		__proto.getUint16 = function () {
			if (this._pos_ + 2 > this._length) throw "getUint16 error - Out of bounds";
			var us = this._d_.getUint16(this._pos_, this._xd_);
			this._pos_ += 2;
			return us;
		}

		/**
		*在字节流的当前字节偏移量位置处写入指定的 Uint16 值。
		*@param value 需要写入的Uint16 值。
		*/
		__proto.writeUint16 = function (value) {
			this.ensureWrite(this._pos_ + 2);
			this._d_.setUint16(this._pos_, value, this._xd_);
			this._pos_ += 2;
		}

		/**
		*在字节流的当前字节偏移量位置处写入指定的 Int16 值。
		*@param value 需要写入的 Int16 值。
		*/
		__proto.writeInt16 = function (value) {
			this.ensureWrite(this._pos_ + 2);
			this._d_.setInt16(this._pos_, value, this._xd_);
			this._pos_ += 2;
		}

		/**
		*从字节流的当前字节偏移量位置处读取一个 Uint8 值。
		*@return Uint8 值。
		*/
		__proto.getUint8 = function () {
			if (this._pos_ + 1 > this._length) throw "getUint8 error - Out of bounds";
			return this._d_.getUint8(this._pos_++);
		}

		/**
		*在字节流的当前字节偏移量位置处写入指定的 Uint8 值。
		*@param value 需要写入的 Uint8 值。
		*/
		__proto.writeUint8 = function (value) {
			this.ensureWrite(this._pos_ + 1);
			this._d_.setUint8(this._pos_, value);
			this._pos_++;
		}

		/**
		*@private
		*从字节流的指定字节偏移量位置处读取一个 Uint8 值。
		*@param pos 字节读取位置。
		*@return Uint8 值。
		*/
		__proto._getUInt8 = function (pos) {
			return this._d_.getUint8(pos);
		}

		/**
		*@private
		*从字节流的指定字节偏移量位置处读取一个 Uint16 值。
		*@param pos 字节读取位置。
		*@return Uint16 值。
		*/
		__proto._getUint16 = function (pos) {
			return this._d_.getUint16(pos, this._xd_);
		}

		/**
		*@private
		*使用 getFloat32()读取6个值，用于创建并返回一个 Matrix 对象。
		*@return Matrix 对象。
		*/
		__proto._getMatrix = function () {
			var rst = new Matrix(this.getFloat32(), this.getFloat32(), this.getFloat32(), this.getFloat32(), this.getFloat32(), this.getFloat32());
			return rst;
		}

		/**
		*@private
		*读取指定长度的 UTF 型字符串。
		*@param len 需要读取的长度。
		*@return 读取的字符串。
		*/
		__proto.rUTF = function (len) {
			var v = "", max = this._pos_ + len, c = 0, c2 = 0, c3 = 0, f = String.fromCharCode;
			var u = this._u8d_, i = 0;
			while (this._pos_ < max) {
				c = u[this._pos_++];
				if (c < 0x80) {
					if (c != 0) {
						v += f(c);
					}
				} else if (c < 0xE0) {
					v += f(((c & 0x3F) << 6) | (u[this._pos_++] & 0x7F));
				} else if (c < 0xF0) {
					c2 = u[this._pos_++];
					v += f(((c & 0x1F) << 12) | ((c2 & 0x7F) << 6) | (u[this._pos_++] & 0x7F));
				} else {
					c2 = u[this._pos_++];
					c3 = u[this._pos_++];
					v += f(((c & 0x0F) << 18) | ((c2 & 0x7F) << 12) | ((c3 << 6) & 0x7F) | (u[this._pos_++] & 0x7F));
				}
				i++;
			}
			return v;
		}

		/**
		*@private
		*读取 <code>len</code> 参数指定的长度的字符串。
		*@param len 要读取的字符串的长度。
		*@return 指定长度的字符串。
		*/
		__proto.getCustomString = function (len) {
			var v = "", ulen = 0, c = 0, c2 = 0, f = String.fromCharCode;
			var u = this._u8d_, i = 0;
			while (len > 0) {
				c = u[this._pos_];
				if (c < 0x80) {
					v += f(c);
					this._pos_++;
					len--;
				} else {
					ulen = c - 0x80;
					this._pos_++;
					len -= ulen;
					while (ulen > 0) {
						c = u[this._pos_++];
						c2 = u[this._pos_++];
						v += f((c2 << 8) | c);
						ulen--;
					}
				}
			}
			return v;
		}

		/**
		*清除字节数组的内容，并将 length 和 pos 属性重置为 0。调用此方法将释放 Byte 实例占用的内存。
		*/
		__proto.clear = function () {
			this._pos_ = 0;
			this.length = 0;
		}

		/**
		*@private
		*获取此对象的 ArrayBuffer 引用。
		*@return
		*/
		__proto.__getBuffer = function () {
			return this._d_.buffer;
		}

		/**
		*<p>将 UTF-8 字符串写入字节流。类似于 writeUTF()方法，但 writeUTFBytes()不使用 16 位长度的字为字符串添加前缀。</p>
		*<p>对应的读取方法为： getUTFBytes 。</p>
		*@param value 要写入的字符串。
		*/
		__proto.writeUTFBytes = function (value) {
			value = value + "";
			for (var i = 0, sz = value.length; i < sz; i++) {
				var c = value.charCodeAt(i);
				if (c <= 0x7F) {
					this.writeByte(c);
				} else if (c <= 0x7FF) {
					this.ensureWrite(this._pos_ + 2);
					this._u8d_.set([0xC0 | (c >> 6), 0x80 | (c & 0x3F)], this._pos_);
					this._pos_ += 2;
				} else if (c <= 0xFFFF) {
					this.ensureWrite(this._pos_ + 3);
					this._u8d_.set([0xE0 | (c >> 12), 0x80 | ((c >> 6) & 0x3F), 0x80 | (c & 0x3F)], this._pos_);
					this._pos_ += 3;
				} else {
					this.ensureWrite(this._pos_ + 4);
					this._u8d_.set([0xF0 | (c >> 18), 0x80 | ((c >> 12) & 0x3F), 0x80 | ((c >> 6) & 0x3F), 0x80 | (c & 0x3F)], this._pos_);
					this._pos_ += 4;
				}
			}
		}

		/**
		*<p>将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 16 位整数），然后写入表示字符串字符的字节。</p>
		*<p>对应的读取方法为： getUTFString 。</p>
		*@param value 要写入的字符串值。
		*/
		__proto.writeUTFString = function (value) {
			var tPos = this.pos;
			this.writeUint16(1);
			this.writeUTFBytes(value);
			var dPos = this.pos - tPos - 2;
			if (dPos >= 65536) {
				throw "writeUTFString byte len more than 65536";
			}
			this._d_.setUint16(tPos, dPos, this._xd_);
		}

		/**
		*@private
		*读取 UTF-8 字符串。
		*@return 读取的字符串。
		*/
		__proto.readUTFString = function () {
			return this.readUTFBytes(this.getUint16());
		}

		/**
		*<p>从字节流中读取一个 UTF-8 字符串。假定字符串的前缀是一个无符号的短整型（以此字节表示要读取的长度）。</p>
		*<p>对应的写入方法为： writeUTFString 。</p>
		*@return 读取的字符串。
		*/
		__proto.getUTFString = function () {
			return this.readUTFString();
		}

		/**
		*@private
		*读字符串，必须是 writeUTFBytes 方法写入的字符串。
		*@param len 要读的buffer长度，默认将读取缓冲区全部数据。
		*@return 读取的字符串。
		*/
		__proto.readUTFBytes = function (len) {
			(len === void 0) && (len = -1);
			if (len == 0) return "";
			var lastBytes = this.bytesAvailable;
			if (len > lastBytes) throw "readUTFBytes error - Out of bounds";
			len = len > 0 ? len : lastBytes;
			return this.rUTF(len);
		}

		/**
		*<p>从字节流中读取一个由 length 参数指定的长度的 UTF-8 字节序列，并返回一个字符串。</p>
		*<p>一般读取的是由 writeUTFBytes 方法写入的字符串。</p>
		*@param len 要读的buffer长度，默认将读取缓冲区全部数据。
		*@return 读取的字符串。
		*/
		__proto.getUTFBytes = function (len) {
			(len === void 0) && (len = -1);
			return this.readUTFBytes(len);
		}

		/**
		*<p>在字节流中写入一个字节。</p>
		*<p>使用参数的低 8 位。忽略高 24 位。</p>
		*@param value
		*/
		__proto.writeByte = function (value) {
			this.ensureWrite(this._pos_ + 1);
			this._d_.setInt8(this._pos_, value);
			this._pos_ += 1;
		}

		/**
		*@private
		*从字节流中读取带符号的字节。
		*/
		__proto.readByte = function () {
			if (this._pos_ + 1 > this._length) throw "readByte error - Out of bounds";
			return this._d_.getInt8(this._pos_++);
		}

		/**
		*<p>从字节流中读取带符号的字节。</p>
		*<p>返回值的范围是从-128 到 127。</p>
		*@return 介于-128 和 127 之间的整数。
		*/
		__proto.getByte = function () {
			return this.readByte();
		}

		/**
		*<p>保证该字节流的可用长度不小于 <code>lengthToEnsure</code> 参数指定的值。</p>
		*@param lengthToEnsure 指定的长度。
		*/
		__proto.ensureWrite = function (lengthToEnsure) {
			if (this._length < lengthToEnsure) this._length = lengthToEnsure;
			if (this._allocated_ < lengthToEnsure) this.length = lengthToEnsure;
		}

		/**
		*<p>将指定 arraybuffer 对象中的以 offset 为起始偏移量， length 为长度的字节序列写入字节流。</p>
		*<p>如果省略 length 参数，则使用默认长度 0，该方法将从 offset 开始写入整个缓冲区；如果还省略了 offset 参数，则写入整个缓冲区。</p>
		*<p>如果 offset 或 length 小于0，本函数将抛出异常。</p>
		*$NEXTBIG 由于没有判断length和arraybuffer的合法性，当开发者填写了错误的length值时，会导致写入多余的空白数据甚至内存溢出，为了避免影响开发者正在使用此方法的功能，下个重大版本会修复这些问题。
		*@param arraybuffer 需要写入的 Arraybuffer 对象。
		*@param offset Arraybuffer 对象的索引的偏移量（以字节为单位）
		*@param length 从 Arraybuffer 对象写入到 Byte 对象的长度（以字节为单位）
		*/
		__proto.writeArrayBuffer = function (arraybuffer, offset, length) {
			(offset === void 0) && (offset = 0);
			(length === void 0) && (length = 0);
			if (offset < 0 || length < 0) throw "writeArrayBuffer error - Out of bounds";
			if (length == 0) length = arraybuffer.byteLength - offset;
			this.ensureWrite(this._pos_ + length);
			var uint8array = new Uint8Array(arraybuffer);
			this._u8d_.set(uint8array.subarray(offset, offset + length), this._pos_);
			this._pos_ += length;
		}

		/**
		*获取此对象的 ArrayBuffer 数据，数据只包含有效数据部分。
		*/
		__getset(0, __proto, 'buffer', function () {
			var rstBuffer = this._d_.buffer;
			if (rstBuffer.byteLength == this.length) return rstBuffer;
			return rstBuffer.slice(0, this.length);
		});

		/**
		*<p> <code>Byte</code> 实例的字节序。取值为：<code>BIG_ENDIAN</code> 或 <code>BIG_ENDIAN</code> 。</p>
		*<p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。通过 <code>getSystemEndian</code> 可以获取当前系统的字节序。</p>
		*<p> <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。<br/>
		*<code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>
		*/
		__getset(0, __proto, 'endian', function () {
			return this._xd_ ? "littleEndian" : "bigEndian";
		}, function (endianStr) {
			this._xd_ = (endianStr == "littleEndian");
		});

		/**
		*<p> <code>Byte</code> 对象的长度（以字节为单位）。</p>
		*<p>如果将长度设置为大于当前长度的值，则用零填充字节数组的右侧；如果将长度设置为小于当前长度的值，将会截断该字节数组。</p>
		*<p>如果要设置的长度大于当前已分配的内存空间的字节长度，则重新分配内存空间，大小为以下两者较大者：要设置的长度、当前已分配的长度的2倍，并将原有数据拷贝到新的内存空间中；如果要设置的长度小于当前已分配的内存空间的字节长度，也会重新分配内存空间，大小为要设置的长度，并将原有数据从头截断为要设置的长度存入新的内存空间中。</p>
		*/
		__getset(0, __proto, 'length', function () {
			return this._length;
		}, function (value) {
			if (this._allocated_ < value)
				this.___resizeBuffer(this._allocated_ = Math.floor(Math.max(value, this._allocated_ * 2)));
			else if (this._allocated_ > value)
				this.___resizeBuffer(this._allocated_ = value);
			this._length = value;
		});

		/**
		*移动或返回 Byte 对象的读写指针的当前位置（以字节为单位）。下一次调用读取方法时将在此位置开始读取，或者下一次调用写入方法时将在此位置开始写入。
		*/
		__getset(0, __proto, 'pos', function () {
			return this._pos_;
		}, function (value) {
			this._pos_ = value;
		});

		/**
		*可从字节流的当前位置到末尾读取的数据的字节数。
		*/
		__getset(0, __proto, 'bytesAvailable', function () {
			return this._length - this._pos_;
		});

		Byte.getSystemEndian = function () {
			if (!Byte._sysEndian) {
				var buffer = new ArrayBuffer(2);
				new DataView(buffer).setInt16(0, 256, true);
				Byte._sysEndian = (new Int16Array(buffer))[0] === 256 ? /*CLASS CONST:laya.utils.Byte.LITTLE_ENDIAN*/"littleEndian" :/*CLASS CONST:laya.utils.Byte.BIG_ENDIAN*/"bigEndian";
			}
			return Byte._sysEndian;
		}

		Byte.BIG_ENDIAN = "bigEndian";
		Byte.LITTLE_ENDIAN = "littleEndian";
		Byte._sysEndian = null;
		return Byte;
	})()


	/**
	*@private
	*对象缓存统一管理类
	*/
	//class laya.utils.CacheManger
	var CacheManger = (function () {
		function CacheManger() { }
		__class(CacheManger, 'laya.utils.CacheManger');
		CacheManger.regCacheByFunction = function (disposeFunction, getCacheListFunction) {
			CacheManger.unRegCacheByFunction(disposeFunction, getCacheListFunction);
			var cache;
			cache = { tryDispose: disposeFunction, getCacheList: getCacheListFunction };
			CacheManger._cacheList.push(cache);
		}

		CacheManger.unRegCacheByFunction = function (disposeFunction, getCacheListFunction) {
			var i = 0, len = 0;
			len = CacheManger._cacheList.length;
			for (i = 0; i < len; i++) {
				if (CacheManger._cacheList[i].tryDispose == disposeFunction && CacheManger._cacheList[i].getCacheList == getCacheListFunction) {
					CacheManger._cacheList.splice(i, 1);
					return;
				}
			}
		}

		CacheManger.forceDispose = function () {
			var i = 0, len = CacheManger._cacheList.length;
			for (i = 0; i < len; i++) {
				CacheManger._cacheList[i].tryDispose(true);
			}
		}

		CacheManger.beginCheck = function (waitTime) {
			(waitTime === void 0) && (waitTime = 15000);
			Laya.timer.loop(waitTime, null, CacheManger._checkLoop);
		}

		CacheManger.stopCheck = function () {
			Laya.timer.clear(null, CacheManger._checkLoop);
		}

		CacheManger._checkLoop = function () {
			var cacheList = CacheManger._cacheList;
			if (cacheList.length < 1) return;
			var tTime = Browser.now();
			var count = 0;
			var len = 0;
			len = count = cacheList.length;
			while (count > 0) {
				CacheManger._index++;
				CacheManger._index = CacheManger._index % len;
				cacheList[CacheManger._index].tryDispose(false);
				if (Browser.now() - tTime > CacheManger.loopTimeLimit) break;
				count--;
			}
		}

		CacheManger.loopTimeLimit = 2;
		CacheManger._cacheList = [];
		CacheManger._index = 0;
		return CacheManger;
	})()


	/**
	*<code>ClassUtils</code> 是一个类工具类。
	*/
	//class laya.utils.ClassUtils
	var ClassUtils = (function () {
		function ClassUtils() { };
		__class(ClassUtils, 'laya.utils.ClassUtils');
		ClassUtils.regClass = function (className, classDef) {
			ClassUtils._classMap[className] = classDef;
		}

		ClassUtils.getRegClass = function (className) {
			return ClassUtils._classMap[className];
		}

		ClassUtils.getInstance = function (className) {
			var compClass = ClassUtils.getClass(className);
			if (compClass)
				return new compClass();
			else
				console.warn("[error] Undefined class:", className);
			return null;
		}

		ClassUtils.createByJson = function (json, node, root, customHandler, instanceHandler) {
			if ((typeof json == 'string'))
				json = JSON.parse(json);
			var props = json.props;
			if (!node) {
				node = instanceHandler ? instanceHandler.runWith(json) : ClassUtils.getInstance(props.runtime || json.type);
				if (!node)
					return null;
			};
			var child = json.child;
			if (child) {
				for (var i = 0, n = child.length; i < n; i++) {
					var data = child[i];
					if ((data.props.name === "render" || data.props.renderType === "render") && node["_$set_itemRender"])
						node.itemRender = data;
					else {
						if (data.type == "Graphic") {
							ClassUtils.addGraphicsToSprite(data, node);
						} else if (ClassUtils.isDrawType(data.type)) {
							ClassUtils.addGraphicToSprite(data, node, true);
						} else {
							var tChild = ClassUtils.createByJson(data, null, root, customHandler, instanceHandler)
							if (data.type == "Script") {
								if (tChild.hasOwnProperty("owner")) {
									tChild["owner"] = node;
								} else if (tChild.hasOwnProperty("target")) {
									tChild["target"] = node;
								}
							} else if (data.props.renderType == "mask") {
								node.mask = tChild;
							} else {
								node.addChild(tChild);
							}
						}
					}
				}
			}
			if (props) {
				for (var prop in props) {
					var value = props[prop];
					if (prop === "var" && root) {
						root[value] = node;
					} else if ((value instanceof Array) && (typeof (node[prop]) == 'function')) {
						node[prop].apply(node, value);
					} else {
						node[prop] = value;
					}
				}
			}
			if (customHandler && json.customProps) {
				customHandler.runWith([node, json]);
			}
			if (node["created"])
				node.created();
			return node;
		}

		ClassUtils.addGraphicsToSprite = function (graphicO, sprite) {
			var graphics;
			graphics = graphicO.child;
			if (!graphics || graphics.length < 1)
				return;
			var g;
			g = ClassUtils._getGraphicsFromSprite(graphicO, sprite);
			var ox = 0;
			var oy = 0;
			if (graphicO.props) {
				ox = ClassUtils._getObjVar(graphicO.props, "x", 0);
				oy = ClassUtils._getObjVar(graphicO.props, "y", 0);
			}
			if (ox != 0 && oy != 0) {
				g.translate(ox, oy);
			};
			var i = 0, len = 0;
			len = graphics.length;
			for (i = 0; i < len; i++) {
				ClassUtils._addGraphicToGraphics(graphics[i], g);
			}
			if (ox != 0 && oy != 0) {
				g.translate(-ox, -oy);
			}
		}

		ClassUtils.addGraphicToSprite = function (graphicO, sprite, isChild) {
			(isChild === void 0) && (isChild = false);
			var g;
			g = isChild ? ClassUtils._getGraphicsFromSprite(graphicO, sprite) : sprite.graphics;
			ClassUtils._addGraphicToGraphics(graphicO, g);
		}

		ClassUtils._getGraphicsFromSprite = function (dataO, sprite) {
			var g;
			if (!dataO || !dataO.props)
				return sprite.graphics;
			var propsName;
			propsName = dataO.props.renderType;
			switch (propsName) {
				case "hit":
				case "unHit": ;
					var hitArea;
					if (!sprite.hitArea) {
						sprite.hitArea = new HitArea();
					}
					hitArea = sprite.hitArea;
					if (!hitArea[propsName]) {
						hitArea[propsName] = new Graphics();
					}
					g = hitArea[propsName];
					break;
				default:
			}
			if (!g)
				g = sprite.graphics;
			return g;
		}

		ClassUtils._getTransformData = function (propsO) {
			var m;
			if (propsO.hasOwnProperty("pivotX") || propsO.hasOwnProperty("pivotY")) {
				m = m || new Matrix();
				m.translate(-ClassUtils._getObjVar(propsO, "pivotX", 0), -ClassUtils._getObjVar(propsO, "pivotY", 0));
			};
			var sx = ClassUtils._getObjVar(propsO, "scaleX", 1), sy = ClassUtils._getObjVar(propsO, "scaleY", 1);
			var rotate = ClassUtils._getObjVar(propsO, "rotation", 0);
			var skewX = ClassUtils._getObjVar(propsO, "skewX", 0);
			var skewY = ClassUtils._getObjVar(propsO, "skewY", 0);
			if (sx != 1 || sy != 1 || rotate != 0) {
				m = m || new Matrix();
				m.scale(sx, sy);
				m.rotate(rotate * 0.0174532922222222);
			}
			return m;
		}

		ClassUtils._addGraphicToGraphics = function (graphicO, graphic) {
			var propsO;
			propsO = graphicO.props;
			if (!propsO)
				return;
			var drawConfig;
			drawConfig = ClassUtils.DrawTypeDic[graphicO.type];
			if (!drawConfig)
				return;
			var g;
			g = graphic;
			var m;
			var params = ClassUtils._getParams(propsO, drawConfig[1], drawConfig[2], drawConfig[3]);
			m = ClassUtils._tM;
			if (m || ClassUtils._alpha != 1) {
				g.save();
				if (m)
					g.transform(m);
				if (ClassUtils._alpha != 1)
					g.alpha(ClassUtils._alpha);
			}
			g[drawConfig[0]].apply(g, params);
			if (m || ClassUtils._alpha != 1) {
				g.restore();
			}
		}

		ClassUtils._adptLineData = function (params) {
			params[2] = parseFloat(params[0]) + parseFloat(params[2]);
			params[3] = parseFloat(params[1]) + parseFloat(params[3]);
			return params;
		}

		ClassUtils._adptTextureData = function (params) {
			params[0] = Loader.getRes(params[0]);
			return params;
		}

		ClassUtils._adptLinesData = function (params) {
			params[2] = ClassUtils._getPointListByStr(params[2]);
			return params;
		}

		ClassUtils.isDrawType = function (type) {
			if (type == "Image")
				return false;
			return ClassUtils.DrawTypeDic.hasOwnProperty(type);
		}

		ClassUtils._getParams = function (obj, params, xPos, adptFun) {
			(xPos === void 0) && (xPos = 0);
			var rst;
			rst = ClassUtils._temParam;
			rst.length = params.length;
			var i = 0, len = 0;
			len = params.length;
			for (i = 0; i < len; i++) {
				rst[i] = ClassUtils._getObjVar(obj, params[i][0], params[i][1]);
			}
			ClassUtils._alpha = ClassUtils._getObjVar(obj, "alpha", 1);
			var m;
			m = ClassUtils._getTransformData(obj);
			if (m) {
				if (!xPos) xPos = 0;
				m.translate(rst[xPos], rst[xPos + 1]);
				rst[xPos] = rst[xPos + 1] = 0;
				ClassUtils._tM = m;
			} else {
				ClassUtils._tM = null;
			}
			if (adptFun && ClassUtils[adptFun]) {
				rst = ClassUtils[adptFun](rst);
			}
			return rst;
		}

		ClassUtils._getPointListByStr = function (str) {
			var pointArr;
			pointArr = str.split(",");
			var i = 0, len = 0;
			len = pointArr.length;
			for (i = 0; i < len; i++) {
				pointArr[i] = parseFloat(pointArr[i]);
			}
			return pointArr;
		}

		ClassUtils._getObjVar = function (obj, key, noValue) {
			if (obj.hasOwnProperty(key)) {
				return obj[key];
			}
			return noValue;
		}

		ClassUtils._temParam = [];
		ClassUtils._classMap = { 'Sprite': 'laya.display.Sprite', 'Text': 'laya.display.Text', 'Animation': 'laya.display.Animation', 'Skeleton': 'laya.ani.bone.Skeleton', 'Particle2D': 'laya.particle.Particle2D', 'div': 'laya.html.dom.HTMLDivElement', 'p': 'laya.html.dom.HTMLElement', 'img': 'laya.html.dom.HTMLImageElement', 'span': 'laya.html.dom.HTMLElement', 'br': 'laya.html.dom.HTMLBrElement', 'style': 'laya.html.dom.HTMLStyleElement', 'font': 'laya.html.dom.HTMLElement', 'a': 'laya.html.dom.HTMLElement', '#text': 'laya.html.dom.HTMLElement' };
		ClassUtils.getClass = function (className) {
			var classObject = ClassUtils._classMap[className] || className;
			if ((typeof classObject == 'string'))
				return Laya["__classmap"][classObject];
			return classObject;
		}

		ClassUtils._tM = null
		ClassUtils._alpha = NaN
		__static(ClassUtils,
			['DrawTypeDic', function () { return this.DrawTypeDic = { "Rect": ["drawRect", [["x", 0], ["y", 0], ["width", 0], ["height", 0], ["fillColor", null], ["lineColor", null], ["lineWidth", 1]]], "Circle": ["drawCircle", [["x", 0], ["y", 0], ["radius", 0], ["fillColor", null], ["lineColor", null], ["lineWidth", 1]]], "Pie": ["drawPie", [["x", 0], ["y", 0], ["radius", 0], ["startAngle", 0], ["endAngle", 0], ["fillColor", null], ["lineColor", null], ["lineWidth", 1]]], "Image": ["drawTexture", [["x", 0], ["y", 0], ["width", 0], ["height", 0]]], "Texture": ["drawTexture", [["skin", null], ["x", 0], ["y", 0], ["width", 0], ["height", 0]], 1, "_adptTextureData"], "FillTexture": ["fillTexture", [["skin", null], ["x", 0], ["y", 0], ["width", 0], ["height", 0], ["repeat", null]], 1, "_adptTextureData"], "FillText": ["fillText", [["text", ""], ["x", 0], ["y", 0], ["font", null], ["color", null], ["textAlign", null]], 1], "Line": ["drawLine", [["x", 0], ["y", 0], ["toX", 0], ["toY", 0], ["lineColor", null], ["lineWidth", 0]], 0, "_adptLineData"], "Lines": ["drawLines", [["x", 0], ["y", 0], ["points", ""], ["lineColor", null], ["lineWidth", 0]], 0, "_adptLinesData"], "Curves": ["drawCurves", [["x", 0], ["y", 0], ["points", ""], ["lineColor", null], ["lineWidth", 0]], 0, "_adptLinesData"], "Poly": ["drawPoly", [["x", 0], ["y", 0], ["points", ""], ["fillColor", null], ["lineColor", null], ["lineWidth", 1]], 0, "_adptLinesData"] }; }
			]);
		return ClassUtils;
	})()


	/**
	*@private
	*<code>Color</code> 是一个颜色值处理类。
	*/
	//class laya.utils.Color
	var Color = (function () {
		function Color(str) {
			this._color = [];
			//this.strColor=null;
			//this.numColor=0;
			//this._drawStyle=null;
			if ((typeof str == 'string')) {
				this.strColor = str;
				if (str === null) str = "#000000";
				str.charAt(0) == '#' && (str = str.substr(1));
				var len = str.length;
				if (len == 3 || len == 4) {
					var temp = "";
					for (var i = 0; i < len; i++) {
						temp += (str[i] + str[i]);
					}
					str = temp;
				};
				var color = this.numColor = parseInt(str, 16);
				var flag = (str.length == 8);
				if (flag) {
					this._color = [parseInt(str.substr(0, 2), 16) / 255, ((0x00FF0000 & color) >> 16) / 255, ((0x0000FF00 & color) >> 8) / 255, (0x000000FF & color) / 255];
					return;
				}
			} else {
				color = this.numColor = str;
				this.strColor = Utils.toHexColor(color);
			}
			this._color = [((0xFF0000 & color) >> 16) / 255, ((0xFF00 & color) >> 8) / 255, (0xFF & color) / 255, 1];
			(this._color).__id = ++Color._COLODID;
		}

		__class(Color, 'laya.utils.Color');
		Color._initDefault = function () {
			Color._DEFAULT = {};
			for (var i in Color._COLOR_MAP) Color._SAVE[i] = Color._DEFAULT[i] = new Color(Color._COLOR_MAP[i]);
			return Color._DEFAULT;
		}

		Color._initSaveMap = function () {
			Color._SAVE_SIZE = 0;
			Color._SAVE = {};
			for (var i in Color._DEFAULT) Color._SAVE[i] = Color._DEFAULT[i];
		}

		Color.create = function (str) {
			var color = Color._SAVE[str + ""];
			if (color != null) return color;
			(Color._SAVE_SIZE < 1000) || Color._initSaveMap();
			return Color._SAVE[str + ""] = new Color(str);
		}

		Color._SAVE = {};
		Color._SAVE_SIZE = 0;
		Color._COLOR_MAP = { "white": '#FFFFFF', "red": '#FF0000', "green": '#00FF00', "blue": '#0000FF', "black": '#000000', "yellow": '#FFFF00', 'gray': '#AAAAAA' };
		Color._DEFAULT = Color._initDefault();
		Color._COLODID = 1;
		return Color;
	})()


	/**
	*<code>Dictionary</code> 是一个字典型的数据存取类。
	*/
	//class laya.utils.Dictionary
	var Dictionary = (function () {
		function Dictionary() {
			this._values = [];
			this._keys = [];
		}

		__class(Dictionary, 'laya.utils.Dictionary');
		var __proto = Dictionary.prototype;
		/**
		*给指定的键名设置值。
		*@param key 键名。
		*@param value 值。
		*/
		__proto.set = function (key, value) {
			var index = this.indexOf(key);
			if (index >= 0) {
				this._values[index] = value;
				return;
			}
			this._keys.push(key);
			this._values.push(value);
		}

		/**
		*获取指定对象的键名索引。
		*@param key 键名对象。
		*@return 键名索引。
		*/
		__proto.indexOf = function (key) {
			var index = this._keys.indexOf(key);
			if (index >= 0) return index;
			key = ((typeof key == 'string')) ? Number(key) : (((typeof key == 'number')) ? key.toString() : key);
			return this._keys.indexOf(key);
		}

		/**
		*返回指定键名的值。
		*@param key 键名对象。
		*@return 指定键名的值。
		*/
		__proto.get = function (key) {
			var index = this.indexOf(key);
			return index < 0 ? null : this._values[index];
		}

		/**
		*移除指定键名的值。
		*@param key 键名对象。
		*@return 是否成功移除。
		*/
		__proto.remove = function (key) {
			var index = this.indexOf(key);
			if (index >= 0) {
				this._keys.splice(index, 1);
				this._values.splice(index, 1);
				return true;
			}
			return false;
		}

		/**
		*清除此对象的键名列表和键值列表。
		*/
		__proto.clear = function () {
			this._values.length = 0;
			this._keys.length = 0;
		}

		/**
		*获取所有的子元素列表。
		*/
		__getset(0, __proto, 'values', function () {
			return this._values;
		});

		/**
		*获取所有的子元素键名列表。
		*/
		__getset(0, __proto, 'keys', function () {
			return this._keys;
		});

		return Dictionary;
	})()


	/**
	*@private
	*<code>Dragging</code> 类是触摸滑动控件。
	*/
	//class laya.utils.Dragging
	var Dragging = (function () {
		function Dragging() {
			//this.target=null;
			this.ratio = 0.92;
			this.maxOffset = 60;
			//this.area=null;
			//this.hasInertia=false;
			//this.elasticDistance=NaN;
			//this.elasticBackTime=NaN;
			//this.data=null;
			this._dragging = false;
			this._clickOnly = true;
			//this._elasticRateX=NaN;
			//this._elasticRateY=NaN;
			//this._lastX=NaN;
			//this._lastY=NaN;
			//this._offsetX=NaN;
			//this._offsetY=NaN;
			//this._offsets=null;
			//this._disableMouseEvent=false;
			//this._tween=null;
			//this._parent=null;
		}

		__class(Dragging, 'laya.utils.Dragging');
		var __proto = Dragging.prototype;
		/**
		*开始拖拽。
		*@param target 待拖拽的 <code>Sprite</code> 对象。
		*@param area 滑动范围。
		*@param hasInertia 拖动是否有惯性。
		*@param elasticDistance 橡皮筋最大值。
		*@param elasticBackTime 橡皮筋回弹时间，单位为毫秒。
		*@param data 事件携带数据。
		*@param disableMouseEvent 鼠标事件是否有效。
		*@param ratio 惯性阻尼系数
		*/
		__proto.start = function (target, area, hasInertia, elasticDistance, elasticBackTime, data, disableMouseEvent, ratio) {
			(ratio === void 0) && (ratio = 0.92);
			this.clearTimer();
			this.target = target;
			this.area = area;
			this.hasInertia = hasInertia;
			this.elasticDistance = area ? elasticDistance : 0;
			this.elasticBackTime = elasticBackTime;
			this.data = data;
			this._disableMouseEvent = disableMouseEvent;
			this.ratio = ratio;
			if (target.globalScaleX != 1 || target.globalScaleY != 1) {
				this._parent = target.parent;
			} else {
				this._parent = Laya.stage;
			}
			this._clickOnly = true;
			this._dragging = true;
			this._elasticRateX = this._elasticRateY = 1;
			this._lastX = this._parent.mouseX;
			this._lastY = this._parent.mouseY;
			Laya.stage.on(/*laya.events.Event.MOUSE_UP*/"mouseup", this, this.onStageMouseUp);
			Laya.stage.on(/*laya.events.Event.MOUSE_OUT*/"mouseout", this, this.onStageMouseUp);
			Laya.timer.frameLoop(1, this, this.loop);
		}

		/**
		*清除计时器。
		*/
		__proto.clearTimer = function () {
			Laya.timer.clear(this, this.loop);
			Laya.timer.clear(this, this.tweenMove);
			if (this._tween) {
				this._tween.recover();
				this._tween = null;
			}
		}

		/**
		*停止拖拽。
		*/
		__proto.stop = function () {
			if (this._dragging) {
				MouseManager.instance.disableMouseEvent = false;
				Laya.stage.off(/*laya.events.Event.MOUSE_UP*/"mouseup", this, this.onStageMouseUp);
				Laya.stage.off(/*laya.events.Event.MOUSE_OUT*/"mouseout", this, this.onStageMouseUp);
				this._dragging = false;
				this.target && this.area && this.backToArea();
				this.clear();
			}
		}

		/**
		*拖拽的循环处理函数。
		*/
		__proto.loop = function () {
			var point = this._parent.getMousePoint();
			var mouseX = point.x;
			var mouseY = point.y;
			var offsetX = mouseX - this._lastX;
			var offsetY = mouseY - this._lastY;
			if (this._clickOnly) {
				if (Math.abs(offsetX * Laya.stage._canvasTransform.getScaleX()) > 1 || Math.abs(offsetY * Laya.stage._canvasTransform.getScaleY()) > 1) {
					this._clickOnly = false;
					this._offsets || (this._offsets = []);
					this._offsets.length = 0;
					this.target.event(/*laya.events.Event.DRAG_START*/"dragstart", this.data);
					MouseManager.instance.disableMouseEvent = this._disableMouseEvent;
					this.target._set$P("$_MOUSEDOWN", false);
				} else return;
			} else {
				this._offsets.push(offsetX, offsetY);
			}
			if (offsetX === 0 && offsetY === 0) return;
			this._lastX = mouseX;
			this._lastY = mouseY;
			this.target.x += offsetX * this._elasticRateX;
			this.target.y += offsetY * this._elasticRateY;
			this.area && this.checkArea();
			this.target.event(/*laya.events.Event.DRAG_MOVE*/"dragmove", this.data);
		}

		/**
		*拖拽区域检测。
		*/
		__proto.checkArea = function () {
			if (this.elasticDistance <= 0) {
				this.backToArea();
			} else {
				if (this.target.x < this.area.x) {
					var offsetX = this.area.x - this.target.x;
				} else if (this.target.x > this.area.x + this.area.width) {
					offsetX = this.target.x - this.area.x - this.area.width;
				} else {
					offsetX = 0;
				}
				this._elasticRateX = Math.max(0, 1 - (offsetX / this.elasticDistance));
				if (this.target.y < this.area.y) {
					var offsetY = this.area.y - this.target.y;
				} else if (this.target.y > this.area.y + this.area.height) {
					offsetY = this.target.y - this.area.y - this.area.height;
				} else {
					offsetY = 0;
				}
				this._elasticRateY = Math.max(0, 1 - (offsetY / this.elasticDistance));
			}
		}

		/**
		*移动至设定的拖拽区域。
		*/
		__proto.backToArea = function () {
			this.target.x = Math.min(Math.max(this.target.x, this.area.x), this.area.x + this.area.width);
			this.target.y = Math.min(Math.max(this.target.y, this.area.y), this.area.y + this.area.height);
		}

		/**
		*舞台的抬起事件侦听函数。
		*@param e Event 对象。
		*/
		__proto.onStageMouseUp = function (e) {
			MouseManager.instance.disableMouseEvent = false;
			Laya.stage.off(/*laya.events.Event.MOUSE_UP*/"mouseup", this, this.onStageMouseUp);
			Laya.stage.off(/*laya.events.Event.MOUSE_OUT*/"mouseout", this, this.onStageMouseUp);
			Laya.timer.clear(this, this.loop);
			if (this._clickOnly || !this.target) return;
			if (this.hasInertia) {
				if (this._offsets.length < 1) {
					this._offsets.push(this._parent.mouseX - this._lastX, this._parent.mouseY - this._lastY);
				}
				this._offsetX = this._offsetY = 0;
				var len = this._offsets.length;
				var n = Math.min(len, 6);
				var m = this._offsets.length - n;
				for (var i = len - 1; i > m; i--) {
					this._offsetY += this._offsets[i--];
					this._offsetX += this._offsets[i];
				}
				this._offsetX = this._offsetX / n * 2;
				this._offsetY = this._offsetY / n * 2;
				if (Math.abs(this._offsetX) > this.maxOffset) this._offsetX = this._offsetX > 0 ? this.maxOffset : -this.maxOffset;
				if (Math.abs(this._offsetY) > this.maxOffset) this._offsetY = this._offsetY > 0 ? this.maxOffset : -this.maxOffset;
				Laya.timer.frameLoop(1, this, this.tweenMove);
			} else if (this.elasticDistance > 0) {
				this.checkElastic();
			} else {
				this.clear();
			}
		}

		/**
		*橡皮筋效果检测。
		*/
		__proto.checkElastic = function () {
			var tx = NaN;
			var ty = NaN;
			if (this.target.x < this.area.x) tx = this.area.x;
			else if (this.target.x > this.area.x + this.area.width) tx = this.area.x + this.area.width;
			if (this.target.y < this.area.y) ty = this.area.y;
			else if (this.target.y > this.area.y + this.area.height) ty = this.area.y + this.area.height;
			if (!isNaN(tx) || !isNaN(ty)) {
				var obj = {};
				if (!isNaN(tx)) obj.x = tx;
				if (!isNaN(ty)) obj.y = ty;
				this._tween = Tween.to(this.target, obj, this.elasticBackTime, Ease.sineOut, Handler.create(this, this.clear), 0, false, false);
			} else {
				this.clear();
			}
		}

		/**
		*移动。
		*/
		__proto.tweenMove = function () {
			this._offsetX *= this.ratio * this._elasticRateX;
			this._offsetY *= this.ratio * this._elasticRateY;
			this.target.x += this._offsetX;
			this.target.y += this._offsetY;
			this.area && this.checkArea();
			this.target.event(/*laya.events.Event.DRAG_MOVE*/"dragmove", this.data);
			if ((Math.abs(this._offsetX) < 1 && Math.abs(this._offsetY) < 1) || this._elasticRateX < 0.5 || this._elasticRateY < 0.5) {
				Laya.timer.clear(this, this.tweenMove);
				if (this.elasticDistance > 0) this.checkElastic();
				else this.clear();
			}
		}

		/**
		*结束拖拽。
		*/
		__proto.clear = function () {
			if (this.target) {
				this.clearTimer();
				var sp = this.target;
				this.target = null;
				this._parent = null;
				sp.event(/*laya.events.Event.DRAG_END*/"dragend", this.data);
			}
		}

		return Dragging;
	})()


	/**
	*<code>Ease</code> 类定义了缓动函数，以便实现 <code>Tween</code> 动画的缓动效果。
	*/
	//class laya.utils.Ease
	var Ease = (function () {
		function Ease() { };
		__class(Ease, 'laya.utils.Ease');
		Ease.linearNone = function (t, b, c, d) {
			return c * t / d + b;
		}

		Ease.linearIn = function (t, b, c, d) {
			return c * t / d + b;
		}

		Ease.linearInOut = function (t, b, c, d) {
			return c * t / d + b;
		}

		Ease.linearOut = function (t, b, c, d) {
			return c * t / d + b;
		}

		Ease.bounceIn = function (t, b, c, d) {
			return c - Ease.bounceOut(d - t, 0, c, d) + b;
		}

		Ease.bounceInOut = function (t, b, c, d) {
			if (t < d * 0.5) return Ease.bounceIn(t * 2, 0, c, d) * .5 + b;
			else return Ease.bounceOut(t * 2 - d, 0, c, d) * .5 + c * .5 + b;
		}

		Ease.bounceOut = function (t, b, c, d) {
			if ((t /= d) < (1 / 2.75)) return c * (7.5625 * t * t) + b;
			else if (t < (2 / 2.75)) return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;
			else if (t < (2.5 / 2.75)) return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;
			else return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;
		}

		Ease.backIn = function (t, b, c, d, s) {
			(s === void 0) && (s = 1.70158);
			return c * (t /= d) * t * ((s + 1) * t - s) + b;
		}

		Ease.backInOut = function (t, b, c, d, s) {
			(s === void 0) && (s = 1.70158);
			if ((t /= d * 0.5) < 1) return c * 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;
			return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;
		}

		Ease.backOut = function (t, b, c, d, s) {
			(s === void 0) && (s = 1.70158);
			return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
		}

		Ease.elasticIn = function (t, b, c, d, a, p) {
			(a === void 0) && (a = 0);
			(p === void 0) && (p = 0);
			var s;
			if (t == 0) return b;
			if ((t /= d) == 1) return b + c;
			if (!p) p = d * .3;
			if (!a || (c > 0 && a < c) || (c < 0 && a < -c)) {
				a = c;
				s = p / 4;
			} else s = p / Ease.PI2 * Math.asin(c / a);
			return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * Ease.PI2 / p)) + b;
		}

		Ease.elasticInOut = function (t, b, c, d, a, p) {
			(a === void 0) && (a = 0);
			(p === void 0) && (p = 0);
			var s;
			if (t == 0) return b;
			if ((t /= d * 0.5) == 2) return b + c;
			if (!p) p = d * (.3 * 1.5);
			if (!a || (c > 0 && a < c) || (c < 0 && a < -c)) {
				a = c;
				s = p / 4;
			} else s = p / Ease.PI2 * Math.asin(c / a);
			if (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * Ease.PI2 / p)) + b;
			return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * Ease.PI2 / p) * .5 + c + b;
		}

		Ease.elasticOut = function (t, b, c, d, a, p) {
			(a === void 0) && (a = 0);
			(p === void 0) && (p = 0);
			var s;
			if (t == 0) return b;
			if ((t /= d) == 1) return b + c;
			if (!p) p = d * .3;
			if (!a || (c > 0 && a < c) || (c < 0 && a < -c)) {
				a = c;
				s = p / 4;
			} else s = p / Ease.PI2 * Math.asin(c / a);
			return (a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * Ease.PI2 / p) + c + b);
		}

		Ease.strongIn = function (t, b, c, d) {
			return c * (t /= d) * t * t * t * t + b;
		}

		Ease.strongInOut = function (t, b, c, d) {
			if ((t /= d * 0.5) < 1) return c * 0.5 * t * t * t * t * t + b;
			return c * 0.5 * ((t -= 2) * t * t * t * t + 2) + b;
		}

		Ease.strongOut = function (t, b, c, d) {
			return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
		}

		Ease.sineInOut = function (t, b, c, d) {
			return -c * 0.5 * (Math.cos(Math.PI * t / d) - 1) + b;
		}

		Ease.sineIn = function (t, b, c, d) {
			return -c * Math.cos(t / d * Ease.HALF_PI) + c + b;
		}

		Ease.sineOut = function (t, b, c, d) {
			return c * Math.sin(t / d * Ease.HALF_PI) + b;
		}

		Ease.quintIn = function (t, b, c, d) {
			return c * (t /= d) * t * t * t * t + b;
		}

		Ease.quintInOut = function (t, b, c, d) {
			if ((t /= d * 0.5) < 1) return c * 0.5 * t * t * t * t * t + b;
			return c * 0.5 * ((t -= 2) * t * t * t * t + 2) + b;
		}

		Ease.quintOut = function (t, b, c, d) {
			return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
		}

		Ease.quartIn = function (t, b, c, d) {
			return c * (t /= d) * t * t * t + b;
		}

		Ease.quartInOut = function (t, b, c, d) {
			if ((t /= d * 0.5) < 1) return c * 0.5 * t * t * t * t + b;
			return -c * 0.5 * ((t -= 2) * t * t * t - 2) + b;
		}

		Ease.quartOut = function (t, b, c, d) {
			return -c * ((t = t / d - 1) * t * t * t - 1) + b;
		}

		Ease.cubicIn = function (t, b, c, d) {
			return c * (t /= d) * t * t + b;
		}

		Ease.cubicInOut = function (t, b, c, d) {
			if ((t /= d * 0.5) < 1) return c * 0.5 * t * t * t + b;
			return c * 0.5 * ((t -= 2) * t * t + 2) + b;
		}

		Ease.cubicOut = function (t, b, c, d) {
			return c * ((t = t / d - 1) * t * t + 1) + b;
		}

		Ease.quadIn = function (t, b, c, d) {
			return c * (t /= d) * t + b;
		}

		Ease.quadInOut = function (t, b, c, d) {
			if ((t /= d * 0.5) < 1) return c * 0.5 * t * t + b;
			return -c * 0.5 * ((--t) * (t - 2) - 1) + b;
		}

		Ease.quadOut = function (t, b, c, d) {
			return -c * (t /= d) * (t - 2) + b;
		}

		Ease.expoIn = function (t, b, c, d) {
			return (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b - c * 0.001;
		}

		Ease.expoInOut = function (t, b, c, d) {
			if (t == 0) return b;
			if (t == d) return b + c;
			if ((t /= d * 0.5) < 1) return c * 0.5 * Math.pow(2, 10 * (t - 1)) + b;
			return c * 0.5 * (-Math.pow(2, -10 * --t) + 2) + b;
		}

		Ease.expoOut = function (t, b, c, d) {
			return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
		}

		Ease.circIn = function (t, b, c, d) {
			return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
		}

		Ease.circInOut = function (t, b, c, d) {
			if ((t /= d * 0.5) < 1) return -c * 0.5 * (Math.sqrt(1 - t * t) - 1) + b;
			return c * 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
		}

		Ease.circOut = function (t, b, c, d) {
			return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
		}

		Ease.HALF_PI = Math.PI * 0.5;
		Ease.PI2 = Math.PI * 2;
		return Ease;
	})()


	/**
	*鼠标点击区域，可以设置绘制一系列矢量图作为点击区域和非点击区域（目前只支持圆形，矩形，多边形）
	*/
	//class laya.utils.HitArea
	var HitArea = (function () {
		function HitArea() {
			this._hit = null;
			this._unHit = null;
		}

		__class(HitArea, 'laya.utils.HitArea');
		var __proto = HitArea.prototype;
		/**
		*是否包含某个点
		*@param x x坐标
		*@param y y坐标
		*@return 是否点击到
		*/
		__proto.isHit = function (x, y) {
			if (!HitArea.isHitGraphic(x, y, this.hit)) return false;
			return !HitArea.isHitGraphic(x, y, this.unHit);
		}

		/**
		*检测对象是否包含指定的点。
		*@param x 点的 X 轴坐标值（水平位置）。
		*@param y 点的 Y 轴坐标值（垂直位置）。
		*@return 如果包含指定的点，则值为 true；否则为 false。
		*/
		__proto.contains = function (x, y) {
			return this.isHit(x, y);
		}

		/**
		*可点击区域，可以设置绘制一系列矢量图作为点击区域（目前只支持圆形，矩形，多边形）
		*/
		__getset(0, __proto, 'hit', function () {
			if (!this._hit) this._hit = new Graphics();
			return this._hit;
		}, function (value) {
			this._hit = value;
		});

		/**
		*不可点击区域，可以设置绘制一系列矢量图作为非点击区域（目前只支持圆形，矩形，多边形）
		*/
		__getset(0, __proto, 'unHit', function () {
			if (!this._unHit) this._unHit = new Graphics();
			return this._unHit;
		}, function (value) {
			this._unHit = value;
		});

		HitArea.isHitGraphic = function (x, y, graphic) {
			if (!graphic) return false;
			var cmds;
			cmds = graphic.cmds;
			if (!cmds && graphic._one) {
				cmds = HitArea._cmds;
				cmds.length = 1;
				cmds[0] = graphic._one;
			}
			if (!cmds) return false;
			var i = 0, len = 0;
			len = cmds.length;
			var cmd;
			for (i = 0; i < len; i++) {
				cmd = cmds[i];
				if (!cmd) continue;
				var context = Render._context;
				switch (cmd.callee) {
					case context._translate:
					case 6:
						x -= cmd[0];
						y -= cmd[1];
					default:
				}
				if (HitArea.isHitCmd(x, y, cmd)) return true;
			}
			return false;
		}

		HitArea.isHitCmd = function (x, y, cmd) {
			if (!cmd) return false;
			var context = Render._context;
			var rst = false;
			switch (cmd["callee"]) {
				case context._drawRect:
				case 13:
					HitArea._rec.setTo(cmd[0], cmd[1], cmd[2], cmd[3]);
					rst = HitArea._rec.contains(x, y);
					break;
				case context._drawCircle:
				case context._fillCircle:
				case 14: ;
					var d = NaN;
					x -= cmd[0];
					y -= cmd[1];
					d = x * x + y * y;
					rst = d < cmd[2] * cmd[2];
					break;
				case context._drawPoly:
				case 18:
					x -= cmd[0];
					y -= cmd[1];
					rst = HitArea.ptInPolygon(x, y, cmd[2]);
					break;
				default:
					break;
			}
			return rst;
		}

		HitArea.ptInPolygon = function (x, y, areaPoints) {
			var p;
			p = HitArea._ptPoint;
			p.setTo(x, y);
			var nCross = 0;
			var p1x = NaN, p1y = NaN, p2x = NaN, p2y = NaN;
			var len = 0;
			len = areaPoints.length;
			for (var i = 0; i < len; i += 2) {
				p1x = areaPoints[i];
				p1y = areaPoints[i + 1];
				p2x = areaPoints[(i + 2) % len];
				p2y = areaPoints[(i + 3) % len];
				if (p1y == p2y)
					continue;
				if (p.y < Math.min(p1y, p2y))
					continue;
				if (p.y >= Math.max(p1y, p2y))
					continue;
				var tx = (p.y - p1y) * (p2x - p1x) / (p2y - p1y) + p1x;
				if (tx > p.x) {
					nCross++;
				}
			}
			return (nCross % 2 == 1);
		}

		HitArea._cmds = [];
		__static(HitArea,
			['_rec', function () { return this._rec = new Rectangle(); }, '_ptPoint', function () { return this._ptPoint = new Point(); }
			]);
		return HitArea;
	})()


	/**
	*@private
	*<code>HTMLChar</code> 是一个 HTML 字符类。
	*/
	//class laya.utils.HTMLChar
	var HTMLChar = (function () {
		function HTMLChar(char, w, h, style) {
			//this._sprite=null;
			//this._x=NaN;
			//this._y=NaN;
			//this._w=NaN;
			//this._h=NaN;
			//this.isWord=false;
			//this.char=null;
			//this.charNum=NaN;
			//this.style=null;
			this.char = char;
			this.charNum = char.charCodeAt(0);
			this._x = this._y = 0;
			this.width = w;
			this.height = h;
			this.style = style;
			this.isWord = !HTMLChar._isWordRegExp.test(char);
		}

		__class(HTMLChar, 'laya.utils.HTMLChar');
		var __proto = HTMLChar.prototype;
		Laya.imps(__proto, { "laya.display.ILayout": true })
		/**
		*设置与此对象绑定的显示对象 <code>Sprite</code> 。
		*@param sprite 显示对象 <code>Sprite</code> 。
		*/
		__proto.setSprite = function (sprite) {
			this._sprite = sprite;
		}

		/**
		*获取与此对象绑定的显示对象 <code>Sprite</code>。
		*@return
		*/
		__proto.getSprite = function () {
			return this._sprite;
		}

		/**@private */
		__proto._isChar = function () {
			return true;
		}

		/**@private */
		__proto._getCSSStyle = function () {
			return this.style;
		}

		/**
		*宽度。
		*/
		__getset(0, __proto, 'width', function () {
			return this._w;
		}, function (value) {
			this._w = value;
		});

		/**
		*此对象存储的 X 轴坐标值。
		*当设置此值时，如果此对象有绑定的 Sprite 对象，则改变 Sprite 对象的属性 x 的值。
		*/
		__getset(0, __proto, 'x', function () {
			return this._x;
		}, function (value) {
			if (this._sprite) {
				this._sprite.x = value;
			}
			this._x = value;
		});

		/**
		*此对象存储的 Y 轴坐标值。
		*当设置此值时，如果此对象有绑定的 Sprite 对象，则改变 Sprite 对象的属性 y 的值。
		*/
		__getset(0, __proto, 'y', function () {
			return this._y;
		}, function (value) {
			if (this._sprite) {
				this._sprite.y = value;
			}
			this._y = value;
		});

		/**
		*高度。
		*/
		__getset(0, __proto, 'height', function () {
			return this._h;
		}, function (value) {
			this._h = value;
		});

		HTMLChar._isWordRegExp = new RegExp("[\\w\.]", "");
		return HTMLChar;
	})()


	/**
	*<code>Log</code> 类用于在界面内显示日志记录信息。
	*/
	//class laya.utils.Log
	var Log = (function () {
		function Log() { };
		__class(Log, 'laya.utils.Log');
		Log.enable = function () {
			if (!Log._logdiv) {
				Log._logdiv = Browser.window.document.createElement('div');
				Browser.window.document.body.appendChild(Log._logdiv);
				Log._logdiv.style.cssText = "pointer-events:none;border:white;overflow:hidden;z-index:1000000;background:rgba(100,100,100,0.6);color:white;position: absolute;left:0px;top:0px;width:50%;height:50%;";
			}
		}

		Log.toggle = function () {
			var style = Log._logdiv.style;
			if (style.width == "1px") {
				style.width = style.height = "50%";
			} else {
				style.width = style.height = "1px";
			}
		}

		Log.print = function (value) {
			if (Log._logdiv) {
				if (Log._count >= Log.maxCount) Log.clear();
				Log._count++;
				Log._logdiv.innerText += value + "\n";
				Log._logdiv.scrollTop = Log._logdiv.scrollHeight;
			}
		}

		Log.clear = function () {
			Log._logdiv.innerText = "";
			Log._count = 0;
		}

		Log._logdiv = null
		Log._count = 0;
		Log.maxCount = 20;
		return Log;
	})()


	/**
	*<code>Mouse</code> 类用于控制鼠标光标。
	*/
	//class laya.utils.Mouse
	var Mouse = (function () {
		function Mouse() { }
		__class(Mouse, 'laya.utils.Mouse');
		/**
		*设置鼠标样式
		*@param cursorStr
		*例如auto move no-drop col-resize
		*all-scroll pointer not-allowed row-resize
		*crosshair progress e-resize ne-resize
		*default text n-resize nw-resize
		*help vertical-text s-resize se-resize
		*inherit wait w-resize sw-resize
		*
		*/
		__getset(1, Mouse, 'cursor', function () {
			return Mouse._style.cursor;
		}, function (cursorStr) {
			Mouse._style.cursor = cursorStr;
		});

		Mouse.hide = function () {
			if (Mouse.cursor != "none") {
				Mouse._preCursor = Mouse.cursor;
				Mouse.cursor = "none";
			}
		}

		Mouse.show = function () {
			if (Mouse.cursor == "none") {
				if (Mouse._preCursor) {
					Mouse.cursor = Mouse._preCursor;
				} else {
					Mouse.cursor = "auto";
				}
			}
		}

		Mouse._preCursor = null
		__static(Mouse,
			['_style', function () { return this._style = Browser.document.body.style; }
			]);
		return Mouse;
	})()


	/**
	*<p> <code>Pool</code> 是对象池类，用于对象的存贮、重复使用。</p>
	*<p>合理使用对象池，可以有效减少对象创建的开销，避免频繁的垃圾回收，从而优化游戏流畅度。</p>
	*/
	//class laya.utils.Pool
	var Pool = (function () {
		function Pool() { };
		__class(Pool, 'laya.utils.Pool');
		Pool.getPoolBySign = function (sign) {
			return Pool._poolDic[sign] || (Pool._poolDic[sign] = []);
		}

		Pool.clearBySign = function (sign) {
			if (Pool._poolDic[sign]) Pool._poolDic[sign].length = 0;
		}

		Pool.recover = function (sign, item) {
			if (item["__InPool"]) return;
			item["__InPool"] = true;
			Pool.getPoolBySign(sign).push(item);
		}

		Pool.getItemByClass = function (sign, cls) {
			var pool = Pool.getPoolBySign(sign);
			var rst = pool.length ? pool.pop() : new cls();
			rst["__InPool"] = false;
			return rst;
		}

		Pool.getItemByCreateFun = function (sign, createFun) {
			var pool = Pool.getPoolBySign(sign);
			var rst = pool.length ? pool.pop() : createFun();
			rst["__InPool"] = false;
			return rst;
		}

		Pool.getItem = function (sign) {
			var pool = Pool.getPoolBySign(sign);
			var rst = pool.length ? pool.pop() : null;
			if (rst) {
				rst["__InPool"] = false;
			}
			return rst;
		}

		Pool._poolDic = {};
		Pool.InPoolSign = "__InPool";
		return Pool;
	})()


	/**
	*@private
	*基于个数的对象缓存管理器
	*/
	//class laya.utils.PoolCache
	var PoolCache = (function () {
		function PoolCache() {
			this.sign = null;
			this.maxCount = 1000;
		}

		__class(PoolCache, 'laya.utils.PoolCache');
		var __proto = PoolCache.prototype;
		/**
		*获取缓存的对象列表
		*@return
		*
		*/
		__proto.getCacheList = function () {
			return Pool.getPoolBySign(this.sign);
		}

		/**
		*尝试清理缓存
		*@param force 是否强制清理
		*
		*/
		__proto.tryDispose = function (force) {
			var list;
			list = Pool.getPoolBySign(this.sign);
			if (list.length > this.maxCount) {
				list.splice(this.maxCount, list.length - this.maxCount);
			}
		}

		PoolCache.addPoolCacheManager = function (sign, maxCount) {
			(maxCount === void 0) && (maxCount = 100);
			var cache;
			cache = new PoolCache();
			cache.sign = sign;
			cache.maxCount = maxCount;
			CacheManger.regCacheByFunction(Utils.bind(cache.tryDispose, cache), Utils.bind(cache.getCacheList, cache));
		}

		return PoolCache;
	})()


	/**
	*<p> <code>Stat</code> 是一个性能统计面板，可以实时更新相关的性能参数。</p>
	*<p>参与统计的性能参数如下（所有参数都是每大约1秒进行更新）：<br/>
	*FPS(Canvas)/FPS(WebGL)：Canvas 模式或者 WebGL 模式下的帧频，也就是每秒显示的帧数，值越高、越稳定，感觉越流畅；<br/>
	*Sprite：统计所有渲染节点（包括容器）数量，它的大小会影响引擎进行节点遍历、数据组织和渲染的效率。其值越小，游戏运行效率越高；<br/>
	*DrawCall：此值是决定性能的重要指标，其值越小，游戏运行效率越高。Canvas模式下表示每大约1秒的图像绘制次数；WebGL模式下表示每大约1秒的渲染提交批次，每次准备数据并通知GPU渲染绘制的过程称为1次DrawCall，在每次DrawCall中除了在通知GPU的渲染上比较耗时之外，切换材质与shader也是非常耗时的操作；<br/>
	*CurMem：Canvas模式下，表示内存占用大小，值越小越好，过高会导致游戏闪退；WebGL模式下，表示内存与显存的占用，值越小越好；<br/>
	*Shader：是 WebGL 模式独有的性能指标，表示每大约1秒 Shader 提交次数，值越小越好；<br/>
	*Canvas：由三个数值组成，只有设置 CacheAs 后才会有值，默认为0/0/0。从左到右数值的意义分别为：每帧重绘的画布数量 / 缓存类型为"normal"类型的画布数量 / 缓存类型为"bitmap"类型的画布数量。</p>
	*/
	//class laya.utils.Stat
	var Stat = (function () {
		function Stat() { };
		__class(Stat, 'laya.utils.Stat');
		/**
		*点击性能统计显示区域的处理函数。
		*/
		__getset(1, Stat, 'onclick', null, function (fn) {
			Stat._canvas.source.onclick = fn;
			Stat._canvas.source.style.pointerEvents = '';
		});

		Stat.show = function (x, y) {
			(x === void 0) && (x = 0);
			(y === void 0) && (y = 0);
			if (Render.isConchApp) {
				/*__JS__ */conch.showFPS && conch.showFPS(x, y);
				return;
			};
			var pixel = Browser.pixelRatio;
			Stat._width = pixel * 130;
			Stat._vx = pixel * 75;
			Stat._view[0] = { title: "FPS(Canvas)", value: "_fpsStr", color: "yellow", units: "int" };
			Stat._view[1] = { title: "Sprite", value: "spriteCount", color: "white", units: "int" };
			Stat._view[2] = { title: "DrawCall", value: "drawCall", color: "white", units: "int" };
			Stat._view[3] = { title: "CurMem", value: "currentMemorySize", color: "yellow", units: "M" };
			if (Render.isWebGL) {
				Stat._view[4] = { title: "Shader", value: "shaderCall", color: "white", units: "int" };
				if (!Render.is3DMode) {
					Stat._view[0].title = "FPS(WebGL)";
					Stat._view[5] = { title: "Canvas", value: "_canvasStr", color: "white", units: "int" };
				} else {
					Stat._view[0].title = "FPS(3D)";
					Stat._view[5] = { title: "TriFaces", value: "trianglesFaces", color: "white", units: "int" };
					Stat._view[6] = { title: "treeNodeColl", value: "treeNodeCollision", color: "white", units: "int" };
					Stat._view[7] = { title: "treeSpriteColl", value: "treeSpriteCollision", color: "white", units: "int" };
				}
			} else {
				Stat._view[4] = { title: "Canvas", value: "_canvasStr", color: "white", units: "int" };
			}
			Stat._fontSize = 12 * pixel;
			for (var i = 0; i < Stat._view.length; i++) {
				Stat._view[i].x = 4;
				Stat._view[i].y = i * Stat._fontSize + 2 * pixel;
			}
			Stat._height = pixel * (Stat._view.length * 12 + 3 * pixel) + 4;
			if (!Stat._canvas) {
				Stat._canvas = new HTMLCanvas('2D');
				Stat._canvas.size(Stat._width, Stat._height);
				Stat._ctx = Stat._canvas.getContext('2d');
				Stat._ctx.textBaseline = "top";
				Stat._ctx.font = Stat._fontSize + "px Sans-serif";
				Stat._canvas.source.style.cssText = "pointer-events:none;background:rgba(150,150,150,0.8);z-index:100000;position: absolute;left:" + x + "px;top:" + y + "px;width:" + (Stat._width / pixel) + "px;height:" + (Stat._height / pixel) + "px;";
			}
			Stat._first = true;
			Stat.loop();
			Stat._first = false;
			Browser.container.appendChild(Stat._canvas.source);
			Stat.enable();
		}

		Stat.enable = function () {
			Laya.timer.frameLoop(1, Stat, Stat.loop);
		}

		Stat.hide = function () {
			if (Stat._canvas) {
				Browser.removeElement(Stat._canvas.source);
				Laya.timer.clear(Stat, Stat.loop);
			}
		}

		Stat.clear = function () {
			Stat.trianglesFaces = Stat.drawCall = Stat.shaderCall = Stat.spriteCount = Stat.treeNodeCollision = Stat.treeSpriteCollision = Stat.canvasNormal = Stat.canvasBitmap = Stat.canvasReCache = 0;
		}

		Stat.loop = function () {
			Stat._count++;
			var timer = Browser.now();
			if (timer - Stat._timer < 1000) return;
			var count = Stat._count;
			Stat.FPS = Math.round((count * 1000) / (timer - Stat._timer));
			if (Stat._canvas) {
				Stat.trianglesFaces = Math.round(Stat.trianglesFaces / count);
				Stat.drawCall = Math.round(Stat.drawCall / count) - 2;
				Stat.shaderCall = Math.round(Stat.shaderCall / count);
				Stat.spriteCount = Math.round(Stat.spriteCount / count) - 1;
				Stat.canvasNormal = Math.round(Stat.canvasNormal / count);
				Stat.canvasBitmap = Math.round(Stat.canvasBitmap / count);
				Stat.canvasReCache = Math.ceil(Stat.canvasReCache / count);
				Stat.treeNodeCollision = Math.round(Stat.treeNodeCollision / count);
				Stat.treeSpriteCollision = Math.round(Stat.treeSpriteCollision / count);
				var delay = Stat.FPS > 0 ? Math.floor(1000 / Stat.FPS).toString() : " ";
				Stat._fpsStr = Stat.FPS + (Stat.renderSlow ? " slow" : "") + " " + delay;
				Stat._canvasStr = Stat.canvasReCache + "/" + Stat.canvasNormal + "/" + Stat.canvasBitmap;
				Stat.currentMemorySize = ResourceManager.systemResourceManager.memorySize;
				var ctx = Stat._ctx;
				ctx.clearRect(Stat._first ? 0 : Stat._vx, 0, Stat._width, Stat._height);
				for (var i = 0; i < Stat._view.length; i++) {
					var one = Stat._view[i];
					if (Stat._first) {
						ctx.fillStyle = "white";
						ctx.fillText(one.title, one.x, one.y, null, null, null);
					}
					ctx.fillStyle = one.color;
					var value = Stat[one.value];
					(one.units == "M") && (value = Math.floor(value / (1024 * 1024) * 100) / 100 + " M");
					ctx.fillText(value + "", one.x + Stat._vx, one.y, null, null, null);
				}
				Stat.clear();
			}
			Stat._count = 0;
			Stat._timer = timer;
		}

		Stat.FPS = 0;
		Stat.loopCount = 0;
		Stat.shaderCall = 0;
		Stat.drawCall = 0;
		Stat.trianglesFaces = 0;
		Stat.spriteCount = 0;
		Stat.treeNodeCollision = 0;
		Stat.treeSpriteCollision = 0;
		Stat.canvasNormal = 0;
		Stat.canvasBitmap = 0;
		Stat.canvasReCache = 0;
		Stat.renderSlow = false;
		Stat.currentMemorySize = 0;
		Stat._fpsStr = null
		Stat._canvasStr = null
		Stat._canvas = null
		Stat._ctx = null
		Stat._timer = 0;
		Stat._count = 0;
		Stat._width = 0;
		Stat._height = 100;
		Stat._view = [];
		Stat._fontSize = 12;
		Stat._first = false;
		Stat._vx = NaN
		return Stat;
	})()


	/**
	*@private
	*<code>StringKey</code> 类用于存取字符串对应的数字。
	*/
	//class laya.utils.StringKey
	var StringKey = (function () {
		function StringKey() {
			this._strsToID = {};
			this._idToStrs = [];
			this._length = 0;
		}

		__class(StringKey, 'laya.utils.StringKey');
		var __proto = StringKey.prototype;
		/**
		*添加一个字符。
		*@param str 字符，将作为key 存储相应生成的数字。
		*@return 此字符对应的数字。
		*/
		__proto.add = function (str) {
			var index = this._strsToID[str];
			if (index != null) return index;
			this._idToStrs[this._length] = str;
			return this._strsToID[str] = this._length++;
		}

		/**
		*获取指定字符对应的ID。
		*@param str 字符。
		*@return 此字符对应的ID。
		*/
		__proto.getID = function (str) {
			var index = this._strsToID[str];
			return index == null ? -1 : index;
		}

		/**
		*根据指定ID获取对应字符。
		*@param id ID。
		*@return 此id对应的字符。
		*/
		__proto.getName = function (id) {
			var str = this._idToStrs[id];
			return str == null ? undefined : str;
		}

		return StringKey;
	})()


	/**
	*<code>Timer</code> 是时钟管理类。它是一个单例，不要手动实例化此类，应该通过 Laya.timer 访问。
	*/
	//class laya.utils.Timer
	var Timer = (function () {
		var TimerHandler;
		function Timer() {
			this._delta = 0;
			this.scale = 1;
			this.currFrame = 0;
			this._mid = 1;
			this._map = [];
			this._laters = [];
			this._handlers = [];
			this._temp = [];
			this._count = 0;
			this.currTimer = Browser.now();
			this._lastTimer = Browser.now();
			Laya.timer && Laya.timer.frameLoop(1, this, this._update);
		}

		__class(Timer, 'laya.utils.Timer');
		var __proto = Timer.prototype;
		/**
		*@private
		*帧循环处理函数。
		*/
		__proto._update = function () {
			if (this.scale <= 0) {
				this._lastTimer = Browser.now();
				return;
			};
			var frame = this.currFrame = this.currFrame + this.scale;
			var now = Browser.now();
			this._delta = (now - this._lastTimer) * this.scale;
			var timer = this.currTimer = this.currTimer + this._delta;
			this._lastTimer = now;
			var handlers = this._handlers;
			this._count = 0;
			for (i = 0, n = handlers.length; i < n; i++) {
				handler = handlers[i];
				if (handler.method !== null) {
					var t = handler.userFrame ? frame : timer;
					if (t >= handler.exeTime) {
						if (handler.repeat) {
							if (!handler.jumpFrame) {
								handler.exeTime += handler.delay;
								handler.run(false);
								if (t > handler.exeTime) {
									handler.exeTime += Math.ceil((t - handler.exeTime) / handler.delay) * handler.delay;
								}
							} else {
								while (t >= handler.exeTime) {
									handler.exeTime += handler.delay;
									handler.run(false);
								}
							}
						} else {
							handler.run(true);
						}
					}
				} else {
					this._count++;
				}
			}
			if (this._count > 30 || frame % 200 === 0) this._clearHandlers();
			var laters = this._laters;
			for (var i = 0, n = laters.length - 1; i <= n; i++) {
				var handler = laters[i];
				if (handler.method !== null) {
					this._map[handler.key] = null;
					handler.run(false);
				}
				this._recoverHandler(handler);
				i === n && (n = laters.length - 1);
			}
			laters.length = 0;
		}

		/**@private */
		__proto._clearHandlers = function () {
			var handlers = this._handlers;
			for (var i = 0, n = handlers.length; i < n; i++) {
				var handler = handlers[i];
				if (handler.method !== null) this._temp.push(handler);
				else this._recoverHandler(handler);
			}
			this._handlers = this._temp;
			this._temp = handlers;
			this._temp.length = 0;
		}

		/**@private */
		__proto._recoverHandler = function (handler) {
			if (this._map[handler.key] == handler) this._map[handler.key] = null;
			handler.clear();
			Timer._pool.push(handler);
		}

		/**@private */
		__proto._create = function (useFrame, repeat, delay, caller, method, args, coverBefore) {
			if (!delay) {
				method.apply(caller, args);
				return null;
			}
			if (coverBefore) {
				var handler = this._getHandler(caller, method);
				if (handler) {
					handler.repeat = repeat;
					handler.userFrame = useFrame;
					handler.delay = delay;
					handler.caller = caller;
					handler.method = method;
					handler.args = args;
					handler.exeTime = delay + (useFrame ? this.currFrame : this.currTimer + Browser.now() - this._lastTimer);
					return handler;
				}
			}
			handler = Timer._pool.length > 0 ? Timer._pool.pop() : new TimerHandler();
			handler.repeat = repeat;
			handler.userFrame = useFrame;
			handler.delay = delay;
			handler.caller = caller;
			handler.method = method;
			handler.args = args;
			handler.exeTime = delay + (useFrame ? this.currFrame : this.currTimer + Browser.now() - this._lastTimer);
			this._indexHandler(handler);
			this._handlers.push(handler);
			return handler;
		}

		/**@private */
		__proto._indexHandler = function (handler) {
			var caller = handler.caller;
			var method = handler.method;
			var cid = caller ? caller.$_GID || (caller.$_GID = Utils.getGID()) : 0;
			var mid = method.$_TID || (method.$_TID = (this._mid++) * 100000);
			handler.key = cid + mid;
			this._map[handler.key] = handler;
		}

		/**
		*定时执行一次。
		*@param delay 延迟时间(单位为毫秒)。
		*@param caller 执行域(this)。
		*@param method 定时器回调函数。
		*@param args 回调参数。
		*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
		*/
		__proto.once = function (delay, caller, method, args, coverBefore) {
			(coverBefore === void 0) && (coverBefore = true);
			this._create(false, false, delay, caller, method, args, coverBefore);
		}

		/**
		*定时重复执行。
		*@param delay 间隔时间(单位毫秒)。
		*@param caller 执行域(this)。
		*@param method 定时器回调函数。
		*@param args 回调参数。
		*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
		*@param jumpFrame 时钟是否跳帧。基于时间的循环回调，单位时间间隔内，如能执行多次回调，出于性能考虑，引擎默认只执行一次，设置jumpFrame=true后，则回调会连续执行多次
		*/
		__proto.loop = function (delay, caller, method, args, coverBefore, jumpFrame) {
			(coverBefore === void 0) && (coverBefore = true);
			(jumpFrame === void 0) && (jumpFrame = false);
			var handler = this._create(false, true, delay, caller, method, args, coverBefore);
			if (handler) handler.jumpFrame = jumpFrame;
		}

		/**
		*定时执行一次(基于帧率)。
		*@param delay 延迟几帧(单位为帧)。
		*@param caller 执行域(this)。
		*@param method 定时器回调函数。
		*@param args 回调参数。
		*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
		*/
		__proto.frameOnce = function (delay, caller, method, args, coverBefore) {
			(coverBefore === void 0) && (coverBefore = true);
			this._create(true, false, delay, caller, method, args, coverBefore);
		}

		/**
		*定时重复执行(基于帧率)。
		*@param delay 间隔几帧(单位为帧)。
		*@param caller 执行域(this)。
		*@param method 定时器回调函数。
		*@param args 回调参数。
		*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
		*/
		__proto.frameLoop = function (delay, caller, method, args, coverBefore) {
			(coverBefore === void 0) && (coverBefore = true);
			this._create(true, true, delay, caller, method, args, coverBefore);
		}

		/**返回统计信息。*/
		__proto.toString = function () {
			return "callLater:" + this._laters.length + " handlers:" + this._handlers.length + " pool:" + Timer._pool.length;
		}

		/**
		*清理定时器。
		*@param caller 执行域(this)。
		*@param method 定时器回调函数。
		*/
		__proto.clear = function (caller, method) {
			var handler = this._getHandler(caller, method);
			if (handler) {
				this._map[handler.key] = null; handler.key = 0;
				handler.clear();
			}
		}

		/**
		*清理对象身上的所有定时器。
		*@param caller 执行域(this)。
		*/
		__proto.clearAll = function (caller) {
			if (!caller) return;
			for (var i = 0, n = this._handlers.length; i < n; i++) {
				var handler = this._handlers[i];
				if (handler.caller === caller) {
					this._map[handler.key] = null; handler.key = 0;
					handler.clear();
				}
			}
		}

		/**@private */
		__proto._getHandler = function (caller, method) {
			var cid = caller ? caller.$_GID || (caller.$_GID = Utils.getGID()) : 0;
			var mid = method.$_TID || (method.$_TID = (this._mid++) * 100000);
			return this._map[cid + mid];
		}

		/**
		*延迟执行。
		*@param caller 执行域(this)。
		*@param method 定时器回调函数。
		*@param args 回调参数。
		*/
		__proto.callLater = function (caller, method, args) {
			if (this._getHandler(caller, method) == null) {
				if (Timer._pool.length)
					var handler = Timer._pool.pop();
				else handler = new TimerHandler();
				handler.caller = caller;
				handler.method = method;
				handler.args = args;
				this._indexHandler(handler);
				this._laters.push(handler);
			}
		}

		/**
		*立即执行 callLater 。
		*@param caller 执行域(this)。
		*@param method 定时器回调函数。
		*/
		__proto.runCallLater = function (caller, method) {
			var handler = this._getHandler(caller, method);
			if (handler && handler.method != null) {
				this._map[handler.key] = null;
				handler.run(true);
			}
		}

		/**
		*立即提前执行定时器，执行之后从队列中删除
		*@param caller 执行域(this)。
		*@param method 定时器回调函数。
		*/
		__proto.runTimer = function (caller, method) {
			this.runCallLater(caller, method);
		}

		/**
		*两帧之间的时间间隔,单位毫秒。
		*/
		__getset(0, __proto, 'delta', function () {
			return this._delta;
		});

		Timer._pool = [];
		Timer.__init$ = function () {
			/**@private */
			//class TimerHandler
			TimerHandler = (function () {
				function TimerHandler() {
					this.key = 0;
					this.repeat = false;
					this.delay = 0;
					this.userFrame = false;
					this.exeTime = 0;
					this.caller = null;
					this.method = null;
					this.args = null;
					this.jumpFrame = false;
				}
				__class(TimerHandler, '');
				var __proto = TimerHandler.prototype;
				__proto.clear = function () {
					this.caller = null;
					this.method = null;
					this.args = null;
				}
				__proto.run = function (withClear) {
					var caller = this.caller;
					if (caller && caller.destroyed) return this.clear();
					var method = this.method;
					var args = this.args;
					withClear && this.clear();
					if (method == null) return;
					args ? method.apply(caller, args) : method.call(caller);
				}
				return TimerHandler;
			})()
		}

		return Timer;
	})()


	/**
	*<code>Tween</code> 是一个缓动类。使用此类能够实现对目标对象属性的渐变。
	*/
	//class laya.utils.Tween
	var Tween = (function () {
		function Tween() {
			//this._complete=null;
			//this._target=null;
			//this._ease=null;
			//this._props=null;
			//this._duration=0;
			//this._delay=0;
			//this._startTimer=0;
			//this._usedTimer=0;
			//this._usedPool=false;
			this.gid = 0;
			//this.update=null;
		}

		__class(Tween, 'laya.utils.Tween');
		var __proto = Tween.prototype;
		/**
		*缓动对象的props属性到目标值。
		*@param target 目标对象(即将更改属性值的对象)。
		*@param props 变化的属性列表，比如{x:100,y:20,ease:Ease.backOut,complete:Handler.create(this,onComplete),update:new Handler(this,onComplete)}。
		*@param duration 花费的时间，单位毫秒。
		*@param ease 缓动类型，默认为匀速运动。
		*@param complete 结束回调函数。
		*@param delay 延迟执行时间。
		*@param coverBefore 是否覆盖之前的缓动。
		*@return 返回Tween对象。
		*/
		__proto.to = function (target, props, duration, ease, complete, delay, coverBefore) {
			(delay === void 0) && (delay = 0);
			(coverBefore === void 0) && (coverBefore = false);
			return this._create(target, props, duration, ease, complete, delay, coverBefore, true, false, true);
		}

		/**
		*从props属性，缓动到当前状态。
		*@param target 目标对象(即将更改属性值的对象)。
		*@param props 变化的属性列表，比如{x:100,y:20,ease:Ease.backOut,complete:Handler.create(this,onComplete),update:new Handler(this,onComplete)}。
		*@param duration 花费的时间，单位毫秒。
		*@param ease 缓动类型，默认为匀速运动。
		*@param complete 结束回调函数。
		*@param delay 延迟执行时间。
		*@param coverBefore 是否覆盖之前的缓动。
		*@return 返回Tween对象。
		*/
		__proto.from = function (target, props, duration, ease, complete, delay, coverBefore) {
			(delay === void 0) && (delay = 0);
			(coverBefore === void 0) && (coverBefore = false);
			return this._create(target, props, duration, ease, complete, delay, coverBefore, false, false, true);
		}

		/**@private */
		__proto._create = function (target, props, duration, ease, complete, delay, coverBefore, isTo, usePool, runNow) {
			if (!target) throw new Error("Tween:target is null");
			this._target = target;
			this._duration = duration;
			this._ease = ease || props.ease || Tween.easeNone;
			this._complete = complete || props.complete;
			this._delay = delay;
			this._props = [];
			this._usedTimer = 0;
			this._startTimer = Browser.now();
			this._usedPool = usePool;
			this.update = props.update;
			var gid = (target.$_GID || (target.$_GID = Utils.getGID()));
			if (!Tween.tweenMap[gid]) {
				Tween.tweenMap[gid] = [this];
			} else {
				if (coverBefore) Tween.clearTween(target);
				Tween.tweenMap[gid].push(this);
			}
			if (runNow) {
				if (delay <= 0) this.firstStart(target, props, isTo);
				else Laya.timer.once(delay, this, this.firstStart, [target, props, isTo]);
			} else {
				this._initProps(target, props, isTo);
			}
			return this;
		}

		__proto.firstStart = function (target, props, isTo) {
			if (target.destroyed) {
				this.clear();
				return;
			}
			this._initProps(target, props, isTo);
			this._beginLoop();
		}

		__proto._initProps = function (target, props, isTo) {
			for (var p in props) {
				if ((typeof (target[p]) == 'number')) {
					var start = isTo ? target[p] : props[p];
					var end = isTo ? props[p] : target[p];
					this._props.push([p, start, end - start]);
					if (!isTo) target[p] = start;
				}
			}
		}

		__proto._beginLoop = function () {
			Laya.timer.frameLoop(1, this, this._doEase);
		}

		/**执行缓动**/
		__proto._doEase = function () {
			this._updateEase(Browser.now());
		}

		/**@private */
		__proto._updateEase = function (time) {
			var target = this._target;
			if (!target) return;
			if (target.destroyed) return Tween.clearTween(target);
			var usedTimer = this._usedTimer = time - this._startTimer - this._delay;
			if (usedTimer < 0) return;
			if (usedTimer >= this._duration) return this.complete();
			var ratio = usedTimer > 0 ? this._ease(usedTimer, 0, 1, this._duration) : 0;
			var props = this._props;
			for (var i = 0, n = props.length; i < n; i++) {
				var prop = props[i];
				target[prop[0]] = prop[1] + (ratio * prop[2]);
			}
			if (this.update) this.update.run();
		}

		/**
		*立即结束缓动并到终点。
		*/
		__proto.complete = function () {
			if (!this._target) return;
			Laya.timer.runTimer(this, this.firstStart);
			var target = this._target;
			var props = this._props;
			var handler = this._complete;
			for (var i = 0, n = props.length; i < n; i++) {
				var prop = props[i];
				target[prop[0]] = prop[1] + prop[2];
			}
			if (this.update) this.update.run();
			this.clear();
			handler && handler.run();
		}

		/**
		*暂停缓动，可以通过resume或restart重新开始。
		*/
		__proto.pause = function () {
			Laya.timer.clear(this, this._beginLoop);
			Laya.timer.clear(this, this._doEase);
		}

		/**
		*设置开始时间。
		*@param startTime 开始时间。
		*/
		__proto.setStartTime = function (startTime) {
			this._startTimer = startTime;
		}

		/**
		*停止并清理当前缓动。
		*/
		__proto.clear = function () {
			if (this._target) {
				this._remove();
				this._clear();
			}
		}

		/**
		*@private
		*/
		__proto._clear = function () {
			this.pause();
			Laya.timer.clear(this, this.firstStart);
			this._complete = null;
			this._target = null;
			this._ease = null;
			this._props = null;
			if (this._usedPool) {
				this.update = null;
				Pool.recover("tween", this);
			}
		}

		/**回收到对象池。*/
		__proto.recover = function () {
			this._usedPool = true;
			this._clear();
		}

		__proto._remove = function () {
			var tweens = Tween.tweenMap[this._target.$_GID];
			if (tweens) {
				for (var i = 0, n = tweens.length; i < n; i++) {
					if (tweens[i] === this) {
						tweens.splice(i, 1);
						break;
					}
				}
			}
		}

		/**
		*重新开始暂停的缓动。
		*/
		__proto.restart = function () {
			this.pause();
			this._usedTimer = 0;
			this._startTimer = Browser.now();
			var props = this._props;
			for (var i = 0, n = props.length; i < n; i++) {
				var prop = props[i];
				this._target[prop[0]] = prop[1];
			}
			Laya.timer.once(this._delay, this, this._beginLoop);
		}

		/**
		*恢复暂停的缓动。
		*/
		__proto.resume = function () {
			if (this._usedTimer >= this._duration) return;
			this._startTimer = Browser.now() - this._usedTimer - this._delay;
			this._beginLoop();
		}

		/**设置当前执行比例**/
		__getset(0, __proto, 'progress', null, function (v) {
			var uTime = v * this._duration;
			this._startTimer = Browser.now() - this._delay - uTime;
		});

		Tween.to = function (target, props, duration, ease, complete, delay, coverBefore, autoRecover) {
			(delay === void 0) && (delay = 0);
			(coverBefore === void 0) && (coverBefore = false);
			(autoRecover === void 0) && (autoRecover = true);
			return Pool.getItemByClass("tween", Tween)._create(target, props, duration, ease, complete, delay, coverBefore, true, autoRecover, true);
		}

		Tween.from = function (target, props, duration, ease, complete, delay, coverBefore, autoRecover) {
			(delay === void 0) && (delay = 0);
			(coverBefore === void 0) && (coverBefore = false);
			(autoRecover === void 0) && (autoRecover = true);
			return Pool.getItemByClass("tween", Tween)._create(target, props, duration, ease, complete, delay, coverBefore, false, autoRecover, true);
		}

		Tween.clearAll = function (target) {
			if (!target || !target.$_GID) return;
			var tweens = Tween.tweenMap[target.$_GID];
			if (tweens) {
				for (var i = 0, n = tweens.length; i < n; i++) {
					tweens[i]._clear();
				}
				tweens.length = 0;
			}
		}

		Tween.clear = function (tween) {
			tween.clear();
		}

		Tween.clearTween = function (target) {
			Tween.clearAll(target);
		}

		Tween.easeNone = function (t, b, c, d) {
			return c * t / d + b;
		}

		Tween.tweenMap = {};
		return Tween;
	})()


	/**
	*<code>Utils</code> 是工具类。
	*/
	//class laya.utils.Utils
	var Utils = (function () {
		function Utils() { };
		__class(Utils, 'laya.utils.Utils');
		Utils.toRadian = function (angle) {
			return angle * Utils._pi2;
		}

		Utils.toAngle = function (radian) {
			return radian * Utils._pi;
		}

		Utils.toHexColor = function (color) {
			if (color < 0 || isNaN(color)) return null;
			var str = color.toString(16);
			while (str.length < 6) str = "0" + str;
			return "#" + str;
		}

		Utils.getGID = function () {
			return Utils._gid++;
		}

		Utils.concatArray = function (source, array) {
			if (!array) return source;
			if (!source) return array;
			var i = 0, len = array.length;
			for (i = 0; i < len; i++) {
				source.push(array[i]);
			}
			return source;
		}

		Utils.clearArray = function (array) {
			if (!array) return array;
			array.length = 0;
			return array;
		}

		Utils.copyArray = function (source, array) {
			source || (source = []);
			if (!array) return source;
			source.length = array.length;
			var i = 0, len = array.length;
			for (i = 0; i < len; i++) {
				source[i] = array[i];
			}
			return source;
		}

		Utils.getGlobalRecByPoints = function (sprite, x0, y0, x1, y1) {
			var newLTPoint;
			newLTPoint = new Point(x0, y0);
			newLTPoint = sprite.localToGlobal(newLTPoint);
			var newRBPoint;
			newRBPoint = new Point(x1, y1);
			newRBPoint = sprite.localToGlobal(newRBPoint);
			return Rectangle._getWrapRec([newLTPoint.x, newLTPoint.y, newRBPoint.x, newRBPoint.y]);
		}

		Utils.getGlobalPosAndScale = function (sprite) {
			return Utils.getGlobalRecByPoints(sprite, 0, 0, 1, 1);
		}

		Utils.bind = function (fun, scope) {
			var rst = fun;
			/*__JS__ */rst = fun.bind(scope);;
			return rst;
		}

		Utils.measureText = function (txt, font) {
			return RunDriver.measureText(txt, font);
		}

		Utils.updateOrder = function (array) {
			if (!array || array.length < 2) return false;
			var i = 1, j = 0, len = array.length, key = NaN, c;
			while (i < len) {
				j = i;
				c = array[j];
				key = array[j]._zOrder;
				while (--j > -1) {
					if (array[j]._zOrder > key) array[j + 1] = array[j];
					else break;
				}
				array[j + 1] = c;
				i++;
			};
			var model = c.parent.conchModel;
			if (model) {
				if (model.updateZOrder != null) {
					model.updateZOrder();
				} else {
					for (i = 0; i < len; i++) {
						model.removeChild(array[i].conchModel);
					}
					for (i = 0; i < len; i++) {
						model.addChildAt(array[i].conchModel, i);
					}
				}
			}
			return true;
		}

		Utils.transPointList = function (points, x, y) {
			var i = 0, len = points.length;
			for (i = 0; i < len; i += 2) {
				points[i] += x;
				points[i + 1] += y;
			}
		}

		Utils.parseInt = function (str, radix) {
			(radix === void 0) && (radix = 0);
			var result = Browser.window.parseInt(str, radix);
			if (isNaN(result)) return 0;
			return result;
		}

		Utils.getFileExtension = function (path) {
			Utils._extReg.lastIndex = path.lastIndexOf(".");
			var result = Utils._extReg.exec(path);
			if (result && result.length > 1) {
				return result[1].toLowerCase();
			}
			return null;
		}

		Utils.getTransformRelativeToWindow = function (coordinateSpace, x, y) {
			var stage = Laya.stage;
			var globalTransform = laya.utils.Utils.getGlobalPosAndScale(coordinateSpace);
			var canvasMatrix = stage._canvasTransform.clone();
			var canvasLeft = canvasMatrix.tx;
			var canvasTop = canvasMatrix.ty;
			canvasMatrix.rotate(-Math.PI / 180 * Laya.stage.canvasDegree);
			canvasMatrix.scale(Laya.stage.clientScaleX, Laya.stage.clientScaleY);
			var perpendicular = (Laya.stage.canvasDegree % 180 != 0);
			var tx = NaN, ty = NaN;
			if (perpendicular) {
				tx = y + globalTransform.y;
				ty = x + globalTransform.x;
				tx *= canvasMatrix.d;
				ty *= canvasMatrix.a;
				if (Laya.stage.canvasDegree == 90) {
					tx = canvasLeft - tx;
					ty += canvasTop;
				}
				else {
					tx += canvasLeft;
					ty = canvasTop - ty;
				}
			}
			else {
				tx = x + globalTransform.x;
				ty = y + globalTransform.y;
				tx *= canvasMatrix.a;
				ty *= canvasMatrix.d;
				tx += canvasLeft;
				ty += canvasTop;
			}
			ty += Laya.stage['_safariOffsetY'];
			var domScaleX = NaN, domScaleY = NaN;
			if (perpendicular) {
				domScaleX = canvasMatrix.d * globalTransform.height;
				domScaleY = canvasMatrix.a * globalTransform.width;
			} else {
				domScaleX = canvasMatrix.a * globalTransform.width;
				domScaleY = canvasMatrix.d * globalTransform.height;
			}
			return { x: tx, y: ty, scaleX: domScaleX, scaleY: domScaleY };
		}

		Utils.fitDOMElementInArea = function (dom, coordinateSpace, x, y, width, height) {
			if (!dom._fitLayaAirInitialized) {
				dom._fitLayaAirInitialized = true;
				dom.style.transformOrigin = dom.style.webKittransformOrigin = "left top";
				dom.style.position = "absolute"
			};
			var transform = Utils.getTransformRelativeToWindow(coordinateSpace, x, y);
			dom.style.transform = dom.style.webkitTransform = "scale(" + transform.scaleX + "," + transform.scaleY + ") rotate(" + (Laya.stage.canvasDegree) + "deg)";
			dom.style.width = width + 'px';
			dom.style.height = height + 'px';
			dom.style.left = transform.x + 'px';
			dom.style.top = transform.y + 'px';
		}

		Utils._gid = 1;
		Utils._pi = 180 / Math.PI;
		Utils._pi2 = Math.PI / 180;
		Utils._extReg = /\.(\w+)\??/g;
		Utils.parseXMLFromString = function (value) {
			var rst;
			value = value.replace(/>\s+</g, '><');
			/*__JS__ */rst = (new DOMParser()).parseFromString(value, 'text/xml');
			if (rst.firstChild.textContent.indexOf("This page contains the following errors") > -1) {
				throw new Error(rst.firstChild.firstChild.textContent);
			}
			return rst;
		}

		return Utils;
	})()


	/**
	*@private
	*/
	//class laya.utils.VectorGraphManager
	var VectorGraphManager = (function () {
		function VectorGraphManager() {
			this.useDic = {};
			this.shapeDic = {};
			this.shapeLineDic = {};
			this._id = 0;
			this._checkKey = false;
			this._freeIdArray = [];
			if (Render.isWebGL) {
				CacheManger.regCacheByFunction(Utils.bind(this.startDispose, this), Utils.bind(this.getCacheList, this));
			}
		}

		__class(VectorGraphManager, 'laya.utils.VectorGraphManager');
		var __proto = VectorGraphManager.prototype;
		/**
		*得到个空闲的ID
		*@return
		*/
		__proto.getId = function () {
			return this._id++;
		}

		/**
		*添加一个图形到列表中
		*@param id
		*@param shape
		*/
		__proto.addShape = function (id, shape) {
			this.shapeDic[id] = shape;
			if (!this.useDic[id]) {
				this.useDic[id] = true;
			}
		}

		/**
		*添加一个线图形到列表中
		*@param id
		*@param Line
		*/
		__proto.addLine = function (id, Line) {
			this.shapeLineDic[id] = Line;
			if (!this.shapeLineDic[id]) {
				this.shapeLineDic[id] = true;
			}
		}

		/**
		*检测一个对象是否在使用中
		*@param id
		*/
		__proto.getShape = function (id) {
			if (this._checkKey) {
				if (this.useDic[id] != null) {
					this.useDic[id] = true;
				}
			}
		}

		/**
		*删除一个图形对象
		*@param id
		*/
		__proto.deleteShape = function (id) {
			if (this.shapeDic[id]) {
				this.shapeDic[id] = null;
				delete this.shapeDic[id];
			}
			if (this.shapeLineDic[id]) {
				this.shapeLineDic[id] = null;
				delete this.shapeLineDic[id];
			}
			if (this.useDic[id] != null) {
				delete this.useDic[id];
			}
		}

		/**
		*得到缓存列表
		*@return
		*/
		__proto.getCacheList = function () {
			var str;
			var list = [];
			for (str in this.shapeDic) {
				list.push(this.shapeDic[str]);
			}
			for (str in this.shapeLineDic) {
				list.push(this.shapeLineDic[str]);
			}
			return list;
		}

		/**
		*开始清理状态，准备销毁
		*/
		__proto.startDispose = function (key) {
			var str;
			for (str in this.useDic) {
				this.useDic[str] = false;
			}
			this._checkKey = true;
		}

		/**
		*确认销毁
		*/
		__proto.endDispose = function () {
			if (this._checkKey) {
				var str;
				for (str in this.useDic) {
					if (!this.useDic[str]) {
						this.deleteShape(str);
					}
				}
				this._checkKey = false;
			}
		}

		VectorGraphManager.getInstance = function () {
			return VectorGraphManager.instance = VectorGraphManager.instance || new VectorGraphManager();
		}

		VectorGraphManager.instance = null
		return VectorGraphManager;
	})()


	/**
	*封装弱引用WeakMap
	*如果支持WeakMap，则使用WeakMap，如果不支持，则用Object代替
	*注意：如果采用Object，为了防止内存泄漏，则采用定时清理缓存策略
	*/
	//class laya.utils.WeakObject
	var WeakObject = (function () {
		function WeakObject() {
			this._obj = null;
			this._obj = WeakObject.supportWeakMap ? new Browser.window.WeakMap() : {};
			if (!WeakObject.supportWeakMap) WeakObject._maps.push(this);
		}

		__class(WeakObject, 'laya.utils.WeakObject');
		var __proto = WeakObject.prototype;
		/**
		*设置缓存
		*@param key kye对象，可被回收
		*@param value object对象，可被回收
		*/
		__proto.set = function (key, value) {
			if (key == null) return;
			if (WeakObject.supportWeakMap) {
				var objKey = key;
				if ((typeof key == 'string') || (typeof key == 'number')) {
					objKey = WeakObject._keys[key];
					if (!objKey) objKey = WeakObject._keys[key] = { k: key };
				}
				this._obj.set(objKey, value);
			} else {
				if ((typeof key == 'string') || (typeof key == 'number')) {
					this._obj[key] = value;
				} else {
					key.$_GID || (key.$_GID = Utils.getGID());
					this._obj[key.$_GID] = value;
				}
			}
		}

		/**
		*获取缓存
		*@param key kye对象，可被回收
		*/
		__proto.get = function (key) {
			if (key == null) return null;
			if (WeakObject.supportWeakMap) {
				var objKey = ((typeof key == 'string') || (typeof key == 'number')) ? WeakObject._keys[key] : key;
				if (!objKey) return null;
				return this._obj.get(objKey);
			} else {
				if ((typeof key == 'string') || (typeof key == 'number')) return this._obj[key];
				return this._obj[key.$_GID];
			}
		}

		/**
		*删除缓存
		*/
		__proto.del = function (key) {
			if (key == null) return;
			if (WeakObject.supportWeakMap) {
				var objKey = ((typeof key == 'string') || (typeof key == 'number')) ? WeakObject._keys[key] : key;
				if (!objKey) return;
				/*__JS__ */_obj.delete(objKey);
			} else {
				if ((typeof key == 'string') || (typeof key == 'number')) delete this._obj[key];
				else delete this._obj[this._obj.$_GID];
			}
		}

		/**
		*是否有缓存
		*/
		__proto.has = function (key) {
			if (key == null) return false;
			if (WeakObject.supportWeakMap) {
				var objKey = ((typeof key == 'string') || (typeof key == 'number')) ? WeakObject._keys[key] : key;
				return this._obj.has(objKey);
			} else {
				if ((typeof key == 'string') || (typeof key == 'number')) return this._obj[key] != null;
				return this._obj[this._obj.$_GID] != null;
			}
		}

		WeakObject.__init__ = function () {
			WeakObject.supportWeakMap = Browser.window.WeakMap != null;
			if (!WeakObject.supportWeakMap) Laya.timer.loop(WeakObject.delInterval, null, WeakObject.clearCache);
		}

		WeakObject.clearCache = function () {
			for (var i = 0, n = WeakObject._maps.length; i < n; i++) {
				var obj = WeakObject._maps[i];
				obj._obj = {};
			}
		}

		WeakObject.supportWeakMap = false;
		WeakObject.delInterval = 10 * 60 * 1000;
		WeakObject._keys = {};
		WeakObject._maps = [];
		__static(WeakObject,
			['I', function () { return this.I = new WeakObject(); }
			]);
		return WeakObject;
	})()


	/**
	*@private
	*/
	//class laya.utils.WordText
	var WordText = (function () {
		function WordText() {
			this.id = NaN;
			this.save = [];
			this.toUpperCase = null;
			this.changed = false;
			this._text = null;
		}

		__class(WordText, 'laya.utils.WordText');
		var __proto = WordText.prototype;
		__proto.setText = function (txt) {
			this.changed = true;
			this._text = txt;
		}

		__proto.toString = function () {
			return this._text;
		}

		__proto.charCodeAt = function (i) {
			return this._text ? this._text.charCodeAt(i) : NaN;
		}

		__proto.charAt = function (i) {
			return this._text ? this._text.charAt(i) : null;
		}

		__getset(0, __proto, 'length', function () {
			return this._text ? this._text.length : 0;
		});

		return WordText;
	})()


	/**
	*<code>Node</code> 类是可放在显示列表中的所有对象的基类。该显示列表管理 Laya 运行时中显示的所有对象。使用 Node 类排列显示列表中的显示对象。Node 对象可以有子显示对象。
	*/
	//class laya.display.Node extends laya.events.EventDispatcher
	var Node = (function (_super) {
		function Node() {
			this._bits = 0;
			this._displayedInStage = false;
			this._parent = null;
			this.conchModel = null;
			this.name = "";
			this.destroyed = false;
			Node.__super.call(this);
			this._childs = Node.ARRAY_EMPTY;
			this._$P = Node.PROP_EMPTY;
			this.timer = Laya.timer;
			this.conchModel = Render.isConchNode ? this.createConchModel() : null;
		}

		__class(Node, 'laya.display.Node', _super);
		var __proto = Node.prototype;
		/**@private */
		__proto._setBit = function (type, value) {
			if (type == 0x1) {
				var preValue = this._getBit(type);
				if (preValue != value) {
					this._updateDisplayedInstage();
				}
			}
			if (value) {
				this._bits |= type;
			} else {
				this._bits &= ~type;
			}
		}

		/**@private */
		__proto._getBit = function (type) {
			return (this._bits & type) != 0;
		}

		/**@private */
		__proto._setUpNoticeChain = function () {
			if (this._getBit(0x1)) {
				this._setUpNoticeType(0x1);
			}
		}

		/**@private */
		__proto._setUpNoticeType = function (type) {
			var ele = this;
			ele._setBit(type, true);
			ele = ele.parent;
			while (ele) {
				if (ele._getBit(type)) return;
				ele._setBit(type, true);
				ele = ele.parent;
			}
		}

		/**
		*<p>增加事件侦听器，以使侦听器能够接收事件通知。</p>
		*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
		*@param type 事件的类型。
		*@param caller 事件侦听函数的执行域。
		*@param listener 事件侦听函数。
		*@param args （可选）事件侦听函数的回调参数。
		*@return 此 EventDispatcher 对象。
		*/
		__proto.on = function (type, caller, listener, args) {
			if (type ===/*laya.events.Event.DISPLAY*/"display" || type ===/*laya.events.Event.UNDISPLAY*/"undisplay") {
				if (!this._getBit(0x1)) {
					this._setUpNoticeType(0x1);
				}
			}
			return this._createListener(type, caller, listener, args, false);
		}

		/**
		*<p>增加事件侦听器，以使侦听器能够接收事件通知，此侦听事件响应一次后则自动移除侦听。</p>
		*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
		*@param type 事件的类型。
		*@param caller 事件侦听函数的执行域。
		*@param listener 事件侦听函数。
		*@param args （可选）事件侦听函数的回调参数。
		*@return 此 EventDispatcher 对象。
		*/
		__proto.once = function (type, caller, listener, args) {
			if (type ===/*laya.events.Event.DISPLAY*/"display" || type ===/*laya.events.Event.UNDISPLAY*/"undisplay") {
				if (!this._getBit(0x1)) {
					this._setUpNoticeType(0x1);
				}
			}
			return this._createListener(type, caller, listener, args, true);
		}

		/**@private */
		__proto.createConchModel = function () {
			return null;
		}

		/**
		*<p>销毁此对象。destroy对象默认会把自己从父节点移除，并且清理自身引用关系，等待js自动垃圾回收机制回收。destroy后不能再使用。</p>
		*<p>destroy时会移除自身的事情监听，自身的timer监听，移除子对象及从父节点移除自己。</p>
		*@param destroyChild （可选）是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。
		*/
		__proto.destroy = function (destroyChild) {
			(destroyChild === void 0) && (destroyChild = true);
			this.destroyed = true;
			this._parent && this._parent.removeChild(this);
			if (this._childs) {
				if (destroyChild) this.destroyChildren();
				else this.removeChildren();
			}
			this._childs = null;
			this._$P = null;
			this.offAll();
			this.timer.clearAll(this);
		}

		/**
		*销毁所有子对象，不销毁自己本身。
		*/
		__proto.destroyChildren = function () {
			if (this._childs) {
				for (var i = this._childs.length - 1; i > -1; i--) {
					this._childs[i].destroy(true);
				}
			}
		}

		/**
		*添加子节点。
		*@param node 节点对象
		*@return 返回添加的节点
		*/
		__proto.addChild = function (node) {
			if (!node || this.destroyed || node === this) return node;
			if ((node).zOrder) this._set$P("hasZorder", true);
			if (node._parent === this) {
				var index = this.getChildIndex(node);
				if (index !== this._childs.length - 1) {
					this._childs.splice(index, 1);
					this._childs.push(node);
					if (this.conchModel) {
						this.conchModel.removeChild(node.conchModel);
						this.conchModel.addChildAt(node.conchModel, this._childs.length - 1);
					}
					this._childChanged();
				}
			} else {
				node.parent && node.parent.removeChild(node);
				this._childs === Node.ARRAY_EMPTY && (this._childs = []);
				this._childs.push(node);
				this.conchModel && this.conchModel.addChildAt(node.conchModel, this._childs.length - 1);
				node.parent = this;
				this._childChanged();
			}
			return node;
		}

		/**
		*批量增加子节点
		*@param ...args 无数子节点。
		*/
		__proto.addChildren = function (__args) {
			var args = arguments;
			var i = 0, n = args.length;
			while (i < n) {
				this.addChild(args[i++]);
			}
		}

		/**
		*添加子节点到指定的索引位置。
		*@param node 节点对象。
		*@param index 索引位置。
		*@return 返回添加的节点。
		*/
		__proto.addChildAt = function (node, index) {
			if (!node || this.destroyed || node === this) return node;
			if ((node).zOrder) this._set$P("hasZorder", true);
			if (index >= 0 && index <= this._childs.length) {
				if (node._parent === this) {
					var oldIndex = this.getChildIndex(node);
					this._childs.splice(oldIndex, 1);
					this._childs.splice(index, 0, node);
					if (this.conchModel) {
						this.conchModel.removeChild(node.conchModel);
						this.conchModel.addChildAt(node.conchModel, index);
					}
					this._childChanged();
				} else {
					node.parent && node.parent.removeChild(node);
					this._childs === Node.ARRAY_EMPTY && (this._childs = []);
					this._childs.splice(index, 0, node);
					this.conchModel && this.conchModel.addChildAt(node.conchModel, index);
					node.parent = this;
				}
				return node;
			} else {
				throw new Error("appendChildAt:The index is out of bounds");
			}
		}

		/**
		*根据子节点对象，获取子节点的索引位置。
		*@param node 子节点。
		*@return 子节点所在的索引位置。
		*/
		__proto.getChildIndex = function (node) {
			return this._childs.indexOf(node);
		}

		/**
		*根据子节点的名字，获取子节点对象。
		*@param name 子节点的名字。
		*@return 节点对象。
		*/
		__proto.getChildByName = function (name) {
			var nodes = this._childs;
			if (nodes) {
				for (var i = 0, n = nodes.length; i < n; i++) {
					var node = nodes[i];
					if (node.name === name) return node;
				}
			}
			return null;
		}

		/**@private */
		__proto._get$P = function (key) {
			return this._$P[key];
		}

		/**@private */
		__proto._set$P = function (key, value) {
			if (!this.destroyed) {
				this._$P === Node.PROP_EMPTY && (this._$P = {});
				this._$P[key] = value;
			}
			return value;
		}

		/**
		*根据子节点的索引位置，获取子节点对象。
		*@param index 索引位置
		*@return 子节点
		*/
		__proto.getChildAt = function (index) {
			return this._childs[index];
		}

		/**
		*设置子节点的索引位置。
		*@param node 子节点。
		*@param index 新的索引。
		*@return 返回子节点本身。
		*/
		__proto.setChildIndex = function (node, index) {
			var childs = this._childs;
			if (index < 0 || index >= childs.length) {
				throw new Error("setChildIndex:The index is out of bounds.");
			};
			var oldIndex = this.getChildIndex(node);
			if (oldIndex < 0) throw new Error("setChildIndex:node is must child of this object.");
			childs.splice(oldIndex, 1);
			childs.splice(index, 0, node);
			if (this.conchModel) {
				this.conchModel.removeChild(node.conchModel);
				this.conchModel.addChildAt(node.conchModel, index);
			}
			this._childChanged();
			return node;
		}

		/**
		*@private
		*子节点发生改变。
		*@param child 子节点。
		*/
		__proto._childChanged = function (child) { }
		/**
		*删除子节点。
		*@param node 子节点
		*@return 被删除的节点
		*/
		__proto.removeChild = function (node) {
			if (!this._childs) return node;
			var index = this._childs.indexOf(node);
			return this.removeChildAt(index);
		}

		/**
		*从父容器删除自己，如已经被删除不会抛出异常。
		*@return 当前节点（ Node ）对象。
		*/
		__proto.removeSelf = function () {
			this._parent && this._parent.removeChild(this);
			return this;
		}

		/**
		*根据子节点名字删除对应的子节点对象，如果找不到不会抛出异常。
		*@param name 对象名字。
		*@return 查找到的节点（ Node ）对象。
		*/
		__proto.removeChildByName = function (name) {
			var node = this.getChildByName(name);
			node && this.removeChild(node);
			return node;
		}

		/**
		*根据子节点索引位置，删除对应的子节点对象。
		*@param index 节点索引位置。
		*@return 被删除的节点。
		*/
		__proto.removeChildAt = function (index) {
			var node = this.getChildAt(index);
			if (node) {
				this._childs.splice(index, 1);
				this.conchModel && this.conchModel.removeChild(node.conchModel);
				node.parent = null;
			}
			return node;
		}

		/**
		*删除指定索引区间的所有子对象。
		*@param beginIndex 开始索引。
		*@param endIndex 结束索引。
		*@return 当前节点对象。
		*/
		__proto.removeChildren = function (beginIndex, endIndex) {
			(beginIndex === void 0) && (beginIndex = 0);
			(endIndex === void 0) && (endIndex = 0x7fffffff);
			if (this._childs && this._childs.length > 0) {
				var childs = this._childs;
				if (beginIndex === 0 && endIndex >= n) {
					var arr = childs;
					this._childs = Node.ARRAY_EMPTY;
				} else {
					arr = childs.splice(beginIndex, endIndex - beginIndex);
				}
				for (var i = 0, n = arr.length; i < n; i++) {
					arr[i].parent = null;
					this.conchModel && this.conchModel.removeChild(arr[i].conchModel);
				}
			}
			return this;
		}

		/**
		*替换子节点。
		*@internal 将传入的新节点对象替换到已有子节点索引位置处。
		*@param newNode 新节点。
		*@param oldNode 老节点。
		*@return 返回新节点。
		*/
		__proto.replaceChild = function (newNode, oldNode) {
			var index = this._childs.indexOf(oldNode);
			if (index > -1) {
				this._childs.splice(index, 1, newNode);
				if (this.conchModel) {
					this.conchModel.removeChild(oldNode.conchModel);
					this.conchModel.addChildAt(newNode.conchModel, index);
				}
				oldNode.parent = null;
				newNode.parent = this;
				return newNode;
			}
			return null;
		}

		/**@private */
		__proto._updateDisplayedInstage = function () {
			var ele;
			ele = this;
			var stage = Laya.stage;
			this._displayedInStage = false;
			while (ele) {
				if (ele._getBit(0x1)) {
					this._displayedInStage = ele._displayedInStage;
					break;
				}
				if (ele == stage || ele._displayedInStage) {
					this._displayedInStage = true;
					break;
				}
				ele = ele.parent;
			}
		}

		/**@private */
		__proto._setDisplay = function (value) {
			if (this._displayedInStage !== value) {
				this._displayedInStage = value;
				if (value) this.event(/*laya.events.Event.DISPLAY*/"display");
				else this.event(/*laya.events.Event.UNDISPLAY*/"undisplay");
			}
		}

		/**
		*@private
		*设置指定节点对象是否可见(是否在渲染列表中)。
		*@param node 节点。
		*@param display 是否可见。
		*/
		__proto._displayChild = function (node, display) {
			var childs = node._childs;
			if (childs) {
				for (var i = 0, n = childs.length; i < n; i++) {
					var child = childs[i];
					if (!child._getBit(0x1)) continue;
					if (child._childs.length > 0) {
						this._displayChild(child, display);
					} else {
						child._setDisplay(display);
					}
				}
			}
			node._setDisplay(display);
		}

		/**
		*当前容器是否包含指定的 <code>Node</code> 节点对象 。
		*@param node 指定的 <code>Node</code> 节点对象 。
		*@return 一个布尔值表示是否包含指定的 <code>Node</code> 节点对象 。
		*/
		__proto.contains = function (node) {
			if (node === this) return true;
			while (node) {
				if (node.parent === this) return true;
				node = node.parent;
			}
			return false;
		}

		/**
		*定时重复执行某函数。功能同Laya.timer.timerLoop()。
		*@param delay 间隔时间(单位毫秒)。
		*@param caller 执行域(this)。
		*@param method 结束时的回调方法。
		*@param args （可选）回调参数。
		*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true。
		*@param jumpFrame 时钟是否跳帧。基于时间的循环回调，单位时间间隔内，如能执行多次回调，出于性能考虑，引擎默认只执行一次，设置jumpFrame=true后，则回调会连续执行多次
		*/
		__proto.timerLoop = function (delay, caller, method, args, coverBefore, jumpFrame) {
			(coverBefore === void 0) && (coverBefore = true);
			(jumpFrame === void 0) && (jumpFrame = false);
			this.timer.loop(delay, caller, method, args, coverBefore, jumpFrame);
		}

		/**
		*定时执行某函数一次。功能同Laya.timer.timerOnce()。
		*@param delay 延迟时间(单位毫秒)。
		*@param caller 执行域(this)。
		*@param method 结束时的回调方法。
		*@param args （可选）回调参数。
		*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true。
		*/
		__proto.timerOnce = function (delay, caller, method, args, coverBefore) {
			(coverBefore === void 0) && (coverBefore = true);
			this.timer._create(false, false, delay, caller, method, args, coverBefore);
		}

		/**
		*定时重复执行某函数(基于帧率)。功能同Laya.timer.frameLoop()。
		*@param delay 间隔几帧(单位为帧)。
		*@param caller 执行域(this)。
		*@param method 结束时的回调方法。
		*@param args （可选）回调参数。
		*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true。
		*/
		__proto.frameLoop = function (delay, caller, method, args, coverBefore) {
			(coverBefore === void 0) && (coverBefore = true);
			this.timer._create(true, true, delay, caller, method, args, coverBefore);
		}

		/**
		*定时执行一次某函数(基于帧率)。功能同Laya.timer.frameOnce()。
		*@param delay 延迟几帧(单位为帧)。
		*@param caller 执行域(this)
		*@param method 结束时的回调方法
		*@param args （可选）回调参数
		*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true
		*/
		__proto.frameOnce = function (delay, caller, method, args, coverBefore) {
			(coverBefore === void 0) && (coverBefore = true);
			this.timer._create(true, false, delay, caller, method, args, coverBefore);
		}

		/**
		*清理定时器。功能同Laya.timer.clearTimer()。
		*@param caller 执行域(this)。
		*@param method 结束时的回调方法。
		*/
		__proto.clearTimer = function (caller, method) {
			this.timer.clear(caller, method);
		}

		/**
		*子对象数量。
		*/
		__getset(0, __proto, 'numChildren', function () {
			return this._childs.length;
		});

		/**父节点。*/
		__getset(0, __proto, 'parent', function () {
			return this._parent;
		}, function (value) {
			if (this._parent !== value) {
				if (value) {
					this._parent = value;
					this.event(/*laya.events.Event.ADDED*/"added");
					if (this._getBit(0x1)) {
						this._setUpNoticeChain();
						value.displayedInStage && this._displayChild(this, true);
					}
					value._childChanged(this);
				} else {
					this.event(/*laya.events.Event.REMOVED*/"removed");
					this._parent._childChanged();
					if (this._getBit(0x1)) this._displayChild(this, false);
					this._parent = value;
				}
			}
		});

		/**表示是否在显示列表中显示。*/
		__getset(0, __proto, 'displayedInStage', function () {
			if (this._getBit(0x1)) return this._displayedInStage;
			this._setUpNoticeType(0x1);
			return this._displayedInStage;
		});

		Node.ARRAY_EMPTY = [];
		Node.PROP_EMPTY = {};
		Node.NOTICE_DISPLAY = 0x1;
		Node.MOUSEENABLE = 0x2;
		return Node;
	})(EventDispatcher)


	/**
	*@private
	*<code>CSSStyle</code> 类是元素CSS样式定义类。
	*/
	//class laya.display.css.CSSStyle extends laya.display.css.Style
	var CSSStyle = (function (_super) {
		function CSSStyle(ower) {
			this._bgground = null;
			this._border = null;
			//this._ower=null;
			this._rect = null;
			this.underLine = 0;
			this.lineHeight = 0;
			CSSStyle.__super.call(this);
			this._padding = CSSStyle._PADDING;
			this._spacing = CSSStyle._SPACING;
			this._aligns = CSSStyle._ALIGNS;
			this._font = Font.EMPTY;
			this._ower = ower;
		}

		__class(CSSStyle, 'laya.display.css.CSSStyle', _super);
		var __proto = CSSStyle.prototype;
		/**@inheritDoc */
		__proto.destroy = function () {
			this._ower = null;
			this._font = null;
			this._rect = null;
		}

		/**
		*复制传入的 CSSStyle 属性值。
		*@param src 待复制的 CSSStyle 对象。
		*/
		__proto.inherit = function (src) {
			this._font = src._font;
			this._spacing = src._spacing === CSSStyle._SPACING ? CSSStyle._SPACING : src._spacing.slice();
			this.lineHeight = src.lineHeight;
		}

		/**@private */
		__proto._widthAuto = function () {
			return (this._type & 0x40000) !== 0;
		}

		/**@inheritDoc */
		__proto.widthed = function (sprite) {
			return (this._type & 0x8) != 0;
		}

		/**
		*@private
		*/
		__proto._calculation = function (type, value) {
			if (value.indexOf('%') < 0) return false;
			var ower = this._ower;
			var parent = ower.parent;
			var rect = this._rect;
			function getValue(pw, w, nums) {
				return (pw * nums[0] + w * nums[1] + nums[2]);
			}
			function onParentResize(type) {
				var pw = parent.width, w = ower.width;
				rect.width && (ower.width = getValue(pw, w, rect.width));
				rect.height && (ower.height = getValue(pw, w, rect.height));
				rect.left && (ower.x = getValue(pw, w, rect.left));
				rect.top && (ower.y = getValue(pw, w, rect.top));
			}
			if (rect === null) {
				parent._getCSSStyle()._type |= 0x80000;
				parent.on(/*laya.events.Event.RESIZE*/"resize", this, onParentResize);
				this._rect = rect = { input: {} };
			};
			var nums = value.split(' ');
			nums[0] = parseFloat(nums[0]) / 100;
			if (nums.length == 1)
				nums[1] = nums[2] = 0;
			else {
				nums[1] = parseFloat(nums[1]) / 100;
				nums[2] = parseFloat(nums[2]);
			}
			rect[type] = nums;
			rect.input[type] = value;
			onParentResize(type);
			return true;
		}

		/**
		*是否已设置高度。
		*@param sprite 显示对象 Sprite。
		*@return 一个Boolean 表示是否已设置高度。
		*/
		__proto.heighted = function (sprite) {
			return (this._type & 0x2000) != 0;
		}

		/**
		*设置宽高。
		*@param w 宽度。
		*@param h 高度。
		*/
		__proto.size = function (w, h) {
			var ower = this._ower;
			var resize = false;
			if (w !== -1 && w != this._ower.width) {
				this._type |= 0x8;
				this._ower.width = w;
				resize = true;
			}
			if (h !== -1 && h != this._ower.height) {
				this._type |= 0x2000;
				this._ower.height = h;
				resize = true;
			}
			if (resize) {
				ower._layoutLater();
				(this._type & 0x80000) && ower.event(/*laya.events.Event.RESIZE*/"resize", this);
			}
		}

		/**@private */
		__proto._getAlign = function () {
			return this._aligns[0];
		}

		/**@private */
		__proto._getValign = function () {
			return this._aligns[1];
		}

		/**@private */
		__proto._getCssFloat = function () {
			return (this._type & 0x8000) != 0 ? 0x8000 : 0;
		}

		__proto._createFont = function () {
			return (this._type & 0x1000) ? this._font : (this._type |= 0x1000, this._font = new Font(this._font));
		}

		/**@inheritDoc */
		__proto.render = function (sprite, context, x, y) {
			var w = sprite.width;
			var h = sprite.height;
			x -= sprite.pivotX;
			y -= sprite.pivotY;
			this._bgground && this._bgground.color != null && context.ctx.fillRect(x, y, w, h, this._bgground.color);
			this._border && this._border.color && context.drawRect(x, y, w, h, this._border.color.strColor, this._border.size);
		}

		/**@inheritDoc */
		__proto.getCSSStyle = function () {
			return this;
		}

		/**
		*设置 CSS 样式字符串。
		*@param text CSS样式字符串。
		*/
		__proto.cssText = function (text) {
			this.attrs(CSSStyle.parseOneCSS(text, ';'));
		}

		/**
		*根据传入的属性名、属性值列表，设置此对象的属性值。
		*@param attrs 属性名与属性值列表。
		*/
		__proto.attrs = function (attrs) {
			if (attrs) {
				for (var i = 0, n = attrs.length; i < n; i++) {
					var attr = attrs[i];
					this[attr[0]] = attr[1];
				}
			}
		}

		/**@inheritDoc */
		__proto.setTransform = function (value) {
			(value === 'none') ? (this._tf = Style._TF_EMPTY) : this.attrs(CSSStyle.parseOneCSS(value, ','));
		}

		/**
		*定义 X 轴、Y 轴移动转换。
		*@param x X 轴平移量。
		*@param y Y 轴平移量。
		*/
		__proto.translate = function (x, y) {
			this._tf === Style._TF_EMPTY && (this._tf = new TransformInfo());
			this._tf.translateX = x;
			this._tf.translateY = y;
		}

		/**
		*定义 缩放转换。
		*@param x X 轴缩放值。
		*@param y Y 轴缩放值。
		*/
		__proto.scale = function (x, y) {
			this._tf === Style._TF_EMPTY && (this._tf = new TransformInfo());
			this._tf.scaleX = x;
			this._tf.scaleY = y;
		}

		/**@private */
		__proto._enableLayout = function () {
			return (this._type & 0x2) === 0 && (this._type & 0x4) === 0;
		}

		/**
		*是否显示为块级元素。
		*/
		__getset(0, __proto, 'block', _super.prototype._$get_block, function (value) {
			value ? (this._type |= 0x1) : (this._type &= (~0x1));
		});

		/**
		*垂直对齐方式。
		*/
		__getset(0, __proto, 'valign', function () {
			return CSSStyle._valigndef[this._aligns[1]];
		}, function (value) {
			this._aligns === CSSStyle._ALIGNS && (this._aligns = [0, 0, 0]);
			this._aligns[1] = CSSStyle._valigndef[value];
		});

		/**
		*高度。
		*/
		__getset(0, __proto, 'height', null, function (h) {
			this._type |= 0x2000;
			if ((typeof h == 'string')) {
				if (this._calculation("height", h)) return;
				h = parseInt(h);
			}
			this.size(-1, h);
		});

		/**
		*宽度。
		*/
		__getset(0, __proto, 'width', null, function (w) {
			this._type |= 0x8;
			if ((typeof w == 'string')) {
				var offset = w.indexOf('auto');
				if (offset >= 0) {
					this._type |= 0x40000;
					w = w.substr(0, offset);
				}
				if (this._calculation("width", w)) return;
				w = parseInt(w);
			}
			this.size(w, -1);
		});

		/**
		*字体粗细。
		*/
		__getset(0, __proto, 'fontWeight', function () {
			return this._font.weight;
		}, function (value) {
			this._createFont().weight = value;
		});

		/**
		*表示左边距。
		*/
		__getset(0, __proto, 'left', null, function (value) {
			var ower = this._ower;
			if (((typeof value == 'string'))) {
				if (value === "center")
					value = "50% -50% 0";
				else if (value === "right")
					value = "100% -100% 0";
				if (this._calculation("left", value)) return;
				value = parseInt(value);
			}
			ower.x = value;
		});

		__getset(0, __proto, '_translate', null, function (value) {
			this.translate(value[0], value[1]);
		});

		/**@inheritDoc */
		__getset(0, __proto, 'absolute', function () {
			return (this._type & 0x4) !== 0;
		});

		/**
		*表示上边距。
		*/
		__getset(0, __proto, 'top', null, function (value) {
			var ower = this._ower;
			if (((typeof value == 'string'))) {
				if (value === "middle")
					value = "50% -50% 0";
				else if (value === "bottom")
					value = "100% -100% 0";
				if (this._calculation("top", value)) return;
				value = parseInt(value);
			}
			ower.y = value;
		});

		/**
		*水平对齐方式。
		*/
		__getset(0, __proto, 'align', function () {
			return CSSStyle._aligndef[this._aligns[0]];
		}, function (value) {
			this._aligns === CSSStyle._ALIGNS && (this._aligns = [0, 0, 0]);
			this._aligns[0] = CSSStyle._aligndef[value];
		});

		/**
		*表示是否加粗。
		*/
		__getset(0, __proto, 'bold', function () {
			return this._font.bold;
		}, function (value) {
			this._createFont().bold = value;
		});

		/**
		*边距信息。
		*/
		__getset(0, __proto, 'padding', function () {
			return this._padding;
		}, function (value) {
			this._padding = value;
		});

		/**
		*行间距。
		*/
		__getset(0, __proto, 'leading', function () {
			return this._spacing[1];
		}, function (d) {
			((typeof d == 'string')) && (d = parseInt(d + ""));
			this._spacing === CSSStyle._SPACING && (this._spacing = [0, 0]);
			this._spacing[1] = d;
		});

		/**
		*是否是行元素。
		*/
		__getset(0, __proto, 'lineElement', function () {
			return (this._type & 0x10000) != 0;
		}, function (value) {
			value ? (this._type |= 0x10000) : (this._type &= (~0x10000));
		});

		/**
		*浮动方向。
		*/
		__getset(0, __proto, 'cssFloat', function () {
			return (this._type & 0x8000) != 0 ? "right" : "left";
		}, function (value) {
			this.lineElement = false;
			value === "right" ? (this._type |= 0x8000) : (this._type &= (~0x8000));
		});

		/**
		*添加到文本的修饰。
		*/
		__getset(0, __proto, 'textDecoration', function () {
			return this._font.decoration;
		}, function (value) {
			this._createFont().decoration = value;
		});

		/**
		*设置如何处理元素内的空白。
		*/
		__getset(0, __proto, 'whiteSpace', function () {
			return (this._type & 0x20000) ? "nowrap" : "";
		}, function (type) {
			type === "nowrap" && (this._type |= 0x20000);
			type === "none" && (this._type &= ~0x20000);
		});

		__getset(0, __proto, 'background', null, function (value) {
			if (!value) {
				this._bgground = null;
				return;
			}
			this._bgground || (this._bgground = {});
			this._bgground.color = value;
			this._ower.conchModel && this._ower.conchModel.bgColor(value);
			this._type |= 0x4000;
			this._ower._renderType |=/*laya.renders.RenderSprite.STYLE*/0x100;
		});

		/**
		*表示是否换行。
		*/
		__getset(0, __proto, 'wordWrap', function () {
			return (this._type & 0x20000) === 0;
		}, function (value) {
			value ? (this._type &= ~0x20000) : (this._type |= 0x20000);
		});

		/**
		*字体颜色。
		*/
		__getset(0, __proto, 'color', function () {
			return this._font.color;
		}, function (value) {
			this._createFont().color = value;
		});

		/**
		*<p>指定文本字段是否是密码文本字段。</p>
		*如果此属性的值为 true，则文本字段被视为密码文本字段，并使用星号而不是实际字符来隐藏输入的字符。如果为 false，则不会将文本字段视为密码文本字段。
		*/
		__getset(0, __proto, 'password', function () {
			return this._font.password;
		}, function (value) {
			this._createFont().password = value;
		});

		/**
		*背景颜色。
		*/
		__getset(0, __proto, 'backgroundColor', function () {
			return this._bgground ? this._bgground.color : null;
		}, function (value) {
			if (value === 'none') this._bgground = null;
			else (this._bgground || (this._bgground = {}), this._bgground.color = value);
			this._ower.conchModel && this._ower.conchModel.bgColor(value);
			this._ower._renderType |=/*laya.renders.RenderSprite.STYLE*/0x100;
		});

		/**
		*字体信息。
		*/
		__getset(0, __proto, 'font', function () {
			return this._font.toString();
		}, function (value) {
			this._createFont().set(value);
		});

		/**
		*文本的粗细。
		*/
		__getset(0, __proto, 'weight', null, function (value) {
			this._createFont().weight = value;
		});

		/**
		*间距。
		*/
		__getset(0, __proto, 'letterSpacing', function () {
			return this._spacing[0];
		}, function (d) {
			((typeof d == 'string')) && (d = parseInt(d + ""));
			this._spacing === CSSStyle._SPACING && (this._spacing = [0, 0]);
			this._spacing[0] = d;
		});

		/**
		*字体大小。
		*/
		__getset(0, __proto, 'fontSize', function () {
			return this._font.size;
		}, function (value) {
			this._createFont().size = value;
		});

		/**
		*表示是否为斜体。
		*/
		__getset(0, __proto, 'italic', function () {
			return this._font.italic;
		}, function (value) {
			this._createFont().italic = value;
		});

		/**
		*字体系列。
		*/
		__getset(0, __proto, 'fontFamily', function () {
			return this._font.family;
		}, function (value) {
			this._createFont().family = value;
		});

		/**
		*<p>描边宽度（以像素为单位）。</p>
		*默认值0，表示不描边。
		*@default 0
		*/
		__getset(0, __proto, 'stroke', function () {
			return this._font.stroke[0];
		}, function (value) {
			if (this._createFont().stroke === Font._STROKE) this._font.stroke = [0, "#000000"];
			this._font.stroke[0] = value;
		});

		/**
		*<p>描边颜色，以字符串表示。</p>
		*@default "#000000";
		*/
		__getset(0, __proto, 'strokeColor', function () {
			return this._font.stroke[1];
		}, function (value) {
			if (this._createFont().stroke === Font._STROKE) this._font.stroke = [0, "#000000"];
			this._font.stroke[1] = value;
		});

		/**
		*边框属性，比如border="5px solid red"
		*/
		__getset(0, __proto, 'border', function () {
			return this._border ? this._border.value : "";
		}, function (value) {
			if (value == 'none') {
				this._border = null;
				return;
			}
			this._border || (this._border = {});
			this._border.value = value;
			var values = value.split(' ');
			this._border.color = Color.create(values[values.length - 1]);
			if (values.length == 1) {
				this._border.size = 1;
				this._border.type = 'solid';
				return;
			};
			var i = 0;
			if (values[0].indexOf('px') > 0) {
				this._border.size = parseInt(values[0]);
				i++;
			} else this._border.size = 1;
			this._border.type = values[i];
			this._ower._renderType |=/*laya.renders.RenderSprite.STYLE*/0x100;
		});

		/**
		*边框的颜色。
		*/
		__getset(0, __proto, 'borderColor', function () {
			return (this._border && this._border.color) ? this._border.color.strColor : null;
		}, function (value) {
			if (!value) {
				this._border = null;
				return;
			}
			this._border || (this._border = { size: 1, type: 'solid' });
			this._border.color = (value == null) ? null : Color.create(value);
			this._ower.conchModel && this._ower.conchModel.border(this._border.color.strColor);
			this._ower._renderType |=/*laya.renders.RenderSprite.STYLE*/0x100;
		});

		/**
		*元素的定位类型。
		*/
		__getset(0, __proto, 'position', function () {
			return (this._type & 0x4) ? "absolute" : "";
		}, function (value) {
			value == "absolute" ? (this._type |= 0x4) : (this._type &= ~0x4);
		});

		/**
		*规定元素应该生成的框的类型。
		*/
		__getset(0, __proto, 'display', null, function (value) {
			switch (value) {
				case '':
					this._type &= ~0x2;
					this.visible = true;
					break;
				case 'none':
					this._type |= 0x2;
					this.visible = false;
					this._ower._layoutLater();
					break;
			}
		});

		/**@inheritDoc */
		__getset(0, __proto, 'paddingLeft', function () {
			return this.padding[3];
		});

		/**@inheritDoc */
		__getset(0, __proto, 'paddingTop', function () {
			return this.padding[0];
		});

		__getset(0, __proto, '_scale', null, function (value) {
			this._ower.scale(value[0], value[1]);
		});

		__getset(0, __proto, '_rotate', null, function (value) {
			this._ower.rotation = value;
		});

		CSSStyle.parseOneCSS = function (text, clipWord) {
			var out = [];
			var attrs = text.split(clipWord);
			var valueArray;
			for (var i = 0, n = attrs.length; i < n; i++) {
				var attr = attrs[i];
				var ofs = attr.indexOf(':');
				var name = attr.substr(0, ofs).replace(/^\s+|\s+$/g, '');
				if (name.length == 0)
					continue;
				var value = attr.substr(ofs + 1).replace(/^\s+|\s+$/g, '');
				var one = [name, value];
				switch (name) {
					case 'italic':
					case 'bold':
						one[1] = value == "true";
						break;
					case 'line-height':
						one[0] = 'lineHeight';
						one[1] = parseInt(value);
						break;
					case 'font-size':
						one[0] = 'fontSize';
						one[1] = parseInt(value);
						break;
					case 'padding':
						valueArray = value.split(' ');
						valueArray.length > 1 || (valueArray[1] = valueArray[2] = valueArray[3] = valueArray[0]);
						one[1] = [parseInt(valueArray[0]), parseInt(valueArray[1]), parseInt(valueArray[2]), parseInt(valueArray[3])];
						break;
					case 'rotate':
						one[0] = "_rotate";
						one[1] = parseFloat(value);
						break;
					case 'scale':
						valueArray = value.split(' ');
						one[0] = "_scale";
						one[1] = [parseFloat(valueArray[0]), parseFloat(valueArray[1])];
						break;
					case 'translate':
						valueArray = value.split(' ');
						one[0] = "_translate";
						one[1] = [parseInt(valueArray[0]), parseInt(valueArray[1])];
						break;
					default:
						(one[0] = CSSStyle._CSSTOVALUE[name]) || (one[0] = name);
				}
				out.push(one);
			}
			return out;
		}

		CSSStyle.parseCSS = function (text, uri) {
			var one;
			while ((one = CSSStyle._parseCSSRegExp.exec(text)) != null) {
				CSSStyle.styleSheets[one[1]] = CSSStyle.parseOneCSS(one[2], ';');
			}
		}

		CSSStyle.EMPTY = new CSSStyle(null);
		CSSStyle._CSSTOVALUE = { 'letter-spacing': 'letterSpacing', 'line-spacing': 'lineSpacing', 'white-space': 'whiteSpace', 'line-height': 'lineHeight', 'scale-x': 'scaleX', 'scale-y': 'scaleY', 'translate-x': 'translateX', 'translate-y': 'translateY', 'font-family': 'fontFamily', 'font-weight': 'fontWeight', 'vertical-align': 'valign', 'text-decoration': 'textDecoration', 'background-color': 'backgroundColor', 'border-color': 'borderColor', 'float': 'cssFloat' };
		CSSStyle._parseCSSRegExp = new RegExp("([\.\#]\\w+)\\s*{([\\s\\S]*?)}", "g");
		CSSStyle._aligndef = { 'left': 0, 'center': 1, 'right': 2, 0: 'left', 1: 'center', 2: 'right' };
		CSSStyle._valigndef = { 'top': 0, 'middle': 1, 'bottom': 2, 0: 'top', 1: 'middle', 2: 'bottom' };
		CSSStyle.styleSheets = {};
		CSSStyle.ALIGN_CENTER = 1;
		CSSStyle.ALIGN_RIGHT = 2;
		CSSStyle.VALIGN_MIDDLE = 1;
		CSSStyle.VALIGN_BOTTOM = 2;
		CSSStyle._CSS_BLOCK = 0x1;
		CSSStyle._DISPLAY_NONE = 0x2;
		CSSStyle._ABSOLUTE = 0x4;
		CSSStyle._WIDTH_SET = 0x8;
		CSSStyle._PADDING = [0, 0, 0, 0];
		CSSStyle._RECT = [-1, -1, -1, -1];
		CSSStyle._SPACING = [0, 0];
		CSSStyle._ALIGNS = [0, 0, 0];
		CSSStyle.ADDLAYOUTED = 0x200;
		CSSStyle._NEWFONT = 0x1000;
		CSSStyle._HEIGHT_SET = 0x2000;
		CSSStyle._BACKGROUND_SET = 0x4000;
		CSSStyle._FLOAT_RIGHT = 0x8000;
		CSSStyle._LINE_ELEMENT = 0x10000;
		CSSStyle._NOWARP = 0x20000;
		CSSStyle._WIDTHAUTO = 0x40000;
		CSSStyle._LISTERRESZIE = 0x80000;
		return CSSStyle;
	})(Style)


	/**
	*@private
	*使用Audio标签播放声音
	*/
	//class laya.media.h5audio.AudioSound extends laya.events.EventDispatcher
	var AudioSound = (function (_super) {
		function AudioSound() {
			this.url = null;
			this.audio = null;
			this.loaded = false;
			AudioSound.__super.call(this);
		}

		__class(AudioSound, 'laya.media.h5audio.AudioSound', _super);
		var __proto = AudioSound.prototype;
		/**
		*释放声音
		*
		*/
		__proto.dispose = function () {
			var ad = AudioSound._audioCache[this.url];
			if (ad) {
				ad.src = "";
				delete AudioSound._audioCache[this.url];
			}
		}

		/**
		*加载声音
		*@param url
		*
		*/
		__proto.load = function (url) {
			url = URL.formatURL(url);
			this.url = url;
			var ad;
			if (url == SoundManager._tMusic) {
				AudioSound._initMusicAudio();
				ad = AudioSound._musicAudio;
				if (ad.src != url) {
					AudioSound._audioCache[ad.src] = null;
					ad = null;
				}
			} else {
				ad = AudioSound._audioCache[url];
			}
			if (ad && ad.readyState >= 2) {
				this.event(/*laya.events.Event.COMPLETE*/"complete");
				return;
			}
			if (!ad) {
				if (url == SoundManager._tMusic) {
					AudioSound._initMusicAudio();
					ad = AudioSound._musicAudio;
				} else {
					ad = Browser.createElement("audio");
				}
				AudioSound._audioCache[url] = ad;
				ad.src = url;
			}
			ad.addEventListener("canplaythrough", onLoaded);
			ad.addEventListener("error", onErr);
			var me = this;
			function onLoaded() {
				offs();
				me.loaded = true;
				me.event(/*laya.events.Event.COMPLETE*/"complete");
			}
			function onErr() {
				ad.load = null;
				offs();
				me.event(/*laya.events.Event.ERROR*/"error");
			}
			function offs() {
				ad.removeEventListener("canplaythrough", onLoaded);
				ad.removeEventListener("error", onErr);
			}
			this.audio = ad;
			if (ad.load) {
				ad.load();
			} else {
				onErr();
			}
		}

		/**
		*播放声音
		*@param startTime 起始时间
		*@param loops 循环次数
		*@return
		*
		*/
		__proto.play = function (startTime, loops) {
			(startTime === void 0) && (startTime = 0);
			(loops === void 0) && (loops = 0);
			if (!this.url) return null;
			var ad;
			if (this.url == SoundManager._tMusic) {
				ad = AudioSound._musicAudio;
			} else {
				ad = AudioSound._audioCache[this.url];
			}
			if (!ad) return null;
			var tAd;
			tAd = Pool.getItem("audio:" + this.url);
			if (Render.isConchApp) {
				if (!tAd) {
					tAd = Browser.createElement("audio");
					tAd.src = this.url;
				}
			}
			else {
				if (this.url == SoundManager._tMusic) {
					AudioSound._initMusicAudio();
					tAd = AudioSound._musicAudio;
					tAd.src = this.url;
				} else {
					tAd = tAd ? tAd : ad.cloneNode(true);
				}
			};
			var channel = new AudioSoundChannel(tAd);
			channel.url = this.url;
			channel.loops = loops;
			channel.startTime = startTime;
			channel.play();
			SoundManager.addChannel(channel);
			return channel;
		}

		/**
		*获取总时间。
		*/
		__getset(0, __proto, 'duration', function () {
			var ad;
			ad = AudioSound._audioCache[this.url];
			if (!ad)
				return 0;
			return ad.duration;
		});

		AudioSound._initMusicAudio = function () {
			if (AudioSound._musicAudio) return;
			if (!AudioSound._musicAudio) AudioSound._musicAudio = Browser.createElement("audio");
			if (!Render.isConchApp) {
				Browser.document.addEventListener("touchstart", AudioSound._makeMusicOK);
			}
		}

		AudioSound._makeMusicOK = function () {
			Browser.document.removeEventListener("touchstart", AudioSound._makeMusicOK);
			if (!AudioSound._musicAudio.src) {
				AudioSound._musicAudio.src = "";
				AudioSound._musicAudio.load();
			} else {
				AudioSound._musicAudio.play();
			}
		}

		AudioSound._audioCache = {};
		AudioSound._musicAudio = null
		return AudioSound;
	})(EventDispatcher)


	/**
	*<p> <code>SoundChannel</code> 用来控制程序中的声音。每个声音均分配给一个声道，而且应用程序可以具有混合在一起的多个声道。</p>
	*<p> <code>SoundChannel</code> 类包含控制声音的播放、暂停、停止、音量的方法，以及获取声音的播放状态、总时间、当前播放时间、总循环次数、播放地址等信息的方法。</p>
	*/
	//class laya.media.SoundChannel extends laya.events.EventDispatcher
	var SoundChannel = (function (_super) {
		function SoundChannel() {
			this.url = null;
			this.loops = 0;
			this.startTime = NaN;
			this.isStopped = false;
			this.completeHandler = null;
			SoundChannel.__super.call(this);
		}

		__class(SoundChannel, 'laya.media.SoundChannel', _super);
		var __proto = SoundChannel.prototype;
		/**
		*播放。
		*/
		__proto.play = function () { }
		/**
		*停止。
		*/
		__proto.stop = function () { }
		/**
		*暂停。
		*/
		__proto.pause = function () { }
		/**
		*继续播放。
		*/
		__proto.resume = function () { }
		/**
		*private
		*/
		__proto.__runComplete = function (handler) {
			if (handler) {
				handler.run();
			}
		}

		/**
		*音量范围从 0（静音）至 1（最大音量）。
		*/
		__getset(0, __proto, 'volume', function () {
			return 1;
		}, function (v) {
		});

		/**
		*获取当前播放时间。
		*/
		__getset(0, __proto, 'position', function () {
			return 0;
		});

		/**
		*获取总时间。
		*/
		__getset(0, __proto, 'duration', function () {
			return 0;
		});

		return SoundChannel;
	})(EventDispatcher)


	/**
	*<code>Sound</code> 类是用来播放控制声音的类。
	*/
	//class laya.media.Sound extends laya.events.EventDispatcher
	var Sound = (function (_super) {
		function Sound() {
			Sound.__super.call(this);;
		};

		__class(Sound, 'laya.media.Sound', _super);
		var __proto = Sound.prototype;
		/**
		*加载声音。
		*@param url 地址。
		*
		*/
		__proto.load = function (url) { }
		/**
		*播放声音。
		*@param startTime 开始时间,单位秒
		*@param loops 循环次数,0表示一直循环
		*@return 声道 SoundChannel 对象。
		*
		*/
		__proto.play = function (startTime, loops) {
			(startTime === void 0) && (startTime = 0);
			(loops === void 0) && (loops = 0);
			return null;
		}

		/**
		*释放声音资源。
		*
		*/
		__proto.dispose = function () { }
		/**
		*获取总时间。
		*/
		__getset(0, __proto, 'duration', function () {
			return 0;
		});

		return Sound;
	})(EventDispatcher)


	/**
	*@private
	*web audio api方式播放声音
	*/
	//class laya.media.webaudio.WebAudioSound extends laya.events.EventDispatcher
	var WebAudioSound = (function (_super) {
		function WebAudioSound() {
			this.url = null;
			this.loaded = false;
			this.data = null;
			this.audioBuffer = null;
			this.__toPlays = null;
			WebAudioSound.__super.call(this);
		}

		__class(WebAudioSound, 'laya.media.webaudio.WebAudioSound', _super);
		var __proto = WebAudioSound.prototype;
		/**
		*加载声音
		*@param url
		*
		*/
		__proto.load = function (url) {
			var me = this;
			url = URL.formatURL(url);
			this.url = url;
			this.audioBuffer = WebAudioSound._dataCache[url];
			if (this.audioBuffer) {
				this._loaded(this.audioBuffer);
				return;
			}
			WebAudioSound.e.on("loaded:" + url, this, this._loaded);
			WebAudioSound.e.on("err:" + url, this, this._err);
			if (WebAudioSound.__loadingSound[url]) {
				return;
			}
			WebAudioSound.__loadingSound[url] = true;
			var request = new Browser.window.XMLHttpRequest();
			request.open("GET", url, true);
			request.responseType = "arraybuffer";
			request.onload = function () {
				me.data = request.response;
				WebAudioSound.buffs.push({ "buffer": me.data, "url": me.url });
				WebAudioSound.decode();
			};
			request.onerror = function (e) {
				me._err();
			}
			request.send();
		}

		__proto._err = function () {
			this._removeLoadEvents();
			WebAudioSound.__loadingSound[this.url] = false;
			this.event(/*laya.events.Event.ERROR*/"error");
		}

		__proto._loaded = function (audioBuffer) {
			this._removeLoadEvents();
			this.audioBuffer = audioBuffer;
			WebAudioSound._dataCache[this.url] = this.audioBuffer;
			this.loaded = true;
			this.event(/*laya.events.Event.COMPLETE*/"complete");
		}

		__proto._removeLoadEvents = function () {
			WebAudioSound.e.off("loaded:" + this.url, this, this._loaded);
			WebAudioSound.e.off("err:" + this.url, this, this._err);
		}

		__proto.__playAfterLoaded = function () {
			if (!this.__toPlays) return;
			var i = 0, len = 0;
			var toPlays;
			toPlays = this.__toPlays;
			len = toPlays.length;
			var tParams;
			for (i = 0; i < len; i++) {
				tParams = toPlays[i];
				if (tParams[2] && !(tParams[2]).isStopped) {
					this.play(tParams[0], tParams[1], tParams[2]);
				}
			}
			this.__toPlays.length = 0;
		}

		/**
		*播放声音
		*@param startTime 起始时间
		*@param loops 循环次数
		*@return
		*
		*/
		__proto.play = function (startTime, loops, channel) {
			(startTime === void 0) && (startTime = 0);
			(loops === void 0) && (loops = 0);
			channel = channel ? channel : new WebAudioSoundChannel();
			if (!this.audioBuffer) {
				if (this.url) {
					if (!this.__toPlays) this.__toPlays = [];
					this.__toPlays.push([startTime, loops, channel]);
					this.once(/*laya.events.Event.COMPLETE*/"complete", this, this.__playAfterLoaded);
					this.load(this.url);
				}
			}
			channel.url = this.url;
			channel.loops = loops;
			channel["audioBuffer"] = this.audioBuffer;
			channel.startTime = startTime;
			channel.play();
			SoundManager.addChannel(channel);
			return channel;
		}

		__proto.dispose = function () {
			delete WebAudioSound._dataCache[this.url];
			delete WebAudioSound.__loadingSound[this.url];
		}

		__getset(0, __proto, 'duration', function () {
			if (this.audioBuffer) {
				return this.audioBuffer.duration;
			}
			return 0;
		});

		WebAudioSound.decode = function () {
			if (WebAudioSound.buffs.length <= 0 || WebAudioSound.isDecoding) {
				return;
			}
			WebAudioSound.isDecoding = true;
			WebAudioSound.tInfo = WebAudioSound.buffs.shift();
			WebAudioSound.ctx.decodeAudioData(WebAudioSound.tInfo["buffer"], WebAudioSound._done, WebAudioSound._fail);
		}

		WebAudioSound._done = function (audioBuffer) {
			WebAudioSound.e.event("loaded:" + WebAudioSound.tInfo.url, audioBuffer);
			WebAudioSound.isDecoding = false;
			WebAudioSound.decode();
		}

		WebAudioSound._fail = function () {
			WebAudioSound.e.event("err:" + WebAudioSound.tInfo.url, null);
			WebAudioSound.isDecoding = false;
			WebAudioSound.decode();
		}

		WebAudioSound._playEmptySound = function () {
			if (WebAudioSound.ctx == null) {
				return;
			};
			var source = WebAudioSound.ctx.createBufferSource();
			source.buffer = WebAudioSound._miniBuffer;
			source.connect(WebAudioSound.ctx.destination);
			source.start(0, 0, 0);
		}

		WebAudioSound._unlock = function () {
			if (WebAudioSound._unlocked) {
				return;
			}
			WebAudioSound._playEmptySound();
			if (WebAudioSound.ctx.state == "running") {
				Browser.document.removeEventListener("mousedown", WebAudioSound._unlock, true);
				Browser.document.removeEventListener("touchend", WebAudioSound._unlock, true);
				WebAudioSound._unlocked = true;
			}
		}

		WebAudioSound.initWebAudio = function () {
			if (WebAudioSound.ctx.state != "running") {
				WebAudioSound._unlock();
				Browser.document.addEventListener("mousedown", WebAudioSound._unlock, true);
				Browser.document.addEventListener("touchend", WebAudioSound._unlock, true);
			}
		}

		WebAudioSound._dataCache = {};
		WebAudioSound.buffs = [];
		WebAudioSound.isDecoding = false;
		WebAudioSound._unlocked = false;
		WebAudioSound.tInfo = null
		WebAudioSound.__loadingSound = {};
		__static(WebAudioSound,
			['window', function () { return this.window = Browser.window; }, 'webAudioEnabled', function () { return this.webAudioEnabled = WebAudioSound.window["AudioContext"] || WebAudioSound.window["webkitAudioContext"] || WebAudioSound.window["mozAudioContext"]; }, 'ctx', function () { return this.ctx = WebAudioSound.webAudioEnabled ? new (WebAudioSound.window["AudioContext"] || WebAudioSound.window["webkitAudioContext"] || WebAudioSound.window["mozAudioContext"])() : undefined; }, '_miniBuffer', function () { return this._miniBuffer = WebAudioSound.ctx.createBuffer(1, 1, 22050); }, 'e', function () { return this.e = new EventDispatcher(); }
			]);
		return WebAudioSound;
	})(EventDispatcher)


	/**
	*<p> <code>HttpRequest</code> 通过封装 HTML <code>XMLHttpRequest</code> 对象提供了对 HTTP 协议的完全的访问，包括做出 POST 和 HEAD 请求以及普通的 GET 请求的能力。 <code>HttpRequest</code> 只提供以异步的形式返回 Web 服务器的响应，并且能够以文本或者二进制的形式返回内容。</p>
	*<p><b>注意：</b>建议每次请求都使用新的 <code>HttpRequest</code> 对象，因为每次调用该对象的send方法时，都会清空之前设置的数据，并重置 HTTP 请求的状态，这会导致之前还未返回响应的请求被重置，从而得不到之前请求的响应结果。</p>
	*/
	//class laya.net.HttpRequest extends laya.events.EventDispatcher
	var HttpRequest = (function (_super) {
		function HttpRequest() {
			this._responseType = null;
			this._data = null;
			HttpRequest.__super.call(this);
			this._http = new Browser.window.XMLHttpRequest();
		}

		__class(HttpRequest, 'laya.net.HttpRequest', _super);
		var __proto = HttpRequest.prototype;
		/**
		*发送 HTTP 请求。
		*@param url 请求的地址。大多数浏览器实施了一个同源安全策略，并且要求这个 URL 与包含脚本的文本具有相同的主机名和端口。
		*@param data (default=null)发送的数据。
		*@param method (default="get")用于请求的 HTTP 方法。值包括 "get"、"post"、"head"。
		*@param responseType (default="text")Web 服务器的响应类型，可设置为 "text"、"json"、"xml"、"arraybuffer"。
		*@param headers (default=null)HTTP 请求的头部信息。参数形如key-value数组：key是头部的名称，不应该包括空白、冒号或换行；value是头部的值，不应该包括换行。比如["Content-Type","application/json"]。
		*/
		__proto.send = function (url, data, method, responseType, headers) {
			(method === void 0) && (method = "get");
			(responseType === void 0) && (responseType = "text");
			this._responseType = responseType;
			this._data = null;
			var _this = this;
			var http = this._http;
			http.open(method, url, true);
			if (headers) {
				for (var i = 0; i < headers.length; i++) {
					http.setRequestHeader(headers[i++], headers[i]);
				}
			} else if (!Render.isConchApp) {
				if (!data || (typeof data == 'string')) http.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
				else http.setRequestHeader("Content-Type", "application/json");
			}
			http.responseType = responseType !== "arraybuffer" ? "text" : "arraybuffer";
			http.onerror = function (e) {
				_this._onError(e);
			}
			http.onabort = function (e) {
				_this._onAbort(e);
			}
			http.onprogress = function (e) {
				_this._onProgress(e);
			}
			http.onload = function (e) {
				_this._onLoad(e);
			}
			http.send(data);
		}

		/**
		*@private
		*请求进度的侦听处理函数。
		*@param e 事件对象。
		*/
		__proto._onProgress = function (e) {
			if (e && e.lengthComputable) this.event(/*laya.events.Event.PROGRESS*/"progress", e.loaded / e.total);
		}

		/**
		*@private
		*请求中断的侦听处理函数。
		*@param e 事件对象。
		*/
		__proto._onAbort = function (e) {
			this.error("Request was aborted by user");
		}

		/**
		*@private
		*请求出错侦的听处理函数。
		*@param e 事件对象。
		*/
		__proto._onError = function (e) {
			this.error("Request failed Status:" + this._http.status + " text:" + this._http.statusText);
		}

		/**
		*@private
		*请求消息返回的侦听处理函数。
		*@param e 事件对象。
		*/
		__proto._onLoad = function (e) {
			var http = this._http;
			var status = http.status !== undefined ? http.status : 200;
			if (status === 200 || status === 204 || status === 0) {
				this.complete();
			} else {
				this.error("[" + http.status + "]" + http.statusText + ":" + http.responseURL);
			}
		}

		/**
		*@private
		*请求错误的处理函数。
		*@param message 错误信息。
		*/
		__proto.error = function (message) {
			this.clear();
			this.event(/*laya.events.Event.ERROR*/"error", message);
		}

		/**
		*@private
		*请求成功完成的处理函数。
		*/
		__proto.complete = function () {
			this.clear();
			var flag = true;
			try {
				if (this._responseType === "json") {
					this._data = JSON.parse(this._http.responseText);
				} else if (this._responseType === "xml") {
					this._data = Utils.parseXMLFromString(this._http.responseText);
				} else {
					this._data = this._http.response || this._http.responseText;
				}
			} catch (e) {
				flag = false;
				this.error(e.message);
			}
			flag && this.event(/*laya.events.Event.COMPLETE*/"complete", (this._data instanceof Array) ? [this._data] : this._data);
		}

		/**
		*@private
		*清除当前请求。
		*/
		__proto.clear = function () {
			var http = this._http;
			http.onerror = http.onabort = http.onprogress = http.onload = null;
		}

		/**请求的地址。*/
		__getset(0, __proto, 'url', function () {
			return this._http.responseURL;
		});

		/**
		*本对象所封装的原生 XMLHttpRequest 引用。
		*/
		__getset(0, __proto, 'http', function () {
			return this._http;
		});

		/**返回的数据。*/
		__getset(0, __proto, 'data', function () {
			return this._data;
		});

		return HttpRequest;
	})(EventDispatcher)


	/**
	*<code>Loader</code> 类可用来加载文本、JSON、XML、二进制、图像等资源。
	*/
	//class laya.net.Loader extends laya.events.EventDispatcher
	var Loader = (function (_super) {
		function Loader() {
			this._data = null;
			this._url = null;
			this._type = null;
			this._cache = false;
			this._http = null;
			this._customParse = false;
			Loader.__super.call(this);
		}

		__class(Loader, 'laya.net.Loader', _super);
		var __proto = Loader.prototype;
		/**
		*加载资源。加载错误会派发 Event.ERROR 事件，参数为错误信息。
		*@param url 资源地址。
		*@param type (default=null)资源类型。可选值为：Loader.TEXT、Loader.JSON、Loader.XML、Loader.BUFFER、Loader.IMAGE、Loader.SOUND、Loader.ATLAS、Loader.FONT。如果为null，则根据文件后缀分析类型。
		*@param cache (default=true)是否缓存数据。
		*@param group (default=null)分组名称。
		*@param ignoreCache (default=false)是否忽略缓存，强制重新加载。
		*/
		__proto.load = function (url, type, cache, group, ignoreCache) {
			(cache === void 0) && (cache = true);
			(ignoreCache === void 0) && (ignoreCache = false);
			this._url = url;
			if (url.indexOf("data:image") === 0) this._type = type = "image";
			else {
				this._type = type || (type = this.getTypeFromUrl(url));
				url = URL.formatURL(url);
			}
			this._cache = cache;
			this._data = null;
			if (!ignoreCache && Loader.loadedMap[url]) {
				this._data = Loader.loadedMap[url];
				this.event(/*laya.events.Event.PROGRESS*/"progress", 1);
				this.event(/*laya.events.Event.COMPLETE*/"complete", this._data);
				return;
			}
			if (group) Loader.setGroup(url, group);
			if (Loader.parserMap[type] != null) {
				this._customParse = true;
				if (((Loader.parserMap[type]) instanceof laya.utils.Handler)) Loader.parserMap[type].runWith(this);
				else Loader.parserMap[type].call(null, this);
				return;
			}
			if (type === "image" || type === "htmlimage" || type === "nativeimage") return this._loadImage(url);
			if (type === "sound") return this._loadSound(url);
			if (type == "atlas") {
				if (Loader.preLoadedAtlasConfigMap[url]) {
					this.onLoaded(Loader.preLoadedAtlasConfigMap[url]);
					delete Loader.preLoadedAtlasConfigMap[url];
					return;
				}
			}
			if (!this._http) {
				this._http = new HttpRequest();
				this._http.on(/*laya.events.Event.PROGRESS*/"progress", this, this.onProgress);
				this._http.on(/*laya.events.Event.ERROR*/"error", this, this.onError);
				this._http.on(/*laya.events.Event.COMPLETE*/"complete", this, this.onLoaded);
			};
			var contentType;
			switch (type) {
				case "atlas":
					contentType = "json";
					break;
				case "font":
					contentType = "xml";
					break;
				case "pkm":
					contentType = "arraybuffer";
					break
				default:
					contentType = type;
			}
			this._http.send(url, null, "get", contentType);
		}

		/**
		*获取指定资源地址的数据类型。
		*@param url 资源地址。
		*@return 数据类型。
		*/
		__proto.getTypeFromUrl = function (url) {
			var type = Utils.getFileExtension(url);
			if (type) return Loader.typeMap[type];
			console.warn("Not recognize the resources suffix", url);
			return "text";
		}

		/**
		*@private
		*加载图片资源。
		*@param url 资源地址。
		*/
		__proto._loadImage = function (url) {
			url = URL.formatURL(url);
			var _this = this;
			var image;
			function clear() {
				image.onload = null;
				image.onerror = null;
				delete Loader.imgCache[url]
			};
			var onload = function () {
				clear();
				_this.onLoaded(image);
			};
			var onerror = function () {
				clear();
				_this.event(/*laya.events.Event.ERROR*/"error", "Load image failed");
			}
			if (this._type === "nativeimage") {
				image = new Browser.window.Image();
				image.crossOrigin = "";
				image.onload = onload;
				image.onerror = onerror;
				image.src = url;
				Loader.imgCache[url] = image;
			} else {
				new HTMLImage.create(url, {
					onload: onload, onerror: onerror, onCreate: function (img) {
						image = img;
						Loader.imgCache[url] = img;
					}
				});
			}
		}

		/**
		*@private
		*加载声音资源。
		*@param url 资源地址。
		*/
		__proto._loadSound = function (url) {
			var sound = (new SoundManager._soundClass());
			var _this = this;
			sound.on(/*laya.events.Event.COMPLETE*/"complete", this, soundOnload);
			sound.on(/*laya.events.Event.ERROR*/"error", this, soundOnErr);
			sound.load(url);
			function soundOnload() {
				clear();
				_this.onLoaded(sound);
			}
			function soundOnErr() {
				clear();
				sound.dispose();
				_this.event(/*laya.events.Event.ERROR*/"error", "Load sound failed");
			}
			function clear() {
				sound.offAll();
			}
		}

		/**@private */
		__proto.onProgress = function (value) {
			if (this._type === "atlas") this.event(/*laya.events.Event.PROGRESS*/"progress", value * 0.3);
			else this.event(/*laya.events.Event.PROGRESS*/"progress", value);
		}

		/**@private */
		__proto.onError = function (message) {
			this.event(/*laya.events.Event.ERROR*/"error", message);
		}

		/**
		*资源加载完成的处理函数。
		*@param data 数据。
		*/
		__proto.onLoaded = function (data) {
			var type = this._type;
			if (type === "image") {
				var tex = new Texture(data);
				tex.url = this._url;
				this.complete(tex);
			} else if (type === "sound" || type === "htmlimage" || type === "nativeimage") {
				this.complete(data);
			} else if (type === "atlas") {
				if (!data.src && !data._setContext) {
					if (!this._data) {
						this._data = data;
						if (data.meta && data.meta.image) {
							var toloadPics = data.meta.image.split(",");
							var split = this._url.indexOf("/") >= 0 ? "/" : "\\";
							var idx = this._url.lastIndexOf(split);
							var folderPath = idx >= 0 ? this._url.substr(0, idx + 1) : "";
							for (var i = 0, len = toloadPics.length; i < len; i++) {
								toloadPics[i] = folderPath + toloadPics[i];
							}
						} else {
							toloadPics = [this._url.replace(".json", ".png")];
						}
						toloadPics.reverse();
						data.toLoads = toloadPics;
						data.pics = [];
					}
					this.event(/*laya.events.Event.PROGRESS*/"progress", 0.3 + 1 / toloadPics.length * 0.6);
					return this._loadImage(toloadPics.pop());
				} else {
					this._data.pics.push(data);
					if (this._data.toLoads.length > 0) {
						this.event(/*laya.events.Event.PROGRESS*/"progress", 0.3 + 1 / this._data.toLoads.length * 0.6);
						return this._loadImage(this._data.toLoads.pop());
					};
					var frames = this._data.frames;
					var cleanUrl = this._url.split("?")[0];
					var directory = (this._data.meta && this._data.meta.prefix) ? this._data.meta.prefix : cleanUrl.substring(0, cleanUrl.lastIndexOf(".")) + "/";
					var pics = this._data.pics;
					var atlasURL = URL.formatURL(this._url);
					var map = Loader.atlasMap[atlasURL] || (Loader.atlasMap[atlasURL] = []);
					map.dir = directory;
					for (var name in frames) {
						var obj = frames[name];
						var tPic = pics[obj.frame.idx ? obj.frame.idx : 0];
						var url = URL.formatURL(directory + name);
						Loader.cacheRes(url, Texture.create(tPic, obj.frame.x, obj.frame.y, obj.frame.w, obj.frame.h, obj.spriteSourceSize.x, obj.spriteSourceSize.y, obj.sourceSize.w, obj.sourceSize.h));
						Loader.loadedMap[url].url = url;
						map.push(url);
					}
					delete this._data.pics;
					this.complete(this._data);
				}
			} else if (type == "font") {
				if (!data.src) {
					this._data = data;
					this.event(/*laya.events.Event.PROGRESS*/"progress", 0.5);
					return this._loadImage(this._url.replace(".fnt", ".png"));
				} else {
					var bFont = new BitmapFont();
					bFont.parseFont(this._data, data);
					var tArr = this._url.split(".fnt")[0].split("/");
					var fontName = tArr[tArr.length - 1];
					Text.registerBitmapFont(fontName, bFont);
					this._data = bFont;
					this.complete(this._data);
				}
			} else if (type == "pkm") {
				var image = HTMLImage.create(data, this._url);
				var tex1 = new Texture(image);
				tex1.url = this._url;
				this.complete(tex1);
			} else {
				this.complete(data);
			}
		}

		/**
		*加载完成。
		*@param data 加载的数据。
		*/
		__proto.complete = function (data) {
			this._data = data;
			if (this._customParse) {
				this.event(/*laya.events.Event.LOADED*/"loaded", (data instanceof Array) ? [data] : data);
			} else {
				Loader._loaders.push(this);
				if (!Loader._isWorking) Loader.checkNext();
			}
		}

		/**
		*结束加载，处理是否缓存及派发完成事件 <code>Event.COMPLETE</code> 。
		*@param content 加载后的数据
		*/
		__proto.endLoad = function (content) {
			content && (this._data = content);
			if (this._cache) Loader.cacheRes(this._url, this._data);
			this._customParse = false;
			this.event(/*laya.events.Event.PROGRESS*/"progress", 1);
			this.event(/*laya.events.Event.COMPLETE*/"complete", (this.data instanceof Array) ? [this.data] : this.data);
		}

		/**加载地址。*/
		__getset(0, __proto, 'url', function () {
			return this._url;
		});

		/**返回的数据。*/
		__getset(0, __proto, 'data', function () {
			return this._data;
		});

		/**是否缓存。*/
		__getset(0, __proto, 'cache', function () {
			return this._cache;
		});

		/**加载类型。*/
		__getset(0, __proto, 'type', function () {
			return this._type;
		});

		Loader.checkNext = function () {
			Loader._isWorking = true;
			var startTimer = Browser.now();
			var thisTimer = startTimer;
			while (Loader._startIndex < Loader._loaders.length) {
				thisTimer = Browser.now();
				Loader._loaders[Loader._startIndex].endLoad();
				Loader._startIndex++;
				if (Browser.now() - startTimer > Loader.maxTimeOut) {
					console.warn("loader callback cost a long time:" + (Browser.now() - startTimer) + " url=" + Loader._loaders[Loader._startIndex - 1].url);
					Laya.timer.frameOnce(1, null, Loader.checkNext);
					return;
				}
			}
			Loader._loaders.length = 0;
			Loader._startIndex = 0;
			Loader._isWorking = false;
		}

		Loader.clearRes = function (url, forceDispose) {
			(forceDispose === void 0) && (forceDispose = false);
			url = URL.formatURL(url);
			var arr = Loader.getAtlas(url);
			if (arr) {
				for (var i = 0, n = arr.length; i < n; i++) {
					var resUrl = arr[i];
					var tex = Loader.getRes(resUrl);
					delete Loader.loadedMap[resUrl];
					if (tex) tex.destroy(forceDispose);
				}
				arr.length = 0;
				delete Loader.atlasMap[url];
				delete Loader.loadedMap[url];
			} else {
				var res = Loader.loadedMap[url];
				if (res) {
					delete Loader.loadedMap[url];
					if ((res instanceof laya.resource.Texture) && res.bitmap) (res).destroy(forceDispose);
				}
			}
		}

		Loader.setAtlasConfigs = function (url, config) {
			Loader.preLoadedAtlasConfigMap[URL.formatURL(url)] = config;
		}

		Loader.getRes = function (url) {
			return Loader.loadedMap[URL.formatURL(url)];
		}

		Loader.getAtlas = function (url) {
			return Loader.atlasMap[URL.formatURL(url)];
		}

		Loader.cacheRes = function (url, data) {
			url = URL.formatURL(url);
			if (Loader.loadedMap[url] != null) {
				console.warn("Resources already exist,is repeated loading:", url);
			} else {
				Loader.loadedMap[url] = data;
			}
		}

		Loader.setGroup = function (url, group) {
			if (!Loader.groupMap[group]) Loader.groupMap[group] = [];
			Loader.groupMap[group].push(url);
		}

		Loader.clearResByGroup = function (group) {
			if (!Loader.groupMap[group]) return;
			var arr = Loader.groupMap[group], i = 0, len = arr.length;
			for (i = 0; i < len; i++) {
				Loader.clearRes(arr[i]);
			}
			arr.length = 0;
		}

		Loader.TEXT = "text";
		Loader.JSON = "json";
		Loader.XML = "xml";
		Loader.BUFFER = "arraybuffer";
		Loader.IMAGE = "image";
		Loader.SOUND = "sound";
		Loader.ATLAS = "atlas";
		Loader.FONT = "font";
		Loader.PKM = "pkm";
		Loader.typeMap = { "png": "image", "jpg": "image", "jpeg": "image", "txt": "text", "json": "json", "xml": "xml", "als": "atlas", "atlas": "atlas", "mp3": "sound", "ogg": "sound", "wav": "sound", "part": "json", "fnt": "font", "pkm": "pkm" };
		Loader.parserMap = {};
		Loader.groupMap = {};
		Loader.maxTimeOut = 100;
		Loader.loadedMap = {};
		Loader.preLoadedAtlasConfigMap = {};
		Loader.atlasMap = {};
		Loader._loaders = [];
		Loader._isWorking = false;
		Loader._startIndex = 0;
		Loader.imgCache = {};
		return Loader;
	})(EventDispatcher)


	/**
	*<p> <code>LoaderManager</code> 类用于用于批量加载资源。此类是单例，不要手动实例化此类，请通过Laya.loader访问。</p>
	*<p>全部队列加载完成，会派发 Event.COMPLETE 事件；如果队列中任意一个加载失败，会派发 Event.ERROR 事件，事件回调参数值为加载出错的资源地址。</p>
	*<p> <code>LoaderManager</code> 类提供了以下几种功能：<br/>
	*多线程：默认5个加载线程，可以通过maxLoader属性修改线程数量；<br/>
	*多优先级：有0-4共5个优先级，优先级高的优先加载。0最高，4最低；<br/>
	*重复过滤：自动过滤重复加载（不会有多个相同地址的资源同时加载）以及复用缓存资源，防止重复加载；<br/>
	*错误重试：资源加载失败后，会重试加载（以最低优先级插入加载队列），retryNum设定加载失败后重试次数，retryDelay设定加载重试的时间间隔。</p>
	*@see laya.net.Loader
	*/
	//class laya.net.LoaderManager extends laya.events.EventDispatcher
	var LoaderManager = (function (_super) {
		var ResInfo;
		function LoaderManager() {
			this.retryNum = 1;
			this.retryDelay = 0;
			this.maxLoader = 5;
			this._loaders = [];
			this._loaderCount = 0;
			this._resInfos = [];
			this._infoPool = [];
			this._maxPriority = 5;
			this._failRes = {};
			LoaderManager.__super.call(this);
			for (var i = 0; i < this._maxPriority; i++)this._resInfos[i] = [];
		}

		__class(LoaderManager, 'laya.net.LoaderManager', _super);
		var __proto = LoaderManager.prototype;
		/**
		*<p>根据clas类型创建一个未初始化资源的对象，随后进行异步加载，资源加载完成后，初始化对象的资源，并通过此对象派发 Event.LOADED 事件，事件回调参数值为此对象本身。套嵌资源的子资源会保留资源路径"?"后的部分。</p>
		*<p>如果url为数组，返回true；否则返回指定的资源类对象，可以通过侦听此对象的 Event.LOADED 事件来判断资源是否已经加载完毕。</p>
		*<p><b>注意：</b>cache参数只能对文件后缀为atlas的资源进行缓存控制，其他资源会忽略缓存，强制重新加载。</p>
		*@param url 资源地址或者数组。如果url和clas同时指定了资源类型，优先使用url指定的资源类型。参数形如：[{url:xx,clas:xx,priority:xx,params:xx},{url:xx,clas:xx,priority:xx,params:xx}]。
		*@param complete 加载结束回调。根据url类型不同分为2种情况：1. url为String类型，也就是单个资源地址，如果加载成功，则回调参数值为加载完成的资源，否则为null；2. url为数组类型，指定了一组要加载的资源，如果全部加载成功，则回调参数值为true，否则为false。
		*@param progress 资源加载进度回调，回调参数值为当前资源加载的进度信息(0-1)。
		*@param clas 资源类名。如果url和clas同时指定了资源类型，优先使用url指定的资源类型。参数形如：Texture。
		*@param params 资源构造参数。
		*@param priority (default=1)加载的优先级，优先级高的优先加载。有0-4共5个优先级，0最高，4最低。
		*@param cache 是否缓存加载的资源。
		*@return 如果url为数组，返回true；否则返回指定的资源类对象。
		*/
		__proto.create = function (url, complete, progress, clas, params, priority, cache) {
			(priority === void 0) && (priority = 1);
			(cache === void 0) && (cache = true);
			if ((url instanceof Array)) {
				var items = url;
				var itemCount = items.length;
				var loadedCount = 0;
				if (progress) {
					var progress2 = Handler.create(progress.caller, progress.method, progress.args, false);
				}
				for (var i = 0; i < itemCount; i++) {
					var item = items[i];
					if ((typeof item == 'string')) item = items[i] = { url: item };
					item.progress = 0;
					var progressHandler = progress ? Handler.create(null, onProgress, [item], false) : null;
					var completeHandler = (progress || complete) ? Handler.create(null, onComplete, [item]) : null;
					this._create(item.url, completeHandler, progressHandler, item.clas || clas, item.params || params, item.priority || priority, cache);
				}
				function onComplete(item, content) {
					loadedCount++;
					item.progress = 1;
					if (loadedCount === itemCount && complete) {
						complete.run();
					}
				}
				function onProgress(item, value) {
					item.progress = value;
					var num = 0;
					for (var j = 0; j < itemCount; j++) {
						var item1 = items[j];
						num += item1.progress;
					};
					var v = num / itemCount;
					progress2.runWith(v);
				}
				return true;
			} else return this._create(url, complete, progress, clas, params, priority, cache);
		}

		__proto._create = function (url, complete, progress, clas, params, priority, cache) {
			(priority === void 0) && (priority = 1);
			(cache === void 0) && (cache = true);
			url = URL.formatURL(url);
			var item = this.getRes(url);
			if (!item) {
				var extension = Utils.getFileExtension(url);
				var creatItem = LoaderManager.createMap[extension];
				if (!creatItem)
					throw new Error("LoaderManager:unknown file(" + url + ") extension with: " + extension + ".");
				if (!clas) clas = creatItem[0];
				var type = creatItem[1];
				if (extension == "atlas") {
					this.load(url, complete, progress, type, priority, cache);
				} else {
					if (clas === Texture) type = "htmlimage";
					item = clas ? new clas() : null;
					if (item.hasOwnProperty("_loaded"))
						item._loaded = false;
					this.load(url, Handler.create(null, onLoaded), progress, type, priority, false, null, true);
					function onLoaded(data) {
						(item && !item.disposed && data) && (item.onAsynLoaded.call(item, url, data, params));
						if (complete) complete.run();
						Laya.loader.event(url);
					}
					if (cache) {
						this.cacheRes(url, item);
						item.url = url;
					}
				}
			} else {
				if (!item.hasOwnProperty("loaded") || item.loaded) {
					progress && progress.runWith(1);
					complete && complete.run();
				} else if (complete) {
					Laya.loader._createListener(url, complete.caller, complete.method, complete.args, true, false);
				}
			}
			return item;
		}

		/**
		*<p>加载资源。资源加载错误时，本对象会派发 Event.ERROR 事件，事件回调参数值为加载出错的资源地址。</p>
		*<p>因为返回值为 LoaderManager 对象本身，所以可以使用如下语法：Laya.loader.load(...).load(...);</p>
		*@param url 要加载的单个资源地址或资源信息数组。比如：简单数组：["a.png","b.png"]；复杂数组[{url:"a.png",type:Loader.IMAGE,size:100,priority:1},{url:"b.json",type:Loader.JSON,size:50,priority:1}]。
		*@param complete 加载结束回调。根据url类型不同分为2种情况：1. url为String类型，也就是单个资源地址，如果加载成功，则回调参数值为加载完成的资源，否则为null；2. url为数组类型，指定了一组要加载的资源，如果全部加载成功，则回调参数值为true，否则为false。
		*@param progress 加载进度回调。回调参数值为当前资源的加载进度信息(0-1)。
		*@param type 资源类型。比如：Loader.IMAGE。
		*@param priority (default=1)加载的优先级，优先级高的优先加载。有0-4共5个优先级，0最高，4最低。
		*@param cache 是否缓存加载结果。
		*@param group 分组，方便对资源进行管理。
		*@param ignoreCache 是否忽略缓存，强制重新加载。
		*@return 此 LoaderManager 对象本身。
		*/
		__proto.load = function (url, complete, progress, type, priority, cache, group, ignoreCache) {
			var _$this = this;
			(priority === void 0) && (priority = 1);
			(cache === void 0) && (cache = true);
			(ignoreCache === void 0) && (ignoreCache = false);
			if ((url instanceof Array)) return this._loadAssets(url, complete, progress, type, priority, cache, group);
			var content = Loader.getRes(url);
			if (content != null) {
				Laya.timer.frameOnce(1, null, function () {
					progress && progress.runWith(1);
					complete && complete.runWith(content);
					_$this._loaderCount || _$this.event(/*laya.events.Event.COMPLETE*/"complete");
				});
			} else {
				var info = LoaderManager._resMap[url];
				if (!info) {
					info = this._infoPool.length ? this._infoPool.pop() : new ResInfo();
					info.url = url;
					info.type = type;
					info.cache = cache;
					info.group = group;
					info.ignoreCache = ignoreCache;
					complete && info.on(/*laya.events.Event.COMPLETE*/"complete", complete.caller, complete.method, complete.args);
					progress && info.on(/*laya.events.Event.PROGRESS*/"progress", progress.caller, progress.method, progress.args);
					LoaderManager._resMap[url] = info;
					priority = priority < this._maxPriority ? priority : this._maxPriority - 1;
					this._resInfos[priority].push(info);
					this._next();
				} else {
					complete && info._createListener(/*laya.events.Event.COMPLETE*/"complete", complete.caller, complete.method, complete.args, false, false);
					progress && info._createListener(/*laya.events.Event.PROGRESS*/"progress", progress.caller, progress.method, progress.args, false, false);
				}
			}
			return this;
		}

		__proto._next = function () {
			if (this._loaderCount >= this.maxLoader) return;
			for (var i = 0; i < this._maxPriority; i++) {
				var infos = this._resInfos[i];
				while (infos.length > 0) {
					var info = infos.shift();
					if (info) return this._doLoad(info);
				}
			}
			this._loaderCount || this.event(/*laya.events.Event.COMPLETE*/"complete");
		}

		__proto._doLoad = function (resInfo) {
			this._loaderCount++;
			var loader = this._loaders.length ? this._loaders.pop() : new Loader();
			loader.on(/*laya.events.Event.COMPLETE*/"complete", null, onLoaded);
			loader.on(/*laya.events.Event.PROGRESS*/"progress", null, function (num) {
				resInfo.event(/*laya.events.Event.PROGRESS*/"progress", num);
			});
			loader.on(/*laya.events.Event.ERROR*/"error", null, function (msg) {
				onLoaded(null);
			});
			var _this = this;
			function onLoaded(data) {
				loader.offAll();
				loader._data = null;
				_this._loaders.push(loader);
				_this._endLoad(resInfo, (data instanceof Array) ? [data] : data);
				_this._loaderCount--;
				_this._next();
			}
			loader.load(resInfo.url, resInfo.type, resInfo.cache, resInfo.group, resInfo.ignoreCache);
		}

		__proto._endLoad = function (resInfo, content) {
			var url = resInfo.url;
			if (content == null) {
				var errorCount = this._failRes[url] || 0;
				if (errorCount < this.retryNum) {
					console.warn("[warn]Retry to load:", url);
					this._failRes[url] = errorCount + 1;
					Laya.timer.once(this.retryDelay, this, this._addReTry, [resInfo], false);
					return;
				} else {
					console.warn("[error]Failed to load:", url);
					this.event(/*laya.events.Event.ERROR*/"error", url);
				}
			}
			if (this._failRes[url]) this._failRes[url] = 0;
			delete LoaderManager._resMap[url];
			resInfo.event(/*laya.events.Event.COMPLETE*/"complete", content);
			resInfo.offAll();
			this._infoPool.push(resInfo);
		}

		__proto._addReTry = function (resInfo) {
			this._resInfos[this._maxPriority - 1].push(resInfo);
			this._next();
		}

		/**
		*清理指定资源地址缓存。
		*@param url 资源地址。
		*@param forceDispose 是否强制销毁，有些资源是采用引用计数方式销毁，如果forceDispose=true，则忽略引用计数，直接销毁，比如Texture，默认为false
		*/
		__proto.clearRes = function (url, forceDispose) {
			(forceDispose === void 0) && (forceDispose = false);
			Loader.clearRes(url, forceDispose);
		}

		/**
		*获取指定资源地址的资源。
		*@param url 资源地址。
		*@return 返回资源。
		*/
		__proto.getRes = function (url) {
			return Loader.getRes(url);
		}

		/**
		*缓存资源。
		*@param url 资源地址。
		*@param data 要缓存的内容。
		*/
		__proto.cacheRes = function (url, data) {
			Loader.cacheRes(url, data);
		}

		/**
		*设置资源分组。
		*@param url 资源地址。
		*@param group 分组名
		*/
		__proto.setGroup = function (url, group) {
			Loader.setGroup(url, group);
		}

		/**
		*根据分组清理资源。
		*@param group 分组名
		*/
		__proto.clearResByGroup = function (group) {
			Loader.clearResByGroup(group);
		}

		/**清理当前未完成的加载，所有未加载的内容全部停止加载。*/
		__proto.clearUnLoaded = function () {
			for (var i = 0; i < this._maxPriority; i++) {
				var infos = this._resInfos[i];
				for (var j = infos.length - 1; j > -1; j--) {
					var info = infos[j];
					if (info) {
						info.offAll();
						this._infoPool.push(info);
					}
				}
				infos.length = 0;
			}
			this._loaderCount = 0;
			LoaderManager._resMap = {};
		}

		/**
		*根据地址集合清理掉未加载的内容
		*@param urls 资源地址集合
		*/
		__proto.cancelLoadByUrls = function (urls) {
			if (!urls) return;
			for (var i = 0, n = urls.length; i < n; i++) {
				this.cancelLoadByUrl(urls[i]);
			}
		}

		/**
		*根据地址清理掉未加载的内容
		*@param url 资源地址
		*/
		__proto.cancelLoadByUrl = function (url) {
			for (var i = 0; i < this._maxPriority; i++) {
				var infos = this._resInfos[i];
				for (var j = infos.length - 1; j > -1; j--) {
					var info = infos[j];
					if (info && info.url === url) {
						infos[j] = null;
						info.offAll();
						this._infoPool.push(info);
					}
				}
			}
			if (LoaderManager._resMap[url]) delete LoaderManager._resMap[url];
		}

		/**
		*@private
		*加载数组里面的资源。
		*@param arr 简单：["a.png","b.png"]，复杂[{url:"a.png",type:Loader.IMAGE,size:100,priority:1},{url:"b.json",type:Loader.JSON,size:50,priority:1}]*/
		__proto._loadAssets = function (arr, complete, progress, type, priority, cache, group) {
			(priority === void 0) && (priority = 1);
			(cache === void 0) && (cache = true);
			var itemCount = arr.length;
			var loadedCount = 0;
			var totalSize = 0;
			var items = [];
			var success = true;
			for (var i = 0; i < itemCount; i++) {
				var item = arr[i];
				if ((typeof item == 'string')) item = { url: item, type: type, size: 1, priority: priority };
				if (!item.size) item.size = 1;
				item.progress = 0;
				totalSize += item.size;
				items.push(item);
				var progressHandler = progress ? Handler.create(null, loadProgress, [item], false) : null;
				var completeHandler = (complete || progress) ? Handler.create(null, loadComplete, [item]) : null;
				this.load(item.url, completeHandler, progressHandler, item.type, item.priority || 1, cache, item.group || group);
			}
			function loadComplete(item, content) {
				loadedCount++;
				item.progress = 1;
				if (!content) success = false;
				if (loadedCount === itemCount && complete) {
					complete.runWith(success);
				}
			}
			function loadProgress(item, value) {
				if (progress != null) {
					item.progress = value;
					var num = 0;
					for (var j = 0; j < items.length; j++) {
						var item1 = items[j];
						num += item1.size * item1.progress;
					};
					var v = num / totalSize;
					progress.runWith(v);
				}
			}
			return this;
		}

		LoaderManager.cacheRes = function (url, data) {
			Loader.cacheRes(url, data);
		}

		LoaderManager._resMap = {};
		__static(LoaderManager,
			['createMap', function () { return this.createMap = { atlas: [null,/*laya.net.Loader.ATLAS*/"atlas"] }; }
			]);
		LoaderManager.__init$ = function () {
			//class ResInfo extends laya.events.EventDispatcher
			ResInfo = (function (_super) {
				function ResInfo() {
					this.url = null;
					this.type = null;
					this.cache = false;
					this.group = null;
					this.ignoreCache = false;
					ResInfo.__super.call(this);
				}
				__class(ResInfo, '', _super);
				return ResInfo;
			})(EventDispatcher)
		}

		return LoaderManager;
	})(EventDispatcher)


	/**
	*<p><code>ColorFilter</code> 是颜色滤镜。使用 ColorFilter 类可以将 4 x 5 矩阵转换应用于输入图像上的每个像素的 RGBA 颜色和 Alpha 值，以生成具有一组新的 RGBA 颜色和 Alpha 值的结果。该类允许饱和度更改、色相旋转、亮度转 Alpha 以及各种其他效果。您可以将滤镜应用于任何显示对象（即，从 Sprite 类继承的对象）。</p>
	*<p>注意：对于 RGBA 值，最高有效字节代表红色通道值，其后的有效字节分别代表绿色、蓝色和 Alpha 通道值。</p>
	*/
	//class laya.filters.ColorFilter extends laya.filters.Filter
	var ColorFilter = (function (_super) {
		function ColorFilter(mat) {
			//this._mat=null;
			//this._alpha=null;
			ColorFilter.__super.call(this);
			if (!mat) {
				mat = [0.3, 0.59, 0.11, 0, 0, 0.3, 0.59, 0.11, 0, 0, 0.3, 0.59, 0.11, 0, 0, 0, 0, 0, 1, 0];
			}
			this._mat = new Float32Array(16);
			this._alpha = new Float32Array(4);
			var j = 0;
			var z = 0;
			for (var i = 0; i < 20; i++) {
				if (i % 5 != 4) {
					this._mat[j++] = mat[i];
				} else {
					this._alpha[z++] = mat[i];
				}
			}
			this._action = RunDriver.createFilterAction(0x20);
			this._action.data = this;
		}

		__class(ColorFilter, 'laya.filters.ColorFilter', _super);
		var __proto = ColorFilter.prototype;
		Laya.imps(__proto, { "laya.filters.IFilter": true })
		/**
		*@private 通知微端
		*/
		__proto.callNative = function (sp) {
			var t = sp._$P.cf = this;
			sp.conchModel && sp.conchModel.setFilterMatrix && sp.conchModel.setFilterMatrix(this._mat, this._alpha);
		}

		/**@private */
		__getset(0, __proto, 'type', function () {
			return 0x20;
		});

		/**@private */
		__getset(0, __proto, 'action', function () {
			return this._action;
		});

		return ColorFilter;
	})(Filter)


	/**
	*<p> <code>Socket</code> 封装了 HTML5 WebSocket ，允许服务器端与客户端进行全双工（full-duplex）的实时通信，并且允许跨域通信。在建立连接后，服务器和 Browser/Client Agent 都能主动的向对方发送或接收文本和二进制数据。</p>
	*<p>要使用 <code>Socket</code> 类的方法，请先使用构造函数 <code>new Socket</code> 创建一个 <code>Socket</code> 对象。 <code>Socket</code> 以异步方式传输和接收数据。</p>
	*/
	//class laya.net.Socket extends laya.events.EventDispatcher
	var Socket = (function (_super) {
		function Socket(host, port, byteClass) {
			this._endian = null;
			this._stamp = NaN;
			this._socket = null;
			this._connected = false;
			this._addInputPosition = 0;
			this._input = null;
			this._output = null;
			this.timeout = 0;
			this.objectEncoding = 0;
			this.disableInput = false;
			this._byteClass = null;
			this.protocols = [];
			(port === void 0) && (port = 0);
			Socket.__super.call(this);
			this._byteClass = byteClass ? byteClass : Byte;
			this.endian = "bigEndian";
			this.timeout = 20000;
			this._addInputPosition = 0;
			if (host && port > 0 && port < 65535)
				this.connect(host, port);
		}

		__class(Socket, 'laya.net.Socket', _super);
		var __proto = Socket.prototype;
		/**
		*<p>连接到指定的主机和端口。</p>
		*<p>连接成功派发 Event.OPEN 事件；连接失败派发 Event.ERROR 事件；连接被关闭派发 Event.CLOSE 事件；接收到数据派发 Event.MESSAGE 事件； 除了 Event.MESSAGE 事件参数为数据内容，其他事件参数都是原生的 HTML DOM Event 对象。</p>
		*@param host 服务器地址。
		*@param port 服务器端口。
		*/
		__proto.connect = function (host, port) {
			var url = "ws://" + host + ":" + port;
			this.connectByUrl(url);
		}

		/**
		*<p>连接到指定的服务端 WebSocket URL。 URL 类似 ws://yourdomain:port。</p>
		*<p>连接成功派发 Event.OPEN 事件；连接失败派发 Event.ERROR 事件；连接被关闭派发 Event.CLOSE 事件；接收到数据派发 Event.MESSAGE 事件； 除了 Event.MESSAGE 事件参数为数据内容，其他事件参数都是原生的 HTML DOM Event 对象。</p>
		*@param url 要连接的服务端 WebSocket URL。 URL 类似 ws://yourdomain:port。
		*/
		__proto.connectByUrl = function (url) {
			var _$this = this;
			if (this._socket != null)
				this.close();
			this._socket && this.cleanSocket();
			if (!this.protocols || this.protocols.length == 0) {
				this._socket = new Browser.window.WebSocket(url);
			} else {
				this._socket = new Browser.window.WebSocket(url, this.protocols);
			}
			this._socket.binaryType = "arraybuffer";
			this._output = new this._byteClass();
			this._output.endian = this.endian;
			this._input = new this._byteClass();
			this._input.endian = this.endian;
			this._addInputPosition = 0;
			this._socket.onopen = function (e) {
				_$this._onOpen(e);
			};
			this._socket.onmessage = function (msg) {
				_$this._onMessage(msg);
			};
			this._socket.onclose = function (e) {
				_$this._onClose(e);
			};
			this._socket.onerror = function (e) {
				_$this._onError(e);
			};
		}

		/**
		*清理socket。
		*/
		__proto.cleanSocket = function () {
			try {
				this._socket.close();
			} catch (e) { }
			this._connected = false;
			this._socket.onopen = null;
			this._socket.onmessage = null;
			this._socket.onclose = null;
			this._socket.onerror = null;
			this._socket = null;
		}

		/**
		*关闭连接。
		*/
		__proto.close = function () {
			if (this._socket != null) {
				try {
					this._socket.close();
				} catch (e) { }
			}
		}

		/**
		*@private
		*连接建立成功 。
		*/
		__proto._onOpen = function (e) {
			this._connected = true;
			this.event(/*laya.events.Event.OPEN*/"open", e);
		}

		/**
		*@private
		*接收到数据处理方法。
		*@param msg 数据。
		*/
		__proto._onMessage = function (msg) {
			if (!msg || !msg.data) return;
			var data = msg.data;
			if (this.disableInput && data) {
				this.event(/*laya.events.Event.MESSAGE*/"message", data);
				return;
			}
			if (this._input.length > 0 && this._input.bytesAvailable < 1) {
				this._input.clear();
				this._addInputPosition = 0;
			};
			var pre = this._input.pos;
			!this._addInputPosition && (this._addInputPosition = 0);
			this._input.pos = this._addInputPosition;
			if (data) {
				if ((typeof data == 'string')) {
					this._input.writeUTFBytes(data);
				} else {
					this._input.writeArrayBuffer(data);
				}
				this._addInputPosition = this._input.pos;
				this._input.pos = pre;
			}
			this.event(/*laya.events.Event.MESSAGE*/"message", data);
		}

		/**
		*@private
		*连接被关闭处理方法。
		*/
		__proto._onClose = function (e) {
			this._connected = false;
			this.event(/*laya.events.Event.CLOSE*/"close", e)
		}

		/**
		*@private
		*出现异常处理方法。
		*/
		__proto._onError = function (e) {
			this.event(/*laya.events.Event.ERROR*/"error", e)
		}

		/**
		*发送数据到服务器。
		*@param data 需要发送的数据，可以是String或者ArrayBuffer。
		*/
		__proto.send = function (data) {
			this._socket.send(data);
		}

		/**
		*发送缓冲区中的数据到服务器。
		*/
		__proto.flush = function () {
			if (this._output && this._output.length > 0) {
				var evt;
				try {
					this._socket && this._socket.send(this._output.__getBuffer().slice(0, this._output.length));
				} catch (e) {
					evt = e;
				}
				this._output.endian = this.endian;
				this._output.clear();
				if (evt) this.event(/*laya.events.Event.ERROR*/"error", evt);
			}
		}

		/**
		*缓存的服务端发来的数据。
		*/
		__getset(0, __proto, 'input', function () {
			return this._input;
		});

		/**
		*表示需要发送至服务端的缓冲区中的数据。
		*/
		__getset(0, __proto, 'output', function () {
			return this._output;
		});

		/**
		*表示此 Socket 对象目前是否已连接。
		*/
		__getset(0, __proto, 'connected', function () {
			return this._connected;
		});

		/**
		*<p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。</p>
		*<p> LITTLE_ENDIAN ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>
		*<p> BIG_ENDIAN ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。</p>
		*/
		__getset(0, __proto, 'endian', function () {
			return this._endian;
		}, function (value) {
			this._endian = value;
			if (this._input != null) this._input.endian = value;
			if (this._output != null) this._output.endian = value;
		});

		Socket.LITTLE_ENDIAN = "littleEndian";
		Socket.BIG_ENDIAN = "bigEndian";
		return Socket;
	})(EventDispatcher)


	/**
	*@private
	*Worker Image加载器
	*/
	//class laya.net.WorkerLoader extends laya.events.EventDispatcher
	var WorkerLoader = (function (_super) {
		function WorkerLoader() {
			this.worker = null;
			WorkerLoader.__super.call(this);
			var _$this = this;
			this.worker = new Browser.window.Worker(WorkerLoader.workerPath);
			this.worker.onmessage = function (evt) {
				_$this.workerMessage(evt.data);
			}
		}

		__class(WorkerLoader, 'laya.net.WorkerLoader', _super);
		var __proto = WorkerLoader.prototype;
		/**
		*@private
		*/
		__proto.workerMessage = function (data) {
			if (data) {
				switch (data.type) {
					case "Image":
						this.imageLoaded(data);
						break;
					case "Msg":
						this.event("image_msg", data.msg);
						break;
				}
			}
		}

		/**
		*@private
		*/
		__proto.imageLoaded = function (data) {
			if (data && data.buffer && data.buffer.length < 10) {
				WorkerLoader._enable = false;
				this._myTrace("buffer lost when postmessage ,disable workerloader");
				this.event(data.url, null);
				this.event("image_err", data.url + "\n" + data.msg);
				return;
			}
			if (!data.dataType) {
				this.event(data.url, null);
				this.event("image_err", data.url + "\n" + data.msg);
				return;
			};
			var canvas, ctx;
			var imageData;
			switch (data.dataType) {
				case "buffer":
					canvas = new HTMLCanvas("2D");
					ctx = canvas.source.getContext("2d");
					imageData = ctx.createImageData(data.width, data.height);
					imageData.data.set(data.buffer);
					canvas.size(imageData.width, imageData.height);
					ctx.putImageData(imageData, 0, 0);
					canvas.memorySize = 0;
					break;
				case "imagedata":
					canvas = new HTMLCanvas("2D");
					ctx = canvas.source.getContext("2d");
					imageData = data.imagedata;
					canvas.size(imageData.width, imageData.height);
					ctx.putImageData(imageData, 0, 0);
					imageData = data.imagedata;
					canvas.memorySize = 0;
					break;
				case "imageBitmap":
					imageData = data.imageBitmap;
					if (!Render.isWebGL) {
						canvas.size(imageData.width, imageData.height);
						ctx.drawImage(imageData, 0, 0);
					}
					canvas = imageData;
					break;
			}
			if (Render.isWebGL)
				/*__JS__ */canvas = new laya.webgl.resource.WebGLImage(canvas, data.url);;
			this.event(data.url, canvas);
		}

		/**
		*@private
		*/
		__proto._myTrace = function (__arg) {
			var arg = arguments;
			var rst = [];
			var i = 0, len = arg.length;
			for (i = 0; i < len; i++) {
				rst.push(arg[i]);
			}
			this.event("image_msg", rst.join(" "));
		}

		/**
		*加载图片
		*@param url 图片地址
		*/
		__proto.loadImage = function (url) {
			var data;
			data = {};
			data.type = "load";
			data.url = url;
			this.worker.postMessage(data);
		}

		/**
		*@private
		*加载图片资源。
		*@param url 资源地址。
		*/
		__proto._loadImage = function (url) {
			var _this = this;
			if (!WorkerLoader._enable || url.toLowerCase().indexOf(".png") < 0) {
				WorkerLoader._preLoadFun.call(_this, url);
				return;
			}
			url = URL.formatURL(url);
			function clear() {
				laya.net.WorkerLoader.I.off(url, _this, onload);
			};
			var onload = function (image) {
				clear();
				if (image) {
					_this["onLoaded"](image);
				} else {
					WorkerLoader._preLoadFun.call(_this, url);
				}
			};
			laya.net.WorkerLoader.I.on(url, _this, onload);
			laya.net.WorkerLoader.I.loadImage(url);
		}

		/**
		*是否启用。
		*/
		__getset(1, WorkerLoader, 'enable', function () {
			return WorkerLoader._enable;
		}, function (v) {
			if (WorkerLoader.disableJSDecode && (!Browser.window.createImageBitmap)) return;
			WorkerLoader._enable = v;
			if (WorkerLoader._enable && WorkerLoader._preLoadFun == null) WorkerLoader._enable = WorkerLoader.__init__();
		});

		WorkerLoader.__init__ = function () {
			if (WorkerLoader._preLoadFun != null) return false;
			if (!Browser.window.Worker) return false;
			WorkerLoader._preLoadFun = Loader["prototype"]["_loadImage"];
			Loader["prototype"]["_loadImage"] = WorkerLoader["prototype"]["_loadImage"];
			if (!WorkerLoader.I) WorkerLoader.I = new WorkerLoader();
			return true;
		}

		WorkerLoader.workerSupported = function () {
			return Browser.window.Worker ? true : false;
		}

		WorkerLoader.IMAGE_LOADED = "image_loaded";
		WorkerLoader.IMAGE_ERR = "image_err";
		WorkerLoader.IMAGE_MSG = "image_msg";
		WorkerLoader.I = null
		WorkerLoader._preLoadFun = null
		WorkerLoader._enable = false;
		WorkerLoader.workerPath = "libs/worker.js";
		WorkerLoader.disableJSDecode = true;
		return WorkerLoader;
	})(EventDispatcher)


	/**
	*@private
	*<code>Resource</code> 资源存取类。
	*/
	//class laya.resource.Resource extends laya.events.EventDispatcher
	var Resource = (function (_super) {
		function Resource() {
			//this.__loaded=false;
			//this._memorySize=0;
			//this._id=0;
			//this._url=null;
			//this._released=false;
			//this._disposed=false;
			//this._resourceManager=null;
			//this._lastUseFrameCount=0;
			//this.lock=false;
			//this.name=null;
			Resource.__super.call(this);
			this._$1__id = ++Resource._uniqueIDCounter;
			this.__loaded = true;
			this._disposed = false;
			Resource._loadedResources.push(this);
			this._released = true;
			this.lock = false;
			this._memorySize = 0;
			this._lastUseFrameCount = -1;
			(ResourceManager.currentResourceManager) && (ResourceManager.currentResourceManager.addResource(this));
		}

		__class(Resource, 'laya.resource.Resource', _super);
		var __proto = Resource.prototype;
		Laya.imps(__proto, { "laya.resource.ICreateResource": true, "laya.resource.IDispose": true })
		/**
		*@private
		*/
		__proto._endLoaded = function () {
			this.__loaded = true;
			this.event(/*laya.events.Event.LOADED*/"loaded", this);
		}

		/**重新创建资源,override it，同时修改memorySize属性、处理startCreate()和compoleteCreate()方法。*/
		__proto.recreateResource = function () {
			this.completeCreate();
		}

		/**销毁资源，override it,同时修改memorySize属性。*/
		__proto.detoryResource = function () { }
		/**
		*激活资源，使用资源前应先调用此函数激活。
		*@param force 是否强制创建。
		*/
		__proto.activeResource = function (force) {
			(force === void 0) && (force = false);
			this._lastUseFrameCount = Stat.loopCount;
			if (!this._disposed && (this._released || force))
				this.recreateResource();
		}

		/**
		*释放资源。
		*@param force 是否强制释放。
		*@return 是否成功释放。
		*/
		__proto.releaseResource = function (force) {
			(force === void 0) && (force = false);
			if (!force && this.lock)
				return false;
			if (!this._released || force) {
				this.detoryResource();
				this._released = true;
				this._lastUseFrameCount = -1;
				this.event(/*laya.events.Event.RELEASED*/"released", this);
				return true;
			} else {
				return false;
			}
		}

		/**
		*@private
		*/
		__proto.onAsynLoaded = function (url, data, params) {
			throw new Error("Resource: must override this function!");
		}

		/**
		*<p>彻底处理资源，处理后不能恢复。</p>
		*<p><b>注意：</b>会强制解锁清理。</p>
		*/
		__proto.dispose = function () {
			if (this._disposed)
				return;
			if (this._resourceManager !== null)
				this._resourceManager.removeResource(this);
			this._disposed = true;
			this.lock = false;
			this.releaseResource();
			var index = Resource._loadedResources.indexOf(this);
			(index !== -1) && (Resource._loadedResources.splice(index, 1));
			Loader.clearRes(this._url);
		}

		/**完成资源激活。*/
		__proto.completeCreate = function () {
			this._released = false;
			this.event(/*laya.events.Event.RECOVERED*/"recovered", this);
		}

		/**
		*@private
		*/
		/**
		*占用内存尺寸。
		*/
		__getset(0, __proto, 'memorySize', function () {
			return this._memorySize;
		}, function (value) {
			var offsetValue = value - this._memorySize;
			this._memorySize = value;
			this.resourceManager && this.resourceManager.addSize(offsetValue);
		});

		/**
		*@private
		*/
		__getset(0, __proto, '_loaded', null, function (value) {
			this.__loaded = value;
		});

		/**
		*获取是否已加载完成。
		*/
		__getset(0, __proto, 'loaded', function () {
			return this.__loaded;
		});

		/**
		*获取唯一标识ID,通常用于识别。
		*/
		__getset(0, __proto, 'id', function () {
			return this._$1__id;
		});

		/**
		*资源管理员。
		*/
		__getset(0, __proto, 'resourceManager', function () {
			return this._resourceManager;
		});

		/**
		*设置资源的URL地址。
		*@param value URL地址。
		*/
		/**
		*获取资源的URL地址。
		*@return URL地址。
		*/
		__getset(0, __proto, 'url', function () {
			return this._url;
		}, function (value) {
			this._url = value;
		});

		/**
		*是否已处理。
		*/
		__getset(0, __proto, 'disposed', function () {
			return this._disposed;
		});

		/**
		*是否已释放。
		*/
		__getset(0, __proto, 'released', function () {
			return this._released;
		});

		Resource.getLoadedResourceByIndex = function (index) {
			return Resource._loadedResources[index];
		}

		Resource.getLoadedResourcesCount = function () {
			return Resource._loadedResources.length;
		}

		Resource._uniqueIDCounter = 0;
		Resource._loadedResources = [];
		return Resource;
	})(EventDispatcher)


	/**
	*<code>Texture</code> 是一个纹理处理类。
	*/
	//class laya.resource.Texture extends laya.events.EventDispatcher
	var Texture = (function (_super) {
		function Texture(bitmap, uv) {
			//this.bitmap=null;
			//this.uv=null;
			this.offsetX = 0;
			this.offsetY = 0;
			this.sourceWidth = 0;
			this.sourceHeight = 0;
			//this._loaded=false;
			this._w = 0;
			this._h = 0;
			//this.$_GID=NaN;
			//this.url=null;
			this._uvID = 0;
			this._atlasID = -1;
			Texture.__super.call(this);
			if (bitmap) {
				bitmap.useNum++;
			}
			this.setTo(bitmap, uv);
		}

		__class(Texture, 'laya.resource.Texture', _super);
		var __proto = Texture.prototype;
		/**
		*设置此对象的位图资源、UV数据信息。
		*@param bitmap 位图资源
		*@param uv UV数据信息
		*/
		__proto.setTo = function (bitmap, uv) {
			this.bitmap = bitmap;
			this.uv = uv || Texture.DEF_UV;
			if (bitmap) {
				this._w = bitmap.width;
				this._h = bitmap.height;
				this.sourceWidth = this.sourceWidth || this._w;
				this.sourceHeight = this.sourceHeight || this._h
				this._loaded = this._w > 0;
				var _this = this;
				if (this._loaded) {
					RunDriver.addToAtlas && RunDriver.addToAtlas(_this);
				} else {
					var bm = bitmap;
					if ((bm instanceof laya.resource.HTMLImage) && bm.image)
						bm.image.addEventListener('load', function (e) {
							RunDriver.addToAtlas && RunDriver.addToAtlas(_this);
						}, false);
				}
			}
		}

		/**@private 激活资源。*/
		__proto.active = function () {
			if (this.bitmap) this.bitmap.activeResource();
		}

		/**
		*销毁纹理（分直接销毁，跟计数销毁两种）。
		*@param forceDispose (default=false)true为强制销毁主纹理，false是通过计数销毁纹理。
		*/
		__proto.destroy = function (forceDispose) {
			(forceDispose === void 0) && (forceDispose = false);
			if (this.bitmap && (this.bitmap).useNum > 0) {
				var temp = this.bitmap;
				if (forceDispose) {
					if (Render.isConchApp && temp.source && temp.source.conchDestroy) {
						this.bitmap.source.conchDestroy();
					}
					this.bitmap = null;
					temp.dispose();
					(temp).useNum = 0;
				} else {
					(temp).useNum--;
					if ((temp).useNum == 0) {
						if (Render.isConchApp && temp.source && temp.source.conchDestroy) {
							this.bitmap.source.conchDestroy();
						}
						this.bitmap = null;
						temp.dispose();
					}
				}
				if (this.url && this === Laya.loader.getRes(this.url)) Laya.loader.clearRes(this.url, forceDispose);
				this._loaded = false;
			}
		}

		/**
		*加载指定地址的图片。
		*@param url 图片地址。
		*/
		__proto.load = function (url) {
			var _$this = this;
			this._loaded = false;
			url = URL.customFormat(url);
			var fileBitmap = (this.bitmap || (this.bitmap = HTMLImage.create(url)));
			if (fileBitmap) fileBitmap.useNum++;
			var _this = this;
			fileBitmap.onload = function () {
				fileBitmap.onload = null;
				_this._loaded = true;
				_$this.sourceWidth = _$this._w = fileBitmap.width;
				_$this.sourceHeight = _$this._h = fileBitmap.height;
				_this.event(/*laya.events.Event.LOADED*/"loaded", this);
				(RunDriver.addToAtlas) && (RunDriver.addToAtlas(_this));
			};
		}

		/**@private */
		__proto.addTextureToAtlas = function (e) {
			RunDriver.addTextureToAtlas(this);
		}

		/**
		*获取Texture上的某个区域的像素点
		*@param x
		*@param y
		*@param width
		*@param height
		*@return 返回像素点集合
		*/
		__proto.getPixels = function (x, y, width, height) {
			if (Render.isWebGL) {
				return RunDriver.getTexturePixels(this, x, y, width, height);
			} else {
				Browser.canvas.size(width, height);
				Browser.canvas.clear();
				Browser.context.drawTexture(this, -x, -y, this.width, this.height, 0, 0);
				var info = Browser.context.getImageData(0, 0, width, height);
			}
			return info.data;
		}

		/**@private */
		__proto.onAsynLoaded = function (url, bitmap) {
			if (bitmap) bitmap.useNum++;
			this.setTo(bitmap, this.uv);
		}

		/**激活并获取资源。*/
		__getset(0, __proto, 'source', function () {
			if (!this.bitmap) return null;
			this.bitmap.activeResource();
			return this.bitmap.source;
		});

		/**
		*表示是否加载成功，只能表示初次载入成功（通常包含下载和载入）,并不能完全表示资源是否可立即使用（资源管理机制释放影响等）。
		*/
		__getset(0, __proto, 'loaded', function () {
			return this._loaded;
		});

		/**
		*表示资源是否已释放。
		*/
		__getset(0, __proto, 'released', function () {
			if (!this.bitmap) return true;
			return this.bitmap.released;
		});

		/**实际宽度。*/
		__getset(0, __proto, 'width', function () {
			if (this._w) return this._w;
			return (this.uv && this.uv !== Texture.DEF_UV) ? (this.uv[2] - this.uv[0]) * this.bitmap.width : this.bitmap.width;
		}, function (value) {
			this._w = value;
			this.sourceWidth || (this.sourceWidth = value);
		});

		/**
		*通过外部设置是否启用纹理平铺(后面要改成在着色器里计算)
		*/
		/**
		*获取当前纹理是否启用了纹理平铺
		*/
		__getset(0, __proto, 'repeat', function () {
			if (Render.isWebGL && this.bitmap) {
				return this.bitmap.repeat;
			}
			return true;
		}, function (value) {
			if (value) {
				if (Render.isWebGL && this.bitmap) {
					this.bitmap.repeat = value;
					if (value) {
						this.bitmap.enableMerageInAtlas = false;
					}
				}
			}
		});

		/**实际高度。*/
		__getset(0, __proto, 'height', function () {
			if (this._h) return this._h;
			return (this.uv && this.uv !== Texture.DEF_UV) ? (this.uv[5] - this.uv[1]) * this.bitmap.height : this.bitmap.height;
		}, function (value) {
			this._h = value;
			this.sourceHeight || (this.sourceHeight = value);
		});

		/**
		*设置线性采样的状态（目前只能第一次绘制前设置false生效,来关闭线性采样）。
		*/
		/**
		*获取当前纹理是否启用了线性采样。
		*/
		__getset(0, __proto, 'isLinearSampling', function () {
			return Render.isWebGL ? (this.bitmap.minFifter != 0x2600) : true;
		}, function (value) {
			if (!value && Render.isWebGL) {
				if (!value && (this.bitmap.minFifter == -1) && (this.bitmap.magFifter == -1)) {
					this.bitmap.minFifter = 0x2600;
					this.bitmap.magFifter = 0x2600;
					this.bitmap.enableMerageInAtlas = false;
				}
			}
		});

		Texture.moveUV = function (offsetX, offsetY, uv) {
			for (var i = 0; i < 8; i += 2) {
				uv[i] += offsetX;
				uv[i + 1] += offsetY;
			}
			return uv;
		}

		Texture.create = function (source, x, y, width, height, offsetX, offsetY, sourceWidth, sourceHeight) {
			(offsetX === void 0) && (offsetX = 0);
			(offsetY === void 0) && (offsetY = 0);
			(sourceWidth === void 0) && (sourceWidth = 0);
			(sourceHeight === void 0) && (sourceHeight = 0);
			var btex = (source instanceof laya.resource.Texture);
			var uv = btex ? source.uv : Texture.DEF_UV;
			var bitmap = btex ? source.bitmap : source;
			var bIsAtlas = RunDriver.isAtlas(bitmap);
			if (bIsAtlas) {
				var atlaser = bitmap._atlaser;
				var nAtlasID = (source)._atlasID;
				if (nAtlasID == -1) {
					throw new Error("create texture error");
				}
				bitmap = atlaser._inAtlasTextureBitmapValue[nAtlasID];
				uv = atlaser._inAtlasTextureOriUVValue[nAtlasID];
			};
			var tex = new Texture(bitmap, null);
			if (bitmap.width && (x + width) > bitmap.width) width = bitmap.width - x;
			if (bitmap.height && (y + height) > bitmap.height) height = bitmap.height - y;
			tex.width = width;
			tex.height = height;
			tex.offsetX = offsetX;
			tex.offsetY = offsetY;
			tex.sourceWidth = sourceWidth || width;
			tex.sourceHeight = sourceHeight || height;
			var dwidth = 1 / bitmap.width;
			var dheight = 1 / bitmap.height;
			x *= dwidth;
			y *= dheight;
			width *= dwidth;
			height *= dheight;
			var u1 = tex.uv[0], v1 = tex.uv[1], u2 = tex.uv[4], v2 = tex.uv[5];
			var inAltasUVWidth = (u2 - u1), inAltasUVHeight = (v2 - v1);
			var oriUV = Texture.moveUV(uv[0], uv[1], [x, y, x + width, y, x + width, y + height, x, y + height]);
			tex.uv = [u1 + oriUV[0] * inAltasUVWidth, v1 + oriUV[1] * inAltasUVHeight, u2 - (1 - oriUV[2]) * inAltasUVWidth, v1 + oriUV[3] * inAltasUVHeight, u2 - (1 - oriUV[4]) * inAltasUVWidth, v2 - (1 - oriUV[5]) * inAltasUVHeight, u1 + oriUV[6] * inAltasUVWidth, v2 - (1 - oriUV[7]) * inAltasUVHeight];
			if (bIsAtlas) {
				tex.addTextureToAtlas();
			}
			return tex;
		}

		Texture.createFromTexture = function (texture, x, y, width, height) {
			var rect = Rectangle.TEMP.setTo(x - texture.offsetX, y - texture.offsetY, width, height);
			var result = rect.intersection(Texture._rect1.setTo(0, 0, texture.width, texture.height), Texture._rect2);
			if (result)
				var tex = Texture.create(texture, result.x, result.y, result.width, result.height, result.x - rect.x, result.y - rect.y, width, height);
			else return null;
			tex.bitmap.useNum--;
			return tex;
		}

		Texture.DEF_UV = [0, 0, 1.0, 0, 1.0, 1.0, 0, 1.0];
		Texture.INV_UV = [0, 1, 1.0, 1, 1.0, 0.0, 0, 0.0];
		Texture._rect1 = new Rectangle();
		Texture._rect2 = new Rectangle();
		return Texture;
	})(EventDispatcher)


	/**
	*<code>TimeLine</code> 是一个用来创建时间轴动画的类。
	*/
	//class laya.utils.TimeLine extends laya.events.EventDispatcher
	var TimeLine = (function (_super) {
		var tweenData;
		function TimeLine() {
			this._labelDic = null;
			this._tweenDic = {};
			this._tweenDataList = [];
			this._endTweenDataList = null;
			this._currTime = 0;
			this._lastTime = 0;
			this._startTime = 0;
			this._index = 0;
			this._gidIndex = 0;
			this._firstTweenDic = {};
			this._startTimeSort = false;
			this._endTimeSort = false;
			this._loopKey = false;
			this.scale = 1;
			this._frameRate = 60;
			this._frameIndex = 0;
			this._total = 0;
			TimeLine.__super.call(this);
		}

		__class(TimeLine, 'laya.utils.TimeLine', _super);
		var __proto = TimeLine.prototype;
		/**
		*控制一个对象，从当前点移动到目标点。
		*@param target 要控制的对象。
		*@param props 要控制对象的属性。
		*@param duration 对象TWEEN的时间。
		*@param ease 缓动类型
		*@param offset 相对于上一个对象，偏移多长时间（单位：毫秒）。
		*/
		__proto.to = function (target, props, duration, ease, offset) {
			(offset === void 0) && (offset = 0);
			return this._create(target, props, duration, ease, offset, true);
		}

		/**
		*从 props 属性，缓动到当前状态。
		*@param target target 目标对象(即将更改属性值的对象)
		*@param props 要控制对象的属性
		*@param duration 对象TWEEN的时间
		*@param ease 缓动类型
		*@param offset 相对于上一个对象，偏移多长时间（单位：毫秒）
		*/
		__proto.from = function (target, props, duration, ease, offset) {
			(offset === void 0) && (offset = 0);
			return this._create(target, props, duration, ease, offset, false);
		}

		/**@private */
		__proto._create = function (target, props, duration, ease, offset, isTo) {
			var tTweenData = Pool.getItemByClass("tweenData", tweenData);
			tTweenData.isTo = isTo;
			tTweenData.type = 0;
			tTweenData.target = target;
			tTweenData.duration = duration;
			tTweenData.data = props;
			tTweenData.startTime = this._startTime + offset;
			tTweenData.endTime = tTweenData.startTime + tTweenData.duration;
			tTweenData.ease = ease;
			this._startTime = Math.max(tTweenData.endTime, this._startTime);
			this._tweenDataList.push(tTweenData);
			this._startTimeSort = true;
			this._endTimeSort = true;
			return this;
		}

		/**
		*在时间队列中加入一个标签。
		*@param label 标签名称。
		*@param offset 标签相对于上个动画的偏移时间(单位：毫秒)。
		*/
		__proto.addLabel = function (label, offset) {
			var tTweenData = Pool.getItemByClass("tweenData", tweenData);
			tTweenData.type = 1;
			tTweenData.data = label;
			tTweenData.endTime = tTweenData.startTime = this._startTime + offset;
			this._labelDic || (this._labelDic = {});
			this._labelDic[label] = tTweenData;
			this._tweenDataList.push(tTweenData);
			return this;
		}

		/**
		*移除指定的标签
		*@param label
		*/
		__proto.removeLabel = function (label) {
			if (this._labelDic && this._labelDic[label]) {
				var tTweenData = this._labelDic[label];
				if (tTweenData) {
					var tIndex = this._tweenDataList.indexOf(tTweenData);
					if (tIndex > -1) {
						this._tweenDataList.splice(tIndex, 1);
					}
				}
				delete this._labelDic[label];
			}
		}

		/**
		*动画从整个动画的某一时间开始。
		*@param time(单位：毫秒)。
		*/
		__proto.gotoTime = function (time) {
			if (this._tweenDataList == null || this._tweenDataList.length == 0) return;
			var tTween;
			var tObject;
			for (var p in this._firstTweenDic) {
				tObject = this._firstTweenDic[p];
				if (tObject) {
					for (var tDataP in tObject) {
						if (tObject.diyTarget.hasOwnProperty(tDataP)) {
							tObject.diyTarget[tDataP] = tObject[tDataP];
						}
					}
				}
			}
			for (p in this._tweenDic) {
				tTween = this._tweenDic[p];
				tTween.clear();
				delete this._tweenDic[p];
			}
			this._index = 0;
			this._gidIndex = 0;
			this._currTime = time;
			this._lastTime = Browser.now();
			var tTweenDataCopyList;
			if (this._endTweenDataList == null || this._endTimeSort) {
				this._endTimeSort = false;
				this._endTweenDataList = tTweenDataCopyList = this._tweenDataList.concat();
				function Compare(paraA, paraB) {
					if (paraA.endTime > paraB.endTime) {
						return 1;
					} else if (paraA.endTime < paraB.endTime) {
						return -1;
					} else {
						return 0;
					}
				}
				tTweenDataCopyList.sort(Compare);
			} else {
				tTweenDataCopyList = this._endTweenDataList
			};
			var tTweenData;
			for (var i = 0, n = tTweenDataCopyList.length; i < n; i++) {
				tTweenData = tTweenDataCopyList[i];
				if (tTweenData.type == 0) {
					if (time >= tTweenData.endTime) {
						this._index = Math.max(this._index, i + 1);
						var props = tTweenData.data;
						if (tTweenData.isTo) {
							for (var tP in props) {
								tTweenData.target[tP] = props[tP];
							}
						}
					} else {
						break;
					}
				}
			}
			for (i = 0, n = this._tweenDataList.length; i < n; i++) {
				tTweenData = this._tweenDataList[i];
				if (tTweenData.type == 0) {
					if (time >= tTweenData.startTime && time < tTweenData.endTime) {
						this._index = Math.max(this._index, i + 1);
						this._gidIndex++;
						tTween = Pool.getItemByClass("tween", Tween);
						tTween._create(tTweenData.target, tTweenData.data, tTweenData.duration, tTweenData.ease, Handler.create(this, this._animComplete, [this._gidIndex]), 0, false, tTweenData.isTo, true, false);
						tTween.setStartTime(this._currTime - (time - tTweenData.startTime));
						tTween._updateEase(this._currTime);
						tTween.gid = this._gidIndex;
						this._tweenDic[this._gidIndex] = tTween;
					}
				}
			}
		}

		/**
		*从指定的标签开始播。
		*@param Label 标签名。
		*/
		__proto.gotoLabel = function (Label) {
			if (this._labelDic == null) return;
			var tLabelData = this._labelDic[Label];
			if (tLabelData) this.gotoTime(tLabelData.startTime);
		}

		/**
		*暂停整个动画。
		*/
		__proto.pause = function () {
			Laya.timer.clear(this, this._update);
		}

		/**
		*恢复暂停动画的播放。
		*/
		__proto.resume = function () {
			this.play(this._currTime, this._loopKey);
		}

		/**
		*播放动画。
		*@param timeOrLabel 开启播放的时间点或标签名。
		*@param loop 是否循环播放。
		*/
		__proto.play = function (timeOrLabel, loop) {
			(timeOrLabel === void 0) && (timeOrLabel = 0);
			(loop === void 0) && (loop = false);
			if (!this._tweenDataList) return;
			if (this._startTimeSort) {
				this._startTimeSort = false;
				function Compare(paraA, paraB) {
					if (paraA.startTime > paraB.startTime) {
						return 1;
					} else if (paraA.startTime < paraB.startTime) {
						return -1;
					} else {
						return 0;
					}
				}
				this._tweenDataList.sort(Compare);
				for (var i = 0, n = this._tweenDataList.length; i < n; i++) {
					var tTweenData = this._tweenDataList[i];
					if (tTweenData != null && tTweenData.type == 0) {
						var tTarget = tTweenData.target;
						var gid = (tTarget.$_GID || (tTarget.$_GID = Utils.getGID()));
						var tSrcData = null;
						if (this._firstTweenDic[gid] == null) {
							tSrcData = {};
							tSrcData.diyTarget = tTarget;
							this._firstTweenDic[gid] = tSrcData;
						} else {
							tSrcData = this._firstTweenDic[gid];
						}
						for (var p in tTweenData.data) {
							if (tSrcData[p] == null) {
								tSrcData[p] = tTarget[p];
							}
						}
					}
				}
			}
			if ((typeof timeOrLabel == 'string')) {
				this.gotoLabel(timeOrLabel);
			} else {
				this.gotoTime(timeOrLabel);
			}
			this._loopKey = loop;
			this._lastTime = Browser.now();
			Laya.timer.frameLoop(1, this, this._update);
		}

		/**
		*更新当前动画。
		*/
		__proto._update = function () {
			if (this._currTime >= this._startTime) {
				if (this._loopKey) {
					this._complete();
					if (!this._tweenDataList) return;
					this.gotoTime(0);
				} else {
					for (var p in this._tweenDic) {
						tTween = this._tweenDic[p];
						tTween.complete();
					}
					this._complete();
					this.pause();
					return;
				}
			};
			var tNow = Browser.now();
			var tFrameTime = tNow - this._lastTime;
			var tCurrTime = this._currTime += tFrameTime * this.scale;
			this._lastTime = tNow;
			for (p in this._tweenDic) {
				tTween = this._tweenDic[p];
				tTween._updateEase(tCurrTime);
			};
			var tTween;
			if (this._tweenDataList.length != 0 && this._index < this._tweenDataList.length) {
				var tTweenData = this._tweenDataList[this._index];
				if (tCurrTime >= tTweenData.startTime) {
					this._index++;
					if (tTweenData.type == 0) {
						this._gidIndex++;
						tTween = Pool.getItemByClass("tween", Tween);
						tTween._create(tTweenData.target, tTweenData.data, tTweenData.duration, tTweenData.ease, Handler.create(this, this._animComplete, [this._gidIndex]), 0, false, tTweenData.isTo, true, false);
						tTween.setStartTime(tCurrTime);
						tTween.gid = this._gidIndex;
						this._tweenDic[this._gidIndex] = tTween;
						tTween._updateEase(tCurrTime);
					} else {
						this.event(/*laya.events.Event.LABEL*/"label", tTweenData.data);
					}
				}
			}
		}

		/**
		*指定的动画索引处的动画播放完成后，把此动画从列表中删除。
		*@param index
		*/
		__proto._animComplete = function (index) {
			var tTween = this._tweenDic[index];
			if (tTween) delete this._tweenDic[index];
		}

		/**@private */
		__proto._complete = function () {
			this.event(/*laya.events.Event.COMPLETE*/"complete");
		}

		/**
		*重置所有对象，复用对象的时候使用。
		*/
		__proto.reset = function () {
			var p;
			if (this._labelDic) {
				for (p in this._labelDic) {
					delete this._labelDic[p];
				}
			};
			var tTween;
			for (p in this._tweenDic) {
				tTween = this._tweenDic[p];
				tTween.clear();
				delete this._tweenDic[p];
			}
			for (p in this._firstTweenDic) {
				delete this._firstTweenDic[p];
			}
			this._endTweenDataList = null;
			if (this._tweenDataList && this._tweenDataList.length) {
				var i = 0, len = 0;
				len = this._tweenDataList.length;
				for (i = 0; i < len; i++) {
					if (this._tweenDataList[i])
						this._tweenDataList[i].destroy();
				}
			}
			this._tweenDataList.length = 0;
			this._currTime = 0;
			this._lastTime = 0;
			this._startTime = 0;
			this._index = 0;
			this._gidIndex = 0;
			this.scale = 1;
			Laya.timer.clear(this, this._update);
		}

		/**
		*彻底销毁此对象。
		*/
		__proto.destroy = function () {
			this.reset();
			this._labelDic = null;
			this._tweenDic = null;
			this._tweenDataList = null;
			this._firstTweenDic = null;
		}

		/**
		*@private
		*设置帧索引
		*/
		/**
		*@private
		*得到帧索引
		*/
		__getset(0, __proto, 'index', function () {
			return this._frameIndex;
		}, function (value) {
			this._frameIndex = value;
			this.gotoTime(this._frameIndex / this._frameRate * 1000);
		});

		/**
		*得到总帧数。
		*/
		__getset(0, __proto, 'total', function () {
			this._total = Math.floor(this._startTime / 1000 * this._frameRate);
			return this._total;
		});

		TimeLine.to = function (target, props, duration, ease, offset) {
			(offset === void 0) && (offset = 0);
			return (new TimeLine()).to(target, props, duration, ease, offset);
		}

		TimeLine.from = function (target, props, duration, ease, offset) {
			(offset === void 0) && (offset = 0);
			return (new TimeLine()).from(target, props, duration, ease, offset);
		}

		TimeLine.__init$ = function () {
			//class tweenData
			tweenData = (function () {
				function tweenData() {
					this.type = 0;
					this.isTo = true;
					this.startTime = NaN;
					this.endTime = NaN;
					this.target = null;
					this.duration = NaN;
					this.ease = null;
					this.data = null;
				}
				__class(tweenData, '');
				var __proto = tweenData.prototype;
				__proto.destroy = function () {
					this.target = null;
					this.ease = null;
					this.data = null;
					this.isTo = true;
					this.type = 0;
					Pool.recover("tweenData", this);
				}
				return tweenData;
			})()
		}

		return TimeLine;
	})(EventDispatcher)


	/**
	*<p> <code>Sprite</code> 是基本的显示图形的显示列表节点。 <code>Sprite</code> 默认没有宽高，默认不接受鼠标事件。通过 <code>graphics</code> 可以绘制图片或者矢量图，支持旋转，缩放，位移等操作。<code>Sprite</code>同时也是容器类，可用来添加多个子节点。</p>
	*<p>注意： <code>Sprite</code> 默认没有宽高，可以通过<code>getBounds</code>函数获取；也可手动设置宽高；还可以设置<code>autoSize=true</code>，然后再获取宽高。<code>Sprite</code>的宽高一般用于进行碰撞检测和排版，并不影响显示图像大小，如果需要更改显示图像大小，请使用 <code>scaleX</code> ， <code>scaleY</code> ， <code>scale</code>。</p>
	*<p> <code>Sprite</code> 默认不接受鼠标事件，即<code>mouseEnabled=false</code>，但是只要对其监听任意鼠标事件，会自动打开自己以及所有父对象的<code>mouseEnabled=true</code>。所以一般也无需手动设置<code>mouseEnabled</code>。</p>
	*<p>LayaAir引擎API设计精简巧妙。核心显示类只有一个<code>Sprite</code>。<code>Sprite</code>针对不同的情况做了渲染优化，所以保证一个类实现丰富功能的同时，又达到高性能。</p>
	*
	*@example <caption>创建了一个 <code>Sprite</code> 实例。</caption>
	*package
	*{
		*import laya.display.Sprite;
		*import laya.events.Event;
		*
		*public class Sprite_Example
		*{
			*private var sprite:Sprite;
			*private var shape:Sprite
			*public function Sprite_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*onInit();
				*}
			*private function onInit():void
			*{
				*sprite=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
				*sprite.loadImage("resource/ui/bg.png");//加载并显示图片。
				*sprite.x=200;//设置 sprite 对象相对于父容器的水平方向坐标值。
				*sprite.y=200;//设置 sprite 对象相对于父容器的垂直方向坐标值。
				*sprite.pivotX=0;//设置 sprite 对象的水平方法轴心点坐标。
				*sprite.pivotY=0;//设置 sprite 对象的垂直方法轴心点坐标。
				*Laya.stage.addChild(sprite);//将此 sprite 对象添加到显示列表。
				*sprite.on(Event.CLICK,this,onClickSprite);//给 sprite 对象添加点击事件侦听。
				*shape=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
				*shape.graphics.drawRect(0,0,100,100,"#ccff00","#ff0000",2);//绘制一个有边框的填充矩形。
				*shape.x=400;//设置 shape 对象相对于父容器的水平方向坐标值。
				*shape.y=200;//设置 shape 对象相对于父容器的垂直方向坐标值。
				*shape.width=100;//设置 shape 对象的宽度。
				*shape.height=100;//设置 shape 对象的高度。
				*shape.pivotX=50;//设置 shape 对象的水平方法轴心点坐标。
				*shape.pivotY=50;//设置 shape 对象的垂直方法轴心点坐标。
				*Laya.stage.addChild(shape);//将此 shape 对象添加到显示列表。
				*shape.on(Event.CLICK,this,onClickShape);//给 shape 对象添加点击事件侦听。
				*}
			*private function onClickSprite():void
			*{
				*trace("点击 sprite 对象。");
				*sprite.rotation+=5;//旋转 sprite 对象。
				*}
			*private function onClickShape():void
			*{
				*trace("点击 shape 对象。");
				*shape.rotation+=5;//旋转 shape 对象。
				*}
			*}
		*}
	*
	*@example
	*var sprite;
	*var shape;
	*Sprite_Example();
	*function Sprite_Example()
	*{
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*onInit();
		*}
	*function onInit()
	*{
		*sprite=new laya.display.Sprite();//创建一个 Sprite 类的实例对象 sprite 。
		*sprite.loadImage("resource/ui/bg.png");//加载并显示图片。
		*sprite.x=200;//设置 sprite 对象相对于父容器的水平方向坐标值。
		*sprite.y=200;//设置 sprite 对象相对于父容器的垂直方向坐标值。
		*sprite.pivotX=0;//设置 sprite 对象的水平方法轴心点坐标。
		*sprite.pivotY=0;//设置 sprite 对象的垂直方法轴心点坐标。
		*Laya.stage.addChild(sprite);//将此 sprite 对象添加到显示列表。
		*sprite.on(Event.CLICK,this,onClickSprite);//给 sprite 对象添加点击事件侦听。
		*shape=new laya.display.Sprite();//创建一个 Sprite 类的实例对象 sprite 。
		*shape.graphics.drawRect(0,0,100,100,"#ccff00","#ff0000",2);//绘制一个有边框的填充矩形。
		*shape.x=400;//设置 shape 对象相对于父容器的水平方向坐标值。
		*shape.y=200;//设置 shape 对象相对于父容器的垂直方向坐标值。
		*shape.width=100;//设置 shape 对象的宽度。
		*shape.height=100;//设置 shape 对象的高度。
		*shape.pivotX=50;//设置 shape 对象的水平方法轴心点坐标。
		*shape.pivotY=50;//设置 shape 对象的垂直方法轴心点坐标。
		*Laya.stage.addChild(shape);//将此 shape 对象添加到显示列表。
		*shape.on(laya.events.Event.CLICK,this,onClickShape);//给 shape 对象添加点击事件侦听。
		*}
	*function onClickSprite()
	*{
		*console.log("点击 sprite 对象。");
		*sprite.rotation+=5;//旋转 sprite 对象。
		*}
	*function onClickShape()
	*{
		*console.log("点击 shape 对象。");
		*shape.rotation+=5;//旋转 shape 对象。
		*}
	*
	*@example
	*import Sprite=laya.display.Sprite;
	*class Sprite_Example {
		*private sprite:Sprite;
		*private shape:Sprite
		*public Sprite_Example(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*this.onInit();
			*}
		*private onInit():void {
			*this.sprite=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
			*this.sprite.loadImage("resource/ui/bg.png");//加载并显示图片。
			*this.sprite.x=200;//设置 sprite 对象相对于父容器的水平方向坐标值。
			*this.sprite.y=200;//设置 sprite 对象相对于父容器的垂直方向坐标值。
			*this.sprite.pivotX=0;//设置 sprite 对象的水平方法轴心点坐标。
			*this.sprite.pivotY=0;//设置 sprite 对象的垂直方法轴心点坐标。
			*Laya.stage.addChild(this.sprite);//将此 sprite 对象添加到显示列表。
			*this.sprite.on(laya.events.Event.CLICK,this,this.onClickSprite);//给 sprite 对象添加点击事件侦听。
			*this.shape=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
			*this.shape.graphics.drawRect(0,0,100,100,"#ccff00","#ff0000",2);//绘制一个有边框的填充矩形。
			*this.shape.x=400;//设置 shape 对象相对于父容器的水平方向坐标值。
			*this.shape.y=200;//设置 shape 对象相对于父容器的垂直方向坐标值。
			*this.shape.width=100;//设置 shape 对象的宽度。
			*this.shape.height=100;//设置 shape 对象的高度。
			*this.shape.pivotX=50;//设置 shape 对象的水平方法轴心点坐标。
			*this.shape.pivotY=50;//设置 shape 对象的垂直方法轴心点坐标。
			*Laya.stage.addChild(this.shape);//将此 shape 对象添加到显示列表。
			*this.shape.on(laya.events.Event.CLICK,this,this.onClickShape);//给 shape 对象添加点击事件侦听。
			*}
		*private onClickSprite():void {
			*console.log("点击 sprite 对象。");
			*this.sprite.rotation+=5;//旋转 sprite 对象。
			*}
		*private onClickShape():void {
			*console.log("点击 shape 对象。");
			*this.shape.rotation+=5;//旋转 shape 对象。
			*}
		*}
	*/
	//class laya.display.Sprite extends laya.display.Node
	var Sprite = (function (_super) {
		function Sprite() {
			this._transform = null;
			this._tfChanged = false;
			this._x = 0;
			this._y = 0;
			this._width = 0;
			this._height = 0;
			this._repaint = 1;
			this._mouseEnableState = 0;
			this._zOrder = 0;
			this._graphics = null;
			this._renderType = 0;
			this._optimizeScrollRect = false;
			this._texture = null;
			this.mouseThrough = false;
			this.autoSize = false;
			this.hitTestPrior = false;
			this.viewport = null;
			Sprite.__super.call(this);
			this._style = Style.EMPTY;
		}

		__class(Sprite, 'laya.display.Sprite', _super);
		var __proto = Sprite.prototype;
		Laya.imps(__proto, { "laya.display.ILayout": true })
		/**@private */
		__proto.createConchModel = function () {
			return /*__JS__ */new ConchNode();
		}

		/**@inheritDoc */
		__proto.destroy = function (destroyChild) {
			(destroyChild === void 0) && (destroyChild = true);
			_super.prototype.destroy.call(this, destroyChild);
			this._style && this._style.destroy();
			this._transform = null;
			this._style = null;
			this._graphics = null;
		}

		/**根据zOrder进行重新排序。*/
		__proto.updateZOrder = function () {
			Utils.updateOrder(this._childs) && this.repaint();
		}

		/**在设置cacheAs的情况下，调用此方法会重新刷新缓存。*/
		__proto.reCache = function () {
			if (this._$P.cacheCanvas) this._$P.cacheCanvas.reCache = true;
			this._repaint = 1;
		}

		/**
		*<p>设置对象在自身坐标系下的边界范围。与 <code>getSelfBounds</code> 对应。当 autoSize==true 时，会影响对象宽高。设置后，当需要获取自身边界范围时，就不再需要计算，合理使用能提高性能。比如 <code>getBounds</code> 会优先使用 <code>setBounds</code> 指定的值，如果没有指定则进行计算，此计算会对性能消耗比较大。</p>
		*<p><b>注意：</b> <code>setBounds</code> 与 <code>getBounds</code> 并非对应相等关系， <code>getBounds</code> 获取的是本对象在父容器坐标系下的边界范围，通过设置 <code>setBounds</code> 会影响 <code>getBounds</code> 的结果。</p>
		*@param bound bounds矩形区域
		*/
		__proto.setBounds = function (bound) {
			this._set$P("uBounds", bound);
		}

		/**
		*<p>获取本对象在父容器坐标系的矩形显示区域。</p>
		*<p><b>注意：</b> 1.计算量较大，尽量少用，如果需要频繁使用，可以通过手动设置 <code>setBounds</code> 来缓存自身边界信息，从而避免比较消耗性能的计算。2. <code>setBounds</code> 与 <code>getBounds</code> 并非对应相等关系， <code>getBounds</code> 获取的是本对象在父容器坐标系下的边界范围，通过设置 <code>setBounds</code> 会影响 <code>getBounds</code> 的结果。</p>
		*@return 矩形区域。
		*/
		__proto.getBounds = function () {
			if (!this._$P.mBounds) this._set$P("mBounds", new Rectangle());
			return Rectangle._getWrapRec(this._boundPointsToParent(), this._$P.mBounds);
		}

		/**
		*获取对象在自身坐标系的边界范围。与 <code>setBounds</code> 对应。
		*<p><b>注意：</b>计算量较大，尽量少用，如果需要频繁使用，可以提前手动设置 <code>setBounds</code> 来缓存自身边界信息，从而避免比较消耗性能的计算。</p>
		*@return 矩形区域。
		*/
		__proto.getSelfBounds = function () {
			if (this._$P.uBounds) return this._$P.uBounds;
			if (!this._$P.mBounds) this._set$P("mBounds", new Rectangle());
			return Rectangle._getWrapRec(this._getBoundPointsM(false), this._$P.mBounds);
		}

		/**
		*@private
		*获取本对象在父容器坐标系的显示区域多边形顶点列表。
		*当显示对象链中有旋转时，返回多边形顶点列表，无旋转时返回矩形的四个顶点。
		*@param ifRotate （可选）之前的对象链中是否有旋转。
		*@return 顶点列表。结构：[x1,y1,x2,y2,x3,y3,...]。
		*/
		__proto._boundPointsToParent = function (ifRotate) {
			(ifRotate === void 0) && (ifRotate = false);
			var pX = 0, pY = 0;
			if (this._style) {
				pX = this._style._tf.translateX;
				pY = this._style._tf.translateY;
				ifRotate = ifRotate || (this._style._tf.rotate !== 0);
				if (this._style.scrollRect) {
					pX += this._style.scrollRect.x;
					pY += this._style.scrollRect.y;
				}
			};
			var pList = this._getBoundPointsM(ifRotate);
			if (!pList || pList.length < 1) return pList;
			if (pList.length != 8) {
				pList = ifRotate ? GrahamScan.scanPList(pList) : Rectangle._getWrapRec(pList, Rectangle.TEMP)._getBoundPoints();
			}
			if (!this.transform) {
				Utils.transPointList(pList, this._x - pX, this._y - pY);
				return pList;
			};
			var tPoint = Point.TEMP;
			var i = 0, len = pList.length;
			for (i = 0; i < len; i += 2) {
				tPoint.x = pList[i];
				tPoint.y = pList[i + 1];
				this.toParentPoint(tPoint);
				pList[i] = tPoint.x;
				pList[i + 1] = tPoint.y;
			}
			return pList;
		}

		/**
		*返回此实例中的绘图对象（ <code>Graphics</code> ）的显示区域，不包括子对象。
		*@param realSize （可选）使用图片的真实大小，默认为false
		*@return 一个 Rectangle 对象，表示获取到的显示区域。
		*/
		__proto.getGraphicBounds = function (realSize) {
			(realSize === void 0) && (realSize = false);
			if (!this._graphics) return Rectangle.TEMP.setTo(0, 0, 0, 0);
			return this._graphics.getBounds(realSize);
		}

		/**
		*@private
		*获取自己坐标系的显示区域多边形顶点列表
		*@param ifRotate （可选）当前的显示对象链是否由旋转
		*@return 顶点列表。结构：[x1,y1,x2,y2,x3,y3,...]。
		*/
		__proto._getBoundPointsM = function (ifRotate) {
			(ifRotate === void 0) && (ifRotate = false);
			if (this._$P.uBounds) return this._$P.uBounds._getBoundPoints();
			if (!this._$P.temBM) this._set$P("temBM", []);
			if (this.scrollRect) {
				var rst = Utils.clearArray(this._$P.temBM);
				var rec = Rectangle.TEMP;
				rec.copyFrom(this.scrollRect);
				Utils.concatArray(rst, rec._getBoundPoints());
				return rst;
			};
			var pList = this._graphics ? this._graphics.getBoundPoints() : Utils.clearArray(this._$P.temBM);
			var child;
			var cList;
			var __childs;
			__childs = this._childs;
			for (var i = 0, n = __childs.length; i < n; i++) {
				child = __childs[i];
				if ((child instanceof laya.display.Sprite) && child.visible == true) {
					cList = child._boundPointsToParent(ifRotate);
					if (cList)
						pList = pList ? Utils.concatArray(pList, cList) : cList;
				}
			}
			return pList;
		}

		/**
		*@private
		*获取样式。
		*@return 样式 Style 。
		*/
		__proto.getStyle = function () {
			this._style === Style.EMPTY && (this._style = new Style());
			return this._style;
		}

		/**
		*@private
		*设置样式。
		*@param value 样式。
		*/
		__proto.setStyle = function (value) {
			this._style = value;
		}

		/**@private */
		__proto._adjustTransform = function () {
			'use strict';
			this._tfChanged = false;
			var style = this._style;
			var tf = style._tf;
			var sx = tf.scaleX, sy = tf.scaleY;
			var m;
			if (tf.rotate || sx !== 1 || sy !== 1 || tf.skewX || tf.skewY) {
				m = this._transform || (this._transform = Matrix.create());
				m.bTransform = true;
				var skx = (tf.rotate - tf.skewX) * 0.0174532922222222;
				var sky = (tf.rotate + tf.skewY) * 0.0174532922222222;
				var cx = Math.cos(sky);
				var ssx = Math.sin(sky);
				var cy = Math.sin(skx);
				var ssy = Math.cos(skx);
				m.a = sx * cx;
				m.b = sx * ssx;
				m.c = -sy * cy;
				m.d = sy * ssy;
				m.tx = m.ty = 0;
				return m;
			} else {
				this._transform && this._transform.destroy();
				this._transform = null;
				this._renderType &= ~ /*laya.renders.RenderSprite.TRANSFORM*/0x04;
			}
			return m;
		}

		/**
		*<p>设置坐标位置。相当于分别设置x和y属性。</p>
		*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.pos(...).scale(...);</p>
		*@param x X轴坐标。
		*@param y Y轴坐标。
		*@param speedMode （可选）是否极速模式，正常是调用this.x=value进行赋值，极速模式直接调用内部函数处理，如果未重写x,y属性，建议设置为急速模式性能更高。
		*@return 返回对象本身。
		*/
		__proto.pos = function (x, y, speedMode) {
			(speedMode === void 0) && (speedMode = false);
			if (this._x !== x || this._y !== y) {
				if (this.destroyed) return this;
				if (speedMode) {
					this._x = x;
					this._y = y;
					this.conchModel && this.conchModel.pos(this._x, this._y);
					var p = this._parent;
					if (p && p._repaint === 0) {
						p._repaint = 1;
						p.parentRepaint();
					}
					if (this._$P.maskParent && this._$P.maskParent._repaint === 0) {
						this._$P.maskParent._repaint = 1;
						this._$P.maskParent.parentRepaint();
					}
				} else {
					this.x = x;
					this.y = y;
				}
			}
			return this;
		}

		/**
		*<p>设置轴心点。相当于分别设置pivotX和pivotY属性。</p>
		*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.pivot(...).pos(...);</p>
		*@param x X轴心点。
		*@param y Y轴心点。
		*@return 返回对象本身。
		*/
		__proto.pivot = function (x, y) {
			this.pivotX = x;
			this.pivotY = y;
			return this;
		}

		/**
		*<p>设置宽高。相当于分别设置width和height属性。</p>
		*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.size(...).pos(...);</p>
		*@param width 宽度值。
		*@param hegiht 高度值。
		*@return 返回对象本身。
		*/
		__proto.size = function (width, height) {
			this.width = width;
			this.height = height;
			return this;
		}

		/**
		*<p>设置缩放。相当于分别设置scaleX和scaleY属性。</p>
		*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.scale(...).pos(...);</p>
		*@param scaleX X轴缩放比例。
		*@param scaleY Y轴缩放比例。
		*@param speedMode （可选）是否极速模式，正常是调用this.scaleX=value进行赋值，极速模式直接调用内部函数处理，如果未重写scaleX,scaleY属性，建议设置为急速模式性能更高。
		*@return 返回对象本身。
		*/
		__proto.scale = function (scaleX, scaleY, speedMode) {
			(speedMode === void 0) && (speedMode = false);
			var style = this.getStyle();
			var _tf = style._tf;
			if (_tf.scaleX != scaleX || _tf.scaleY != scaleY) {
				if (this.destroyed) return this;
				if (speedMode) {
					style.setScale(scaleX, scaleY);
					this._tfChanged = true;
					this.conchModel && this.conchModel.scale(scaleX, scaleY);
					this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
					var p = this._parent;
					if (p && p._repaint === 0) {
						p._repaint = 1;
						p.parentRepaint();
					}
				} else {
					this.scaleX = scaleX;
					this.scaleY = scaleY;
				}
			}
			return this;
		}

		/**
		*<p>设置倾斜角度。相当于分别设置skewX和skewY属性。</p>
		*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.skew(...).pos(...);</p>
		*@param skewX 水平倾斜角度。
		*@param skewY 垂直倾斜角度。
		*@return 返回对象本身
		*/
		__proto.skew = function (skewX, skewY) {
			this.skewX = skewX;
			this.skewY = skewY;
			return this;
		}

		/**
		*更新、呈现显示对象。由系统调用。
		*@param context 渲染的上下文引用。
		*@param x X轴坐标。
		*@param y Y轴坐标。
		*/
		__proto.render = function (context, x, y) {
			Stat.spriteCount++;
			RenderSprite.renders[this._renderType]._fun(this, context, x + this._x, y + this._y);
			this._repaint = 0;
		}

		/**
		*<p>绘制 当前<code>Sprite</code> 到 <code>Canvas</code> 上，并返回一个HtmlCanvas。</p>
		*<p>绘制的结果可以当作图片源，再次绘制到其他Sprite里面，示例：</p>
		*
		*var htmlCanvas:HTMLCanvas=sprite.drawToCanvas(100,100,0,0);//把精灵绘制到canvas上面
		*var texture:Texture=new Texture(htmlCanvas);//使用htmlCanvas创建Texture
		*var sp:Sprite=new Sprite().pos(0,200);//创建精灵并把它放倒200位置
		*sp.graphics.drawTexture(texture);//把截图绘制到精灵上
		*Laya.stage.addChild(sp);//把精灵显示到舞台
		*
		*<p>也可以获取原始图片数据，分享到网上，从而实现截图效果，示例：</p>
		*
		*var htmlCanvas:HTMLCanvas=sprite.drawToCanvas(100,100,0,0);//把精灵绘制到canvas上面
		*var canvas:*=htmlCanvas.getCanvas();//获取原生的canvas对象
		*trace(canvas.toDataURL("image/png"));//打印图片base64信息，可以发给服务器或者保存为图片
		*
		*@param canvasWidth 画布宽度。
		*@param canvasHeight 画布高度。
		*@param x 绘制的 X 轴偏移量。
		*@param y 绘制的 Y 轴偏移量。
		*@return HTMLCanvas 对象。
		*/
		__proto.drawToCanvas = function (canvasWidth, canvasHeight, offsetX, offsetY) {
			if (Render.isConchNode) {
				var canvas = HTMLCanvas.create("2D");
				var context = new RenderContext(canvasWidth, canvasHeight, canvas);
				context.ctx.setCanvasType(1);
				this.conchModel.drawToCanvas(canvas.source, offsetX, offsetY);
				return canvas;
			} else {
				return RunDriver.drawToCanvas(this, this._renderType, canvasWidth, canvasHeight, offsetX, offsetY);
			}
		}

		/**
		*<p>自定义更新、呈现显示对象。一般用来扩展渲染模式，请合理使用，可能会导致在加速器上无法渲染。</p>
		*<p><b>注意</b>不要在此函数内增加或删除树节点，否则会对树节点遍历造成影响。</p>
		*@param context 渲染的上下文引用。
		*@param x X轴坐标。
		*@param y Y轴坐标。
		*/
		__proto.customRender = function (context, x, y) {
			this._renderType |=/*laya.renders.RenderSprite.CUSTOM*/0x400;
		}

		/**
		*@private
		*应用滤镜。
		*/
		__proto._applyFilters = function () {
			if (Render.isWebGL) return;
			var _filters;
			_filters = this._$P.filters;
			if (!_filters || _filters.length < 1) return;
			for (var i = 0, n = _filters.length; i < n; i++) {
				_filters[i].action.apply(this._$P.cacheCanvas);
			}
		}

		/**
		*@private
		*查看当前原件中是否包含发光滤镜。
		*@return 一个 Boolean 值，表示当前原件中是否包含发光滤镜。
		*/
		__proto._isHaveGlowFilter = function () {
			var i = 0, len = 0;
			if (this.filters) {
				for (i = 0; i < this.filters.length; i++) {
					if (this.filters[i].type ==/*laya.filters.Filter.GLOW*/0x08) {
						return true;
					}
				}
			}
			for (i = 0, len = this._childs.length; i < len; i++) {
				if (this._childs[i]._isHaveGlowFilter()) {
					return true;
				}
			}
			return false;
		}

		/**
		*把本地坐标转换为相对stage的全局坐标。
		*@param point 本地坐标点。
		*@param createNewPoint （可选）是否创建一个新的Point对象作为返回值，默认为false，使用输入的point对象返回，减少对象创建开销。
		*@return 转换后的坐标的点。
		*/
		__proto.localToGlobal = function (point, createNewPoint) {
			(createNewPoint === void 0) && (createNewPoint = false);
			if (createNewPoint === true) {
				point = new Point(point.x, point.y);
			};
			var ele = this;
			while (ele) {
				if (ele == Laya.stage) break;
				point = ele.toParentPoint(point);
				ele = ele.parent;
			}
			return point;
		}

		/**
		*把stage的全局坐标转换为本地坐标。
		*@param point 全局坐标点。
		*@param createNewPoint （可选）是否创建一个新的Point对象作为返回值，默认为false，使用输入的point对象返回，减少对象创建开销。
		*@return 转换后的坐标的点。
		*/
		__proto.globalToLocal = function (point, createNewPoint) {
			(createNewPoint === void 0) && (createNewPoint = false);
			if (createNewPoint) {
				point = new Point(point.x, point.y);
			};
			var ele = this;
			var list = [];
			while (ele) {
				if (ele == Laya.stage) break;
				list.push(ele);
				ele = ele.parent;
			};
			var i = list.length - 1;
			while (i >= 0) {
				ele = list[i];
				point = ele.fromParentPoint(point);
				i--;
			}
			return point;
		}

		/**
		*将本地坐标系坐标转转换到父容器坐标系。
		*@param point 本地坐标点。
		*@return 转换后的点。
		*/
		__proto.toParentPoint = function (point) {
			if (!point) return point;
			point.x -= this.pivotX;
			point.y -= this.pivotY;
			if (this.transform) {
				this._transform.transformPoint(point);
			}
			point.x += this._x;
			point.y += this._y;
			var scroll = this._style.scrollRect;
			if (scroll) {
				point.x -= scroll.x;
				point.y -= scroll.y;
			}
			return point;
		}

		/**
		*将父容器坐标系坐标转换到本地坐标系。
		*@param point 父容器坐标点。
		*@return 转换后的点。
		*/
		__proto.fromParentPoint = function (point) {
			if (!point) return point;
			point.x -= this._x;
			point.y -= this._y;
			var scroll = this._style.scrollRect;
			if (scroll) {
				point.x += scroll.x;
				point.y += scroll.y;
			}
			if (this.transform) {
				this._transform.invertTransformPoint(point);
			}
			point.x += this.pivotX;
			point.y += this.pivotY;
			return point;
		}

		/**
		*<p>增加事件侦听器，以使侦听器能够接收事件通知。</p>
		*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
		*@param type 事件的类型。
		*@param caller 事件侦听函数的执行域。
		*@param listener 事件侦听函数。
		*@param args （可选）事件侦听函数的回调参数。
		*@return 此 EventDispatcher 对象。
		*/
		__proto.on = function (type, caller, listener, args) {
			if (this._mouseEnableState !== 1 && this.isMouseEvent(type)) {
				this.mouseEnabled = true;
				this._setBit(/*laya.display.Node.MOUSEENABLE*/0x2, true);
				if (this._parent) {
					this._$2__onDisplay();
				}
				return this._createListener(type, caller, listener, args, false);
			}
			return _super.prototype.on.call(this, type, caller, listener, args);
		}

		/**
		*<p>增加事件侦听器，以使侦听器能够接收事件通知，此侦听事件响应一次后则自动移除侦听。</p>
		*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
		*@param type 事件的类型。
		*@param caller 事件侦听函数的执行域。
		*@param listener 事件侦听函数。
		*@param args （可选）事件侦听函数的回调参数。
		*@return 此 EventDispatcher 对象。
		*/
		__proto.once = function (type, caller, listener, args) {
			if (this._mouseEnableState !== 1 && this.isMouseEvent(type)) {
				this.mouseEnabled = true;
				this._setBit(/*laya.display.Node.MOUSEENABLE*/0x2, true);
				if (this._parent) {
					this._$2__onDisplay();
				}
				return this._createListener(type, caller, listener, args, true);
			}
			return _super.prototype.once.call(this, type, caller, listener, args);
		}

		/**@private */
		__proto._$2__onDisplay = function () {
			if (this._mouseEnableState !== 1) {
				var ele = this;
				ele = ele.parent;
				while (ele && ele._mouseEnableState !== 1) {
					if (ele._getBit(/*laya.display.Node.MOUSEENABLE*/0x2)) break;
					ele.mouseEnabled = true;
					ele._setBit(/*laya.display.Node.MOUSEENABLE*/0x2, true);
					ele = ele.parent;
				}
			}
		}

		/**
		*<p>加载并显示一个图片。功能等同于graphics.loadImage方法。支持异步加载。</p>
		*<p>注意：多次调用loadImage绘制不同的图片，会同时显示。</p>
		*@param url 图片地址。
		*@param x （可选）显示图片的x位置。
		*@param y （可选）显示图片的y位置。
		*@param width （可选）显示图片的宽度，设置为0表示使用图片默认宽度。
		*@param height （可选）显示图片的高度，设置为0表示使用图片默认高度。
		*@param complete （可选）加载完成回调。
		*@return 返回精灵对象本身。
		*/
		__proto.loadImage = function (url, x, y, width, height, complete) {
			var _$this = this;
			(x === void 0) && (x = 0);
			(y === void 0) && (y = 0);
			(width === void 0) && (width = 0);
			(height === void 0) && (height = 0);
			function loaded(tex) {
				if (!_$this.destroyed) {
					_$this.size(x + (width || tex.width), y + (height || tex.height));
					_$this.repaint();
					complete && complete.runWith(tex);
				}
			}
			this.graphics.loadImage(url, x, y, width, height, loaded);
			return this;
		}

		/**cacheAs后，设置自己和父对象缓存失效。*/
		__proto.repaint = function () {
			this.conchModel && this.conchModel.repaint && this.conchModel.repaint();
			if (this._repaint === 0) {
				this._repaint = 1;
				this.parentRepaint();
			}
			if (this._$P && this._$P.maskParent) {
				this._$P.maskParent.repaint();
			}
		}

		/**
		*@private
		*获取是否重新缓存。
		*@return 如果重新缓存值为 true，否则值为 false。
		*/
		__proto._needRepaint = function () {
			return (this._repaint !== 0) && this._$P.cacheCanvas && this._$P.cacheCanvas.reCache;
		}

		/**@private */
		__proto._childChanged = function (child) {
			if (this._childs.length) this._renderType |=/*laya.renders.RenderSprite.CHILDS*/0x800;
			else this._renderType &= ~ /*laya.renders.RenderSprite.CHILDS*/0x800;
			if (child && this._get$P("hasZorder")) Laya.timer.callLater(this, this.updateZOrder);
			this.repaint();
		}

		/**cacheAs时，设置所有父对象缓存失效。 */
		__proto.parentRepaint = function () {
			var p = this._parent;
			if (p && p._repaint === 0) {
				p._repaint = 1;
				p.parentRepaint();
			}
		}

		/**
		*开始拖动此对象。
		*@param area （可选）拖动区域，此区域为当前对象注册点活动区域（不包括对象宽高），可选。
		*@param hasInertia （可选）鼠标松开后，是否还惯性滑动，默认为false，可选。
		*@param elasticDistance （可选）橡皮筋效果的距离值，0为无橡皮筋效果，默认为0，可选。
		*@param elasticBackTime （可选）橡皮筋回弹时间，单位为毫秒，默认为300毫秒，可选。
		*@param data （可选）拖动事件携带的数据，可选。
		*@param disableMouseEvent （可选）禁用其他对象的鼠标检测，默认为false，设置为true能提高性能。
		*@param ratio （可选）惯性阻尼系数，影响惯性力度和时长。
		*/
		__proto.startDrag = function (area, hasInertia, elasticDistance, elasticBackTime, data, disableMouseEvent, ratio) {
			(hasInertia === void 0) && (hasInertia = false);
			(elasticDistance === void 0) && (elasticDistance = 0);
			(elasticBackTime === void 0) && (elasticBackTime = 300);
			(disableMouseEvent === void 0) && (disableMouseEvent = false);
			(ratio === void 0) && (ratio = 0.92);
			this._$P.dragging || (this._set$P("dragging", new Dragging()));
			this._$P.dragging.start(this, area, hasInertia, elasticDistance, elasticBackTime, data, disableMouseEvent, ratio);
		}

		/**停止拖动此对象。*/
		__proto.stopDrag = function () {
			this._$P.dragging && this._$P.dragging.stop();
		}

		/**@private */
		__proto._setDisplay = function (value) {
			if (!value) {
				var cc = this._$P.cacheCanvas;
				if (cc && cc.ctx) {
					Pool.recover("RenderContext", cc.ctx);
					cc.ctx.canvas.size(0, 0);
					cc.ctx = null;
				};
				var fc = this._$P._filterCache;
				if (fc) {
					fc.destroy();
					fc.recycle();
					this._set$P('_filterCache', null);
				}
				this._$P._isHaveGlowFilter && this._set$P('_isHaveGlowFilter', false);
			}
			_super.prototype._setDisplay.call(this, value);
		}

		/**
		*检测某个点是否在此对象内。
		*@param x 全局x坐标。
		*@param y 全局y坐标。
		*@return 表示是否在对象内。
		*/
		__proto.hitTestPoint = function (x, y) {
			var point = this.globalToLocal(Point.TEMP.setTo(x, y));
			var rect = this._$P.hitArea ? this._$P.hitArea : (this._width > 0 && this._height > 0) ? Rectangle.TEMP.setTo(0, 0, this._width, this._height) : this.getSelfBounds();
			return rect.contains(point.x, point.y);
		}

		/**获得相对于本对象上的鼠标坐标信息。*/
		__proto.getMousePoint = function () {
			return this.globalToLocal(Point.TEMP.setTo(Laya.stage.mouseX, Laya.stage.mouseY));
		}

		/**@private */
		__proto._getWords = function () {
			return null;
		}

		/**@private */
		__proto._addChildsToLayout = function (out) {
			var words = this._getWords();
			if (words == null && this._childs.length == 0) return false;
			if (words) {
				for (var i = 0, n = words.length; i < n; i++) {
					out.push(words[i]);
				}
			}
			this._childs.forEach(function (o, index, array) {
				o._style._enableLayout() && o._addToLayout(out);
			});
			return true;
		}

		/**@private */
		__proto._addToLayout = function (out) {
			if (this._style.absolute) return;
			this._style.block ? out.push(this) : (this._addChildsToLayout(out) && (this.x = this.y = 0));
		}

		/**@private */
		__proto._isChar = function () {
			return false;
		}

		/**@private */
		__proto._getCSSStyle = function () {
			return this._style.getCSSStyle();
		}

		/**
		*@private
		*设置指定属性名的属性值。
		*@param name 属性名。
		*@param value 属性值。
		*/
		__proto._setAttributes = function (name, value) {
			switch (name) {
				case 'x':
					this.x = parseFloat(value);
					break;
				case 'y':
					this.y = parseFloat(value);
					break;
				case 'width':
					this.width = parseFloat(value);
					break;
				case 'height':
					this.height = parseFloat(value);
					break;
				default:
					this[name] = value;
			}
		}

		/**
		*@private
		*/
		__proto._layoutLater = function () {
			this.parent && (this.parent)._layoutLater();
		}

		/**
		*<p>指定是否对使用了 scrollRect 的显示对象进行优化处理。默认为false(不优化)。</p>
		*<p>当值为ture时：将对此对象使用了scrollRect 设定的显示区域以外的显示内容不进行渲染，以提高性能(如果子对象有旋转缩放或者中心点偏移，则显示筛选会不精确)。</p>
		*/
		__getset(0, __proto, 'optimizeScrollRect', function () {
			return this._optimizeScrollRect;
		}, function (b) {
			if (this._optimizeScrollRect != b) {
				this._optimizeScrollRect = b;
				this.conchModel && this.conchModel.optimizeScrollRect(b);
			}
		});

		/**
		*设置是否开启自定义渲染，只有开启自定义渲染，才能使用customRender函数渲染。
		*/
		__getset(0, __proto, 'customRenderEnable', null, function (b) {
			if (b) {
				this._renderType |=/*laya.renders.RenderSprite.CUSTOM*/0x400;
				if (Render.isConchNode) {
					Sprite.CustomList.push(this);
					var canvas = new HTMLCanvas("2d");
					canvas._setContext(/*__JS__ */new CanvasRenderingContext2D());
					/*__JS__ */this.customContext = new RenderContext(0, 0, canvas);
					canvas.context.setCanvasType && canvas.context.setCanvasType(2);
					this.conchModel.custom(canvas.context);
				}
			}
		});

		/**
		*指定显示对象是否缓存为静态图像。功能同cacheAs的normal模式。建议优先使用cacheAs代替。
		*/
		__getset(0, __proto, 'cacheAsBitmap', function () {
			return this.cacheAs !== "none";
		}, function (value) {
			this.cacheAs = value ? (this._$P["hasFilter"] ? "none" : "normal") : "none";
		});

		/**
		*<p>指定显示对象是否缓存为静态图像，cacheAs时，子对象发生变化，会自动重新缓存，同时也可以手动调用reCache方法更新缓存。</p>
		*<p>建议把不经常变化的“复杂内容”缓存为静态图像，能极大提高渲染性能。cacheAs有"none"，"normal"和"bitmap"三个值可选。
		*<li>默认为"none"，不做任何缓存。</li>
		*<li>当值为"normal"时，canvas模式下进行画布缓存，webgl模式下进行命令缓存。</li>
		*<li>当值为"bitmap"时，canvas模式下进行依然是画布缓存，webgl模式下使用renderTarget缓存。</li></p>
		*<p>webgl下renderTarget缓存模式缺点：会额外创建renderTarget对象，增加内存开销，缓存面积有最大2048限制，不断重绘时会增加CPU开销。优点：大幅减少drawcall，渲染性能最高。
		*webgl下命令缓存模式缺点：只会减少节点遍历及命令组织，不会减少drawcall数，性能中等。优点：没有额外内存开销，无需renderTarget支持。</p>
		*/
		__getset(0, __proto, 'cacheAs', function () {
			return this._$P.cacheCanvas == null ? "none" : this._$P.cacheCanvas.type;
		}, function (value) {
			var cacheCanvas = this._$P.cacheCanvas;
			if (value === (cacheCanvas ? cacheCanvas.type : "none")) return;
			if (value !== "none") {
				if (!this._getBit(/*laya.display.Node.NOTICE_DISPLAY*/0x1)) this._setUpNoticeType(/*laya.display.Node.NOTICE_DISPLAY*/0x1);
				cacheCanvas || (cacheCanvas = this._set$P("cacheCanvas", Pool.getItemByClass("cacheCanvas", Object)));
				cacheCanvas.type = value;
				cacheCanvas.reCache = true;
				this._renderType |=/*laya.renders.RenderSprite.CANVAS*/0x10;
				if (value == "bitmap") this.conchModel && this.conchModel.cacheAs(1);
				this._set$P("cacheForFilters", false);
			} else {
				if (this._$P["hasFilter"]) {
					this._set$P("cacheForFilters", true);
				} else {
					if (cacheCanvas) {
						var cc = cacheCanvas;
						if (cc && cc.ctx) {
							Pool.recover("RenderContext", cc.ctx);
							cc.ctx.canvas.size(0, 0);
							cc.ctx = null;
						}
						Pool.recover("cacheCanvas", cacheCanvas);
					}
					this._$P.cacheCanvas = null;
					this._renderType &= ~ /*laya.renders.RenderSprite.CANVAS*/0x10;
					this.conchModel && this.conchModel.cacheAs(0);
				}
			}
			this.repaint();
		});

		/**z排序，更改此值，则会按照值的大小对同一容器的所有对象重新排序。值越大，越靠上。默认为0，则根据添加顺序排序。*/
		__getset(0, __proto, 'zOrder', function () {
			return this._zOrder;
		}, function (value) {
			if (this._zOrder != value) {
				this._zOrder = value;
				this.conchModel && this.conchModel.setZOrder && this.conchModel.setZOrder(value);
				if (this._parent) {
					value && this._parent._set$P("hasZorder", true);
					Laya.timer.callLater(this._parent, this.updateZOrder);
				}
			}
		});

		/**旋转角度，默认值为0。以角度为单位。*/
		__getset(0, __proto, 'rotation', function () {
			return this._style._tf.rotate;
		}, function (value) {
			var style = this.getStyle();
			if (style._tf.rotate !== value) {
				style.setRotate(value);
				this._tfChanged = true;
				this.conchModel && this.conchModel.rotate(value);
				this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
				var p = this._parent;
				if (p && p._repaint === 0) {
					p._repaint = 1;
					p.parentRepaint();
				}
			}
		});

		/**
		*<p>显示对象的宽度，单位为像素，默认为0。</p>
		*<p>此宽度用于鼠标碰撞检测，并不影响显示对象图像大小。需要对显示对象的图像进行缩放，请使用scale、scaleX、scaleY。</p>
		*<p>可以通过getbounds获取显示对象图像的实际宽度。</p>
		*/
		__getset(0, __proto, 'width', function () {
			if (!this.autoSize) return this._width;
			return this.getSelfBounds().width;
		}, function (value) {
			if (this._width !== value) {
				this._width = value;
				this.conchModel && this.conchModel.size(value, this._height)
				this.repaint();
			}
		});

		/**表示显示对象相对于父容器的水平方向坐标值。*/
		__getset(0, __proto, 'x', function () {
			return this._x;
		}, function (value) {
			if (this._x !== value) {
				if (this.destroyed) return;
				this._x = value;
				this.conchModel && this.conchModel.pos(value, this._y);
				var p = this._parent;
				if (p && p._repaint === 0) {
					p._repaint = 1;
					p.parentRepaint();
				}
				if (this._$P.maskParent && this._$P.maskParent._repaint === 0) {
					this._$P.maskParent._repaint = 1;
					this._$P.maskParent.parentRepaint();
				}
			}
		});

		/**
		*获得相对于stage的全局Y轴缩放值（会叠加父亲节点的缩放值）。
		*/
		__getset(0, __proto, 'globalScaleY', function () {
			var scale = 1;
			var ele = this;
			while (ele) {
				if (ele === Laya.stage) break;
				scale *= ele.scaleY;
				ele = ele.parent;
			}
			return scale;
		});

		/**
		*<p>可以设置一个Rectangle区域作为点击区域，或者设置一个<code>HitArea</code>实例作为点击区域，HitArea内可以设置可点击和不可点击区域。</p>
		*<p>如果不设置hitArea，则根据宽高形成的区域进行碰撞。</p>
		*/
		__getset(0, __proto, 'hitArea', function () {
			return this._$P.hitArea;
		}, function (value) {
			this._set$P("hitArea", value);
		});

		/**
		*是否静态缓存此对象的当前帧的最终属性。为 true 时，子对象变化时不会自动更新缓存，但是可以通过调用 reCache 方法手动刷新。
		*<b>注意：</b> 1. 设置 cacheAs 为非空和非"none"时才有效。 2. 由于渲染的时机在脚本执行之后，也就是说当前帧渲染的是对象的最终属性，所以如果在当前帧渲染之前、设置静态缓存之后改变对象属性，则最终渲染结果表现的是对象的最终属性。
		*/
		__getset(0, __proto, 'staticCache', function () {
			return this._$P.staticCache;
		}, function (value) {
			this._set$P("staticCache", value);
			if (!value) this.reCache();
		});

		/**设置一个Texture实例，并显示此图片（如果之前有其他绘制，则会被清除掉）。等同于graphics.clear();graphics.drawTexture()*/
		__getset(0, __proto, 'texture', function () {
			return this._texture;
		}, function (value) {
			if (this._texture != value) {
				this._texture = value;
				this.graphics.cleanByTexture(value, 0, 0);
			}
		});

		/**表示显示对象相对于父容器的垂直方向坐标值。*/
		__getset(0, __proto, 'y', function () {
			return this._y;
		}, function (value) {
			if (this._y !== value) {
				if (this.destroyed) return;
				this._y = value;
				this.conchModel && this.conchModel.pos(this._x, value);
				var p = this._parent;
				if (p && p._repaint === 0) {
					p._repaint = 1;
					p.parentRepaint();
				}
				if (this._$P.maskParent && this._$P.maskParent._repaint === 0) {
					this._$P.maskParent._repaint = 1;
					this._$P.maskParent.parentRepaint();
				}
			}
		});

		/**
		*<p>显示对象的高度，单位为像素，默认为0。</p>
		*<p>此高度用于鼠标碰撞检测，并不影响显示对象图像大小。需要对显示对象的图像进行缩放，请使用scale、scaleX、scaleY。</p>
		*<p>可以通过getbounds获取显示对象图像的实际高度。</p>
		*/
		__getset(0, __proto, 'height', function () {
			if (!this.autoSize) return this._height;
			return this.getSelfBounds().height;
		}, function (value) {
			if (this._height !== value) {
				this._height = value;
				this.conchModel && this.conchModel.size(this._width, value);
				this.repaint();
			}
		});

		/**指定要使用的混合模式。目前只支持"lighter"。*/
		__getset(0, __proto, 'blendMode', function () {
			return this._style.blendMode;
		}, function (value) {
			this.getStyle().blendMode = value;
			this.conchModel && this.conchModel.blendMode(value);
			if (value && value != "source-over") this._renderType |=/*laya.renders.RenderSprite.BLEND*/0x08;
			else this._renderType &= ~ /*laya.renders.RenderSprite.BLEND*/0x08;
			this.parentRepaint();
		});

		/**X轴缩放值，默认值为1。设置为负数，可以实现水平反转效果，比如scaleX=-1。*/
		__getset(0, __proto, 'scaleX', function () {
			return this._style._tf.scaleX;
		}, function (value) {
			var style = this.getStyle();
			if (style._tf.scaleX !== value) {
				style.setScaleX(value);
				this._tfChanged = true;
				this.conchModel && this.conchModel.scale(value, style._tf.scaleY);
				this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
				var p = this._parent;
				if (p && p._repaint === 0) {
					p._repaint = 1;
					p.parentRepaint();
				}
			}
		});

		/**Y轴缩放值，默认值为1。设置为负数，可以实现垂直反转效果，比如scaleX=-1。*/
		__getset(0, __proto, 'scaleY', function () {
			return this._style._tf.scaleY;
		}, function (value) {
			var style = this.getStyle();
			if (style._tf.scaleY !== value) {
				style.setScaleY(value);
				this._tfChanged = true;
				this.conchModel && this.conchModel.scale(style._tf.scaleX, value);
				this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
				var p = this._parent;
				if (p && p._repaint === 0) {
					p._repaint = 1;
					p.parentRepaint();
				}
			}
		});

		/**对舞台 <code>stage</code> 的引用。*/
		__getset(0, __proto, 'stage', function () {
			return Laya.stage;
		});

		/**水平倾斜角度，默认值为0。以角度为单位。*/
		__getset(0, __proto, 'skewX', function () {
			return this._style._tf.skewX;
		}, function (value) {
			var style = this.getStyle();
			if (style._tf.skewX !== value) {
				style.setSkewX(value);
				this._tfChanged = true;
				this.conchModel && this.conchModel.skew(value, style._tf.skewY);
				this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
				var p = this._parent;
				if (p && p._repaint === 0) {
					p._repaint = 1;
					p.parentRepaint();
				}
			}
		});

		/**
		*<p>显示对象的滚动矩形范围，具有裁剪效果(如果只想限制子对象渲染区域，请使用viewport)，设置optimizeScrollRect=true，可以优化裁剪区域外的内容不进行渲染。</p>
		*<p> srollRect和viewport的区别：<br/>
		*1.srollRect自带裁剪效果，viewport只影响子对象渲染是否渲染，不具有裁剪效果（性能更高）。<br/>
		*2.设置rect的x,y属性均能实现区域滚动效果，但scrollRect会保持0,0点位置不变。</p>
		*/
		__getset(0, __proto, 'scrollRect', function () {
			return this._style.scrollRect;
		}, function (value) {
			this.getStyle().scrollRect = value;
			this.repaint();
			if (value) {
				this._renderType |=/*laya.renders.RenderSprite.CLIP*/0x80;
				this.conchModel && this.conchModel.scrollRect(value.x, value.y, value.width, value.height);
			} else {
				this._renderType &= ~ /*laya.renders.RenderSprite.CLIP*/0x80;
				if (this.conchModel) {
					if (Sprite.RUNTIMEVERION < "0.9.1")
						this.conchModel.removeType(0x40);
					else
						this.conchModel.removeType(/*laya.renders.RenderSprite.CLIP*/0x80);
				}
			}
		});

		/**垂直倾斜角度，默认值为0。以角度为单位。*/
		__getset(0, __proto, 'skewY', function () {
			return this._style._tf.skewY;
		}, function (value) {
			var style = this.getStyle();
			if (style._tf.skewY !== value) {
				style.setSkewY(value);
				this._tfChanged = true;
				this.conchModel && this.conchModel.skew(style._tf.skewX, value);
				this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
				var p = this._parent;
				if (p && p._repaint === 0) {
					p._repaint = 1;
					p.parentRepaint();
				}
			}
		});

		/**
		*<p>对象的矩阵信息。通过设置矩阵可以实现节点旋转，缩放，位移效果。</p>
		*<p>矩阵更多信息请参考 <code>Matrix</code></p>
		*/
		__getset(0, __proto, 'transform', function () {
			return this._tfChanged ? this._adjustTransform() : this._transform;
		}, function (value) {
			this._tfChanged = false;
			this._transform = value;
			if (value) {
				this._x = value.tx;
				this._y = value.ty;
				value.tx = value.ty = 0;
				this.conchModel && this.conchModel.transform(value.a, value.b, value.c, value.d, this._x, this._y);
			}
			if (value) this._renderType |=/*laya.renders.RenderSprite.TRANSFORM*/0x04;
			else {
				this._renderType &= ~ /*laya.renders.RenderSprite.TRANSFORM*/0x04;
				this.conchModel && this.conchModel.removeType(/*laya.renders.RenderSprite.TRANSFORM*/0x04);
			}
			this.parentRepaint();
		});

		/**X轴 轴心点的位置，单位为像素，默认为0。轴心点会影响对象位置，缩放中心，旋转中心。*/
		__getset(0, __proto, 'pivotX', function () {
			return this._style._tf.translateX;
		}, function (value) {
			this.getStyle().setTranslateX(value);
			this.conchModel && this.conchModel.pivot(value, this._style._tf.translateY);
			this.repaint();
		});

		/**Y轴 轴心点的位置，单位为像素，默认为0。轴心点会影响对象位置，缩放中心，旋转中心。*/
		__getset(0, __proto, 'pivotY', function () {
			return this._style._tf.translateY;
		}, function (value) {
			this.getStyle().setTranslateY(value);
			this.conchModel && this.conchModel.pivot(this._style._tf.translateX, value);
			this.repaint();
		});

		/**透明度，值为0-1，默认值为1，表示不透明。更改alpha值会影响drawcall。*/
		__getset(0, __proto, 'alpha', function () {
			return this._style.alpha;
		}, function (value) {
			if (this._style && this._style.alpha !== value) {
				value = value < 0 ? 0 : (value > 1 ? 1 : value);
				this.getStyle().alpha = value;
				this.conchModel && this.conchModel.alpha(value);
				if (value !== 1) this._renderType |=/*laya.renders.RenderSprite.ALPHA*/0x02;
				else this._renderType &= ~ /*laya.renders.RenderSprite.ALPHA*/0x02;
				this.parentRepaint();
			}
		});

		/**表示是否可见，默认为true。如果设置不可见，节点将不被渲染。*/
		__getset(0, __proto, 'visible', function () {
			return this._style.visible;
		}, function (value) {
			if (this._style && this._style.visible !== value) {
				this.getStyle().visible = value;
				this.conchModel && this.conchModel.visible(value);
				this.parentRepaint();
			}
		});

		/**绘图对象。封装了绘制位图和矢量图的接口，Sprite所有的绘图操作都通过Graphics来实现的。*/
		__getset(0, __proto, 'graphics', function () {
			return this._graphics || (this.graphics = RunDriver.createGraphics());
		}, function (value) {
			if (this._graphics) this._graphics._sp = null;
			this._graphics = value;
			if (value) {
				this._renderType &= ~ /*laya.renders.RenderSprite.IMAGE*/0x01;
				this._renderType |=/*laya.renders.RenderSprite.GRAPHICS*/0x200;
				value._sp = this;
				this.conchModel && this.conchModel.graphics(this._graphics);
			} else {
				this._renderType &= ~ /*laya.renders.RenderSprite.GRAPHICS*/0x200;
				this._renderType &= ~ /*laya.renders.RenderSprite.IMAGE*/0x01;
				if (this.conchModel) {
					if (Sprite.RUNTIMEVERION < "0.9.1")
						this.conchModel.removeType(0x100);
					else
						this.conchModel.removeType(/*laya.renders.RenderSprite.GRAPHICS*/0x200);
				}
			}
			this.repaint();
		});

		/**滤镜集合。可以设置多个滤镜组合。*/
		__getset(0, __proto, 'filters', function () {
			return this._$P.filters;
		}, function (value) {
			value && value.length === 0 && (value = null);
			if (this._$P.filters == value) return;
			this._set$P("filters", value ? value.slice() : null);
			if (Render.isConchApp) {
				if (this.conchModel) {
					if (Sprite.RUNTIMEVERION < "0.9.1")
						this.conchModel.removeType(0x10);
					else
						this.conchModel.removeType(/*laya.renders.RenderSprite.FILTERS*/0x20);
				}
				if (this._$P.filters && this._$P.filters.length == 1) {
					this._$P.filters[0].callNative(this);
				}
			}
			if (Render.isWebGL) {
				if (value && value.length) {
					this._renderType |=/*laya.renders.RenderSprite.FILTERS*/0x20;
				} else {
					this._renderType &= ~ /*laya.renders.RenderSprite.FILTERS*/0x20;
				}
			}
			if (value && value.length > 0) {
				if (!this._getBit(/*laya.display.Node.NOTICE_DISPLAY*/0x1)) this._setUpNoticeType(/*laya.display.Node.NOTICE_DISPLAY*/0x1);
				if (!(Render.isWebGL && value.length == 1 && (((value[0]) instanceof laya.filters.ColorFilter)))) {
					if (this.cacheAs != "bitmap") {
						if (!Render.isConchNode) this.cacheAs = "bitmap";
						this._set$P("cacheForFilters", true);
					}
					this._set$P("hasFilter", true);
				}
			} else {
				this._set$P("hasFilter", false);
				if (this._$P["cacheForFilters"] && this.cacheAs == "bitmap") {
					this.cacheAs = "none";
				}
			}
			this.repaint();
		});

		__getset(0, __proto, 'parent', _super.prototype._$get_parent, function (value) {
			_super.prototype._$set_parent.call(this, value);
			if (value && this._getBit(/*laya.display.Node.MOUSEENABLE*/0x2)) {
				this._$2__onDisplay();
			}
		});

		/**
		*<p>遮罩，可以设置一个对象(支持位图和矢量图)，根据对象形状进行遮罩显示。</p>
		*<p>【注意】遮罩对象坐标系是相对遮罩对象本身的，和Flash机制不同</p>
		*/
		__getset(0, __proto, 'mask', function () {
			return this._$P._mask;
		}, function (value) {
			if (value && this.mask && this.mask._$P.maskParent) return;
			if (value) {
				this.cacheAs = "bitmap";
				this._set$P("_mask", value);
				value._set$P("maskParent", this);
			} else {
				this.cacheAs = "none";
				this.mask && this.mask._set$P("maskParent", null);
				this._set$P("_mask", value);
			}
			this.conchModel && this.conchModel.mask(value ? value.conchModel : null);
			this._renderType |=/*laya.renders.RenderSprite.MASK*/0x40;
			this.parentRepaint();
		});

		/**
		*是否接受鼠标事件。
		*默认为false，如果监听鼠标事件，则会自动设置本对象及父节点的属性 mouseEnable 的值都为 true（如果父节点手动设置为false，则不会更改）。
		**/
		__getset(0, __proto, 'mouseEnabled', function () {
			return this._mouseEnableState > 1;
		}, function (value) {
			this._mouseEnableState = value ? 2 : 1;
		});

		/**
		*获得相对于stage的全局X轴缩放值（会叠加父亲节点的缩放值）。
		*/
		__getset(0, __proto, 'globalScaleX', function () {
			var scale = 1;
			var ele = this;
			while (ele) {
				if (ele === Laya.stage) break;
				scale *= ele.scaleX;
				ele = ele.parent;
			}
			return scale;
		});

		/**
		*返回鼠标在此对象坐标系上的 X 轴坐标信息。
		*/
		__getset(0, __proto, 'mouseX', function () {
			return this.getMousePoint().x;
		});

		/**
		*返回鼠标在此对象坐标系上的 Y 轴坐标信息。
		*/
		__getset(0, __proto, 'mouseY', function () {
			return this.getMousePoint().y;
		});

		Sprite.fromImage = function (url) {
			return new Sprite().loadImage(url);
		}

		Sprite.CustomList = [];
		__static(Sprite,
			['RUNTIMEVERION', function () { return this.RUNTIMEVERION =/*__JS__ */window.conch ? conchConfig.getRuntimeVersion().substr(conchConfig.getRuntimeVersion().lastIndexOf('-') + 1) : ''; }
			]);
		return Sprite;
	})(Node)


	/**
	*@private
	*audio标签播放声音的音轨控制
	*/
	//class laya.media.h5audio.AudioSoundChannel extends laya.media.SoundChannel
	var AudioSoundChannel = (function (_super) {
		function AudioSoundChannel(audio) {
			this._audio = null;
			this._onEnd = null;
			this._resumePlay = null;
			AudioSoundChannel.__super.call(this);
			this._onEnd = Utils.bind(this.__onEnd, this);
			this._resumePlay = Utils.bind(this.__resumePlay, this);
			audio.addEventListener("ended", this._onEnd);
			this._audio = audio;
		}

		__class(AudioSoundChannel, 'laya.media.h5audio.AudioSoundChannel', _super);
		var __proto = AudioSoundChannel.prototype;
		__proto.__onEnd = function () {
			if (this.loops == 1) {
				if (this.completeHandler) {
					Laya.timer.once(10, this, this.__runComplete, [this.completeHandler], false);
					this.completeHandler = null;
				}
				this.stop();
				this.event(/*laya.events.Event.COMPLETE*/"complete");
				return;
			}
			if (this.loops > 0) {
				this.loops--;
			}
			this.startTime = 0;
			this.play();
		}

		__proto.__resumePlay = function () {
			if (this._audio) this._audio.removeEventListener("canplay", this._resumePlay);
			try {
				this._audio.currentTime = this.startTime;
				Browser.container.appendChild(this._audio);
				this._audio.play();
			} catch (e) {
				this.event(/*laya.events.Event.ERROR*/"error");
			}
		}

		/**
		*播放
		*/
		__proto.play = function () {
			this.isStopped = false;
			try {
				this._audio.playbackRate = SoundManager.playbackRate;
				this._audio.currentTime = this.startTime;
			} catch (e) {
				this._audio.addEventListener("canplay", this._resumePlay);
				return;
			}
			SoundManager.addChannel(this);
			Browser.container.appendChild(this._audio);
			if ("play" in this._audio)
				this._audio.play();
		}

		/**
		*停止播放
		*
		*/
		__proto.stop = function () {
			this.isStopped = true;
			SoundManager.removeChannel(this);
			this.completeHandler = null;
			if (!this._audio)
				return;
			if ("pause" in this._audio)
				if (Render.isConchApp) {
					this._audio.stop();
				}
			this._audio.pause();
			this._audio.removeEventListener("ended", this._onEnd);
			this._audio.removeEventListener("canplay", this._resumePlay);
			if (!Browser.onIE) {
				if (this._audio != AudioSound._musicAudio) {
					Pool.recover("audio:" + this.url, this._audio);
				}
			}
			Browser.removeElement(this._audio);
			this._audio = null;
		}

		__proto.pause = function () {
			this.isStopped = true;
			SoundManager.removeChannel(this);
			if ("pause" in this._audio)
				this._audio.pause();
		}

		__proto.resume = function () {
			if (!this._audio)
				return;
			this.isStopped = false;
			SoundManager.addChannel(this);
			if ("play" in this._audio)
				this._audio.play();
		}

		/**
		*当前播放到的位置
		*@return
		*
		*/
		__getset(0, __proto, 'position', function () {
			if (!this._audio)
				return 0;
			return this._audio.currentTime;
		});

		/**
		*获取总时间。
		*/
		__getset(0, __proto, 'duration', function () {
			if (!this._audio)
				return 0;
			return this._audio.duration;
		});

		/**
		*设置音量
		*@param v
		*
		*/
		/**
		*获取音量
		*@return
		*
		*/
		__getset(0, __proto, 'volume', function () {
			if (!this._audio) return 1;
			return this._audio.volume;
		}, function (v) {
			if (!this._audio) return;
			this._audio.volume = v;
		});

		return AudioSoundChannel;
	})(SoundChannel)


	/**
	*@private
	*web audio api方式播放声音的音轨控制
	*/
	//class laya.media.webaudio.WebAudioSoundChannel extends laya.media.SoundChannel
	var WebAudioSoundChannel = (function (_super) {
		function WebAudioSoundChannel() {
			this.audioBuffer = null;
			this.gain = null;
			this.bufferSource = null;
			this._currentTime = 0;
			this._volume = 1;
			this._startTime = 0;
			this._pauseTime = 0;
			this._onPlayEnd = null;
			this.context = WebAudioSound.ctx;
			WebAudioSoundChannel.__super.call(this);
			this._onPlayEnd = Utils.bind(this.__onPlayEnd, this);
			if (this.context["createGain"]) {
				this.gain = this.context["createGain"]();
			} else {
				this.gain = this.context["createGainNode"]();
			}
		}

		__class(WebAudioSoundChannel, 'laya.media.webaudio.WebAudioSoundChannel', _super);
		var __proto = WebAudioSoundChannel.prototype;
		/**
		*播放声音
		*/
		__proto.play = function () {
			SoundManager.addChannel(this);
			this.isStopped = false;
			this._clearBufferSource();
			if (!this.audioBuffer) return;
			var context = this.context;
			var gain = this.gain;
			var bufferSource = context.createBufferSource();
			this.bufferSource = bufferSource;
			bufferSource.buffer = this.audioBuffer;
			bufferSource.connect(gain);
			if (gain)
				gain.disconnect();
			gain.connect(context.destination);
			bufferSource.onended = this._onPlayEnd;
			if (this.startTime >= this.duration) this.startTime = 0;
			this._startTime = Browser.now();
			this.gain.gain.value = this._volume;
			if (this.loops == 0) {
				bufferSource.loop = true;
			}
			bufferSource.playbackRate.value = SoundManager.playbackRate;
			bufferSource.start(0, this.startTime);
			this._currentTime = 0;
		}

		__proto.__onPlayEnd = function () {
			if (this.loops == 1) {
				if (this.completeHandler) {
					Laya.timer.once(10, this, this.__runComplete, [this.completeHandler], false);
					this.completeHandler = null;
				}
				this.stop();
				this.event(/*laya.events.Event.COMPLETE*/"complete");
				return;
			}
			if (this.loops > 0) {
				this.loops--;
			}
			this.startTime = 0;
			this.play();
		}

		__proto._clearBufferSource = function () {
			if (this.bufferSource) {
				var sourceNode = this.bufferSource;
				if (sourceNode.stop) {
					sourceNode.stop(0);
				} else {
					sourceNode.noteOff(0);
				}
				sourceNode.disconnect(0);
				sourceNode.onended = null;
				if (!WebAudioSoundChannel._tryCleanFailed) this._tryClearBuffer(sourceNode);
				this.bufferSource = null;
			}
		}

		__proto._tryClearBuffer = function (sourceNode) {
			if (!Browser.onIOS) {
				WebAudioSoundChannel._tryCleanFailed = true;
				return;
			}
			try { sourceNode.buffer = WebAudioSound._miniBuffer; } catch (e) { WebAudioSoundChannel._tryCleanFailed = true; }
		}

		/**
		*停止播放
		*/
		__proto.stop = function () {
			this._clearBufferSource();
			this.audioBuffer = null;
			if (this.gain)
				this.gain.disconnect();
			this.isStopped = true;
			SoundManager.removeChannel(this);
			this.completeHandler = null;
			if (SoundManager.autoReleaseSound)
				Laya.timer.once(5000, null, SoundManager.disposeSoundIfNotUsed, [this.url], false);
		}

		__proto.pause = function () {
			if (!this.isStopped) {
				this._pauseTime = this.position;
			}
			this._clearBufferSource();
			if (this.gain)
				this.gain.disconnect();
			this.isStopped = true;
			SoundManager.removeChannel(this);
			if (SoundManager.autoReleaseSound)
				Laya.timer.once(5000, null, SoundManager.disposeSoundIfNotUsed, [this.url], false);
		}

		__proto.resume = function () {
			this.startTime = this._pauseTime;
			this.play();
		}

		/**
		*获取当前播放位置
		*/
		__getset(0, __proto, 'position', function () {
			if (this.bufferSource) {
				return (Browser.now() - this._startTime) / 1000 + this.startTime;
			}
			return 0;
		});

		__getset(0, __proto, 'duration', function () {
			if (this.audioBuffer) {
				return this.audioBuffer.duration;
			}
			return 0;
		});

		/**
		*设置音量
		*/
		/**
		*获取音量
		*/
		__getset(0, __proto, 'volume', function () {
			return this._volume;
		}, function (v) {
			if (this.isStopped) {
				return;
			}
			this._volume = v;
			this.gain.gain.value = v;
		});

		WebAudioSoundChannel._tryCleanFailed = false;
		return WebAudioSoundChannel;
	})(SoundChannel)


	/**
	*@private
	*<code>Bitmap</code> 是图片资源类。
	*/
	//class laya.resource.Bitmap extends laya.resource.Resource
	var Bitmap = (function (_super) {
		function Bitmap() {
			//this._source=null;
			//this._w=NaN;
			//this._h=NaN;
			this.useNum = 0;
			Bitmap.__super.call(this);
			this._w = 0;
			this._h = 0;
		}

		__class(Bitmap, 'laya.resource.Bitmap', _super);
		var __proto = Bitmap.prototype;
		/***
		*宽度。
		*/
		__getset(0, __proto, 'width', function () {
			return this._w;
		});

		/***
		*高度。
		*/
		__getset(0, __proto, 'height', function () {
			return this._h;
		});

		/***
		*HTML Image 或 HTML Canvas 或 WebGL Texture 。
		*/
		__getset(0, __proto, 'source', function () {
			return this._source;
		});

		return Bitmap;
	})(Resource)


	/**
	*<p>动画播放基类，提供了基础的动画播放控制方法和帧标签事件相关功能。</p>
	*<p>可以继承此类，但不要直接实例化此类，因为有些方法需要由子类实现。</p>
	*/
	//class laya.display.AnimationPlayerBase extends laya.display.Sprite
	var AnimationPlayerBase = (function (_super) {
		function AnimationPlayerBase() {
			this.loop = false;
			this.wrapMode = 0;
			this._index = 0;
			this._count = 0;
			this._isPlaying = false;
			this._labels = null;
			this._isReverse = false;
			this._frameRateChanged = false;
			this._controlNode = null;
			this._actionName = null;
			AnimationPlayerBase.__super.call(this);
			this._interval = Config.animationInterval;
			this._setUpNoticeType(/*laya.display.Node.NOTICE_DISPLAY*/0x1);
		}

		__class(AnimationPlayerBase, 'laya.display.AnimationPlayerBase', _super);
		var __proto = AnimationPlayerBase.prototype;
		/**
		*<p>开始播放动画。play(...)方法被设计为在创建实例后的任何时候都可以被调用，当相应的资源加载完毕、调用动画帧填充方法(set frames)或者将实例显示在舞台上时，会判断是否正在播放中，如果是，则进行播放。</p>
		*<p>配合wrapMode属性，可设置动画播放顺序类型。</p>
		*@param start （可选）指定动画播放开始的索引(int)或帧标签(String)。帧标签可以通过addLabel(...)和removeLabel(...)进行添加和删除。
		*@param loop （可选）是否循环播放。
		*@param name （可选）动画名称。
		*@param showWarn（可选）是否动画不存在时打印警告
		*/
		__proto.play = function (start, loop, name, showWarn) {
			(start === void 0) && (start = 0);
			(loop === void 0) && (loop = true);
			(name === void 0) && (name = "");
			(showWarn === void 0) && (showWarn = true);
			this._isPlaying = true;
			this.index = ((typeof start == 'string')) ? this._getFrameByLabel(start) : start;
			this.loop = loop;
			this._actionName = name;
			this._isReverse = this.wrapMode == 1;
			if (this.interval > 0) {
				this.timerLoop(this.interval, this, this._frameLoop, null, true, true);
			}
		}

		/**@private */
		__proto._getFrameByLabel = function (label) {
			var i = 0;
			for (i = 0; i < this._count; i++) {
				if (this._labels[i] && (this._labels[i]).indexOf(label) >= 0) return i;
			}
			return 0;
		}

		/**@private */
		__proto._frameLoop = function () {
			if (this._isReverse) {
				this._index--;
				if (this._index < 0) {
					if (this.loop) {
						if (this.wrapMode == 2) {
							this._index = this._count > 0 ? 1 : 0;
							this._isReverse = false;
						} else {
							this._index = this._count - 1;
						}
						this.event(/*laya.events.Event.COMPLETE*/"complete");
					} else {
						this._index = 0;
						this.stop();
						this.event(/*laya.events.Event.COMPLETE*/"complete");
						return;
					}
				}
			} else {
				this._index++;
				if (this._index >= this._count) {
					if (this.loop) {
						if (this.wrapMode == 2) {
							this._index = this._count - 2 >= 0 ? this._count - 2 : 0;
							this._isReverse = true;
						} else {
							this._index = 0;
						}
						this.event(/*laya.events.Event.COMPLETE*/"complete");
					} else {
						this._index--;
						this.stop();
						this.event(/*laya.events.Event.COMPLETE*/"complete");
						return;
					}
				}
			}
			this.index = this._index;
		}

		/**@private */
		__proto._setControlNode = function (node) {
			if (this._controlNode) {
				this._controlNode.off(/*laya.events.Event.DISPLAY*/"display", this, this._checkResumePlaying);
				this._controlNode.off(/*laya.events.Event.UNDISPLAY*/"undisplay", this, this._checkResumePlaying);
			}
			this._controlNode = node;
			if (node && node != this) {
				node.on(/*laya.events.Event.DISPLAY*/"display", this, this._checkResumePlaying);
				node.on(/*laya.events.Event.UNDISPLAY*/"undisplay", this, this._checkResumePlaying);
			}
		}

		/**@private */
		__proto._setDisplay = function (value) {
			_super.prototype._setDisplay.call(this, value);
			this._checkResumePlaying();
		}

		/**@private */
		__proto._checkResumePlaying = function () {
			if (this._isPlaying) {
				if (this._controlNode.displayedInStage) this.play(this._index, this.loop, this._actionName);
				else this.clearTimer(this, this._frameLoop);
			}
		}

		/**
		*停止动画播放。
		*/
		__proto.stop = function () {
			this._isPlaying = false;
			this.clearTimer(this, this._frameLoop);
		}

		/**
		*增加一个帧标签到指定索引的帧上。当动画播放到此索引的帧时会派发Event.LABEL事件，派发事件是在完成当前帧画面更新之后。
		*@param label 帧标签名称
		*@param index 帧索引
		*/
		__proto.addLabel = function (label, index) {
			if (!this._labels) this._labels = {};
			if (!this._labels[index]) this._labels[index] = [];
			this._labels[index].push(label);
		}

		/**
		*删除指定的帧标签。
		*@param label 帧标签名称。注意：如果为空，则删除所有帧标签！
		*/
		__proto.removeLabel = function (label) {
			if (!label) this._labels = null;
			else if (this._labels) {
				for (var name in this._labels) {
					this._removeLabelFromLabelList(this._labels[name], label);
				}
			}
		}

		/**@private */
		__proto._removeLabelFromLabelList = function (list, label) {
			if (!list) return;
			for (var i = list.length - 1; i >= 0; i--) {
				if (list[i] == label) {
					list.splice(i, 1);
				}
			}
		}

		/**
		*将动画切换到指定帧并停在那里。
		*@param position 帧索引或帧标签
		*/
		__proto.gotoAndStop = function (position) {
			this.index = ((typeof position == 'string')) ? this._getFrameByLabel(position) : position;
			this.stop();
		}

		/**
		*@private
		*显示到某帧
		*@param value 帧索引
		*/
		__proto._displayToIndex = function (value) { }
		/**
		*停止动画播放，并清理对象属性。之后可存入对象池，方便对象复用。
		*/
		__proto.clear = function () {
			this.stop();
			this._labels = null;
		}

		/**
		*<p>动画播放的帧间隔时间(单位：毫秒)。默认值依赖于Config.animationInterval=50，通过Config.animationInterval可以修改默认帧间隔时间。</p>
		*<p>要想为某动画设置独立的帧间隔时间，可以使用set interval，注意：如果动画正在播放，设置后会重置帧循环定时器的起始时间为当前时间，也就是说，如果频繁设置interval，会导致动画帧更新的时间间隔会比预想的要慢，甚至不更新。</p>
		*/
		__getset(0, __proto, 'interval', function () {
			return this._interval;
		}, function (value) {
			if (this._interval != value) {
				this._frameRateChanged = true;
				this._interval = value;
				if (this._isPlaying && value > 0) {
					this.timerLoop(value, this, this._frameLoop, null, true, true);
				}
			}
		});

		/**
		*是否正在播放中。
		*/
		__getset(0, __proto, 'isPlaying', function () {
			return this._isPlaying;
		});

		/**
		*动画当前帧的索引。
		*/
		__getset(0, __proto, 'index', function () {
			return this._index;
		}, function (value) {
			this._index = value;
			this._displayToIndex(value);
			if (this._labels && this._labels[value]) {
				var tArr = this._labels[value];
				for (var i = 0, len = tArr.length; i < len; i++) {
					this.event(/*laya.events.Event.LABEL*/"label", tArr[i]);
				}
			}
		});

		/**
		*当前动画中帧的总数。
		*/
		__getset(0, __proto, 'count', function () {
			return this._count;
		});

		AnimationPlayerBase.WRAP_POSITIVE = 0;
		AnimationPlayerBase.WRAP_REVERSE = 1;
		AnimationPlayerBase.WRAP_PINGPONG = 2;
		return AnimationPlayerBase;
	})(Sprite)


	/**
	*<p> <code>Text</code> 类用于创建显示对象以显示文本。</p>
	*<p>
	*注意：如果运行时系统找不到设定的字体，则用系统默认的字体渲染文字，从而导致显示异常。(通常电脑上显示正常，在一些移动端因缺少设置的字体而显示异常)。
	*</p>
	*@example
	*package
	*{
		*import laya.display.Text;
		*public class Text_Example
		*{
			*public function Text_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*onInit();
				*}
			*private function onInit():void
			*{
				*var text:Text=new Text();//创建一个 Text 类的实例对象 text 。
				*text.text="这个是一个 Text 文本示例。";
				*text.color="#008fff";//设置 text 的文本颜色。
				*text.font="Arial";//设置 text 的文本字体。
				*text.bold=true;//设置 text 的文本显示为粗体。
				*text.fontSize=30;//设置 text 的字体大小。
				*text.wordWrap=true;//设置 text 的文本自动换行。
				*text.x=100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。
				*text.y=100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。
				*text.width=300;//设置 text 的宽度。
				*text.height=200;//设置 text 的高度。
				*text.italic=true;//设置 text 的文本显示为斜体。
				*text.borderColor="#fff000";//设置 text 的文本边框颜色。
				*Laya.stage.addChild(text);//将 text 添加到显示列表。
				*}
			*}
		*}
	*@example
	*Text_Example();
	*function Text_Example()
	*{
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*onInit();
		*}
	*function onInit()
	*{
		*var text=new laya.display.Text();//创建一个 Text 类的实例对象 text 。
		*text.text="这个是一个 Text 文本示例。";
		*text.color="#008fff";//设置 text 的文本颜色。
		*text.font="Arial";//设置 text 的文本字体。
		*text.bold=true;//设置 text 的文本显示为粗体。
		*text.fontSize=30;//设置 text 的字体大小。
		*text.wordWrap=true;//设置 text 的文本自动换行。
		*text.x=100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。
		*text.y=100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。
		*text.width=300;//设置 text 的宽度。
		*text.height=200;//设置 text 的高度。
		*text.italic=true;//设置 text 的文本显示为斜体。
		*text.borderColor="#fff000";//设置 text 的文本边框颜色。
		*Laya.stage.addChild(text);//将 text 添加到显示列表。
		*}
	*@example
	*class Text_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*this.onInit();
			*}
		*private onInit():void {
			*var text:laya.display.Text=new laya.display.Text();//创建一个 Text 类的实例对象 text 。
			*text.text="这个是一个 Text 文本示例。";
			*text.color="#008fff";//设置 text 的文本颜色。
			*text.font="Arial";//设置 text 的文本字体。
			*text.bold=true;//设置 text 的文本显示为粗体。
			*text.fontSize=30;//设置 text 的字体大小。
			*text.wordWrap=true;//设置 text 的文本自动换行。
			*text.x=100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。
			*text.y=100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。
			*text.width=300;//设置 text 的宽度。
			*text.height=200;//设置 text 的高度。
			*text.italic=true;//设置 text 的文本显示为斜体。
			*text.borderColor="#fff000";//设置 text 的文本边框颜色。
			*Laya.stage.addChild(text);//将 text 添加到显示列表。
			*}
		*}
	*/
	//class laya.display.Text extends laya.display.Sprite
	var Text = (function (_super) {
		function Text() {
			this._clipPoint = null;
			this._currBitmapFont = null;
			this._text = null;
			this._isChanged = false;
			this._textWidth = 0;
			this._textHeight = 0;
			this._lines = [];
			this._lineWidths = [];
			this._startX = NaN;
			this._startY = NaN;
			this._lastVisibleLineIndex = -1;
			this._words = null;
			this._charSize = {};
			this.underline = false;
			this._underlineColor = null;
			Text.__super.call(this);
			this.overflow = Text.VISIBLE;
			this._style = new CSSStyle(this);
			(this._style).wordWrap = false;
		}

		__class(Text, 'laya.display.Text', _super);
		var __proto = Text.prototype;
		/**@inheritDoc */
		__proto.destroy = function (destroyChild) {
			(destroyChild === void 0) && (destroyChild = true);
			_super.prototype.destroy.call(this, destroyChild);
			this._lines = null;
			if (this._words) {
				this._words.length = 0;
				this._words = null;
			}
		}

		/**
		*@private
		*@inheritDoc
		*/
		__proto._getBoundPointsM = function (ifRotate) {
			(ifRotate === void 0) && (ifRotate = false);
			var rec = Rectangle.TEMP;
			rec.setTo(0, 0, this.width, this.height);
			return rec._getBoundPoints();
		}

		/**
		*@inheritDoc
		*/
		__proto.getGraphicBounds = function (realSize) {
			(realSize === void 0) && (realSize = false);
			var rec = Rectangle.TEMP;
			rec.setTo(0, 0, this.width, this.height);
			return rec;
		}

		/**
		*@private
		*@inheritDoc
		*/
		__proto._getCSSStyle = function () {
			return this._style;
		}

		/**
		*<p>根据指定的文本，从语言包中取当前语言的文本内容。并对此文本中的{i}文本进行替换。</p>
		*<p>设置Text.langPacks语言包后，即可使用lang获取里面的语言</p>
		*<p>例如：
		*<li>（1）text 的值为“我的名字”，先取到这个文本对应的当前语言版本里的值“My name”，将“My name”设置为当前文本的内容。</li>
		*<li>（2）text 的值为“恭喜你赢得{0}个钻石，{1}经验。”，arg1 的值为100，arg2 的值为200。
		*则先取到这个文本对应的当前语言版本里的值“Congratulations on your winning {0}diamonds,{1}experience.”，
		*然后将文本里的{0}、{1}，依据括号里的数字从0开始替换为 arg1、arg2 的值。
		*将替换处理后的文本“Congratulations on your winning 100 diamonds,200 experience.”设置为当前文本的内容。
		*</li>
		*</p>
		*@param text 文本内容。
		*@param ...args 文本替换参数。
		*/
		__proto.lang = function (text, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) {
			text = Text.langPacks && Text.langPacks[text] ? Text.langPacks[text] : text;
			if (arguments.length < 2) {
				this._text = text;
			} else {
				for (var i = 0, n = arguments.length; i < n; i++) {
					text = text.replace("{" + i + "}", arguments[i + 1]);
				}
				this._text = text;
			}
		}

		/**
		*渲染文字。
		*@param begin 开始渲染的行索引。
		*@param visibleLineCount 渲染的行数。
		*/
		__proto.renderText = function (begin, visibleLineCount) {
			var graphics = this.graphics;
			graphics.clear(true);
			var ctxFont = (this.italic ? "italic " : "") + (this.bold ? "bold " : "") + this.fontSize + "px " + (Browser.onIPhone ? (laya.display.Text._fontFamilyMap[this.font] || this.font) : this.font);
			Browser.context.font = ctxFont;
			var padding = this.padding;
			var startX = padding[3];
			var textAlgin = "left";
			var lines = this._lines;
			var lineHeight = this.leading + this._charSize.height;
			var tCurrBitmapFont = this._currBitmapFont;
			if (tCurrBitmapFont) {
				lineHeight = this.leading + tCurrBitmapFont.getMaxHeight();
			};
			var startY = padding[0];
			if ((!tCurrBitmapFont) && this._width > 0 && this._textWidth <= this._width) {
				if (this.align == "right") {
					textAlgin = "right";
					startX = this._width - padding[1];
				} else if (this.align == "center") {
					textAlgin = "center";
					startX = this._width * 0.5 + padding[3] - padding[1];
				}
			}
			if (this._height > 0) {
				var tempVAlign = (this._textHeight > this._height) ? "top" : this.valign;
				if (tempVAlign === "middle")
					startY = (this._height - visibleLineCount * lineHeight) * 0.5 + padding[0] - padding[2];
				else if (tempVAlign === "bottom")
					startY = this._height - visibleLineCount * lineHeight - padding[2];
			};
			var style = this._style;
			if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize) {
				var bitmapScale = tCurrBitmapFont.fontSize / this.fontSize;
			}
			if (this._clipPoint) {
				graphics.save();
				if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize) {
					var tClipWidth = 0;
					var tClipHeight = 0;
					this._width ? tClipWidth = (this._width - padding[3] - padding[1]) : tClipWidth = this._textWidth;
					this._height ? tClipHeight = (this._height - padding[0] - padding[2]) : tClipHeight = this._textHeight;
					tClipWidth *= bitmapScale;
					tClipHeight *= bitmapScale;
					graphics.clipRect(padding[3], padding[0], tClipWidth, tClipHeight);
				} else {
					graphics.clipRect(padding[3], padding[0], this._width ? (this._width - padding[3] - padding[1]) : this._textWidth, this._height ? (this._height - padding[0] - padding[2]) : this._textHeight);
				}
			};
			var password = style.password;
			if (("prompt" in this) && this['prompt'] == this._text)
				password = false;
			var x = 0, y = 0;
			var end = Math.min(this._lines.length, visibleLineCount + begin) || 1;
			for (var i = begin; i < end; i++) {
				var word = lines[i];
				var _word;
				if (password) {
					var len = word.length;
					word = "";
					for (var j = len; j > 0; j--) {
						word += "●";
					}
				}
				x = startX - (this._clipPoint ? this._clipPoint.x : 0);
				y = startY + lineHeight * i - (this._clipPoint ? this._clipPoint.y : 0);
				this.underline && this.drawUnderline(textAlgin, x, y, i);
				if (tCurrBitmapFont) {
					var tWidth = this.width;
					if (tCurrBitmapFont.autoScaleSize) {
						tWidth = this.width * bitmapScale;
					}
					tCurrBitmapFont.drawText(word, this, x, y, this.align, tWidth);
				} else {
					if (Render.isWebGL) {
						this._words || (this._words = []);
						_word = this._words.length > (i - begin) ? this._words[i - begin] : new WordText();
						_word.setText(word);
					} else {
						_word = word;
					}
					style.stroke ? graphics.fillBorderText(_word, x, y, ctxFont, this.color, style.strokeColor, style.stroke, textAlgin) : graphics.fillText(_word, x, y, ctxFont, this.color, textAlgin);
				}
			}
			if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize) {
				var tScale = 1 / bitmapScale;
				this.scale(tScale, tScale);
			}
			if (this._clipPoint)
				graphics.restore();
			this._startX = startX;
			this._startY = startY;
		}

		/**
		*绘制下划线
		*@param x 本行坐标
		*@param y 本行坐标
		*@param lineIndex 本行索引
		*/
		__proto.drawUnderline = function (align, x, y, lineIndex) {
			var lineWidth = this._lineWidths[lineIndex];
			switch (align) {
				case 'center':
					x -= lineWidth / 2;
					break;
				case 'right':
					x -= lineWidth;
					break;
				case 'left':
				default:
					break;
			}
			y += this._charSize.height;
			this._graphics.drawLine(x, y, x + lineWidth, y, this.underlineColor || this.color, 1);
		}

		/**
		*<p>排版文本。</p>
		*<p>进行宽高计算，渲染、重绘文本。</p>
		*/
		__proto.typeset = function () {
			this._isChanged = false;
			if (!this._text) {
				this._clipPoint = null;
				this._textWidth = this._textHeight = 0;
				this.graphics.clear(true);
				return;
			}
			Browser.context.font = this._getCSSStyle().font;
			this._lines.length = 0;
			this._lineWidths.length = 0;
			this.parseLines(this._text);
			this.evalTextSize();
			if (this.checkEnabledViewportOrNot())
				this._clipPoint || (this._clipPoint = new Point(0, 0));
			else
				this._clipPoint = null;
			var lineCount = this._lines.length;
			if (this.overflow != Text.VISIBLE) {
				var func = this.overflow == Text.HIDDEN ? Math.floor : Math.ceil;
				lineCount = Math.min(lineCount, func((this.height - this.padding[0] - this.padding[2]) / (this.leading + this._charSize.height)));
			};
			var startLine = this.scrollY / (this._charSize.height + this.leading) | 0;
			this.renderText(startLine, lineCount);
			this.repaint();
		}

		__proto.evalTextSize = function () {
			var nw = NaN, nh = NaN;
			nw = Math.max.apply(this, this._lineWidths);
			if (this._currBitmapFont)
				nh = this._lines.length * (this._currBitmapFont.getMaxHeight() + this.leading) + this.padding[0] + this.padding[2];
			else
				nh = this._lines.length * (this._charSize.height + this.leading) + this.padding[0] + this.padding[2];
			if (nw != this._textWidth || nh != this._textHeight) {
				this._textWidth = nw;
				this._textHeight = nh;
				if (!this._width || !this._height)
					this.conchModel && this.conchModel.size(this._width || this._textWidth, this._height || this._textHeight);
			}
		}

		__proto.checkEnabledViewportOrNot = function () {
			return this.overflow == Text.SCROLL && ((this._width > 0 && this._textWidth > this._width) || (this._height > 0 && this._textHeight > this._height));
		}

		/**
		*<p>快速更改显示文本。不进行排版计算，效率较高。</p>
		*<p>如果只更改文字内容，不更改文字样式，建议使用此接口，能提高效率。</p>
		*@param text 文本内容。
		*/
		__proto.changeText = function (text) {
			if (this._text !== text) {
				this.lang(text + "");
				if (this._graphics && this._graphics.replaceText(this._text)) {
				} else {
					this.typeset();
				}
			}
		}

		/**
		*@private
		*分析文本换行。
		*/
		__proto.parseLines = function (text) {
			var needWordWrapOrTruncate = this.wordWrap || this.overflow == Text.HIDDEN;
			if (needWordWrapOrTruncate) {
				var wordWrapWidth = this.getWordWrapWidth();
			}
			if (this._currBitmapFont) {
				this._charSize.width = this._currBitmapFont.getMaxWidth();
				this._charSize.height = this._currBitmapFont.getMaxHeight();
			} else {
				var measureResult = Browser.context.measureText(Text._testWord);
				this._charSize.width = measureResult.width;
				this._charSize.height = (measureResult.height || this.fontSize);
			};
			var lines = text.replace(/\r\n/g, "\n").split("\n");
			for (var i = 0, n = lines.length; i < n; i++) {
				var line = lines[i];
				if (needWordWrapOrTruncate)
					this.parseLine(line, wordWrapWidth);
				else {
					this._lineWidths.push(this.getTextWidth(line));
					this._lines.push(line);
				}
			}
		}

		/**
		*@private
		*解析行文本。
		*@param line 某行的文本。
		*@param wordWrapWidth 文本的显示宽度。
		*/
		__proto.parseLine = function (line, wordWrapWidth) {
			var ctx = Browser.context;
			var lines = this._lines;
			var maybeIndex = 0;
			var execResult;
			var charsWidth = NaN;
			var wordWidth = NaN;
			var startIndex = 0;
			charsWidth = this.getTextWidth(line);
			if (charsWidth <= wordWrapWidth) {
				lines.push(line);
				this._lineWidths.push(charsWidth);
				return;
			}
			charsWidth = this._charSize.width;
			maybeIndex = Math.floor(wordWrapWidth / charsWidth);
			(maybeIndex == 0) && (maybeIndex = 1);
			charsWidth = this.getTextWidth(line.substring(0, maybeIndex));
			wordWidth = charsWidth;
			for (var j = maybeIndex, m = line.length; j < m; j++) {
				charsWidth = this.getTextWidth(line.charAt(j));
				wordWidth += charsWidth;
				if (wordWidth > wordWrapWidth) {
					if (this.wordWrap) {
						var newLine = line.substring(startIndex, j);
						if (newLine.charCodeAt(newLine.length - 1) < 255) {
							execResult = /(?:\w|-)+$/.exec(newLine);
							if (execResult) {
								j = execResult.index + startIndex;
								if (execResult.index == 0)
									j += newLine.length;
								else
									newLine = line.substring(startIndex, j);
							}
						}
						lines.push(newLine);
						this._lineWidths.push(wordWidth - charsWidth);
						startIndex = j;
						if (j + maybeIndex < m) {
							j += maybeIndex;
							charsWidth = this.getTextWidth(line.substring(startIndex, j));
							wordWidth = charsWidth;
							j--;
						} else {
							lines.push(line.substring(startIndex, m));
							this._lineWidths.push(this.getTextWidth(lines[lines.length - 1]));
							startIndex = -1;
							break;
						}
					} else if (this.overflow == Text.HIDDEN) {
						lines.push(line.substring(0, j));
						this._lineWidths.push(this.getTextWidth(lines[lines.length - 1]));
						return;
					}
				}
			}
			if (this.wordWrap && startIndex != -1) {
				lines.push(line.substring(startIndex, m));
				this._lineWidths.push(this.getTextWidth(lines[lines.length - 1]));
			}
		}

		__proto.getTextWidth = function (text) {
			if (this._currBitmapFont)
				return this._currBitmapFont.getTextWidth(text);
			else
				return Browser.context.measureText(text).width;
		}

		/**
		*获取换行所需的宽度。
		*/
		__proto.getWordWrapWidth = function () {
			var p = this.padding;
			var w = NaN;
			if (this._currBitmapFont && this._currBitmapFont.autoScaleSize)
				w = this._width * (this._currBitmapFont.fontSize / this.fontSize);
			else
				w = this._width;
			if (w <= 0) {
				w = this.wordWrap ? 100 : Browser.width;
			}
			w <= 0 && (w = 100);
			return w - p[3] - p[1];
		}

		/**
		*返回字符在本类实例的父坐标系下的坐标。
		*@param charIndex 索引位置。
		*@param out （可选）输出的Point引用。
		*@return Point 字符在本类实例的父坐标系下的坐标。如果out参数不为空，则将结果赋值给指定的Point对象，否则创建一个新的Point对象返回。建议使用Point.TEMP作为out参数，可以省去Point对象创建和垃圾回收的开销，尤其是在需要频繁执行的逻辑中，比如帧循环和MOUSE_MOVE事件回调函数里面。
		*/
		__proto.getCharPoint = function (charIndex, out) {
			this._isChanged && Laya.timer.runCallLater(this, this.typeset);
			var len = 0, lines = this._lines, startIndex = 0;
			for (var i = 0, n = lines.length; i < n; i++) {
				len += lines[i].length;
				if (charIndex < len) {
					var line = i;
					break;
				}
				startIndex = len;
			};
			var ctxFont = (this.italic ? "italic " : "") + (this.bold ? "bold " : "") + this.fontSize + "px " + this.font;
			Browser.context.font = ctxFont;
			var width = this.getTextWidth(this._text.substring(startIndex, charIndex));
			var point = out || new Point();
			return point.setTo(this._startX + width - (this._clipPoint ? this._clipPoint.x : 0), this._startY + line * (this._charSize.height + this.leading) - (this._clipPoint ? this._clipPoint.y : 0));
		}

		/**
		*@inheritDoc
		*/
		__getset(0, __proto, 'width', function () {
			if (this._width)
				return this._width;
			return this.textWidth + this.padding[1] + this.padding[3];
		}, function (value) {
			if (value != this._width) {
				_super.prototype._$set_width.call(this, value);
				this.isChanged = true;
			}
		});

		/**
		*表示文本的宽度，以像素为单位。
		*/
		__getset(0, __proto, 'textWidth', function () {
			this._isChanged && Laya.timer.runCallLater(this, this.typeset);
			return this._textWidth;
		});

		/**
		*@inheritDoc
		*/
		__getset(0, __proto, 'height', function () {
			if (this._height) return this._height;
			return this.textHeight + this.padding[0] + this.padding[2];
		}, function (value) {
			if (value != this._height) {
				_super.prototype._$set_height.call(this, value);
				this.isChanged = true;
			}
		});

		/**
		*表示文本的高度，以像素为单位。
		*/
		__getset(0, __proto, 'textHeight', function () {
			this._isChanged && Laya.timer.runCallLater(this, this.typeset);
			return this._textHeight;
		});

		/**
		*<p>边距信息。</p>
		*<p>数据格式：[上边距，右边距，下边距，左边距]（边距以像素为单位）。</p>
		*/
		__getset(0, __proto, 'padding', function () {
			return this._getCSSStyle().padding;
		}, function (value) {
			this._getCSSStyle().padding = value;
			this.isChanged = true;
		});

		/**
		*<p>指定文本是否为粗体字。</p>
		*<p>默认值为 false，这意味着不使用粗体字。如果值为 true，则文本为粗体字。</p>
		*/
		__getset(0, __proto, 'bold', function () {
			return this._getCSSStyle().bold;
		}, function (value) {
			this._getCSSStyle().bold = value;
			this.isChanged = true;
		});

		/**当前文本的内容字符串。*/
		__getset(0, __proto, 'text', function () {
			return this._text || "";
		}, function (value) {
			if (this._text !== value) {
				this.lang(value + "");
				this.isChanged = true;
				this.event(/*laya.events.Event.CHANGE*/"change");
			}
		});

		/**
		*<p>表示文本的颜色值。可以通过 <code>Text.defaultColor</code> 设置默认颜色。</p>
		*<p>默认值为黑色。</p>
		*/
		__getset(0, __proto, 'color', function () {
			return this._getCSSStyle().color;
		}, function (value) {
			if (this._getCSSStyle().color != value) {
				this._getCSSStyle().color = value;
				if (!this._isChanged && this._graphics) {
					this._graphics.replaceTextColor(this.color)
				} else {
					this.isChanged = true;
				}
			}
		});

		/**
		*<p>文本的字体名称，以字符串形式表示。</p>
		*<p>默认值为："Arial"，可以通过Font.defaultFont设置默认字体。</p>
		*<p>如果运行时系统找不到设定的字体，则用系统默认的字体渲染文字，从而导致显示异常。(通常电脑上显示正常，在一些移动端因缺少设置的字体而显示异常)。</p>
		*@see laya.display.css.Font#defaultFamily
		*/
		__getset(0, __proto, 'font', function () {
			return this._getCSSStyle().fontFamily;
		}, function (value) {
			if (this._currBitmapFont) {
				this._currBitmapFont = null;
				this.scale(1, 1);
			}
			if (Text._bitmapFonts && Text._bitmapFonts[value]) {
				this._currBitmapFont = Text._bitmapFonts[value];
			}
			this._getCSSStyle().fontFamily = value;
			this.isChanged = true;
		});

		/**
		*<p>指定文本的字体大小（以像素为单位）。</p>
		*<p>默认为20像素，可以通过 <code>Text.defaultSize</code> 设置默认大小。</p>
		*/
		__getset(0, __proto, 'fontSize', function () {
			return this._getCSSStyle().fontSize;
		}, function (value) {
			this._getCSSStyle().fontSize = value;
			this.isChanged = true;
		});

		/**
		*<p>表示使用此文本格式的文本是否为斜体。</p>
		*<p>默认值为 false，这意味着不使用斜体。如果值为 true，则文本为斜体。</p>
		*/
		__getset(0, __proto, 'italic', function () {
			return this._getCSSStyle().italic;
		}, function (value) {
			this._getCSSStyle().italic = value;
			this.isChanged = true;
		});

		/**
		*<p>表示文本的水平显示方式。</p>
		*<p><b>取值：</b>
		*<li>"left"： 居左对齐显示。</li>
		*<li>"center"： 居中对齐显示。</li>
		*<li>"right"： 居右对齐显示。</li>
		*</p>
		*/
		__getset(0, __proto, 'align', function () {
			return this._getCSSStyle().align;
		}, function (value) {
			this._getCSSStyle().align = value;
			this.isChanged = true;
		});

		/**
		*<p>表示文本的垂直显示方式。</p>
		*<p><b>取值：</b>
		*<li>"top"： 居顶部对齐显示。</li>
		*<li>"middle"： 居中对齐显示。</li>
		*<li>"bottom"： 居底部对齐显示。</li>
		*</p>
		*/
		__getset(0, __proto, 'valign', function () {
			return this._getCSSStyle().valign;
		}, function (value) {
			this._getCSSStyle().valign = value;
			this.isChanged = true;
		});

		/**
		*<p>表示文本是否自动换行，默认为false。</p>
		*<p>若值为true，则自动换行；否则不自动换行。</p>
		*/
		__getset(0, __proto, 'wordWrap', function () {
			return this._getCSSStyle().wordWrap;
		}, function (value) {
			this._getCSSStyle().wordWrap = value;
			this.isChanged = true;
		});

		/**
		*垂直行间距（以像素为单位）。
		*/
		__getset(0, __proto, 'leading', function () {
			return this._getCSSStyle().leading;
		}, function (value) {
			this._getCSSStyle().leading = value;
			this.isChanged = true;
		});

		/**
		*文本背景颜色，以字符串表示。
		*/
		__getset(0, __proto, 'bgColor', function () {
			return this._getCSSStyle().backgroundColor;
		}, function (value) {
			this._getCSSStyle().backgroundColor = value;
			this.isChanged = true;
		});

		/**
		*文本边框背景颜色，以字符串表示。
		*/
		__getset(0, __proto, 'borderColor', function () {
			return this._getCSSStyle().borderColor;
		}, function (value) {
			this._getCSSStyle().borderColor = value;
			this.isChanged = true;
		});

		/**
		*<p>描边宽度（以像素为单位）。</p>
		*<p>默认值0，表示不描边。</p>
		*/
		__getset(0, __proto, 'stroke', function () {
			return this._getCSSStyle().stroke;
		}, function (value) {
			this._getCSSStyle().stroke = value;
			this.isChanged = true;
		});

		/**
		*<p>描边颜色，以字符串表示。</p>
		*<p>默认值为 "#000000"（黑色）;</p>
		*/
		__getset(0, __proto, 'strokeColor', function () {
			return this._getCSSStyle().strokeColor;
		}, function (value) {
			this._getCSSStyle().strokeColor = value;
			this.isChanged = true;
		});

		/**
		*一个布尔值，表示文本的属性是否有改变。若为true表示有改变。
		*/
		__getset(0, __proto, 'isChanged', null, function (value) {
			if (this._isChanged !== value) {
				this._isChanged = value;
				value && Laya.timer.callLater(this, this.typeset);
			}
		});

		/**
		*<p>设置横向滚动量。</p>
		*<p>即使设置超出滚动范围的值，也会被自动限制在可能的最大值处。</p>
		*/
		/**
		*获取横向滚动量。
		*/
		__getset(0, __proto, 'scrollX', function () {
			if (!this._clipPoint)
				return 0;
			return this._clipPoint.x;
		}, function (value) {
			if (this.overflow != Text.SCROLL || (this.textWidth < this._width || !this._clipPoint))
				return;
			value = value < this.padding[3] ? this.padding[3] : value;
			var maxScrollX = this._textWidth - this._width;
			value = value > maxScrollX ? maxScrollX : value;
			var visibleLineCount = this._height / (this._charSize.height + this.leading) | 0 + 1;
			this._clipPoint.x = value;
			this.renderText(this._lastVisibleLineIndex, visibleLineCount);
		});

		/**
		*设置纵向滚动量（px)。即使设置超出滚动范围的值，也会被自动限制在可能的最大值处。
		*/
		/**
		*获取纵向滚动量。
		*/
		__getset(0, __proto, 'scrollY', function () {
			if (!this._clipPoint)
				return 0;
			return this._clipPoint.y;
		}, function (value) {
			if (this.overflow != Text.SCROLL || (this.textHeight < this._height || !this._clipPoint))
				return;
			value = value < this.padding[0] ? this.padding[0] : value;
			var maxScrollY = this._textHeight - this._height;
			value = value > maxScrollY ? maxScrollY : value;
			var startLine = value / (this._charSize.height + this.leading) | 0;
			this._lastVisibleLineIndex = startLine;
			var visibleLineCount = (this._height / (this._charSize.height + this.leading) | 0) + 1;
			this._clipPoint.y = value;
			this.renderText(startLine, visibleLineCount);
		});

		/**
		*获取横向可滚动最大值。
		*/
		__getset(0, __proto, 'maxScrollX', function () {
			return (this.textWidth < this._width) ? 0 : this._textWidth - this._width;
		});

		/**
		*获取纵向可滚动最大值。
		*/
		__getset(0, __proto, 'maxScrollY', function () {
			return (this.textHeight < this._height) ? 0 : this._textHeight - this._height;
		});

		__getset(0, __proto, 'lines', function () {
			if (this._isChanged)
				this.typeset();
			return this._lines;
		});

		__getset(0, __proto, 'underlineColor', function () {
			return this._underlineColor;
		}, function (value) {
			this._underlineColor = value;
			this._isChanged = true;
			this.typeset();
		});

		Text.registerBitmapFont = function (name, bitmapFont) {
			Text._bitmapFonts || (Text._bitmapFonts = {});
			Text._bitmapFonts[name] = bitmapFont;
		}

		Text.unregisterBitmapFont = function (name, destroy) {
			(destroy === void 0) && (destroy = true);
			if (Text._bitmapFonts && Text._bitmapFonts[name]) {
				var tBitmapFont = Text._bitmapFonts[name];
				if (destroy) {
					tBitmapFont.destroy();
				}
				delete Text._bitmapFonts[name];
			}
		}

		Text.supportFont = function (font) {
			Browser.context.font = "10px sans-serif";
			var defaultFontWidth = Browser.context.measureText("abcji").width;
			Browser.context.font = "10px " + font;
			var customFontWidth = Browser.context.measureText("abcji").width;
			console.log(defaultFontWidth, customFontWidth);
			if (defaultFontWidth === customFontWidth) return false;
			else return true;
		}

		Text._testWord = "游";
		Text.langPacks = null
		Text.VISIBLE = "visible";
		Text.SCROLL = "scroll";
		Text.HIDDEN = "hidden";
		Text.CharacterCache = true;
		Text._bitmapFonts = null
		__static(Text,
			['_fontFamilyMap', function () { return this._fontFamilyMap = { "报隶": "报隶-简", "黑体": "黑体-简", "楷体": "楷体-简", "兰亭黑": "兰亭黑-简", "隶变": "隶变-简", "凌慧体": "凌慧体-简", "翩翩体": "翩翩体-简", "苹方": "苹方-简", "手札体": "手札体-简", "宋体": "宋体-简", "娃娃体": "娃娃体-简", "魏碑": "魏碑-简", "行楷": "行楷-简", "雅痞": "雅痞-简", "圆体": "圆体-简" }; }
			]);
		return Text;
	})(Sprite)


	/**
	*<p> <code>Stage</code> 是舞台类，显示列表的根节点，所有显示对象都在舞台上显示。通过 Laya.stage 单例访问。</p>
	*<p>Stage提供几种适配模式，不同的适配模式会产生不同的画布大小，画布越大，渲染压力越大，所以要选择合适的适配方案。</p>
	*<p>Stage提供不同的帧率模式，帧率越高，渲染压力越大，越费电，合理使用帧率甚至动态更改帧率有利于改进手机耗电。</p>
	*/
	//class laya.display.Stage extends laya.display.Sprite
	var Stage = (function (_super) {
		function Stage() {
			this.focus = null;
			this.frameRate = "fast";
			this.designWidth = 0;
			this.designHeight = 0;
			this.canvasRotation = false;
			this.canvasDegree = 0;
			this.renderingEnabled = true;
			this.screenAdaptationEnabled = true;
			this._screenMode = "none";
			this._scaleMode = "noscale";
			this._alignV = "top";
			this._alignH = "left";
			this._bgColor = "black";
			this._mouseMoveTime = 0;
			this._renderCount = 0;
			this._safariOffsetY = 0;
			this._frameStartTime = NaN;
			this._isFocused = false;
			this._isVisibility = false;
			this._scenes = null;
			this._wgColor = null;
			Stage.__super.call(this);
			this.offset = new Point();
			this._canvasTransform = new Matrix();
			this._previousOrientation = Browser.window.orientation;
			var _$this = this;
			this.transform = Matrix.create();
			this._scenes = [];
			this.mouseEnabled = true;
			this.hitTestPrior = true;
			this.autoSize = false;
			this._displayedInStage = true;
			this._isFocused = true;
			this._isVisibility = true;
			var window = Browser.window;
			var _this = this;
			window.addEventListener("focus", function () {
				_$this._isFocused = true;
				_this.event(/*laya.events.Event.FOCUS*/"focus");
				_this.event(/*laya.events.Event.FOCUS_CHANGE*/"focuschange");
			});
			window.addEventListener("blur", function () {
				_$this._isFocused = false;
				_this.event(/*laya.events.Event.BLUR*/"blur");
				_this.event(/*laya.events.Event.FOCUS_CHANGE*/"focuschange");
				if (_this._isInputting()) Input["inputElement"].target.focus = false;
			});
			var hidden = "hidden", state = "visibilityState", visibilityChange = "visibilitychange";
			var document = window.document;
			if (typeof document.hidden !== "undefined") {
				visibilityChange = "visibilitychange";
				state = "visibilityState";
			} else if (typeof document.mozHidden !== "undefined") {
				visibilityChange = "mozvisibilitychange";
				state = "mozVisibilityState";
			} else if (typeof document.msHidden !== "undefined") {
				visibilityChange = "msvisibilitychange";
				state = "msVisibilityState";
			} else if (typeof document.webkitHidden !== "undefined") {
				visibilityChange = "webkitvisibilitychange";
				state = "webkitVisibilityState";
			}
			window.document.addEventListener(visibilityChange, visibleChangeFun);
			function visibleChangeFun() {
				if (Browser.document[state] == "hidden") {
					_$this._isVisibility = false;
					if (_this._isInputting()) Input["inputElement"].target.focus = false;
				} else {
					_$this._isVisibility = true;
				}
				_this.event(/*laya.events.Event.VISIBILITY_CHANGE*/"visibilitychange");
			}
			window.addEventListener("resize", function () {
				var orientation = Browser.window.orientation;
				if (orientation != null && orientation != _$this._previousOrientation && _this._isInputting()) {
					Input["inputElement"].target.focus = false;
				}
				_$this._previousOrientation = orientation;
				if (_this._isInputting()) return;
				if (Browser.onSafari)
					_this._safariOffsetY = (Browser.window.__innerHeight || Browser.document.body.clientHeight || Browser.document.documentElement.clientHeight) - Browser.window.innerHeight;
				_this._resetCanvas();
			});
			window.addEventListener("orientationchange", function (e) {
				_this._resetCanvas();
			});
			this.on(/*laya.events.Event.MOUSE_MOVE*/"mousemove", this, this._onmouseMove);
			if (Browser.onMobile) this.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown", this, this._onmouseMove);
		}

		__class(Stage, 'laya.display.Stage', _super);
		var __proto = Stage.prototype;
		/**
		*@private
		*在移动端输入时，输入法弹出期间不进行画布尺寸重置。
		*/
		__proto._isInputting = function () {
			return (Browser.onMobile && Input.isInputting);
		}

		/**@private */
		__proto._changeCanvasSize = function () {
			this.setScreenSize(Browser.clientWidth * Browser.pixelRatio, Browser.clientHeight * Browser.pixelRatio);
		}

		/**@private */
		__proto._resetCanvas = function () {
			if (!this.screenAdaptationEnabled) return;
			var canvas = Render._mainCanvas;
			var canvasStyle = canvas.source.style;
			canvas.size(1, 1);
			Laya.timer.once(100, this, this._changeCanvasSize);
		}

		/**
		*设置屏幕大小，场景会根据屏幕大小进行适配。可以动态调用此方法，来更改游戏显示的大小。
		*@param screenWidth 屏幕宽度。
		*@param screenHeight 屏幕高度。
		*/
		__proto.setScreenSize = function (screenWidth, screenHeight) {
			var rotation = false;
			if (this._screenMode !== "none") {
				var screenType = screenWidth / screenHeight < 1 ? "vertical" : "horizontal";
				rotation = screenType !== this._screenMode;
				if (rotation) {
					var temp = screenHeight;
					screenHeight = screenWidth;
					screenWidth = temp;
				}
			}
			this.canvasRotation = rotation;
			var canvas = Render._mainCanvas;
			var canvasStyle = canvas.source.style;
			var mat = this._canvasTransform.identity();
			var scaleMode = this._scaleMode;
			var scaleX = screenWidth / this.designWidth;
			var scaleY = screenHeight / this.designHeight;
			var canvasWidth = this.designWidth;
			var canvasHeight = this.designHeight;
			var realWidth = screenWidth;
			var realHeight = screenHeight;
			var pixelRatio = Browser.pixelRatio;
			this._width = this.designWidth;
			this._height = this.designHeight;
			switch (scaleMode) {
				case "noscale":
					scaleX = scaleY = 1;
					realWidth = this.designWidth;
					realHeight = this.designHeight;
					break;
				case "showall":
					scaleX = scaleY = Math.min(scaleX, scaleY);
					canvasWidth = realWidth = Math.round(this.designWidth * scaleX);
					canvasHeight = realHeight = Math.round(this.designHeight * scaleY);
					break;
				case "noborder":
					scaleX = scaleY = Math.max(scaleX, scaleY);
					realWidth = Math.round(this.designWidth * scaleX);
					realHeight = Math.round(this.designHeight * scaleY);
					break;
				case "full":
					scaleX = scaleY = 1;
					this._width = canvasWidth = screenWidth;
					this._height = canvasHeight = screenHeight;
					break;
				case "fixedwidth":
					scaleY = scaleX;
					this._height = canvasHeight = Math.round(screenHeight / scaleX);
					break;
				case "fixedheight":
					scaleX = scaleY;
					this._width = canvasWidth = Math.round(screenWidth / scaleY);
					break;
				case "fixedauto":
					if ((screenWidth / screenHeight) < (this.designWidth / this.designHeight)) {
						scaleY = scaleX;
						this._height = canvasHeight = Math.round(screenHeight / scaleX);
					} else {
						scaleX = scaleY;
						this._width = canvasWidth = Math.round(screenWidth / scaleY);
					}
					break;
			}
			if (this.conchModel) this.conchModel.size(this._width, this._height);
			scaleX *= this.scaleX;
			scaleY *= this.scaleY;
			if (scaleX === 1 && scaleY === 1) {
				this.transform.identity();
			} else {
				this.transform.a = this._formatData(scaleX / (realWidth / canvasWidth));
				this.transform.d = this._formatData(scaleY / (realHeight / canvasHeight));
				this.conchModel && this.conchModel.scale(this.transform.a, this.transform.d);
			}
			canvas.size(canvasWidth, canvasHeight);
			RunDriver.changeWebGLSize(canvasWidth, canvasHeight);
			mat.scale(realWidth / canvasWidth / pixelRatio, realHeight / canvasHeight / pixelRatio);
			if (this._alignH === "left") this.offset.x = 0;
			else if (this._alignH === "right") this.offset.x = screenWidth - realWidth;
			else this.offset.x = (screenWidth - realWidth) * 0.5 / pixelRatio;
			if (this._alignV === "top") this.offset.y = 0;
			else if (this._alignV === "bottom") this.offset.y = screenHeight - realHeight;
			else this.offset.y = (screenHeight - realHeight) * 0.5 / pixelRatio;
			this.offset.x = Math.round(this.offset.x);
			this.offset.y = Math.round(this.offset.y);
			mat.translate(this.offset.x, this.offset.y);
			if (this._safariOffsetY) mat.translate(0, this._safariOffsetY);
			this.canvasDegree = 0;
			if (rotation) {
				if (this._screenMode === "horizontal") {
					// mat.rotate(Math.PI / 2);
					// mat.translate(screenHeight / pixelRatio, 0);
					// this.canvasDegree = 90;
					/*zhc 20171115修改 避免微信浏览器误操作 将横屏由landscape修改为landscapeFlipped*/
					mat.rotate(-Math.PI / 2);
					mat.translate(0, screenWidth / pixelRatio);
					this.canvasDegree = -90;
				} else {
					mat.rotate(-Math.PI / 2);
					mat.translate(0, screenWidth / pixelRatio);
					this.canvasDegree = -90;
				}
			}
			mat.a = this._formatData(mat.a);
			mat.d = this._formatData(mat.d);
			mat.tx = this._formatData(mat.tx);
			mat.ty = this._formatData(mat.ty);
			canvasStyle.transformOrigin = canvasStyle.webkitTransformOrigin = canvasStyle.msTransformOrigin = canvasStyle.mozTransformOrigin = canvasStyle.oTransformOrigin = "0px 0px 0px";
			canvasStyle.transform = canvasStyle.webkitTransform = canvasStyle.msTransform = canvasStyle.mozTransform = canvasStyle.oTransform = "matrix(" + mat.toString() + ")";
			if (this._safariOffsetY) mat.translate(0, -this._safariOffsetY);
			mat.translate(parseInt(canvasStyle.left) || 0, parseInt(canvasStyle.top) || 0);
			this.visible = true;
			this._repaint = 1;
			this.event(/*laya.events.Event.RESIZE*/"resize");
		}

		/**@private */
		__proto._formatData = function (value) {
			if (Math.abs(value) < 0.000001) return 0;
			if (Math.abs(1 - value) < 0.001) return value > 0 ? 1 : -1;
			return value;
		}

		/**@inheritDoc */
		__proto.getMousePoint = function () {
			return Point.TEMP.setTo(this.mouseX, this.mouseY);
		}

		/**@inheritDoc */
		__proto.repaint = function () {
			this._repaint = 1;
		}

		/**@inheritDoc */
		__proto.parentRepaint = function () { }
		/**@private */
		__proto._loop = function () {
			this.render(Render.context, 0, 0);
			return true;
		}

		/**@private */
		__proto._onmouseMove = function (e) {
			this._mouseMoveTime = Browser.now();
		}

		/**
		*<p>获得距当前帧开始后，过了多少时间，单位为毫秒。</p>
		*<p>可以用来判断函数内时间消耗，通过合理控制每帧函数处理消耗时长，避免一帧做事情太多，对复杂计算分帧处理，能有效降低帧率波动。</p>
		*/
		__proto.getTimeFromFrameStart = function () {
			return Browser.now() - this._frameStartTime;
		}

		/**@inheritDoc */
		__proto.render = function (context, x, y) {
			if (this.frameRate === "sleep") {
				var now = Browser.now();
				if (now - this._frameStartTime >= 1000) this._frameStartTime = now;
				else return;
			}
			this._renderCount++;
			Render.isFlash && this.repaint();
			if (!this._style.visible) {
				if (this._renderCount % 5 === 0) {
					Stat.loopCount++;
					MouseManager.instance.runEvent();
					Laya.timer._update();
				}
				return;
			}
			this._frameStartTime = Browser.now();
			var frameMode = this.frameRate === "mouse" ? (((this._frameStartTime - this._mouseMoveTime) < 2000) ? "fast" : "slow") : this.frameRate;
			var isFastMode = (frameMode !== "slow");
			var isDoubleLoop = (this._renderCount % 2 === 0);
			Stat.renderSlow = !isFastMode;
			if (isFastMode || isDoubleLoop) {
				Stat.loopCount++;
				MouseManager.instance.runEvent();
				Laya.timer._update();
				var scene;
				var i = 0, n = 0;
				if (Render.isConchNode) {
					for (i = 0, n = this._scenes.length; i < n; i++) {
						scene = this._scenes[i];
						(scene) && (scene._updateSceneConch());
					}
				} else {
					for (i = 0, n = this._scenes.length; i < n; i++) {
						scene = this._scenes[i];
						(scene) && (scene._updateScene());
					}
				}
				if (Render.isConchNode) {
					var customList = Sprite["CustomList"];
					for (i = 0, n = customList.length; i < n; i++) {
						var customItem = customList[i];
						customItem.customRender(customItem.customContext, 0, 0);
					}
					return;
				}
				if (Render.isWebGL && this.renderingEnabled) {
					context.clear();
					_super.prototype.render.call(this, context, x, y);
				}
			}
			if (Render.isConchNode) return;
			if (this.renderingEnabled && (isFastMode || !isDoubleLoop)) {
				if (Render.isWebGL) {
					RunDriver.clear(this._bgColor);
					RunDriver.beginFlush();
					context.flush();
					RunDriver.endFinish();
					VectorGraphManager.instance && VectorGraphManager.getInstance().endDispose();
				} else {
					RunDriver.clear(this._bgColor);
					_super.prototype.render.call(this, context, x, y);
				}
			}
		}

		/**@private */
		__proto._requestFullscreen = function () {
			var element = Browser.document.documentElement;
			if (element.requestFullscreen) {
				element.requestFullscreen();
			} else if (element.mozRequestFullScreen) {
				element.mozRequestFullScreen();
			} else if (element.webkitRequestFullscreen) {
				element.webkitRequestFullscreen();
			} else if (element.msRequestFullscreen) {
				element.msRequestFullscreen();
			}
		}

		/**@private */
		__proto._fullScreenChanged = function () {
			Laya.stage.event(/*laya.events.Event.FULL_SCREEN_CHANGE*/"fullscreenchange");
		}

		/**退出全屏模式*/
		__proto.exitFullscreen = function () {
			var document = Browser.document;
			if (document.exitFullscreen) {
				document.exitFullscreen();
			} else if (document.mozCancelFullScreen) {
				document.mozCancelFullScreen();
			} else if (document.webkitExitFullscreen) {
				document.webkitExitFullscreen();
			}
		}

		/**当前视窗由缩放模式导致的 Y 轴缩放系数。*/
		__getset(0, __proto, 'clientScaleY', function () {
			return this._transform ? this._transform.getScaleY() : 1;
		});

		__getset(0, __proto, 'width', _super.prototype._$get_width, function (value) {
			this.designWidth = value;
			_super.prototype._$set_width.call(this, value);
			Laya.timer.callLater(this, this._changeCanvasSize);
		});

		/**
		*舞台是否获得焦点。
		*/
		__getset(0, __proto, 'isFocused', function () {
			return this._isFocused;
		});

		/**
		*<p>水平对齐方式。默认值为"left"。</p>
		*<p><ul>取值范围：
		*<li>"left" ：居左对齐；</li>
		*<li>"center" ：居中对齐；</li>
		*<li>"right" ：居右对齐；</li>
		*</ul></p>
		*/
		__getset(0, __proto, 'alignH', function () {
			return this._alignH;
		}, function (value) {
			this._alignH = value;
			Laya.timer.callLater(this, this._changeCanvasSize);
		});

		__getset(0, __proto, 'height', _super.prototype._$get_height, function (value) {
			this.designHeight = value;
			_super.prototype._$set_height.call(this, value);
			Laya.timer.callLater(this, this._changeCanvasSize);
		});

		__getset(0, __proto, 'transform', function () {
			if (this._tfChanged) this._adjustTransform();
			return this._transform = this._transform || Matrix.create();
		}, _super.prototype._$set_transform);

		/**
		*舞台是否处于可见状态(是否进入后台)。
		*/
		__getset(0, __proto, 'isVisibility', function () {
			return this._isVisibility;
		});

		//[Deprecated]
		__getset(0, __proto, 'desginWidth', function () {
			console.debug("desginWidth已经弃用，请使用designWidth代替");
			return this.designWidth;
		});

		/**当前视窗由缩放模式导致的 X 轴缩放系数。*/
		__getset(0, __proto, 'clientScaleX', function () {
			return this._transform ? this._transform.getScaleX() : 1;
		});

		//[Deprecated]
		__getset(0, __proto, 'desginHeight', function () {
			console.debug("desginHeight已经弃用，请使用designHeight代替");
			return this.designHeight;
		});

		/**
		*<p>缩放模式。默认值为 "noscale"。</p>
		*<p><ul>取值范围：
		*<li>"noscale" ：不缩放；</li>
		*<li>"exactfit" ：全屏不等比缩放；</li>
		*<li>"showall" ：最小比例缩放；</li>
		*<li>"noborder" ：最大比例缩放；</li>
		*<li>"full" ：不缩放，stage的宽高等于屏幕宽高；</li>
		*<li>"fixedwidth" ：宽度不变，高度根据屏幕比缩放；</li>
		*<li>"fixedheight" ：高度不变，宽度根据屏幕比缩放；</li>
		*<li>"fixedauto" ：根据宽高比，自动选择使用fixedwidth或fixedheight；</li>
		*</ul></p>
		*/
		__getset(0, __proto, 'scaleMode', function () {
			return this._scaleMode;
		}, function (value) {
			this._scaleMode = value;
			Laya.timer.callLater(this, this._changeCanvasSize);
		});

		/**
		*<p>垂直对齐方式。默认值为"top"。</p>
		*<p><ul>取值范围：
		*<li>"top" ：居顶部对齐；</li>
		*<li>"middle" ：居中对齐；</li>
		*<li>"bottom" ：居底部对齐；</li>
		*</ul></p>
		*/
		__getset(0, __proto, 'alignV', function () {
			return this._alignV;
		}, function (value) {
			this._alignV = value;
			Laya.timer.callLater(this, this._changeCanvasSize);
		});

		/**舞台的背景颜色，默认为黑色，null为透明。*/
		__getset(0, __proto, 'bgColor', function () {
			return this._bgColor;
		}, function (value) {
			this._bgColor = value;
			this.conchModel && this.conchModel.bgColor(value);
			if (Render.isWebGL) {
				if (value && value !== "black" && value !== "#000000") {
					this._wgColor = Color.create(value)._color;
				} else {
					this._wgColor = null;
				}
			}
			if (value) {
				Render.canvas.style.background = value;
			} else {
				Render.canvas.style.background = "none";
			}
		});

		/**鼠标在 Stage 上的 X 轴坐标。*/
		__getset(0, __proto, 'mouseX', function () {
			return Math.round(MouseManager.instance.mouseX / this.clientScaleX);
		});

		/**鼠标在 Stage 上的 Y 轴坐标。*/
		__getset(0, __proto, 'mouseY', function () {
			return Math.round(MouseManager.instance.mouseY / this.clientScaleY);
		});

		/**
		*<p>场景布局类型。</p>
		*<p><ul>取值范围：
		*<li>"none" ：不更改屏幕</li>
		*<li>"horizontal" ：自动横屏</li>
		*<li>"vertical" ：自动竖屏</li>
		*</ul></p>
		*/
		__getset(0, __proto, 'screenMode', function () {
			return this._screenMode;
		}, function (value) {
			this._screenMode = value;
		});

		__getset(0, __proto, 'visible', _super.prototype._$get_visible, function (value) {
			if (this.visible !== value) {
				_super.prototype._$set_visible.call(this, value);
				var style = Render._mainCanvas.source.style;
				style.visibility = value ? "visible" : "hidden";
			}
		});

		/**
		*<p>是否开启全屏，用户点击后进入全屏。</p>
		*<p>兼容性提示：部分浏览器不允许点击进入全屏，比如Iphone等。</p>
		*/
		__getset(0, __proto, 'fullScreenEnabled', null, function (value) {
			var document = Browser.document;
			var canvas = Render.canvas;
			if (value) {
				canvas.addEventListener('mousedown', this._requestFullscreen);
				canvas.addEventListener('touchstart', this._requestFullscreen);
				document.addEventListener("fullscreenchange", this._fullScreenChanged);
				document.addEventListener("mozfullscreenchange", this._fullScreenChanged);
				document.addEventListener("webkitfullscreenchange", this._fullScreenChanged);
				document.addEventListener("msfullscreenchange", this._fullScreenChanged);
			} else {
				canvas.removeEventListener('mousedown', this._requestFullscreen);
				canvas.removeEventListener('touchstart', this._requestFullscreen);
				document.removeEventListener("fullscreenchange", this._fullScreenChanged);
				document.removeEventListener("mozfullscreenchange", this._fullScreenChanged);
				document.removeEventListener("webkitfullscreenchange", this._fullScreenChanged);
				document.removeEventListener("msfullscreenchange", this._fullScreenChanged);
			}
		});

		Stage.SCALE_NOSCALE = "noscale";
		Stage.SCALE_EXACTFIT = "exactfit";
		Stage.SCALE_SHOWALL = "showall";
		Stage.SCALE_NOBORDER = "noborder";
		Stage.SCALE_FULL = "full";
		Stage.SCALE_FIXED_WIDTH = "fixedwidth";
		Stage.SCALE_FIXED_HEIGHT = "fixedheight";
		Stage.SCALE_FIXED_AUTO = "fixedauto";
		Stage.ALIGN_LEFT = "left";
		Stage.ALIGN_RIGHT = "right";
		Stage.ALIGN_CENTER = "center";
		Stage.ALIGN_TOP = "top";
		Stage.ALIGN_MIDDLE = "middle";
		Stage.ALIGN_BOTTOM = "bottom";
		Stage.SCREEN_NONE = "none";
		Stage.SCREEN_HORIZONTAL = "horizontal";
		Stage.SCREEN_VERTICAL = "vertical";
		Stage.FRAME_FAST = "fast";
		Stage.FRAME_SLOW = "slow";
		Stage.FRAME_MOUSE = "mouse";
		Stage.FRAME_SLEEP = "sleep";
		return Stage;
	})(Sprite)


	/**
	*@private
	*/
	//class laya.media.SoundNode extends laya.display.Sprite
	var SoundNode = (function (_super) {
		function SoundNode() {
			this.url = null;
			this._channel = null;
			this._tar = null;
			this._playEvents = null;
			this._stopEvents = null;
			SoundNode.__super.call(this);
			this.visible = false;
			this.on(/*laya.events.Event.ADDED*/"added", this, this._onParentChange);
			this.on(/*laya.events.Event.REMOVED*/"removed", this, this._onParentChange);
		}

		__class(SoundNode, 'laya.media.SoundNode', _super);
		var __proto = SoundNode.prototype;
		/**@private */
		__proto._onParentChange = function () {
			this.target = this.parent;
		}

		/**
		*播放
		*@param loops 循环次数
		*@param complete 完成回调
		*
		*/
		__proto.play = function (loops, complete) {
			(loops === void 0) && (loops = 1);
			if (isNaN(loops)) {
				loops = 1;
			}
			if (!this.url) return;
			this.stop();
			this._channel = SoundManager.playSound(this.url, loops, complete);
		}

		/**
		*停止播放
		*
		*/
		__proto.stop = function () {
			if (this._channel && !this._channel.isStopped) {
				this._channel.stop();
			}
			this._channel = null;
		}

		/**@private */
		__proto._setPlayAction = function (tar, event, action, add) {
			(add === void 0) && (add = true);
			if (!this[action]) return;
			if (!tar) return;
			if (add) {
				tar.on(event, this, this[action]);
			} else {
				tar.off(event, this, this[action]);
			}
		}

		/**@private */
		__proto._setPlayActions = function (tar, events, action, add) {
			(add === void 0) && (add = true);
			if (!tar) return;
			if (!events) return;
			var eventArr = events.split(",");
			var i = 0, len = 0;
			len = eventArr.length;
			for (i = 0; i < len; i++) {
				this._setPlayAction(tar, eventArr[i], action, add);
			}
		}

		/**
		*设置触发播放的事件
		*@param events
		*
		*/
		__getset(0, __proto, 'playEvent', null, function (events) {
			this._playEvents = events;
			if (!events) return;
			if (this._tar) {
				this._setPlayActions(this._tar, events, "play");
			}
		});

		/**
		*设置控制播放的对象
		*@param tar
		*
		*/
		__getset(0, __proto, 'target', null, function (tar) {
			if (this._tar) {
				this._setPlayActions(this._tar, this._playEvents, "play", false);
				this._setPlayActions(this._tar, this._stopEvents, "stop", false);
			}
			this._tar = tar;
			if (this._tar) {
				this._setPlayActions(this._tar, this._playEvents, "play", true);
				this._setPlayActions(this._tar, this._stopEvents, "stop", true);
			}
		});

		/**
		*设置触发停止的事件
		*@param events
		*
		*/
		__getset(0, __proto, 'stopEvent', null, function (events) {
			this._stopEvents = events;
			if (!events) return;
			if (this._tar) {
				this._setPlayActions(this._tar, events, "stop");
			}
		});

		return SoundNode;
	})(Sprite)


	/**
	*@private
	*<code>FileBitmap</code> 是图片文件资源类。
	*/
	//class laya.resource.FileBitmap extends laya.resource.Bitmap
	var FileBitmap = (function (_super) {
		function FileBitmap() {
			this._src = null;
			this._onload = null;
			this._onerror = null;
			FileBitmap.__super.call(this);
		}

		__class(FileBitmap, 'laya.resource.FileBitmap', _super);
		var __proto = FileBitmap.prototype;
		/**
		*文件路径全名。
		*/
		__getset(0, __proto, 'src', function () {
			return this._src;
		}, function (value) {
			this._src = value;
		});

		/**
		*载入完成处理函数。
		*/
		__getset(0, __proto, 'onload', null, function (value) {
		});

		/**
		*错误处理函数。
		*/
		__getset(0, __proto, 'onerror', null, function (value) {
		});

		return FileBitmap;
	})(Bitmap)


	/**
	*<code>HTMLCanvas</code> 是 Html Canvas 的代理类，封装了 Canvas 的属性和方法。。请不要直接使用 new HTMLCanvas！
	*/
	//class laya.resource.HTMLCanvas extends laya.resource.Bitmap
	var HTMLCanvas = (function (_super) {
		function HTMLCanvas(type) {
			//this._ctx=null;
			this._is2D = false;
			HTMLCanvas.__super.call(this);
			var _$this = this;
			this._source = this;
			if (type === "2D" || (type === "AUTO" && !Render.isWebGL)) {
				this._is2D = true;
				this._source = Browser.createElement("canvas");
				var o = this;
				o.getContext = function (contextID, other) {
					if (_$this._ctx) return _$this._ctx;
					var ctx = _$this._ctx = _$this._source.getContext(contextID, other);
					if (ctx) {
						ctx._canvas = o;
						if (!Render.isFlash) ctx.size = function (w, h) {
						};
					}
					return ctx;
				}
			}
		}

		__class(HTMLCanvas, 'laya.resource.HTMLCanvas', _super);
		var __proto = HTMLCanvas.prototype;
		/**
		*清空画布内容。
		*/
		__proto.clear = function () {
			this._ctx && this._ctx.clear();
		}

		/**
		*销毁。
		*/
		__proto.destroy = function () {
			this._ctx && this._ctx.destroy();
			this._ctx = null;
			this.dispose();
		}

		/**
		*释放。
		*/
		__proto.release = function () { }
		/**
		*@private
		*设置 Canvas 渲染上下文。
		*@param context Canvas 渲染上下文。
		*/
		__proto._setContext = function (context) {
			this._ctx = context;
		}

		/**
		*获取 Canvas 渲染上下文。
		*@param contextID 上下文ID.
		*@param other
		*@return Canvas 渲染上下文 Context 对象。
		*/
		__proto.getContext = function (contextID, other) {
			return this._ctx ? this._ctx : (this._ctx = HTMLCanvas._createContext(this));
		}

		/**
		*获取内存大小。
		*@return 内存大小。
		*/
		__proto.getMemSize = function () {
			return 0;
		}

		/**
		*设置宽高。
		*@param w 宽度。
		*@param h 高度。
		*/
		__proto.size = function (w, h) {
			if (this._w != w || this._h != h || (this._source && (this._source.width != w || this._source.height != h))) {
				this._w = w;
				this._h = h;
				this.memorySize = this._w * this._h * 4;
				this._ctx && this._ctx.size(w, h);
				this._source && (this._source.height = h, this._source.width = w);
			}
		}

		__proto.getCanvas = function () {
			return this._source;
		}

		/**
		*Canvas 渲染上下文。
		*/
		__getset(0, __proto, 'context', function () {
			return this._ctx;
		});

		/**
		*是否当作 Bitmap 对象。
		*/
		__getset(0, __proto, 'asBitmap', null, function (value) {
		});

		HTMLCanvas.create = function (type) {
			return new HTMLCanvas(type);
		}

		HTMLCanvas.TYPE2D = "2D";
		HTMLCanvas.TYPE3D = "3D";
		HTMLCanvas.TYPEAUTO = "AUTO";
		HTMLCanvas._createContext = null
		return HTMLCanvas;
	})(Bitmap)


	/**
	*@private
	*/
	//class laya.resource.HTMLSubImage extends laya.resource.Bitmap
	var HTMLSubImage = (function (_super) {
		//请不要直接使用new HTMLSubImage
		function HTMLSubImage(canvas, offsetX, offsetY, width, height, atlasImage, src, allowMerageInAtlas) {
			HTMLSubImage.__super.call(this);
			throw new Error("不允许new！");
		}

		__class(HTMLSubImage, 'laya.resource.HTMLSubImage', _super);
		HTMLSubImage.create = function (canvas, offsetX, offsetY, width, height, atlasImage, src, allowMerageInAtlas) {
			(allowMerageInAtlas === void 0) && (allowMerageInAtlas = false);
			return new HTMLSubImage(canvas, offsetX, offsetY, width, height, atlasImage, src, allowMerageInAtlas);
		}

		return HTMLSubImage;
	})(Bitmap)


	/**
	*<p> <code>Animation</code> 是Graphics动画类。实现了基于Graphics的动画创建、播放、控制接口。</p>
	*<p>本类使用了动画模版缓存池，它以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
	*<p>动画模版缓存池，以key-value键值对存储，key可以自定义，也可以从指定的配置文件中读取，value为对应的动画模版，是一个Graphics对象数组，每个Graphics对象对应一个帧图像，动画的播放实质就是定时切换Graphics对象。</p>
	*<p>使用set source、loadImages(...)、loadAtlas(...)、loadAnimation(...)方法可以创建动画模版。使用play(...)可以播放指定动画。</p>
	*@example <caption>以下示例代码，创建了一个 <code>Text</code> 实例。</caption>
	*package
	*{
		*import laya.display.Animation;
		*import laya.net.Loader;
		*import laya.utils.Handler;
		*public class Animation_Example
		*{
			*public function Animation_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*init();//初始化
				*}
			*private function init():void
			*{
				*var animation:Animation=new Animation();//创建一个 Animation 类的实例对象 animation 。
				*animation.loadAtlas("resource/ani/fighter.json");//加载图集并播放
				*animation.x=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
				*animation.y=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
				*animation.interval=50;//设置 animation 对象的动画播放间隔时间，单位：毫秒。
				*animation.play();//播放动画。
				*Laya.stage.addChild(animation);//将 animation 对象添加到显示列表。
				*}
			*}
		*}
	*
	*@example
	*Animation_Example();
	*function Animation_Example(){
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*init();//初始化
		*}
	*function init()
	*{
		*var animation=new Laya.Animation();//创建一个 Animation 类的实例对象 animation 。
		*animation.loadAtlas("resource/ani/fighter.json");//加载图集并播放
		*animation.x=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
		*animation.y=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
		*animation.interval=50;//设置 animation 对象的动画播放间隔时间，单位：毫秒。
		*animation.play();//播放动画。
		*Laya.stage.addChild(animation);//将 animation 对象添加到显示列表。
		*}
	*
	*@example
	*import Animation=laya.display.Animation;
	*class Animation_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*this.init();
			*}
		*private init():void {
			*var animation:Animation=new Laya.Animation();//创建一个 Animation 类的实例对象 animation 。
			*animation.loadAtlas("resource/ani/fighter.json");//加载图集并播放
			*animation.x=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
			*animation.y=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
			*animation.interval=50;//设置 animation 对象的动画播放间隔时间，单位：毫秒。
			*animation.play();//播放动画。
			*Laya.stage.addChild(animation);//将 animation 对象添加到显示列表。
			*}
		*}
	*new Animation_Example();
	*/
	//class laya.display.Animation extends laya.display.AnimationPlayerBase
	var Animation = (function (_super) {
		function Animation() {
			this._frames = null;
			this._url = null;
			Animation.__super.call(this);
			this._setControlNode(this);
		}

		__class(Animation, 'laya.display.Animation', _super);
		var __proto = Animation.prototype;
		/**@inheritDoc */
		__proto.destroy = function (destroyChild) {
			(destroyChild === void 0) && (destroyChild = true);
			this.stop();
			laya.display.Sprite.prototype.destroy.call(this, destroyChild);
			this._frames = null;
			this._labels = null;
		}

		/**
		*<p>开始播放动画。会在动画模版缓存池中查找key值为name的动画模版，存在则用此动画模版初始化当前序列帧， 如果不存在，则使用当前序列帧。</p>
		*<p>play(...)方法被设计为在创建实例后的任何时候都可以被调用，调用后就处于播放状态，当相应的资源加载完毕、调用动画帧填充方法(set frames)或者将实例显示在舞台上时，会判断是否处于播放状态，如果是，则开始播放。</p>
		*<p>配合wrapMode属性，可设置动画播放顺序类型。</p>
		*@param start （可选）指定动画播放开始的索引(int)或帧标签(String)。帧标签可以通过addLabel(...)和removeLabel(...)进行添加和删除。
		*@param loop （可选）是否循环播放。
		*@param name （可选）动画模板在动画模版缓存池中的key，也可认为是动画名称。如果name为空，则播放当前动画序列帧；如果不为空，则在动画模版缓存池中寻找key值为name的动画模版，如果存在则用此动画模版初始化当前序列帧并播放，如果不存在，则仍然播放当前动画序列帧；如果没有当前动画的帧数据，则不播放，但该实例仍然处于播放状态。
		*@param showWarn（可选）是否动画不存在时打印警告
		*/
		__proto.play = function (start, loop, name, showWarn) {
			(start === void 0) && (start = 0);
			(loop === void 0) && (loop = true);
			(name === void 0) && (name = "");
			(showWarn === void 0) && (showWarn = true);
			if (name) this._setFramesFromCache(name, showWarn);
			this._isPlaying = true;
			this.index = ((typeof start == 'string')) ? this._getFrameByLabel(start) : start;
			this.loop = loop;
			this._actionName = name;
			this._isReverse = this.wrapMode == 1;
			if (this._frames && this.interval > 0) {
				this.timerLoop(this.interval, this, this._frameLoop, null, true, true);
			}
		}

		/**@private */
		__proto._setFramesFromCache = function (name, showWarn) {
			(showWarn === void 0) && (showWarn = false);
			if (this._url) name = this._url + "#" + name;
			if (name && Animation.framesMap[name]) {
				var tAniO;
				tAniO = Animation.framesMap[name];
				if ((tAniO instanceof Array)) {
					this._frames = Animation.framesMap[name];
					this._count = this._frames.length;
				} else {
					if (tAniO.nodeRoot) {
						Animation.framesMap[name] = this._parseGraphicAnimationByData(tAniO);
						tAniO = Animation.framesMap[name];
					}
					this._frames = tAniO.frames;
					this._count = this._frames.length;
					if (!this._frameRateChanged) this._interval = tAniO.interval;
					this._labels = this._copyLabels(tAniO.labels);
				}
				return true;
			} else {
				if (showWarn) console.log("ani not found:", name);
			}
			return false;
		}

		/**@private */
		__proto._copyLabels = function (labels) {
			if (!labels) return null;
			var rst;
			rst = {};
			var key;
			for (key in labels) {
				rst[key] = Utils.copyArray([], labels[key]);
			}
			return rst;
		}

		/**@private */
		__proto._frameLoop = function () {
			if (this._style.visible && this._style.alpha > 0.01) {
				_super.prototype._frameLoop.call(this);
			}
		}

		/**@private */
		__proto._displayToIndex = function (value) {
			if (this._frames) this.graphics = this._frames[value];
		}

		/**
		*停止动画播放，并清理对象属性。之后可存入对象池，方便对象复用。
		*/
		__proto.clear = function () {
			this.stop();
			this.graphics = null;
			this._frames = null;
			this._labels = null;
		}

		/**
		*<p>根据指定的动画模版初始化当前动画序列帧。选择动画模版的过程如下：1. 动画模版缓存池中key为cacheName的动画模版；2. 如果不存在，则加载指定的图片集合并创建动画模版。注意：只有指定不为空的cacheName，才能将创建好的动画模版以此为key缓存到动画模版缓存池，否则不进行缓存。</p>
		*<p>动画模版缓存池是以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
		*<p>因为返回值为Animation对象本身，所以可以使用如下语法：ani.loadImages(...).loadImages(...).play(...);。</p>
		*@param urls 图片路径集合。需要创建动画模版时，会以此为数据源。参数形如：[url1,url2,url3,...]。
		*@param cacheName （可选）动画模板在动画模版缓存池中的key。如果此参数不为空，表示使用动画模版缓存池。如果动画模版缓存池中存在key为cacheName的动画模版，则使用此模版。否则，创建新的动画模版，如果cacheName不为空，则以cacheName为key缓存到动画模版缓存池中，如果cacheName为空，不进行缓存。
		*@return 返回Animation对象本身。
		*/
		__proto.loadImages = function (urls, cacheName) {
			(cacheName === void 0) && (cacheName = "");
			this._url = "";
			if (!this._setFramesFromCache(cacheName)) {
				this.frames = Animation.framesMap[cacheName] ? Animation.framesMap[cacheName] : Animation.createFrames(urls, cacheName);
			}
			return this;
		}

		/**
		*<p>根据指定的动画模版初始化当前动画序列帧。选择动画模版的过程如下：1. 动画模版缓存池中key为cacheName的动画模版；2. 如果不存在，则加载指定的图集并创建动画模版。</p>
		*<p>注意：只有指定不为空的cacheName，才能将创建好的动画模版以此为key缓存到动画模版缓存池，否则不进行缓存。</p>
		*<p>动画模版缓存池是以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
		*<p>因为返回值为Animation对象本身，所以可以使用如下语法：ani.loadAtlas(...).loadAtlas(...).play(...);。</p>
		*@param url 图集路径。需要创建动画模版时，会以此为数据源。
		*@param loaded （可选）使用指定图集初始化动画完毕的回调。
		*@param cacheName （可选）动画模板在动画模版缓存池中的key。如果此参数不为空，表示使用动画模版缓存池。如果动画模版缓存池中存在key为cacheName的动画模版，则使用此模版。否则，创建新的动画模版，如果cacheName不为空，则以cacheName为key缓存到动画模版缓存池中，如果cacheName为空，不进行缓存。
		*@return 返回动画本身。
		*/
		__proto.loadAtlas = function (url, loaded, cacheName) {
			(cacheName === void 0) && (cacheName = "");
			this._url = "";
			var _this = this;
			if (!_this._setFramesFromCache(cacheName)) {
				function onLoaded(loadUrl) {
					if (url === loadUrl) {
						_this.frames = Animation.framesMap[cacheName] ? Animation.framesMap[cacheName] : Animation.createFrames(url, cacheName);
						if (loaded) loaded.run();
					}
				}
				if (Loader.getAtlas(url)) onLoaded(url);
				else Laya.loader.load(url, Handler.create(null, onLoaded, [url]), null,/*laya.net.Loader.ATLAS*/"atlas");
			}
			return this;
		}

		/**
		*<p>加载并解析由LayaAir IDE制作的动画文件，此文件中可能包含多个动画。默认帧率为在IDE中设计的帧率，如果调用过set interval，则使用此帧间隔对应的帧率。加载后创建动画模版，并缓存到动画模版缓存池，key "url#动画名称" 对应相应动画名称的动画模板，key "url#" 对应动画模版集合的默认动画模版。</p>
		*<p>注意：如果调用本方法前，还没有预加载动画使用的图集，请将atlas参数指定为对应的图集路径，否则会导致动画创建失败。</p>
		*<p>动画模版缓存池是以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
		*<p>因为返回值为Animation对象本身，所以可以使用如下语法：ani.loadAnimation(...).loadAnimation(...).play(...);。</p>
		*@param url 动画文件路径。可由LayaAir IDE创建并发布。
		*@param loaded （可选）使用指定动画资源初始化动画完毕的回调。
		*@param atlas （可选）动画用到的图集地址（可选）。
		*@return 返回动画本身。
		*/
		__proto.loadAnimation = function (url, loaded, atlas) {
			this._url = url;
			var _this = this;
			if (!this._actionName) this._actionName = "";
			if (!_this._setFramesFromCache("")) {
				if (!atlas || Loader.getAtlas(atlas)) {
					this._loadAnimationData(url, loaded, atlas);
				} else {
					Laya.loader.load(atlas, Handler.create(this, this._loadAnimationData, [url, loaded, atlas]), null,/*laya.net.Loader.ATLAS*/"atlas")
				}
			} else {
				_this._setFramesFromCache(this._actionName, true);
				if (loaded) loaded.run();
			}
			return this;
		}

		/**@private */
		__proto._loadAnimationData = function (url, loaded, atlas) {
			var _$this = this;
			if (atlas && !Loader.getAtlas(atlas)) {
				console.warn("atlas load fail:" + atlas);
				return;
			};
			var _this = this;
			function onLoaded(loadUrl) {
				if (!Loader.getRes(loadUrl)) return;
				if (url === loadUrl) {
					var tAniO;
					if (!Animation.framesMap[url + "#"]) {
						var aniData = _this._parseGraphicAnimation(Loader.getRes(url));
						if (!aniData) return;
						var aniList = aniData.animationList;
						var i = 0, len = aniList.length;
						var defaultO;
						for (i = 0; i < len; i++) {
							tAniO = aniList[i];
							Animation.framesMap[url + "#" + tAniO.name] = tAniO;
							if (!defaultO) defaultO = tAniO;
						}
						if (defaultO) {
							Animation.framesMap[url + "#"] = defaultO;
							_this._setFramesFromCache(_$this._actionName, true);
							_$this.index = 0;
						}
						_$this._checkResumePlaying();
					} else {
						_this._setFramesFromCache(_$this._actionName, true);
						_$this.index = 0;
						_$this._checkResumePlaying();
					}
					if (loaded) loaded.run();
				}
			}
			if (Loader.getRes(url)) onLoaded(url);
			else Laya.loader.load(url, Handler.create(null, onLoaded, [url]), null,/*laya.net.Loader.JSON*/"json");
			Loader.clearRes(url);
		}

		/**@private */
		__proto._parseGraphicAnimation = function (animationData) {
			return GraphicAnimation.parseAnimationData(animationData);
		}

		/**@private */
		__proto._parseGraphicAnimationByData = function (animationObject) {
			return GraphicAnimation.parseAnimationByData(animationObject);
		}

		/**
		*当前动画的帧图像数组。本类中，每个帧图像是一个Graphics对象，而动画播放就是定时切换Graphics对象的过程。
		*/
		__getset(0, __proto, 'frames', function () {
			return this._frames;
		}, function (value) {
			this._frames = value;
			if (value) {
				this._count = value.length;
				if (this._isPlaying) this.play(this._index, this.loop, this._actionName);
				else this.index = this._index;
			}
		});

		/**
		*是否自动播放，默认为false。如果设置为true，则动画被创建并添加到舞台后自动播放。
		*/
		__getset(0, __proto, 'autoPlay', null, function (value) {
			if (value) this.play();
			else this.stop();
		});

		/**
		*<p>动画数据源。</p>
		*<p>类型如下：<br/>
		*1. LayaAir IDE动画文件路径：使用此类型需要预加载所需的图集资源，否则会创建失败，如果不想预加载或者需要创建完毕的回调，请使用loadAnimation(...)方法；<br/>
		*2. 图集路径：使用此类型创建的动画模版不会被缓存到动画模版缓存池中，如果需要缓存或者创建完毕的回调，请使用loadAtlas(...)方法；<br/>
		*3. 图片路径集合：使用此类型创建的动画模版不会被缓存到动画模版缓存池中，如果需要缓存，请使用loadImages(...)方法。</p>
		*@param value 数据源。比如：图集："xx/a1.atlas"；图片集合："a1.png,a2.png,a3.png"；LayaAir IDE动画"xx/a1.ani"。
		*/
		__getset(0, __proto, 'source', null, function (value) {
			if (value.indexOf(".ani") > -1) this.loadAnimation(value);
			else if (value.indexOf(".json") > -1 || value.indexOf("als") > -1 || value.indexOf("atlas") > -1) this.loadAtlas(value);
			else this.loadImages(value.split(","));
		});

		/**
		*设置自动播放的动画名称，在LayaAir IDE中可以创建的多个动画组成的动画集合，选择其中一个动画名称进行播放。
		*/
		__getset(0, __proto, 'autoAnimation', null, function (value) {
			this.play(0, true, value, false);
		});

		Animation.createFrames = function (url, name) {
			var arr;
			if ((typeof url == 'string')) {
				var atlas = Loader.getAtlas(url);
				if (atlas && atlas.length) {
					arr = [];
					for (var i = 0, n = atlas.length; i < n; i++) {
						var g = new Graphics();
						g.drawTexture(Loader.getRes(atlas[i]), 0, 0);
						arr.push(g);
					}
				}
			} else if ((url instanceof Array)) {
				arr = [];
				for (i = 0, n = url.length; i < n; i++) {
					g = new Graphics();
					g.loadImage(url[i], 0, 0);
					arr.push(g);
				}
			}
			if (name) Animation.framesMap[name] = arr;
			return arr;
		}

		Animation.clearCache = function (key) {
			var cache = Animation.framesMap;
			var val;
			var key2 = key + "#";
			for (val in cache) {
				if (val === key || val.indexOf(key2) == 0) {
					delete Animation.framesMap[val];
				}
			}
		}

		Animation.framesMap = {};
		return Animation;
	})(AnimationPlayerBase)


	/**
	*关键帧动画播放类。
	*/
	//class laya.display.FrameAnimation extends laya.display.AnimationPlayerBase
	var FrameAnimation = (function (_super) {
		function FrameAnimation() {
			this._targetDic = null;
			this._animationData = null;
			this._animationNewFrames = null;
			FrameAnimation.__super.call(this);
			if (FrameAnimation._sortIndexFun == null) {
				FrameAnimation._sortIndexFun = MathUtil.sortByKey("index", false, true);
			}
		}

		__class(FrameAnimation, 'laya.display.FrameAnimation', _super);
		var __proto = FrameAnimation.prototype;
		/**
		*@private
		*初始化动画数据
		*@param targetDic 对象表
		*@param animationData 动画数据
		*
		*/
		__proto._setUp = function (targetDic, animationData) {
			this._labels = null;
			this._animationNewFrames = null;
			this._targetDic = targetDic;
			this._animationData = animationData;
			this.interval = 1000 / animationData.frameRate;
			if (animationData.parsed) {
				this._count = animationData.count;
				this._labels = animationData.labels;
				this._animationNewFrames = animationData.animationNewFrames;
			} else {
				this._animationNewFrames = [];
				this._calculateDatas();
			}
			animationData.parsed = true;
			animationData.labels = this._labels;
			animationData.count = this._count;
			animationData.animationNewFrames = this._animationNewFrames;
		}

		/**@inheritDoc */
		__proto.clear = function () {
			_super.prototype.clear.call(this);
			this._targetDic = null;
			this._animationData = null;
		}

		/**@inheritDoc */
		__proto._displayToIndex = function (value) {
			if (!this._animationData) return;
			if (value < 0) value = 0;
			if (value > this._count) value = this._count;
			var nodes = this._animationData.nodes, i = 0, len = nodes.length;
			for (i = 0; i < len; i++) {
				this._displayNodeToFrame(nodes[i], value);
			}
		}

		/**
		*@private
		*将节点设置到某一帧的状态
		*@param node 节点ID
		*@param frame
		*@param targetDic 节点表
		*
		*/
		__proto._displayNodeToFrame = function (node, frame, targetDic) {
			if (!targetDic) targetDic = this._targetDic;
			var target = targetDic[node.target];
			if (!target) {
				return;
			};
			var frames = node.frames, key, propFrames, value;
			var keys = node.keys, i = 0, len = keys.length;
			for (i = 0; i < len; i++) {
				key = keys[i];
				propFrames = frames[key];
				if (propFrames.length > frame) {
					value = propFrames[frame];
				} else {
					value = propFrames[propFrames.length - 1];
				}
				target[key] = value;
			}
		}

		/**
		*@private
		*计算帧数据
		*
		*/
		__proto._calculateDatas = function () {
			if (!this._animationData) return;
			var nodes = this._animationData.nodes, i = 0, len = nodes.length, tNode;
			this._count = 0;
			for (i = 0; i < len; i++) {
				tNode = nodes[i];
				this._calculateNodeKeyFrames(tNode);
			}
			this._count += 1;
		}

		/**
		*@private
		*计算某个节点的帧数据
		*@param node
		*
		*/
		__proto._calculateNodeKeyFrames = function (node) {
			var keyFrames = node.keyframes, key, tKeyFrames, target = node.target;
			if (!node.frames) {
				node.frames = {};
			}
			if (!node.keys) {
				node.keys = [];
			} else {
				node.keys.length = 0;
			}
			if (!node.initValues) {
				node.initValues = {};
			}
			for (key in keyFrames) {
				tKeyFrames = keyFrames[key];
				if (!node.frames[key]) {
					node.frames[key] = [];
				}
				if (this._targetDic && this._targetDic[target]) {
					node.initValues[key] = this._targetDic[target][key];
				}
				tKeyFrames.sort(FrameAnimation._sortIndexFun);
				node.keys.push(key);
				this._calculateNodePropFrames(tKeyFrames, node.frames[key], key, target);
			}
		}

		/**
		*将动画控制对象还原到动画控制之前的状态
		*/
		__proto.resetToInitState = function () {
			if (!this._targetDic) return;
			if (!this._animationData) return;
			var nodes = this._animationData.nodes, i = 0, len = nodes.length;
			var tNode;
			var initValues;
			for (i = 0; i < len; i++) {
				tNode = nodes[i];
				initValues = tNode.initValues;
				if (!initValues) continue;
				var target = this._targetDic[tNode.target];
				if (!target) continue;
				var key;
				for (key in initValues) {
					target[key] = initValues[key];
				}
			}
		}

		/**
		*@private
		*计算节点某个属性的帧数据
		*@param keyframes
		*@param frames
		*@param key
		*@param target
		*
		*/
		__proto._calculateNodePropFrames = function (keyframes, frames, key, target) {
			var i = 0, len = keyframes.length - 1;
			frames.length = keyframes[len].index + 1;
			for (i = 0; i < len; i++) {
				this._dealKeyFrame(keyframes[i]);
				this._calculateFrameValues(keyframes[i], keyframes[i + 1], frames);
			}
			if (len == 0) {
				frames[0] = keyframes[0].value;
				if (this._animationNewFrames)
					this._animationNewFrames[keyframes[0].index] = true;
			}
			this._dealKeyFrame(keyframes[i]);
		}

		/**
		*@private
		*
		*/
		__proto._dealKeyFrame = function (keyFrame) {
			if (keyFrame.label && keyFrame.label != "") this.addLabel(keyFrame.label, keyFrame.index);
		}

		/**
		*@private
		*计算两个关键帧直接的帧数据
		*@param startFrame
		*@param endFrame
		*@param result
		*
		*/
		__proto._calculateFrameValues = function (startFrame, endFrame, result) {
			var i = 0, easeFun;
			var start = startFrame.index, end = endFrame.index;
			var startValue = startFrame.value;
			var dValue = endFrame.value - startFrame.value;
			var dLen = end - start;
			if (end > this._count) this._count = end;
			if (startFrame.tween) {
				easeFun = Ease[startFrame.tweenMethod];
				if (easeFun == null) {
					easeFun = Ease.linearNone;
				}
				for (i = start; i < end; i++) {
					result[i] = easeFun(i - start, startValue, dValue, dLen);
					if (this._animationNewFrames) {
						this._animationNewFrames[i] = true;
					}
				}
			} else {
				for (i = start; i < end; i++) {
					result[i] = startValue;
				}
			}
			if (this._animationNewFrames) {
				this._animationNewFrames[startFrame.index] = true;
				this._animationNewFrames[endFrame.index] = true;
			}
			result[endFrame.index] = endFrame.value;
		}

		FrameAnimation._sortIndexFun = null
		return FrameAnimation;
	})(AnimationPlayerBase)


	/**
	*<p><code>Input</code> 类用于创建显示对象以显示和输入文本。</p>
	*<p>Input 类封装了原生的文本输入框，由于不同浏览器的差异，会导致此对象的默认文本的位置与用户点击输入时的文本的位置有少许的偏差。</p>
	*/
	//class laya.display.Input extends laya.display.Text
	var Input = (function (_super) {
		function Input() {
			this._focus = false;
			this._multiline = false;
			this._editable = true;
			this._restrictPattern = null;
			this._type = "text";
			this._prompt = '';
			this._promptColor = "#A9A9A9";
			this._originColor = "#000000";
			this._content = '';
			Input.__super.call(this);
			this._maxChars = 1E5;
			this._width = 100;
			this._height = 20;
			this.multiline = false;
			this.overflow = Text.SCROLL;
			this.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown", this, this._onMouseDown);
			this.on(/*laya.events.Event.UNDISPLAY*/"undisplay", this, this._onUnDisplay);
		}

		__class(Input, 'laya.display.Input', _super);
		var __proto = Input.prototype;
		/**
		*设置光标位置和选取字符。
		*@param startIndex 光标起始位置。
		*@param endIndex 光标结束位置。
		*/
		__proto.setSelection = function (startIndex, endIndex) {
			this.focus = true;
			laya.display.Input.inputElement.selectionStart = startIndex;
			laya.display.Input.inputElement.selectionEnd = endIndex;
		}

		__proto._onUnDisplay = function (e) {
			this.focus = false;
		}

		__proto._onMouseDown = function (e) {
			this.focus = true;
		}

		/**@inheritDoc*/
		__proto.render = function (context, x, y) {
			laya.display.Sprite.prototype.render.call(this, context, x, y);
		}

		/**
		*在输入期间，如果 Input 实例的位置改变，调用_syncInputTransform同步输入框的位置。
		*/
		__proto._syncInputTransform = function () {
			var inputElement = this.nativeInput;
			var transform = Utils.getTransformRelativeToWindow(this, this.padding[3], this.padding[0]);
			var inputWid = this._width - this.padding[1] - this.padding[3];
			var inputHei = this._height - this.padding[0] - this.padding[2];
			if (Render.isConchApp) {
				inputElement.setScale(transform.scaleX, transform.scaleY);
				inputElement.setSize(inputWid, inputHei);
				inputElement.setPos(transform.x, transform.y);
			} else {
				Input.inputContainer.style.transform = Input.inputContainer.style.webkitTransform = "scale(" + transform.scaleX + "," + transform.scaleY + ") rotate(" + (Laya.stage.canvasDegree) + "deg)";
				inputElement.style.width = inputWid + 'px';
				inputElement.style.height = inputHei + 'px';
				Input.inputContainer.style.left = transform.x + 'px';
				Input.inputContainer.style.top = transform.y + 'px';
			}
		}

		/**选中当前实例的所有文本。*/
		__proto.select = function () {
			this.nativeInput.select();
		}

		__proto._setInputMethod = function () {
			Input.input.parentElement && (Input.inputContainer.removeChild(Input.input));
			Input.area.parentElement && (Input.inputContainer.removeChild(Input.area));
			Input.inputElement = (this._multiline ? Input.area : Input.input);
			Input.inputContainer.appendChild(Input.inputElement);
		}

		__proto._focusIn = function () {
			laya.display.Input.isInputting = true;
			var input = this.nativeInput;
			this._focus = true;
			var cssStyle = input.style;
			cssStyle.whiteSpace = (this.wordWrap ? "pre-wrap" : "nowrap");
			this._setPromptColor();
			input.readOnly = !this._editable;
			if (Render.isConchApp) {
				input.setForbidEdit(!this._editable);
			}
			input.maxLength = this._maxChars;
			var padding = this.padding;
			input.type = this._type;
			input.value = this._content;
			input.placeholder = this._prompt;
			Laya.stage.off(/*laya.events.Event.KEY_DOWN*/"keydown", this, this._onKeyDown);
			Laya.stage.on(/*laya.events.Event.KEY_DOWN*/"keydown", this, this._onKeyDown);
			Laya.stage.focus = this;
			this.event(/*laya.events.Event.FOCUS*/"focus");
			if (Browser.onPC) input.focus();
			var temp = this._text;
			this._text = null;
			this.typeset();
			input.setColor(this._originColor);
			input.setFontSize(this.fontSize);
			input.setFontFace(Browser.onIPhone ? (Text._fontFamilyMap[this.font] || this.font) : this.font);
			if (Render.isConchApp) {
				input.setMultiAble && input.setMultiAble(this._multiline);
			}
			cssStyle.lineHeight = (this.leading + this.fontSize) + "px";
			cssStyle.fontStyle = (this.italic ? "italic" : "normal");
			cssStyle.fontWeight = (this.bold ? "bold" : "normal");
			cssStyle.textAlign = this.align;
			cssStyle.padding = "0 0";
			this._syncInputTransform();
			if (!Render.isConchApp && Browser.onPC)
				Laya.timer.frameLoop(1, this, this._syncInputTransform);
		}

		// 设置DOM输入框提示符颜色。
		__proto._setPromptColor = function () {
			Input.promptStyleDOM = Browser.getElementById("promptStyle");
			if (!Input.promptStyleDOM) {
				Input.promptStyleDOM = Browser.createElement("style");
				Input.promptStyleDOM.setAttribute("id", "promptStyle");
				Browser.document.head.appendChild(Input.promptStyleDOM);
			}
			Input.promptStyleDOM.innerText = "input::-webkit-input-placeholder, textarea::-webkit-input-placeholder {" + "color:" + this._promptColor + "}" + "input:-moz-placeholder, textarea:-moz-placeholder {" + "color:" + this._promptColor + "}" + "input::-moz-placeholder, textarea::-moz-placeholder {" + "color:" + this._promptColor + "}" + "input:-ms-input-placeholder, textarea:-ms-input-placeholder {" + "color:" + this._promptColor + "}";
		}

		/**@private */
		__proto._focusOut = function () {
			laya.display.Input.isInputting = false;
			this._focus = false;
			this._text = null;
			this._content = this.nativeInput.value;
			if (!this._content) {
				_super.prototype._$set_text.call(this, this._prompt);
				_super.prototype._$set_color.call(this, this._promptColor);
			} else {
				_super.prototype._$set_text.call(this, this._content);
				_super.prototype._$set_color.call(this, this._originColor);
			}
			Laya.stage.off(/*laya.events.Event.KEY_DOWN*/"keydown", this, this._onKeyDown);
			Laya.stage.focus = null;
			this.event(/*laya.events.Event.BLUR*/"blur");
			if (Render.isConchApp) this.nativeInput.blur();
			Browser.onPC && Laya.timer.clear(this, this._syncInputTransform);
		}

		/**@private */
		__proto._onKeyDown = function (e) {
			if (e.keyCode === 13) {
				if (Browser.onMobile && !this._multiline)
					this.focus = false;
				this.event(/*laya.events.Event.ENTER*/"enter");
			}
		}

		__proto.changeText = function (text) {
			this._content = text;
			if (this._focus) {
				this.nativeInput.value = text || '';
				this.event(/*laya.events.Event.CHANGE*/"change");
			} else
				_super.prototype.changeText.call(this, text);
		}

		/**@inheritDoc */
		__getset(0, __proto, 'color', _super.prototype._$get_color, function (value) {
			if (this._focus)
				this.nativeInput.setColor(value);
			_super.prototype._$set_color.call(this, this._content ? value : this._promptColor);
			this._originColor = value;
		});

		//[Deprecated]
		__getset(0, __proto, 'inputElementYAdjuster', function () {
			console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementYAdjuster已弃用。");
			return 0;
		}, function (value) {
			console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementYAdjuster已弃用。");
		});

		/**表示是否是多行输入框。*/
		__getset(0, __proto, 'multiline', function () {
			return this._multiline;
		}, function (value) {
			this._multiline = value;
			this.valign = value ? "top" : "middle";
		});

		/**
		*<p>字符数量限制，默认为10000。</p>
		*<p>设置字符数量限制时，小于等于0的值将会限制字符数量为10000。</p>
		*/
		__getset(0, __proto, 'maxChars', function () {
			return this._maxChars;
		}, function (value) {
			if (value <= 0)
				value = 1E5;
			this._maxChars = value;
		});

		/**@inheritDoc */
		__getset(0, __proto, 'text', function () {
			if (this._focus)
				return this.nativeInput.value;
			else
				return this._content || "";
		}, function (value) {
			_super.prototype._$set_color.call(this, this._originColor);
			value += '';
			if (this._focus) {
				this.nativeInput.value = value || '';
				this.event(/*laya.events.Event.CHANGE*/"change");
			} else {
				if (!this._multiline)
					value = value.replace(/\r?\n/g, '');
				this._content = value;
				if (value)
					_super.prototype._$set_text.call(this, value);
				else {
					_super.prototype._$set_text.call(this, this._prompt);
					_super.prototype._$set_color.call(this, this.promptColor);
				}
			}
		});

		/**
		*获取对输入框的引用实例。
		*/
		__getset(0, __proto, 'nativeInput', function () {
			return this._multiline ? Input.area : Input.input;
		});

		/**
		*设置输入提示符。
		*/
		__getset(0, __proto, 'prompt', function () {
			return this._prompt;
		}, function (value) {
			if (!this._text && value)
				_super.prototype._$set_color.call(this, this._promptColor);
			this.promptColor = this._promptColor;
			if (this._text)
				_super.prototype._$set_text.call(this, (this._text == this._prompt) ? value : this._text);
			else
				_super.prototype._$set_text.call(this, value);
			this._prompt = Text.langPacks && Text.langPacks[value] ? Text.langPacks[value] : value;
		});

		// 因此 调用focus接口是无法都在移动平台立刻弹出键盘的
		/**
		*表示焦点是否在此实例上。
		*/
		__getset(0, __proto, 'focus', function () {
			return this._focus;
		}, function (value) {
			var input = this.nativeInput;
			if (this._focus !== value) {
				if (value) {
					if (input.target) {
						input.target._focusOut();
					} else {
						this._setInputMethod();
					}
					input.target = this;
					this._focusIn();
				} else {
					input.target = null;
					this._focusOut();
					input.blur();
					if (Render.isConchApp) {
						input.setPos(-10000, -10000);
					} else if (Input.inputContainer.contains(input))
						Input.inputContainer.removeChild(input);
				}
			}
		});

		/**限制输入的字符。*/
		__getset(0, __proto, 'restrict', function () {
			if (this._restrictPattern) {
				return this._restrictPattern.source;
			}
			return "";
		}, function (pattern) {
			if (pattern) {
				pattern = "[^" + pattern + "]";
				if (pattern.indexOf("^^") > -1)
					pattern = pattern.replace("^^", "");
				this._restrictPattern = new RegExp(pattern, "g");
			} else
				this._restrictPattern = null;
		});

		/**
		*是否可编辑。
		*/
		__getset(0, __proto, 'editable', function () {
			return this._editable;
		}, function (value) {
			this._editable = value;
			if (Render.isConchApp) {
				Input.input.setForbidEdit(!value);
			}
		});

		/**
		*设置输入提示符颜色。
		*/
		__getset(0, __proto, 'promptColor', function () {
			return this._promptColor;
		}, function (value) {
			this._promptColor = value;
			if (!this._content) _super.prototype._$set_color.call(this, value);
		});

		/**
		*<p>输入框类型为Input静态常量之一。</p>
		*<ul>
		*<li>TYPE_TEXT</li>
		*<li>TYPE_PASSWORD</li>
		*<li>TYPE_EMAIL</li>
		*<li>TYPE_URL</li>
		*<li>TYPE_NUMBER</li>
		*<li>TYPE_RANGE</li>
		*<li>TYPE_DATE</li>
		*<li>TYPE_MONTH</li>
		*<li>TYPE_WEEK</li>
		*<li>TYPE_TIME</li>
		*<li>TYPE_DATE_TIME</li>
		*<li>TYPE_DATE_TIME_LOCAL</li>
		*</ul>
		*<p>平台兼容性参见http://www.w3school.com.cn/html5/html_5_form_input_types.asp。</p>
		*/
		__getset(0, __proto, 'type', function () {
			return this._type;
		}, function (value) {
			if (value == "password")
				this._getCSSStyle().password = true;
			else
				this._getCSSStyle().password = false;
			this._type = value;
		});

		/**
		*<p>原生输入框 X 轴调整值，用来调整输入框坐标。</p>
		*<p>由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementXAdjuster已弃用。</p>
		*@deprecated
		*/
		__getset(0, __proto, 'inputElementXAdjuster', function () {
			console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementXAdjuster已弃用。");
			return 0;
		}, function (value) {
			console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementXAdjuster已弃用。");
		});

		//[Deprecated(replacement="Input.type")]
		__getset(0, __proto, 'asPassword', function () {
			return this._getCSSStyle().password;
		}, function (value) {
			this._getCSSStyle().password = value;
			this._type =/*CLASS CONST:laya.display.Input.TYPE_PASSWORD*/"password";
			console.warn("deprecated: 使用type=\"password\"替代设置asPassword, asPassword将在下次重大更新时删去");
			this.isChanged = true;
		});

		Input.__init__ = function () {
			Input._createInputElement();
			if (Browser.onMobile)
				Render.canvas.addEventListener(Input.IOS_IFRAME ? "click" : "touchend", Input._popupInputMethod);
		}

		Input._popupInputMethod = function (e) {
			if (!laya.display.Input.isInputting) return;
			var input = laya.display.Input.inputElement;
			input.focus();
		}

		Input._createInputElement = function () {
			Input._initInput(Input.area = Browser.createElement("textarea"));
			Input._initInput(Input.input = Browser.createElement("input"));
			Input.inputContainer = Browser.createElement("div");
			Input.inputContainer.style.position = "absolute";
			Input.inputContainer.style.zIndex = 1E5;
			Browser.container.appendChild(Input.inputContainer);
			Input.inputContainer.setPos = function (x, y) { Input.inputContainer.style.left = x + 'px'; Input.inputContainer.style.top = y + 'px'; };
		}

		Input._initInput = function (input) {
			var style = input.style;
			style.cssText = "position:absolute;overflow:hidden;resize:none;transform-origin:0 0;-webkit-transform-origin:0 0;-moz-transform-origin:0 0;-o-transform-origin:0 0;";
			style.resize = 'none';
			style.backgroundColor = 'transparent';
			style.border = 'none';
			style.outline = 'none';
			style.zIndex = 1;
			input.addEventListener('input', Input._processInputting);
			input.addEventListener('mousemove', Input._stopEvent);
			input.addEventListener('mousedown', Input._stopEvent);
			input.addEventListener('touchmove', Input._stopEvent);
			input.setFontFace = function (fontFace) { input.style.fontFamily = fontFace; };
			if (!Render.isConchApp) {
				input.setColor = function (color) { input.style.color = color; };
				input.setFontSize = function (fontSize) { input.style.fontSize = fontSize + 'px'; };
			}
		}

		Input._processInputting = function (e) {
			var input = laya.display.Input.inputElement.target;
			if (!input) return;
			var value = laya.display.Input.inputElement.value;
			if (input._restrictPattern) {
				value = value.replace(/\u2006|\x27/g, "");
				if (input._restrictPattern.test(value)) {
					value = value.replace(input._restrictPattern, "");
					laya.display.Input.inputElement.value = value;
				}
			}
			input._text = value;
			input.event(/*laya.events.Event.INPUT*/"input");
		}

		Input._stopEvent = function (e) {
			if (e.type == 'touchmove')
				e.preventDefault();
			e.stopPropagation && e.stopPropagation();
		}

		Input.TYPE_TEXT = "text";
		Input.TYPE_PASSWORD = "password";
		Input.TYPE_EMAIL = "email";
		Input.TYPE_URL = "url";
		Input.TYPE_NUMBER = "number";
		Input.TYPE_RANGE = "range";
		Input.TYPE_DATE = "date";
		Input.TYPE_MONTH = "month";
		Input.TYPE_WEEK = "week";
		Input.TYPE_TIME = "time";
		Input.TYPE_DATE_TIME = "datetime";
		Input.TYPE_DATE_TIME_LOCAL = "datetime-local";
		Input.TYPE_SEARCH = "search";
		Input.input = null
		Input.area = null
		Input.inputElement = null
		Input.inputContainer = null
		Input.confirmButton = null
		Input.promptStyleDOM = null
		Input.inputHeight = 45;
		Input.isInputting = false;
		Input.stageMatrix = null
		__static(Input,
			['IOS_IFRAME', function () { return this.IOS_IFRAME = (Browser.onIOS && Browser.window.top != Browser.window.self); }
			]);
		return Input;
	})(Text)


	/**
	*@private
	*<p> <code>HTMLImage</code> 用于创建 HTML Image 元素。</p>
	*<p>请使用 <code>HTMLImage.create()<code>获取新实例，不要直接使用 <code>new HTMLImage<code> 。</p>
	*/
	//class laya.resource.HTMLImage extends laya.resource.FileBitmap
	var HTMLImage = (function (_super) {
		function HTMLImage(src, def) {
			this._recreateLock = false;
			this._needReleaseAgain = false;
			HTMLImage.__super.call(this);
			this._init_(src, def);
		}

		__class(HTMLImage, 'laya.resource.HTMLImage', _super);
		var __proto = HTMLImage.prototype;
		__proto._init_ = function (src, def) {
			this._src = src;
			this._source = new Browser.window.Image();
			if (def) {
				def.onload && (this.onload = def.onload);
				def.onerror && (this.onerror = def.onerror);
				def.onCreate && def.onCreate(this);
			}
			if (src.indexOf("data:image") != 0) this._source.crossOrigin = "";
			(src) && (this._source.src = src);
		}

		/**
		*@inheritDoc
		*/
		__proto.recreateResource = function () {
			var _$this = this;
			if (this._src === "")
				throw new Error("src no null！");
			this._needReleaseAgain = false;
			if (!this._source) {
				this._recreateLock = true;
				var _this = this;
				this._source = new Browser.window.Image();
				this._source.crossOrigin = "";
				this._source.onload = function () {
					if (_this._needReleaseAgain) {
						_this._needReleaseAgain = false;
						_this._source.onload = null;
						_this._source = null;
						return;
					}
					_this._source.onload = null;
					_this.memorySize = _$this._w * _$this._h * 4;
					_this._recreateLock = false;
					_this.completeCreate();
				};
				this._source.src = this._src;
			} else {
				if (this._recreateLock)
					return;
				this.memorySize = this._w * this._h * 4;
				this._recreateLock = false;
				this.completeCreate();
			}
		}

		/**
		*@inheritDoc
		*/
		__proto.detoryResource = function () {
			if (this._recreateLock)
				this._needReleaseAgain = true;
			(this._source) && (this._source = null, this.memorySize = 0);
		}

		/***调整尺寸。*/
		__proto.onresize = function () {
			this._w = this._source.width;
			this._h = this._source.height;
		}

		/**
		*@inheritDoc
		*/
		__getset(0, __proto, 'onload', null, function (value) {
			var _$this = this;
			this._onload = value;
			this._source && (this._source.onload = this._onload != null ? (function () {
				_$this.onresize();
				_$this._onload();
			}) : null);
		});

		/**
		*@inheritDoc
		*/
		__getset(0, __proto, 'onerror', null, function (value) {
			var _$this = this;
			this._onerror = value;
			this._source && (this._source.onerror = this._onerror != null ? (function () {
				_$this._onerror()
			}) : null);
		});

		HTMLImage.create = function (src, def) {
			return new HTMLImage(src, def);
		}

		return HTMLImage;
	})(FileBitmap)


	/**
	*<p> 动效模板。用于为指定目标对象添加动画效果。每个动效有唯一的目标对象，而同一个对象可以添加多个动效。 当一个动效开始播放时，其他动效会自动停止播放。</p>
	*<p> 可以通过LayaAir IDE创建。 </p>
	*/
	//class laya.display.EffectAnimation extends laya.display.FrameAnimation
	var EffectAnimation = (function (_super) {
		function EffectAnimation() {
			this._target = null;
			this._playEvents = null;
			this._initData = {};
			this._aniKeys = null;
			this._effectClass = null;
			EffectAnimation.__super.call(this);
		}

		__class(EffectAnimation, 'laya.display.EffectAnimation', _super);
		var __proto = EffectAnimation.prototype;
		/**@private */
		__proto._onOtherBegin = function (effect) {
			if (effect == this)
				return;
			this.stop();
		}

		/**@private */
		__proto.addEvent = function () {
			if (!this._target || !this._playEvents)
				return;
			this._setControlNode(this._target);
			this._target.on(this._playEvents, this, this._onPlayAction);
		}

		/**@private */
		__proto._onPlayAction = function () {
			if (!this._target)
				return;
			this._target.event("effectanimationbegin", [this]);
			this._recordInitData();
			this.play(0, false);
		}

		/**@private */
		__proto._recordInitData = function () {
			if (!this._aniKeys)
				return;
			var i = 0, len = 0;
			len = this._aniKeys.length;
			var key;
			for (i = 0; i < len; i++) {
				key = this._aniKeys[i];
				this._initData[key] = this._target[key];
			}
		}

		/**@private */
		__proto._displayToIndex = function (value) {
			if (!this._animationData)
				return;
			if (value < 0)
				value = 0;
			if (value > this._count)
				value = this._count;
			var nodes = this._animationData.nodes, i = 0, len = nodes.length;
			len = len > 1 ? 1 : len;
			for (i = 0; i < len; i++) {
				this._displayNodeToFrame(nodes[i], value);
			}
		}

		/**@private */
		__proto._displayNodeToFrame = function (node, frame, targetDic) {
			if (!this._target)
				return;
			var target;
			target = this._target;
			var frames = node.frames, key, propFrames, value;
			var keys = node.keys, i = 0, len = keys.length;
			var secondFrames;
			secondFrames = node.secondFrames;
			var tSecondFrame = 0;
			var easeFun;
			var tKeyFrames;
			var startFrame;
			var endFrame;
			for (i = 0; i < len; i++) {
				key = keys[i];
				propFrames = frames[key];
				tSecondFrame = secondFrames[key];
				if (tSecondFrame == -1) {
					value = this._initData[key];
				} else {
					if (frame < tSecondFrame) {
						tKeyFrames = node.keyframes[key];
						startFrame = tKeyFrames[0];
						if (startFrame.tween) {
							easeFun = Ease[startFrame.tweenMethod];
							if (easeFun == null) {
								easeFun = Ease.linearNone;
							}
							endFrame = tKeyFrames[1];
							value = easeFun(frame, this._initData[key], endFrame.value - this._initData[key], endFrame.index);
						} else {
							value = this._initData[key];
						}
					} else {
						if (propFrames.length > frame) {
							value = propFrames[frame];
						} else {
							value = propFrames[propFrames.length - 1];
						}
					}
				}
				target[key] = value;
			}
		}

		/**@private */
		__proto._calculateNodeKeyFrames = function (node) {
			_super.prototype._calculateNodeKeyFrames.call(this, node);
			var keyFrames = node.keyframes, key, tKeyFrames, target = node.target;
			var secondFrames;
			secondFrames = {};
			node.secondFrames = secondFrames;
			for (key in keyFrames) {
				tKeyFrames = keyFrames[key];
				if (tKeyFrames.length <= 1) {
					secondFrames[key] = -1;
				} else {
					secondFrames[key] = tKeyFrames[1].index;
				}
			}
		}

		/**
		*本实例的目标对象。通过本实例控制目标对象的属性变化。
		*@param v 指定的目标对象。
		*/
		__getset(0, __proto, 'target', function () {
			return this._target;
		}, function (v) {
			if (this._target) {
				this._target.off("effectanimationbegin", this, this._onOtherBegin);
			}
			this._target = v;
			if (this._target) {
				this._target.on("effectanimationbegin", this, this._onOtherBegin);
			}
			this.addEvent();
		});

		/**
		*设置开始播放的事件。本实例会侦听目标对象的指定事件，触发后播放相应动画效果。
		*@param event
		*/
		__getset(0, __proto, 'playEvent', null, function (event) {
			this._playEvents = event;
			if (!event)
				return;
			this.addEvent();
		});

		/**
		*设置动画数据。
		*@param uiData
		*/
		__getset(0, __proto, 'effectData', null, function (uiData) {
			if (uiData) {
				var aniData;
				aniData = uiData["animations"];
				if (aniData && aniData[0]) {
					this._setUp({}, aniData[0]);
					if (aniData[0].nodes && aniData[0].nodes[0]) {
						this._aniKeys = aniData[0].nodes[0].keys;
					}
				}
			}
		});

		/**
		*设置提供数据的类。
		*@param classStr 类路径
		*/
		__getset(0, __proto, 'effectClass', null, function (classStr) {
			this._effectClass = ClassUtils.getClass(classStr);
			if (this._effectClass) {
				var uiData;
				uiData = this._effectClass["uiView"];
				if (uiData) {
					var aniData;
					aniData = uiData["animations"];
					if (aniData && aniData[0]) {
						this._setUp({}, aniData[0]);
						if (aniData[0].nodes && aniData[0].nodes[0]) {
							this._aniKeys = aniData[0].nodes[0].keys;
						}
					}
				}
			}
		});

		EffectAnimation.EffectAnimationBegin = "effectanimationbegin";
		return EffectAnimation;
	})(FrameAnimation)


	/**
	*@private
	*/
	//class laya.utils.GraphicAnimation extends laya.display.FrameAnimation
	var GraphicAnimation = (function (_super) {
		var GraphicNode;
		function GraphicAnimation() {
			this.animationList = null;
			this.animationDic = null;
			this._nodeList = null;
			this._nodeDefaultProps = null;
			this._gList = null;
			this._nodeIDAniDic = {};
			this._rootNode = null;
			this._nodeGDic = null;
			GraphicAnimation.__super.call(this);
		}

		__class(GraphicAnimation, 'laya.utils.GraphicAnimation', _super);
		var __proto = GraphicAnimation.prototype;
		/**
		*@private
		*/
		__proto._parseNodeList = function (uiView) {
			if (!this._nodeList) {
				this._nodeList = [];
			}
			this._nodeDefaultProps[uiView.compId] = uiView.props;
			if (uiView.compId)
				this._nodeList.push(uiView.compId);
			var childs = uiView.child;
			if (childs) {
				var i = 0, len = childs.length;
				for (i = 0; i < len; i++) {
					this._parseNodeList(childs[i]);
				}
			}
		}

		/**
		*@private
		*/
		__proto._calGraphicData = function (aniData) {
			this._setUp(null, aniData);
			this._createGraphicData();
			if (this._nodeIDAniDic) {
				var key;
				for (key in this._nodeIDAniDic) {
					this._nodeIDAniDic[key] = null;
				}
			}
		}

		/**
		*@private
		*/
		__proto._createGraphicData = function () {
			var gList = [];
			var i = 0, len = this.count;
			var animationDataNew = this._animationNewFrames;
			if (!animationDataNew) animationDataNew = [];
			var preGraphic;
			for (i = 0; i < len; i++) {
				if (animationDataNew[i] || !preGraphic) {
					preGraphic = this._createFrameGraphic(i);
				}
				gList.push(preGraphic);
			}
			this._gList = gList;
		}

		/**
		*@private
		*/
		__proto._createFrameGraphic = function (frame) {
			var g = new Graphics();
			if (!GraphicAnimation._rootMatrix)
				GraphicAnimation._rootMatrix = new Matrix();
			this._updateNodeGraphic(this._rootNode, frame, GraphicAnimation._rootMatrix, g);
			return g;
		}

		__proto._updateNodeGraphic = function (node, frame, parentTransfrom, g, alpha) {
			(alpha === void 0) && (alpha = 1);
			var tNodeG;
			tNodeG = this._nodeGDic[node.compId] = this._getNodeGraphicData(node.compId, frame, this._nodeGDic[node.compId]);
			var tGraphicAlpha = tNodeG.alpha * alpha;
			if (tGraphicAlpha < 0.01) return;
			if (!tNodeG.resultTransform) {
				tNodeG.resultTransform = Matrix.create();
			};
			var tResultTransform;
			tResultTransform = tNodeG.resultTransform;
			Matrix.mul(tNodeG.transform, parentTransfrom, tResultTransform);
			var tTex;
			if (tNodeG.skin) {
				tTex = this._getTextureByUrl(tNodeG.skin);
				if (tTex) {
					if (tResultTransform._checkTransform()) {
						g.drawTexture(tTex, 0, 0, tNodeG.width, tNodeG.height, tResultTransform, tGraphicAlpha);
						tNodeG.resultTransform = null;
					} else {
						g.drawTexture(tTex, tResultTransform.tx, tResultTransform.ty, tNodeG.width, tNodeG.height, null, tGraphicAlpha);
					}
				}
			};
			var childs;
			childs = node.child;
			if (!childs)
				return;
			var i = 0, len = 0;
			len = childs.length;
			for (i = 0; i < len; i++) {
				this._updateNodeGraphic(childs[i], frame, tResultTransform, g, tGraphicAlpha);
			}
		}

		__proto._updateNoChilds = function (tNodeG, g) {
			if (!tNodeG.skin)
				return;
			var tTex = this._getTextureByUrl(tNodeG.skin);
			if (!tTex)
				return;
			var tTransform = tNodeG.transform;
			tTransform._checkTransform();
			var onlyTranslate = false;
			onlyTranslate = !tTransform.bTransform;
			if (!onlyTranslate) {
				g.drawTexture(tTex, 0, 0, tNodeG.width, tNodeG.height, tTransform.clone(), tNodeG.alpha);
			} else {
				g.drawTexture(tTex, tTransform.tx, tTransform.ty, tNodeG.width, tNodeG.height, null, tNodeG.alpha);
			}
		}

		__proto._updateNodeGraphic2 = function (node, frame, g) {
			var tNodeG;
			tNodeG = this._nodeGDic[node.compId] = this._getNodeGraphicData(node.compId, frame, this._nodeGDic[node.compId]);
			if (!node.child) {
				this._updateNoChilds(tNodeG, g);
				return;
			};
			var tTransform = tNodeG.transform;
			tTransform._checkTransform();
			var onlyTranslate = false;
			onlyTranslate = !tTransform.bTransform;
			var hasTrans = false;
			hasTrans = onlyTranslate && (tTransform.tx != 0 || tTransform.ty != 0);
			var ifSave = false;
			ifSave = (tTransform.bTransform) || tNodeG.alpha != 1;
			if (ifSave) {
				g.save();
			}
			if (tNodeG.alpha != 1) {
				g.alpha(tNodeG.alpha);
			}
			if (!onlyTranslate) {
				g.transform(tTransform.clone());
			} else if (hasTrans) {
				g.translate(tTransform.tx, tTransform.ty);
			};
			var childs;
			childs = node.child;
			var tTex;
			if (tNodeG.skin) {
				tTex = this._getTextureByUrl(tNodeG.skin);
				if (tTex) {
					g.drawTexture(tTex, 0, 0, tNodeG.width, tNodeG.height);
				}
			}
			if (childs) {
				var i = 0, len = 0;
				len = childs.length;
				for (i = 0; i < len; i++) {
					this._updateNodeGraphic2(childs[i], frame, g);
				}
			}
			if (ifSave) {
				g.restore();
			} else {
				if (!onlyTranslate) {
					g.transform(tTransform.clone().invert());
				} else if (hasTrans) {
					g.translate(-tTransform.tx, -tTransform.ty);
				}
			}
		}

		/**
		*@private
		*/
		__proto._calculateNodeKeyFrames = function (node) {
			_super.prototype._calculateNodeKeyFrames.call(this, node);
			this._nodeIDAniDic[node.target] = node;
		}

		/**
		*@private
		*/
		__proto.getNodeDataByID = function (nodeID) {
			return this._nodeIDAniDic[nodeID];
		}

		/**
		*@private
		*/
		__proto._getParams = function (obj, params, frame, obj2) {
			var rst = GraphicAnimation._temParam;
			rst.length = params.length;
			var i = 0, len = params.length;
			for (i = 0; i < len; i++) {
				rst[i] = this._getObjVar(obj, params[i][0], frame, params[i][1], obj2);
			}
			return rst;
		}

		/**
		*@private
		*/
		__proto._getObjVar = function (obj, key, frame, noValue, obj2) {
			if (obj.hasOwnProperty(key)) {
				var vArr = obj[key];
				if (frame >= vArr.length)
					frame = vArr.length - 1;
				return obj[key][frame];
			}
			if (obj2.hasOwnProperty(key)) {
				return obj2[key];
			}
			return noValue;
		}

		__proto._getNodeGraphicData = function (nodeID, frame, rst) {
			if (!rst)
				rst = GraphicNode.create();
			if (!rst.transform) {
				rst.transform = Matrix.create();
			} else {
				rst.transform.identity();
			};
			var node = this.getNodeDataByID(nodeID);
			if (!node)
				return rst;
			var frameData = node.frames;
			var params = this._getParams(frameData, GraphicAnimation._drawTextureCmd, frame, this._nodeDefaultProps[nodeID]);
			var url = params[0];
			var width = NaN, height = NaN;
			var px = params[5], py = params[6];
			var aX = params[13], aY = params[14];
			var sx = params[7], sy = params[8];
			var rotate = params[9];
			var skewX = params[11], skewY = params[12]
			width = params[3];
			height = params[4];
			if (width == 0 || height == 0) url = null;
			if (width == -1) width = 0;
			if (height == -1) height = 0;
			var tex;
			rst.skin = url;
			rst.width = width;
			rst.height = height;
			if (url) {
				tex = this._getTextureByUrl(url);
				if (tex) {
					if (!width)
						width = tex.sourceWidth;
					if (!height)
						height = tex.sourceHeight;
				} else {
					console.warn("lost skin:", url, ",you may load pics first");
				}
			}
			rst.alpha = params[10];
			var m;
			m = rst.transform;
			if (aX != 0) {
				px = aX * width;
			}
			if (aY != 0) {
				py = aY * height;
			}
			if (px != 0 || py != 0) {
				m.translate(-px, -py);
			};
			var tm = null;
			if (rotate || sx !== 1 || sy !== 1 || skewX || skewY) {
				tm = GraphicAnimation._tempMt;
				tm.identity();
				tm.bTransform = true;
				var skx = (rotate - skewX) * 0.0174532922222222;
				var sky = (rotate + skewY) * 0.0174532922222222;
				var cx = Math.cos(sky);
				var ssx = Math.sin(sky);
				var cy = Math.sin(skx);
				var ssy = Math.cos(skx);
				tm.a = sx * cx;
				tm.b = sx * ssx;
				tm.c = -sy * cy;
				tm.d = sy * ssy;
				tm.tx = tm.ty = 0;
			}
			if (tm) {
				m = Matrix.mul(m, tm, m);
			}
			m.translate(params[1], params[2]);
			return rst;
		}

		/**
		*@private
		*/
		__proto._getTextureByUrl = function (url) {
			return Loader.getRes(url);
		}

		/**
		*@private
		*/
		__proto.setAniData = function (uiView, aniName) {
			if (uiView.animations) {
				this._nodeDefaultProps = {};
				this._nodeGDic = {};
				if (this._nodeList)
					this._nodeList.length = 0;
				this._rootNode = uiView;
				this._parseNodeList(uiView);
				var aniDic = {};
				var anilist = [];
				var animations = uiView.animations;
				var i = 0, len = animations.length;
				var tAniO;
				for (i = 0; i < len; i++) {
					tAniO = animations[i];
					this._labels = null;
					if (aniName && aniName != tAniO.name) {
						continue;
					}
					if (!tAniO)
						continue;
					try {
						this._calGraphicData(tAniO);
					} catch (e) {
						console.warn("parse animation fail:" + tAniO.name + ",empty animation created");
						this._gList = [];
					};
					var frameO = {};
					frameO.interval = 1000 / tAniO["frameRate"];
					frameO.frames = this._gList;
					frameO.labels = this._labels;
					frameO.name = tAniO.name;
					anilist.push(frameO);
					aniDic[tAniO.name] = frameO;
				}
				this.animationList = anilist;
				this.animationDic = aniDic;
			}
			GraphicAnimation._temParam.length = 0;
		}

		__proto.parseByData = function (aniData) {
			var rootNode, aniO;
			rootNode = aniData.nodeRoot;
			aniO = aniData.aniO;
			delete aniData.nodeRoot;
			delete aniData.aniO;
			this._nodeDefaultProps = {};
			this._nodeGDic = {};
			if (this._nodeList)
				this._nodeList.length = 0;
			this._rootNode = rootNode;
			this._parseNodeList(rootNode);
			this._labels = null;
			try {
				this._calGraphicData(aniO);
			} catch (e) {
				console.warn("parse animation fail:" + aniO.name + ",empty animation created");
				this._gList = [];
			};
			var frameO = aniData;
			frameO.interval = 1000 / aniO["frameRate"];
			frameO.frames = this._gList;
			frameO.labels = this._labels;
			frameO.name = aniO.name;
			return frameO;
		}

		/**
		*@private
		*/
		__proto.setUpAniData = function (uiView) {
			if (uiView.animations) {
				var aniDic = {};
				var anilist = [];
				var animations = uiView.animations;
				var i = 0, len = animations.length;
				var tAniO;
				for (i = 0; i < len; i++) {
					tAniO = animations[i];
					if (!tAniO)
						continue;
					var frameO = {};
					frameO.name = tAniO.name;
					frameO.aniO = tAniO;
					frameO.nodeRoot = uiView;
					anilist.push(frameO);
					aniDic[tAniO.name] = frameO;
				}
				this.animationList = anilist;
				this.animationDic = aniDic;
			}
		}

		/**
		*@private
		*/
		__proto._clear = function () {
			this.animationList = null;
			this.animationDic = null;
			this._gList = null;
			if (this._nodeGDic) {
				var key;
				var tGNode;
				for (key in this._nodeGDic) {
					tGNode = this._nodeGDic[key];
					if (tGNode) tGNode.recover();
				}
			}
			this._nodeGDic = null;
		}

		GraphicAnimation.parseAnimationByData = function (animationObject) {
			if (!GraphicAnimation._I)
				GraphicAnimation._I = new GraphicAnimation();
			var rst;
			rst = GraphicAnimation._I.parseByData(animationObject);
			GraphicAnimation._I._clear();
			return rst;
		}

		GraphicAnimation.parseAnimationData = function (aniData) {
			if (!GraphicAnimation._I)
				GraphicAnimation._I = new GraphicAnimation();
			GraphicAnimation._I.setUpAniData(aniData);
			var rst;
			rst = {};
			rst.animationList = GraphicAnimation._I.animationList;
			rst.animationDic = GraphicAnimation._I.animationDic;
			GraphicAnimation._I._clear();
			return rst;
		}

		GraphicAnimation._temParam = [];
		GraphicAnimation._I = null
		GraphicAnimation._rootMatrix = null
		__static(GraphicAnimation,
			['_drawTextureCmd', function () { return this._drawTextureCmd = [["skin", null], ["x", 0], ["y", 0], ["width", -1], ["height", -1], ["pivotX", 0], ["pivotY", 0], ["scaleX", 1], ["scaleY", 1], ["rotation", 0], ["alpha", 1], ["skewX", 0], ["skewY", 0], ["anchorX", 0], ["anchorY", 0]]; }, '_tempMt', function () { return this._tempMt = new Matrix(); }
			]);
		GraphicAnimation.__init$ = function () {
			//class GraphicNode
			GraphicNode = (function () {
				function GraphicNode() {
					this.skin = null;
					this.transform = null;
					this.resultTransform = null;
					this.width = NaN;
					this.height = NaN;
					this.alpha = 1;
				}
				__class(GraphicNode, '');
				var __proto = GraphicNode.prototype;
				__proto.recover = function () {
					this.skin = null;
					this.width = 0;
					this.height = 0;
					this.alpha = 1;
					if (this.transform) {
						this.transform.destroy();
						this.transform = null;
					}
					if (this.resultTransform) {
						this.resultTransform.destroy();
						this.resultTransform = null;
					}
					Pool.recover("GraphicNode", this);
				}
				GraphicNode.create = function () {
					return Pool.getItemByClass("GraphicNode", GraphicNode);
				}
				return GraphicNode;
			})()
		}

		return GraphicAnimation;
	})(FrameAnimation)


	Laya.__init([LoaderManager, EventDispatcher, Render, Browser, Timer, LocalStorage, TimeLine, GraphicAnimation]);
})(window, document, Laya);

(function (window, document, Laya) {
	var __un = Laya.un, __uns = Laya.uns, __static = Laya.static, __class = Laya.class, __getset = Laya.getset, __newvec = Laya.__newvec;
	//class LayaMain
	var LayaMain = (function () {
		/*[COMPILER OPTIONS:normal]*/
		function LayaMain() { }
		__class(LayaMain, 'LayaMain');
		return LayaMain;
	})()



	new LayaMain();

})(window, document, Laya);


(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

	var Arith=laya.maths.Arith,Bezier=laya.maths.Bezier,Bitmap=laya.resource.Bitmap,Browser=laya.utils.Browser;
	var Byte=laya.utils.Byte,Color=laya.utils.Color,ColorFilter=laya.filters.ColorFilter,Config=Laya.Config,Context=laya.resource.Context;
	var Event=laya.events.Event,Filter=laya.filters.Filter,Graphics=laya.display.Graphics,HTMLCanvas=laya.resource.HTMLCanvas;
	var HTMLChar=laya.utils.HTMLChar,HTMLImage=laya.resource.HTMLImage,HTMLSubImage=laya.resource.HTMLSubImage;
	var Handler=laya.utils.Handler,Loader=laya.net.Loader,Matrix=laya.maths.Matrix,Point=laya.maths.Point,Rectangle=laya.maths.Rectangle;
	var Render=laya.renders.Render,RenderContext=laya.renders.RenderContext,RenderSprite=laya.renders.RenderSprite;
	var Resource=laya.resource.Resource,ResourceManager=laya.resource.ResourceManager,RunDriver=laya.utils.RunDriver;
	var Sprite=laya.display.Sprite,Stat=laya.utils.Stat,StringKey=laya.utils.StringKey,Style=laya.display.css.Style;
	var System=laya.system.System,Text=laya.display.Text,Texture=laya.resource.Texture,TransformInfo=laya.display.css.TransformInfo;
	var URL=laya.net.URL,Utils=laya.utils.Utils,VectorGraphManager=laya.utils.VectorGraphManager,WordText=laya.utils.WordText;
	Laya.interface('laya.webgl.shapes.IShape');
	Laya.interface('laya.webgl.submit.ISubmit');
	Laya.interface('laya.webgl.text.ICharSegment');
	Laya.interface('laya.webgl.canvas.save.ISaveData');
	Laya.interface('laya.webgl.resource.IMergeAtlasBitmap');
	Laya.interface('laya.filters.IFilterActionGL','laya.filters.IFilterAction');
	//class laya.filters.webgl.FilterActionGL
	var FilterActionGL=(function(){
		function FilterActionGL(){}
		__class(FilterActionGL,'laya.filters.webgl.FilterActionGL');
		var __proto=FilterActionGL.prototype;
		Laya.imps(__proto,{"laya.filters.IFilterActionGL":true})
		__proto.setValue=function(shader){}
		__proto.setValueMix=function(shader){}
		__proto.apply3d=function(scope,sprite,context,x,y){return null;}
		__proto.apply=function(srcCanvas){return null;}
		__getset(0,__proto,'typeMix',function(){
			return 0;
		});

		return FilterActionGL;
	})()


	//class laya.webgl.shader.ShaderValue
	var ShaderValue=(function(){
		function ShaderValue(){}
		__class(ShaderValue,'laya.webgl.shader.ShaderValue');
		return ShaderValue;
	})()


	//class laya.webgl.atlas.AtlasGrid
	var AtlasGrid=(function(){
		var TexRowInfo,TexMergeTexSize;
		function AtlasGrid(width,height,atlasID){
			this._atlasID=0;
			this._width=0;
			this._height=0;
			this._texCount=0;
			this._rowInfo=null;
			this._cells=null;
			this._failSize=new TexMergeTexSize();
			(width===void 0)&& (width=0);
			(height===void 0)&& (height=0);
			(atlasID===void 0)&& (atlasID=0);
			this._cells=null;
			this._rowInfo=null;
			this._init(width,height);
			this._atlasID=atlasID;
		}

		__class(AtlasGrid,'laya.webgl.atlas.AtlasGrid');
		var __proto=AtlasGrid.prototype;
		//------------------------------------------------------------------------------
		__proto.getAltasID=function(){
			return this._atlasID;
		}

		//------------------------------------------------------------------------------
		__proto.setAltasID=function(atlasID){
			if (atlasID >=0){
				this._atlasID=atlasID;
			}
		}

		//------------------------------------------------------------------
		__proto.addTex=function(type,width,height){
			var result=this._get(width,height);
			if (result.ret==false){
				return result;
			}
			this._fill(result.x,result.y,width,height,type);
			this._texCount++;
			return result;
		}

		//------------------------------------------------------------------------------
		__proto._release=function(){
			if (this._cells !=null){
				this._cells.length=0;
				this._cells=null;
			}
			if (this._rowInfo){
				this._rowInfo.length=0;
				this._rowInfo=null;
			}
		}

		//------------------------------------------------------------------------------
		__proto._init=function(width,height){
			this._width=width;
			this._height=height;
			this._release();
			if (this._width==0)return false;
			this._cells=new Uint8Array(this._width *this._height*3);
			this._rowInfo=__newvec(this._height);
			for (var i=0;i < this._height;i++){
				this._rowInfo[i]=new TexRowInfo();
			}
			this._clear();
			return true;
		}

		//------------------------------------------------------------------
		__proto._get=function(width,height){
			var pFillInfo=new MergeFillInfo();
			if (width >=this._failSize.width && height >=this._failSize.height){
				return pFillInfo;
			};
			var rx=-1;
			var ry=-1;
			var nWidth=this._width;
			var nHeight=this._height;
			var pCellBox=this._cells;
			for (var y=0;y < nHeight;y++){
				if (this._rowInfo[y].spaceCount < width)continue ;
				for (var x=0;x < nWidth;){
					var tm=(y *nWidth+x)*3;
					if (pCellBox[tm] !=0 || pCellBox[tm+1] < width || pCellBox[tm+2] < height){
						x+=pCellBox[tm+1];
						continue ;
					}
					rx=x;
					ry=y;
					for (var xx=0;xx < width;xx++){
						if (pCellBox[3*xx+tm+2] < height){
							rx=-1;
							break ;
						}
					}
					if (rx < 0){
						x+=pCellBox[tm+1];
						continue ;
					}
					pFillInfo.ret=true;
					pFillInfo.x=rx;
					pFillInfo.y=ry;
					return pFillInfo;
				}
			}
			return pFillInfo;
		}

		//------------------------------------------------------------------
		__proto._fill=function(x,y,w,h,type){
			var nWidth=this._width;
			var nHeghit=this._height;
			this._check((x+w)<=nWidth && (y+h)<=nHeghit);
			for (var yy=y;yy < (h+y);++yy){
				this._check(this._rowInfo[yy].spaceCount >=w);
				this._rowInfo[yy].spaceCount-=w;
				for (var xx=0;xx < w;xx++){
					var tm=(x+yy *nWidth+xx)*3;
					this._check(this._cells[tm]==0);
					this._cells[tm]=type;
					this._cells[tm+1]=w;
					this._cells[tm+2]=h;
				}
			}
			if (x > 0){
				for (yy=0;yy < h;++yy){
					var s=0;
					for (xx=x-1;xx >=0;--xx,++s){
						if (this._cells[((y+yy)*nWidth+xx)*3] !=0)break ;
					}
					for (xx=s;xx > 0;--xx){
						this._cells[((y+yy)*nWidth+x-xx)*3+1]=xx;
						this._check(xx > 0);
					}
				}
			}
			if (y > 0){
				for (xx=x;xx < (x+w);++xx){
					s=0;
					for (yy=y-1;yy >=0;--yy,s++){
						if (this._cells[(xx+yy *nWidth)*3] !=0)break ;
					}
					for (yy=s;yy > 0;--yy){
						this._cells[(xx+(y-yy)*nWidth)*3+2]=yy;
						this._check(yy > 0);
					}
				}
			}
		}

		__proto._check=function(ret){
			if (ret==false){
				console.log("xtexMerger 错误啦");
			}
		}

		//------------------------------------------------------------------
		__proto._clear=function(){
			this._texCount=0;
			for (var y=0;y < this._height;y++){
				this._rowInfo[y].spaceCount=this._width;
			}
			for (var i=0;i < this._height;i++){
				for (var j=0;j < this._width;j++){
					var tm=(i *this._width+j)*3;
					this._cells[tm]=0;
					this._cells[tm+1]=this._width-j;
					this._cells[tm+2]=this._width-i;
				}
			}
			this._failSize.width=this._width+1;
			this._failSize.height=this._height+1;
		}

		AtlasGrid.__init$=function(){
			//------------------------------------------------------------------------------
			//class TexRowInfo
			TexRowInfo=(function(){
				function TexRowInfo(){
					this.spaceCount=0;
				}
				__class(TexRowInfo,'');
				return TexRowInfo;
			})()
			//------------------------------------------------------------------------------
			//class TexMergeTexSize
			TexMergeTexSize=(function(){
				function TexMergeTexSize(){
					this.width=0;
					this.height=0;
				}
				__class(TexMergeTexSize,'');
				return TexMergeTexSize;
			})()
		}

		return AtlasGrid;
	})()


	//class laya.webgl.atlas.AtlasResourceManager
	var AtlasResourceManager=(function(){
		function AtlasResourceManager(width,height,gridSize,maxTexNum){
			this._currentAtlasCount=0;
			this._maxAtlaserCount=0;
			this._width=0;
			this._height=0;
			this._gridSize=0;
			this._gridNumX=0;
			this._gridNumY=0;
			this._init=false;
			this._curAtlasIndex=0;
			this._setAtlasParam=false;
			this._atlaserArray=null;
			this._needGC=false;
			this._setAtlasParam=true;
			this._width=width;
			this._height=height;
			this._gridSize=gridSize;
			this._maxAtlaserCount=maxTexNum;
			this._gridNumX=width / gridSize;
			this._gridNumY=height / gridSize;
			this._curAtlasIndex=0;
			this._atlaserArray=[];
		}

		__class(AtlasResourceManager,'laya.webgl.atlas.AtlasResourceManager');
		var __proto=AtlasResourceManager.prototype;
		__proto.setAtlasParam=function(width,height,gridSize,maxTexNum){
			if (this._setAtlasParam==true){
				AtlasResourceManager._sid_=0;
				this._width=width;
				this._height=height;
				this._gridSize=gridSize;
				this._maxAtlaserCount=maxTexNum;
				this._gridNumX=width / gridSize;
				this._gridNumY=height / gridSize;
				this._curAtlasIndex=0;
				this.freeAll();
				return true;
				}else {
				console.log("设置大图合集参数错误，只能在开始页面设置各种参数");
				throw-1;
				return false;
			}
			return false;
		}

		//添加 图片到大图集
		__proto.pushData=function(texture){
			var bitmap=texture.bitmap;
			var nWebGLImageIndex=-1;
			var curAtlas=null;
			var i=0,n=0,altasIndex=0;
			for (i=0,n=this._atlaserArray.length;i < n;i++){
				altasIndex=(this._curAtlasIndex+i)% n;
				curAtlas=this._atlaserArray[altasIndex];
				nWebGLImageIndex=curAtlas.findBitmapIsExist(bitmap);
				if (nWebGLImageIndex !=-1){
					break ;
				}
			}
			if (nWebGLImageIndex !=-1){
				var offset=curAtlas.InAtlasWebGLImagesOffsetValue[nWebGLImageIndex];
				offsetX=offset[0];
				offsetY=offset[1];
				curAtlas.addToAtlas(texture,offsetX,offsetY);
				return true;
				}else {
				var tex=texture;
				this._setAtlasParam=false;
				var bFound=false;
				var nImageGridX=(Math.ceil((texture.bitmap.width+2)/ this._gridSize));
				var nImageGridY=(Math.ceil((texture.bitmap.height+2)/ this._gridSize));
				var bSuccess=false;
				for (var k=0;k < 2;k++){
					var maxAtlaserCount=this._maxAtlaserCount;
					for (i=0;i < maxAtlaserCount;i++){
						altasIndex=(this._curAtlasIndex+i)% maxAtlaserCount;
						(this._atlaserArray.length-1 >=altasIndex)|| (this._atlaserArray.push(new Atlaser(this._gridNumX,this._gridNumY,this._width,this._height,AtlasResourceManager._sid_++)));
						var atlas=this._atlaserArray[altasIndex];
						var offsetX=0,offsetY=0;
						var fillInfo=atlas.addTex(1,nImageGridX,nImageGridY);
						if (fillInfo.ret){
							offsetX=fillInfo.x *this._gridSize+1;
							offsetY=fillInfo.y *this._gridSize+1;
							bitmap.lock=true;
							atlas.addToAtlasTexture((bitmap),offsetX,offsetY);
							atlas.addToAtlas(texture,offsetX,offsetY);
							bSuccess=true;
							this._curAtlasIndex=altasIndex;
							break ;
						}
					}
					if (bSuccess)
						break ;
					this._atlaserArray.push(new Atlaser(this._gridNumX,this._gridNumY,this._width,this._height,AtlasResourceManager._sid_++));
					this._needGC=true;
					this.garbageCollection();
					this._curAtlasIndex=this._atlaserArray.length-1;
				}
				if (!bSuccess){
					console.log(">>>AtlasManager pushData error");
				}
				return bSuccess;
			}
		}

		__proto.addToAtlas=function(tex){
			laya.webgl.atlas.AtlasResourceManager.instance.pushData(tex);
		}

		/**
		*回收大图合集,不建议手动调用
		*@return
		*/
		__proto.garbageCollection=function(){
			if (this._needGC===true){
				var n=this._atlaserArray.length-this._maxAtlaserCount;
				for (var i=0;i < n;i++){
					this._atlaserArray[i].dispose();
					console.log("AtlasResourceManager:Dispose the inner Atlas。");
				}
				console.log(">>>>altas garbageCollection ="+n);
				this._atlaserArray.splice(0,n);
				this._needGC=false;
			}
			return true;
		}

		__proto.freeAll=function(){
			for (var i=0,n=this._atlaserArray.length;i < n;i++){
				this._atlaserArray[i].dispose();
			}
			this._atlaserArray.length=0;
			this._curAtlasIndex=0;
		}

		__proto.getAtlaserCount=function(){
			return this._atlaserArray.length;
		}

		__proto.getAtlaserByIndex=function(index){
			return this._atlaserArray[index];
		}

		__getset(1,AtlasResourceManager,'instance',function(){
			if (!AtlasResourceManager._Instance){
				AtlasResourceManager._Instance=new AtlasResourceManager(laya.webgl.atlas.AtlasResourceManager.atlasTextureWidth,laya.webgl.atlas.AtlasResourceManager.atlasTextureHeight,/*CLASS CONST:laya.webgl.atlas.AtlasResourceManager.gridSize*/16,laya.webgl.atlas.AtlasResourceManager.maxTextureCount);
			}
			return AtlasResourceManager._Instance;
		});

		__getset(1,AtlasResourceManager,'enabled',function(){
			return AtlasResourceManager._enabled;
		});

		__getset(1,AtlasResourceManager,'atlasLimitWidth',function(){
			return AtlasResourceManager._atlasLimitWidth;
			},function(value){
			AtlasResourceManager._atlasLimitWidth=value;
		});

		__getset(1,AtlasResourceManager,'atlasLimitHeight',function(){
			return AtlasResourceManager._atlasLimitHeight;
			},function(value){
			AtlasResourceManager._atlasLimitHeight=value;
		});

		AtlasResourceManager._enable=function(){
			AtlasResourceManager._enabled=true;
			Config.atlasEnable=true;
		}

		AtlasResourceManager._disable=function(){
			AtlasResourceManager._enabled=false;
			Config.atlasEnable=false;
		}

		AtlasResourceManager.__init__=function(){
			AtlasResourceManager.atlasTextureWidth=2048;
			AtlasResourceManager.atlasTextureHeight=2048;
			AtlasResourceManager.maxTextureCount=6;
			AtlasResourceManager.atlasLimitWidth=512;
			AtlasResourceManager.atlasLimitHeight=512;
		}

		AtlasResourceManager._enabled=false;
		AtlasResourceManager._atlasLimitWidth=0;
		AtlasResourceManager._atlasLimitHeight=0;
		AtlasResourceManager.gridSize=16;
		AtlasResourceManager.atlasTextureWidth=0;
		AtlasResourceManager.atlasTextureHeight=0;
		AtlasResourceManager.maxTextureCount=0;
		AtlasResourceManager._atlasRestore=0;
		AtlasResourceManager.BOARDER_TYPE_NO=0;
		AtlasResourceManager.BOARDER_TYPE_RIGHT=1;
		AtlasResourceManager.BOARDER_TYPE_LEFT=2;
		AtlasResourceManager.BOARDER_TYPE_BOTTOM=4;
		AtlasResourceManager.BOARDER_TYPE_TOP=8;
		AtlasResourceManager.BOARDER_TYPE_ALL=15;
		AtlasResourceManager._sid_=0;
		AtlasResourceManager._Instance=null;
		return AtlasResourceManager;
	})()


	//class laya.webgl.atlas.MergeFillInfo
	var MergeFillInfo=(function(){
		function MergeFillInfo(){
			this.x=0;
			this.y=0;
			this.ret=false;
			this.ret=false;
			this.x=0;
			this.y=0;
		}

		__class(MergeFillInfo,'laya.webgl.atlas.MergeFillInfo');
		return MergeFillInfo;
	})()


	;
	//class laya.webgl.canvas.BlendMode
	var BlendMode=(function(){
		function BlendMode(){};
		__class(BlendMode,'laya.webgl.canvas.BlendMode');
		BlendMode._init_=function(gl){
			BlendMode.fns=[BlendMode.BlendNormal,BlendMode.BlendAdd,BlendMode.BlendMultiply,BlendMode.BlendScreen,BlendMode.BlendOverlay,BlendMode.BlendLight,BlendMode.BlendMask,BlendMode.BlendDestinationOut];
			BlendMode.targetFns=[BlendMode.BlendNormalTarget,BlendMode.BlendAddTarget,BlendMode.BlendMultiplyTarget,BlendMode.BlendScreenTarget,BlendMode.BlendOverlayTarget,BlendMode.BlendLightTarget,BlendMode.BlendMask,BlendMode.BlendDestinationOut];
		}

		BlendMode.BlendNormal=function(gl){
			gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE_MINUS_SRC_ALPHA*/0x0303);
		}

		BlendMode.BlendAdd=function(gl){
			gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.DST_ALPHA*/0x0304);
		}

		BlendMode.BlendMultiply=function(gl){
			gl.blendFunc(/*laya.webgl.WebGLContext.DST_COLOR*/0x0306,/*laya.webgl.WebGLContext.ONE_MINUS_SRC_ALPHA*/0x0303);
		}

		BlendMode.BlendScreen=function(gl){
			gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE*/1);
		}

		BlendMode.BlendOverlay=function(gl){
			gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE_MINUS_SRC_COLOR*/0x0301);
		}

		BlendMode.BlendLight=function(gl){
			gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE*/1);
		}

		BlendMode.BlendNormalTarget=function(gl){
			gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE_MINUS_SRC_ALPHA*/0x0303);
		}

		BlendMode.BlendAddTarget=function(gl){
			gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.DST_ALPHA*/0x0304);
		}

		BlendMode.BlendMultiplyTarget=function(gl){
			gl.blendFunc(/*laya.webgl.WebGLContext.DST_COLOR*/0x0306,/*laya.webgl.WebGLContext.ONE_MINUS_SRC_ALPHA*/0x0303);
		}

		BlendMode.BlendScreenTarget=function(gl){
			gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE*/1);
		}

		BlendMode.BlendOverlayTarget=function(gl){
			gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE_MINUS_SRC_COLOR*/0x0301);
		}

		BlendMode.BlendLightTarget=function(gl){
			gl.blendFunc(/*laya.webgl.WebGLContext.ONE*/1,/*laya.webgl.WebGLContext.ONE*/1);
		}

		BlendMode.BlendMask=function(gl){
			gl.blendFunc(/*laya.webgl.WebGLContext.ZERO*/0,/*laya.webgl.WebGLContext.SRC_ALPHA*/0x0302);
		}

		BlendMode.BlendDestinationOut=function(gl){
			gl.blendFunc(/*laya.webgl.WebGLContext.ZERO*/0,/*laya.webgl.WebGLContext.ZERO*/0);
		}

		BlendMode.activeBlendFunction=null;
		BlendMode.NAMES=["normal","add","multiply","screen","overlay","light","mask","destination-out"];
		BlendMode.TOINT={"normal":0,"add":1,"multiply":2,"screen":3 ,"lighter":1,"overlay":4,"light":5,"mask":6,"destination-out":7};
		BlendMode.NORMAL="normal";
		BlendMode.ADD="add";
		BlendMode.MULTIPLY="multiply";
		BlendMode.SCREEN="screen";
		BlendMode.LIGHT="light";
		BlendMode.OVERLAY="overlay";
		BlendMode.DESTINATIONOUT="destination-out";
		BlendMode.fns=[];
		BlendMode.targetFns=[];
		return BlendMode;
	})()


	//class laya.webgl.canvas.DrawStyle
	var DrawStyle=(function(){
		function DrawStyle(value){
			this._color=Color.create("black");
			this.setValue(value);
		}

		__class(DrawStyle,'laya.webgl.canvas.DrawStyle');
		var __proto=DrawStyle.prototype;
		__proto.setValue=function(value){
			if (value){
				if ((typeof value=='string')){
					this._color=Color.create(value);
					return;
				}
				if ((value instanceof laya.utils.Color )){
					this._color=value;
					return;
				}
			}
		}

		__proto.reset=function(){
			this._color=Color.create("black");
		}

		__proto.equal=function(value){
			if ((typeof value=='string'))return this._color.strColor===value;
			if ((value instanceof laya.utils.Color ))return this._color.numColor===(value).numColor;
			return false;
		}

		__proto.toColorStr=function(){
			return this._color.strColor;
		}

		DrawStyle.create=function(value){
			if (value){
				var color;
				if ((typeof value=='string'))color=Color.create(value);
				else if ((value instanceof laya.utils.Color ))color=value;
				if (color){
					return color._drawStyle || (color._drawStyle=new DrawStyle(value));
				}
			}
			return null;
		}

		__static(DrawStyle,
		['DEFAULT',function(){return this.DEFAULT=new DrawStyle("#000000");}
		]);
		return DrawStyle;
	})()


	//class laya.webgl.canvas.Path
	var Path=(function(){
		function Path(){
			this._x=0;
			this._y=0;
			//this._rect=null;
			//this.ib=null;
			//this.vb=null;
			this.dirty=false;
			//this.geomatrys=null;
			//this._curGeomatry=null;
			this.offset=0;
			this.count=0;
			this.geoStart=0;
			this.tempArray=[];
			this.closePath=false;
			this.geomatrys=[];
			var gl=WebGL.mainContext;
			this.ib=IndexBuffer2D.create(/*laya.webgl.WebGLContext.DYNAMIC_DRAW*/0x88E8);
			this.vb=VertexBuffer2D.create(5);
		}

		__class(Path,'laya.webgl.canvas.Path');
		var __proto=Path.prototype;
		__proto.addPoint=function(pointX,pointY){
			this.tempArray.push(pointX,pointY);
		}

		__proto.getEndPointX=function(){
			return this.tempArray[this.tempArray.length-2];
		}

		__proto.getEndPointY=function(){
			return this.tempArray[this.tempArray.length-1];
		}

		__proto.polygon=function(x,y,points,color,borderWidth,borderColor){
			var geo;
			this.geomatrys.push(this._curGeomatry=geo=new Polygon(x,y,points,color,borderWidth,borderColor));
			if (!color)geo.fill=false;
			if (borderColor==undefined)geo.borderWidth=0;
			return geo;
		}

		__proto.setGeomtry=function(shape){
			this.geomatrys.push(this._curGeomatry=shape);
		}

		__proto.drawLine=function(x,y,points,width,color){
			var geo;
			if (this.closePath){
				this.geomatrys.push(this._curGeomatry=geo=new LoopLine(x,y,points,width,color));
				}else {
				this.geomatrys.push(this._curGeomatry=geo=new Line(x,y,points,width,color));
			}
			geo.fill=false;
			return geo;
		}

		__proto.update=function(){
			var si=this.ib._byteLength;
			var len=this.geomatrys.length;
			this.offset=si;
			for (var i=this.geoStart;i < len;i++){
				this.geomatrys[i].getData(this.ib,this.vb,this.vb._byteLength / 20);
			}
			this.geoStart=len;
			this.count=(this.ib._byteLength-si)/ CONST3D2D.BYTES_PIDX;
		}

		__proto.reset=function(){
			this.vb.clear();
			this.ib.clear();
			this.offset=this.count=this.geoStart=0;
			this.geomatrys.length=0;
		}

		__proto.recover=function(){
			this._curGeomatry=null;
			this.vb.destory();
			this.vb=null;
			this.ib.destory();
			this.ib=null;
		}

		return Path;
	})()


	//class laya.webgl.canvas.save.SaveBase
	var SaveBase=(function(){
		function SaveBase(){
			//this._valueName=null;
			//this._value=null;
			//this._dataObj=null;
			//this._newSubmit=false;
		}

		__class(SaveBase,'laya.webgl.canvas.save.SaveBase');
		var __proto=SaveBase.prototype;
		Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
		__proto.isSaveMark=function(){return false;}
		__proto.restore=function(context){
			this._dataObj[this._valueName]=this._value;
			SaveBase._cache[SaveBase._cache._length++]=this;
			this._newSubmit && (context._curSubmit=Submit.RENDERBASE,context._renderKey=0);
		}

		SaveBase._createArray=function(){
			var value=[];
			value._length=0;
			return value;
		}

		SaveBase._init=function(){
			var namemap=SaveBase._namemap={};
			namemap[0x1]="ALPHA";
			namemap[0x2]="fillStyle";
			namemap[0x8]="font";
			namemap[0x100]="lineWidth";
			namemap[0x200]="strokeStyle";
			namemap[0x2000]="_mergeID";
			namemap[0x400]=namemap[0x800]=namemap[0x1000]=[];
			namemap[0x4000]="textBaseline";
			namemap[0x8000]="textAlign";
			namemap[0x10000]="_nBlendType";
			namemap[0x100000]="shader";
			namemap[0x200000]="filters";
			return namemap;
		}

		SaveBase.save=function(context,type,dataObj,newSubmit){
			if ((context._saveMark._saveuse & type)!==type){
				context._saveMark._saveuse |=type;
				var cache=SaveBase._cache;
				var o=cache._length > 0 ? cache[--cache._length] :(new SaveBase());
				o._value=dataObj[o._valueName=SaveBase._namemap[type]];
				o._dataObj=dataObj;
				o._newSubmit=newSubmit;
				var _save=context._save;
				_save[_save._length++]=o;
			}
		}

		SaveBase._cache=laya.webgl.canvas.save.SaveBase._createArray();
		SaveBase._namemap=SaveBase._init();
		return SaveBase;
	})()


	//class laya.webgl.canvas.save.SaveClipRect
	var SaveClipRect=(function(){
		function SaveClipRect(){
			//this._clipSaveRect=null;
			//this._submitScissor=null;
			this._clipRect=new Rectangle();
		}

		__class(SaveClipRect,'laya.webgl.canvas.save.SaveClipRect');
		var __proto=SaveClipRect.prototype;
		Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
		__proto.isSaveMark=function(){return false;}
		__proto.restore=function(context){
			context._clipRect=this._clipSaveRect;
			SaveClipRect._cache[SaveClipRect._cache._length++]=this;
			this._submitScissor.submitLength=context._submits._length-this._submitScissor.submitIndex;
			context._curSubmit=Submit.RENDERBASE;
			context._renderKey=0;
		}

		SaveClipRect.save=function(context,submitScissor){
			if ((context._saveMark._saveuse & /*laya.webgl.canvas.save.SaveBase.TYPE_CLIPRECT*/0x20000)==/*laya.webgl.canvas.save.SaveBase.TYPE_CLIPRECT*/0x20000)return;
			context._saveMark._saveuse |=/*laya.webgl.canvas.save.SaveBase.TYPE_CLIPRECT*/0x20000;
			var cache=SaveClipRect._cache;
			var o=cache._length > 0 ? cache[--cache._length] :(new SaveClipRect());
			o._clipSaveRect=context._clipRect;
			context._clipRect=o._clipRect.copyFrom(context._clipRect);
			o._submitScissor=submitScissor;
			var _save=context._save;
			_save[_save._length++]=o;
		}

		SaveClipRect._cache=SaveBase._createArray();
		return SaveClipRect;
	})()


	//class laya.webgl.canvas.save.SaveClipRectStencil
	var SaveClipRectStencil=(function(){
		function SaveClipRectStencil(){
			//this._clipSaveRect=null;
			//this._saveMatrix=null;
			this._contextX=0;
			this._contextY=0;
			//this._submitStencil=null;
			this._clipRect=new Rectangle();
			this._matrix=new Matrix();
		}

		__class(SaveClipRectStencil,'laya.webgl.canvas.save.SaveClipRectStencil');
		var __proto=SaveClipRectStencil.prototype;
		Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
		__proto.isSaveMark=function(){return false;}
		__proto.restore=function(context){
			SubmitStencil.restore(context,this._clipSaveRect,this._saveMatrix,this._contextX,this._contextY);
			context._clipRect=this._clipSaveRect;
			context._curMat=this._saveMatrix;
			context._x=this._contextX;
			context._y=this._contextY;
			SaveClipRectStencil._cache[SaveClipRectStencil._cache._length++]=this;
			context._curSubmit=Submit.RENDERBASE;
		}

		SaveClipRectStencil.save=function(context,submitStencil){
			if ((context._saveMark._saveuse & /*laya.webgl.canvas.save.SaveBase.TYPE_CLIPRECT_STENCIL*/0x40000)==/*laya.webgl.canvas.save.SaveBase.TYPE_CLIPRECT_STENCIL*/0x40000)return;
			context._saveMark._saveuse |=/*laya.webgl.canvas.save.SaveBase.TYPE_CLIPRECT_STENCIL*/0x40000;
			var cache=SaveClipRectStencil._cache;
			var o=cache._length > 0 ? cache[--cache._length] :(new SaveClipRectStencil());
			o._clipSaveRect=context._clipRect;
			context._clipRect=o._clipRect.copyFrom(context._clipRect);
			o._contextX=context._x;
			o._contextY=context._y;
			o._saveMatrix=context._curMat;
			context._curMat.copyTo(o._matrix);
			context._curMat=o._matrix;
			o._submitStencil=submitStencil;
			var _save=context._save;
			_save[_save._length++]=o;
		}

		SaveClipRectStencil._cache=SaveBase._createArray();
		return SaveClipRectStencil;
	})()


	//class laya.webgl.canvas.save.SaveMark
	var SaveMark=(function(){
		function SaveMark(){
			this._saveuse=0;
			//this._preSaveMark=null;
			;
		}

		__class(SaveMark,'laya.webgl.canvas.save.SaveMark');
		var __proto=SaveMark.prototype;
		Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
		__proto.isSaveMark=function(){
			return true;
		}

		__proto.restore=function(context){
			context._saveMark=this._preSaveMark;
			SaveMark._no[SaveMark._no._length++]=this;
		}

		SaveMark.Create=function(context){
			var no=SaveMark._no;
			var o=no._length > 0 ? no[--no._length] :(new SaveMark());
			o._saveuse=0;
			o._preSaveMark=context._saveMark;
			context._saveMark=o;
			return o;
		}

		SaveMark._no=SaveBase._createArray();
		return SaveMark;
	})()


	//class laya.webgl.canvas.save.SaveTransform
	var SaveTransform=(function(){
		function SaveTransform(){
			//this._savematrix=null;
			this._matrix=new Matrix();
		}

		__class(SaveTransform,'laya.webgl.canvas.save.SaveTransform');
		var __proto=SaveTransform.prototype;
		Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
		__proto.isSaveMark=function(){return false;}
		__proto.restore=function(context){
			context._curMat=this._savematrix;
			SaveTransform._no[SaveTransform._no._length++]=this;
		}

		SaveTransform.save=function(context){
			var _saveMark=context._saveMark;
			if ((_saveMark._saveuse & /*laya.webgl.canvas.save.SaveBase.TYPE_TRANSFORM*/0x800)===/*laya.webgl.canvas.save.SaveBase.TYPE_TRANSFORM*/0x800)return;
			_saveMark._saveuse |=/*laya.webgl.canvas.save.SaveBase.TYPE_TRANSFORM*/0x800;
			var no=SaveTransform._no;
			var o=no._length > 0 ? no[--no._length] :(new SaveTransform());
			o._savematrix=context._curMat;
			context._curMat=context._curMat.copyTo(o._matrix);
			var _save=context._save;
			_save[_save._length++]=o;
		}

		SaveTransform._no=SaveBase._createArray();
		return SaveTransform;
	})()


	//class laya.webgl.canvas.save.SaveTranslate
	var SaveTranslate=(function(){
		function SaveTranslate(){
			//this._x=NaN;
			//this._y=NaN;
		}

		__class(SaveTranslate,'laya.webgl.canvas.save.SaveTranslate');
		var __proto=SaveTranslate.prototype;
		Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
		__proto.isSaveMark=function(){return false;}
		__proto.restore=function(context){
			var mat=context._curMat;
			context._x=this._x;
			context._y=this._y;
			SaveTranslate._no[SaveTranslate._no._length++]=this;
		}

		SaveTranslate.save=function(context){
			var no=SaveTranslate._no;
			var o=no._length > 0 ? no[--no._length] :(new SaveTranslate());
			o._x=context._x;
			o._y=context._y;
			var _save=context._save;
			_save[_save._length++]=o;
		}

		SaveTranslate._no=SaveBase._createArray();
		return SaveTranslate;
	})()


	//class laya.webgl.resource.RenderTargetMAX
	var RenderTargetMAX=(function(){
		function RenderTargetMAX(){
			this.target=null;
			this.repaint=false;
			this._width=NaN;
			this._height=NaN;
			this._sp=null;
			this._clipRect=new Rectangle();
		}

		__class(RenderTargetMAX,'laya.webgl.resource.RenderTargetMAX');
		var __proto=RenderTargetMAX.prototype;
		__proto.setSP=function(sp){
			this._sp=sp;
		}

		__proto.size=function(w,h){
			var _$this=this;
			if (this._width===w && this._height===h){
				this.target.size(w,h);
				return;
			}
			this.repaint=true;
			this._width=w;
			this._height=h;
			if (!this.target)
				this.target=RenderTarget2D.create(w,h);
			else
			this.target.size(w,h);
			if (!this.target.hasListener(/*laya.events.Event.RECOVERED*/"recovered")){
				this.target.on(/*laya.events.Event.RECOVERED*/"recovered",this,function(e){
					Laya.timer.callLater(_$this._sp,_$this._sp.repaint);
				});
			}
		}

		__proto._flushToTarget=function(context,target){
			if (target._destroy)return;
			var worldScissorTest=RenderState2D.worldScissorTest;
			var preworldClipRect=RenderState2D.worldClipRect;
			RenderState2D.worldClipRect=this._clipRect;
			this._clipRect.x=this._clipRect.y=0;
			this._clipRect.width=this._width;
			this._clipRect.height=this._height;
			RenderState2D.worldScissorTest=false;
			WebGL.mainContext.disable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
			var preAlpha=RenderState2D.worldAlpha;
			var preMatrix4=RenderState2D.worldMatrix4;
			var preMatrix=RenderState2D.worldMatrix;
			var preFilters=RenderState2D.worldFilters;
			var preShaderDefines=RenderState2D.worldShaderDefines;
			RenderState2D.worldMatrix=Matrix.EMPTY;
			RenderState2D.restoreTempArray();
			RenderState2D.worldMatrix4=RenderState2D.TEMPMAT4_ARRAY;
			RenderState2D.worldAlpha=1;
			RenderState2D.worldFilters=null;
			RenderState2D.worldShaderDefines=null;
			BaseShader.activeShader=null;
			target.start();
			Config.showCanvasMark ? target.clear(0,1,0,0.3):target.clear(0,0,0,0);
			context.flush();
			target.end();
			BaseShader.activeShader=null;
			RenderState2D.worldAlpha=preAlpha;
			RenderState2D.worldMatrix4=preMatrix4;
			RenderState2D.worldMatrix=preMatrix;
			RenderState2D.worldFilters=preFilters;
			RenderState2D.worldShaderDefines=preShaderDefines;
			RenderState2D.worldScissorTest=worldScissorTest
			if (worldScissorTest){
				var y=RenderState2D.height-preworldClipRect.y-preworldClipRect.height;
				WebGL.mainContext.scissor(preworldClipRect.x,y,preworldClipRect.width,preworldClipRect.height);
				WebGL.mainContext.enable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
			}
			RenderState2D.worldClipRect=preworldClipRect;
		}

		__proto.flush=function(context){
			if (this.repaint){
				this._flushToTarget(context,this.target);
				this.repaint=false;
			}
		}

		__proto.drawTo=function(context,x,y,width,height){
			context.drawTexture(this.target.getTexture(),x,y,width,height,0,0);
		}

		__proto.destroy=function(){
			if (this.target){
				this.target.destroy();
				this.target=null;
				this._sp=null;
			}
		}

		return RenderTargetMAX;
	})()


	//class laya.webgl.shader.d2.Shader2D
	var Shader2D=(function(){
		function Shader2D(){
			this.ALPHA=1;
			//this.glTexture=null;
			//this.shader=null;
			//this.filters=null;
			this.shaderType=0;
			//this.colorAdd=null;
			//this.strokeStyle=null;
			//this.fillStyle=null;
			this.defines=new ShaderDefines2D();
		}

		__class(Shader2D,'laya.webgl.shader.d2.Shader2D');
		Shader2D.__init__=function(){
			Shader.addInclude("parts/ColorFilter_ps_uniform.glsl","uniform vec4 colorAlpha;\nuniform mat4 colorMat;"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/webGL/src/laya/webgl/shader/d2/files/parts/ColorFilter_ps_uniform.glsl*/);
			Shader.addInclude("parts/ColorFilter_ps_logic.glsl","mat4 alphaMat =colorMat;\n\nalphaMat[0][3] *= gl_FragColor.a;\nalphaMat[1][3] *= gl_FragColor.a;\nalphaMat[2][3] *= gl_FragColor.a;\n\ngl_FragColor = gl_FragColor * alphaMat;\ngl_FragColor += colorAlpha/255.0*gl_FragColor.a;\n"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/webGL/src/laya/webgl/shader/d2/files/parts/ColorFilter_ps_logic.glsl*/);
			Shader.addInclude("parts/GlowFilter_ps_uniform.glsl","uniform vec4 u_color;\nuniform float u_strength;\nuniform float u_blurX;\nuniform float u_blurY;\nuniform float u_offsetX;\nuniform float u_offsetY;\nuniform float u_textW;\nuniform float u_textH;"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/webGL/src/laya/webgl/shader/d2/files/parts/GlowFilter_ps_uniform.glsl*/);
			Shader.addInclude("parts/GlowFilter_ps_logic.glsl","const float c_IterationTime = 10.0;\nfloat floatIterationTotalTime = c_IterationTime * c_IterationTime;\nvec4 vec4Color = vec4(0.0,0.0,0.0,0.0);\nvec2 vec2FilterDir = vec2(-(u_offsetX)/u_textW,-(u_offsetY)/u_textH);\nvec2 vec2FilterOff = vec2(u_blurX/u_textW/c_IterationTime * 2.0,u_blurY/u_textH/c_IterationTime * 2.0);\nfloat maxNum = u_blurX * u_blurY;\nvec2 vec2Off = vec2(0.0,0.0);\nfloat floatOff = c_IterationTime/2.0;\nfor(float i = 0.0;i<=c_IterationTime; ++i){\n	for(float j = 0.0;j<=c_IterationTime; ++j){\n		vec2Off = vec2(vec2FilterOff.x * (i - floatOff),vec2FilterOff.y * (j - floatOff));\n		vec4Color += texture2D(texture, v_texcoord + vec2FilterDir + vec2Off)/floatIterationTotalTime;\n	}\n}\ngl_FragColor = vec4(u_color.rgb,vec4Color.a * u_strength);\ngl_FragColor.rgb *= gl_FragColor.a;"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/webGL/src/laya/webgl/shader/d2/files/parts/GlowFilter_ps_logic.glsl*/);
			Shader.addInclude("parts/BlurFilter_ps_logic.glsl","gl_FragColor =   blur();\ngl_FragColor.w*=alpha;"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/webGL/src/laya/webgl/shader/d2/files/parts/BlurFilter_ps_logic.glsl*/);
			Shader.addInclude("parts/BlurFilter_ps_uniform.glsl","uniform vec4 strength_sig2_2sig2_gauss1;\nuniform vec2 blurInfo;\n\n#define PI 3.141593\n\n//float sigma=strength/3.0;//3σ以外影响很小。即当σ=1的时候，半径为3\n//float sig2 = sigma*sigma;\n//float _2sig2 = 2.0*sig2;\n//return 1.0/(2*PI*sig2)*exp(-(x*x+y*y)/_2sig2)\n//float gauss1 = 1.0/(2.0*PI*sig2);\n\nfloat getGaussian(float x, float y){\n    return strength_sig2_2sig2_gauss1.w*exp(-(x*x+y*y)/strength_sig2_2sig2_gauss1.z);\n}\n\nvec4 blur(){\n    const float blurw = 9.0;\n    vec4 vec4Color = vec4(0.0,0.0,0.0,0.0);\n    vec2 halfsz=vec2(blurw,blurw)/2.0/blurInfo;    \n    vec2 startpos=v_texcoord-halfsz;\n    vec2 ctexcoord = startpos;\n    vec2 step = 1.0/blurInfo;  //每个像素      \n    \n    for(float y = 0.0;y<=blurw; ++y){\n        ctexcoord.x=startpos.x;\n        for(float x = 0.0;x<=blurw; ++x){\n            //TODO 纹理坐标的固定偏移应该在vs中处理\n            vec4Color += texture2D(texture, ctexcoord)*getGaussian(x-blurw/2.0,y-blurw/2.0);\n            ctexcoord.x+=step.x;\n        }\n        ctexcoord.y+=step.y;\n    }\n    return vec4Color;\n}"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/webGL/src/laya/webgl/shader/d2/files/parts/BlurFilter_ps_uniform.glsl*/);
			Shader.addInclude("parts/ColorAdd_ps_uniform.glsl","uniform vec4 colorAdd;\n"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/webGL/src/laya/webgl/shader/d2/files/parts/ColorAdd_ps_uniform.glsl*/);
			Shader.addInclude("parts/ColorAdd_ps_logic.glsl","gl_FragColor = vec4(colorAdd.rgb,colorAdd.a*gl_FragColor.a);\ngl_FragColor.xyz *= colorAdd.a;"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/webGL/src/laya/webgl/shader/d2/files/parts/ColorAdd_ps_logic.glsl*/);
			var vs,ps;
			vs="attribute vec4 position;\nattribute vec2 texcoord;\nuniform vec2 size;\n\n#ifdef WORLDMAT\nuniform mat4 mmat;\n#endif\nvarying vec2 v_texcoord;\nvoid main() {\n  #ifdef WORLDMAT\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  #else\n  gl_Position =vec4((position.x/size.x-0.5)*2.0,(0.5-position.y/size.y)*2.0,position.z,1.0);\n  #endif\n  \n  v_texcoord = texcoord;\n}"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/webGL/src/laya/webgl/shader/d2/files/texture.vs*/;
			ps="precision mediump float;\n//precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D texture;\nuniform float alpha;\n#include?BLUR_FILTER  \"parts/BlurFilter_ps_uniform.glsl\";\n#include?COLOR_FILTER \"parts/ColorFilter_ps_uniform.glsl\";\n#include?GLOW_FILTER \"parts/GlowFilter_ps_uniform.glsl\";\n#include?COLOR_ADD \"parts/ColorAdd_ps_uniform.glsl\";\n\nvoid main() {\n   vec4 color= texture2D(texture, v_texcoord);\n   color.a*=alpha;\n   color.rgb*=alpha;\n   gl_FragColor=color;\n   #include?COLOR_ADD \"parts/ColorAdd_ps_logic.glsl\";   \n   #include?BLUR_FILTER  \"parts/BlurFilter_ps_logic.glsl\";\n   #include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";\n   #include?GLOW_FILTER \"parts/GlowFilter_ps_logic.glsl\";\n}"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/webGL/src/laya/webgl/shader/d2/files/texture.ps*/;
			Shader.preCompile2D(0,/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,vs,ps,null);
			vs="attribute vec4 position;\nuniform vec2 size;\nuniform mat4 mmat;\nvoid main() {\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n}"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/webGL/src/laya/webgl/shader/d2/files/line.vs*/;
			ps="precision mediump float;\nuniform vec4 color;\nuniform float alpha;\n#include?COLOR_FILTER \"parts/ColorFilter_ps_uniform.glsl\";\nvoid main() {\n	vec4 a = vec4(color.r, color.g, color.b, color.a);\n	a.w = alpha;\n	a.xyz *= alpha;\n	gl_FragColor = a;\n	#include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";\n}"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/webGL/src/laya/webgl/shader/d2/files/line.ps*/;
			Shader.preCompile2D(0,/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,vs,ps,null);
			vs="attribute vec4 position;\nattribute vec3 a_color;\nuniform mat4 mmat;\nuniform mat4 u_mmat2;\nuniform vec2 u_pos;\nuniform vec2 size;\nvarying vec3 color;\nvoid main(){\n  vec4 tPos = vec4(position.x + u_pos.x,position.y + u_pos.y,position.z,position.w);\n  vec4 pos=mmat*u_mmat2*tPos;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  color=a_color;\n}"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/webGL/src/laya/webgl/shader/d2/files/primitive.vs*/;
			ps="precision mediump float;\n//precision mediump float;\nvarying vec3 color;\nuniform float alpha;\nvoid main(){\n	//vec4 a=vec4(color.r, color.g, color.b, 1);\n	//a.a*=alpha;\n    gl_FragColor=vec4(color.r, color.g, color.b, alpha);\n	gl_FragColor.rgb*=alpha;\n}"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/webGL/src/laya/webgl/shader/d2/files/primitive.ps*/;
			Shader.preCompile2D(0,/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,vs,ps,null);
			vs="attribute vec4 position;\nattribute vec2 texcoord;\nuniform vec2 size;\n\n#ifdef WORLDMAT\nuniform mat4 mmat;\n#endif\nvarying vec2 v_texcoord;\nvoid main() {\n  #ifdef WORLDMAT\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  #else\n  gl_Position =vec4((position.x/size.x-0.5)*2.0,(0.5-position.y/size.y)*2.0,position.z,1.0);\n  #endif\n  \n  v_texcoord = texcoord;\n}"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/webGL/src/laya/webgl/shader/d2/files/texture.vs*/;
			ps="#ifdef FSHIGHPRECISION\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n//precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D texture;\nuniform float alpha;\nuniform vec4 u_TexRange;\nuniform vec2 u_offset;\n#include?BLUR_FILTER  \"parts/BlurFilter_ps_uniform.glsl\";\n#include?COLOR_FILTER \"parts/ColorFilter_ps_uniform.glsl\";\n#include?GLOW_FILTER \"parts/GlowFilter_ps_uniform.glsl\";\n#include?COLOR_ADD \"parts/ColorAdd_ps_uniform.glsl\";\n\nvoid main() {\n   vec2 newTexCoord;\n   newTexCoord.x = mod(u_offset.x + v_texcoord.x,u_TexRange.y) + u_TexRange.x;\n   newTexCoord.y = mod(u_offset.y + v_texcoord.y,u_TexRange.w) + u_TexRange.z;\n   vec4 color= texture2D(texture, newTexCoord);\n   color.a*=alpha;\n   gl_FragColor=color;\n   #include?COLOR_ADD \"parts/ColorAdd_ps_logic.glsl\";   \n   #include?BLUR_FILTER  \"parts/BlurFilter_ps_logic.glsl\";\n   #include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";\n   #include?GLOW_FILTER \"parts/GlowFilter_ps_logic.glsl\";\n}"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/webGL/src/laya/webgl/shader/d2/files/fillTextureShader.ps*/;
			Shader.preCompile2D(0,/*laya.webgl.shader.d2.ShaderDefines2D.FILLTEXTURE*/0x100,vs,ps,null);
			vs="attribute vec2 position;\nattribute vec2 texcoord;\nattribute vec4 color;\nuniform vec2 size;\nuniform float offsetX;\nuniform float offsetY;\nuniform mat4 mmat;\nuniform mat4 u_mmat2;\nvarying vec2 v_texcoord;\nvarying vec4 v_color;\nvoid main() {\n  vec4 pos=mmat*u_mmat2*vec4(offsetX+position.x,offsetY+position.y,0,1 );\n  gl_Position = vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  v_color = color;\n  v_texcoord = texcoord;  \n}"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/webGL/src/laya/webgl/shader/d2/skinAnishader/skinShader.vs*/;
			ps="precision mediump float;\nvarying vec2 v_texcoord;\nvarying vec4 v_color;\nuniform sampler2D texture;\nuniform float alpha;\nvoid main() {\n	vec4 t_color = texture2D(texture, v_texcoord);\n	gl_FragColor = t_color.rgba * v_color;\n	gl_FragColor.a = gl_FragColor.a * alpha;\n}"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/webGL/src/laya/webgl/shader/d2/skinAnishader/skinShader.ps*/;
			Shader.preCompile2D(0,/*laya.webgl.shader.d2.ShaderDefines2D.SKINMESH*/0x200,vs,ps,null);
		}

		return Shader2D;
	})()


	//class laya.webgl.shader.ShaderDefines
	var ShaderDefines=(function(){
		function ShaderDefines(name2int,int2name,int2nameMap){
			this._value=0;
			//this._name2int=null;
			//this._int2name=null;
			//this._int2nameMap=null;
			this._name2int=name2int;
			this._int2name=int2name;
			this._int2nameMap=int2nameMap;
		}

		__class(ShaderDefines,'laya.webgl.shader.ShaderDefines');
		var __proto=ShaderDefines.prototype;
		__proto.add=function(value){
			if ((typeof value=='string'))value=this._name2int[value];
			this._value |=value;
			return this._value;
		}

		__proto.addInt=function(value){
			this._value |=value;
			return this._value;
		}

		__proto.remove=function(value){
			if ((typeof value=='string'))value=this._name2int[value];
			this._value &=(~value);
			return this._value;
		}

		__proto.isDefine=function(def){
			return (this._value & def)===def;
		}

		__proto.getValue=function(){
			return this._value;
		}

		__proto.setValue=function(value){
			this._value=value;
		}

		__proto.toNameDic=function(){
			var r=this._int2nameMap[this._value];
			return r ? r :ShaderDefines._toText(this._value,this._int2name,this._int2nameMap);
		}

		ShaderDefines._reg=function(name,value,_name2int,_int2name){
			_name2int[name]=value;
			_int2name[value]=name;
		}

		ShaderDefines._toText=function(value,_int2name,_int2nameMap){
			var r=_int2nameMap[value];
			if (r)return r;
			var o={};
			var d=1;
			for (var i=0;i < 32;i++){
				d=1 << i;
				if (d > value)break ;
				if (value & d){
					var name=_int2name[d];
					name && (o[name]="");
				}
			}
			_int2nameMap[value]=o;
			return o;
		}

		ShaderDefines._toInt=function(names,_name2int){
			var words=names.split('.');
			var num=0;
			for (var i=0,n=words.length;i < n;i++){
				var value=_name2int[words[i]];
				if (!value)throw new Error("Defines to int err:"+names+"/"+words[i]);
				num |=value;
			}
			return num;
		}

		return ShaderDefines;
	})()


	/**
	*这里销毁的问题，后面待确认
	*/
	//class laya.webgl.shader.d2.skinAnishader.SkinMesh
	var SkinMesh=(function(){
		function SkinMesh(){
			this.mVBBuffer=null;
			this.mIBBuffer=null;
			this.mVBData=null;
			this.mIBData=null;
			this.mEleNum=0;
			this.mTexture=null;
			this.transform=null;
			this._vs=null;
			this._ps=null;
			this._indexStart=-1;
			this._verticles=null;
			this._uvs=null;
			this._tempMatrix=new Matrix();
		}

		__class(SkinMesh,'laya.webgl.shader.d2.skinAnishader.SkinMesh');
		var __proto=SkinMesh.prototype;
		__proto.init=function(texture,vs,ps){
			if (vs){
				this._vs=vs;
				}else {
				this._vs=[];
				var tWidth=texture.width;
				var tHeight=texture.height;
				var tRed=1;
				var tGreed=1;
				var tBlue=1;
				var tAlpha=1;
				this._vs.push(0,0,0,0,tRed,tGreed,tBlue,tAlpha);
				this._vs.push(tWidth,0,1,0,tRed,tGreed,tBlue,tAlpha);
				this._vs.push(tWidth,tHeight,1,1,tRed,tGreed,tBlue,tAlpha);
				this._vs.push(0,tHeight,0,1,tRed,tGreed,tBlue,tAlpha);
			}
			if (ps){
				this._ps=ps;
				}else {
				if (!SkinMesh._defaultPS){
					SkinMesh._defaultPS=[];
					SkinMesh._defaultPS.push(0,1,3,3,1,2);
				}
				this._ps=SkinMesh._defaultPS;
			}
			this.mVBData=new Float32Array(this._vs);
			this.mIBData=new Uint16Array(this._ps.length);
			this.mIBData["start"]=-1;
			this.mEleNum=this._ps.length;
			this.mTexture=texture;
		}

		__proto.init2=function(texture,vs,ps,verticles,uvs){
			if (this.transform)this.transform=null;
			if (ps){
				this._ps=ps;
				}else {
				this._ps=[];
				this._ps.push(0,1,3,3,1,2);
			}
			this._verticles=verticles;
			this._uvs=uvs;
			this.mEleNum=this._ps.length;
			this.mTexture=texture;
			if (Render.isConchNode || Render.isConchApp){
				this._initMyData();
				this.mVBData=new Float32Array(this._vs);
			}
		}

		__proto._initMyData=function(){
			var vsI=0;
			var vI=0;
			var vLen=this._verticles.length;
			var tempVLen=vLen *4;
			this._vs=SkinMesh._tempVS;
			var insertNew=false;
			if (Render.isConchNode || Render.isConchApp){
				this._vs.length=tempVLen;
				insertNew=true;
				}else{
				if (this._vs.length < tempVLen){
					this._vs.length=tempVLen;
					insertNew=true;
				}
			}
			SkinMesh._tVSLen=tempVLen;
			if (insertNew){
				while (vsI < tempVLen){
					this._vs[vsI]=this._verticles[vI];
					this._vs[vsI+1]=this._verticles[vI+1];
					this._vs[vsI+2]=this._uvs[vI];
					this._vs[vsI+3]=this._uvs[vI+1];
					this._vs[vsI+4]=1;
					this._vs[vsI+5]=1;
					this._vs[vsI+6]=1;
					this._vs[vsI+7]=1;
					vsI+=8;
					vI+=2;
				}
				}else{
				while (vsI < tempVLen){
					this._vs[vsI]=this._verticles[vI];
					this._vs[vsI+1]=this._verticles[vI+1];
					this._vs[vsI+2]=this._uvs[vI];
					this._vs[vsI+3]=this._uvs[vI+1];
					vsI+=8;
					vI+=2;
				}
			}
		}

		__proto.getData2=function(vb,ib,start){
			this.mVBBuffer=vb;
			this.mIBBuffer=ib;
			this._initMyData();
			vb.appendEx2(this._vs,Float32Array,SkinMesh._tVSLen,4);
			this._indexStart=ib._byteLength;
			var tIB;
			tIB=SkinMesh._tempIB;
			if (tIB.length < this._ps.length){
				tIB.length=this._ps.length;
			}
			for (var i=0,n=this._ps.length;i < n;i++){
				tIB[i]=this._ps[i]+start;
			}
			ib.appendEx2(tIB,Uint16Array,this._ps.length,2);
		}

		__proto.getData=function(vb,ib,start){
			this.mVBBuffer=vb;
			this.mIBBuffer=ib;
			vb.append(this.mVBData);
			this._indexStart=ib._byteLength;
			if (this.mIBData["start"] !=start){
				for (var i=0,n=this._ps.length;i < n;i++){
					this.mIBData[i]=this._ps[i]+start;
				}
				this.mIBData["start"]=start;
			}
			ib.append(this.mIBData);
		}

		__proto.render=function(context,x,y){
			if (Render.isWebGL && this.mTexture){
				context._renderKey=0;
				context._shader2D.glTexture=null;
				SkinMeshBuffer.getInstance().addSkinMesh(this);
				var tempSubmit=Submit.createShape(context,this.mIBBuffer,this.mVBBuffer,this.mEleNum,this._indexStart,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.SKINMESH*/0x200,0));
				this.transform || (this.transform=Matrix.EMPTY);
				this.transform.translate(x,y);
				Matrix.mul(this.transform,context._curMat,this._tempMatrix);
				this.transform.translate(-x,-y);
				var tShaderValue=tempSubmit.shaderValue;
				var tArray=tShaderValue.u_mmat2||RenderState2D.getMatrArray();
				RenderState2D.mat2MatArray(this._tempMatrix,tArray);
				tShaderValue.textureHost=this.mTexture;
				tShaderValue.offsetX=0;
				tShaderValue.offsetY=0;
				tShaderValue.u_mmat2=tArray;
				tShaderValue.ALPHA=context._shader2D.ALPHA;
				context._submits[context._submits._length++]=tempSubmit;
			}
			else if (Render.isConchApp&&this.mTexture){
				this.transform || (this.transform=Matrix.EMPTY);
				context.setSkinMesh&&context.setSkinMesh(x,y,this._ps,this.mVBData,this.mEleNum,0,this.mTexture,this.transform);
			}
		}

		SkinMesh._tempVS=[];
		SkinMesh._tempIB=[];
		SkinMesh._defaultPS=null
		SkinMesh._tVSLen=0;
		return SkinMesh;
	})()


	//class laya.webgl.shader.d2.skinAnishader.SkinMeshBuffer
	var SkinMeshBuffer=(function(){
		function SkinMeshBuffer(){
			this.ib=null;
			this.vb=null;
			var gl=WebGL.mainContext;
			this.ib=IndexBuffer2D.create(/*laya.webgl.WebGLContext.DYNAMIC_DRAW*/0x88E8);
			this.vb=VertexBuffer2D.create(8);
		}

		__class(SkinMeshBuffer,'laya.webgl.shader.d2.skinAnishader.SkinMeshBuffer');
		var __proto=SkinMeshBuffer.prototype;
		__proto.addSkinMesh=function(skinMesh){
			skinMesh.getData2(this.vb,this.ib,this.vb._byteLength / 32);
		}

		__proto.reset=function(){
			this.vb.clear();
			this.ib.clear();
		}

		SkinMeshBuffer.getInstance=function(){
			return SkinMeshBuffer.instance=SkinMeshBuffer.instance|| new SkinMeshBuffer();
		}

		SkinMeshBuffer.instance=null
		return SkinMeshBuffer;
	})()


	//此类可以减少代码
	//class laya.webgl.shapes.BasePoly
	var BasePoly=(function(){
		function BasePoly(x,y,width,height,edges,color,borderWidth,borderColor,round){
			//this.x=NaN;
			//this.y=NaN;
			//this.r=NaN;
			//this.width=NaN;
			//this.height=NaN;
			//this.edges=NaN;
			this.r0=0
			//this.color=0;
			//this.borderColor=NaN;
			//this.borderWidth=NaN;
			//this.round=0;
			this.fill=true;
			//this.mUint16Array=null;
			//this.mFloat32Array=null;
			this.r1=Math.PI / 2;
			(round===void 0)&& (round=0);
			this.x=x;
			this.y=y;
			this.width=width;
			this.height=height;
			this.edges=edges;
			this.color=color;
			this.borderWidth=borderWidth;
			this.borderColor=borderColor;
		}

		__class(BasePoly,'laya.webgl.shapes.BasePoly');
		var __proto=BasePoly.prototype;
		Laya.imps(__proto,{"laya.webgl.shapes.IShape":true})
		__proto.getData=function(ib,vb,start){}
		__proto.rebuild=function(points){}
		__proto.setMatrix=function(mat){}
		__proto.needUpdate=function(mat){
			return true;
		}

		__proto.sector=function(outVert,outIndex,start){
			var x=this.x,y=this.y,edges=this.edges,seg=(this.r1-this.r0)/ edges;
			var w=this.width,h=this.height,color=this.color;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			outVert.push(x,y,r,g,b);
			for (var i=0;i < edges+1;i++){
				outVert.push(x+Math.sin(seg *i+this.r0)*w,y+Math.cos(seg *i+this.r0)*h);
				outVert.push(r,g,b);
			}
			for (i=0;i < edges;i++){
				outIndex.push(start,start+i+1,start+i+2);
			}
		}

		//用于画线
		__proto.createLine2=function(p,indices,lineWidth,len,outVertex,indexCount){
			var points=p.concat();
			var result=outVertex;
			var color=this.borderColor;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			var length=points.length / 2;
			var iStart=len,w=lineWidth / 2;
			var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
			var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
			var a1,b1,c1,a2,b2,c2;
			var denom,pdist,dist;
			p1x=points[0];
			p1y=points[1];
			p2x=points[2];
			p2y=points[3];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			result.push(p1x-perpx+this.x,p1y-perpy+this.y,r,g,b,p1x+perpx+this.x,p1y+perpy+this.y,r,g,b);
			for (var i=1;i < length-1;i++){
				p1x=points[(i-1)*2];
				p1y=points[(i-1)*2+1];
				p2x=points[(i)*2];
				p2y=points[(i)*2+1];
				p3x=points[(i+1)*2];
				p3y=points[(i+1)*2+1];
				perpx=-(p1y-p2y);
				perpy=p1x-p2x;
				dist=Math.sqrt(perpx *perpx+perpy *perpy);
				perpx=perpx / dist *w;
				perpy=perpy / dist *w;
				perp2x=-(p2y-p3y);
				perp2y=p2x-p3x;
				dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
				perp2x=perp2x / dist *w;
				perp2y=perp2y / dist *w;
				a1=(-perpy+p1y)-(-perpy+p2y);
				b1=(-perpx+p2x)-(-perpx+p1x);
				c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
				a2=(-perp2y+p3y)-(-perp2y+p2y);
				b2=(-perp2x+p2x)-(-perp2x+p3x);
				c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
				denom=a1 *b2-a2 *b1;
				if (Math.abs(denom)< 0.1){
					denom+=10.1;
					result.push(p2x-perpx+this.x,p2y-perpy+this.y,r,g,b,p2x+perpx+this.x,p2y+perpy+this.y,r,g,b);
					continue ;
				}
				px=(b1 *c2-b2 *c1)/ denom;
				py=(a2 *c1-a1 *c2)/ denom;
				pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
				result.push(px+this.x,py+this.y,r,g,b,p2x-(px-p2x)+this.x,p2y-(py-p2y)+this.y,r,g,b);
			}
			p1x=points[points.length-4];
			p1y=points[points.length-3];
			p2x=points[points.length-2];
			p2y=points[points.length-1];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			result.push(p2x-perpx+this.x,p2y-perpy+this.y,r,g,b,p2x+perpx+this.x,p2y+perpy+this.y,r,g,b);
			var groupLen=indexCount;
			for (i=1;i < groupLen;i++){
				indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
			}
			return result;
		}

		// /*,outVertex:Array,outIndex:Array*/
		__proto.createLine=function(p,indices,lineWidth,len){
			var points=p.concat();
			var result=p;
			var color=this.borderColor;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			points.splice(0,5);
			var length=points.length / 5;
			var iStart=len,w=lineWidth / 2;
			var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
			var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
			var a1,b1,c1,a2,b2,c2;
			var denom,pdist,dist;
			p1x=points[0];
			p1y=points[1];
			p2x=points[5];
			p2y=points[6];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			result.push(p1x-perpx,p1y-perpy,r,g,b,p1x+perpx,p1y+perpy,r,g,b);
			for (var i=1;i < length-1;i++){
				p1x=points[(i-1)*5];
				p1y=points[(i-1)*5+1];
				p2x=points[(i)*5];
				p2y=points[(i)*5+1];
				p3x=points[(i+1)*5];
				p3y=points[(i+1)*5+1];
				perpx=-(p1y-p2y);
				perpy=p1x-p2x;
				dist=Math.sqrt(perpx *perpx+perpy *perpy);
				perpx=perpx / dist *w;
				perpy=perpy / dist *w;
				perp2x=-(p2y-p3y);
				perp2y=p2x-p3x;
				dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
				perp2x=perp2x / dist *w;
				perp2y=perp2y / dist *w;
				a1=(-perpy+p1y)-(-perpy+p2y);
				b1=(-perpx+p2x)-(-perpx+p1x);
				c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
				a2=(-perp2y+p3y)-(-perp2y+p2y);
				b2=(-perp2x+p2x)-(-perp2x+p3x);
				c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
				denom=a1 *b2-a2 *b1;
				if (Math.abs(denom)< 0.1){
					denom+=10.1;
					result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
					continue ;
				}
				px=(b1 *c2-b2 *c1)/ denom;
				py=(a2 *c1-a1 *c2)/ denom;
				pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
				result.push(px,py,r,g,b,p2x-(px-p2x),p2y-(py-p2y),r,g,b);
			}
			p1x=points[points.length-10];
			p1y=points[points.length-9];
			p2x=points[points.length-5];
			p2y=points[points.length-4];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
			var groupLen=this.edges+1;
			for (i=1;i < groupLen;i++){
				indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
			}
			return result;
		}

		//闭合路径
		__proto.createLoopLine=function(p,indices,lineWidth,len,outVertex,outIndex){
			var points=p.concat();
			var result=outVertex ? outVertex :p;
			var color=this.borderColor;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			points.splice(0,5);
			var firstPoint=[points[0],points[1]];
			var lastPoint=[points[points.length-5],points[points.length-4]];
			var midPointX=lastPoint[0]+(firstPoint[0]-lastPoint[0])*0.5;
			var midPointY=lastPoint[1]+(firstPoint[1]-lastPoint[1])*0.5;
			points.unshift(midPointX,midPointY,0,0,0);
			points.push(midPointX,midPointY,0,0,0);
			var length=points.length / 5;
			var iStart=len,w=lineWidth / 2;
			var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
			var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
			var a1,b1,c1,a2,b2,c2;
			var denom,pdist,dist;
			p1x=points[0];
			p1y=points[1];
			p2x=points[5];
			p2y=points[6];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			result.push(p1x-perpx,p1y-perpy,r,g,b,p1x+perpx,p1y+perpy,r,g,b);
			for (var i=1;i < length-1;i++){
				p1x=points[(i-1)*5];
				p1y=points[(i-1)*5+1];
				p2x=points[(i)*5];
				p2y=points[(i)*5+1];
				p3x=points[(i+1)*5];
				p3y=points[(i+1)*5+1];
				perpx=-(p1y-p2y);
				perpy=p1x-p2x;
				dist=Math.sqrt(perpx *perpx+perpy *perpy);
				perpx=perpx / dist *w;
				perpy=perpy / dist *w;
				perp2x=-(p2y-p3y);
				perp2y=p2x-p3x;
				dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
				perp2x=perp2x / dist *w;
				perp2y=perp2y / dist *w;
				a1=(-perpy+p1y)-(-perpy+p2y);
				b1=(-perpx+p2x)-(-perpx+p1x);
				c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
				a2=(-perp2y+p3y)-(-perp2y+p2y);
				b2=(-perp2x+p2x)-(-perp2x+p3x);
				c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
				denom=a1 *b2-a2 *b1;
				if (Math.abs(denom)< 0.1){
					denom+=10.1;
					result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
					continue ;
				}
				px=(b1 *c2-b2 *c1)/ denom;
				py=(a2 *c1-a1 *c2)/ denom;
				pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
				result.push(px,py,r,g,b,p2x-(px-p2x),p2y-(py-p2y),r,g,b);
			}
			if (outIndex){
				indices=outIndex;
			};
			var groupLen=this.edges+1;
			for (i=1;i < groupLen;i++){
				indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
			}
			indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+1,iStart+1,iStart,iStart+(i-1)*2);
			return result;
		}

		return BasePoly;
	})()


	//class laya.webgl.shapes.GeometryData
	var GeometryData=(function(){
		function GeometryData(lineWidth,lineColor,lineAlpha,fillColor,fillAlpha,fill,shape){
			//this.lineWidth=NaN;
			//this.lineColor=NaN;
			//this.lineAlpha=NaN;
			//this.fillColor=NaN;
			//this.fillAlpha=NaN;
			//this.shape=null;
			//this.fill=false;
			this.lineWidth=lineWidth;
			this.lineColor=lineColor;
			this.lineAlpha=lineAlpha;
			this.fillColor=fillColor;
			this.fillAlpha=fillAlpha;
			this.shape=shape;
			this.fill=fill;
		}

		__class(GeometryData,'laya.webgl.shapes.GeometryData');
		var __proto=GeometryData.prototype;
		__proto.clone=function(){
			return new GeometryData(this.lineWidth,this.lineColor,this.lineAlpha,this.fillColor,this.fillAlpha,this.fill,this.shape);
		}

		__proto.getIndexData=function(){
			return null;
		}

		__proto.getVertexData=function(){
			return null;
		}

		__proto.destroy=function(){
			this.shape=null;
		}

		return GeometryData;
	})()


	//class laya.webgl.shapes.Vertex
	var Vertex=(function(){
		function Vertex(p){
			//this.points=null;
			if((p instanceof Float32Array))
				this.points=p;
			else if((p instanceof Array)){
				var len=p.length;
				this.points=new Float32Array(p);
			}
		}

		__class(Vertex,'laya.webgl.shapes.Vertex');
		var __proto=Vertex.prototype;
		Laya.imps(__proto,{"laya.webgl.shapes.IShape":true})
		__proto.getData=function(ib,vb,start){}
		__proto.needUpdate=function(mat){
			return false;
		}

		__proto.rebuild=function(points){}
		// TODO Auto Generated method stub
		__proto.setMatrix=function(mat){}
		return Vertex;
	})()


	//class laya.webgl.submit.Submit
	var Submit=(function(){
		function Submit(renderType){
			//this._selfVb=null;
			//this._ib=null;
			//this._blendFn=null;
			//this._renderType=0;
			//this._vb=null;
			//this._startIdx=0;
			//this._numEle=0;
			//this.shaderValue=null;
			(renderType===void 0)&& (renderType=10000);
			this._renderType=renderType;
		}

		__class(Submit,'laya.webgl.submit.Submit');
		var __proto=Submit.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto.releaseRender=function(){
			var cache=Submit._cache;
			cache[cache._length++]=this;
			this.shaderValue.release();
			this._vb=null;
		}

		__proto.getRenderType=function(){
			return this._renderType;
		}

		__proto.renderSubmit=function(){
			if (this._numEle===0)return 1;
			var _tex=this.shaderValue.textureHost;
			if (_tex){
				var source=_tex.source;
				if (!_tex.bitmap || !source)
					return 1;
				this.shaderValue.texture=source;
			}
			this._vb.bind_upload(this._ib);
			var gl=WebGL.mainContext;
			this.shaderValue.upload();
			if (BlendMode.activeBlendFunction!==this._blendFn){
				gl.enable(/*laya.webgl.WebGLContext.BLEND*/0x0BE2);
				this._blendFn(gl);
				BlendMode.activeBlendFunction=this._blendFn;
			}
			Stat.drawCall++;
			Stat.trianglesFaces+=this._numEle / 3;
			gl.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,this._numEle,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this._startIdx);
			return 1;
		}

		Submit.__init__=function(){
			var s=Submit.RENDERBASE=new Submit(-1);
			s.shaderValue=new Value2D(0,0);
			s.shaderValue.ALPHA=-1234;
		}

		Submit.createSubmit=function(context,ib,vb,pos,sv){
			var o=Submit._cache._length ? Submit._cache[--Submit._cache._length] :new Submit();
			if (vb==null){
				vb=o._selfVb || (o._selfVb=VertexBuffer2D.create(-1));
				vb.clear();
				pos=0;
			}
			o._ib=ib;
			o._vb=vb;
			o._startIdx=pos *CONST3D2D.BYTES_PIDX;
			o._numEle=0;
			var blendType=context._nBlendType;
			o._blendFn=context._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
			o.shaderValue=sv;
			o.shaderValue.setValue(context._shader2D);
			var filters=context._shader2D.filters;
			filters && o.shaderValue.setFilters(filters);
			return o;
		}

		Submit.createShape=function(ctx,ib,vb,numEle,offset,sv){
			var o=(!Submit._cache._length)? (new Submit()):Submit._cache[--Submit._cache._length];
			o._ib=ib;
			o._vb=vb;
			o._numEle=numEle;
			o._startIdx=offset;
			o.shaderValue=sv;
			o.shaderValue.setValue(ctx._shader2D);
			var blendType=ctx._nBlendType;
			o._blendFn=ctx._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
			return o;
		}

		Submit.TYPE_2D=10000;
		Submit.TYPE_CANVAS=10003;
		Submit.TYPE_CMDSETRT=10004;
		Submit.TYPE_CUSTOM=10005;
		Submit.TYPE_BLURRT=10006;
		Submit.TYPE_CMDDESTORYPRERT=10007;
		Submit.TYPE_DISABLESTENCIL=10008;
		Submit.TYPE_OTHERIBVB=10009;
		Submit.TYPE_PRIMITIVE=10010;
		Submit.TYPE_RT=10011;
		Submit.TYPE_BLUR_RT=10012;
		Submit.TYPE_TARGET=10013;
		Submit.TYPE_CHANGE_VALUE=10014;
		Submit.TYPE_SHAPE=10015;
		Submit.TYPE_TEXTURE=10016;
		Submit.TYPE_FILLTEXTURE=10017;
		Submit.RENDERBASE=null
		Submit._cache=(Submit._cache=[],Submit._cache._length=0,Submit._cache);
		return Submit;
	})()


	//class laya.webgl.submit.SubmitCMD
	var SubmitCMD=(function(){
		function SubmitCMD(){
			this.fun=null;
			this.args=null;
		}

		__class(SubmitCMD,'laya.webgl.submit.SubmitCMD');
		var __proto=SubmitCMD.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto.renderSubmit=function(){
			this.fun.apply(null,this.args);
			return 1;
		}

		__proto.getRenderType=function(){
			return 0;
		}

		__proto.releaseRender=function(){
			var cache=SubmitCMD._cache;
			cache[cache._length++]=this;
		}

		SubmitCMD.create=function(args,fun){
			var o=SubmitCMD._cache._length?SubmitCMD._cache[--SubmitCMD._cache._length]:new SubmitCMD();
			o.fun=fun;
			o.args=args;
			return o;
		}

		SubmitCMD._cache=(SubmitCMD._cache=[],SubmitCMD._cache._length=0,SubmitCMD._cache);
		return SubmitCMD;
	})()


	//class laya.webgl.submit.SubmitCMDScope
	var SubmitCMDScope=(function(){
		function SubmitCMDScope(){
			this.variables={};
		}

		__class(SubmitCMDScope,'laya.webgl.submit.SubmitCMDScope');
		var __proto=SubmitCMDScope.prototype;
		__proto.getValue=function(name){
			return this.variables[name];
		}

		__proto.addValue=function(name,value){
			return this.variables[name]=value;
		}

		__proto.setValue=function(name,value){
			if(this.variables.hasOwnProperty(name)){
				return this.variables[name]=value;
			}
			return null;
		}

		__proto.clear=function(){
			for(var key in this.variables){
				delete this.variables[key];
			}
		}

		__proto.recycle=function(){
			this.clear();
			SubmitCMDScope.POOL.push(this);
		}

		SubmitCMDScope.create=function(){
			var scope=SubmitCMDScope.POOL.pop();
			scope||(scope=new SubmitCMDScope());
			return scope;
		}

		SubmitCMDScope.POOL=[];
		return SubmitCMDScope;
	})()


	//class laya.webgl.submit.SubmitOtherIBVB
	var SubmitOtherIBVB=(function(){
		function SubmitOtherIBVB(){
			this.offset=0;
			//this._vb=null;
			//this._ib=null;
			//this._blendFn=null;
			//this._mat=null;
			//this._shader=null;
			//this._shaderValue=null;
			//this._numEle=0;
			this.startIndex=0;
			;
			this._mat=Matrix.create();
		}

		__class(SubmitOtherIBVB,'laya.webgl.submit.SubmitOtherIBVB');
		var __proto=SubmitOtherIBVB.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto.releaseRender=function(){
			var cache=SubmitOtherIBVB._cache;
			cache[cache._length++]=this;
		}

		__proto.getRenderType=function(){
			return /*laya.webgl.submit.Submit.TYPE_OTHERIBVB*/10009;
		}

		__proto.renderSubmit=function(){
			var _tex=this._shaderValue.textureHost;
			if (_tex){
				var source=_tex.source;
				if (!_tex.bitmap || !source)
					return 1;
				this._shaderValue.texture=source;
			}
			this._vb.bind_upload(this._ib);
			var w=RenderState2D.worldMatrix4;
			var wmat=Matrix.TEMP;
			Matrix.mulPre(this._mat,w[0],w[1],w[4],w[5],w[12],w[13],wmat);
			var tmp=RenderState2D.worldMatrix4=SubmitOtherIBVB.tempMatrix4;
			tmp[0]=wmat.a;
			tmp[1]=wmat.b;
			tmp[4]=wmat.c;
			tmp[5]=wmat.d;
			tmp[12]=wmat.tx;
			tmp[13]=wmat.ty;
			this._shader._offset=this.offset;
			this._shaderValue.refresh();
			this._shader.upload(this._shaderValue);
			this._shader._offset=0;
			var gl=WebGL.mainContext;
			if (BlendMode.activeBlendFunction!==this._blendFn){
				gl.enable(/*laya.webgl.WebGLContext.BLEND*/0x0BE2);
				this._blendFn(gl);
				BlendMode.activeBlendFunction=this._blendFn;
			}
			Stat.drawCall++;
			Stat.trianglesFaces+=this._numEle / 3;
			gl.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,this._numEle,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this.startIndex);
			RenderState2D.worldMatrix4=w;
			BaseShader.activeShader=null;
			return 1;
		}

		SubmitOtherIBVB.create=function(context,vb,ib,numElement,shader,shaderValue,startIndex,offset,type){
			(type===void 0)&& (type=0);
			var o=(!SubmitOtherIBVB._cache._length)? (new SubmitOtherIBVB()):SubmitOtherIBVB._cache[--SubmitOtherIBVB._cache._length];
			o._ib=ib;
			o._vb=vb;
			o._numEle=numElement;
			o._shader=shader;
			o._shaderValue=shaderValue;
			var blendType=context._nBlendType;
			o._blendFn=context._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
			switch(type){
				case 0:
					o.offset=0;
					o.startIndex=offset / (CONST3D2D.BYTES_PE *vb.vertexStride)*1.5;
					o.startIndex *=CONST3D2D.BYTES_PIDX;
					break ;
				case 1:
					o.startIndex=startIndex;
					o.offset=offset;
					break ;
				}
			return o;
		}

		SubmitOtherIBVB._cache=(SubmitOtherIBVB._cache=[],SubmitOtherIBVB._cache._length=0,SubmitOtherIBVB._cache);
		SubmitOtherIBVB.tempMatrix4=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,];
		return SubmitOtherIBVB;
	})()


	//class laya.webgl.submit.SubmitScissor
	var SubmitScissor=(function(){
		function SubmitScissor(){
			this.submitIndex=0;
			this.submitLength=0;
			this.context=null;
			this.clipRect=new Rectangle();
			this.screenRect=new Rectangle();
		}

		__class(SubmitScissor,'laya.webgl.submit.SubmitScissor');
		var __proto=SubmitScissor.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto._scissor=function(x,y,w,h){
			var m=RenderState2D.worldMatrix4;
			var a=m[0],d=m[5],tx=m[12],ty=m[13];
			x=x *a+tx;
			y=y *d+ty;
			w *=a;
			h *=d;
			if (w < 1 || h < 1){
				return false;
			};
			var r=x+w;
			var b=y+h;
			x < 0 && (x=0,w=r-x);
			y < 0 && (y=0,h=b-y);
			var screen=RenderState2D.worldClipRect;
			x=Math.max(x,screen.x);
			y=Math.max(y,screen.y);
			w=Math.min(r,screen.right)-x;
			h=Math.min(b,screen.bottom)-y;
			if (w < 1 || h < 1){
				return false;
			};
			var worldScissorTest=RenderState2D.worldScissorTest;
			this.screenRect.copyFrom(screen);
			screen.x=x;
			screen.y=y;
			screen.width=w;
			screen.height=h;
			RenderState2D.worldScissorTest=true;
			y=RenderState2D.height-y-h;
			WebGL.mainContext.scissor(x,y,w,h);
			WebGL.mainContext.enable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
			this.context.submitElement(this.submitIndex,this.submitIndex+this.submitLength);
			if (worldScissorTest){
				y=RenderState2D.height-this.screenRect.y-this.screenRect.height;
				WebGL.mainContext.scissor(this.screenRect.x,y,this.screenRect.width,this.screenRect.height);
				WebGL.mainContext.enable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
			}
			else{
				WebGL.mainContext.disable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
				RenderState2D.worldScissorTest=false;
			}
			screen.copyFrom(this.screenRect);
			return true;
		}

		__proto._scissorWithTagart=function(x,y,w,h){
			if (w < 1 || h < 1){
				return false;
			};
			var r=x+w;
			var b=y+h;
			x < 0 && (x=0,w=r-x);
			y < 0 && (y=0,h=b-y);
			var screen=RenderState2D.worldClipRect;
			x=Math.max(x,screen.x);
			y=Math.max(y,screen.y);
			w=Math.min(r,screen.right)-x;
			h=Math.min(b,screen.bottom)-y;
			if (w < 1 || h < 1){
				return false;
			};
			var worldScissorTest=RenderState2D.worldScissorTest;
			this.screenRect.copyFrom(screen);
			RenderState2D.worldScissorTest=true;
			screen.x=x;
			screen.y=y;
			screen.width=w;
			screen.height=h;
			y=RenderState2D.height-y-h;
			WebGL.mainContext.scissor(x,y,w,h);
			WebGL.mainContext.enable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
			this.context.submitElement(this.submitIndex,this.submitIndex+this.submitLength);
			if (worldScissorTest){
				y=RenderState2D.height-this.screenRect.y-this.screenRect.height;
				WebGL.mainContext.scissor(this.screenRect.x,y,this.screenRect.width,this.screenRect.height);
				WebGL.mainContext.enable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
			}
			else{
				WebGL.mainContext.disable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
				RenderState2D.worldScissorTest=false;
			}
			screen.copyFrom(this.screenRect);
			return true;
		}

		__proto.renderSubmit=function(){
			this.submitLength=Math.min(this.context._submits._length-1,this.submitLength);
			if (this.submitLength < 1 || this.clipRect.width < 1 || this.clipRect.height < 1)
				return this.submitLength+1;
			if (this.context._targets)
				this._scissorWithTagart(this.clipRect.x,this.clipRect.y,this.clipRect.width,this.clipRect.height);
			else this._scissor(this.clipRect.x,this.clipRect.y,this.clipRect.width,this.clipRect.height);
			return this.submitLength+1;
		}

		__proto.getRenderType=function(){
			return 0;
		}

		__proto.releaseRender=function(){
			var cache=SubmitScissor._cache;
			cache[cache._length++]=this;
			this.context=null;
		}

		SubmitScissor.create=function(context){
			var o=SubmitScissor._cache._length?SubmitScissor._cache[--SubmitScissor._cache._length]:new SubmitScissor();
			o.context=context;
			return o;
		}

		SubmitScissor._cache=(SubmitScissor._cache=[],SubmitScissor._cache._length=0,SubmitScissor._cache);
		return SubmitScissor;
	})()


	//class laya.webgl.submit.SubmitStencil
	var SubmitStencil=(function(){
		function SubmitStencil(){
			this.step=0;
			this.blendMode=null;
			this.level=0;
		}

		__class(SubmitStencil,'laya.webgl.submit.SubmitStencil');
		var __proto=SubmitStencil.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto.renderSubmit=function(){
			switch(this.step){
				case 1:
					this.do1();
					break ;
				case 2:
					this.do2();
					break ;
				case 3:
					this.do3();
					break ;
				case 4:
					this.do4();
					break ;
				case 5:
					this.do5();
					break ;
				case 6:
					this.do6();
					break ;
				case 7:
					this.do7();
					break ;
				case 8:
					this.do8();
					break ;
				}
			return 1;
		}

		__proto.getRenderType=function(){
			return 0;
		}

		__proto.releaseRender=function(){
			var cache=SubmitStencil._cache;
			cache[cache._length++]=this;
		}

		__proto.do1=function(){
			var gl=WebGL.mainContext;
			gl.enable(/*laya.webgl.WebGLContext.STENCIL_TEST*/0x0B90);
			gl.clear(/*laya.webgl.WebGLContext.STENCIL_BUFFER_BIT*/0x00000400);
			gl.colorMask(false,false,false,false);
			gl.stencilFunc(/*laya.webgl.WebGLContext.EQUAL*/0x0202,this.level,0xFF);
			gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.INCR*/0x1E02);
		}

		//gl.stencilOp(WebGLContext.KEEP,WebGLContext.KEEP,WebGLContext.INVERT);//测试通过给模版缓冲 写入值 一开始是0 现在是 0xFF (模版缓冲中不知道是多少位的数据)
		__proto.do2=function(){
			var gl=WebGL.mainContext;
			gl.stencilFunc(/*laya.webgl.WebGLContext.EQUAL*/0x0202,this.level+1,0xFF);
			gl.colorMask(true,true,true,true);
			gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00);
		}

		__proto.do3=function(){
			var gl=WebGL.mainContext;
			gl.colorMask(true,true,true,true);
			gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00);
			gl.clear(/*laya.webgl.WebGLContext.STENCIL_BUFFER_BIT*/0x00000400);
			gl.disable(/*laya.webgl.WebGLContext.STENCIL_TEST*/0x0B90);
		}

		__proto.do4=function(){
			var gl=WebGL.mainContext;
			if (this.level==0){
				gl.enable(/*laya.webgl.WebGLContext.STENCIL_TEST*/0x0B90);
				gl.clear(/*laya.webgl.WebGLContext.STENCIL_BUFFER_BIT*/0x00000400);
			}
			gl.colorMask(false,false,false,false);
			gl.stencilFunc(/*laya.webgl.WebGLContext.ALWAYS*/0x0207,0,0xFF);
			gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.INCR*/0x1E02);
		}

		__proto.do5=function(){
			var gl=WebGL.mainContext;
			gl.stencilFunc(/*laya.webgl.WebGLContext.EQUAL*/0x0202,this.level,0xFF);
			gl.colorMask(true,true,true,true);
			gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00);
		}

		__proto.do6=function(){
			var gl=WebGL.mainContext;
			BlendMode.targetFns[BlendMode.TOINT[this.blendMode]](gl);
		}

		__proto.do7=function(){
			var gl=WebGL.mainContext;
			gl.colorMask(false,false,false,false);
			gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.DECR*/0x1E03);
		}

		__proto.do8=function(){
			var gl=WebGL.mainContext;
			gl.colorMask(true,true,true,true);
			gl.stencilFunc(/*laya.webgl.WebGLContext.EQUAL*/0x0202,this.level,0xFF);
			gl.stencilOp(/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00,/*laya.webgl.WebGLContext.KEEP*/0x1E00);
		}

		SubmitStencil.restore=function(context,clip,m,_x,_y){
			var submitStencil;
			context._renderKey=0;
			if (SubmitStencil._mask > 0){
				SubmitStencil._mask--;
			}
			if (SubmitStencil._mask==0){
				submitStencil=laya.webgl.submit.SubmitStencil.create(3);
				context.addRenderObject(submitStencil);
				context._curSubmit=Submit.RENDERBASE;
			}
			else{
				submitStencil=laya.webgl.submit.SubmitStencil.create(7);
				context.addRenderObject(submitStencil);
				var vb=context._vb;
				var nPos=(vb._byteLength >> 2);
				if (GlUtils.fillRectImgVb(vb,null,clip.x,clip.y,clip.width,clip.height,Texture.DEF_UV,m,_x,_y,0,0)){
					var shader=context._shader2D;
					shader.glTexture=null;
					var submit=context._curSubmit=Submit.createSubmit(context,context._ib,vb,((vb._byteLength-/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16 */*laya.webgl.utils.Buffer2D.FLOAT32*/4)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,0));
					submit.shaderValue.ALPHA=1.0;
					context._submits[context._submits._length++]=submit;
					context._curSubmit._numEle+=6;
					context._curSubmit=Submit.RENDERBASE;
					}else {
					alert("clipRect calc stencil rect error");
				}
				submitStencil=laya.webgl.submit.SubmitStencil.create(8);
				context.addRenderObject(submitStencil);
			}
		}

		SubmitStencil.restore2=function(context,submit){
			var submitStencil;
			context._renderKey=0;
			if (SubmitStencil._mask > 0){
				SubmitStencil._mask--;
			}
			if (SubmitStencil._mask==0){
				submitStencil=laya.webgl.submit.SubmitStencil.create(3);
				context.addRenderObject(submitStencil);
				context._curSubmit=Submit.RENDERBASE;
			}
			else{
				submitStencil=laya.webgl.submit.SubmitStencil.create(7);
				context.addRenderObject(submitStencil);
				context._submits[context._submits._length++]=submit;
				submitStencil=laya.webgl.submit.SubmitStencil.create(8);
				context.addRenderObject(submitStencil);
			}
		}

		SubmitStencil.create=function(step){
			var o=SubmitStencil._cache._length?SubmitStencil._cache[--SubmitStencil._cache._length]:new SubmitStencil();
			o.step=step;
			if (step==5)
				++SubmitStencil._mask;
			o.level=SubmitStencil._mask;
			return o;
		}

		SubmitStencil._cache=(SubmitStencil._cache=[],SubmitStencil._cache._length=0,SubmitStencil._cache);
		SubmitStencil._mask=0;
		return SubmitStencil;
	})()


	//class laya.webgl.submit.SubmitTarget
	var SubmitTarget=(function(){
		function SubmitTarget(){
			this._renderType=0;
			this._vb=null;
			this._ib=null;
			this._startIdx=0;
			this._numEle=0;
			this.shaderValue=null;
			this.blendType=0;
			this.proName=null;
			this.scope=null;
		}

		__class(SubmitTarget,'laya.webgl.submit.SubmitTarget');
		var __proto=SubmitTarget.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto.renderSubmit=function(){
			this._vb.bind_upload(this._ib);
			var target=this.scope.getValue(this.proName);
			if (target){
				this.shaderValue.texture=target.source;
				if (this.shaderValue["strength"] && !this.shaderValue["blurInfo"]){
					this.shaderValue["blurInfo"]=[target.width,target.height];
				}
				this.shaderValue.upload();
				this.blend();
				Stat.drawCall++;
				Stat.trianglesFaces+=this._numEle/3;
				WebGL.mainContext.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,this._numEle,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this._startIdx);
			}
			return 1;
		}

		__proto.blend=function(){
			if (BlendMode.activeBlendFunction!==BlendMode.fns[this.blendType]){
				var gl=WebGL.mainContext;
				gl.enable(/*laya.webgl.WebGLContext.BLEND*/0x0BE2);
				BlendMode.fns[this.blendType](gl);
				BlendMode.activeBlendFunction=BlendMode.fns[this.blendType];
			}
		}

		__proto.getRenderType=function(){
			return 0;
		}

		__proto.releaseRender=function(){
			var cache=SubmitTarget._cache;
			cache[cache._length++]=this;
		}

		SubmitTarget.create=function(context,ib,vb,pos,sv,proName){
			var o=SubmitTarget._cache._length?SubmitTarget._cache[--SubmitTarget._cache._length]:new SubmitTarget();
			o._ib=ib;
			o._vb=vb;
			o.proName=proName;
			o._startIdx=pos *CONST3D2D.BYTES_PIDX;
			o._numEle=0;
			o.blendType=context._nBlendType;
			o.shaderValue=sv;
			o.shaderValue.setValue(context._shader2D);
			return o;
		}

		SubmitTarget._cache=(SubmitTarget._cache=[],SubmitTarget._cache._length=0,SubmitTarget._cache);
		return SubmitTarget;
	})()


	/**
	*...特殊的字符，如泰文，必须重新实现这个类
	*/
	//class laya.webgl.text.CharSegment
	var CharSegment=(function(){
		function CharSegment(){
			this._sourceStr=null;
		}

		__class(CharSegment,'laya.webgl.text.CharSegment');
		var __proto=CharSegment.prototype;
		Laya.imps(__proto,{"laya.webgl.text.ICharSegment":true})
		__proto.textToSpit=function(str){
			this._sourceStr=str;
		}

		__proto.getChar=function(i){
			return this._sourceStr.charAt(i);
		}

		__proto.getCharCode=function(i){
			return this._sourceStr.charCodeAt(i);
		}

		__proto.length=function(){
			return this._sourceStr.length;
		}

		return CharSegment;
	})()


	//class laya.webgl.text.DrawText
	var DrawText=(function(){
		var CharValue;
		function DrawText(){};
		__class(DrawText,'laya.webgl.text.DrawText');
		DrawText.__init__=function(){
			DrawText._charsTemp=new Array;
			DrawText._drawValue=new CharValue();
			DrawText._charSeg=new CharSegment();
		}

		DrawText.customCharSeg=function(charseg){
			DrawText._charSeg=charseg;
		}

		DrawText.getChar=function(char,id,drawValue){
			var result=WebGLCharImage.createOneChar(char,drawValue);
			if(id!=-1)
				DrawText._charsCache[id]=result;
			return result;
		}

		DrawText._drawSlow=function(save,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine){
			var drawValue=DrawText._drawValue.value(font,fillColor,borderColor,lineWidth,sx,sy,underLine);
			var i=0,n=0;
			var chars=DrawText._charsTemp;
			var width=0,oneChar,htmlWord,id=NaN;
			if (words){
				chars.length=words.length;
				for (i=0,n=words.length;i < n;i++){
					htmlWord=words[i];
					id=htmlWord.charNum+drawValue.txtID;
					chars[i]=oneChar=DrawText._charsCache[id] || DrawText.getChar(htmlWord.char,id,drawValue);
					oneChar.active();
				}
				}else {
				var text=((txt instanceof laya.utils.WordText ))? txt.toString():txt;
				if (Text.CharacterCache){
					DrawText._charSeg.textToSpit(text);
					var len=/*if err,please use iflash.method.xmlLength()*/DrawText._charSeg.length();
					chars.length=len;
					for (i=0,n=len;i < n;i++){
						id=DrawText._charSeg.getCharCode(i)+drawValue.txtID;
						chars[i]=oneChar=DrawText._charsCache[id] || DrawText.getChar(DrawText._charSeg.getChar(i),id,drawValue);
						oneChar.active();
						width+=oneChar.cw;
					}
				}
				else {
					chars.length=0;
					oneChar=DrawText.getChar(text,-1,drawValue);
					oneChar.active();
					width+=oneChar.cw;
					chars[0]=oneChar;
				}
			};
			var dx=0;
			if (textAlign!==null && textAlign!=="left")
				dx=-(textAlign=="center" ? (width / 2):width);
			var uv,bdSz=NaN,texture,value,saveLength=0;
			if (words){
				for (i=0,n=chars.length;i < n;i++){
					oneChar=chars[i];
					if (!oneChar.isSpace){
						htmlWord=words[i];
						bdSz=oneChar.borderSize;
						texture=oneChar.texture;
						ctx._drawText(texture,x+dx+htmlWord.x *sx-bdSz,y+htmlWord.y *sy-bdSz,texture.width,texture.height,curMat,0,0,0,0);
					}
				}
				}else {
				for (i=0,n=chars.length;i < n;i++){
					oneChar=chars[i];
					if (!oneChar.isSpace){
						bdSz=oneChar.borderSize;
						texture=oneChar.texture;
						ctx._drawText(texture,x+dx-bdSz,y-bdSz,texture.width,texture.height,curMat,0,0,0,0);
						save && (value=save[saveLength++],value || (value=save[saveLength-1]=[]),value[0]=texture,value[1]=dx-bdSz,value[2]=-bdSz);
					}
					dx+=oneChar.cw;
				}
				save && (save.length=saveLength);
			}
		}

		DrawText._drawFast=function(save,ctx,curMat,x,y){
			var texture,value;
			for (var i=0,n=save.length;i < n;i++){
				value=save[i];
				texture=value[0];
				texture.active();
				ctx._drawText(texture,x+value[1],y+value[2],texture.width,texture.height,curMat,0,0,0,0);
			}
		}

		DrawText.drawText=function(ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,underLine){
			(underLine===void 0)&& (underLine=0);
			if ((txt && txt.length===0)|| (words && words.length===0))
				return;
			var sx=curMat.a,sy=curMat.d;
			(curMat.b!==0 || curMat.c!==0)&& (sx=sy=1);
			var scale=sx!==1 || sy!==1;
			if (scale && Laya.stage.transform){
				var t=Laya.stage.transform;
				scale=t.a===sx && t.d===sy;
			}else scale=false;
			if (scale){
				curMat=curMat.copyTo(WebGLContext2D._tmpMatrix);
				var tempTx=curMat.tx;
				var tempTy=curMat.ty;
				curMat.scale(1 / sx,1 / sy);
				curMat._checkTransform();
				x *=sx;
				y *=sy;
				x+=tempTx-curMat.tx;
				y+=tempTy-curMat.ty;
			}else sx=sy=1;
			if (words){
				DrawText._drawSlow(null,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine);
				}else {
				if (txt.toUpperCase===null){
					var idNum=sx+sy *100000;
					var myCache=txt;
					if (!myCache.changed && myCache.id===idNum){
						DrawText._drawFast(myCache.save,ctx,curMat,x,y);
						}else {
						myCache.id=idNum;
						myCache.changed=false;
						DrawText._drawSlow(myCache.save,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine);
					}
					return;
				};
				var id=txt+font.toString()+fillColor+borderColor+lineWidth+sx+sy+textAlign;
				var cache=DrawText._textsCache[id];
				if (Text.CharacterCache){
					if (cache){
						DrawText._drawFast(cache,ctx,curMat,x,y);
						}else {
						DrawText._textsCache.__length || (DrawText._textsCache.__length=0);
						if (DrawText._textsCache.__length > Config.WebGLTextCacheCount){
							DrawText._textsCache={};
							DrawText._textsCache.__length=0;
							DrawText._curPoolIndex=0;
						}
						DrawText._textCachesPool[DrawText._curPoolIndex] ? (cache=DrawText._textsCache[id]=DrawText._textCachesPool[DrawText._curPoolIndex],cache.length=0):(DrawText._textCachesPool[DrawText._curPoolIndex]=cache=DrawText._textsCache[id]=[]);
						DrawText._textsCache.__length++
						DrawText._curPoolIndex++;
						DrawText._drawSlow(cache,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine);
					}
				}
				else{
					DrawText._drawSlow(cache,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine);
				}
			}
		}

		DrawText._charsTemp=null
		DrawText._textCachesPool=[];
		DrawText._curPoolIndex=0;
		DrawText._charsCache={};
		DrawText._textsCache={};
		DrawText._drawValue=null
		DrawText.d=[];
		DrawText._charSeg=null;
		DrawText.__init$=function(){
			//class CharValue
			CharValue=(function(){
				function CharValue(){
					//this.txtID=NaN;
					//this.font=null;
					//this.fillColor=null;
					//this.borderColor=null;
					//this.lineWidth=0;
					//this.scaleX=NaN;
					//this.scaleY=NaN;
					//this.underLine=0;
				}
				__class(CharValue,'');
				var __proto=CharValue.prototype;
				__proto.value=function(font,fillColor,borderColor,lineWidth,scaleX,scaleY,underLine){
					this.font=font;
					this.fillColor=fillColor;
					this.borderColor=borderColor;
					this.lineWidth=lineWidth;
					this.scaleX=scaleX;
					this.scaleY=scaleY;
					this.underLine=underLine;
					var key=font.toString()+scaleX+scaleY+lineWidth+fillColor+borderColor+underLine;
					this.txtID=CharValue._keymap[key];
					if (!this.txtID){
						this.txtID=(++CharValue._keymapCount)*0.0000001;
						CharValue._keymap[key]=this.txtID;
					}
					return this;
				}
				CharValue.clear=function(){
					CharValue._keymap={};
					CharValue._keymapCount=1;
				}
				CharValue._keymap={};
				CharValue._keymapCount=1;
				return CharValue;
			})()
		}

		return DrawText;
	})()


	//class laya.webgl.text.FontInContext
	var FontInContext=(function(){
		function FontInContext(font){
			//this._text=null;
			//this._words=null;
			this._index=0;
			this._size=14;
			this._italic=-2;
			FontInContext._cache2=FontInContext._cache2|| [];
			this.setFont(font || "14px Arial");
		}

		__class(FontInContext,'laya.webgl.text.FontInContext');
		var __proto=FontInContext.prototype;
		__proto.setFont=function(value){
			var arr=FontInContext._cache2[value];
			if (!arr){
				this._words=value.split(' ');
				for (var i=0,n=this._words.length;i < n;i++){
					if (this._words[i].indexOf('px')> 0){
						this._index=i;
						break ;
					}
				}
				this._size=parseInt(this._words[this._index]);
				FontInContext._cache2[value]=[this._words,this._size];
				}else {
				this._words=arr[0];
				this._size=arr[1];
			}
			this._text=null;
			this._italic=-2;
		}

		__proto.getItalic=function(){
			this._italic===-2 && (this._italic=this.hasType("italic"));
			return this._italic;
		}

		__proto.hasType=function(name){
			for (var i=0,n=this._words.length;i < n;i++)
			if (this._words[i]===name)return i;
			return-1;
		}

		__proto.removeType=function(name){
			for (var i=0,n=this._words.length;i < n;i++)
			if (this._words[i]===name){
				this._words.splice(i,1);
				if (this._index > i)this._index--;
				break ;
			}
			this._text=null;
			this._italic=-2;
		}

		__proto.copyTo=function(dec){
			dec._text=this._text;
			dec._size=this._size;
			dec._index=this._index;
			dec._words=this._words.slice();
			dec._italic=-2;
			return dec;
		}

		__proto.toString=function(){
			return this._text ? this._text :(this._text=this._words.join(' '));
		}

		__getset(0,__proto,'size',function(){
			return this._size;
			},function(value){
			this._size=value;
			this._words[this._index]=value+"px";
			this._text=null;
		});

		FontInContext.create=function(font){
			var r=FontInContext._cache[font];
			if (r)return r;
			r=FontInContext._cache[font]=new FontInContext(font);
			return r;
		}

		FontInContext.EMPTY=new FontInContext();
		FontInContext._cache={};
		FontInContext._cache2=null
		return FontInContext;
	})()


	//class laya.webgl.utils.CONST3D2D
	var CONST3D2D=(function(){
		function CONST3D2D(){};
		__class(CONST3D2D,'laya.webgl.utils.CONST3D2D');
		CONST3D2D.defaultMatrix4=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
		CONST3D2D.defaultMinusYMatrix4=[1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1];
		CONST3D2D.uniformMatrix3=[1,0,0,0,0,1,0,0,0,0,1,0];
		CONST3D2D._TMPARRAY=[];
		CONST3D2D._OFFSETX=0;
		CONST3D2D._OFFSETY=0;
		__static(CONST3D2D,
		['BYTES_PE',function(){return this.BYTES_PE=/*__JS__ */Float32Array.BYTES_PER_ELEMENT;},'BYTES_PIDX',function(){return this.BYTES_PIDX=/*__JS__ */Uint16Array.BYTES_PER_ELEMENT;}
		]);
		return CONST3D2D;
	})()


	//class laya.webgl.utils.GlUtils
	var GlUtils=(function(){
		function GlUtils(){};
		__class(GlUtils,'laya.webgl.utils.GlUtils');
		GlUtils.make2DProjection=function(width,height,depth){
			return [2.0 / width,0,0,0,0,-2.0 / height,0,0,0,0,2.0 / depth,0,-1,1,0,1,];
		}

		GlUtils.fillIBQuadrangle=function(buffer,count){
			if (count > 65535 / 4){
				throw Error("IBQuadrangle count:"+count+" must<:"+Math.floor(65535 / 4));
				return false;
			}
			count=Math.floor(count);
			buffer._resizeBuffer((count+1)*6 */*laya.webgl.utils.Buffer2D.SHORT*/2,false);
			buffer.byteLength=buffer.bufferLength;
			var bufferData=buffer.getUint16Array();
			var idx=0;
			for (var i=0;i < count;i++){
				bufferData[idx++]=i *4;
				bufferData[idx++]=i *4+2;
				bufferData[idx++]=i *4+1;
				bufferData[idx++]=i *4;
				bufferData[idx++]=i *4+3;
				bufferData[idx++]=i *4+2;
			}
			buffer.setNeedUpload();
			return true;
		}

		GlUtils.expandIBQuadrangle=function(buffer,count){
			buffer.bufferLength >=(count *6 */*laya.webgl.utils.Buffer2D.SHORT*/2)|| GlUtils.fillIBQuadrangle(buffer,count);
		}

		GlUtils.mathCeilPowerOfTwo=function(value){
			value--;
			value |=value >> 1;
			value |=value >> 2;
			value |=value >> 4;
			value |=value >> 8;
			value |=value >> 16;
			value++;
			return value;
		}

		GlUtils.fillQuadrangleImgVb=function(vb,x,y,point4,uv,m,_x,_y){
			'use strict';
			var vpos=(vb._byteLength >> 2)+/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16;
			vb.byteLength=(vpos << 2);
			var vbdata=vb.getFloat32Array();
			vpos-=/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16;
			vbdata[vpos+2]=uv[0];
			vbdata[vpos+3]=uv[1];
			vbdata[vpos+6]=uv[2];
			vbdata[vpos+7]=uv[3];
			vbdata[vpos+10]=uv[4];
			vbdata[vpos+11]=uv[5];
			vbdata[vpos+14]=uv[6];
			vbdata[vpos+15]=uv[7];
			var a=m.a,b=m.b,c=m.c,d=m.d;
			if (a!==1 || b!==0 || c!==0 || d!==1){
				m.bTransform=true;
				var tx=m.tx+_x,ty=m.ty+_y;
				vbdata[vpos]=(point4[0]+x)*a+(point4[1]+y)*c+tx;
				vbdata[vpos+1]=(point4[0]+x)*b+(point4[1]+y)*d+ty;
				vbdata[vpos+4]=(point4[2]+x)*a+(point4[3]+y)*c+tx;
				vbdata[vpos+5]=(point4[2]+x)*b+(point4[3]+y)*d+ty;
				vbdata[vpos+8]=(point4[4]+x)*a+(point4[5]+y)*c+tx;
				vbdata[vpos+9]=(point4[4]+x)*b+(point4[5]+y)*d+ty;
				vbdata[vpos+12]=(point4[6]+x)*a+(point4[7]+y)*c+tx;
				vbdata[vpos+13]=(point4[6]+x)*b+(point4[7]+y)*d+ty;
				}else {
				m.bTransform=false;
				x+=m.tx+_x;
				y+=m.ty+_y;
				vbdata[vpos]=x+point4[0];
				vbdata[vpos+1]=y+point4[1];
				vbdata[vpos+4]=x+point4[2];
				vbdata[vpos+5]=y+point4[3];
				vbdata[vpos+8]=x+point4[4];
				vbdata[vpos+9]=y+point4[5];
				vbdata[vpos+12]=x+point4[6];
				vbdata[vpos+13]=y+point4[7];
			}
			vb._upload=true;
			return true;
		}

		GlUtils.fillTranglesVB=function(vb,x,y,points,m,_x,_y){
			'use strict';
			var vpos=(vb._byteLength >> 2)+points.length;
			vb.byteLength=(vpos << 2);
			var vbdata=vb.getFloat32Array();
			vpos-=points.length;
			var len=points.length;
			var a=m.a,b=m.b,c=m.c,d=m.d;
			for (var i=0;i < len;i+=4){
				vbdata[vpos+i+2]=points[i+2];
				vbdata[vpos+i+3]=points[i+3];
				if (a!==1 || b!==0 || c!==0 || d!==1){
					m.bTransform=true;
					var tx=m.tx+_x,ty=m.ty+_y;
					vbdata[vpos+i]=(points[i]+x)*a+(points[i+1]+y)*c+tx;
					vbdata[vpos+i+1]=(points[i]+x)*b+(points[i+1]+y)*d+ty;
					}else {
					m.bTransform=false;
					x+=m.tx+_x;
					y+=m.ty+_y;
					vbdata[vpos+i]=x+points[i];
					vbdata[vpos+i+1]=y+points[i+1];
				}
			}
			vb._upload=true;
			return true;
		}

		GlUtils.copyPreImgVb=function(vb,dx,dy){
			var vpos=(vb._byteLength >> 2);
			vb.byteLength=((vpos+/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16)<< 2);
			var vbdata=vb.getFloat32Array();
			for (var i=0,ci=vpos-16;i < 4;i++){
				vbdata[vpos]=vbdata[ci]+dx;++vpos;++ci;
				vbdata[vpos]=vbdata[ci]+dy;++vpos;++ci;
				vbdata[vpos]=vbdata[ci];++vpos;++ci;
				vbdata[vpos]=vbdata[ci];++vpos;++ci;
			}
			vb._upload=true;
		}

		GlUtils.fillRectImgVb=function(vb,clip,x,y,width,height,uv,m,_x,_y,dx,dy,round){
			(round===void 0)&& (round=false);
			'use strict';
			var mType=1;
			var toBx,toBy,toEx,toEy;
			var cBx,cBy,cEx,cEy;
			var w0,h0,tx,ty;
			var finalX,finalY,offsetX,offsetY;
			var a=m.a,b=m.b,c=m.c,d=m.d;
			var useClip=clip && clip.width < /*laya.webgl.canvas.WebGLContext2D._MAXSIZE*/99999999;
			if (a!==1 || b!==0 || c!==0 || d!==1){
				m.bTransform=true;
				if (b===0 && c===0){
					mType=23;
					w0=width+x,h0=height+y;
					tx=m.tx+_x,ty=m.ty+_y;
					toBx=a *x+tx;
					toEx=a *w0+tx;
					toBy=d *y+ty;
					toEy=d *h0+ty;
				}
				}else {
				mType=23;
				m.bTransform=false;
				toBx=x+m.tx+_x;
				toEx=toBx+width;
				toBy=y+m.ty+_y;
				toEy=toBy+height;
			}
			if (useClip){
				cBx=clip.x,cBy=clip.y,cEx=clip.width+cBx,cEy=clip.height+cBy;
			}
			if (mType!==1 && (Math.min(toBx,toEx)>=cEx || Math.min(toBy ,toEy)>=cEy || Math.max(toEx,toBx)<=cBx || Math.max(toEy,toBy)<=cBy))
				return false;
			var vpos=(vb._byteLength >> 2);
			vb.byteLength=((vpos+/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16)<< 2);
			var vbdata=vb.getFloat32Array();
			vbdata[vpos+2]=uv[0];
			vbdata[vpos+3]=uv[1];
			vbdata[vpos+6]=uv[2];
			vbdata[vpos+7]=uv[3];
			vbdata[vpos+10]=uv[4];
			vbdata[vpos+11]=uv[5];
			vbdata[vpos+14]=uv[6];
			vbdata[vpos+15]=uv[7];
			switch (mType){
				case 1:
					tx=m.tx+_x,ty=m.ty+_y;
					w0=width+x,h0=height+y;
					var w1=x,h1=y;
					var aw1=a *w1,ch1=c *h1,dh1=d *h1,bw1=b *w1;
					var aw0=a *w0,ch0=c *h0,dh0=d *h0,bw0=b *w0;
					if (round){
						finalX=aw1+ch1+tx;
						offsetX=Math.round(finalX)-finalX;
						finalY=dh1+bw1+ty;
						offsetY=Math.round(finalY)-finalY;
						vbdata[vpos]=finalX+offsetX;
						vbdata[vpos+1]=finalY+offsetY;
						vbdata[vpos+4]=aw0+ch1+tx+offsetX;
						vbdata[vpos+5]=dh1+bw0+ty+offsetY;
						vbdata[vpos+8]=aw0+ch0+tx+offsetX;
						vbdata[vpos+9]=dh0+bw0+ty+offsetY;
						vbdata[vpos+12]=aw1+ch0+tx+offsetX;
						vbdata[vpos+13]=dh0+bw1+ty+offsetY;
						}else {
						vbdata[vpos]=aw1+ch1+tx;
						vbdata[vpos+1]=dh1+bw1+ty;
						vbdata[vpos+4]=aw0+ch1+tx;
						vbdata[vpos+5]=dh1+bw0+ty;
						vbdata[vpos+8]=aw0+ch0+tx;
						vbdata[vpos+9]=dh0+bw0+ty;
						vbdata[vpos+12]=aw1+ch0+tx;
						vbdata[vpos+13]=dh0+bw1+ty;
					}
					break ;
				case 23:
					if (round){
						finalX=toBx+dx;
						offsetX=Math.round(finalX)-finalX;
						finalY=toBy;
						offsetY=Math.round(finalY)-finalY;
						vbdata[vpos]=finalX+offsetX;
						vbdata[vpos+1]=finalY+offsetY;
						vbdata[vpos+4]=toEx+dx+offsetX;
						vbdata[vpos+5]=toBy+offsetY;
						vbdata[vpos+8]=toEx+offsetX;
						vbdata[vpos+9]=toEy+offsetY;
						vbdata[vpos+12]=toBx+offsetX;
						vbdata[vpos+13]=toEy+offsetY;
						}else {
						vbdata[vpos]=toBx+dx;
						vbdata[vpos+1]=toBy;
						vbdata[vpos+4]=toEx+dx;
						vbdata[vpos+5]=toBy;
						vbdata[vpos+8]=toEx;
						vbdata[vpos+9]=toEy;
						vbdata[vpos+12]=toBx;
						vbdata[vpos+13]=toEy;
					}
					break ;
				}
			vb._upload=true;
			return true;
		}

		GlUtils.fillLineVb=function(vb,clip,fx,fy,tx,ty,width,mat){
			'use strict';
			var linew=width *.5;
			var data=GlUtils._fillLineArray;
			var perpx=-(fy-ty),perpy=fx-tx;
			var dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx /=dist,perpy /=dist,perpx *=linew,perpy *=linew;
			data[0]=fx-perpx,data[1]=fy-perpy,data[4]=fx+perpx,data[5]=fy+perpy,data[8]=tx+perpx,data[9]=ty+perpy,data[12]=tx-perpx,data[13]=ty-perpy;
			mat && mat.transformPointArray(data,data);
			var vpos=(vb._byteLength >> 2)+/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16;
			vb.byteLength=(vpos << 2);
			vb.insertData(data,vpos-/*laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16);
			return true;
		}

		GlUtils._fillLineArray=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
		return GlUtils;
	})()


	//class laya.webgl.utils.MatirxArray
	var MatirxArray=(function(){
		function MatirxArray(){};
		__class(MatirxArray,'laya.webgl.utils.MatirxArray');
		MatirxArray.ArrayMul=function(a,b,o){
			if (!a){
				MatirxArray.copyArray(b,o);
				return;
			}
			if (!b){
				MatirxArray.copyArray(a,o);
				return;
			};
			var ai0=NaN,ai1=NaN,ai2=NaN,ai3=NaN;
			for (var i=0;i < 4;i++){
				ai0=a[i];
				ai1=a[i+4];
				ai2=a[i+8];
				ai3=a[i+12];
				o[i]=ai0 *b[0]+ai1 *b[1]+ai2 *b[2]+ai3 *b[3];
				o[i+4]=ai0 *b[4]+ai1 *b[5]+ai2 *b[6]+ai3 *b[7];
				o[i+8]=ai0 *b[8]+ai1 *b[9]+ai2 *b[10]+ai3 *b[11];
				o[i+12]=ai0 *b[12]+ai1 *b[13]+ai2 *b[14]+ai3 *b[15];
			}
		}

		MatirxArray.copyArray=function(f,t){
			if (!f)return;
			if (!t)return;
			for (var i=0;i < f.length;i++){
				t[i]=f[i];
			}
		}

		return MatirxArray;
	})()


	//class laya.webgl.utils.RenderState2D
	var RenderState2D=(function(){
		function RenderState2D(){};
		__class(RenderState2D,'laya.webgl.utils.RenderState2D');
		RenderState2D.getMatrArray=function(){
			return [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
		}

		RenderState2D.mat2MatArray=function(mat,matArray){
			var m=mat;
			var m4=matArray;
			m4[0]=m.a;
			m4[1]=m.b;
			m4[2]=RenderState2D.EMPTYMAT4_ARRAY[2];
			m4[3]=RenderState2D.EMPTYMAT4_ARRAY[3];
			m4[4]=m.c;
			m4[5]=m.d;
			m4[6]=RenderState2D.EMPTYMAT4_ARRAY[6];
			m4[7]=RenderState2D.EMPTYMAT4_ARRAY[7];
			m4[8]=RenderState2D.EMPTYMAT4_ARRAY[8];
			m4[9]=RenderState2D.EMPTYMAT4_ARRAY[9];
			m4[10]=RenderState2D.EMPTYMAT4_ARRAY[10];
			m4[11]=RenderState2D.EMPTYMAT4_ARRAY[11];
			m4[12]=m.tx;
			m4[13]=m.ty;
			m4[14]=RenderState2D.EMPTYMAT4_ARRAY[14];
			m4[15]=RenderState2D.EMPTYMAT4_ARRAY[15];
			return matArray;
		}

		RenderState2D.restoreTempArray=function(){
			RenderState2D.TEMPMAT4_ARRAY[0]=1;
			RenderState2D.TEMPMAT4_ARRAY[1]=0;
			RenderState2D.TEMPMAT4_ARRAY[4]=0;
			RenderState2D.TEMPMAT4_ARRAY[5]=1;
			RenderState2D.TEMPMAT4_ARRAY[12]=0;
			RenderState2D.TEMPMAT4_ARRAY[13]=0;
		}

		RenderState2D.clear=function(){
			RenderState2D.worldScissorTest=false;
			RenderState2D.worldShaderDefines=null;
			RenderState2D.worldFilters=null;
			RenderState2D.worldAlpha=1;
			RenderState2D.worldClipRect.x=RenderState2D.worldClipRect.y=0;
			RenderState2D.worldClipRect.width=RenderState2D.width;
			RenderState2D.worldClipRect.height=RenderState2D.height;
			RenderState2D.curRenderTarget=null;
		}

		RenderState2D._MAXSIZE=99999999;
		RenderState2D.EMPTYMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
		RenderState2D.TEMPMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
		RenderState2D.worldMatrix4=RenderState2D.TEMPMAT4_ARRAY;
		RenderState2D.worldAlpha=1.0;
		RenderState2D.worldScissorTest=false;
		RenderState2D.worldFilters=null
		RenderState2D.worldShaderDefines=null
		RenderState2D.curRenderTarget=null
		RenderState2D.width=0;
		RenderState2D.height=0;
		__static(RenderState2D,
		['worldMatrix',function(){return this.worldMatrix=new Matrix();},'worldClipRect',function(){return this.worldClipRect=new Rectangle(0,0,99999999,99999999);}
		]);
		return RenderState2D;
	})()


	//class laya.webgl.utils.ShaderCompile
	var ShaderCompile=(function(){
		var ShaderScriptBlock;
		function ShaderCompile(name,vs,ps,nameMap,includeFiles){
			//this._VS=null;
			//this._PS=null;
			//this._VSTXT=null;
			//this._PSTXT=null;
			//this._nameMap=null;
			this._VSTXT=vs;
			this._PSTXT=ps;
			function split (str){
				var words=str.split(' ');
				var out=[];
				for (var i=0;i < words.length;i++)
				words[i].length > 0 && out.push(words[i]);
				return out;
			}
			function c (script){
				var i=0,n=0,ofs=0,words,condition;
				var top=new ShaderScriptBlock(0,null,null,null);
				var parent=top;
				var lines=script.split('\n');
				for (i=0,n=lines.length;i < n;i++){
					var line=lines[i];
					if (line.indexOf("#ifdef")>=0){
						words=split(line);
						parent=new ShaderScriptBlock(1,words[1],"",parent);
						continue ;
					}
					if (line.indexOf("#else")>=0){
						condition=parent.condition;
						parent=new ShaderScriptBlock(2,null,"",parent.parent);
						parent.condition=condition;
						continue ;
					}
					if (line.indexOf("#endif")>=0){
						parent=parent.parent;
						continue ;
					}
					if (line.indexOf("#include")>=0){
						words=split(line);
						var fname=words[1];
						var chr=fname.charAt(0);
						if (chr==='"' || chr==="'"){
							fname=fname.substr(1,fname.length-2);
							ofs=fname.lastIndexOf(chr);
							if (ofs > 0)fname=fname.substr(0,ofs);
						}
						ofs=words[0].indexOf('?');
						var str=ofs > 0 ? words[0].substr(ofs+1):words[0];
						new ShaderScriptBlock(1,str,includeFiles[fname],parent);
						continue ;
					}
					if (parent.childs.length > 0 && parent.childs[parent.childs.length-1].type===0){
						parent.childs[parent.childs.length-1].text+="\n"+line;
					}else new ShaderScriptBlock(0,null,line,parent);
				}
				return top;
			}
			this._VS=c(vs);
			this._PS=c(ps);
			this._nameMap=nameMap;
		}

		__class(ShaderCompile,'laya.webgl.utils.ShaderCompile');
		var __proto=ShaderCompile.prototype;
		__proto.createShader=function(define,shaderName,createShader){
			var defMap={};
			var defineStr="";
			if (define){
				for (var i in define){
					defineStr+="#define "+i+"\n";
					defMap[i]=true;
				}
			};
			var vs=this._VS.toscript(defMap,[]);
			var ps=this._PS.toscript(defMap,[]);
			return (createShader || Shader.create)(defineStr+vs.join('\n'),defineStr+ps.join('\n'),shaderName,this._nameMap);
		}

		ShaderCompile.IFDEF_NO=0;
		ShaderCompile.IFDEF_YES=1;
		ShaderCompile.IFDEF_ELSE=2;
		ShaderCompile.__init$=function(){
			//class ShaderScriptBlock
			ShaderScriptBlock=(function(){
				function ShaderScriptBlock(type,condition,text,parent){
					//this.type=0;
					//this.condition=null;
					//this.text=null;
					//this.parent=null;
					this.childs=new Array;
					this.type=type;
					this.text=text;
					this.parent=parent;
					parent && parent.childs.push(this);
					if (!condition)return;
					var newcondition="";
					var preIsParam=false,isParam=false;
					for (var i=0,n=condition.length;i < n;i++){
						var c=condition.charAt(i);
						isParam="!&|() \t".indexOf(c)< 0;
						if (preIsParam !=isParam){
							isParam && (newcondition+="this.");
							preIsParam=isParam;
						}
						newcondition+=c;
					}
					this.condition=RunDriver.createShaderCondition(newcondition);
				}
				__class(ShaderScriptBlock,'');
				var __proto=ShaderScriptBlock.prototype;
				__proto.toscript=function(def,out){
					if (this.type===/*laya.webgl.utils.ShaderCompile.IFDEF_NO*/0){
						this.text && out.push(this.text);
					}
					if (this.childs.length < 1 && !this.text)return out;
					if (this.type!==/*laya.webgl.utils.ShaderCompile.IFDEF_NO*/0){
						var ifdef=!!this.condition.call(def);
						this.type===/*laya.webgl.utils.ShaderCompile.IFDEF_ELSE*/2 && (ifdef=!ifdef);
						if (!ifdef)return out;
						this.text && out.push(this.text);
					}
					this.childs.length > 0 && this.childs.forEach(function(o,index,arr){
						o.toscript(def,out)
					});
					return out;
				}
				return ShaderScriptBlock;
			})()
		}

		return ShaderCompile;
	})()


	/**
	*@private
	*/
	//class laya.webgl.WebGL
	var WebGL=(function(){
		function WebGL(){};
		__class(WebGL,'laya.webgl.WebGL');
		WebGL._uint8ArraySlice=function(){
			var _this=/*__JS__ */this;
			var sz=_this.length;
			var dec=new Uint8Array(_this.length);
			for (var i=0;i < sz;i++)dec[i]=_this[i];
			return dec;
		}

		WebGL._float32ArraySlice=function(){
			var _this=/*__JS__ */this;
			var sz=_this.length;
			var dec=new Float32Array(_this.length);
			for (var i=0;i < sz;i++)dec[i]=_this[i];
			return dec;
		}

		WebGL._uint16ArraySlice=function(__arg){
			var arg=arguments;
			var _this=/*__JS__ */this;
			var sz=0;
			var dec;
			var i=0;
			if (arg.length===0){
				sz=_this.length;
				dec=new Uint16Array(sz);
				for (i=0;i < sz;i++)
				dec[i]=_this[i];
				}else if (arg.length===2){
				var start=arg[0];
				var end=arg[1];
				if (end > start){
					sz=end-start;
					dec=new Uint16Array(sz);
					for (i=start;i < end;i++)
					dec[i-start]=_this[i];
					}else {
					dec=new Uint16Array(0);
				}
			}
			return dec;
		}

		WebGL.expandContext=function(){
			var from=Context.prototype;
			var to=/*__JS__ */CanvasRenderingContext2D.prototype;
			to.fillTrangles=from.fillTrangles;
			Buffer2D.__int__(null);
			to.setIBVB=function (x,y,ib,vb,numElement,mat,shader,shaderValues,startIndex,offset){
				(startIndex===void 0)&& (startIndex=0);
				(offset===void 0)&& (offset=0);
				if (ib===null){
					this._ib=this._ib || IndexBuffer2D.QuadrangleIB;
					ib=this._ib;
					GlUtils.expandIBQuadrangle(ib,(vb._byteLength / (4 *16)+8));
				}
				this._setIBVB(x,y,ib,vb,numElement,mat,shader,shaderValues,startIndex,offset);
			};
			to.fillTrangles=function (tex,x,y,points,m){
				this._curMat=this._curMat || Matrix.create();
				this._vb=this._vb || VertexBuffer2D.create();
				if (!this._ib){
					this._ib=IndexBuffer2D.create();
					GlUtils.fillIBQuadrangle(this._ib,length / 4);
				};
				var vb=this._vb;
				var length=points.length >> 4;
				GlUtils.fillTranglesVB(vb,x,y,points,m || this._curMat,0,0);
				GlUtils.expandIBQuadrangle(this._ib,(vb._byteLength / (4 *16)+8));
				var shaderValues=new Value2D(0x01,0);
				shaderValues.textureHost=tex;
				var sd=new Shader2X("attribute vec2 position; attribute vec2 texcoord; uniform vec2 size; uniform mat4 mmat; varying vec2 v_texcoord; void main() { vec4 p=vec4(position.xy,0.0,1.0);vec4 pos=mmat*p; gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0); v_texcoord = texcoord; }","precision mediump float; varying vec2 v_texcoord; uniform sampler2D texture; void main() {vec4 color= texture2D(texture, v_texcoord); color.a*=1.0; gl_FragColor= color;}");
				/*__JS__ */vb._vertType=3;
				this._setIBVB(x,y,this._ib,vb,length *6,m,sd,shaderValues,0,0);
			}
		}

		WebGL.enable=function(){
			Browser.__init__();
			if (Render.isConchApp){
				if (!Render.isConchWebGL){
					RunDriver.skinAniSprite=function (){
						var tSkinSprite=new SkinMesh()
						return tSkinSprite;
					}
					WebGL.expandContext();
					return false;
				}
			}
			RunDriver.getWebGLContext=function getWebGLContext (canvas){
				var gl;
				var names=["webgl","experimental-webgl","webkit-3d","moz-webgl"];
				for (var i=0;i < names.length;i++){
					try {
						gl=canvas.getContext(names[i],{stencil:Config.isStencil,alpha:Config.isAlpha,antialias:Config.isAntialias,premultipliedAlpha:Config.premultipliedAlpha,preserveDrawingBuffer:Config.preserveDrawingBuffer});
					}catch (e){}
					if (gl)
						return gl;
				}
				return null;
			}
			WebGL.mainContext=RunDriver.getWebGLContext(Render._mainCanvas);
			if (WebGL.mainContext==null)
				return false;
			if (Render.isWebGL)return true;
			HTMLImage.create=function (src,def){
				return new WebGLImage(src,def);
			}
			HTMLSubImage.create=function (canvas,offsetX,offsetY,width,height,atlasImage,src){
				return new WebGLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src);
			}
			Render.WebGL=WebGL;
			Render.isWebGL=true;
			DrawText.__init__();
			RunDriver.createRenderSprite=function (type,next){
				return new RenderSprite3D(type,next);
			}
			RunDriver.createWebGLContext2D=function (c){
				return new WebGLContext2D(c);
			}
			RunDriver.changeWebGLSize=function (width,height){
				laya.webgl.WebGL.onStageResize(width,height);
			}
			RunDriver.createGraphics=function (){
				return new GraphicsGL();
			};
			var action=RunDriver.createFilterAction;
			RunDriver.createFilterAction=action ? action :function (type){
				return new ColorFilterActionGL()
			}
			RunDriver.clear=function (color){
				RenderState2D.worldScissorTest && laya.webgl.WebGL.mainContext.disable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
				var ctx=Render.context.ctx;
				var c=(ctx._submits._length==0 || Config.preserveDrawingBuffer)? Color.create(color)._color :Laya.stage._wgColor;
				if (c)ctx.clearBG(c[0],c[1],c[2],c[3]);
				RenderState2D.clear();
			}
			RunDriver.addToAtlas=function (texture,force){
				(force===void 0)&& (force=false);
				var bitmap=texture.bitmap;
				if (!Render.optimizeTextureMemory(texture.url,texture)){
					(bitmap).enableMerageInAtlas=false;
					return;
				}
				if ((Laya.__typeof(bitmap,'laya.webgl.resource.IMergeAtlasBitmap'))&& ((bitmap).allowMerageInAtlas)){
					bitmap.on(/*laya.events.Event.RECOVERED*/"recovered",texture,texture.addTextureToAtlas);
				}
			}
			RunDriver.isAtlas=function (bitmap){
				return (bitmap instanceof laya.webgl.atlas.AtlasWebGLCanvas );
			}
			AtlasResourceManager._enable();
			RunDriver.beginFlush=function (){
				var atlasResourceManager=AtlasResourceManager.instance;
				var count=atlasResourceManager.getAtlaserCount();
				for (var i=0;i < count;i++){
					var atlerCanvas=atlasResourceManager.getAtlaserByIndex(i).texture;
					(atlerCanvas._flashCacheImageNeedFlush)&& (RunDriver.flashFlushImage(atlerCanvas));
				}
			}
			RunDriver.drawToCanvas=function (sprite,_renderType,canvasWidth,canvasHeight,offsetX,offsetY){
				offsetX-=sprite.x;
				offsetY-=sprite.y;
				var renderTarget=new RenderTarget2D(canvasWidth,canvasHeight,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,0,false);
				renderTarget.start();
				Render.context.clear();
				sprite.render(Render.context,offsetX,RenderState2D.height-canvasHeight+offsetY);
				Render.context.flush();
				renderTarget.end();
				var pixels=renderTarget.getData(0,0,renderTarget.width,renderTarget.height);
				renderTarget.dispose();
				var htmlCanvas=new WebGLCanvas();
				htmlCanvas._canvas=Browser.createElement("canvas");
				htmlCanvas.size(canvasWidth,canvasHeight);
				var context=htmlCanvas._canvas.getContext('2d');
				Browser.canvas.size(canvasWidth,canvasHeight);
				var tempContext=Browser.context;
				var imgData=tempContext.createImageData(canvasWidth,canvasHeight);
				imgData.data.set(/*__JS__ */new Uint8ClampedArray(pixels.buffer));
				tempContext.putImageData(imgData,0,0);
				context.save();
				context.translate(0,canvasHeight);
				context.scale(1,-1);
				context.drawImage(Browser.canvas.source,0,0);
				context.restore();
				return htmlCanvas;
			}
			RunDriver.createFilterAction=function (type){
				var action;
				switch (type){
					case /*laya.filters.Filter.COLOR*/0x20:
						action=new ColorFilterActionGL();
						break ;
					}
				return action;
			}
			RunDriver.addTextureToAtlas=function (texture){
				texture._uvID++;
				AtlasResourceManager._atlasRestore++;
				((texture.bitmap).enableMerageInAtlas)&& (AtlasResourceManager.instance.addToAtlas(texture));
			}
			RunDriver.getTexturePixels=function (value,x,y,width,height){
				(Render.context.ctx).clear();
				var tSprite=new Sprite();
				tSprite.graphics.drawTexture(value,-x,-y);
				var tRenderTarget=RenderTarget2D.create(width,height);
				tRenderTarget.start();
				tRenderTarget.clear(0,0,0,0);
				tSprite.render(Render.context,0,0);
				(Render.context.ctx).flush();
				tRenderTarget.end();
				var tUint8Array=tRenderTarget.getData(0,0,width,height);
				var tArray=[];
				var tIndex=0;
				for (var i=height-1;i >=0;i--){
					for (var j=0;j < width;j++){
						tIndex=(i *width+j)*4;
						tArray.push(tUint8Array[tIndex]);
						tArray.push(tUint8Array[tIndex+1]);
						tArray.push(tUint8Array[tIndex+2]);
						tArray.push(tUint8Array[tIndex+3]);
					}
				}
				return tArray;
			}
			RunDriver.skinAniSprite=function (){
				var tSkinSprite=new SkinMesh()
				return tSkinSprite;
			}
			Filter._filterStart=function (scope,sprite,context,x,y){
				var b=scope.getValue("bounds");
				var source=RenderTarget2D.create(b.width,b.height);
				source.start();
				source.clear(0,0,0,0);
				scope.addValue("src",source);
				scope.addValue("ScissorTest",RenderState2D.worldScissorTest);
				if (RenderState2D.worldScissorTest){
					var tClilpRect=new Rectangle();
					tClilpRect.copyFrom((context.ctx)._clipRect)
					scope.addValue("clipRect",tClilpRect);
					RenderState2D.worldScissorTest=false;
					laya.webgl.WebGL.mainContext.disable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
				}
			}
			Filter._filterEnd=function (scope,sprite,context,x,y){
				var b=scope.getValue("bounds");
				var source=scope.getValue("src");
				source.end();
				var out=RenderTarget2D.create(b.width,b.height);
				out.start();
				out.clear(0,0,0,0);
				scope.addValue("out",out);
				sprite._set$P('_filterCache',out);
				sprite._set$P('_isHaveGlowFilter',scope.getValue("_isHaveGlowFilter"));
			}
			Filter._EndTarget=function (scope,context){
				var source=scope.getValue("src");
				source.recycle();
				var out=scope.getValue("out");
				out.end();
				var b=scope.getValue("ScissorTest");
				if (b){
					RenderState2D.worldScissorTest=true;
					laya.webgl.WebGL.mainContext.enable(/*laya.webgl.WebGLContext.SCISSOR_TEST*/0x0C11);
					context.ctx.save();
					var tClipRect=scope.getValue("clipRect");
					(context.ctx).clipRect(tClipRect.x,tClipRect.y,tClipRect.width,tClipRect.height);
				}
			}
			Filter._useSrc=function (scope){
				var source=scope.getValue("out");
				source.end();
				source=scope.getValue("src");
				source.start();
				source.clear(0,0,0,0);
			}
			Filter._endSrc=function (scope){
				var source=scope.getValue("src");
				source.end();
			}
			Filter._useOut=function (scope){
				var source=scope.getValue("src");
				source.end();
				source=scope.getValue("out");
				source.start();
				source.clear(0,0,0,0);
			}
			Filter._endOut=function (scope){
				var source=scope.getValue("out");
				source.end();
			}
			Filter._recycleScope=function (scope){
				scope.recycle();
			}
			Filter._filter=function (sprite,context,x,y){
				var next=this._next;
				if (next){
					var filters=sprite.filters,len=filters.length;
					if (len==1 && (filters[0].type==/*laya.filters.Filter.COLOR*/0x20)){
						context.ctx.save();
						context.ctx.setFilters([filters[0]]);
						next._fun.call(next,sprite,context,x,y);
						context.ctx.restore();
						return;
					};
					var shaderValue;
					var b;
					var scope=SubmitCMDScope.create();
					var p=Point.TEMP;
					var tMatrix=context.ctx._getTransformMatrix();
					var mat=Matrix.create();
					tMatrix.copyTo(mat);
					var tPadding=0;
					var tHalfPadding=0;
					var tIsHaveGlowFilter=false;
					var out=sprite._$P._filterCache ? sprite._$P._filterCache :null;
					if (!out || sprite._repaint){
						tIsHaveGlowFilter=sprite._isHaveGlowFilter();
						scope.addValue("_isHaveGlowFilter",tIsHaveGlowFilter);
						if (tIsHaveGlowFilter){
							tPadding=50;
							tHalfPadding=25;
						}
						b=new Rectangle();
						b.copyFrom((sprite).getSelfBounds());
						b.x+=(sprite).x;
						b.y+=(sprite).y;
						b.x-=(sprite).pivotX+4;
						b.y-=(sprite).pivotY+4;
						var tSX=b.x;
						var tSY=b.y;
						b.width+=(tPadding+8);
						b.height+=(tPadding+8);
						p.x=b.x *mat.a+b.y *mat.c;
						p.y=b.y *mat.d+b.x *mat.b;
						b.x=p.x;
						b.y=p.y;
						p.x=b.width *mat.a+b.height *mat.c;
						p.y=b.height *mat.d+b.width *mat.b;
						b.width=p.x;
						b.height=p.y;
						if (b.width <=0 || b.height <=0){
							return;
						}
						out && out.recycle();
						scope.addValue("bounds",b);
						var submit=SubmitCMD.create([scope,sprite,context,0,0],Filter._filterStart);
						context.addRenderObject(submit);
						(context.ctx)._renderKey=0;
						(context.ctx)._shader2D.glTexture=null;
						var tX=sprite.x-tSX+tHalfPadding;
						var tY=sprite.y-tSY+tHalfPadding;
						next._fun.call(next,sprite,context,tX,tY);
						submit=SubmitCMD.create([scope,sprite,context,0,0],Filter._filterEnd);
						context.addRenderObject(submit);
						for (var i=0;i < len;i++){
							if (i !=0){
								submit=SubmitCMD.create([scope],Filter._useSrc);
								context.addRenderObject(submit);
								shaderValue=Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0);
								Matrix.TEMP.identity();
								context.ctx.drawTarget(scope,0,0,b.width,b.height,Matrix.TEMP,"out",shaderValue,null,BlendMode.TOINT.overlay);
								submit=SubmitCMD.create([scope],Filter._useOut);
								context.addRenderObject(submit);
							};
							var fil=filters[i];
							fil.action.apply3d(scope,sprite,context,0,0);
						}
						submit=SubmitCMD.create([scope,context],Filter._EndTarget);
						context.addRenderObject(submit);
						}else {
						tIsHaveGlowFilter=sprite._$P._isHaveGlowFilter ? sprite._$P._isHaveGlowFilter :false;
						if (tIsHaveGlowFilter){
							tPadding=50;
							tHalfPadding=25;
						}
						b=sprite.getBounds();
						if (b.width <=0 || b.height <=0){
							return;
						}
						b.width+=tPadding;
						b.height+=tPadding;
						p.x=b.x *mat.a+b.y *mat.c;
						p.y=b.y *mat.d+b.x *mat.b;
						b.x=p.x;
						b.y=p.y;
						p.x=b.width *mat.a+b.height *mat.c;
						p.y=b.height *mat.d+b.width *mat.b;
						b.width=p.x;
						b.height=p.y;
						scope.addValue("out",out);
					}
					x=x-tHalfPadding-sprite.x;
					y=y-tHalfPadding-sprite.y;
					p.setTo(x,y);
					mat.transformPoint(p);
					x=p.x+b.x;
					y=p.y+b.y;
					shaderValue=Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0);
					Matrix.TEMP.identity();
					(context.ctx).drawTarget(scope,x,y,b.width,b.height,Matrix.TEMP,"out",shaderValue,null,BlendMode.TOINT.overlay);
					submit=SubmitCMD.create([scope],Filter._recycleScope);
					context.addRenderObject(submit);
					mat.destroy();
				}
			}
			Float32Array.prototype.slice || (Float32Array.prototype.slice=WebGL._float32ArraySlice);
			Uint16Array.prototype.slice || (Uint16Array.prototype.slice=WebGL._uint16ArraySlice);
			Uint8Array.prototype.slice || (Uint8Array.prototype.slice=WebGL._uint8ArraySlice);
			return true;
		}

		WebGL.onStageResize=function(width,height){
			if (WebGL.mainContext==null)return;
			WebGL.mainContext.viewport(0,0,width,height);
			RenderState2D.width=width;
			RenderState2D.height=height;
		}

		WebGL.onInvalidGLRes=function(){
			AtlasResourceManager.instance.freeAll();
			ResourceManager.releaseContentManagers(true);
			WebGL.doNodeRepaint(Laya.stage);
			WebGL.mainContext.viewport(0,0,RenderState2D.width,RenderState2D.height);
			Laya.stage.event(/*laya.events.Event.DEVICE_LOST*/"devicelost");
		}

		WebGL.doNodeRepaint=function(sprite){
			(sprite.numChildren==0)&& (sprite.repaint());
			for (var i=0;i < sprite.numChildren;i++)
			WebGL.doNodeRepaint(sprite.getChildAt(i));
		}

		WebGL.init=function(canvas,width,height){
			WebGL.mainCanvas=canvas;
			HTMLCanvas._createContext=function (canvas){
				return new WebGLContext2D(canvas);
			};
			var gl=laya.webgl.WebGL.mainContext;
			if (gl.getShaderPrecisionFormat !=null){
				var vertexPrecisionFormat=gl.getShaderPrecisionFormat(/*laya.webgl.WebGLContext.VERTEX_SHADER*/0x8B31,/*laya.webgl.WebGLContext.HIGH_FLOAT*/0x8DF2);
				var framePrecisionFormat=gl.getShaderPrecisionFormat(/*laya.webgl.WebGLContext.FRAGMENT_SHADER*/0x8B30,/*laya.webgl.WebGLContext.HIGH_FLOAT*/0x8DF2);
				WebGL.shaderHighPrecision=(vertexPrecisionFormat.precision&&framePrecisionFormat.precision)? true :false;
				}else {
				WebGL.shaderHighPrecision=false;
			}
			WebGL.compressAstc=gl.getExtension("WEBGL_compressed_texture_astc");
			WebGL.compressAtc=gl.getExtension("WEBGL_compressed_texture_atc");
			WebGL.compressEtc=gl.getExtension("WEBGL_compressed_texture_etc");
			WebGL.compressEtc1=gl.getExtension("WEBGL_compressed_texture_etc1");
			WebGL.compressPvrtc=gl.getExtension("WEBGL_compressed_texture_pvrtc");
			WebGL.compressS3tc=gl.getExtension("WEBGL_compressed_texture_s3tc");
			WebGL.compressS3tc_srgb=gl.getExtension("WEBGL_compressed_texture_s3tc_srgb");
			gl.deleteTexture1=gl.deleteTexture;
			gl.deleteTexture=function (t){
				if (t==WebGLContext.curBindTexValue){
					WebGLContext.curBindTexValue=null;
				}
				gl.deleteTexture1(t);
			}
			WebGL.onStageResize(width,height);
			if (WebGL.mainContext==null)
				throw new Error("webGL getContext err!");
			System.__init__();
			AtlasResourceManager.__init__();
			ShaderDefines2D.__init__();
			Submit.__init__();
			WebGLContext2D.__init__();
			Value2D.__init__();
			Shader2D.__init__();
			Buffer2D.__int__(gl);
			BlendMode._init_(gl);
			if (Render.isConchApp){
				/*__JS__ */conch.setOnInvalidGLRes(WebGL.onInvalidGLRes);
			}
		}

		WebGL.compressAstc=null
		WebGL.compressAtc=null
		WebGL.compressEtc=null
		WebGL.compressEtc1=null
		WebGL.compressPvrtc=null
		WebGL.compressS3tc=null
		WebGL.compressS3tc_srgb=null
		WebGL.mainCanvas=null
		WebGL.mainContext=null
		WebGL.antialias=true;
		WebGL.shaderHighPrecision=false;
		WebGL._bg_null=[0,0,0,0];
		return WebGL;
	})()


	//class laya.webgl.WebGLContext
	var WebGLContext=(function(){
		function WebGLContext(){};
		__class(WebGLContext,'laya.webgl.WebGLContext');
		WebGLContext.UseProgram=function(program){
			if (WebGLContext._useProgram===program)return false;
			WebGL.mainContext.useProgram(program);
			WebGLContext._useProgram=program;
			return true;
		}

		WebGLContext.setDepthTest=function(gl,value){
			value!==WebGLContext._depthTest && (WebGLContext._depthTest=value,value?gl.enable(/*CLASS CONST:laya.webgl.WebGLContext.DEPTH_TEST*/0x0B71):gl.disable(/*CLASS CONST:laya.webgl.WebGLContext.DEPTH_TEST*/0x0B71));
		}

		WebGLContext.setDepthMask=function(gl,value){
			value!==WebGLContext._depthMask && (WebGLContext._depthMask=value,gl.depthMask(value));
		}

		WebGLContext.setDepthFunc=function(gl,value){
			value!==WebGLContext._depthFunc && (WebGLContext._depthFunc=value,gl.depthFunc(value));
		}

		WebGLContext.setBlend=function(gl,value){
			value!==WebGLContext._blend && (WebGLContext._blend=value,value?gl.enable(/*CLASS CONST:laya.webgl.WebGLContext.BLEND*/0x0BE2):gl.disable(/*CLASS CONST:laya.webgl.WebGLContext.BLEND*/0x0BE2));
		}

		WebGLContext.setBlendFunc=function(gl,sFactor,dFactor){
			(sFactor!==WebGLContext._sFactor||dFactor!==WebGLContext._dFactor)&& (WebGLContext._sFactor=sFactor,WebGLContext._dFactor=dFactor,gl.blendFunc(sFactor,dFactor));
		}

		WebGLContext.setCullFace=function(gl,value){
			value!==WebGLContext._cullFace && (WebGLContext._cullFace=value,value?gl.enable(/*CLASS CONST:laya.webgl.WebGLContext.CULL_FACE*/0x0B44):gl.disable(/*CLASS CONST:laya.webgl.WebGLContext.CULL_FACE*/0x0B44));
		}

		WebGLContext.setFrontFace=function(gl,value){
			value!==WebGLContext._frontFace && (WebGLContext._frontFace=value,gl.frontFace(value));
		}

		WebGLContext.bindTexture=function(gl,target,texture){
			gl.bindTexture(target,texture);
			WebGLContext.curBindTexTarget=target;
			WebGLContext.curBindTexValue=texture;
		}

		WebGLContext.DEPTH_BUFFER_BIT=0x00000100;
		WebGLContext.STENCIL_BUFFER_BIT=0x00000400;
		WebGLContext.COLOR_BUFFER_BIT=0x00004000;
		WebGLContext.POINTS=0x0000;
		WebGLContext.LINES=0x0001;
		WebGLContext.LINE_LOOP=0x0002;
		WebGLContext.LINE_STRIP=0x0003;
		WebGLContext.TRIANGLES=0x0004;
		WebGLContext.TRIANGLE_STRIP=0x0005;
		WebGLContext.TRIANGLE_FAN=0x0006;
		WebGLContext.ZERO=0;
		WebGLContext.ONE=1;
		WebGLContext.SRC_COLOR=0x0300;
		WebGLContext.ONE_MINUS_SRC_COLOR=0x0301;
		WebGLContext.SRC_ALPHA=0x0302;
		WebGLContext.ONE_MINUS_SRC_ALPHA=0x0303;
		WebGLContext.DST_ALPHA=0x0304;
		WebGLContext.ONE_MINUS_DST_ALPHA=0x0305;
		WebGLContext.DST_COLOR=0x0306;
		WebGLContext.ONE_MINUS_DST_COLOR=0x0307;
		WebGLContext.SRC_ALPHA_SATURATE=0x0308;
		WebGLContext.FUNC_ADD=0x8006;
		WebGLContext.BLEND_EQUATION=0x8009;
		WebGLContext.BLEND_EQUATION_RGB=0x8009;
		WebGLContext.BLEND_EQUATION_ALPHA=0x883D;
		WebGLContext.FUNC_SUBTRACT=0x800A;
		WebGLContext.FUNC_REVERSE_SUBTRACT=0x800B;
		WebGLContext.BLEND_DST_RGB=0x80C8;
		WebGLContext.BLEND_SRC_RGB=0x80C9;
		WebGLContext.BLEND_DST_ALPHA=0x80CA;
		WebGLContext.BLEND_SRC_ALPHA=0x80CB;
		WebGLContext.CONSTANT_COLOR=0x8001;
		WebGLContext.ONE_MINUS_CONSTANT_COLOR=0x8002;
		WebGLContext.CONSTANT_ALPHA=0x8003;
		WebGLContext.ONE_MINUS_CONSTANT_ALPHA=0x8004;
		WebGLContext.BLEND_COLOR=0x8005;
		WebGLContext.ARRAY_BUFFER=0x8892;
		WebGLContext.ELEMENT_ARRAY_BUFFER=0x8893;
		WebGLContext.ARRAY_BUFFER_BINDING=0x8894;
		WebGLContext.ELEMENT_ARRAY_BUFFER_BINDING=0x8895;
		WebGLContext.STREAM_DRAW=0x88E0;
		WebGLContext.STATIC_DRAW=0x88E4;
		WebGLContext.DYNAMIC_DRAW=0x88E8;
		WebGLContext.BUFFER_SIZE=0x8764;
		WebGLContext.BUFFER_USAGE=0x8765;
		WebGLContext.CURRENT_VERTEX_ATTRIB=0x8626;
		WebGLContext.FRONT=0x0404;
		WebGLContext.BACK=0x0405;
		WebGLContext.CULL_FACE=0x0B44;
		WebGLContext.FRONT_AND_BACK=0x0408;
		WebGLContext.BLEND=0x0BE2;
		WebGLContext.DITHER=0x0BD0;
		WebGLContext.STENCIL_TEST=0x0B90;
		WebGLContext.DEPTH_TEST=0x0B71;
		WebGLContext.SCISSOR_TEST=0x0C11;
		WebGLContext.POLYGON_OFFSET_FILL=0x8037;
		WebGLContext.SAMPLE_ALPHA_TO_COVERAGE=0x809E;
		WebGLContext.SAMPLE_COVERAGE=0x80A0;
		WebGLContext.NO_ERROR=0;
		WebGLContext.INVALID_ENUM=0x0500;
		WebGLContext.INVALID_VALUE=0x0501;
		WebGLContext.INVALID_OPERATION=0x0502;
		WebGLContext.OUT_OF_MEMORY=0x0505;
		WebGLContext.CW=0x0900;
		WebGLContext.CCW=0x0901;
		WebGLContext.LINE_WIDTH=0x0B21;
		WebGLContext.ALIASED_POINT_SIZE_RANGE=0x846D;
		WebGLContext.ALIASED_LINE_WIDTH_RANGE=0x846E;
		WebGLContext.CULL_FACE_MODE=0x0B45;
		WebGLContext.FRONT_FACE=0x0B46;
		WebGLContext.DEPTH_RANGE=0x0B70;
		WebGLContext.DEPTH_WRITEMASK=0x0B72;
		WebGLContext.DEPTH_CLEAR_VALUE=0x0B73;
		WebGLContext.DEPTH_FUNC=0x0B74;
		WebGLContext.STENCIL_CLEAR_VALUE=0x0B91;
		WebGLContext.STENCIL_FUNC=0x0B92;
		WebGLContext.STENCIL_FAIL=0x0B94;
		WebGLContext.STENCIL_PASS_DEPTH_FAIL=0x0B95;
		WebGLContext.STENCIL_PASS_DEPTH_PASS=0x0B96;
		WebGLContext.STENCIL_REF=0x0B97;
		WebGLContext.STENCIL_VALUE_MASK=0x0B93;
		WebGLContext.STENCIL_WRITEMASK=0x0B98;
		WebGLContext.STENCIL_BACK_FUNC=0x8800;
		WebGLContext.STENCIL_BACK_FAIL=0x8801;
		WebGLContext.STENCIL_BACK_PASS_DEPTH_FAIL=0x8802;
		WebGLContext.STENCIL_BACK_PASS_DEPTH_PASS=0x8803;
		WebGLContext.STENCIL_BACK_REF=0x8CA3;
		WebGLContext.STENCIL_BACK_VALUE_MASK=0x8CA4;
		WebGLContext.STENCIL_BACK_WRITEMASK=0x8CA5;
		WebGLContext.VIEWPORT=0x0BA2;
		WebGLContext.SCISSOR_BOX=0x0C10;
		WebGLContext.COLOR_CLEAR_VALUE=0x0C22;
		WebGLContext.COLOR_WRITEMASK=0x0C23;
		WebGLContext.UNPACK_ALIGNMENT=0x0CF5;
		WebGLContext.PACK_ALIGNMENT=0x0D05;
		WebGLContext.MAX_TEXTURE_SIZE=0x0D33;
		WebGLContext.MAX_VIEWPORT_DIMS=0x0D3A;
		WebGLContext.SUBPIXEL_BITS=0x0D50;
		WebGLContext.RED_BITS=0x0D52;
		WebGLContext.GREEN_BITS=0x0D53;
		WebGLContext.BLUE_BITS=0x0D54;
		WebGLContext.ALPHA_BITS=0x0D55;
		WebGLContext.DEPTH_BITS=0x0D56;
		WebGLContext.STENCIL_BITS=0x0D57;
		WebGLContext.POLYGON_OFFSET_UNITS=0x2A00;
		WebGLContext.POLYGON_OFFSET_FACTOR=0x8038;
		WebGLContext.TEXTURE_BINDING_2D=0x8069;
		WebGLContext.SAMPLE_BUFFERS=0x80A8;
		WebGLContext.SAMPLES=0x80A9;
		WebGLContext.SAMPLE_COVERAGE_VALUE=0x80AA;
		WebGLContext.SAMPLE_COVERAGE_INVERT=0x80AB;
		WebGLContext.NUM_COMPRESSED_TEXTURE_FORMATS=0x86A2;
		WebGLContext.COMPRESSED_TEXTURE_FORMATS=0x86A3;
		WebGLContext.DONT_CARE=0x1100;
		WebGLContext.FASTEST=0x1101;
		WebGLContext.NICEST=0x1102;
		WebGLContext.GENERATE_MIPMAP_HINT=0x8192;
		WebGLContext.BYTE=0x1400;
		WebGLContext.UNSIGNED_BYTE=0x1401;
		WebGLContext.SHORT=0x1402;
		WebGLContext.UNSIGNED_SHORT=0x1403;
		WebGLContext.INT=0x1404;
		WebGLContext.UNSIGNED_INT=0x1405;
		WebGLContext.FLOAT=0x1406;
		WebGLContext.DEPTH_COMPONENT=0x1902;
		WebGLContext.ALPHA=0x1906;
		WebGLContext.RGB=0x1907;
		WebGLContext.RGBA=0x1908;
		WebGLContext.LUMINANCE=0x1909;
		WebGLContext.LUMINANCE_ALPHA=0x190A;
		WebGLContext.UNSIGNED_SHORT_4_4_4_4=0x8033;
		WebGLContext.UNSIGNED_SHORT_5_5_5_1=0x8034;
		WebGLContext.UNSIGNED_SHORT_5_6_5=0x8363;
		WebGLContext.FRAGMENT_SHADER=0x8B30;
		WebGLContext.VERTEX_SHADER=0x8B31;
		WebGLContext.MAX_VERTEX_ATTRIBS=0x8869;
		WebGLContext.MAX_VERTEX_UNIFORM_VECTORS=0x8DFB;
		WebGLContext.MAX_VARYING_VECTORS=0x8DFC;
		WebGLContext.MAX_COMBINED_TEXTURE_IMAGE_UNITS=0x8B4D;
		WebGLContext.MAX_VERTEX_TEXTURE_IMAGE_UNITS=0x8B4C;
		WebGLContext.MAX_TEXTURE_IMAGE_UNITS=0x8872;
		WebGLContext.MAX_FRAGMENT_UNIFORM_VECTORS=0x8DFD;
		WebGLContext.SHADER_TYPE=0x8B4F;
		WebGLContext.DELETE_STATUS=0x8B80;
		WebGLContext.LINK_STATUS=0x8B82;
		WebGLContext.VALIDATE_STATUS=0x8B83;
		WebGLContext.ATTACHED_SHADERS=0x8B85;
		WebGLContext.ACTIVE_UNIFORMS=0x8B86;
		WebGLContext.ACTIVE_ATTRIBUTES=0x8B89;
		WebGLContext.SHADING_LANGUAGE_VERSION=0x8B8C;
		WebGLContext.CURRENT_PROGRAM=0x8B8D;
		WebGLContext.NEVER=0x0200;
		WebGLContext.LESS=0x0201;
		WebGLContext.EQUAL=0x0202;
		WebGLContext.LEQUAL=0x0203;
		WebGLContext.GREATER=0x0204;
		WebGLContext.NOTEQUAL=0x0205;
		WebGLContext.GEQUAL=0x0206;
		WebGLContext.ALWAYS=0x0207;
		WebGLContext.KEEP=0x1E00;
		WebGLContext.REPLACE=0x1E01;
		WebGLContext.INCR=0x1E02;
		WebGLContext.DECR=0x1E03;
		WebGLContext.INVERT=0x150A;
		WebGLContext.INCR_WRAP=0x8507;
		WebGLContext.DECR_WRAP=0x8508;
		WebGLContext.VENDOR=0x1F00;
		WebGLContext.RENDERER=0x1F01;
		WebGLContext.VERSION=0x1F02;
		WebGLContext.NEAREST=0x2600;
		WebGLContext.LINEAR=0x2601;
		WebGLContext.NEAREST_MIPMAP_NEAREST=0x2700;
		WebGLContext.LINEAR_MIPMAP_NEAREST=0x2701;
		WebGLContext.NEAREST_MIPMAP_LINEAR=0x2702;
		WebGLContext.LINEAR_MIPMAP_LINEAR=0x2703;
		WebGLContext.TEXTURE_MAG_FILTER=0x2800;
		WebGLContext.TEXTURE_MIN_FILTER=0x2801;
		WebGLContext.TEXTURE_WRAP_S=0x2802;
		WebGLContext.TEXTURE_WRAP_T=0x2803;
		WebGLContext.TEXTURE_2D=0x0DE1;
		WebGLContext.TEXTURE=0x1702;
		WebGLContext.TEXTURE_CUBE_MAP=0x8513;
		WebGLContext.TEXTURE_BINDING_CUBE_MAP=0x8514;
		WebGLContext.TEXTURE_CUBE_MAP_POSITIVE_X=0x8515;
		WebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_X=0x8516;
		WebGLContext.TEXTURE_CUBE_MAP_POSITIVE_Y=0x8517;
		WebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_Y=0x8518;
		WebGLContext.TEXTURE_CUBE_MAP_POSITIVE_Z=0x8519;
		WebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_Z=0x851A;
		WebGLContext.MAX_CUBE_MAP_TEXTURE_SIZE=0x851C;
		WebGLContext.TEXTURE0=0x84C0;
		WebGLContext.TEXTURE1=0x84C1;
		WebGLContext.TEXTURE2=0x84C2;
		WebGLContext.TEXTURE3=0x84C3;
		WebGLContext.TEXTURE4=0x84C4;
		WebGLContext.TEXTURE5=0x84C5;
		WebGLContext.TEXTURE6=0x84C6;
		WebGLContext.TEXTURE7=0x84C7;
		WebGLContext.TEXTURE8=0x84C8;
		WebGLContext.TEXTURE9=0x84C9;
		WebGLContext.TEXTURE10=0x84CA;
		WebGLContext.TEXTURE11=0x84CB;
		WebGLContext.TEXTURE12=0x84CC;
		WebGLContext.TEXTURE13=0x84CD;
		WebGLContext.TEXTURE14=0x84CE;
		WebGLContext.TEXTURE15=0x84CF;
		WebGLContext.TEXTURE16=0x84D0;
		WebGLContext.TEXTURE17=0x84D1;
		WebGLContext.TEXTURE18=0x84D2;
		WebGLContext.TEXTURE19=0x84D3;
		WebGLContext.TEXTURE20=0x84D4;
		WebGLContext.TEXTURE21=0x84D5;
		WebGLContext.TEXTURE22=0x84D6;
		WebGLContext.TEXTURE23=0x84D7;
		WebGLContext.TEXTURE24=0x84D8;
		WebGLContext.TEXTURE25=0x84D9;
		WebGLContext.TEXTURE26=0x84DA;
		WebGLContext.TEXTURE27=0x84DB;
		WebGLContext.TEXTURE28=0x84DC;
		WebGLContext.TEXTURE29=0x84DD;
		WebGLContext.TEXTURE30=0x84DE;
		WebGLContext.TEXTURE31=0x84DF;
		WebGLContext.ACTIVE_TEXTURE=0x84E0;
		WebGLContext.REPEAT=0x2901;
		WebGLContext.CLAMP_TO_EDGE=0x812F;
		WebGLContext.MIRRORED_REPEAT=0x8370;
		WebGLContext.FLOAT_VEC2=0x8B50;
		WebGLContext.FLOAT_VEC3=0x8B51;
		WebGLContext.FLOAT_VEC4=0x8B52;
		WebGLContext.INT_VEC2=0x8B53;
		WebGLContext.INT_VEC3=0x8B54;
		WebGLContext.INT_VEC4=0x8B55;
		WebGLContext.BOOL=0x8B56;
		WebGLContext.BOOL_VEC2=0x8B57;
		WebGLContext.BOOL_VEC3=0x8B58;
		WebGLContext.BOOL_VEC4=0x8B59;
		WebGLContext.FLOAT_MAT2=0x8B5A;
		WebGLContext.FLOAT_MAT3=0x8B5B;
		WebGLContext.FLOAT_MAT4=0x8B5C;
		WebGLContext.SAMPLER_2D=0x8B5E;
		WebGLContext.SAMPLER_CUBE=0x8B60;
		WebGLContext.VERTEX_ATTRIB_ARRAY_ENABLED=0x8622;
		WebGLContext.VERTEX_ATTRIB_ARRAY_SIZE=0x8623;
		WebGLContext.VERTEX_ATTRIB_ARRAY_STRIDE=0x8624;
		WebGLContext.VERTEX_ATTRIB_ARRAY_TYPE=0x8625;
		WebGLContext.VERTEX_ATTRIB_ARRAY_NORMALIZED=0x886A;
		WebGLContext.VERTEX_ATTRIB_ARRAY_POINTER=0x8645;
		WebGLContext.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING=0x889F;
		WebGLContext.COMPILE_STATUS=0x8B81;
		WebGLContext.LOW_FLOAT=0x8DF0;
		WebGLContext.MEDIUM_FLOAT=0x8DF1;
		WebGLContext.HIGH_FLOAT=0x8DF2;
		WebGLContext.LOW_INT=0x8DF3;
		WebGLContext.MEDIUM_INT=0x8DF4;
		WebGLContext.HIGH_INT=0x8DF5;
		WebGLContext.FRAMEBUFFER=0x8D40;
		WebGLContext.RENDERBUFFER=0x8D41;
		WebGLContext.RGBA4=0x8056;
		WebGLContext.RGB5_A1=0x8057;
		WebGLContext.RGB565=0x8D62;
		WebGLContext.DEPTH_COMPONENT16=0x81A5;
		WebGLContext.STENCIL_INDEX=0x1901;
		WebGLContext.STENCIL_INDEX8=0x8D48;
		WebGLContext.DEPTH_STENCIL=0x84F9;
		WebGLContext.RENDERBUFFER_WIDTH=0x8D42;
		WebGLContext.RENDERBUFFER_HEIGHT=0x8D43;
		WebGLContext.RENDERBUFFER_INTERNAL_FORMAT=0x8D44;
		WebGLContext.RENDERBUFFER_RED_SIZE=0x8D50;
		WebGLContext.RENDERBUFFER_GREEN_SIZE=0x8D51;
		WebGLContext.RENDERBUFFER_BLUE_SIZE=0x8D52;
		WebGLContext.RENDERBUFFER_ALPHA_SIZE=0x8D53;
		WebGLContext.RENDERBUFFER_DEPTH_SIZE=0x8D54;
		WebGLContext.RENDERBUFFER_STENCIL_SIZE=0x8D55;
		WebGLContext.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE=0x8CD0;
		WebGLContext.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME=0x8CD1;
		WebGLContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL=0x8CD2;
		WebGLContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE=0x8CD3;
		WebGLContext.COLOR_ATTACHMENT0=0x8CE0;
		WebGLContext.DEPTH_ATTACHMENT=0x8D00;
		WebGLContext.STENCIL_ATTACHMENT=0x8D20;
		WebGLContext.DEPTH_STENCIL_ATTACHMENT=0x821A;
		WebGLContext.NONE=0;
		WebGLContext.FRAMEBUFFER_COMPLETE=0x8CD5;
		WebGLContext.FRAMEBUFFER_INCOMPLETE_ATTACHMENT=0x8CD6;
		WebGLContext.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT=0x8CD7;
		WebGLContext.FRAMEBUFFER_INCOMPLETE_DIMENSIONS=0x8CD9;
		WebGLContext.FRAMEBUFFER_UNSUPPORTED=0x8CDD;
		WebGLContext.FRAMEBUFFER_BINDING=0x8CA6;
		WebGLContext.RENDERBUFFER_BINDING=0x8CA7;
		WebGLContext.MAX_RENDERBUFFER_SIZE=0x84E8;
		WebGLContext.INVALID_FRAMEBUFFER_OPERATION=0x0506;
		WebGLContext.UNPACK_FLIP_Y_WEBGL=0x9240;
		WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL=0x9241;
		WebGLContext.CONTEXT_LOST_WEBGL=0x9242;
		WebGLContext.UNPACK_COLORSPACE_CONVERSION_WEBGL=0x9243;
		WebGLContext.BROWSER_DEFAULT_WEBGL=0x9244;
		WebGLContext._useProgram=null;
		WebGLContext._depthTest=true;
		WebGLContext._depthMask=true;
		WebGLContext._blend=false;
		WebGLContext._cullFace=false;
		WebGLContext.curBindTexTarget=null
		WebGLContext.curBindTexValue=null
		__static(WebGLContext,
		['_depthFunc',function(){return this._depthFunc=/*CLASS CONST:laya.webgl.WebGLContext.LESS*/0x0201;},'_sFactor',function(){return this._sFactor=/*CLASS CONST:laya.webgl.WebGLContext.ONE*/1;},'_dFactor',function(){return this._dFactor=/*CLASS CONST:laya.webgl.WebGLContext.ZERO*/0;},'_frontFace',function(){return this._frontFace=/*CLASS CONST:laya.webgl.WebGLContext.CCW*/0x0901;}
		]);
		return WebGLContext;
	})()


	//class laya.webgl.display.GraphicsGL extends laya.display.Graphics
	var GraphicsGL=(function(_super){
		function GraphicsGL(){
			GraphicsGL.__super.call(this);
		}

		__class(GraphicsGL,'laya.webgl.display.GraphicsGL',_super);
		var __proto=GraphicsGL.prototype;
		__proto.setShader=function(shader){
			this._saveToCmd(Render.context._setShader,[shader]);
		}

		__proto.setIBVB=function(x,y,ib,vb,numElement,shader){
			this._saveToCmd(Render.context._setIBVB,[x,y,ib,vb,numElement,shader]);
		}

		__proto.drawParticle=function(x,y,ps){
			var pt=RunDriver.createParticleTemplate2D(ps);
			pt.x=x;
			pt.y=y;
			this._saveToCmd(Render.context._drawParticle,[pt]);
		}

		return GraphicsGL;
	})(Graphics)


	//class laya.webgl.canvas.WebGLContext2D extends laya.resource.Context
	var WebGLContext2D=(function(_super){
		var ContextParams;
		function WebGLContext2D(c){
			this._x=0;
			this._y=0;
			this._id=++WebGLContext2D._COUNT;
			//this._other=null;
			this._path=null;
			//this._primitiveValue2D=null;
			this._drawCount=1;
			this._maxNumEle=0;
			this._clear=false;
			this._isMain=false;
			this._atlasResourceChange=0;
			this._submits=[];
			this._curSubmit=null;
			this._ib=null;
			this._vb=null;
			//this._curMat=null;
			this._nBlendType=0;
			//this._save=null;
			//this._targets=null;
			//this._renderKey=NaN;
			this._saveMark=null;
			//this.sprite=null;
			this.mId=-1;
			this.mHaveKey=false;
			this.mHaveLineKey=false;
			this.mX=0;
			this.mY=0;
			WebGLContext2D.__super.call(this);
			this._width=99999999;
			this._height=99999999;
			this._clipRect=WebGLContext2D.MAXCLIPRECT;
			this._shader2D=new Shader2D();
			this.mOutPoint
			this._canvas=c;
			this._curMat=Matrix.create();
			if (Render.isFlash){
				this._ib=IndexBuffer2D.create(/*laya.webgl.WebGLContext.STATIC_DRAW*/0x88E4);
				GlUtils.fillIBQuadrangle(this._ib,16);
			}else
			this._ib=IndexBuffer2D.QuadrangleIB;
			this._vb=VertexBuffer2D.create(-1);
			this._other=ContextParams.DEFAULT;
			this._save=[SaveMark.Create(this)];
			this._save.length=10;
			this.clear();
		}

		__class(WebGLContext2D,'laya.webgl.canvas.WebGLContext2D',_super);
		var __proto=WebGLContext2D.prototype;
		__proto.setIsMainContext=function(){
			this._isMain=true;
		}

		__proto.clearBG=function(r,g,b,a){
			var gl=WebGL.mainContext;
			gl.clearColor(r,g,b,a);
			gl.clear(/*laya.webgl.WebGLContext.COLOR_BUFFER_BIT*/0x00004000);
		}

		__proto._getSubmits=function(){
			return this._submits;
		}

		__proto.destroy=function(){
			this.sprite=null;
			this._curMat && this._curMat.destroy();
			this._targets && this._targets.destroy();
			this._targets=null;
			for (var i=0,n=this._submits._length;i < n;i++)
			this._submits[i].releaseRender();
			this._submits.length=0;
			this._submits._length=0;
			this._curSubmit=null;
			this._path && this._path.recover();
			this._path=null;
			if (this._vb){
				this._vb.releaseResource();
				this._vb.dispose();
				this._vb.destory();
				this._vb=null;
			}
			this._canvas=null;
			this._ib && (this._ib !=IndexBuffer2D.QuadrangleIB)&& this._ib.releaseResource();
		}

		__proto.clear=function(){
			this._vb.clear();
			this._targets && (this._targets.repaint=true);
			this._other=ContextParams.DEFAULT;
			this._clear=true;
			this._repaint=false;
			this._drawCount=1;
			this._renderKey=0;
			this._other.lineWidth=this._shader2D.ALPHA=1.0;
			this._nBlendType=0;
			this._clipRect=WebGLContext2D.MAXCLIPRECT;
			this._curSubmit=Submit.RENDERBASE;
			this._shader2D.glTexture=null;
			this._shader2D.fillStyle=this._shader2D.strokeStyle=DrawStyle.DEFAULT;
			for (var i=0,n=this._submits._length;i < n;i++)
			this._submits[i].releaseRender();
			this._submits._length=0;
			this._curMat.identity();
			this._other.clear();
			this._saveMark=this._save[0];
			this._save._length=1;
		}

		__proto.size=function(w,h){
			if (this._width !=w || this._height !=h){
				if (w==0 || h==0){
					if (this._vb._byteLength !=0){
						this._width=w;
						this._height=h;
						this._vb.clear();
						this._vb.upload();
					}
					for (var i=0,n=this._submits._length;i < n;i++)
					this._submits[i].releaseRender();
					this._submits.length=0;
					this._submits._length=0;
					this._curSubmit=null;
					this._path && this._path.recover();
					this._path=null;
					this.sprite=null;
					this._targets && (this._targets.destroy());
					this._targets=null;
					}else {
					this._width=w;
					this._height=h;
					this._targets && (this._targets.size(w,h));
					this._canvas.memorySize-=this._canvas.memorySize;
				}
			}
		}

		__proto._getTransformMatrix=function(){
			return this._curMat;
		}

		__proto.translate=function(x,y){
			if (x!==0 || y!==0){
				SaveTranslate.save(this);
				if (this._curMat.bTransform){
					SaveTransform.save(this);
					this._curMat.transformPointN(Point.TEMP.setTo(x,y));
					x=Point.TEMP.x;
					y=Point.TEMP.y;
				}
				this._x+=x;
				this._y+=y;
			}
		}

		__proto.save=function(){
			this._save[this._save._length++]=SaveMark.Create(this);
		}

		__proto.restore=function(){
			var sz=this._save._length;
			if (sz < 1)
				return;
			for (var i=sz-1;i >=0;i--){
				var o=this._save[i];
				o.restore(this);
				if (o.isSaveMark()){
					this._save._length=i;
					return;
				}
			}
		}

		__proto._fillText=function(txt,words,x,y,fontStr,color,strokeColor,lineWidth,textAlign,underLine){
			(underLine===void 0)&& (underLine=0);
			var shader=this._shader2D;
			var curShader=this._curSubmit.shaderValue;
			var font=fontStr ? FontInContext.create(fontStr):this._other.font;
			if (AtlasResourceManager.enabled){
				if (shader.ALPHA!==curShader.ALPHA)
					shader.glTexture=null;
				DrawText.drawText(this,txt,words,this._curMat,font,textAlign || this._other.textAlign,color,strokeColor,lineWidth,x,y,underLine);
				}else {
				var preDef=this._shader2D.defines.getValue();
				var colorAdd=color ? Color.create(color)._color :shader.colorAdd;
				if (shader.ALPHA!==curShader.ALPHA || colorAdd!==shader.colorAdd || curShader.colorAdd!==shader.colorAdd){
					shader.glTexture=null;
					shader.colorAdd=colorAdd;
				}
				DrawText.drawText(this,txt,words,this._curMat,font,textAlign || this._other.textAlign,color,strokeColor,lineWidth,x,y,underLine);
			}
		}

		//TODO:实现下划线
		__proto.fillWords=function(words,x,y,fontStr,color,underLine){
			this._fillText(null,words,x,y,fontStr,color,null,-1,null,underLine);
		}

		__proto.fillBorderWords=function(words,x,y,font,color,borderColor,lineWidth){
			this._fillBorderText(null,words,x,y,font,color,borderColor,lineWidth,null);
		}

		__proto.fillText=function(txt,x,y,fontStr,color,textAlign){
			this._fillText(txt,null,x,y,fontStr,color,null,-1,textAlign);
		}

		__proto.strokeText=function(txt,x,y,fontStr,color,lineWidth,textAlign){
			this._fillText(txt,null,x,y,fontStr,null,color,lineWidth || 1,textAlign);
		}

		__proto.fillBorderText=function(txt,x,y,fontStr,fillColor,borderColor,lineWidth,textAlign){
			this._fillBorderText(txt,null,x,y,fontStr,fillColor,borderColor,lineWidth,textAlign);
		}

		__proto._fillBorderText=function(txt,words,x,y,fontStr,fillColor,borderColor,lineWidth,textAlign){
			if (!AtlasResourceManager.enabled){
				this._fillText(txt,words,x,y,fontStr,null,borderColor,lineWidth || 1,textAlign);
				this._fillText(txt,words,x,y,fontStr,fillColor,null,-1,textAlign);
				return;
			};
			var shader=this._shader2D;
			var curShader=this._curSubmit.shaderValue;
			if (shader.ALPHA!==curShader.ALPHA)
				shader.glTexture=null;
			var font=fontStr ? (WebGLContext2D._fontTemp.setFont(fontStr),WebGLContext2D._fontTemp):this._other.font;
			DrawText.drawText(this,txt,words,this._curMat,font,textAlign || this._other.textAlign,fillColor,borderColor,lineWidth || 1,x,y,0);
		}

		__proto.fillRect=function(x,y,width,height,fillStyle){
			var vb=this._vb;
			if (GlUtils.fillRectImgVb(vb,this._clipRect,x,y,width,height,Texture.DEF_UV,this._curMat,this._x,this._y,0,0)){
				this._renderKey=0;
				var pre=this._shader2D.fillStyle;
				fillStyle && (this._shader2D.fillStyle=DrawStyle.create(fillStyle));
				var shader=this._shader2D;
				var curShader=this._curSubmit.shaderValue;
				if (shader.fillStyle!==curShader.fillStyle || shader.ALPHA!==curShader.ALPHA){
					shader.glTexture=null;
					var submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength-16 */*laya.webgl.utils.Buffer2D.FLOAT32*/4)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,0));
					submit.shaderValue.color=shader.fillStyle._color._color;
					submit.shaderValue.ALPHA=shader.ALPHA;
					this._submits[this._submits._length++]=submit;
				}
				this._curSubmit._numEle+=6;
				this._shader2D.fillStyle=pre;
			}
		}

		__proto.fillTexture=function(texture,x,y,width,height,type,offset,other){
			if (!(texture.loaded && texture.bitmap && texture.source)){
				if (this.sprite){
					Laya.timer.callLater(this,this._repaintSprite);
				}
				return;
			};
			var vb=this._vb;
			var w=texture.bitmap.width,h=texture.bitmap.height,uv=texture.uv;
			var ox=offset.x % texture.width,oy=offset.y % texture.height;
			if (w !=other.w || h !=other.h){
				if (!other.w && !other.h){
					other.oy=other.ox=0;
					switch (type){
						case "repeat":
							other.width=width;
							other.height=height;
							break ;
						case "repeat-x":
							other.width=width;
							if (oy < 0){
								if (texture.height+oy > height){
									other.height=height;
									}else {
									other.height=texture.height+oy;
								}
								}else {
								other.oy=oy;
								if (texture.height+oy > height){
									other.height=height-oy;
									}else {
									other.height=texture.height;
								}
							}
							break ;
						case "repeat-y":
							if (ox < 0){
								if (texture.width+ox > width){
									other.width=width;
									}else {
									other.width=texture.width+ox;
								}
								}else {
								other.ox=ox;
								if (texture.width+ox > width){
									other.width=width-ox;
									}else {
									other.width=texture.width;
								}
							}
							other.height=height;
							break ;
						default :
							other.width=width;
							other.height=height;
							break ;
						}
				}
				other.w=w;
				other.h=h;
				other.uv=[0,0,other.width / w,0,other.width / w,other.height / h,0,other.height / h];
			}
			x+=other.ox;
			y+=other.oy;
			ox-=other.ox;
			oy-=other.oy;
			if (GlUtils.fillRectImgVb(vb,this._clipRect,x,y,other.width,other.height,other.uv,this._curMat,this._x,this._y,0,0)){
				this._renderKey=0;
				var submit=SubmitTexture.create(this,this._ib,vb,((vb._byteLength-16 */*laya.webgl.utils.Buffer2D.FLOAT32*/4)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.FILLTEXTURE*/0x100,0));
				this._submits[this._submits._length++]=submit;
				var shaderValue=submit.shaderValue;
				shaderValue.textureHost=texture;
				var tTextureX=uv[0] *w;
				var tTextureY=uv[1] *h;
				var tTextureW=(uv[2]-uv[0])*w;
				var tTextureH=(uv[5]-uv[3])*h;
				var tx=-ox / w;
				var ty=-oy / h;
				shaderValue.u_TexRange[0]=tTextureX / w;
				shaderValue.u_TexRange[1]=tTextureW / w;
				shaderValue.u_TexRange[2]=tTextureY / h;
				shaderValue.u_TexRange[3]=tTextureH / h;
				shaderValue.u_offset[0]=tx;
				shaderValue.u_offset[1]=ty;
				if (AtlasResourceManager.enabled && !this._isMain)
					submit.addTexture(texture,(vb._byteLength >> 2)-/*CLASS CONST:laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16);
				this._curSubmit=submit;
				submit._renderType=/*laya.webgl.submit.Submit.TYPE_FILLTEXTURE*/10017;
				submit._numEle+=6;
			}
		}

		__proto.setShader=function(shader){
			SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_SHADER*/0x100000,this._shader2D,true);
			this._shader2D.shader=shader;
		}

		__proto.setFilters=function(value){
			SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_FILTERS*/0x200000,this._shader2D,true);
			this._shader2D.filters=value;
			this._curSubmit=Submit.RENDERBASE;
			this._renderKey=0;
			this._drawCount++;
		}

		__proto.drawTexture=function(tex,x,y,width,height,tx,ty){
			this._drawTextureM(tex,x,y,width,height,tx,ty,null,1);
		}

		__proto.addTextureVb=function(invb,x,y){
			var finalVB=this._curSubmit._vb || this._vb;
			var vpos=(finalVB._byteLength >> 2);
			finalVB.byteLength=((vpos+/*CLASS CONST:laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16)<< 2);
			var vbdata=finalVB.getFloat32Array();
			for (var i=0,ci=0;i < 16;i+=4){
				vbdata[vpos++]=invb[i]+x;
				vbdata[vpos++]=invb[i+1]+y;
				vbdata[vpos++]=invb[i+2];
				vbdata[vpos++]=invb[i+3];
			}
			this._curSubmit._numEle+=6;
			this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
			finalVB._upload=true;
		}

		__proto.willDrawTexture=function(tex,alpha){
			if (!(tex.loaded && tex.bitmap && tex.source)){
				if (this.sprite){
					Laya.timer.callLater(this,this._repaintSprite);
				}
				return 0;
			};
			var webGLImg=tex.bitmap;
			var rid=webGLImg.id+this._shader2D.ALPHA *alpha+/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
			if (rid==this._renderKey)return rid;
			var shader=this._shader2D;
			var preAlpha=shader.ALPHA;
			var curShader=this._curSubmit.shaderValue;
			shader.ALPHA *=alpha;
			this._renderKey=rid;
			this._drawCount++;
			shader.glTexture=webGLImg;
			var vb=this._vb;
			var submit=null;
			var vbSize=(vb._byteLength / 32)*3;
			submit=SubmitTexture.create(this,this._ib,vb,vbSize,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0));
			this._submits[this._submits._length++]=submit;
			submit.shaderValue.textureHost=tex;
			submit._renderType=/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
			submit._preIsSameTextureShader=this._curSubmit._renderType===/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016 && shader.ALPHA===curShader.ALPHA;
			this._curSubmit=submit;
			shader.ALPHA=preAlpha;
			return rid;
		}

		__proto.drawTextures=function(tex,pos,tx,ty){
			if (!(tex.loaded && tex.bitmap && tex.source)){
				this.sprite && Laya.timer.callLater(this,this._repaintSprite);
				return;
			};
			var pre=this._clipRect;
			this._clipRect=WebGLContext2D.MAXCLIPRECT;
			if (!this._drawTextureM(tex,pos[0],pos[1],tex.width,tex.height,tx,ty,null,1)){
				alert("drawTextures err");
				return;
			}
			this._clipRect=pre;
			Stat.drawCall++;
			if (pos.length < 4)
				return;
			var finalVB=this._curSubmit._vb || this._vb;
			var sx=this._curMat.a,sy=this._curMat.d;
			for (var i=2,sz=pos.length;i < sz;i+=2){
				GlUtils.copyPreImgVb(finalVB,(pos[i]-pos[i-2])*sx,(pos[i+1]-pos[i-1])*sy);
				this._curSubmit._numEle+=6;
			}
			this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
		}

		__proto._drawTextureM=function(tex,x,y,width,height,tx,ty,m,alpha){
			if (!(tex.loaded && tex.source)){
				if (this.sprite){
					Laya.timer.callLater(this,this._repaintSprite);
				}
				return false;
			};
			var finalVB=this._curSubmit._vb || this._vb;
			var webGLImg=tex.bitmap;
			x+=tx;
			y+=ty;
			this._drawCount++;
			var rid=webGLImg.id+this._shader2D.ALPHA *alpha+/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
			if (rid !=this._renderKey){
				this._renderKey=rid;
				var curShader=this._curSubmit.shaderValue;
				var shader=this._shader2D;
				var alphaBack=shader.ALPHA;
				shader.ALPHA *=alpha;
				shader.glTexture=webGLImg;
				var vb=this._vb;
				var submit=null;
				var vbSize=(vb._byteLength / 32)*3;
				submit=SubmitTexture.create(this,this._ib,vb,vbSize,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0));
				this._submits[this._submits._length++]=submit;
				submit.shaderValue.textureHost=tex;
				submit._renderType=/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
				submit._preIsSameTextureShader=this._curSubmit._renderType===/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016 && shader.ALPHA===curShader.ALPHA;
				this._curSubmit=submit;
				finalVB=this._curSubmit._vb || this._vb;
				shader.ALPHA=alphaBack;
			}
			if (GlUtils.fillRectImgVb(finalVB,this._clipRect,x,y,width || tex.width,height || tex.height,tex.uv,m || this._curMat,this._x,this._y,0,0)){
				if (AtlasResourceManager.enabled && !this._isMain)
					(this._curSubmit).addTexture(tex,(finalVB._byteLength >> 2)-/*CLASS CONST:laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16);
				this._curSubmit._numEle+=6;
				this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
				return true;
			}
			return false;
		}

		__proto._repaintSprite=function(){
			this.sprite.repaint();
		}

		//}
		__proto._drawText=function(tex,x,y,width,height,m,tx,ty,dx,dy){
			var webGLImg=tex.bitmap;
			this._drawCount++;
			var rid=webGLImg.id+this._shader2D.ALPHA+/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
			if (rid !=this._renderKey){
				this._renderKey=rid;
				var curShader=this._curSubmit.shaderValue;
				var shader=this._shader2D;
				shader.glTexture=webGLImg;
				var vb=this._vb;
				var submit=null;
				var submitID=NaN;
				var vbSize=(vb._byteLength / 32)*3;
				if (AtlasResourceManager.enabled){
					submit=SubmitTexture.create(this,this._ib,vb,vbSize,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0));
					}else {
					submit=SubmitTexture.create(this,this._ib,vb,vbSize,TextSV.create());
				}
				submit._preIsSameTextureShader=this._curSubmit._renderType===/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016 && shader.ALPHA===curShader.ALPHA;
				this._submits[this._submits._length++]=submit;
				submit.shaderValue.textureHost=tex;
				submit._renderType=/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016;
				this._curSubmit=submit;
			}
			tex.active();
			var finalVB=this._curSubmit._vb || this._vb;
			if (GlUtils.fillRectImgVb(finalVB,this._clipRect,x+tx,y+ty,width || tex.width,height || tex.height,tex.uv,m || this._curMat,this._x,this._y,dx,dy,true)){
				if (AtlasResourceManager.enabled && !this._isMain){
					(this._curSubmit).addTexture(tex,(finalVB._byteLength >> 2)-/*CLASS CONST:laya.webgl.canvas.WebGLContext2D._RECTVBSIZE*/16);
				}
				this._curSubmit._numEle+=6;
				this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
			}
		}

		__proto.drawTextureWithTransform=function(tex,x,y,width,height,transform,tx,ty,alpha){
			if (!transform){
				this._drawTextureM(tex,x,y,width,height,tx,ty,null,alpha);
				return;
			};
			var curMat=this._curMat;
			var prex=this._x;
			var prey=this._y;
			(tx!==0 || ty!==0)&& (this._x=tx *curMat.a+ty *curMat.c,this._y=ty *curMat.d+tx *curMat.b);
			if (transform && curMat.bTransform){
				Matrix.mul(transform,curMat,WebGLContext2D._tmpMatrix);
				transform=WebGLContext2D._tmpMatrix;
				transform._checkTransform();
				}else {
				this._x+=curMat.tx;
				this._y+=curMat.ty;
			}
			this._drawTextureM(tex,x,y,width,height,0,0,transform,alpha);
			this._x=prex;
			this._y=prey;
		}

		__proto.fillQuadrangle=function(tex,x,y,point4,m){
			var submit=this._curSubmit;
			var vb=this._vb;
			var shader=this._shader2D;
			var curShader=submit.shaderValue;
			this._renderKey=0;
			if (tex.bitmap){
				var t_tex=tex.bitmap;
				if (shader.glTexture !=t_tex || shader.ALPHA!==curShader.ALPHA){
					shader.glTexture=t_tex;
					submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0));
					submit.shaderValue.glTexture=t_tex;
					this._submits[this._submits._length++]=submit;
				}
				GlUtils.fillQuadrangleImgVb(vb,x,y,point4,tex.uv,m || this._curMat,this._x,this._y);
				}else {
				if (!submit.shaderValue.fillStyle || !submit.shaderValue.fillStyle.equal(tex)|| shader.ALPHA!==curShader.ALPHA){
					shader.glTexture=null;
					submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,0));
					submit.shaderValue.defines.add(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02);
					submit.shaderValue.fillStyle=DrawStyle.create(tex);
					this._submits[this._submits._length++]=submit;
				}
				GlUtils.fillQuadrangleImgVb(vb,x,y,point4,Texture.DEF_UV,m || this._curMat,this._x,this._y);
			}
			submit._numEle+=6;
		}

		__proto.drawTexture2=function(x,y,pivotX,pivotY,transform,alpha,blendMode,args){
			if (alpha==0)return;
			var curMat=this._curMat;
			this._x=x *curMat.a+y *curMat.c;
			this._y=y *curMat.d+x *curMat.b;
			if (transform){
				if (curMat.bTransform || transform.bTransform){
					Matrix.mul(transform,curMat,WebGLContext2D._tmpMatrix);
					transform=WebGLContext2D._tmpMatrix;
					}else {
					this._x+=transform.tx+curMat.tx;
					this._y+=transform.ty+curMat.ty;
					transform=Matrix.EMPTY;
				}
			}
			if (alpha===1 && !blendMode)
				this._drawTextureM(args[0],args[1]-pivotX,args[2]-pivotY,args[3],args[4],0,0,transform,1);
			else {
				var preAlpha=this._shader2D.ALPHA;
				var preblendType=this._nBlendType;
				this._shader2D.ALPHA=alpha;
				blendMode && (this._nBlendType=BlendMode.TOINT(blendMode));
				this._drawTextureM(args[0],args[1]-pivotX,args[2]-pivotY,args[3],args[4],0,0,transform,1);
				this._shader2D.ALPHA=preAlpha;
				this._nBlendType=preblendType;
			}
			this._x=this._y=0;
		}

		__proto.drawCanvas=function(canvas,x,y,width,height){
			var src=canvas.context;
			this._renderKey=0;
			if (src._targets){
				this._submits[this._submits._length++]=SubmitCanvas.create(src,0,null);
				this._curSubmit=Submit.RENDERBASE;
				src._targets.drawTo(this,x,y,width,height);
				}else {
				var submit=this._submits[this._submits._length++]=SubmitCanvas.create(src,this._shader2D.ALPHA,this._shader2D.filters);
				var sx=width / canvas.width;
				var sy=height / canvas.height;
				var mat=submit._matrix;
				this._curMat.copyTo(mat);
				sx !=1 && sy !=1 && mat.scale(sx,sy);
				var tx=mat.tx,ty=mat.ty;
				mat.tx=mat.ty=0;
				mat.transformPoint(Point.TEMP.setTo(x,y));
				mat.translate(Point.TEMP.x+tx,Point.TEMP.y+ty);
				this._curSubmit=Submit.RENDERBASE;
			}
			if (Config.showCanvasMark){
				this.save();
				this.lineWidth=4;
				this.strokeStyle=src._targets ? "yellow" :"green";
				this.strokeRect(x-1,y-1,width+2,height+2,1);
				this.strokeRect(x,y,width,height,1);
				this.restore();
			}
		}

		__proto.drawTarget=function(scope,x,y,width,height,m,proName,shaderValue,uv,blend){
			(blend===void 0)&& (blend=-1);
			var vb=this._vb;
			if (GlUtils.fillRectImgVb(vb,this._clipRect,x,y,width,height,uv || Texture.DEF_UV,m || this._curMat,this._x,this._y,0,0)){
				this._renderKey=0;
				var shader=this._shader2D;
				shader.glTexture=null;
				var curShader=this._curSubmit.shaderValue;
				var submit=this._curSubmit=SubmitTarget.create(this,this._ib,vb,((vb._byteLength-16 */*laya.webgl.utils.Buffer2D.FLOAT32*/4)/ 32)*3,shaderValue,proName);
				if (blend==-1){
					submit.blendType=this._nBlendType;
					}else {
					submit.blendType=blend;
				}
				submit.scope=scope;
				this._submits[this._submits._length++]=submit;
				this._curSubmit._numEle+=6;
			}
		}

		__proto.transform=function(a,b,c,d,tx,ty){
			SaveTransform.save(this);
			Matrix.mul(Matrix.TEMP.setTo(a,b,c,d,tx,ty),this._curMat,this._curMat);
			this._curMat._checkTransform();
		}

		__proto.setTransformByMatrix=function(value){
			value.copyTo(this._curMat);
		}

		__proto.transformByMatrix=function(value){
			SaveTransform.save(this);
			Matrix.mul(value,this._curMat,this._curMat);
			this._curMat._checkTransform();
		}

		__proto.rotate=function(angle){
			SaveTransform.save(this);
			this._curMat.rotateEx(angle);
		}

		__proto.scale=function(scaleX,scaleY){
			SaveTransform.save(this);
			this._curMat.scaleEx(scaleX,scaleY);
		}

		__proto.clipRect=function(x,y,width,height){
			if (this._curMat.b !=0 || this._curMat.c !=0){
				this._renderKey=0;
				var submitStencil0=SubmitStencil.create(4);
				this.addRenderObject(submitStencil0);
				var vb=this._vb;
				var nPos=(vb._byteLength >> 2);
				if (GlUtils.fillRectImgVb(vb,null,x,y,width,height,Texture.DEF_UV,this._curMat,this._x,this._y,0,0)){
					var shader=this._shader2D;
					shader.glTexture=null;
					var submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength-16 */*laya.webgl.utils.Buffer2D.FLOAT32*/4)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,0));
					submit.shaderValue.ALPHA=1.0;
					this._submits[this._submits._length++]=submit;
					this._curSubmit._numEle+=6;
					}else {
					alert("clipRect calc stencil rect error");
				};
				var submitStencil1=SubmitStencil.create(5);
				this.addRenderObject(submitStencil1);
				this._clipRect.x=x;
				this._clipRect.y=y;
				this._clipRect.width=width;
				this._clipRect.height=height;
				SaveClipRectStencil.save(this,submitStencil1);
				this._curSubmit=Submit.RENDERBASE;
				}else {
				width *=this._curMat.a;
				height *=this._curMat.d;
				var p=Point.TEMP;
				this._curMat.transformPoint(p.setTo(x,y));
				this._renderKey=0;
				var submitSc=this._curSubmit=SubmitScissor.create(this);
				this._submits[this._submits._length++]=submitSc;
				submitSc.submitIndex=this._submits._length;
				submitSc.submitLength=9999999;
				SaveClipRect.save(this,submitSc);
				var clip=this._clipRect;
				var x1=clip.x,y1=clip.y;
				var r=p.x+width,b=p.y+height;
				x1 < p.x && (clip.x=p.x);
				y1 < p.y && (clip.y=p.y);
				clip.width=Math.min(r,x1+clip.width)-clip.x;
				clip.height=Math.min(b,y1+clip.height)-clip.y;
				this._shader2D.glTexture=null;
				submitSc.clipRect.copyFrom(clip);
				this._curSubmit=Submit.RENDERBASE;
			}
		}

		__proto.setIBVB=function(x,y,ib,vb,numElement,mat,shader,shaderValues,startIndex,offset,type){
			(startIndex===void 0)&& (startIndex=0);
			(offset===void 0)&& (offset=0);
			(type===void 0)&& (type=0);
			if (ib===null){
				if (!Render.isFlash){
					ib=this._ib;
					}else {
					var falshVB=vb;
					(falshVB._selfIB)|| (falshVB._selfIB=IndexBuffer2D.create(/*laya.webgl.WebGLContext.STATIC_DRAW*/0x88E4));
					falshVB._selfIB.clear();
					ib=falshVB._selfIB;
				}
				GlUtils.expandIBQuadrangle(ib,(vb._byteLength / (/*laya.webgl.utils.Buffer2D.FLOAT32*/4 *vb.vertexStride *4)));
			}
			if (!shaderValues || !shader)
				throw Error("setIBVB must input:shader shaderValues");
			var submit=SubmitOtherIBVB.create(this,vb,ib,numElement,shader,shaderValues,startIndex,offset,type);
			mat || (mat=Matrix.EMPTY);
			mat.translate(x,y);
			Matrix.mul(mat,this._curMat,submit._mat);
			mat.translate(-x,-y);
			this._submits[this._submits._length++]=submit;
			this._curSubmit=Submit.RENDERBASE;
			this._renderKey=0;
		}

		__proto.addRenderObject=function(o){
			this._submits[this._submits._length++]=o;
		}

		__proto.fillTrangles=function(tex,x,y,points,m){
			var submit=this._curSubmit;
			var vb=this._vb;
			var shader=this._shader2D;
			var curShader=submit.shaderValue;
			var length=points.length >> 4;
			var t_tex=tex.bitmap;
			this._renderKey=0;
			if (shader.glTexture !=t_tex || shader.ALPHA!==curShader.ALPHA){
				submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0));
				submit.shaderValue.textureHost=tex;
				this._submits[this._submits._length++]=submit;
			}
			GlUtils.fillTranglesVB(vb,x,y,points,m || this._curMat,this._x,this._y);
			submit._numEle+=length *6;
		}

		__proto.submitElement=function(start,end){
			var renderList=this._submits;
			end < 0 && (end=renderList._length);
			while (start < end){
				start+=renderList[start].renderSubmit();
			}
		}

		__proto.finish=function(){
			WebGL.mainContext.finish();
		}

		__proto.flush=function(){
			var maxNum=Math.max(this._vb._byteLength / (/*laya.webgl.utils.Buffer2D.FLOAT32*/4 *16),this._maxNumEle / 6)+8;
			if (maxNum > (this._ib.bufferLength / (6 */*laya.webgl.utils.Buffer2D.SHORT*/2))){
				GlUtils.expandIBQuadrangle(this._ib,maxNum);
			}
			if (!this._isMain && AtlasResourceManager.enabled && AtlasResourceManager._atlasRestore > this._atlasResourceChange){
				this._atlasResourceChange=AtlasResourceManager._atlasRestore;
				var renderList=this._submits;
				for (var i=0,s=renderList._length;i < s;i++){
					var submit=renderList [i];
					if (submit.getRenderType()===/*laya.webgl.submit.Submit.TYPE_TEXTURE*/10016)
						(submit).checkTexture();
				}
			}
			this.submitElement(0,this._submits._length);
			this._path && this._path.reset();
			SkinMeshBuffer.instance && SkinMeshBuffer.getInstance().reset();
			this._curSubmit=Submit.RENDERBASE;
			this._renderKey=0;
			return this._submits._length;
		}

		__proto.setPathId=function(id){
			this.mId=id;
			if (this.mId !=-1){
				this.mHaveKey=false;
				var tVGM=VectorGraphManager.getInstance();
				if (tVGM.shapeDic[this.mId]){
					this.mHaveKey=true;
				}
				this.mHaveLineKey=false;
				if (tVGM.shapeLineDic[this.mId]){
					this.mHaveLineKey=true;
				}
			}
		}

		__proto.movePath=function(x,y){
			var _x1=x,_y1=y;
			x=this._curMat.a *_x1+this._curMat.c *_y1+this._curMat.tx;
			y=this._curMat.b *_x1+this._curMat.d *_y1+this._curMat.ty;
			this.mX+=x;
			this.mY+=y;
		}

		__proto.beginPath=function(){
			var tPath=this._getPath();
			tPath.tempArray.length=0;
			tPath.closePath=false;
			this.mX=0;
			this.mY=0;
		}

		__proto.closePath=function(){
			this._path.closePath=true;
		}

		__proto.fill=function(isConvexPolygon){
			(isConvexPolygon===void 0)&& (isConvexPolygon=false);
			var tPath=this._getPath();
			this.drawPoly(0,0,tPath.tempArray,this.fillStyle._color.numColor,0,0,isConvexPolygon);
		}

		__proto.stroke=function(){
			var tPath=this._getPath();
			if (this.lineWidth > 0){
				if (this.mId==-1){
					tPath.drawLine(0,0,tPath.tempArray,this.lineWidth,this.strokeStyle._color.numColor);
					}else {
					if (this.mHaveLineKey){
						var tShapeLine=VectorGraphManager.getInstance().shapeLineDic[this.mId];
						tShapeLine.rebuild(tPath.tempArray);
						tPath.setGeomtry(tShapeLine);
						}else {
						VectorGraphManager.getInstance().addLine(this.mId,tPath.drawLine(0,0,tPath.tempArray,this.lineWidth,this.strokeStyle._color.numColor));
					}
				}
				tPath.update();
				var tPosArray=[this.mX,this.mY];
				var tempSubmit=Submit.createShape(this,tPath.ib,tPath.vb,tPath.count,tPath.offset,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,0));
				tempSubmit.shaderValue.ALPHA=this._shader2D.ALPHA;
				(tempSubmit.shaderValue).u_pos=tPosArray;
				tempSubmit.shaderValue.u_mmat2=RenderState2D.TEMPMAT4_ARRAY;
				this._submits[this._submits._length++]=tempSubmit;
			}
		}

		__proto.line=function(fromX,fromY,toX,toY,lineWidth,mat){
			var submit=this._curSubmit;
			var vb=this._vb;
			if (GlUtils.fillLineVb(vb,this._clipRect,fromX,fromY,toX,toY,lineWidth,mat)){
				this._renderKey=0;
				var shader=this._shader2D;
				var curShader=submit.shaderValue;
				if (shader.strokeStyle!==curShader.strokeStyle || shader.ALPHA!==curShader.ALPHA){
					shader.glTexture=null;
					submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength-16 */*laya.webgl.utils.Buffer2D.FLOAT32*/4)/ 32)*3,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,0));
					submit.shaderValue.strokeStyle=shader.strokeStyle;
					submit.shaderValue.mainID=/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02;
					submit.shaderValue.ALPHA=shader.ALPHA;
					this._submits[this._submits._length++]=submit;
				}
				submit._numEle+=6;
			}
		}

		__proto.moveTo=function(x,y,b){
			(b===void 0)&& (b=true);
			var tPath=this._getPath();
			if (b){
				var _x1=x,_y1=y;
				x=this._curMat.a *_x1+this._curMat.c *_y1;
				y=this._curMat.b *_x1+this._curMat.d *_y1;
			}
			tPath.addPoint(x,y);
		}

		__proto.lineTo=function(x,y,b){
			(b===void 0)&& (b=true);
			var tPath=this._getPath();
			if (b){
				var _x1=x,_y1=y;
				x=this._curMat.a *_x1+this._curMat.c *_y1;
				y=this._curMat.b *_x1+this._curMat.d *_y1;
			}
			tPath.addPoint(x,y);
		}

		__proto.drawCurves=function(x,y,args){
			this.setPathId(-1);
			this.beginPath();
			this.strokeStyle=args[3];
			this.lineWidth=args[4];
			var points=args[2];
			x+=args[0],y+=args[1];
			this.movePath(x,y);
			this.moveTo(points[0],points[1]);
			var i=2,n=points.length;
			while (i < n){
				this.quadraticCurveTo(points[i++],points[i++],points[i++],points[i++]);
			}
			this.stroke();
		}

		__proto.arcTo=function(x1,y1,x2,y2,r){
			if (this.mId !=-1){
				if (this.mHaveKey){
					return;
				}
			};
			var i=0;
			var x=0,y=0;
			var tPath=this._getPath();
			this._curMat.copyTo(WebGLContext2D._tmpMatrix);
			WebGLContext2D._tmpMatrix.tx=WebGLContext2D._tmpMatrix.ty=0;
			WebGLContext2D._tempPoint.setTo(tPath.getEndPointX(),tPath.getEndPointY());
			WebGLContext2D._tmpMatrix.invertTransformPoint(WebGLContext2D._tempPoint);
			var dx=WebGLContext2D._tempPoint.x-x1;
			var dy=WebGLContext2D._tempPoint.y-y1;
			var len1=Math.sqrt(dx*dx+dy*dy);
			if (len1 <=0.000001){
				return;
			};
			var ndx=dx / len1;
			var ndy=dy / len1;
			var dx2=x2-x1;
			var dy2=y2-y1;
			var len22=dx2*dx2+dy2*dy2;
			var len2=Math.sqrt(len22);
			if (len2 <=0.000001){
				return;
			};
			var ndx2=dx2 / len2;
			var ndy2=dy2 / len2;
			var odx=ndx+ndx2;
			var ody=ndy+ndy2;
			var olen=Math.sqrt(odx*odx+ody*ody);
			if (olen <=0.000001){
				return;
			};
			var nOdx=odx / olen;
			var nOdy=ody / olen;
			var alpha=Math.acos(nOdx*ndx+nOdy*ndy);
			var halfAng=Math.PI / 2-alpha;
			len1=r / Math.tan(halfAng);
			var ptx1=len1*ndx+x1;
			var pty1=len1*ndy+y1;
			var orilen=Math.sqrt(len1*len1+r*r);
			var orix=x1+nOdx*orilen;
			var oriy=y1+nOdy*orilen;
			var ptx2=len1*ndx2+x1;
			var pty2=len1*ndy2+y1;
			var dir=ndx *ndy2-ndy *ndx2;
			var fChgAng=0;
			var sinx=0.0;
			var cosx=0.0;
			if (dir >=0){
				fChgAng=halfAng *2;
				var fda=fChgAng / WebGLContext2D.SEGNUM;
				sinx=Math.sin(fda);
				cosx=Math.cos(fda);
			}
			else {
				fChgAng=-halfAng *2;
				fda=fChgAng / WebGLContext2D.SEGNUM;
				sinx=Math.sin(fda);
				cosx=Math.cos(fda);
			}
			x=this._curMat.a *ptx1+this._curMat.c *pty1;
			y=this._curMat.b *ptx1+this._curMat.d *pty1;
			if (x !=this._path.getEndPointX()|| y !=this._path.getEndPointY()){
				tPath.addPoint(x,y);
			};
			var cvx=ptx1-orix;
			var cvy=pty1-oriy;
			var tx=0.0;
			var ty=0.0;
			for (i=0;i < WebGLContext2D.SEGNUM;i++){
				var cx=cvx*cosx+cvy*sinx;
				var cy=-cvx*sinx+cvy*cosx;
				x=cx+orix;
				y=cy+oriy;
				x1=this._curMat.a *x+this._curMat.c *y;
				y1=this._curMat.b *x+this._curMat.d *y;
				x=x1;
				y=y1;
				if (x !=this._path.getEndPointX()|| y !=this._path.getEndPointY()){
					tPath.addPoint(x,y);
				}
				cvx=cx;
				cvy=cy;
			}
		}

		__proto.arc=function(cx,cy,r,startAngle,endAngle,counterclockwise,b){
			(counterclockwise===void 0)&& (counterclockwise=false);
			(b===void 0)&& (b=true);
			if (this.mId !=-1){
				var tShape=VectorGraphManager.getInstance().shapeDic[this.mId];
				if (tShape){
					if (this.mHaveKey && !tShape.needUpdate(this._curMat))
						return;
				}
				cx=0;
				cy=0;
			};
			var a=0,da=0,hda=0,kappa=0;
			var dx=0,dy=0,x=0,y=0,tanx=0,tany=0;
			var px=0,py=0,ptanx=0,ptany=0;
			var i=0,ndivs=0,nvals=0;
			da=endAngle-startAngle;
			if (!counterclockwise){
				if (Math.abs(da)>=Math.PI *2){
					da=Math.PI *2;
					}else {
					while (da < 0.0){
						da+=Math.PI *2;
					}
				}
				}else {
				if (Math.abs(da)>=Math.PI *2){
					da=-Math.PI *2;
					}else {
					while (da > 0.0){
						da-=Math.PI *2;
					}
				}
			}
			if (r < 101){
				ndivs=Math.max(10,da *r / 5);
				}else if (r < 201){
				ndivs=Math.max(10,da *r / 20);
				}else {
				ndivs=Math.max(10,da *r / 40);
			}
			hda=(da / ndivs)/ 2.0;
			kappa=Math.abs(4 / 3 *(1-Math.cos(hda))/ Math.sin(hda));
			if (counterclockwise)
				kappa=-kappa;
			nvals=0;
			var tPath=this._getPath();
			var _x1=NaN,_y1=NaN;
			for (i=0;i <=ndivs;i++){
				a=startAngle+da *(i / ndivs);
				dx=Math.cos(a);
				dy=Math.sin(a);
				x=cx+dx *r;
				y=cy+dy *r;
				if (b){
					_x1=x,_y1=y;
					x=this._curMat.a *_x1+this._curMat.c *_y1;
					y=this._curMat.b *_x1+this._curMat.d *_y1;
				}
				if (x !=this._path.getEndPointX()|| y !=this._path.getEndPointY()){
					tPath.addPoint(x,y);
				}
			}
			dx=Math.cos(endAngle);
			dy=Math.sin(endAngle);
			x=cx+dx *r;
			y=cy+dy *r;
			if (b){
				_x1=x,_y1=y;
				x=this._curMat.a *_x1+this._curMat.c *_y1;
				y=this._curMat.b *_x1+this._curMat.d *_y1;
			}
			if (x !=this._path.getEndPointX()|| y !=this._path.getEndPointY()){
				tPath.addPoint(x,y);
			}
		}

		__proto.quadraticCurveTo=function(cpx,cpy,x,y){
			var tBezier=Bezier.I;
			var tResultArray=[];
			var _x1=x,_y1=y;
			x=this._curMat.a *_x1+this._curMat.c *_y1;
			y=this._curMat.b *_x1+this._curMat.d *_y1;
			_x1=cpx,_y1=cpy;
			cpx=this._curMat.a *_x1+this._curMat.c *_y1;
			cpy=this._curMat.b *_x1+this._curMat.d *_y1;
			var tArray=tBezier.getBezierPoints([this._path.getEndPointX(),this._path.getEndPointY(),cpx,cpy,x,y],30,2);
			for (var i=0,n=tArray.length / 2;i < n;i++){
				this.lineTo(tArray[i *2],tArray[i *2+1],false);
			}
			this.lineTo(x,y,false);
		}

		__proto.rect=function(x,y,width,height){
			this._other=this._other.make();
			this._other.path || (this._other.path=new Path());
			this._other.path.rect(x,y,width,height);
		}

		__proto.strokeRect=function(x,y,width,height,parameterLineWidth){
			var tW=parameterLineWidth *0.5;
			this.line(x-tW,y,x+width+tW,y,parameterLineWidth,this._curMat);
			this.line(x+width,y,x+width,y+height,parameterLineWidth,this._curMat);
			this.line(x,y,x,y+height,parameterLineWidth,this._curMat);
			this.line(x-tW,y+height,x+width+tW,y+height,parameterLineWidth,this._curMat);
		}

		__proto.clip=function(){}
		/**
		*画多边形(用)
		*@param x
		*@param y
		*@param points
		*/
		__proto.drawPoly=function(x,y,points,color,lineWidth,boderColor,isConvexPolygon){
			(isConvexPolygon===void 0)&& (isConvexPolygon=false);
			this._renderKey=0;
			this._shader2D.glTexture=null;
			var tPath=this._getPath();
			if (this.mId==-1){
				tPath.polygon(x,y,points,color,lineWidth ? lineWidth :1,boderColor)
				}else {
				if (this.mHaveKey){
					var tShape=VectorGraphManager.getInstance().shapeDic[this.mId];
					tShape.setMatrix(this._curMat);
					tShape.rebuild(tPath.tempArray);
					tPath.setGeomtry(tShape);
					}else {
					var t=tPath.polygon(x,y,points,color,lineWidth ? lineWidth :1,boderColor);
					VectorGraphManager.getInstance().addShape(this.mId,t);
					t.setMatrix(this._curMat);
				}
			}
			tPath.update();
			var tPosArray=[this.mX,this.mY];
			var tempSubmit;
			if (!isConvexPolygon){
				var submit=SubmitStencil.create(4);
				this.addRenderObject(submit);
				tempSubmit=Submit.createShape(this,tPath.ib,tPath.vb,tPath.count,tPath.offset,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,0));
				tempSubmit.shaderValue.ALPHA=this._shader2D.ALPHA;
				(tempSubmit.shaderValue).u_pos=tPosArray;
				tempSubmit.shaderValue.u_mmat2=RenderState2D.EMPTYMAT4_ARRAY;
				this._submits[this._submits._length++]=tempSubmit;
				submit=SubmitStencil.create(5);
				this.addRenderObject(submit);
			}
			tempSubmit=Submit.createShape(this,tPath.ib,tPath.vb,tPath.count,tPath.offset,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,0));
			tempSubmit.shaderValue.ALPHA=this._shader2D.ALPHA;
			(tempSubmit.shaderValue).u_pos=tPosArray;
			tempSubmit.shaderValue.u_mmat2=RenderState2D.EMPTYMAT4_ARRAY;
			this._submits[this._submits._length++]=tempSubmit;
			if (!isConvexPolygon){
				tempSubmit=Submit.createShape(this,tPath.ib,tPath.vb,tPath.count,tPath.offset,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,0));
				tempSubmit.shaderValue.ALPHA=this._shader2D.ALPHA;
				(tempSubmit.shaderValue).u_pos=tPosArray;
				tempSubmit.shaderValue.u_mmat2=RenderState2D.EMPTYMAT4_ARRAY;
				SubmitStencil.restore2(this,tempSubmit);
			}
			if (lineWidth > 0){
				if (this.mHaveLineKey){
					var tShapeLine=VectorGraphManager.getInstance().shapeLineDic[this.mId];
					tShapeLine.rebuild(tPath.tempArray);
					tPath.setGeomtry(tShapeLine);
					}else {
					VectorGraphManager.getInstance().addShape(this.mId,tPath.drawLine(x,y,points,lineWidth,boderColor));
				}
				tPath.update();
				tempSubmit=Submit.createShape(this,tPath.ib,tPath.vb,tPath.count,tPath.offset,Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,0));
				tempSubmit.shaderValue.ALPHA=this._shader2D.ALPHA;
				tempSubmit.shaderValue.u_mmat2=RenderState2D.EMPTYMAT4_ARRAY;
				this._submits[this._submits._length++]=tempSubmit;
			}
		}

		/*******************************************end矢量绘制***************************************************/
		__proto.drawParticle=function(x,y,pt){
			pt.x=x;
			pt.y=y;
			this._submits[this._submits._length++]=pt;
		}

		__proto._getPath=function(){
			return this._path || (this._path=new Path());
		}

		/*,_shader2D.ALPHA=1*/
		__getset(0,__proto,'globalCompositeOperation',function(){
			return BlendMode.NAMES[this._nBlendType];
			},function(value){
			var n=BlendMode.TOINT[value];
			n==null || (this._nBlendType===n)|| (SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_GLOBALCOMPOSITEOPERATION*/0x10000,this,true),this._curSubmit=Submit.RENDERBASE,this._renderKey=0,this._nBlendType=n);
		});

		__getset(0,__proto,'strokeStyle',function(){
			return this._shader2D.strokeStyle;
			},function(value){
			this._shader2D.strokeStyle.equal(value)|| (SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_STROKESTYLE*/0x200,this._shader2D,false),this._shader2D.strokeStyle=DrawStyle.create(value));
		});

		__getset(0,__proto,'globalAlpha',function(){
			return this._shader2D.ALPHA;
			},function(value){
			value=Math.floor(value *1000)/ 1000;
			if (value !=this._shader2D.ALPHA){
				SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_ALPHA*/0x1,this._shader2D,true);
				this._shader2D.ALPHA=value;
			}
		});

		//webGLCanvas为0;
		__getset(0,__proto,'asBitmap',null,function(value){
			if (value){
				this._targets || (this._targets=new RenderTargetMAX());
				this._targets.repaint=true;
				if (!this._width || !this._height)
					throw Error("asBitmap no size!");
				this._targets.setSP(this.sprite);
				this._targets.size(this._width,this._height);
			}else
			this._targets=null;
		});

		__getset(0,__proto,'fillStyle',function(){
			return this._shader2D.fillStyle;
			},function(value){
			this._shader2D.fillStyle.equal(value)|| (SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_FILESTYLE*/0x2,this._shader2D,false),this._shader2D.fillStyle=DrawStyle.create(value));
		});

		__getset(0,__proto,'textAlign',function(){
			return this._other.textAlign;
			},function(value){
			(this._other.textAlign===value)|| (this._other=this._other.make(),SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_TEXTALIGN*/0x8000,this._other,false),this._other.textAlign=value);
		});

		__getset(0,__proto,'lineWidth',function(){
			return this._other.lineWidth;
			},function(value){
			(this._other.lineWidth===value)|| (this._other=this._other.make(),SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_LINEWIDTH*/0x100,this._other,false),this._other.lineWidth=value);
		});

		__getset(0,__proto,'textBaseline',function(){
			return this._other.textBaseline;
			},function(value){
			(this._other.textBaseline===value)|| (this._other=this._other.make(),SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_TEXTBASELINE*/0x4000,this._other,false),this._other.textBaseline=value);
		});

		__getset(0,__proto,'font',null,function(str){
			if (str==this._other.font.toString())
				return;
			this._other=this._other.make();
			SaveBase.save(this,/*laya.webgl.canvas.save.SaveBase.TYPE_FONT*/0x8,this._other,false);
			this._other.font===FontInContext.EMPTY ? (this._other.font=new FontInContext(str)):(this._other.font.setFont(str));
		});

		WebGLContext2D.__init__=function(){
			ContextParams.DEFAULT=new ContextParams();
		}

		WebGLContext2D._tempPoint=new Point();
		WebGLContext2D._SUBMITVBSIZE=32000;
		WebGLContext2D._MAXSIZE=99999999;
		WebGLContext2D._RECTVBSIZE=16;
		WebGLContext2D.MAXCLIPRECT=new Rectangle(0,0,99999999,99999999);
		WebGLContext2D._COUNT=0;
		WebGLContext2D._tmpMatrix=new Matrix();
		WebGLContext2D.SEGNUM=32;
		__static(WebGLContext2D,
		['_fontTemp',function(){return this._fontTemp=new FontInContext();},'_drawStyleTemp',function(){return this._drawStyleTemp=new DrawStyle(null);}
		]);
		WebGLContext2D.__init$=function(){
			//class ContextParams
			ContextParams=(function(){
				function ContextParams(){
					this.lineWidth=1;
					this.path=null;
					this.textAlign=null;
					this.textBaseline=null;
					this.font=FontInContext.EMPTY;
				}
				__class(ContextParams,'');
				var __proto=ContextParams.prototype;
				__proto.clear=function(){
					this.lineWidth=1;
					this.path && this.path.clear();
					this.textAlign=this.textBaseline=null;
					this.font=FontInContext.EMPTY;
				}
				__proto.make=function(){
					return this===ContextParams.DEFAULT ? new ContextParams():this;
				}
				ContextParams.DEFAULT=null
				return ContextParams;
			})()
		}

		return WebGLContext2D;
	})(Context)


	//class laya.webgl.shader.d2.value.Value2D extends laya.webgl.shader.ShaderValue
	var Value2D=(function(_super){
		function Value2D(mainID,subID){
			this.size=[0,0];
			this.alpha=1.0;
			//this.mmat=null;
			this.ALPHA=1.0;
			//this.shader=null;
			//this.mainID=0;
			this.subID=0;
			//this.filters=null;
			//this.textureHost=null;
			//this.texture=null;
			//this.fillStyle=null;
			//this.color=null;
			//this.strokeStyle=null;
			//this.colorAdd=null;
			//this.glTexture=null;
			//this.u_mmat2=null;
			//this._inClassCache=null;
			this._cacheID=0;
			Value2D.__super.call(this);
			this.defines=new ShaderDefines2D();
			this.position=Value2D._POSITION;
			this.mainID=mainID;
			this.subID=subID;
			this.textureHost=null;
			this.texture=null;
			this.fillStyle=null;
			this.color=null;
			this.strokeStyle=null;
			this.colorAdd=null;
			this.glTexture=null;
			this.u_mmat2=null;
			this._cacheID=mainID|subID;
			this._inClassCache=Value2D._cache[this._cacheID];
			if (mainID>0 && !this._inClassCache){
				this._inClassCache=Value2D._cache[this._cacheID]=[];
				this._inClassCache._length=0;
			}
			this.clear();
		}

		__class(Value2D,'laya.webgl.shader.d2.value.Value2D',_super);
		var __proto=Value2D.prototype;
		__proto.setValue=function(value){}
		//throw new Error("todo in subclass");
		__proto.refresh=function(){
			var size=this.size;
			size[0]=RenderState2D.width;
			size[1]=RenderState2D.height;
			this.alpha=this.ALPHA *RenderState2D.worldAlpha;
			this.mmat=RenderState2D.worldMatrix4;
			return this;
		}

		__proto._ShaderWithCompile=function(){
			return Shader.withCompile2D(0,this.mainID,this.defines.toNameDic(),this.mainID | this.defines._value,Shader2X.create);
		}

		__proto._withWorldShaderDefines=function(){
			var defs=RenderState2D.worldShaderDefines;
			var sd=Shader.sharders [this.mainID | this.defines._value | defs.getValue()];
			if (!sd){
				var def={};
				var dic;
				var name;
				dic=this.defines.toNameDic();for (name in dic)def[name]="";
				dic=defs.toNameDic();for (name in dic)def[name]="";
				sd=Shader.withCompile2D(0,this.mainID,def,this.mainID | this.defines._value| defs.getValue(),Shader2X.create);
			};
			var worldFilters=RenderState2D.worldFilters;
			if (!worldFilters)return sd;
			var n=worldFilters.length,f;
			for (var i=0;i < n;i++){
				((f=worldFilters[i]))&& f.action.setValue(this);
			}
			return sd;
		}

		__proto.upload=function(){
			var renderstate2d=RenderState2D;
			this.alpha=this.ALPHA *renderstate2d.worldAlpha;
			if (RenderState2D.worldMatrix4!==RenderState2D.TEMPMAT4_ARRAY)this.defines.add(/*laya.webgl.shader.d2.ShaderDefines2D.WORLDMAT*/0x80);
			(WebGL.shaderHighPrecision)&& (this.defines.add(/*laya.webgl.shader.d2.ShaderDefines2D.SHADERDEFINE_FSHIGHPRECISION*/0x400));
			var sd=renderstate2d.worldShaderDefines?this._withWorldShaderDefines():(Shader.sharders [this.mainID | this.defines._value] || this._ShaderWithCompile());
			var params;
			this.size[0]=renderstate2d.width,this.size[1]=renderstate2d.height;
			this.mmat=renderstate2d.worldMatrix4;
			if (BaseShader.activeShader!==sd){
				if (sd._shaderValueWidth!==renderstate2d.width || sd._shaderValueHeight!==renderstate2d.height){
					sd._shaderValueWidth=renderstate2d.width;
					sd._shaderValueHeight=renderstate2d.height;
				}
				else{
					params=sd._params2dQuick2 || sd._make2dQuick2();
				}
				sd.upload(this,params);
			}
			else{
				if (sd._shaderValueWidth!==renderstate2d.width || sd._shaderValueHeight!==renderstate2d.height){
					sd._shaderValueWidth=renderstate2d.width;
					sd._shaderValueHeight=renderstate2d.height;
				}
				else{
					params=(sd._params2dQuick1)|| sd._make2dQuick1();
				}
				sd.upload(this,params);
			}
		}

		__proto.setFilters=function(value){
			this.filters=value;
			if (!value)
				return;
			var n=value.length,f;
			for (var i=0;i < n;i++){
				f=value[i];
				if (f){
					this.defines.add(f.type);
					f.action.setValue(this);
				}
			}
		}

		__proto.clear=function(){
			this.defines.setValue(this.subID);
		}

		__proto.release=function(){
			this._inClassCache[this._inClassCache._length++]=this;
			this.fillStyle=null;
			this.strokeStyle=null;
			this.clear();
		}

		Value2D._initone=function(type,classT){
			Value2D._typeClass[type]=classT;
			Value2D._cache[type]=[];
			Value2D._cache[type]._length=0;
		}

		Value2D.__init__=function(){
			Value2D._POSITION=[2,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,4 *CONST3D2D.BYTES_PE,0];
			Value2D._TEXCOORD=[2,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,4 *CONST3D2D.BYTES_PE,2 *CONST3D2D.BYTES_PE];
			Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,Color2dSV);
			Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,PrimitiveSV);
			Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.FILLTEXTURE*/0x100,FillTextureSV);
			Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.SKINMESH*/0x200,SkinSV);
			Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,TextureSV);
			Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01 | /*laya.webgl.shader.d2.ShaderDefines2D.COLORADD*/0x40,TextSV);
			Value2D._initone(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01 | /*laya.webgl.shader.d2.ShaderDefines2D.FILTERGLOW*/0x08,TextureSV);
		}

		Value2D.create=function(mainType,subType){
			var types=Value2D._cache[mainType|subType];
			if (types._length)
				return types[--types._length];
			else
			return new Value2D._typeClass[mainType|subType](subType);
		}

		Value2D._POSITION=null
		Value2D._TEXCOORD=null
		Value2D._cache=[];
		Value2D._typeClass=[];
		Value2D.TEMPMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
		return Value2D;
	})(ShaderValue)


	//class laya.webgl.utils.RenderSprite3D extends laya.renders.RenderSprite
	var RenderSprite3D=(function(_super){
		function RenderSprite3D(type,next){
			RenderSprite3D.__super.call(this,type,next);
		}

		__class(RenderSprite3D,'laya.webgl.utils.RenderSprite3D',_super);
		var __proto=RenderSprite3D.prototype;
		__proto.onCreate=function(type){
			switch (type){
				case 0x08:
					this._fun=this._blend;
					return;
				case 0x04:
					this._fun=this._transform;
					return;
				}
		}

		__proto._mask=function(sprite,context,x,y){
			var next=this._next;
			var mask=sprite.mask;
			var submitCMD;
			var submitStencil;
			if (mask){
				context.ctx.save();
				var preBlendMode=(context.ctx).globalCompositeOperation;
				var tRect=new Rectangle();
				tRect.copyFrom(mask.getBounds());
				tRect.width=Math.round(tRect.width);
				tRect.height=Math.round(tRect.height);
				tRect.x=Math.round(tRect.x);
				tRect.y=Math.round(tRect.y);
				if (tRect.width > 0 && tRect.height > 0){
					var tf=sprite._style._tf;
					var scope=SubmitCMDScope.create();
					scope.addValue("bounds",tRect);
					submitCMD=SubmitCMD.create([scope,context],laya.webgl.utils.RenderSprite3D.tmpTarget);
					context.addRenderObject(submitCMD);
					mask.render(context,-tRect.x-tf.translateX,-tRect.y-tf.translateY);
					submitCMD=SubmitCMD.create([scope],laya.webgl.utils.RenderSprite3D.endTmpTarget);
					context.addRenderObject(submitCMD);
					context.ctx.save();
					context.clipRect(x-tf.translateX+tRect.x,y-tf.translateX+tRect.y,tRect.width,tRect.height);
					next._fun.call(next,sprite,context,x,y);
					context.ctx.restore();
					submitStencil=SubmitStencil.create(6);
					preBlendMode=(context.ctx).globalCompositeOperation;
					submitStencil.blendMode="mask";
					context.addRenderObject(submitStencil);
					Matrix.TEMP.identity();
					var shaderValue=Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0);
					var uv=Texture.INV_UV;
					var w=tRect.width;
					var h=tRect.height;
					var tempLimit=32;
					if (tRect.width < tempLimit || tRect.height < tempLimit){
						uv=RenderSprite3D.tempUV;
						uv[0]=0;
						uv[1]=0;
						uv[2]=(tRect.width >=32)? 1 :tRect.width/tempLimit;
						uv[3]=0
						uv[4]=(tRect.width >=32)? 1 :tRect.width/tempLimit;
						uv[5]=(tRect.height >=32)? 1 :tRect.height/tempLimit;
						uv[6]=0;
						uv[7]=(tRect.height >=32)? 1 :tRect.height/tempLimit;
						tRect.width=(tRect.width >=32)? tRect.width :tempLimit;
						tRect.height=(tRect.height >=32)? tRect.height :tempLimit;
						uv[1] *=-1;uv[3] *=-1;uv[5] *=-1;uv[7] *=-1;
						uv[1]+=1;uv[3]+=1;uv[5]+=1;uv[7]+=1;
					}
					(context.ctx).drawTarget(scope,x+tRect.x,y+tRect.y,w,h,Matrix.TEMP,"tmpTarget",shaderValue,uv,6);
					submitCMD=SubmitCMD.create([scope],laya.webgl.utils.RenderSprite3D.recycleTarget);
					context.addRenderObject(submitCMD);
					submitStencil=SubmitStencil.create(6);
					submitStencil.blendMode=preBlendMode;
					context.addRenderObject(submitStencil);
				}
				context.ctx.restore();
			}
			else{
				next._fun.call(next,sprite,context,x,y);
			}
		}

		__proto._blend=function(sprite,context,x,y){
			var style=sprite._style;
			var next=this._next;
			if (style.blendMode){
				context.ctx.save();
				context.ctx.globalCompositeOperation=style.blendMode;
				next._fun.call(next,sprite,context,x,y);
				context.ctx.restore();
			}
			else{
				next._fun.call(next,sprite,context,x,y);
			}
		}

		__proto._transform=function(sprite,context,x,y){
			'use strict';
			var transform=sprite.transform,_next=this._next;
			if (transform && _next !=RenderSprite.NORENDER){
				var ctx=context.ctx;
				var style=sprite._style;
				transform.tx=x;
				transform.ty=y;
				var m2=ctx._getTransformMatrix();
				var m1=m2.clone();
				Matrix.mul(transform,m2,m2);
				m2._checkTransform();
				transform.tx=transform.ty=0;
				_next._fun.call(_next,sprite,context,0,0);
				m1.copyTo(m2);
				m1.destroy();
				}else {
				_next._fun.call(_next,sprite,context,x,y);
			}
		}

		RenderSprite3D.tmpTarget=function(scope,context){
			var b=scope.getValue("bounds");
			var tmpTarget=RenderTarget2D.create(b.width,b.height);
			tmpTarget.start();
			tmpTarget.clear(0,0,0,0);
			scope.addValue("tmpTarget",tmpTarget);
		}

		RenderSprite3D.endTmpTarget=function(scope){
			var tmpTarget=scope.getValue("tmpTarget");
			tmpTarget.end();
		}

		RenderSprite3D.recycleTarget=function(scope){
			var tmpTarget=scope.getValue("tmpTarget");
			tmpTarget.recycle();
			scope.recycle();
		}

		__static(RenderSprite3D,
		['tempUV',function(){return this.tempUV=new Array(8);}
		]);
		return RenderSprite3D;
	})(RenderSprite)


	//class laya.filters.webgl.ColorFilterActionGL extends laya.filters.webgl.FilterActionGL
	var ColorFilterActionGL=(function(_super){
		function ColorFilterActionGL(){
			this.data=null;
			ColorFilterActionGL.__super.call(this);
		}

		__class(ColorFilterActionGL,'laya.filters.webgl.ColorFilterActionGL',_super);
		var __proto=ColorFilterActionGL.prototype;
		Laya.imps(__proto,{"laya.filters.IFilterActionGL":true})
		__proto.setValue=function(shader){
			shader.colorMat=this.data._mat;
			shader.colorAlpha=this.data._alpha;
		}

		__proto.apply3d=function(scope,sprite,context,x,y){
			var b=scope.getValue("bounds");
			var shaderValue=Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0);
			shaderValue.setFilters([this.data]);
			var tMatrix=Matrix.TEMP;
			tMatrix.identity();
			context.ctx.drawTarget(scope,0,0,b.width,b.height,tMatrix,"src",shaderValue);
		}

		return ColorFilterActionGL;
	})(FilterActionGL)


	//class laya.webgl.atlas.Atlaser extends laya.webgl.atlas.AtlasGrid
	var Atlaser=(function(_super){
		function Atlaser(gridNumX,gridNumY,width,height,atlasID){
			this._atlasCanvas=null;
			this._inAtlasTextureKey=null;
			this._inAtlasTextureBitmapValue=null;
			this._inAtlasTextureOriUVValue=null;
			this._InAtlasWebGLImagesKey=null;
			this._InAtlasWebGLImagesOffsetValue=null;
			Atlaser.__super.call(this,gridNumX,gridNumY,atlasID);
			this._inAtlasTextureKey=[];
			this._inAtlasTextureBitmapValue=[];
			this._inAtlasTextureOriUVValue=[];
			this._InAtlasWebGLImagesKey={};
			this._InAtlasWebGLImagesOffsetValue=[];
			this._atlasCanvas=new AtlasWebGLCanvas();
			this._atlasCanvas._atlaser=this;
			this._atlasCanvas.width=width;
			this._atlasCanvas.height=height;
			this._atlasCanvas.activeResource();
			this._atlasCanvas.lock=true;
		}

		__class(Atlaser,'laya.webgl.atlas.Atlaser',_super);
		var __proto=Atlaser.prototype;
		__proto.computeUVinAtlasTexture=function(texture,oriUV,offsetX,offsetY){
			var tex=texture;
			var _width=AtlasResourceManager.atlasTextureWidth;
			var _height=AtlasResourceManager.atlasTextureHeight;
			var u1=offsetX / _width,v1=offsetY / _height,u2=(offsetX+texture.bitmap.width)/ _width,v2=(offsetY+texture.bitmap.height)/ _height;
			var inAltasUVWidth=texture.bitmap.width / _width,inAltasUVHeight=texture.bitmap.height / _height;
			texture.uv=[u1+oriUV[0] *inAltasUVWidth,v1+oriUV[1] *inAltasUVHeight,u2-(1-oriUV[2])*inAltasUVWidth,v1+oriUV[3] *inAltasUVHeight,u2-(1-oriUV[4])*inAltasUVWidth,v2-(1-oriUV[5])*inAltasUVHeight,u1+oriUV[6] *inAltasUVWidth,v2-(1-oriUV[7])*inAltasUVHeight];
		}

		__proto.findBitmapIsExist=function(bitmap){
			if ((bitmap instanceof laya.webgl.resource.WebGLImage )){
				var webImage=bitmap;
				var sUrl=webImage.url;
				var object=this._InAtlasWebGLImagesKey[sUrl?sUrl:webImage.id]
				if (object){
					return object.offsetInfoID;
				}
			}
			return-1;
		}

		/**
		*
		*@param inAtlasRes
		*@return 是否已经存在队列中
		*/
		__proto.addToAtlasTexture=function(mergeAtlasBitmap,offsetX,offsetY){
			if ((mergeAtlasBitmap instanceof laya.webgl.resource.WebGLImage )){
				var webImage=mergeAtlasBitmap;
				var sUrl=webImage.url;
				this._InAtlasWebGLImagesKey[sUrl?sUrl:webImage.id]={bitmap:mergeAtlasBitmap,offsetInfoID:this._InAtlasWebGLImagesOffsetValue.length};
				this._InAtlasWebGLImagesOffsetValue.push([offsetX,offsetY]);
			}
			this._atlasCanvas.texSubImage2D(offsetX,offsetY,mergeAtlasBitmap.atlasSource);
			mergeAtlasBitmap.clearAtlasSource();
		}

		__proto.addToAtlas=function(texture,offsetX,offsetY){
			texture._atlasID=this._inAtlasTextureKey.length;
			var oriUV=texture.uv.slice();
			var oriBitmap=texture.bitmap;
			this._inAtlasTextureKey.push(texture);
			this._inAtlasTextureOriUVValue.push(oriUV);
			this._inAtlasTextureBitmapValue.push(oriBitmap);
			this.computeUVinAtlasTexture(texture,oriUV,offsetX,offsetY);
			texture.bitmap=this._atlasCanvas;
		}

		__proto.clear=function(){
			for (var i=0,n=this._inAtlasTextureKey.length;i < n;i++){
				this._inAtlasTextureKey[i].bitmap=this._inAtlasTextureBitmapValue[i];
				this._inAtlasTextureKey[i].uv=this._inAtlasTextureOriUVValue[i];
				this._inAtlasTextureKey[i]._atlasID=-1;
				this._inAtlasTextureKey[i].bitmap.lock=false;
				this._inAtlasTextureKey[i].bitmap.releaseResource();
			}
			this._inAtlasTextureKey.length=0;
			this._inAtlasTextureBitmapValue.length=0;
			this._inAtlasTextureOriUVValue.length=0;
			this._InAtlasWebGLImagesKey=null;
			this._InAtlasWebGLImagesOffsetValue.length=0;
		}

		__proto.dispose=function(){
			this.clear();
			this._atlasCanvas.dispose();
		}

		__getset(0,__proto,'InAtlasWebGLImagesOffsetValue',function(){
			return this._InAtlasWebGLImagesOffsetValue;
		});

		__getset(0,__proto,'texture',function(){
			return this._atlasCanvas;
		});

		__getset(0,__proto,'inAtlasWebGLImagesKey',function(){
			return this._InAtlasWebGLImagesKey;
		});

		return Atlaser;
	})(AtlasGrid)


	//class laya.webgl.shader.d2.ShaderDefines2D extends laya.webgl.shader.ShaderDefines
	var ShaderDefines2D=(function(_super){
		function ShaderDefines2D(){
			ShaderDefines2D.__super.call(this,ShaderDefines2D.__name2int,ShaderDefines2D.__int2name,ShaderDefines2D.__int2nameMap);
		}

		__class(ShaderDefines2D,'laya.webgl.shader.d2.ShaderDefines2D',_super);
		ShaderDefines2D.__init__=function(){
			ShaderDefines2D.reg("TEXTURE2D",0x01);
			ShaderDefines2D.reg("COLOR2D",0x02);
			ShaderDefines2D.reg("PRIMITIVE",0x04);
			ShaderDefines2D.reg("GLOW_FILTER",0x08);
			ShaderDefines2D.reg("BLUR_FILTER",0x10);
			ShaderDefines2D.reg("COLOR_FILTER",0x20);
			ShaderDefines2D.reg("COLOR_ADD",0x40);
			ShaderDefines2D.reg("WORLDMAT",0x80);
			ShaderDefines2D.reg("FILLTEXTURE",0x100);
			ShaderDefines2D.reg("FSHIGHPRECISION",0x400);
		}

		ShaderDefines2D.reg=function(name,value){
			ShaderDefines._reg(name,value,ShaderDefines2D.__name2int,ShaderDefines2D.__int2name);
		}

		ShaderDefines2D.toText=function(value,int2name,int2nameMap){
			return ShaderDefines._toText(value,int2name,int2nameMap);
		}

		ShaderDefines2D.toInt=function(names){
			return ShaderDefines._toInt(names,ShaderDefines2D.__name2int);
		}

		ShaderDefines2D.TEXTURE2D=0x01;
		ShaderDefines2D.COLOR2D=0x02;
		ShaderDefines2D.PRIMITIVE=0x04;
		ShaderDefines2D.FILTERGLOW=0x08;
		ShaderDefines2D.FILTERBLUR=0x10;
		ShaderDefines2D.FILTERCOLOR=0x20;
		ShaderDefines2D.COLORADD=0x40;
		ShaderDefines2D.WORLDMAT=0x80;
		ShaderDefines2D.FILLTEXTURE=0x100;
		ShaderDefines2D.SKINMESH=0x200;
		ShaderDefines2D.SHADERDEFINE_FSHIGHPRECISION=0x400;
		ShaderDefines2D.__name2int={};
		ShaderDefines2D.__int2name=[];
		ShaderDefines2D.__int2nameMap=[];
		return ShaderDefines2D;
	})(ShaderDefines)


	//class laya.webgl.shapes.Ellipse extends laya.webgl.shapes.BasePoly
	var Ellipse=(function(_super){
		function Ellipse(x,y,width,height,color,borderWidth,borderColor){
			Ellipse.__super.call(this,x,y,width,height,40,color,borderWidth,borderColor);
		}

		__class(Ellipse,'laya.webgl.shapes.Ellipse',_super);
		return Ellipse;
	})(BasePoly)


	//class laya.webgl.shapes.Line extends laya.webgl.shapes.BasePoly
	var Line=(function(_super){
		function Line(x,y,points,borderWidth,color){
			this._points=[];
			this.rebuild(points);
			Line.__super.call(this,x,y,0,0,0,color,borderWidth,color,0);
		}

		__class(Line,'laya.webgl.shapes.Line',_super);
		var __proto=Line.prototype;
		__proto.rebuild=function(points){
			var len=points.length;
			var preLen=this._points.length;
			if (len !=preLen){
				this.mUint16Array=new Uint16Array((len/2-1)*6);
				this.mFloat32Array=new Float32Array(len*5);
			}
			this._points.length=0;
			var tCurrX=NaN;
			var tCurrY=NaN;
			var tLastX=-1;
			var tLastY=-1;
			var tLen=points.length / 2;
			for (var i=0;i < tLen;i++){
				tCurrX=points[i *2];
				tCurrY=points[i *2+1];
				if (Math.abs(tLastX-tCurrX)> 0.01 || Math.abs(tLastY-tCurrY)>0.01){
					this._points.push(tCurrX,tCurrY);
				}
				tLastX=tCurrX;
				tLastY=tCurrY;
			}
		}

		__proto.getData=function(ib,vb,start){
			var indices=[];
			var verts=[];
			(this.borderWidth > 0)&& this.createLine2(this._points,indices,this.borderWidth,start,verts,this._points.length / 2);
			this.mUint16Array.set(indices,0);
			this.mFloat32Array.set(verts,0);
			ib.append(this.mUint16Array);
			vb.append(this.mFloat32Array);
		}

		return Line;
	})(BasePoly)


	//class laya.webgl.shapes.LoopLine extends laya.webgl.shapes.BasePoly
	var LoopLine=(function(_super){
		function LoopLine(x,y,points,width,color){
			this._points=[];
			var tCurrX=NaN;
			var tCurrY=NaN;
			var tLastX=-1;
			var tLastY=-1;
			var tLen=points.length / 2-1;
			for (var i=0;i < tLen;i++){
				tCurrX=points[i *2];
				tCurrY=points[i *2+1];
				if (Math.abs(tLastX-tCurrX)> 0.01 || Math.abs(tLastY-tCurrY)> 0.01){
					this._points.push(tCurrX,tCurrY);
				}
				tLastX=tCurrX;
				tLastY=tCurrY;
			}
			tCurrX=points[tLen *2];
			tCurrY=points[tLen *2+1];
			tLastX=this._points[0];
			tLastY=this._points[1];
			if (Math.abs(tLastX-tCurrX)> 0.01 || Math.abs(tLastY-tCurrY)> 0.01){
				this._points.push(tCurrX,tCurrY);
			}
			LoopLine.__super.call(this,x,y,0,0,this._points.length / 2,0,width,color);
		}

		__class(LoopLine,'laya.webgl.shapes.LoopLine',_super);
		var __proto=LoopLine.prototype;
		__proto.getData=function(ib,vb,start){
			if (this.borderWidth > 0){
				var color=this.color;
				var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
				var verts=[];
				var tLastX=-1,tLastY=-1;
				var tCurrX=0,tCurrY=0;
				var indices=[];
				var tLen=Math.floor(this._points.length / 2);
				for (var i=0;i < tLen;i++){
					tCurrX=this._points[i *2];
					tCurrY=this._points[i *2+1];
					verts.push(this.x+tCurrX,this.y+tCurrY,r,g,b);
				}
				this.createLoopLine(verts,indices,this.borderWidth,start+verts.length / 5);
				ib.append(new Uint16Array(indices));
				vb.append(new Float32Array(verts));
			}
		}

		__proto.createLoopLine=function(p,indices,lineWidth,len,outVertex,outIndex){
			var tLen=p.length / 5;
			var points=p.concat();
			var result=outVertex ? outVertex :p;
			var color=this.borderColor;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			var firstPoint=[points[0],points[1]];
			var lastPoint=[points[points.length-5],points[points.length-4]];
			var midPointX=lastPoint[0]+(firstPoint[0]-lastPoint[0])*0.5;
			var midPointY=lastPoint[1]+(firstPoint[1]-lastPoint[1])*0.5;
			points.unshift(midPointX,midPointY,0,0,0);
			points.push(midPointX,midPointY,0,0,0);
			var length=points.length / 5;
			var iStart=len,w=lineWidth / 2;
			var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
			var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
			var a1,b1,c1,a2,b2,c2;
			var denom,pdist,dist;
			p1x=points[0];
			p1y=points[1];
			p2x=points[5];
			p2y=points[6];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			result.push(p1x-perpx,p1y-perpy,r,g,b,p1x+perpx,p1y+perpy,r,g,b);
			for (var i=1;i < length-1;i++){
				p1x=points[(i-1)*5];
				p1y=points[(i-1)*5+1];
				p2x=points[(i)*5];
				p2y=points[(i)*5+1];
				p3x=points[(i+1)*5];
				p3y=points[(i+1)*5+1];
				perpx=-(p1y-p2y);
				perpy=p1x-p2x;
				dist=Math.sqrt(perpx *perpx+perpy *perpy);
				perpx=perpx / dist *w;
				perpy=perpy / dist *w;
				perp2x=-(p2y-p3y);
				perp2y=p2x-p3x;
				dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
				perp2x=perp2x / dist *w;
				perp2y=perp2y / dist *w;
				a1=(-perpy+p1y)-(-perpy+p2y);
				b1=(-perpx+p2x)-(-perpx+p1x);
				c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
				a2=(-perp2y+p3y)-(-perp2y+p2y);
				b2=(-perp2x+p2x)-(-perp2x+p3x);
				c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
				denom=a1 *b2-a2 *b1;
				if (Math.abs(denom)< 0.1){
					denom+=10.1;
					result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
					continue ;
				}
				px=(b1 *c2-b2 *c1)/ denom;
				py=(a2 *c1-a1 *c2)/ denom;
				pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
				result.push(px,py,r,g,b,p2x-(px-p2x),p2y-(py-p2y),r,g,b);
			}
			if (outIndex){
				indices=outIndex;
			};
			var groupLen=this.edges+1;
			for (i=1;i < groupLen;i++){
				indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
			}
			indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+1,iStart+1,iStart,iStart+(i-1)*2);
			return result;
		}

		return LoopLine;
	})(BasePoly)


	//class laya.webgl.shapes.Polygon extends laya.webgl.shapes.BasePoly
	var Polygon=(function(_super){
		function Polygon(x,y,points,color,borderWidth,borderColor){
			this._points=null;
			this._start=-1;
			this._repaint=false;
			this._mat=Matrix.create();
			this._points=points.slice(0,points.length);
			Polygon.__super.call(this,x,y,0,0,this._points.length / 2,color,borderWidth,borderColor);
		}

		__class(Polygon,'laya.webgl.shapes.Polygon',_super);
		var __proto=Polygon.prototype;
		__proto.rebuild=function(point){
			if (!this._repaint){
				this._points.length=0;
				this._points=this._points.concat(point);
			}
		}

		__proto.setMatrix=function(mat){
			mat.copyTo(this._mat);
		}

		__proto.needUpdate=function(mat){
			this._repaint=(this._mat.a==mat.a && this._mat.b==mat.b && this._mat.c==mat.c && this._mat.d==mat.d && this._mat.tx==mat.tx && this._mat.ty==mat.ty);
			return !this._repaint;
		}

		__proto.getData=function(ib,vb,start){
			var indices,i=0;
			var tArray=this._points;
			var tLen=0;
			if (this.mUint16Array && this.mFloat32Array&&this._repaint){
				if (this._start !=start){
					this._start=start;
					indices=[];
					tLen=Math.floor(tArray.length / 2);
					for (i=2;i < tLen;i++){
						indices.push(start,start+i-1,start+i);
					}
					this.mUint16Array=new Uint16Array(indices);
				}
			}
			else {
				this._start=start;
				indices=[];
				var verts=[];
				var color=this.color;
				var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
				tLen=Math.floor(tArray.length / 2);
				for (i=0;i < tLen;i++){
					verts.push(this.x+tArray[i *2],this.y+tArray[i *2+1],r,g,b);
				}
				for (i=2;i < tLen;i++){
					indices.push(start,start+i-1,start+i);
				}
				this.mUint16Array=new Uint16Array(indices);
				this.mFloat32Array=new Float32Array(verts);
			}
			ib.append(this.mUint16Array);
			vb.append(this.mFloat32Array);
		}

		return Polygon;
	})(BasePoly)


	//class laya.webgl.submit.SubmitCanvas extends laya.webgl.submit.Submit
	var SubmitCanvas=(function(_super){
		function SubmitCanvas(){
			//this._ctx_src=null;
			this._matrix=new Matrix();
			this._matrix4=CONST3D2D.defaultMatrix4.concat();
			SubmitCanvas.__super.call(this,/*laya.webgl.submit.Submit.TYPE_2D*/10000);
			this.shaderValue=new Value2D(0,0);
		}

		__class(SubmitCanvas,'laya.webgl.submit.SubmitCanvas',_super);
		var __proto=SubmitCanvas.prototype;
		__proto.renderSubmit=function(){
			if (this._ctx_src._targets){
				this._ctx_src._targets.flush(this._ctx_src);
				return 1;
			};
			var preAlpha=RenderState2D.worldAlpha;
			var preMatrix4=RenderState2D.worldMatrix4;
			var preMatrix=RenderState2D.worldMatrix;
			var preFilters=RenderState2D.worldFilters;
			var preWorldShaderDefines=RenderState2D.worldShaderDefines;
			var v=this.shaderValue;
			var m=this._matrix;
			var m4=this._matrix4;
			var mout=Matrix.TEMP;
			Matrix.mul(m,preMatrix,mout);
			m4[0]=mout.a;
			m4[1]=mout.b;
			m4[4]=mout.c;
			m4[5]=mout.d;
			m4[12]=mout.tx;
			m4[13]=mout.ty;
			RenderState2D.worldMatrix=mout.clone();
			RenderState2D.worldMatrix4=m4;
			RenderState2D.worldAlpha=RenderState2D.worldAlpha *v.alpha;
			if (v.filters && v.filters.length){
				RenderState2D.worldFilters=v.filters;
				RenderState2D.worldShaderDefines=v.defines;
			}
			this._ctx_src.flush();
			RenderState2D.worldAlpha=preAlpha;
			RenderState2D.worldMatrix4=preMatrix4;
			RenderState2D.worldMatrix.destroy();
			RenderState2D.worldMatrix=preMatrix;
			RenderState2D.worldFilters=preFilters;
			RenderState2D.worldShaderDefines=preWorldShaderDefines;
			return 1;
		}

		__proto.releaseRender=function(){
			var cache=SubmitCanvas._cache;
			this._ctx_src=null;
			cache[cache._length++]=this;
		}

		__proto.getRenderType=function(){
			return /*laya.webgl.submit.Submit.TYPE_CANVAS*/10003;
		}

		SubmitCanvas.create=function(ctx_src,alpha,filters){
			var o=(!SubmitCanvas._cache._length)? (new SubmitCanvas()):SubmitCanvas._cache[--SubmitCanvas._cache._length];
			o._ctx_src=ctx_src;
			var v=o.shaderValue;
			v.alpha=alpha;
			v.defines.setValue(0);
			filters && filters.length && v.setFilters(filters);
			return o;
		}

		SubmitCanvas._cache=(SubmitCanvas._cache=[],SubmitCanvas._cache._length=0,SubmitCanvas._cache);
		return SubmitCanvas;
	})(Submit)


	//class laya.webgl.submit.SubmitTexture extends laya.webgl.submit.Submit
	var SubmitTexture=(function(_super){
		function SubmitTexture(renderType){
			this._preIsSameTextureShader=false;
			this._isSameTexture=true;
			this._texs=new Array;
			this._texsID=new Array;
			this._vbPos=new Array;
			(renderType===void 0)&& (renderType=10000);
			SubmitTexture.__super.call(this,renderType);
		}

		__class(SubmitTexture,'laya.webgl.submit.SubmitTexture',_super);
		var __proto=SubmitTexture.prototype;
		__proto.releaseRender=function(){
			var cache=SubmitTexture._cache;
			cache[cache._length++]=this;
			this.shaderValue.release();
			this._preIsSameTextureShader=false;
			this._vb=null;
			this._texs.length=0;
			this._vbPos.length=0;
			this._isSameTexture=true;
		}

		__proto.addTexture=function(tex,vbpos){
			this._texsID[this._texs.length]=tex._uvID;
			this._texs.push(tex);
			this._vbPos.push(vbpos);
		}

		//检查材质是否修改，修改UV，设置是否是同一材质
		__proto.checkTexture=function(){
			if (this._texs.length < 1){
				this._isSameTexture=true;
				return;
			};
			var _tex=this.shaderValue.textureHost;
			var webGLImg=_tex.bitmap;
			if (webGLImg===null)return;
			var vbdata=this._vb.getFloat32Array();
			for (var i=0,s=this._texs.length;i < s;i++){
				var tex=this._texs[i];
				tex.active();
				var newUV=tex.uv;
				if (this._texsID[i]!==tex._uvID){
					this._texsID[i]=tex._uvID;
					var vbPos=this._vbPos[i];
					vbdata[vbPos+2]=newUV[0];
					vbdata[vbPos+3]=newUV[1];
					vbdata[vbPos+6]=newUV[2];
					vbdata[vbPos+7]=newUV[3];
					vbdata[vbPos+10]=newUV[4];
					vbdata[vbPos+11]=newUV[5];
					vbdata[vbPos+14]=newUV[6];
					vbdata[vbPos+15]=newUV[7];
					this._vb.setNeedUpload();
				}
				if (tex.bitmap!==webGLImg){
					this._isSameTexture=false;
				}
			}
		}

		__proto.renderSubmit=function(){
			if (this._numEle===0){
				SubmitTexture._shaderSet=false;
				return 1;
			};
			var _tex=this.shaderValue.textureHost;
			if (_tex){
				var source=_tex.source;
				if (!_tex.bitmap || !source){
					SubmitTexture._shaderSet=false;
					return 1;
				}
				this.shaderValue.texture=source;
			}
			this._vb.bind_upload(this._ib);
			var gl=WebGL.mainContext;
			if (BlendMode.activeBlendFunction!==this._blendFn){
				gl.enable(/*laya.webgl.WebGLContext.BLEND*/0x0BE2);
				this._blendFn(gl);
				BlendMode.activeBlendFunction=this._blendFn;
			}
			Stat.drawCall++;
			Stat.trianglesFaces+=this._numEle / 3;
			if (this._preIsSameTextureShader && BaseShader.activeShader && SubmitTexture._shaderSet)
				(BaseShader.activeShader).uploadTexture2D(this.shaderValue.texture);
			else this.shaderValue.upload();
			SubmitTexture._shaderSet=true;
			if (this._texs.length > 1 && !this._isSameTexture){
				var webGLImg=_tex.bitmap;
				var index=0;
				var shader=BaseShader.activeShader;
				for (var i=0,s=this._texs.length;i < s;i++){
					var tex2=this._texs[i];
					if (tex2.bitmap!==webGLImg || (i+1)===s){
						shader.uploadTexture2D(tex2.source);
						gl.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,(i-index+1)*6,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this._startIdx+index *6 *CONST3D2D.BYTES_PIDX);
						webGLImg=tex2.bitmap;
						index=i;
					}
				}
				}else {
				gl.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,this._numEle,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this._startIdx);
			}
			return 1;
		}

		SubmitTexture.create=function(context,ib,vb,pos,sv){
			var o=SubmitTexture._cache._length ? SubmitTexture._cache[--SubmitTexture._cache._length] :new SubmitTexture();
			if (vb==null){
				vb=o._selfVb || (o._selfVb=VertexBuffer2D.create(-1));
				vb.clear();
				pos=0;
			}
			o._ib=ib;
			o._vb=vb;
			o._startIdx=pos *CONST3D2D.BYTES_PIDX;
			o._numEle=0;
			var blendType=context._nBlendType;
			o._blendFn=context._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
			o.shaderValue=sv;
			o.shaderValue.setValue(context._shader2D);
			var filters=context._shader2D.filters;
			filters && o.shaderValue.setFilters(filters);
			return o;
		}

		SubmitTexture._cache=(SubmitTexture._cache=[],SubmitTexture._cache._length=0,SubmitTexture._cache);
		SubmitTexture._shaderSet=true;
		return SubmitTexture;
	})(Submit)


	/**
	*...
	*@author ...
	*/
	//class laya.webgl.shader.BaseShader extends laya.resource.Resource
	var BaseShader=(function(_super){
		function BaseShader(){
			BaseShader.__super.call(this);
		}

		__class(BaseShader,'laya.webgl.shader.BaseShader',_super);
		BaseShader.activeShader=null
		BaseShader.bindShader=null
		return BaseShader;
	})(Resource)


	//class laya.webgl.resource.RenderTarget2D extends laya.resource.Texture
	var RenderTarget2D=(function(_super){
		function RenderTarget2D(width,height,surfaceFormat,surfaceType,depthStencilFormat,mipMap,repeat,minFifter,magFifter){
			this._type=0;
			this._svWidth=NaN;
			this._svHeight=NaN;
			this._preRenderTarget=null;
			this._alreadyResolved=false;
			this._looked=false;
			this._surfaceFormat=0;
			this._surfaceType=0;
			this._depthStencilFormat=0;
			this._mipMap=false;
			this._repeat=false;
			this._minFifter=0;
			this._magFifter=0;
			this._destroy=false;
			(surfaceFormat===void 0)&& (surfaceFormat=/*laya.webgl.WebGLContext.RGBA*/0x1908);
			(surfaceType===void 0)&& (surfaceType=/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401);
			(depthStencilFormat===void 0)&& (depthStencilFormat=/*laya.webgl.WebGLContext.DEPTH_STENCIL*/0x84F9);
			(mipMap===void 0)&& (mipMap=false);
			(repeat===void 0)&& (repeat=false);
			(minFifter===void 0)&& (minFifter=-1);
			(magFifter===void 0)&& (magFifter=-1);
			this._type=1;
			this._w=width;
			this._h=height;
			this._surfaceFormat=surfaceFormat;
			this._surfaceType=surfaceType;
			this._depthStencilFormat=depthStencilFormat;
			this._mipMap=mipMap;
			this._repeat=repeat;
			this._minFifter=minFifter;
			this._magFifter=magFifter;
			this._createWebGLRenderTarget();
			this.bitmap.lock=true;
			RenderTarget2D.__super.call(this,this.bitmap,Texture.INV_UV);
		}

		__class(RenderTarget2D,'laya.webgl.resource.RenderTarget2D',_super);
		var __proto=RenderTarget2D.prototype;
		Laya.imps(__proto,{"laya.resource.IDispose":true})
		//TODO:临时......................................................
		__proto.getType=function(){
			return this._type;
		}

		//*/
		__proto.getTexture=function(){
			return this;
		}

		__proto.size=function(w,h){
			if (this._w==w && this._h==h)return;
			this._w=w;
			this._h=h;
			this.release();
			if (this._w !=0 && this._h !=0)this._createWebGLRenderTarget();
		}

		__proto.release=function(){
			this.destroy();
		}

		__proto.recycle=function(){
			RenderTarget2D.POOL.push(this);
		}

		__proto.start=function(){
			var gl=WebGL.mainContext;
			this._preRenderTarget=RenderState2D.curRenderTarget;
			RenderState2D.curRenderTarget=this;
			gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,this.bitmap.frameBuffer);
			this._alreadyResolved=false;
			if (this._type==1){
				gl.viewport(0,0,this._w,this._h);
				this._svWidth=RenderState2D.width;
				this._svHeight=RenderState2D.height;
				RenderState2D.width=this._w;
				RenderState2D.height=this._h;
				BaseShader.activeShader=null;
			}
			return this;
		}

		__proto.clear=function(r,g,b,a){
			(r===void 0)&& (r=0.0);
			(g===void 0)&& (g=0.0);
			(b===void 0)&& (b=0.0);
			(a===void 0)&& (a=1.0);
			var gl=WebGL.mainContext;
			gl.clearColor(r,g,b,a);
			var clearFlag=/*laya.webgl.WebGLContext.COLOR_BUFFER_BIT*/0x00004000;
			switch (this._depthStencilFormat){
				case /*laya.webgl.WebGLContext.DEPTH_COMPONENT16*/0x81A5:
					clearFlag |=/*laya.webgl.WebGLContext.DEPTH_BUFFER_BIT*/0x00000100;
					break ;
				case /*laya.webgl.WebGLContext.STENCIL_INDEX8*/0x8D48:
					clearFlag |=/*laya.webgl.WebGLContext.STENCIL_BUFFER_BIT*/0x00000400;
					break ;
				case /*laya.webgl.WebGLContext.DEPTH_STENCIL*/0x84F9:
					clearFlag |=/*laya.webgl.WebGLContext.DEPTH_BUFFER_BIT*/0x00000100;
					clearFlag |=/*laya.webgl.WebGLContext.STENCIL_BUFFER_BIT*/0x00000400
					break ;
				}
			gl.clear(clearFlag);
		}

		__proto.end=function(){
			var gl=WebGL.mainContext;
			gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,this._preRenderTarget ? this._preRenderTarget.bitmap.frameBuffer :null);
			this._alreadyResolved=true;
			RenderState2D.curRenderTarget=this._preRenderTarget;
			if (this._type==1){
				gl.viewport(0,0,this._svWidth,this._svHeight);
				RenderState2D.width=this._svWidth;
				RenderState2D.height=this._svHeight;
				BaseShader.activeShader=null;
			}else gl.viewport(0,0,Laya.stage.width,Laya.stage.height);
		}

		__proto.getData=function(x,y,width,height){
			var gl=WebGL.mainContext;
			gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,(this.bitmap).frameBuffer);
			var canRead=(gl.checkFramebufferStatus(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40)===/*laya.webgl.WebGLContext.FRAMEBUFFER_COMPLETE*/0x8CD5);
			if (!canRead){
				gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,null);
				return null;
			};
			var pixels=new Uint8Array(this._w *this._h *4);
			gl.readPixels(x,y,width,height,this._surfaceFormat,this._surfaceType,pixels);
			gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,null);
			return pixels;
		}

		/**彻底清理资源,注意会强制解锁清理*/
		__proto.destroy=function(foreDiposeTexture){
			(foreDiposeTexture===void 0)&& (foreDiposeTexture=false);
			if (!this._destroy){
				this._loaded=false;
				this.bitmap.offAll();
				this.bitmap.detoryResource();
				this.bitmap.dispose();
				this.offAll();
				this.bitmap=null;
				this._alreadyResolved=false;
				this._destroy=true;
				_super.prototype.destroy.call(this);
			}
		}

		//待测试
		__proto.dispose=function(){}
		__proto._createWebGLRenderTarget=function(){
			this.bitmap=new WebGLRenderTarget(this.width,this.height,this._surfaceFormat,this._surfaceType,this._depthStencilFormat,this._mipMap,this._repeat,this._minFifter,this._magFifter);
			this.bitmap.activeResource();
			this._alreadyResolved=true;
			this._destroy=false;
			this._loaded=true;
			this.bitmap.on(/*laya.events.Event.RECOVERED*/"recovered",this,function(e){
				this.event(/*laya.events.Event.RECOVERED*/"recovered");
			})
		}

		__getset(0,__proto,'surfaceFormat',function(){
			return this._surfaceFormat;
		});

		__getset(0,__proto,'magFifter',function(){
			return this._magFifter;
		});

		__getset(0,__proto,'surfaceType',function(){
			return this._surfaceType;
		});

		__getset(0,__proto,'mipMap',function(){
			return this._mipMap;
		});

		__getset(0,__proto,'depthStencilFormat',function(){
			return this._depthStencilFormat;
		});

		//}
		__getset(0,__proto,'minFifter',function(){
			return this._minFifter;
		});

		/**返回RenderTarget的Texture*/
		__getset(0,__proto,'source',function(){
			if (this._alreadyResolved)
				return _super.prototype._$get_source.call(this);
			return null;
		});

		RenderTarget2D.create=function(w,h,surfaceFormat,surfaceType,depthStencilFormat,mipMap,repeat,minFifter,magFifter){
			(surfaceFormat===void 0)&& (surfaceFormat=/*laya.webgl.WebGLContext.RGBA*/0x1908);
			(surfaceType===void 0)&& (surfaceType=/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401);
			(depthStencilFormat===void 0)&& (depthStencilFormat=/*laya.webgl.WebGLContext.DEPTH_STENCIL*/0x84F9);
			(mipMap===void 0)&& (mipMap=false);
			(repeat===void 0)&& (repeat=false);
			(minFifter===void 0)&& (minFifter=-1);
			(magFifter===void 0)&& (magFifter=-1);
			var t=RenderTarget2D.POOL.pop();
			t || (t=new RenderTarget2D(w,h));
			if (!t.bitmap || t._w !=w || t._h !=h || t._surfaceFormat !=surfaceFormat || t._surfaceType !=surfaceType || t._depthStencilFormat !=depthStencilFormat || t._mipMap !=mipMap || t._repeat !=repeat || t._minFifter !=minFifter || t._magFifter !=magFifter){
				t._w=w;
				t._h=h;
				t._surfaceFormat=surfaceFormat;
				t._surfaceType=surfaceType;
				t._depthStencilFormat=depthStencilFormat;
				t._mipMap=mipMap;
				t._repeat=repeat;
				t._minFifter=minFifter;
				t._magFifter=magFifter;
				t.release();
				t._createWebGLRenderTarget();
			}
			return t;
		}

		RenderTarget2D.TYPE2D=1;
		RenderTarget2D.TYPE3D=2;
		RenderTarget2D.POOL=[];
		return RenderTarget2D;
	})(Texture)


	//class laya.webgl.utils.Buffer extends laya.resource.Resource
	var Buffer=(function(_super){
		function Buffer(){
			this._glBuffer=null;
			this._buffer=null;
			this._bufferType=0;
			this._bufferUsage=0;
			this._byteLength=0;
			Buffer.__super.call(this);
			Buffer._gl=WebGL.mainContext;
		}

		__class(Buffer,'laya.webgl.utils.Buffer',_super);
		var __proto=Buffer.prototype;
		__proto._bind=function(){
			this.activeResource();
			if (Buffer._bindActive[this._bufferType]!==this._glBuffer){
				(this._bufferType===/*laya.webgl.WebGLContext.ARRAY_BUFFER*/0x8892)&& (Buffer._bindVertexBuffer=this._glBuffer);
				Buffer._gl.bindBuffer(this._bufferType,Buffer._bindActive[this._bufferType]=this._glBuffer);
				BaseShader.activeShader=null;
			}
		}

		__proto.recreateResource=function(){
			this._glBuffer || (this._glBuffer=Buffer._gl.createBuffer());
			this.completeCreate();
		}

		__proto.detoryResource=function(){
			if (this._glBuffer){
				WebGL.mainContext.deleteBuffer(this._glBuffer);
				this._glBuffer=null;
			}
			this.memorySize=0;
		}

		__getset(0,__proto,'bufferUsage',function(){
			return this._bufferUsage;
		});

		Buffer._gl=null
		Buffer._bindActive={};
		Buffer._bindVertexBuffer=null
		Buffer._enableAtributes=[];
		return Buffer;
	})(Resource)


	//class laya.webgl.shader.d2.skinAnishader.SkinSV extends laya.webgl.shader.d2.value.Value2D
	var SkinSV=(function(_super){
		function SkinSV(type){
			this.texcoord=null;
			this.offsetX=300;
			this.offsetY=0;
			SkinSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.SKINMESH*/0x200,0);
			var _vlen=8 *CONST3D2D.BYTES_PE;
			this.position=[2,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,_vlen,0];
			this.texcoord=[2,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,_vlen,2 *CONST3D2D.BYTES_PE];
			this.color=[4,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,_vlen,4 *CONST3D2D.BYTES_PE];
		}

		__class(SkinSV,'laya.webgl.shader.d2.skinAnishader.SkinSV',_super);
		return SkinSV;
	})(Value2D)


	//class laya.webgl.shader.d2.value.Color2dSV extends laya.webgl.shader.d2.value.Value2D
	var Color2dSV=(function(_super){
		function Color2dSV(args){
			Color2dSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.COLOR2D*/0x02,0);
			this.color=[];
		}

		__class(Color2dSV,'laya.webgl.shader.d2.value.Color2dSV',_super);
		var __proto=Color2dSV.prototype;
		__proto.setValue=function(value){
			value.fillStyle&&(this.color=value.fillStyle._color._color);
			value.strokeStyle&&(this.color=value.strokeStyle._color._color);
		}

		return Color2dSV;
	})(Value2D)


	//class laya.webgl.shader.d2.value.FillTextureSV extends laya.webgl.shader.d2.value.Value2D
	var FillTextureSV=(function(_super){
		function FillTextureSV(type){
			this.u_colorMatrix=null;
			this.strength=0;
			this.colorMat=null;
			this.colorAlpha=null;
			this.u_TexRange=[0,1,0,1];
			this.u_offset=[0,0];
			this.texcoord=Value2D._TEXCOORD;
			FillTextureSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.FILLTEXTURE*/0x100,0);
		}

		__class(FillTextureSV,'laya.webgl.shader.d2.value.FillTextureSV',_super);
		var __proto=FillTextureSV.prototype;
		//this.color=[4,WebGLContext.FLOAT,false,_vlen,4 *CONST3D2D.BYTES_PE];
		__proto.setValue=function(vo){
			this.ALPHA=vo.ALPHA;
			vo.filters && this.setFilters(vo.filters);
		}

		__proto.clear=function(){
			this.texture=null;
			this.shader=null;
			this.defines.setValue(0);
		}

		return FillTextureSV;
	})(Value2D)


	//class laya.webgl.shader.d2.value.TextureSV extends laya.webgl.shader.d2.value.Value2D
	var TextureSV=(function(_super){
		function TextureSV(subID){
			this.u_colorMatrix=null;
			this.strength=0;
			this.blurInfo=null;
			this.colorMat=null;
			this.colorAlpha=null;
			this.texcoord=Value2D._TEXCOORD;
			(subID===void 0)&& (subID=0);
			TextureSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,subID);
		}

		__class(TextureSV,'laya.webgl.shader.d2.value.TextureSV',_super);
		var __proto=TextureSV.prototype;
		__proto.setValue=function(vo){
			this.ALPHA=vo.ALPHA;
			vo.filters && this.setFilters(vo.filters);
		}

		__proto.clear=function(){
			this.texture=null;
			this.shader=null;
			this.defines.setValue(0);
		}

		return TextureSV;
	})(Value2D)


	//class laya.webgl.shader.d2.value.PrimitiveSV extends laya.webgl.shader.d2.value.Value2D
	var PrimitiveSV=(function(_super){
		function PrimitiveSV(args){
			this.a_color=null;
			this.u_pos=[0,0];
			PrimitiveSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.PRIMITIVE*/0x04,0);
			this.position=[2,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,5 *CONST3D2D.BYTES_PE,0];
			this.a_color=[3,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,5 *CONST3D2D.BYTES_PE,2 *CONST3D2D.BYTES_PE];
		}

		__class(PrimitiveSV,'laya.webgl.shader.d2.value.PrimitiveSV',_super);
		return PrimitiveSV;
	})(Value2D)


	//class laya.webgl.atlas.AtlasWebGLCanvas extends laya.resource.Bitmap
	var AtlasWebGLCanvas=(function(_super){
		function AtlasWebGLCanvas(){
			this._atlaser=null;
			this._flashCacheImage=null;
			this._flashCacheImageNeedFlush=false;
			AtlasWebGLCanvas.__super.call(this);
		}

		__class(AtlasWebGLCanvas,'laya.webgl.atlas.AtlasWebGLCanvas',_super);
		var __proto=AtlasWebGLCanvas.prototype;
		/***重新创建资源*/
		__proto.recreateResource=function(){
			var gl=WebGL.mainContext;
			var glTex=this._source=gl.createTexture();
			var preTarget=WebGLContext.curBindTexTarget;
			var preTexture=WebGLContext.curBindTexValue;
			WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,glTex);
			gl.texImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,this._w,this._h,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,null);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
			(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
			this.memorySize=this._w *this._h *4;
			this.completeCreate();
		}

		/***销毁资源*/
		__proto.detoryResource=function(){
			if (this._source){
				WebGL.mainContext.deleteTexture(this._source);
				this._source=null;
				this.memorySize=0;
			}
		}

		/**采样image到WebGLTexture的一部分*/
		__proto.texSubImage2D=function(xoffset,yoffset,bitmap){
			if (!Render.isFlash){
				var gl=WebGL.mainContext;
				var preTarget=WebGLContext.curBindTexTarget;
				var preTexture=WebGLContext.curBindTexValue;
				WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,this._source);
				gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,true);
				(xoffset-1 >=0)&& (gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset-1,yoffset,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap));
				(xoffset+1 <=this._w)&& (gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset+1,yoffset,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap));
				(yoffset-1 >=0)&& (gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset-1,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap));
				(yoffset+1 <=this._h)&& (gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset+1,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap));
				gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,bitmap);
				gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,false);
				(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
				}else {
				if (!this._flashCacheImage){
					this._flashCacheImage=HTMLImage.create("");
					this._flashCacheImage._image.createCanvas(this._w,this._h);
				};
				var bmData=bitmap.bitmapdata;
				this._flashCacheImage._image.copyPixels(bmData,0,0,bmData.width,bmData.height,xoffset,yoffset);
				(this._flashCacheImageNeedFlush)|| (this._flashCacheImageNeedFlush=true);
			}
		}

		/**采样image到WebGLTexture的一部分*/
		__proto.texSubImage2DPixel=function(xoffset,yoffset,width,height,pixel){
			var gl=WebGL.mainContext;
			var preTarget=WebGLContext.curBindTexTarget;
			var preTexture=WebGLContext.curBindTexValue;
			WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,this._source);
			var pixels=new Uint8Array(pixel.data);
			gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,true);
			gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset,width,height,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,pixels);
			gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,false);
			(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
		}

		/***
		*设置图片宽度
		*@param value 图片宽度
		*/
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			this._w=value;
		});

		/***
		*设置图片高度
		*@param value 图片高度
		*/
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			this._h=value;
		});

		return AtlasWebGLCanvas;
	})(Bitmap)


	//class laya.webgl.resource.WebGLCanvas extends laya.resource.Bitmap
	var WebGLCanvas=(function(_super){
		function WebGLCanvas(){
			//this._ctx=null;
			//this._canvas=null;
			//this.iscpuSource=false;
			WebGLCanvas.__super.call(this);
		}

		__class(WebGLCanvas,'laya.webgl.resource.WebGLCanvas',_super);
		var __proto=WebGLCanvas.prototype;
		//}
		__proto.getCanvas=function(){
			return this._canvas;
		}

		__proto.clear=function(){
			this._ctx && this._ctx.clear();
		}

		__proto.destroy=function(){
			this._ctx && this._ctx.destroy();
			this._ctx=null;
		}

		__proto._setContext=function(context){
			this._ctx=context;
		}

		__proto.getContext=function(contextID,other){
			return this._ctx ? this._ctx :(this._ctx=WebGLCanvas._createContext(this));
		}

		/*override public function copyTo(dec:Bitmap):void {
		super.copyTo(dec);
		(dec as WebGLCanvas)._ctx=_ctx;
	}*/


	__proto.size=function(w,h){
		if (this._w !=w || this._h !=h){
			this._w=w;
			this._h=h;
			this._ctx && this._ctx.size(w,h);
			this._canvas && (this._canvas.height=h,this._canvas.width=w);
		}

	}


	__proto.recreateResource=function(){
		this.createWebGlTexture();
		this.completeCreate();
	}


	__proto.detoryResource=function(){
		if (this._source && !this.iscpuSource){
			WebGL.mainContext.deleteTexture(this._source);
			this._source=null;
			this.memorySize=0;
		}

	}


	__proto.createWebGlTexture=function(){
		var gl=WebGL.mainContext;
		if (!this._canvas){
			throw "create GLTextur err:no data:"+this._canvas;
		};

		var glTex=this._source=gl.createTexture();
		this.iscpuSource=false;
		var preTarget=WebGLContext.curBindTexTarget;
		var preTexture=WebGLContext.curBindTexValue;
		WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,glTex);
		gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,true);
		gl.texImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,this._canvas);
		gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,false);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,/*laya.webgl.WebGLContext.LINEAR*/0x2601);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,/*laya.webgl.WebGLContext.LINEAR*/0x2601);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
		gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
		this.memorySize=this._w *this._h *4;
		(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
	}


	//_canvas=null;
	__proto.texSubImage2D=function(webglCanvas,xoffset,yoffset){
		var gl=WebGL.mainContext;
		var preTarget=WebGLContext.curBindTexTarget;
		var preTexture=WebGLContext.curBindTexValue;
		WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,this._source);
		gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,true);
		gl.texSubImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,xoffset,yoffset,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,webglCanvas._source);
		gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,false);
		(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
	}


	__getset(0,__proto,'context',function(){
		return this._ctx;
	});


	__getset(0,__proto,'asBitmap',null,function(value){
		this._ctx && (this._ctx.asBitmap=value);
	});


	WebGLCanvas._createContext=null
	return WebGLCanvas;
	})(Bitmap)


	//class laya.webgl.resource.WebGLCharImage extends laya.resource.Bitmap
	var WebGLCharImage=(function(_super){
		function WebGLCharImage(content,drawValue){
			this.CborderSize=12;
			//this._ctx=null;
			//this._allowMerageInAtlas=false;
			//this._enableMerageInAtlas=false;
			//this.canvas=null;
			//this.cw=NaN;
			//this.ch=NaN;
			//this.xs=NaN;
			//this.ys=NaN;
			//this.char=null;
			//this.fillColor=null;
			//this.borderColor=null;
			//this.borderSize=0;
			//this.font=null;
			//this.fontSize=0;
			//this.texture=null;
			//this.lineWidth=0;
			//this.UV=null;
			//this.isSpace=false;
			//this.underLine=0;
			WebGLCharImage.__super.call(this);
			this.char=content;
			this.isSpace=content===' ';
			this.xs=drawValue.scaleX;
			this.ys=drawValue.scaleY;
			this.font=drawValue.font.toString();
			this.fontSize=drawValue.font.size;
			this.fillColor=drawValue.fillColor;
			this.borderColor=drawValue.borderColor;
			this.lineWidth=drawValue.lineWidth;
			this.underLine=drawValue.underLine;
			var bIsConchApp=Render.isConchApp;
			var pCanvas;
			if (bIsConchApp){
				/*__JS__ */pCanvas=ConchTextCanvas;
				/*__JS__ */pCanvas._source=ConchTextCanvas;
				/*__JS__ */pCanvas._source.canvas=ConchTextCanvas;
				}else {
				pCanvas=Browser.canvas.source;
			}
			this.canvas=pCanvas;
			this._enableMerageInAtlas=true;
			if (bIsConchApp){
				/*__JS__ */this._ctx=pCanvas;
				}else {
				this._ctx=this.canvas.getContext('2d',undefined);
			};
			var t=Utils.measureText(this.char,this.font);
			this.cw=t.width *this.xs;
			this.ch=(t.height || this.fontSize)*this.ys;
			this.onresize(this.cw+this.CborderSize *2,this.ch+this.CborderSize *2);
			this.texture=new Texture(this);
		}

		__class(WebGLCharImage,'laya.webgl.resource.WebGLCharImage',_super);
		var __proto=WebGLCharImage.prototype;
		Laya.imps(__proto,{"laya.webgl.resource.IMergeAtlasBitmap":true})
		__proto.active=function(){
			this.texture.active();
		}

		__proto.recreateResource=function(){
			var bIsConchApp=Render.isConchApp;
			this.onresize(this.cw+this.CborderSize *2,this.ch+this.CborderSize *2);
			this.canvas && (this.canvas.height=this._h,this.canvas.width=this._w);
			if (bIsConchApp){
				var nFontSize=this.fontSize;
				if (this.xs !=1 || this.ys !=1){
					nFontSize=parseInt(nFontSize *((this.xs > this.ys)? this.xs :this.ys)+"");
				};
				var sFont="normal 100 "+nFontSize+"px Arial";
				if (this.borderColor){
					sFont+=" 1 "+this.borderColor;
				}
				this._ctx.font=sFont;
				this._ctx.textBaseline="top";
				this._ctx.fillStyle=this.fillColor;
				this._ctx.fillText(this.char,this.CborderSize,this.CborderSize,null,null,null);
				}else {
				this._ctx.save();
				(this._ctx).clearRect(0,0,this.cw+this.CborderSize *2,this.ch+this.CborderSize *2);
				this._ctx.font=this.font;
				this._ctx.textBaseline="top";
				this._ctx.translate(this.CborderSize,this.CborderSize);
				if (this.xs !=1 || this.ys !=1){
					this._ctx.scale(this.xs,this.ys);
				}
				if (this.fillColor && this.borderColor){
					this._ctx.strokeStyle=this.borderColor;
					this._ctx.lineWidth=this.lineWidth;
					this._ctx.strokeText(this.char,0,0,null,null,0,null);
					this._ctx.fillStyle=this.fillColor;
					this._ctx.fillText(this.char,0,0,null,null,null);
					}else {
					if (this.lineWidth===-1){
						this._ctx.fillStyle=this.fillColor ? this.fillColor :"white";
						this._ctx.fillText(this.char,0,0,null,null,null);
						}else {
						this._ctx.strokeStyle=this.borderColor?this.borderColor:'white';
						this._ctx.lineWidth=this.lineWidth;
						this._ctx.strokeText(this.char,0,0,null,null,0,null);
					}
				}
				if (this.underLine){
					this._ctx.lineWidth=1;
					this._ctx.strokeStyle=this.fillColor;
					this._ctx.beginPath();
					this._ctx.moveTo(0,this.fontSize+1);
					var nW=this._ctx.measureText(this.char).width+1;
					this._ctx.lineTo(nW,this.fontSize+1);
					this._ctx.stroke();
				}
				this._ctx.restore();
			}
			this.borderSize=this.CborderSize;
			this.completeCreate();
		}

		__proto.onresize=function(w,h){
			this._w=w;
			this._h=h;
			if ((this._w < AtlasResourceManager.atlasLimitWidth && this._h < AtlasResourceManager.atlasLimitHeight)){
				this._allowMerageInAtlas=true
				}else {
				this._allowMerageInAtlas=false;
				throw new Error("文字尺寸超出大图合集限制！");
			}
		}

		__proto.clearAtlasSource=function(){}
		/**
		*是否创建私有Source
		*@return 是否创建
		*/
		__getset(0,__proto,'allowMerageInAtlas',function(){
			return this._allowMerageInAtlas;
		});

		__getset(0,__proto,'atlasSource',function(){
			return this.canvas;
		});

		/**
		*是否创建私有Source,通常禁止修改
		*@param value 是否创建
		*/
		/**
		*是否创建私有Source
		*@return 是否创建
		*/
		__getset(0,__proto,'enableMerageInAtlas',function(){
			return this._enableMerageInAtlas;
			},function(value){
			this._enableMerageInAtlas=value;
		});

		WebGLCharImage.createOneChar=function(content,drawValue){
			var char=new WebGLCharImage(content,drawValue);
			return char;
		}

		return WebGLCharImage;
	})(Bitmap)


	//class laya.webgl.resource.WebGLRenderTarget extends laya.resource.Bitmap
	var WebGLRenderTarget=(function(_super){
		function WebGLRenderTarget(width,height,surfaceFormat,surfaceType,depthStencilFormat,mipMap,repeat,minFifter,magFifter){
			//this._frameBuffer=null;
			//this._depthStencilBuffer=null;
			//this._surfaceFormat=0;
			//this._surfaceType=0;
			//this._depthStencilFormat=0;
			//this._mipMap=false;
			//this._repeat=false;
			//this._minFifter=0;
			//this._magFifter=0;
			(surfaceFormat===void 0)&& (surfaceFormat=/*laya.webgl.WebGLContext.RGBA*/0x1908);
			(surfaceType===void 0)&& (surfaceType=/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401);
			(depthStencilFormat===void 0)&& (depthStencilFormat=/*laya.webgl.WebGLContext.DEPTH_STENCIL*/0x84F9);
			(mipMap===void 0)&& (mipMap=false);
			(repeat===void 0)&& (repeat=false);
			(minFifter===void 0)&& (minFifter=-1);
			(magFifter===void 0)&& (magFifter=1);
			WebGLRenderTarget.__super.call(this);
			this._w=width;
			this._h=height;
			this._surfaceFormat=surfaceFormat;
			this._surfaceType=surfaceType;
			this._depthStencilFormat=depthStencilFormat;
			this._mipMap=mipMap;
			this._repeat=repeat;
			this._minFifter=minFifter;
			this._magFifter=magFifter;
		}

		__class(WebGLRenderTarget,'laya.webgl.resource.WebGLRenderTarget',_super);
		var __proto=WebGLRenderTarget.prototype;
		__proto.recreateResource=function(){
			var gl=WebGL.mainContext;
			this._frameBuffer || (this._frameBuffer=gl.createFramebuffer());
			this._source || (this._source=gl.createTexture());
			var preTarget=WebGLContext.curBindTexTarget;
			var preTexture=WebGLContext.curBindTexValue;
			WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,this._source);
			gl.texImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,this._w,this._h,0,this._surfaceFormat,this._surfaceType,null);
			var minFifter=this._minFifter;
			var magFifter=this._magFifter;
			var repeat=this._repeat ? /*laya.webgl.WebGLContext.REPEAT*/0x2901 :/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F;
			var isPot=Arith.isPOT(this._w,this._h);
			if (isPot){
				if (this._mipMap)
					(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR_MIPMAP_LINEAR*/0x2703);
				else
				(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
				(magFifter!==-1)|| (magFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
				gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,minFifter);
				gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,magFifter);
				gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,repeat);
				gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,repeat);
				this._mipMap && gl.generateMipmap(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1);
				}else {
				(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
				(magFifter!==-1)|| (magFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
				gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,minFifter);
				gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,magFifter);
				gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
				gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
			}
			gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,this._frameBuffer);
			gl.framebufferTexture2D(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,/*laya.webgl.WebGLContext.COLOR_ATTACHMENT0*/0x8CE0,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,this._source,0);
			if (this._depthStencilFormat){
				this._depthStencilBuffer || (this._depthStencilBuffer=gl.createRenderbuffer());
				gl.bindRenderbuffer(/*laya.webgl.WebGLContext.RENDERBUFFER*/0x8D41,this._depthStencilBuffer);
				gl.renderbufferStorage(/*laya.webgl.WebGLContext.RENDERBUFFER*/0x8D41,this._depthStencilFormat,this._w,this._h);
				switch (this._depthStencilFormat){
					case /*laya.webgl.WebGLContext.DEPTH_COMPONENT16*/0x81A5:
						gl.framebufferRenderbuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,/*laya.webgl.WebGLContext.DEPTH_ATTACHMENT*/0x8D00,/*laya.webgl.WebGLContext.RENDERBUFFER*/0x8D41,this._depthStencilBuffer);
						break ;
					case /*laya.webgl.WebGLContext.STENCIL_INDEX8*/0x8D48:
						gl.framebufferRenderbuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,/*laya.webgl.WebGLContext.STENCIL_ATTACHMENT*/0x8D20,/*laya.webgl.WebGLContext.RENDERBUFFER*/0x8D41,this._depthStencilBuffer);
						break ;
					case /*laya.webgl.WebGLContext.DEPTH_STENCIL*/0x84F9:
						gl.framebufferRenderbuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,/*laya.webgl.WebGLContext.DEPTH_STENCIL_ATTACHMENT*/0x821A,/*laya.webgl.WebGLContext.RENDERBUFFER*/0x8D41,this._depthStencilBuffer);
						break ;
					}
			}
			gl.bindFramebuffer(/*laya.webgl.WebGLContext.FRAMEBUFFER*/0x8D40,null);
			(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
			gl.bindRenderbuffer(/*laya.webgl.WebGLContext.RENDERBUFFER*/0x8D41,null);
			this.memorySize=this._w *this._h *4;
			this.completeCreate();
		}

		__proto.detoryResource=function(){
			if (this._frameBuffer){
				WebGL.mainContext.deleteTexture(this._source);
				WebGL.mainContext.deleteFramebuffer(this._frameBuffer);
				WebGL.mainContext.deleteRenderbuffer(this._depthStencilBuffer);
				this._source=null;
				this._frameBuffer=null;
				this._depthStencilBuffer=null;
				this.memorySize=0;
			}
		}

		__getset(0,__proto,'depthStencilBuffer',function(){
			return this._depthStencilBuffer;
		});

		__getset(0,__proto,'frameBuffer',function(){
			return this._frameBuffer;
		});

		return WebGLRenderTarget;
	})(Bitmap)


	//class laya.webgl.resource.WebGLSubImage extends laya.resource.Bitmap
	var WebGLSubImage=(function(_super){
		function WebGLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src){
			//this._ctx=null;
			//this._allowMerageInAtlas=false;
			//this._enableMerageInAtlas=false;
			//this.canvas=null;
			//this.repeat=false;
			//this.mipmap=false;
			//this.minFifter=0;
			//this.magFifter=0;
			//this.atlasImage=null;
			this.offsetX=0;
			this.offsetY=0;
			//this.src=null;
			WebGLSubImage.__super.call(this);
			this.repeat=true;
			this.mipmap=false;
			this.minFifter=-1;
			this.magFifter=-1;
			this.atlasImage=atlasImage;
			this.canvas=canvas;
			this._ctx=canvas.getContext('2d',undefined);
			this._w=width;
			this._h=height;
			this.offsetX=offsetX;
			this.offsetY=offsetY;
			this.src=src;
			this._enableMerageInAtlas=true;
			(AtlasResourceManager.enabled)&& (this._w < AtlasResourceManager.atlasLimitWidth && this._h < AtlasResourceManager.atlasLimitHeight)? this._allowMerageInAtlas=true :this._allowMerageInAtlas=false;
		}

		__class(WebGLSubImage,'laya.webgl.resource.WebGLSubImage',_super);
		var __proto=WebGLSubImage.prototype;
		Laya.imps(__proto,{"laya.webgl.resource.IMergeAtlasBitmap":true})
		/*override public function copyTo(dec:Bitmap):void {
		var d:WebGLSubImage=dec as WebGLSubImage;
		super.copyTo(dec);
		d._ctx=_ctx;
	}*/


	__proto.size=function(w,h){
		this._w=w;
		this._h=h;
		this._ctx && this._ctx.size(w,h);
		this.canvas && (this.canvas.height=h,this.canvas.width=w);
	}


	__proto.recreateResource=function(){
		this.size(this._w,this._h);
		this._ctx.drawImage(this.atlasImage,this.offsetX,this.offsetY,this._w,this._h,0,0,this._w,this._h);
		(!(this._allowMerageInAtlas && this._enableMerageInAtlas))? (this.createWebGlTexture()):(this.memorySize=0);
		this.completeCreate();
	}


	__proto.createWebGlTexture=function(){
		var gl=WebGL.mainContext;
		if (!this.canvas){
			throw "create GLTextur err:no data:"+this.canvas;
		};

		var glTex=this._source=gl.createTexture();
		var preTarget=WebGLContext.curBindTexTarget;
		var preTexture=WebGLContext.curBindTexValue;
		WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,glTex);
		gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,true);
		gl.texImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,this.canvas);
		gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,false);
		var minFifter=this.minFifter;
		var magFifter=this.magFifter;
		var repeat=this.repeat ? /*laya.webgl.WebGLContext.REPEAT*/0x2901 :/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F;
		var isPOT=Arith.isPOT(this.width,this.height);
		if (isPOT){
			if (this.mipmap)
				(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR_MIPMAP_LINEAR*/0x2703);
			else
			(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			(magFifter!==-1)|| (magFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,magFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,minFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,repeat);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,repeat);
			this.mipmap && gl.generateMipmap(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1);
			}else {
			(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			(magFifter!==-1)|| (magFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,minFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,magFifter);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
			gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
		}

		(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
		this.canvas=null;
		this.memorySize=this._w *this._h *4;
	}


	__proto.detoryResource=function(){
		if (!(AtlasResourceManager.enabled && this._allowMerageInAtlas)&& this._source){
			WebGL.mainContext.deleteTexture(this._source);
			this._source=null;
			this.memorySize=0;
		}

	}


	//}
	__proto.clearAtlasSource=function(){}
	/**
	*是否创建私有Source
	*@return 是否创建
	*/
	__getset(0,__proto,'allowMerageInAtlas',function(){
		return this._allowMerageInAtlas;
	});


	//public var createFromPixel:Boolean=true;
	__getset(0,__proto,'atlasSource',function(){
		return this.canvas;
	});


	/**
	*是否创建私有Source,通常禁止修改
	*@param value 是否创建
	*/
	/**
	*是否创建私有Source
	*@return 是否创建
	*/
	__getset(0,__proto,'enableMerageInAtlas',function(){
		return this._allowMerageInAtlas;
		},function(value){

		this._allowMerageInAtlas=value;
	});


	return WebGLSubImage;
	})(Bitmap)


	//class laya.webgl.shader.Shader extends laya.webgl.shader.BaseShader
	var Shader=(function(_super){
		function Shader(vs,ps,saveName,nameMap){
			this.customCompile=false;
			//this._nameMap=null;
			//this._vs=null;
			//this._ps=null;
			this._curActTexIndex=0;
			//this._reCompile=false;
			this.tag={};
			//this._vshader=null;
			//this._pshader=null;
			this._program=null;
			this._params=null;
			this._paramsMap={};
			this._offset=0;
			//this._id=0;
			Shader.__super.call(this);
			if ((!vs)|| (!ps))throw "Shader Error";
			if (Render.isConchApp || Render.isFlash){
				this.customCompile=true;
			}
			this._id=++Shader._count;
			this._vs=vs;
			this._ps=ps;
			this._nameMap=nameMap ? nameMap :{};
			saveName !=null && (Shader.sharders[saveName]=this);
		}

		__class(Shader,'laya.webgl.shader.Shader',_super);
		var __proto=Shader.prototype;
		__proto.recreateResource=function(){
			this._compile();
			this.completeCreate();
			this.memorySize=0;
		}

		//忽略尺寸尺寸
		__proto.detoryResource=function(){
			WebGL.mainContext.deleteShader(this._vshader);
			WebGL.mainContext.deleteShader(this._pshader);
			WebGL.mainContext.deleteProgram(this._program);
			this._vshader=this._pshader=this._program=null;
			this._params=null;
			this._paramsMap={};
			this.memorySize=0;
			this._curActTexIndex=0;
		}

		__proto._compile=function(){
			if (!this._vs || !this._ps || this._params)
				return;
			this._reCompile=true;
			this._params=[];
			var text=[this._vs,this._ps];
			var result;
			if (this.customCompile)
				result=this._preGetParams(this._vs,this._ps);
			var gl=WebGL.mainContext;
			this._program=gl.createProgram();
			this._vshader=Shader._createShader(gl,text[0],/*laya.webgl.WebGLContext.VERTEX_SHADER*/0x8B31);
			this._pshader=Shader._createShader(gl,text[1],/*laya.webgl.WebGLContext.FRAGMENT_SHADER*/0x8B30);
			gl.attachShader(this._program,this._vshader);
			gl.attachShader(this._program,this._pshader);
			gl.linkProgram(this._program);
			if (!this.customCompile && !gl.getProgramParameter(this._program,/*laya.webgl.WebGLContext.LINK_STATUS*/0x8B82)){
				throw gl.getProgramInfoLog(this._program);
			};
			var one,i=0,j=0,n=0,location;
			var attribNum=this.customCompile ? result.attributes.length :gl.getProgramParameter(this._program,/*laya.webgl.WebGLContext.ACTIVE_ATTRIBUTES*/0x8B89);
			for (i=0;i < attribNum;i++){
				var attrib=this.customCompile ? result.attributes[i] :gl.getActiveAttrib(this._program,i);
				location=gl.getAttribLocation(this._program,attrib.name);
				one={vartype:"attribute",ivartype:0,attrib:attrib,location:location,name:attrib.name,type:attrib.type,isArray:false,isSame:false,preValue:null,indexOfParams:0};
				this._params.push(one);
			};
			var nUniformNum=this.customCompile ? result.uniforms.length :gl.getProgramParameter(this._program,/*laya.webgl.WebGLContext.ACTIVE_UNIFORMS*/0x8B86);
			for (i=0;i < nUniformNum;i++){
				var uniform=this.customCompile ? result.uniforms[i] :gl.getActiveUniform(this._program,i);
				location=gl.getUniformLocation(this._program,uniform.name);
				one={vartype:"uniform",ivartype:1,attrib:attrib,location:location,name:uniform.name,type:uniform.type,isArray:false,isSame:false,preValue:null,indexOfParams:0};
				if (one.name.indexOf('[0]')> 0){
					one.name=one.name.substr(0,one.name.length-3);
					one.isArray=true;
					one.location=gl.getUniformLocation(this._program,one.name);
				}
				this._params.push(one);
			}
			for (i=0,n=this._params.length;i < n;i++){
				one=this._params[i];
				one.indexOfParams=i;
				one.index=1;
				one.value=[one.location,null];
				one.codename=one.name;
				one.name=this._nameMap[one.codename] ? this._nameMap[one.codename] :one.codename;
				this._paramsMap[one.name]=one;
				one._this=this;
				one.uploadedValue=[];
				if (one.vartype==="attribute"){
					one.fun=this._attribute;
					continue ;
				}
				switch (one.type){
					case /*laya.webgl.WebGLContext.INT*/0x1404:
						one.fun=one.isArray ? this._uniform1iv :this._uniform1i;
						break ;
					case /*laya.webgl.WebGLContext.FLOAT*/0x1406:
						one.fun=one.isArray ? this._uniform1fv :this._uniform1f;
						break ;
					case /*laya.webgl.WebGLContext.FLOAT_VEC2*/0x8B50:
						one.fun=one.isArray ? this._uniform_vec2v:this._uniform_vec2;
						break ;
					case /*laya.webgl.WebGLContext.FLOAT_VEC3*/0x8B51:
						one.fun=one.isArray ? this._uniform_vec3v:this._uniform_vec3;
						break ;
					case /*laya.webgl.WebGLContext.FLOAT_VEC4*/0x8B52:
						one.fun=one.isArray ? this._uniform_vec4v:this._uniform_vec4;
						break ;
					case /*laya.webgl.WebGLContext.SAMPLER_2D*/0x8B5E:
						one.fun=this._uniform_sampler2D;
						break ;
					case /*laya.webgl.WebGLContext.SAMPLER_CUBE*/0x8B60:
						one.fun=this._uniform_samplerCube;
						break ;
					case /*laya.webgl.WebGLContext.FLOAT_MAT4*/0x8B5C:
						one.fun=this._uniformMatrix4fv;
						break ;
					case /*laya.webgl.WebGLContext.BOOL*/0x8B56:
						one.fun=this._uniform1i;
						break ;
					case /*laya.webgl.WebGLContext.FLOAT_MAT2*/0x8B5A:
					case /*laya.webgl.WebGLContext.FLOAT_MAT3*/0x8B5B:
						throw new Error("compile shader err!");
						break ;
					default :
						throw new Error("compile shader err!");
						break ;
					}
			}
		}

		/**
		*根据变量名字获得
		*@param name
		*@return
		*/
		__proto.getUniform=function(name){
			return this._paramsMap[name];
		}

		__proto._attribute=function(one,value){
			var gl=WebGL.mainContext;
			var enableAtributes=Buffer._enableAtributes;
			var location=one.location;
			(enableAtributes[location])||(gl.enableVertexAttribArray(location));
			gl.vertexAttribPointer(location,value[0],value[1],value[2],value[3],value[4]+this._offset);
			enableAtributes[location]=Buffer._bindVertexBuffer;
			return 1;
		}

		__proto._uniform1f=function(one,value){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value){
				WebGL.mainContext.uniform1f(one.location,uploadedValue[0]=value);
				return 1;
			}
			return 0;
		}

		__proto._uniform1fv=function(one,value){
			if (value.length < 4){
				var uploadedValue=one.uploadedValue;
				if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
					WebGL.mainContext.uniform1fv(one.location,value);
					uploadedValue[0]=value[0];
					uploadedValue[1]=value[1];
					uploadedValue[2]=value[2];
					uploadedValue[3]=value[3];
					return 1;
				}
				return 0;
				}else {
				WebGL.mainContext.uniform1fv(one.location,value);
				return 1;
			}
		}

		__proto._uniform_vec2=function(one,value){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1]){
				WebGL.mainContext.uniform2f(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1]);
				return 1;
			}
			return 0;
		}

		__proto._uniform_vec2v=function(one,value){
			if (value.length < 2){
				var uploadedValue=one.uploadedValue;
				if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
					WebGL.mainContext.uniform2fv(one.location,value);
					uploadedValue[0]=value[0];
					uploadedValue[1]=value[1];
					uploadedValue[2]=value[2];
					uploadedValue[3]=value[3];
					return 1;
				}
				return 0;
				}else {
				WebGL.mainContext.uniform2fv(one.location,value);
				return 1;
			}
		}

		__proto._uniform_vec3=function(one,value){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2]){
				WebGL.mainContext.uniform3f(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2]);
				return 1;
			}
			return 0;
		}

		__proto._uniform_vec3v=function(one,value){
			WebGL.mainContext.uniform3fv(one.location,value);
			return 1;
		}

		__proto._uniform_vec4=function(one,value){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
				WebGL.mainContext.uniform4f(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2],uploadedValue[3]=value[3]);
				return 1;
			}
			return 0;
		}

		__proto._uniform_vec4v=function(one,value){
			WebGL.mainContext.uniform4fv(one.location,value);
			return 1;
		}

		__proto._uniformMatrix2fv=function(one,value){
			WebGL.mainContext.uniformMatrix2fv(one.location,false,value);
			return 1;
		}

		__proto._uniformMatrix3fv=function(one,value){
			WebGL.mainContext.uniformMatrix3fv(one.location,false,value);
			return 1;
		}

		__proto._uniformMatrix4fv=function(one,value){
			WebGL.mainContext.uniformMatrix4fv(one.location,false,value);
			return 1;
		}

		__proto._uniform1i=function(one,value){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value){
				WebGL.mainContext.uniform1i(one.location,uploadedValue[0]=value);
				return 1;
			}
			return 0;
		}

		__proto._uniform1iv=function(one,value){
			WebGL.mainContext.uniform1iv(one.location,value);
			return 1;
		}

		__proto._uniform_ivec2=function(one,value){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1]){
				WebGL.mainContext.uniform2i(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1]);
				return 1;
			}
			return 0;
		}

		__proto._uniform_ivec2v=function(one,value){
			WebGL.mainContext.uniform2iv(one.location,value);
			return 1;
		}

		__proto._uniform_vec3i=function(one,value){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2]){
				WebGL.mainContext.uniform3i(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2]);
				return 1;
			}
			return 0;
		}

		__proto._uniform_vec3vi=function(one,value){
			WebGL.mainContext.uniform3iv(one.location,value);
			return 1;
		}

		__proto._uniform_vec4i=function(one,value){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
				WebGL.mainContext.uniform4i(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2],uploadedValue[3]=value[3]);
				return 1;
			}
			return 0;
		}

		__proto._uniform_vec4vi=function(one,value){
			WebGL.mainContext.uniform4iv(one.location,value);
			return 1;
		}

		__proto._uniform_sampler2D=function(one,value){
			var gl=WebGL.mainContext;
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]==null){
				uploadedValue[0]=this._curActTexIndex;
				gl.uniform1i(one.location,this._curActTexIndex);
				gl.activeTexture(Shader._TEXTURES[this._curActTexIndex]);
				WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,value);
				this._curActTexIndex++;
				return 1;
				}else {
				gl.activeTexture(Shader._TEXTURES[uploadedValue[0]]);
				WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,value);
				return 0;
			}
		}

		__proto._uniform_samplerCube=function(one,value){
			var gl=WebGL.mainContext;
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]==null){
				uploadedValue[0]=this._curActTexIndex;
				gl.uniform1i(one.location,this._curActTexIndex);
				gl.activeTexture(Shader._TEXTURES[this._curActTexIndex]);
				WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_CUBE_MAP*/0x8513,value);
				this._curActTexIndex++;
				return 1;
				}else {
				gl.activeTexture(Shader._TEXTURES[uploadedValue[0]]);
				WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_CUBE_MAP*/0x8513,value);
				return 0;
			}
		}

		__proto._noSetValue=function(one){
			console.log("no....:"+one.name);
		}

		//throw new Error("upload shader err,must set value:"+one.name);
		__proto.uploadOne=function(name,value){
			this.activeResource();
			WebGLContext.UseProgram(this._program);
			var one=this._paramsMap[name];
			one.fun.call(this,one,value);
		}

		__proto.uploadTexture2D=function(value){
			Stat.shaderCall++;
			var gl=WebGL.mainContext;
			gl.activeTexture(/*laya.webgl.WebGLContext.TEXTURE0*/0x84C0);
			WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,value);
		}

		/**
		*提交shader到GPU
		*@param shaderValue
		*/
		__proto.upload=function(shaderValue,params){
			BaseShader.activeShader=this;
			BaseShader.bindShader=this;
			this.activeResource();
			WebGLContext.UseProgram(this._program);
			if (this._reCompile){
				params=this._params;
				this._reCompile=false;
				}else {
				params=params || this._params;
			};
			var one,value,n=params.length,shaderCall=0;
			for (var i=0;i < n;i++){
				one=params[i];
				((value=shaderValue[one.name])!==null)&& (shaderCall+=one.fun.call(this,one,value));
			}
			Stat.shaderCall+=shaderCall;
		}

		/**
		*按数组的定义提交
		*@param shaderValue 数组格式[name,value,...]
		*/
		__proto.uploadArray=function(shaderValue,length,_bufferUsage){
			BaseShader.activeShader=this;
			BaseShader.bindShader=this;
			this.activeResource();
			WebGLContext.UseProgram(this._program);
			var params=this._params,value;
			var one,shaderCall=0;
			for (var i=length-2;i >=0;i-=2){
				one=this._paramsMap[shaderValue[i]];
				if (!one)
					continue ;
				value=shaderValue[i+1];
				if (value !=null){
					_bufferUsage && _bufferUsage[one.name] && _bufferUsage[one.name].bind();
					shaderCall+=one.fun.call(this,one,value);
				}
			}
			Stat.shaderCall+=shaderCall;
		}

		/**
		*得到编译后的变量及相关预定义
		*@return
		*/
		__proto.getParams=function(){
			return this._params;
		}

		__proto._preGetParams=function(vs,ps){
			var text=[vs,ps];
			var result={};
			var attributes=[];
			var uniforms=[];
			var definesInfo={};
			var definesName=[];
			result.attributes=attributes;
			result.uniforms=uniforms;
			result.defines=definesInfo;
			var removeAnnotation=new RegExp("(/\\*([^*]|[\\r\\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+/)|(//.*)","g");
			var reg=new RegExp("(\".*\")|('.*')|([#\\w\\*-\\.+/()=<>{}\\\\]+)|([,;:\\\\])","g");
			var i=0,n=0,one;
			for (var s=0;s < 2;s++){
				text[s]=text[s].replace(removeAnnotation,"");
				var words=text[s].match(reg);
				var tempelse;
				for (i=0,n=words.length;i < n;i++){
					var word=words[i];
					if (word !="attribute" && word !="uniform"){
						if (word=="#define"){
							word=words[++i];
							definesName[word]=1;
							continue ;
							}else if (word=="#ifdef"){
							tempelse=words[++i];
							var def=definesInfo[tempelse]=definesInfo[tempelse] || [];
							for (i++;i < n;i++){
								word=words[i];
								if (word !="attribute" && word !="uniform"){
									if (word=="#else"){
										for (i++;i < n;i++){
											word=words[i];
											if (word !="attribute" && word !="uniform"){
												if (word=="#endif"){
													break ;
												}
												continue ;
											}
											i=this.parseOne(attributes,uniforms,words,i,word,!definesName[tempelse]);
										}
									}
									continue ;
								}
								i=this.parseOne(attributes,uniforms,words,i,word,definesName[tempelse]);
							}
						}
						continue ;
					}
					i=this.parseOne(attributes,uniforms,words,i,word,true);
				}
			}
			return result;
		}

		__proto.parseOne=function(attributes,uniforms,words,i,word,b){
			var one={type:Shader.shaderParamsMap[words[i+1]],name:words[i+2],size:isNaN(parseInt(words[i+3]))? 1 :parseInt(words[i+3])};
			if (b){
				if (word=="attribute"){
					attributes.push(one);
					}else {
					uniforms.push(one);
				}
			}
			if (words[i+3]==':'){
				one.type=words[i+4];
				i+=2;
			}
			i+=2;
			return i;
		}

		Shader.getShader=function(name){
			return Shader.sharders[name];
		}

		Shader.create=function(vs,ps,saveName,nameMap){
			return new Shader(vs,ps,saveName,nameMap);
		}

		Shader.withCompile=function(nameID,define,shaderName,createShader){
			if (shaderName && Shader.sharders[shaderName])
				return Shader.sharders[shaderName];
			var pre=Shader._preCompileShader[0.0002 *nameID];
			if (!pre)
				throw new Error("withCompile shader err!"+nameID);
			return pre.createShader(define,shaderName,createShader);
		}

		Shader.withCompile2D=function(nameID,mainID,define,shaderName,createShader){
			if (shaderName && Shader.sharders[shaderName])
				return Shader.sharders[shaderName];
			var pre=Shader._preCompileShader[0.0002 *nameID+mainID];
			if (!pre)
				throw new Error("withCompile shader err!"+nameID+" "+mainID);
			return pre.createShader(define,shaderName,createShader);
		}

		Shader.addInclude=function(fileName,txt){
			if (!txt || txt.length===0)
				throw new Error("add shader include file err:"+fileName);
			if (Shader._includeFiles[fileName])
				throw new Error("add shader include file err, has add:"+fileName);
			Shader._includeFiles[fileName]=txt;
		}

		Shader.preCompile=function(nameID,vs,ps,nameMap){
			var id=0.0002 *nameID;
			Shader._preCompileShader[id]=new ShaderCompile(id,vs,ps,nameMap,Shader._includeFiles);
		}

		Shader.preCompile2D=function(nameID,mainID,vs,ps,nameMap){
			var id=0.0002 *nameID+mainID;
			Shader._preCompileShader[id]=new ShaderCompile(id,vs,ps,nameMap,Shader._includeFiles);
		}

		Shader._createShader=function(gl,str,type){
			var shader=gl.createShader(type);
			gl.shaderSource(shader,str);
			gl.compileShader(shader);
			return shader;
		}

		Shader._TEXTURES=[ /*laya.webgl.WebGLContext.TEXTURE0*/0x84C0,/*laya.webgl.WebGLContext.TEXTURE1*/0x84C1,/*laya.webgl.WebGLContext.TEXTURE2*/0x84C2,/*laya.webgl.WebGLContext.TEXTURE3*/0x84C3,/*laya.webgl.WebGLContext.TEXTURE4*/0x84C4,/*laya.webgl.WebGLContext.TEXTURE5*/0x84C5,/*laya.webgl.WebGLContext.TEXTURE6*/0x84C6,,/*laya.webgl.WebGLContext.TEXTURE7*/0x84C7,/*laya.webgl.WebGLContext.TEXTURE8*/0x84C8];
		Shader._includeFiles={};
		Shader._count=0;
		Shader._preCompileShader={};
		Shader.SHADERNAME2ID=0.0002;
		Shader.sharders=(Shader.sharders=[],Shader.sharders.length=0x20,Shader.sharders);
		__static(Shader,
		['shaderParamsMap',function(){return this.shaderParamsMap={"float":/*laya.webgl.WebGLContext.FLOAT*/0x1406,"int":/*laya.webgl.WebGLContext.INT*/0x1404,"bool":/*laya.webgl.WebGLContext.BOOL*/0x8B56,"vec2":/*laya.webgl.WebGLContext.FLOAT_VEC2*/0x8B50,"vec3":/*laya.webgl.WebGLContext.FLOAT_VEC3*/0x8B51,"vec4":/*laya.webgl.WebGLContext.FLOAT_VEC4*/0x8B52,"ivec2":/*laya.webgl.WebGLContext.INT_VEC2*/0x8B53,"ivec3":/*laya.webgl.WebGLContext.INT_VEC3*/0x8B54,"ivec4":/*laya.webgl.WebGLContext.INT_VEC4*/0x8B55,"bvec2":/*laya.webgl.WebGLContext.BOOL_VEC2*/0x8B57,"bvec3":/*laya.webgl.WebGLContext.BOOL_VEC3*/0x8B58,"bvec4":/*laya.webgl.WebGLContext.BOOL_VEC4*/0x8B59,"mat2":/*laya.webgl.WebGLContext.FLOAT_MAT2*/0x8B5A,"mat3":/*laya.webgl.WebGLContext.FLOAT_MAT3*/0x8B5B,"mat4":/*laya.webgl.WebGLContext.FLOAT_MAT4*/0x8B5C,"sampler2D":/*laya.webgl.WebGLContext.SAMPLER_2D*/0x8B5E,"samplerCube":/*laya.webgl.WebGLContext.SAMPLER_CUBE*/0x8B60};},'nameKey',function(){return this.nameKey=new StringKey();}
		]);
		return Shader;
	})(BaseShader)


	//class laya.webgl.utils.Buffer2D extends laya.webgl.utils.Buffer
	var Buffer2D=(function(_super){
		function Buffer2D(){
			this._maxsize=0;
			this._upload=true;
			this._uploadSize=0;
			Buffer2D.__super.call(this);
			this.lock=true;
		}

		__class(Buffer2D,'laya.webgl.utils.Buffer2D',_super);
		var __proto=Buffer2D.prototype;
		__proto._bufferData=function(){
			this._maxsize=Math.max(this._maxsize,this._byteLength);
			if (Stat.loopCount % 30==0){
				if (this._buffer.byteLength > (this._maxsize+64)){
					this.memorySize=this._buffer.byteLength;
					this._buffer=this._buffer.slice(0,this._maxsize+64);
					this._checkArrayUse();
				}
				this._maxsize=this._byteLength;
			}
			if (this._uploadSize < this._buffer.byteLength){
				this._uploadSize=this._buffer.byteLength;
				Buffer._gl.bufferData(this._bufferType,this._uploadSize,this._bufferUsage);
				this.memorySize=this._uploadSize;
			}
			Buffer._gl.bufferSubData(this._bufferType,0,this._buffer);
		}

		__proto._bufferSubData=function(offset,dataStart,dataLength){
			(offset===void 0)&& (offset=0);
			(dataStart===void 0)&& (dataStart=0);
			(dataLength===void 0)&& (dataLength=0);
			this._maxsize=Math.max(this._maxsize,this._byteLength);
			if (Stat.loopCount % 30==0){
				if (this._buffer.byteLength > (this._maxsize+64)){
					this.memorySize=this._buffer.byteLength;
					this._buffer=this._buffer.slice(0,this._maxsize+64);
					this._checkArrayUse();
				}
				this._maxsize=this._byteLength;
			}
			if (this._uploadSize < this._buffer.byteLength){
				this._uploadSize=this._buffer.byteLength;
				Buffer._gl.bufferData(this._bufferType,this._uploadSize,this._bufferUsage);
				this.memorySize=this._uploadSize;
			}
			if (dataStart || dataLength){
				var subBuffer=this._buffer.slice(dataStart,dataLength);
				Buffer._gl.bufferSubData(this._bufferType,offset,subBuffer);
				}else {
				Buffer._gl.bufferSubData(this._bufferType,offset,this._buffer);
			}
		}

		__proto._checkArrayUse=function(){}
		__proto._bind_upload=function(){
			if (!this._upload)
				return false;
			this._upload=false;
			this._bind();
			this._bufferData();
			return true;
		}

		__proto._bind_subUpload=function(offset,dataStart,dataLength){
			(offset===void 0)&& (offset=0);
			(dataStart===void 0)&& (dataStart=0);
			(dataLength===void 0)&& (dataLength=0);
			if (!this._upload)
				return false;
			this._upload=false;
			this._bind();
			this._bufferSubData(offset,dataStart,dataLength);
			return true;
		}

		__proto._resizeBuffer=function(nsz,copy){
			if (nsz < this._buffer.byteLength)
				return this;
			this.memorySize=nsz;
			if (copy && this._buffer && this._buffer.byteLength > 0){
				var newbuffer=new ArrayBuffer(nsz);
				var n=new Uint8Array(newbuffer);
				n.set(new Uint8Array(this._buffer),0);
				this._buffer=newbuffer;
			}else
			this._buffer=new ArrayBuffer(nsz);
			this._checkArrayUse();
			this._upload=true;
			return this;
		}

		__proto.append=function(data){
			this._upload=true;
			var byteLen=0,n;
			byteLen=data.byteLength;
			if ((data instanceof Uint8Array)){
				this._resizeBuffer(this._byteLength+byteLen,true);
				n=new Uint8Array(this._buffer,this._byteLength);
				}else if ((data instanceof Uint16Array)){
				this._resizeBuffer(this._byteLength+byteLen,true);
				n=new Uint16Array(this._buffer,this._byteLength);
				}else if ((data instanceof Float32Array)){
				this._resizeBuffer(this._byteLength+byteLen,true);
				n=new Float32Array(this._buffer,this._byteLength);
			}
			n.set(data,0);
			this._byteLength+=byteLen;
			this._checkArrayUse();
		}

		__proto.appendEx=function(data,type){
			this._upload=true;
			var byteLen=0,n;
			byteLen=data.byteLength;
			this._resizeBuffer(this._byteLength+byteLen,true);
			n=new type(this._buffer,this._byteLength);
			n.set(data,0);
			this._byteLength+=byteLen;
			this._checkArrayUse();
		}

		__proto.appendEx2=function(data,type,dataLen,perDataLen){
			(perDataLen===void 0)&& (perDataLen=1);
			this._upload=true;
			var byteLen=0,n;
			byteLen=dataLen*perDataLen;
			this._resizeBuffer(this._byteLength+byteLen,true);
			n=new type(this._buffer,this._byteLength);
			var i=0;
			for (i=0;i < dataLen;i++){
				n[i]=data[i];
			}
			this._byteLength+=byteLen;
			this._checkArrayUse();
		}

		__proto.getBuffer=function(){
			return this._buffer;
		}

		__proto.setNeedUpload=function(){
			this._upload=true;
		}

		__proto.getNeedUpload=function(){
			return this._upload;
		}

		__proto.upload=function(){
			var scuess=this._bind_upload();
			Buffer._gl.bindBuffer(this._bufferType,null);
			Buffer._bindActive[this._bufferType]=null;
			BaseShader.activeShader=null
			return scuess;
		}

		__proto.subUpload=function(offset,dataStart,dataLength){
			(offset===void 0)&& (offset=0);
			(dataStart===void 0)&& (dataStart=0);
			(dataLength===void 0)&& (dataLength=0);
			var scuess=this._bind_subUpload();
			Buffer._gl.bindBuffer(this._bufferType,null);
			Buffer._bindActive[this._bufferType]=null;
			BaseShader.activeShader=null
			return scuess;
		}

		__proto.detoryResource=function(){
			_super.prototype.detoryResource.call(this);
			this._upload=true;
			this._uploadSize=0;
		}

		__proto.clear=function(){
			this._byteLength=0;
			this._upload=true;
		}

		__getset(0,__proto,'bufferLength',function(){
			return this._buffer.byteLength;
		});

		__getset(0,__proto,'byteLength',null,function(value){
			if (this._byteLength===value)
				return;
			value <=this._buffer.byteLength || (this._resizeBuffer(value *2+256,true));
			this._byteLength=value;
		});

		Buffer2D.__int__=function(gl){
			IndexBuffer2D.QuadrangleIB=IndexBuffer2D.create(/*laya.webgl.WebGLContext.STATIC_DRAW*/0x88E4);
			GlUtils.fillIBQuadrangle(IndexBuffer2D.QuadrangleIB,16);
		}

		Buffer2D.FLOAT32=4;
		Buffer2D.SHORT=2;
		return Buffer2D;
	})(Buffer)


	//class laya.webgl.shader.d2.value.GlowSV extends laya.webgl.shader.d2.value.TextureSV
	var GlowSV=(function(_super){
		function GlowSV(args){
			this.u_blurX=false;
			this.u_color=null;
			this.u_offset=null;
			this.u_strength=NaN;
			this.u_texW=0;
			this.u_texH=0;
			GlowSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.FILTERGLOW*/0x08| /*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01);
		}

		__class(GlowSV,'laya.webgl.shader.d2.value.GlowSV',_super);
		var __proto=GlowSV.prototype;
		__proto.setValue=function(vo){
			_super.prototype.setValue.call(this,vo);
		}

		__proto.clear=function(){
			_super.prototype.clear.call(this);
		}

		return GlowSV;
	})(TextureSV)


	//class laya.webgl.shader.d2.value.TextSV extends laya.webgl.shader.d2.value.TextureSV
	var TextSV=(function(_super){
		function TextSV(args){
			TextSV.__super.call(this,/*laya.webgl.shader.d2.ShaderDefines2D.COLORADD*/0x40);
			this.defines.add(/*laya.webgl.shader.d2.ShaderDefines2D.COLORADD*/0x40);
		}

		__class(TextSV,'laya.webgl.shader.d2.value.TextSV',_super);
		var __proto=TextSV.prototype;
		__proto.release=function(){
			TextSV.pool[TextSV._length++]=this;
			this.clear();
		}

		__proto.clear=function(){
			_super.prototype.clear.call(this);
		}

		TextSV.create=function(){
			if (TextSV._length)return TextSV.pool[--TextSV._length];
			else return new TextSV(null);
		}

		TextSV.pool=[];
		TextSV._length=0;
		return TextSV;
	})(TextureSV)


	//class laya.webgl.shader.d2.Shader2X extends laya.webgl.shader.Shader
	var Shader2X=(function(_super){
		function Shader2X(vs,ps,saveName,nameMap){
			this._params2dQuick1=null;
			this._params2dQuick2=null;
			this._shaderValueWidth=NaN;
			this._shaderValueHeight=NaN;
			Shader2X.__super.call(this,vs,ps,saveName,nameMap);
		}

		__class(Shader2X,'laya.webgl.shader.d2.Shader2X',_super);
		var __proto=Shader2X.prototype;
		__proto.upload2dQuick1=function(shaderValue){
			this.upload(shaderValue,this._params2dQuick1 || this._make2dQuick1());
		}

		__proto._make2dQuick1=function(){
			if (!this._params2dQuick1){
				this.activeResource();
				this._params2dQuick1=[];
				var params=this._params,one;
				for (var i=0,n=params.length;i < n;i++){
					one=params[i];
					if (!Render.isFlash && (one.name==="size" || one.name==="position" || one.name==="texcoord"))continue ;
					this._params2dQuick1.push(one);
				}
			}
			return this._params2dQuick1;
		}

		__proto.detoryResource=function(){
			_super.prototype.detoryResource.call(this);
			this._params2dQuick1=null;
			this._params2dQuick2=null;
		}

		__proto.upload2dQuick2=function(shaderValue){
			this.upload(shaderValue,this._params2dQuick2 || this._make2dQuick2());
		}

		__proto._make2dQuick2=function(){
			if (!this._params2dQuick2){
				this.activeResource();
				this._params2dQuick2=[];
				var params=this._params,one;
				for (var i=0,n=params.length;i < n;i++){
					one=params[i];
					if (!Render.isFlash && (one.name==="size"))continue ;
					this._params2dQuick2.push(one);
				}
			}
			return this._params2dQuick2;
		}

		Shader2X.create=function(vs,ps,saveName,nameMap){
			return new Shader2X(vs,ps,saveName,nameMap);
		}

		return Shader2X;
	})(Shader)


	//class laya.webgl.utils.IndexBuffer2D extends laya.webgl.utils.Buffer2D
	var IndexBuffer2D=(function(_super){
		function IndexBuffer2D(bufferUsage){
			this._uint8Array=null;
			this._uint16Array=null;
			(bufferUsage===void 0)&& (bufferUsage=/*laya.webgl.WebGLContext.STATIC_DRAW*/0x88E4);
			IndexBuffer2D.__super.call(this);
			this._bufferUsage=bufferUsage;
			this._bufferType=/*laya.webgl.WebGLContext.ELEMENT_ARRAY_BUFFER*/0x8893;
			Render.isFlash || (this._buffer=new ArrayBuffer(8));
		}

		__class(IndexBuffer2D,'laya.webgl.utils.IndexBuffer2D',_super);
		var __proto=IndexBuffer2D.prototype;
		__proto._checkArrayUse=function(){
			this._uint8Array && (this._uint8Array=new Uint8Array(this._buffer));
			this._uint16Array && (this._uint16Array=new Uint16Array(this._buffer));
		}

		__proto.getUint8Array=function(){
			return this._uint8Array || (this._uint8Array=new Uint8Array(this._buffer));
		}

		__proto.getUint16Array=function(){
			return this._uint16Array || (this._uint16Array=new Uint16Array(this._buffer));
		}

		__proto.destory=function(){
			this._uint16Array=null;
			this._uint8Array=null;
			this._buffer=null;
		}

		IndexBuffer2D.QuadrangleIB=null
		IndexBuffer2D.create=function(bufferUsage){
			(bufferUsage===void 0)&& (bufferUsage=/*laya.webgl.WebGLContext.STATIC_DRAW*/0x88E4);
			return new IndexBuffer2D(bufferUsage);
		}

		return IndexBuffer2D;
	})(Buffer2D)


	//class laya.webgl.utils.VertexBuffer2D extends laya.webgl.utils.Buffer2D
	var VertexBuffer2D=(function(_super){
		function VertexBuffer2D(vertexStride,bufferUsage){
			this._floatArray32=null;
			this._vertexStride=0;
			VertexBuffer2D.__super.call(this);
			this._vertexStride=vertexStride;
			this._bufferUsage=bufferUsage;
			this._bufferType=/*laya.webgl.WebGLContext.ARRAY_BUFFER*/0x8892;
			Render.isFlash || (this._buffer=new ArrayBuffer(8));
			this.getFloat32Array();
		}

		__class(VertexBuffer2D,'laya.webgl.utils.VertexBuffer2D',_super);
		var __proto=VertexBuffer2D.prototype;
		__proto.getFloat32Array=function(){
			return this._floatArray32 || (this._floatArray32=new Float32Array(this._buffer));
		}

		__proto.bind=function(ibBuffer){
			(ibBuffer)&& (ibBuffer._bind());
			this._bind();
		}

		__proto.insertData=function(data,pos){
			var vbdata=this.getFloat32Array();
			vbdata.set(data,pos);
			this._upload=true;
		}

		__proto.bind_upload=function(ibBuffer){
			(ibBuffer._bind_upload())|| (ibBuffer._bind());
			(this._bind_upload())|| (this._bind());
		}

		__proto._checkArrayUse=function(){
			this._floatArray32 && (this._floatArray32=new Float32Array(this._buffer));
		}

		__proto.detoryResource=function(){
			_super.prototype.detoryResource.call(this);
			var enableAtributes=Buffer._enableAtributes;
			for (var i=0;i < 10;i++){
				WebGL.mainContext.disableVertexAttribArray(i);
				enableAtributes[i]=null;
			}
		}

		//}
		__proto.destory=function(){
			this._byteLength=0;
			this._upload=true;
			this._buffer=null;
			this._floatArray32=null;
		}

		__getset(0,__proto,'vertexStride',function(){
			return this._vertexStride;
		});

		VertexBuffer2D.create=function(vertexStride,bufferUsage){
			(bufferUsage===void 0)&& (bufferUsage=/*laya.webgl.WebGLContext.DYNAMIC_DRAW*/0x88E8);
			return new VertexBuffer2D(vertexStride,bufferUsage);
		}

		return VertexBuffer2D;
	})(Buffer2D)


	//class laya.webgl.resource.WebGLImage extends laya.resource.HTMLImage
	var WebGLImage=(function(_super){
		function WebGLImage(data,def,format,mipmap){
			this._format=0;
			this._mipmap=false;
			this._allowMerageInAtlas=false;
			this._enableMerageInAtlas=false;
			this.repeat=false;
			this._image=null;
			this.minFifter=0;
			this.magFifter=0;
			(format===void 0)&& (format=/*laya.webgl.WebGLContext.RGBA*/0x1908);
			(mipmap===void 0)&& (mipmap=true);
			WebGLImage.__super.call(this,data,def);
			this._format=format;
			this._mipmap=mipmap;
			this.repeat=false;
			this.minFifter=-1;
			this.magFifter=-1;
			if ((typeof data=='string')){
				this.url=data;
				this._src=data;
				this._image=new Browser.window.Image();
				if (def){
					def.onload && (this.onload=def.onload);
					def.onerror && (this.onerror=def.onerror);
					def.onCreate && def.onCreate(this);
				}
				this._image.crossOrigin=(data && (data.indexOf("data:")==0))? null :"";
				(data)&& (this._image.src=data);
				}else if ((data instanceof ArrayBuffer)){
				this._src=def;
				this.url=this._src;
				var readData=new Byte(data);
				var magicNumber=readData.readUTFBytes(4);
				var version=readData.readUTFBytes(2);
				var dataType=readData.getInt16();
				readData.endian=/*laya.utils.Byte.BIG_ENDIAN*/"bigEndian";
				this._w=readData.getInt16();
				this._h=readData.getInt16();
				var originalWidth=readData.getInt16();
				var originalHeight=readData.getInt16();
				this._image=new Uint8Array(data,readData.pos);
				this._format=WebGL.compressEtc1.COMPRESSED_RGB_ETC1_WEBGL;
				(AtlasResourceManager.enabled)&& (this._w < AtlasResourceManager.atlasLimitWidth && this._h < AtlasResourceManager.atlasLimitHeight)? this._allowMerageInAtlas=true :this._allowMerageInAtlas=false;
				}else {
				this._src=def;
				this.url=this._src;
				this._image=data["source"] || data;
				this.onresize();
			}
			this._enableMerageInAtlas=true;
		}

		__class(WebGLImage,'laya.webgl.resource.WebGLImage',_super);
		var __proto=WebGLImage.prototype;
		Laya.imps(__proto,{"laya.webgl.resource.IMergeAtlasBitmap":true})
		__proto._init_=function(src,def){}
		__proto._createWebGlTexture=function(){
			if (!this._image){
				throw "create GLTextur err:no data:"+this._image;
			};
			var gl=WebGL.mainContext;
			var glTex=this._source=gl.createTexture();
			var preTarget=WebGLContext.curBindTexTarget;
			var preTexture=WebGLContext.curBindTexValue;
			WebGLContext.bindTexture(gl,/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,glTex);
			gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,true);
			switch (this._format){
				case /*laya.webgl.WebGLContext.RGBA*/0x1908:
					gl.texImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,this._format,/*laya.webgl.WebGLContext.RGBA*/0x1908,/*laya.webgl.WebGLContext.UNSIGNED_BYTE*/0x1401,this._image);
					break ;
				case WebGL.compressEtc1.COMPRESSED_RGB_ETC1_WEBGL:
					gl.compressedTexImage2D(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,0,this._format,this._w,this._h,0,this._image);
					break ;
				}
			gl.pixelStorei(/*laya.webgl.WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL*/0x9241,false);
			var minFifter=this.minFifter;
			var magFifter=this.magFifter;
			var repeat=this.repeat ? /*laya.webgl.WebGLContext.REPEAT*/0x2901 :/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F;
			var isPot=Arith.isPOT(this._w,this._h);
			if (isPot){
				if (this.mipmap)
					(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR_MIPMAP_LINEAR*/0x2703);
				else
				(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
				(magFifter!==-1)|| (magFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
				gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,minFifter);
				gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,magFifter);
				gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,repeat);
				gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,repeat);
				this.mipmap && gl.generateMipmap(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1);
				}else {
				(minFifter!==-1)|| (minFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
				(magFifter!==-1)|| (magFifter=/*laya.webgl.WebGLContext.LINEAR*/0x2601);
				gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MIN_FILTER*/0x2801,minFifter);
				gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_MAG_FILTER*/0x2800,magFifter);
				gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_S*/0x2802,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
				gl.texParameteri(/*laya.webgl.WebGLContext.TEXTURE_2D*/0x0DE1,/*laya.webgl.WebGLContext.TEXTURE_WRAP_T*/0x2803,/*laya.webgl.WebGLContext.CLAMP_TO_EDGE*/0x812F);
			}
			(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
			this._image.onload=null;
			this._image=null;
			if (isPot)
				this.memorySize=this._w *this._h *4 *(1+1 / 3);
			else
			this.memorySize=this._w *this._h *4;
			this._recreateLock=false;
		}

		/***重新创建资源，如果异步创建中被强制释放再创建，则需等待释放完成后再重新加载创建。*/
		__proto.recreateResource=function(){
			var _$this=this;
			if (this._src==null || this._src==="")
				return;
			this._needReleaseAgain=false;
			if (!this._image){
				this._recreateLock=true;
				var _this=this;
				this._image=new Browser.window.Image();
				this._image.crossOrigin=this._src.indexOf("data:")==0 ? null :"";
				this._image.onload=function (){
					if (_this._needReleaseAgain){
						_this._needReleaseAgain=false;
						_this._image.onload=null;
						_this._image=null;
						return;
					}
					(!(_this._allowMerageInAtlas && _this._enableMerageInAtlas))? (_this._createWebGlTexture()):(_$this.memorySize=0,_$this._recreateLock=false);
					_this.completeCreate();
				};
				this._image.src=this._src;
				}else {
				if (this._recreateLock){
					return;
				}
				(!(this._allowMerageInAtlas && this._enableMerageInAtlas))? (this._createWebGlTexture()):(this.memorySize=0,this._recreateLock=false);
				this.completeCreate();
			}
		}

		/***销毁资源*/
		__proto.detoryResource=function(){
			if (this._recreateLock){
				this._needReleaseAgain=true;
			}
			if (this._source){
				WebGL.mainContext.deleteTexture(this._source);
				this._source=null;
				this._image=null;
				this.memorySize=0;
			}
		}

		/***调整尺寸*/
		__proto.onresize=function(){
			this._w=this._image.width;
			this._h=this._image.height;
			(AtlasResourceManager.enabled)&& (this._w < AtlasResourceManager.atlasLimitWidth && this._h < AtlasResourceManager.atlasLimitHeight)? this._allowMerageInAtlas=true :this._allowMerageInAtlas=false;
		}

		__proto.clearAtlasSource=function(){
			this._image=null;
		}

		/**
		*获取纹理格式。
		*/
		__getset(0,__proto,'format',function(){
			return this._format;
		});

		/**
		*是否创建私有Source,通常禁止修改
		*@param value 是否创建
		*/
		/**
		*是否创建私有Source
		*@return 是否创建
		*/
		__getset(0,__proto,'enableMerageInAtlas',function(){
			return this._enableMerageInAtlas;
			},function(value){
			this._enableMerageInAtlas=value;
		});

		/**
		*获取是否具有mipmap。
		*/
		__getset(0,__proto,'mipmap',function(){
			return this._mipmap;
		});

		/**
		*是否创建私有Source
		*@return 是否创建
		*/
		__getset(0,__proto,'allowMerageInAtlas',function(){
			return this._allowMerageInAtlas;
		});

		__getset(0,__proto,'atlasSource',function(){
			return this._image;
		});

		/***
		*设置onload函数
		*@param value onload函数
		*/
		__getset(0,__proto,'onload',null,function(value){
			var _$this=this;
			this._onload=value;
			this._image && (this._image.onload=this._onload !=null ? (function(){
				_$this.onresize();
				_$this._onload();
			}):null);
		});

		/***
		*设置onerror函数
		*@param value onerror函数
		*/
		__getset(0,__proto,'onerror',null,function(value){
			var _$this=this;
			this._onerror=value;
			this._image && (this._image.onerror=this._onerror !=null ? (function(){
				_$this._onerror()
			}):null);
		});

		return WebGLImage;
	})(HTMLImage)


	Laya.__init([DrawText,AtlasGrid,WebGLContext2D,ShaderCompile]);
})(window,document,Laya);


(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

	var Bezier=laya.maths.Bezier,Browser=laya.utils.Browser,Byte=laya.utils.Byte,Event=laya.events.Event;
	var EventDispatcher=laya.events.EventDispatcher,Graphics=laya.display.Graphics,HTMLCanvas=laya.resource.HTMLCanvas;
	var Handler=laya.utils.Handler,Loader=laya.net.Loader,MathUtil=laya.maths.MathUtil,Matrix=laya.maths.Matrix;
	var Node=laya.display.Node,Point=laya.maths.Point,Rectangle=laya.maths.Rectangle,Render=laya.renders.Render;
	var RenderContext=laya.renders.RenderContext,Resource=laya.resource.Resource,RunDriver=laya.utils.RunDriver;
	var Sprite=laya.display.Sprite,Stat=laya.utils.Stat,Texture=laya.resource.Texture,URL=laya.net.URL,Utils=laya.utils.Utils;
	/**
	*@private
	*@author ...
	*/
	//class laya.ani.AnimationContent
	var AnimationContent=(function(){
		function AnimationContent(){
			this.nodes=null;
			this.name=null;
			this.playTime=NaN;
			this.bone3DMap=null;
			this.totalKeyframeDatasLength=0;
		}

		__class(AnimationContent,'laya.ani.AnimationContent');
		return AnimationContent;
	})()


	/**
	*@private
	*@author ...
	*/
	//class laya.ani.AnimationNodeContent
	var AnimationNodeContent=(function(){
		function AnimationNodeContent(){
			this.name=null;
			this.parentIndex=0;
			this.parent=null;
			this.keyframeWidth=0;
			this.lerpType=0;
			this.interpolationMethod=null;
			this.childs=null;
			this.keyFrame=null;
			this.playTime=NaN;
			this.extenData=null;
			this.dataOffset=0;
		}

		__class(AnimationNodeContent,'laya.ani.AnimationNodeContent');
		return AnimationNodeContent;
	})()


	/**
	*@private
	*/
	//class laya.ani.AnimationParser01
	var AnimationParser01=(function(){
		function AnimationParser01(){};
		__class(AnimationParser01,'laya.ani.AnimationParser01');
		AnimationParser01.parse=function(templet,reader){
			var data=reader.__getBuffer();
			var i=0,j=0,k=0,n=0,l=0,m=0,o=0;
			var aniClassName=reader.readUTFString();
			templet._aniClassName=aniClassName;
			var strList=reader.readUTFString().split("\n");
			var aniCount=reader.getUint8();
			var publicDataPos=reader.getUint32();
			var publicExtDataPos=reader.getUint32();
			var publicData;
			if (publicDataPos > 0)
				publicData=data.slice(publicDataPos,publicExtDataPos);
			var publicRead=new Byte(publicData);
			if (publicExtDataPos > 0)
				templet._publicExtData=data.slice(publicExtDataPos,data.byteLength);
			templet._useParent=!!reader.getUint8();
			templet._anis.length=aniCount;
			for (i=0;i < aniCount;i++){
				var ani=templet._anis[i]=new AnimationContent();
				{};
				ani.nodes=new Array;
				var name=ani.name=strList[reader.getUint16()];
				templet._aniMap[name]=i;
				ani.bone3DMap={};
				ani.playTime=reader.getFloat32();
				var boneCount=ani.nodes.length=reader.getUint8();
				ani.totalKeyframeDatasLength=0;
				for (j=0;j < boneCount;j++){
					var node=ani.nodes[j]=new AnimationNodeContent();
					{};
					node.childs=[];
					var nameIndex=reader.getInt16();
					if (nameIndex >=0){
						node.name=strList[nameIndex];
						ani.bone3DMap[node.name]=j;
					}
					node.keyFrame=new Array;
					node.parentIndex=reader.getInt16();
					node.parentIndex==-1 ? node.parent=null :node.parent=ani.nodes[node.parentIndex]
					node.lerpType=reader.getUint8();
					var keyframeParamsOffset=reader.getUint32();
					publicRead.pos=keyframeParamsOffset;
					var keyframeDataCount=node.keyframeWidth=publicRead.getUint16();
					ani.totalKeyframeDatasLength+=keyframeDataCount;
					if (node.lerpType===0 || node.lerpType===1){
						node.interpolationMethod=[];
						node.interpolationMethod.length=keyframeDataCount;
						for (k=0;k < keyframeDataCount;k++)
						node.interpolationMethod[k]=AnimationTemplet.interpolation[publicRead.getUint8()];
					}
					if (node.parent !=null)
						node.parent.childs.push(node);
					var privateDataLen=reader.getUint16();
					if (privateDataLen > 0){
						node.extenData=data.slice(reader.pos,reader.pos+privateDataLen);
						reader.pos+=privateDataLen;
					};
					var keyframeCount=reader.getUint16();
					node.keyFrame.length=keyframeCount;
					var startTime=0;
					var keyFrame;
					for (k=0,n=keyframeCount;k < n;k++){
						keyFrame=node.keyFrame[k]=new KeyFramesContent();
						{};
						keyFrame.duration=reader.getFloat32();
						keyFrame.startTime=startTime;
						if (node.lerpType===2){
							keyFrame.interpolationData=[];
							var interDataLength=reader.getUint8();
							var lerpType=0;
							lerpType=reader.getFloat32();
							switch (lerpType){
								case 254:
									keyFrame.interpolationData.length=keyframeDataCount;
									for (o=0;o < keyframeDataCount;o++)
									keyFrame.interpolationData[o]=0;
									break ;
								case 255:
									keyFrame.interpolationData.length=keyframeDataCount;
									for (o=0;o < keyframeDataCount;o++)
									keyFrame.interpolationData[o]=5;
									break ;
								default :
									keyFrame.interpolationData.push(lerpType);
									for (m=1;m < interDataLength;m++){
										keyFrame.interpolationData.push(reader.getFloat32());
									}
								}
						}
						keyFrame.data=new Float32Array(keyframeDataCount);
						for (l=0;l < keyframeDataCount;l++){
							keyFrame.data[l]=reader.getFloat32();
							if (keyFrame.data[l] >-0.00000001 && keyFrame.data[l] < 0.00000001)keyFrame.data[l]=0;
						}
						startTime+=keyFrame.duration;
					}
					keyFrame.startTime=ani.playTime;
					node.playTime=ani.playTime;
					templet._calculateKeyFrame(node,keyframeCount,keyframeDataCount);
				}
			}
		}

		return AnimationParser01;
	})()


	/**
	*@private
	*/
	//class laya.ani.AnimationParser02
	var AnimationParser02=(function(){
		function AnimationParser02(){};
		__class(AnimationParser02,'laya.ani.AnimationParser02');
		AnimationParser02.READ_DATA=function(){
			AnimationParser02._DATA.offset=AnimationParser02._reader.getUint32();
			AnimationParser02._DATA.size=AnimationParser02._reader.getUint32();
		}

		AnimationParser02.READ_BLOCK=function(){
			var count=AnimationParser02._BLOCK.count=AnimationParser02._reader.getUint16();
			var blockStarts=AnimationParser02._BLOCK.blockStarts=[];
			var blockLengths=AnimationParser02._BLOCK.blockLengths=[];
			for (var i=0;i < count;i++){
				blockStarts.push(AnimationParser02._reader.getUint32());
				blockLengths.push(AnimationParser02._reader.getUint32());
			}
		}

		AnimationParser02.READ_STRINGS=function(){
			var offset=AnimationParser02._reader.getUint32();
			var count=AnimationParser02._reader.getUint16();
			var prePos=AnimationParser02._reader.pos;
			AnimationParser02._reader.pos=offset+AnimationParser02._DATA.offset;
			for (var i=0;i < count;i++)
			AnimationParser02._strings[i]=AnimationParser02._reader.readUTFString();
			AnimationParser02._reader.pos=prePos;
		}

		AnimationParser02.parse=function(templet,reader){
			AnimationParser02._templet=templet;
			AnimationParser02._reader=reader;
			var arrayBuffer=reader.__getBuffer();
			AnimationParser02.READ_DATA();
			AnimationParser02.READ_BLOCK();
			AnimationParser02.READ_STRINGS();
			for (var i=0,n=AnimationParser02._BLOCK.count;i < n;i++){
				var index=reader.getUint16();
				var blockName=AnimationParser02._strings[index];
				var fn=AnimationParser02["READ_"+blockName];
				if (fn==null)
					throw new Error("model file err,no this function:"+index+" "+blockName);
				else
				fn.call();
			}
		}

		AnimationParser02.READ_ANIMATIONS=function(){
			var reader=AnimationParser02._reader;
			var arrayBuffer=reader.__getBuffer();
			var i=0,j=0,k=0,n=0,l=0;
			var keyframeWidth=reader.getUint16();
			var interpolationMethod=[];
			interpolationMethod.length=keyframeWidth;
			for (i=0;i < keyframeWidth;i++)
			interpolationMethod[i]=AnimationTemplet.interpolation[reader.getByte()];
			var aniCount=reader.getUint8();
			AnimationParser02._templet._anis.length=aniCount;
			for (i=0;i < aniCount;i++){
				var ani=AnimationParser02._templet._anis[i]=
				{};
				ani.nodes=new Array;
				var aniName=ani.name=AnimationParser02._strings[reader.getUint16()];
				AnimationParser02._templet._aniMap[aniName]=i;
				ani.bone3DMap={};
				ani.playTime=reader.getFloat32();
				var boneCount=ani.nodes.length=reader.getInt16();
				ani.totalKeyframeDatasLength=0;
				for (j=0;j < boneCount;j++){
					var node=ani.nodes[j]=
					{};
					node.keyframeWidth=keyframeWidth;
					node.childs=[];
					var nameIndex=reader.getUint16();
					if (nameIndex >=0){
						node.name=AnimationParser02._strings[nameIndex];
						ani.bone3DMap[node.name]=j;
					}
					node.keyFrame=new Array;
					node.parentIndex=reader.getInt16();
					node.parentIndex==-1 ? node.parent=null :node.parent=ani.nodes[node.parentIndex]
					ani.totalKeyframeDatasLength+=keyframeWidth;
					node.interpolationMethod=interpolationMethod;
					if (node.parent !=null)
						node.parent.childs.push(node);
					var keyframeCount=reader.getUint16();
					node.keyFrame.length=keyframeCount;
					var keyFrame=null,lastKeyFrame=null;
					for (k=0,n=keyframeCount;k < n;k++){
						keyFrame=node.keyFrame[k]=
						{};
						keyFrame.startTime=reader.getFloat32();
						(lastKeyFrame)&& (lastKeyFrame.duration=keyFrame.startTime-lastKeyFrame.startTime);
						var offset=AnimationParser02._DATA.offset;
						var keyframeDataOffset=reader.getUint32();
						var keyframeDataLength=keyframeWidth *4;
						var keyframeArrayBuffer=arrayBuffer.slice(offset+keyframeDataOffset,offset+keyframeDataOffset+keyframeDataLength);
						keyFrame.data=new Float32Array(keyframeArrayBuffer);
						lastKeyFrame=keyFrame;
					}
					keyFrame.duration=0;
					node.playTime=ani.playTime;
					AnimationParser02._templet._calculateKeyFrame(node,keyframeCount,keyframeWidth);
				}
			}
		}

		AnimationParser02._templet=null
		AnimationParser02._reader=null
		AnimationParser02._strings=[];
		__static(AnimationParser02,
		['_BLOCK',function(){return this._BLOCK={count:0};},'_DATA',function(){return this._DATA={offset:0,size:0};}
		]);
		return AnimationParser02;
	})()


	/**
	*@private
	*/
	//class laya.ani.AnimationState
	var AnimationState=(function(){
		function AnimationState(){}
		__class(AnimationState,'laya.ani.AnimationState');
		AnimationState.stopped=0;
		AnimationState.paused=1;
		AnimationState.playing=2;
		return AnimationState;
	})()


	/**
	*@private
	*/
	//class laya.ani.bone.Bone
	var Bone=(function(){
		function Bone(){
			this.name=null;
			this.root=null;
			this.parentBone=null;
			this.length=10;
			this.transform=null;
			this.inheritScale=true;
			this.inheritRotation=true;
			this.rotation=NaN;
			this.resultRotation=NaN;
			this.d=-1;
			this._tempMatrix=null;
			this._sprite=null;
			this.resultTransform=new Transform();
			this.resultMatrix=new Matrix();
			this._children=[];
		}

		__class(Bone,'laya.ani.bone.Bone');
		var __proto=Bone.prototype;
		__proto.setTempMatrix=function(matrix){
			this._tempMatrix=matrix;
			var i=0,n=0;
			var tBone;
			for (i=0,n=this._children.length;i < n;i++){
				tBone=this._children[i];
				tBone.setTempMatrix(this._tempMatrix);
			}
		}

		__proto.update=function(pMatrix){
			this.rotation=this.transform.skX;
			var tResultMatrix;
			if (pMatrix){
				tResultMatrix=this.resultTransform.getMatrix();
				Matrix.mul(tResultMatrix,pMatrix,this.resultMatrix);
				this.resultRotation=this.rotation;
			}
			else {
				this.resultRotation=this.rotation+this.parentBone.resultRotation;
				if (this.parentBone){
					if (this.inheritRotation && this.inheritScale){
						tResultMatrix=this.resultTransform.getMatrix();
						Matrix.mul(tResultMatrix,this.parentBone.resultMatrix,this.resultMatrix);
					}
					else {
						var temp=0;
						var parent=this.parentBone;
						var tAngle=NaN;
						var cos=NaN;
						var sin=NaN;
						var tParentMatrix=this.parentBone.resultMatrix;
						tResultMatrix=this.resultTransform.getMatrix();
						var worldX=tParentMatrix.a *tResultMatrix.tx+tParentMatrix.c *tResultMatrix.ty+tParentMatrix.tx;
						var worldY=tParentMatrix.b *tResultMatrix.tx+tParentMatrix.d *tResultMatrix.ty+tParentMatrix.ty;
						var tTestMatrix=new Matrix();
						if (this.inheritRotation){
							tAngle=Math.atan2(parent.resultMatrix.b,parent.resultMatrix.a);
							cos=Math.cos(tAngle),sin=Math.sin(tAngle);
							tTestMatrix.setTo(cos,sin,-sin,cos,0,0);
							Matrix.mul(this._tempMatrix,tTestMatrix,Matrix.TEMP);
							Matrix.TEMP.copyTo(tTestMatrix);
							tResultMatrix=this.resultTransform.getMatrix();
							Matrix.mul(tResultMatrix,tTestMatrix,this.resultMatrix);
							if (this.resultTransform.scX *this.resultTransform.scY < 0){
								this.resultMatrix.rotate(Math.PI*0.5);
							}
							this.resultMatrix.tx=worldX;
							this.resultMatrix.ty=worldY;
						}
						else if (this.inheritScale){
							tResultMatrix=this.resultTransform.getMatrix();
							Matrix.TEMP.identity();
							Matrix.TEMP.d=this.d;
							Matrix.mul(tResultMatrix,Matrix.TEMP,this.resultMatrix);
							this.resultMatrix.tx=worldX;
							this.resultMatrix.ty=worldY;
						}
						else {
							tResultMatrix=this.resultTransform.getMatrix();
							Matrix.TEMP.identity();
							Matrix.TEMP.d=this.d;
							Matrix.mul(tResultMatrix,Matrix.TEMP,this.resultMatrix);
							this.resultMatrix.tx=worldX;
							this.resultMatrix.ty=worldY;
						}
					}
				}
				else {
					tResultMatrix=this.resultTransform.getMatrix();
					tResultMatrix.copyTo(this.resultMatrix);
				}
			};
			var i=0,n=0;
			var tBone;
			for (i=0,n=this._children.length;i < n;i++){
				tBone=this._children[i];
				tBone.update();
			}
		}

		__proto.updateChild=function(){
			var i=0,n=0;
			var tBone;
			for (i=0,n=this._children.length;i < n;i++){
				tBone=this._children[i];
				tBone.update();
			}
		}

		__proto.setRotation=function(rd){
			if (this._sprite){
				this._sprite.rotation=rd *180 / Math.PI;
			}
		}

		__proto.updateDraw=function(x,y){
			if (!Bone.ShowBones || Bone.ShowBones[this.name]){
				if (this._sprite){
					this._sprite.x=x+this.resultMatrix.tx;
					this._sprite.y=y+this.resultMatrix.ty;
				}
				else {
					this._sprite=new Sprite();
					this._sprite.graphics.drawCircle(0,0,5,"#ff0000");
					this._sprite.graphics.drawLine(0,0,this.length,0,"#00ff00");
					this._sprite.graphics.fillText(this.name,0,0,"20px Arial","#00ff00","center");
					Laya.stage.addChild(this._sprite);
					this._sprite.x=x+this.resultMatrix.tx;
					this._sprite.y=y+this.resultMatrix.ty;
				}
			};
			var i=0,n=0;
			var tBone;
			for (i=0,n=this._children.length;i < n;i++){
				tBone=this._children[i];
				tBone.updateDraw(x,y);
			}
		}

		__proto.addChild=function(bone){
			this._children.push(bone);
			bone.parentBone=this;
		}

		__proto.findBone=function(boneName){
			if (this.name==boneName){
				return this;
			}
			else {
				var i=0,n=0;
				var tBone;
				var tResult;
				for (i=0,n=this._children.length;i < n;i++){
					tBone=this._children[i];
					tResult=tBone.findBone(boneName);
					if (tResult){
						return tResult;
					}
				}
			}
			return null;
		}

		__proto.localToWorld=function(local){
			var localX=local[0];
			var localY=local[1];
			local[0]=localX *this.resultMatrix.a+localY *this.resultMatrix.c+this.resultMatrix.tx;
			local[1]=localX *this.resultMatrix.b+localY *this.resultMatrix.d+this.resultMatrix.ty;
		}

		Bone.ShowBones={};
		return Bone;
	})()


	/**
	*@private
	*/
	//class laya.ani.bone.BoneSlot
	var BoneSlot=(function(){
		function BoneSlot(){
			this.name=null;
			this.parent=null;
			this.attachmentName=null;
			this.srcDisplayIndex=-1;
			this.type="src";
			this.templet=null;
			this.currSlotData=null;
			this.currTexture=null;
			this.currDisplayData=null;
			this.displayIndex=-1;
			this._diyTexture=null;
			this._parentMatrix=null;
			this._resultMatrix=null;
			this._replaceDic={};
			this._curDiyUV=null;
			this._curDiyVS=null;
			this._skinSprite=null;
			this.deformData=null;
			this._mVerticleArr=null;
		}

		__class(BoneSlot,'laya.ani.bone.BoneSlot');
		var __proto=BoneSlot.prototype;
		/**
		*设置要显示的插槽数据
		*@param slotData
		*@param disIndex
		*@param freshIndex 是否重置纹理
		*/
		__proto.showSlotData=function(slotData,freshIndex){
			(freshIndex===void 0)&& (freshIndex=true);
			this.currSlotData=slotData;
			if(freshIndex)
				this.displayIndex=this.srcDisplayIndex;
			this.currDisplayData=null;
			this.currTexture=null;
		}

		/**
		*通过名字显示指定对象
		*@param name
		*/
		__proto.showDisplayByName=function(name){
			if (this.currSlotData){
				this.showDisplayByIndex(this.currSlotData.getDisplayByName(name));
			}
		}

		/**
		*替换贴图名
		*@param tarName 要替换的贴图名
		*@param newName 替换后的贴图名
		*/
		__proto.replaceDisplayByName=function(tarName,newName){
			if (!this.currSlotData)return;
			var preIndex=0;
			preIndex=this.currSlotData.getDisplayByName(tarName);
			var newIndex=0;
			newIndex=this.currSlotData.getDisplayByName(newName);
			this.replaceDisplayByIndex(preIndex,newIndex);
		}

		/**
		*替换贴图索引
		*@param tarIndex 要替换的索引
		*@param newIndex 替换后的索引
		*/
		__proto.replaceDisplayByIndex=function(tarIndex,newIndex){
			if (!this.currSlotData)return;
			this._replaceDic[tarIndex]=newIndex;
			if (this.displayIndex==tarIndex){
				this.showDisplayByIndex(tarIndex);
			}
		}

		/**
		*指定显示对象
		*@param index
		*/
		__proto.showDisplayByIndex=function(index){
			if (this._replaceDic[index])index=this._replaceDic[index];
			if (this.currSlotData && index >-1 && index < this.currSlotData.displayArr.length){
				this.displayIndex=index;
				this.currDisplayData=this.currSlotData.displayArr[index];
				if (this.currDisplayData){
					var tName=this.currDisplayData.name;
					this.currTexture=this.templet.getTexture(tName);
					if (this.currTexture && Render.isWebGL && this.currDisplayData.type==0 && this.currDisplayData.uvs){
						this.currTexture=this.currDisplayData.createTexture(this.currTexture);
					}
				}
				}else {
				this.displayIndex=-1;
				this.currDisplayData=null;
				this.currTexture=null;
			}
		}

		/**
		*替换皮肤
		*@param _texture
		*/
		__proto.replaceSkin=function(_texture){
			this._diyTexture=_texture;
			if (this._curDiyUV)this._curDiyUV.length=0;
			if (this.currDisplayData&&this._diyTexture==this.currDisplayData.texture){
				this._diyTexture=null;
			}
		}

		/**
		*保存父矩阵的索引
		*@param parentMatrix
		*/
		__proto.setParentMatrix=function(parentMatrix){
			this._parentMatrix=parentMatrix;
		}

		/**
		*把纹理画到Graphics上
		*@param graphics
		*@param noUseSave
		*/
		__proto.draw=function(graphics,boneMatrixArray,noUseSave,alpha){
			(noUseSave===void 0)&& (noUseSave=false);
			(alpha===void 0)&& (alpha=1);
			if ((this._diyTexture==null && this.currTexture==null)|| this.currDisplayData==null){
				if (!(this.currDisplayData && this.currDisplayData.type==3)){
					return;
				}
			};
			var tTexture=this.currTexture;
			if (this._diyTexture)tTexture=this._diyTexture;
			var tSkinSprite;
			switch (this.currDisplayData.type){
				case 0:
					if (graphics){
						var tCurrentMatrix=this.getDisplayMatrix();
						if (this._parentMatrix){
							var tRotateKey=false;
							if (tCurrentMatrix){
								Matrix.mul(tCurrentMatrix,this._parentMatrix,Matrix.TEMP);
								var tResultMatrix;
								if (noUseSave){
									if (this._resultMatrix==null)this._resultMatrix=new Matrix();
									tResultMatrix=this._resultMatrix;
									}else {
									tResultMatrix=new Matrix();
								}
								if ((!Render.isWebGL && this.currDisplayData.uvs)|| (Render.isWebGL && this._diyTexture && this.currDisplayData.uvs)){
									var tTestMatrix=BoneSlot._tempMatrix;
									tTestMatrix.identity();
									if (this.currDisplayData.uvs[1] > this.currDisplayData.uvs[5]){
										tTestMatrix.d=-1;
									}
									if (this.currDisplayData.uvs[0] > this.currDisplayData.uvs[4]
										&& this.currDisplayData.uvs[1] > this.currDisplayData.uvs[5]){
										tRotateKey=true;
										tTestMatrix.rotate(-Math.PI/2);
									}
									Matrix.mul(tTestMatrix,Matrix.TEMP,tResultMatrix);
									}else {
									Matrix.TEMP.copyTo(tResultMatrix);
								}
								if (tRotateKey){
									graphics.drawTexture(tTexture,-this.currDisplayData.height / 2,-this.currDisplayData.width / 2,this.currDisplayData.height,this.currDisplayData.width,tResultMatrix);
									}else {
									graphics.drawTexture(tTexture,-this.currDisplayData.width / 2,-this.currDisplayData.height / 2,this.currDisplayData.width,this.currDisplayData.height,tResultMatrix);
								}
							}
						}
					}
					break ;
				case 1:
					if (noUseSave){
						if (this._skinSprite==null){
							this._skinSprite=BoneSlot.createSkinMesh();
						}
						tSkinSprite=this._skinSprite;
						}else {
						tSkinSprite=BoneSlot.createSkinMesh();
					}
					if (tSkinSprite==null){
						return;
					};
					var tIBArray;
					var tRed=1;
					var tGreed=1;
					var tBlue=1;
					var tAlpha=1;
					if (this.currDisplayData.bones==null){
						var tVertices=this.currDisplayData.weights;
						if (this.deformData){
							tVertices=this.deformData;
						};
						var tUVs;
						if (this._diyTexture){
							if (!this._curDiyUV){
								this._curDiyUV=[];
							}
							if (this._curDiyUV.length==0){
								this._curDiyUV=UVTools.getRelativeUV(this.currTexture.uv,this.currDisplayData.uvs,this._curDiyUV);
								this._curDiyUV=UVTools.getAbsoluteUV(this._diyTexture.uv,this._curDiyUV,this._curDiyUV);
							}
							tUVs=this._curDiyUV;
							}else{
							tUVs=this.currDisplayData.uvs;
						}
						this._mVerticleArr=tVertices;
						var tTriangleNum=this.currDisplayData.triangles.length / 3;
						tIBArray=this.currDisplayData.triangles;
						tSkinSprite.init2(tTexture,null ,tIBArray,this._mVerticleArr,tUVs);
						var tCurrentMatrix2=this.getDisplayMatrix();
						if (this._parentMatrix){
							if (tCurrentMatrix2){
								Matrix.mul(tCurrentMatrix2,this._parentMatrix,Matrix.TEMP);
								var tResultMatrix2;
								if (noUseSave){
									if (this._resultMatrix==null)this._resultMatrix=new Matrix();
									tResultMatrix2=this._resultMatrix;
									}else {
									tResultMatrix2=new Matrix();
								}
								Matrix.TEMP.copyTo(tResultMatrix2);
								tSkinSprite.transform=tResultMatrix2;
							}
						}
						}else {
						this.skinMesh(boneMatrixArray,tSkinSprite,alpha);
					}
					graphics.drawSkin(tSkinSprite);
					break ;
				case 2:
					if (noUseSave){
						if (this._skinSprite==null){
							this._skinSprite=BoneSlot.createSkinMesh();
						}
						tSkinSprite=this._skinSprite;
						}else {
						tSkinSprite=BoneSlot.createSkinMesh();
					}
					if (tSkinSprite==null){
						return;
					}
					this.skinMesh(boneMatrixArray,tSkinSprite,alpha);
					graphics.drawSkin(tSkinSprite);
					break ;
				case 3:
					break ;
				}
		}

		/**
		*显示蒙皮动画
		*@param boneMatrixArray 当前帧的骨骼矩阵
		*/
		__proto.skinMesh=function(boneMatrixArray,skinSprite,alpha){
			var tTexture=this.currTexture;
			var tBones=this.currDisplayData.bones;
			var tUvs;
			if (this._diyTexture){
				tTexture=this._diyTexture;
				if (!this._curDiyUV){
					this._curDiyUV=[];
				}
				if (this._curDiyUV.length==0){
					this._curDiyUV=UVTools.getRelativeUV(this.currTexture.uv,this.currDisplayData.uvs,this._curDiyUV);
					this._curDiyUV=UVTools.getAbsoluteUV(this._diyTexture.uv,this._curDiyUV,this._curDiyUV);
				}
				tUvs=this._curDiyUV;
				}else{
				tUvs=this.currDisplayData.uvs;
			};
			var tWeights=this.currDisplayData.weights;
			var tTriangles=this.currDisplayData.triangles;
			var tIBArray;
			var tRx=0;
			var tRy=0;
			var nn=0;
			var tMatrix;
			var tX=NaN;
			var tY=NaN;
			var tB=0;
			var tWeight=0;
			var tVertices=[];
			var i=0,j=0,n=0;
			var tRed=1;
			var tGreed=1;
			var tBlue=1;
			var tAlpha=alpha;
			if (this.deformData && this.deformData.length > 0){
				var f=0;
				for (i=0,n=tBones.length;i < n;){
					nn=tBones[i++]+i;
					tRx=0,tRy=0;
					for (;i < nn;i++){
						tMatrix=boneMatrixArray[tBones[i]]
						tX=tWeights[tB]+this.deformData[f++];
						tY=tWeights[tB+1]+this.deformData[f++];
						tWeight=tWeights[tB+2];
						tRx+=(tX *tMatrix.a+tY *tMatrix.c+tMatrix.tx)*tWeight;
						tRy+=(tX *tMatrix.b+tY *tMatrix.d+tMatrix.ty)*tWeight;
						tB+=3;
					}
					tVertices.push(tRx,tRy);
				}
				}else {
				for (i=0,n=tBones.length;i < n;){
					nn=tBones[i++]+i;
					tRx=0,tRy=0;
					for (;i < nn;i++){
						tMatrix=boneMatrixArray[tBones[i]]
						tX=tWeights[tB];
						tY=tWeights[tB+1];
						tWeight=tWeights[tB+2];
						tRx+=(tX *tMatrix.a+tY *tMatrix.c+tMatrix.tx)*tWeight;
						tRy+=(tX *tMatrix.b+tY *tMatrix.d+tMatrix.ty)*tWeight;
						tB+=3;
					}
					tVertices.push(tRx,tRy);
				}
			}
			this._mVerticleArr=tVertices;
			tIBArray=tTriangles;
			skinSprite.init2(tTexture,null,tIBArray,this._mVerticleArr,tUvs);
		}

		/**
		*画骨骼的起始点，方便调试
		*@param graphics
		*/
		__proto.drawBonePoint=function(graphics){
			if (graphics && this._parentMatrix){
				graphics.drawCircle(this._parentMatrix.tx,this._parentMatrix.ty,5,"#ff0000");
			}
		}

		/**
		*得到显示对象的矩阵
		*@return
		*/
		__proto.getDisplayMatrix=function(){
			if (this.currDisplayData){
				return this.currDisplayData.transform.getMatrix();
			}
			return null;
		}

		/**
		*得到插糟的矩阵
		*@return
		*/
		__proto.getMatrix=function(){
			return this._resultMatrix;
		}

		/**
		*用原始数据拷贝出一个
		*@return
		*/
		__proto.copy=function(){
			var tBoneSlot=new BoneSlot();
			tBoneSlot.type="copy";
			tBoneSlot.name=this.name;
			tBoneSlot.attachmentName=this.attachmentName;
			tBoneSlot.srcDisplayIndex=this.srcDisplayIndex;
			tBoneSlot.parent=this.parent;
			tBoneSlot.displayIndex=this.displayIndex;
			tBoneSlot.templet=this.templet;
			tBoneSlot.currSlotData=this.currSlotData;
			tBoneSlot.currTexture=this.currTexture;
			tBoneSlot.currDisplayData=this.currDisplayData;
			return tBoneSlot;
		}

		BoneSlot.createSkinMesh=function(){
			if (Render.isWebGL || Render.isConchApp){
				return RunDriver.skinAniSprite();
				}else{
				if (!Render.isWebGL){
					if (Skeleton.useSimpleMeshInCanvas){
						return new SimpleSkinMeshCanvas();
						}else{
						return new SkinMeshCanvas();
					}
				}
			}
			return null;
		}

		__static(BoneSlot,
		['_tempMatrix',function(){return this._tempMatrix=new Matrix();}
		]);
		return BoneSlot;
	})()


	/**
	*@private
	*canvas mesh渲染器
	*/
	//class laya.ani.bone.canvasmesh.CanvasMeshRender
	var CanvasMeshRender=(function(){
		function CanvasMeshRender(){
			this.mesh=null;
			this.transform=null;
			this.context=null;
			this.mode=0;
		}

		__class(CanvasMeshRender,'laya.ani.bone.canvasmesh.CanvasMeshRender');
		var __proto=CanvasMeshRender.prototype;
		/**
		*将mesh数据渲染到context上面
		*@param context
		*
		*/
		__proto.renderToContext=function(context){
			this.context=context.ctx||context;
			if (this.mesh){
				if (this.mode==0){
					this._renderWithIndexes(this.mesh);
					}else{
					this._renderNoIndexes(this.mesh);
				}
			}
		}

		/**
		*无顶点索引的模式
		*@param mesh
		*
		*/
		__proto._renderNoIndexes=function(mesh){
			var i=0,len=mesh.vertices.length / 2;
			var index=0;
			for (i=0;i < len-2;i++){
				index=i *2;
				this._renderDrawTriangle(mesh,index,(index+2),(index+4));
			}
		}

		/**
		*使用顶点索引模式绘制
		*@param mesh
		*
		*/
		__proto._renderWithIndexes=function(mesh){
			var indexes=mesh.indexes;
			var i=0,len=indexes.length;
			for (i=0;i < len;i+=3){
				var index0=indexes[i] *2;
				var index1=indexes[i+1] *2;
				var index2=indexes[i+2] *2;
				this._renderDrawTriangle(mesh,index0,index1,index2);
			}
		}

		/**
		*绘制三角形
		*@param mesh mesh
		*@param index0 顶点0
		*@param index1 顶点1
		*@param index2 顶点2
		*
		*/
		__proto._renderDrawTriangle=function(mesh,index0,index1,index2){
			var context=this.context;
			var uvs=mesh.uvs;
			var vertices=mesh.vertices;
			var texture=mesh.texture;
			var source=texture.bitmap;
			var textureSource=source.source;
			var textureWidth=texture.width;
			var textureHeight=texture.height;
			var sourceWidth=source.width;
			var sourceHeight=source.height;
			var u0=NaN;
			var u1=NaN;
			var u2=NaN;
			var v0=NaN;
			var v1=NaN;
			var v2=NaN;
			if (mesh.useUvTransform){
				var ut=mesh.uvTransform;
				u0=((uvs[index0] *ut.a)+(uvs[index0+1] *ut.c)+ut.tx)*sourceWidth;
				u1=((uvs[index1] *ut.a)+(uvs[index1+1] *ut.c)+ut.tx)*sourceWidth;
				u2=((uvs[index2] *ut.a)+(uvs[index2+1] *ut.c)+ut.tx)*sourceWidth;
				v0=((uvs[index0] *ut.b)+(uvs[index0+1] *ut.d)+ut.ty)*sourceHeight;
				v1=((uvs[index1] *ut.b)+(uvs[index1+1] *ut.d)+ut.ty)*sourceHeight;
				v2=((uvs[index2] *ut.b)+(uvs[index2+1] *ut.d)+ut.ty)*sourceHeight;
			}
			else {
				u0=uvs[index0] *sourceWidth;
				u1=uvs[index1] *sourceWidth;
				u2=uvs[index2] *sourceWidth;
				v0=uvs[index0+1] *sourceHeight;
				v1=uvs[index1+1] *sourceHeight;
				v2=uvs[index2+1] *sourceHeight;
			};
			var x0=vertices[index0];
			var x1=vertices[index1];
			var x2=vertices[index2];
			var y0=vertices[index0+1];
			var y1=vertices[index1+1];
			var y2=vertices[index2+1];
			if (mesh.canvasPadding > 0){
				var paddingX=mesh.canvasPadding;
				var paddingY=mesh.canvasPadding;
				var centerX=(x0+x1+x2)/ 3;
				var centerY=(y0+y1+y2)/ 3;
				var normX=x0-centerX;
				var normY=y0-centerY;
				var dist=Math.sqrt((normX *normX)+(normY *normY));
				x0=centerX+((normX / dist)*(dist+paddingX));
				y0=centerY+((normY / dist)*(dist+paddingY));
				normX=x1-centerX;
				normY=y1-centerY;
				dist=Math.sqrt((normX *normX)+(normY *normY));
				x1=centerX+((normX / dist)*(dist+paddingX));
				y1=centerY+((normY / dist)*(dist+paddingY));
				normX=x2-centerX;
				normY=y2-centerY;
				dist=Math.sqrt((normX *normX)+(normY *normY));
				x2=centerX+((normX / dist)*(dist+paddingX));
				y2=centerY+((normY / dist)*(dist+paddingY));
			}
			context.save();
			if (this.transform){
				var mt=this.transform;
				context.transform(mt.a,mt.b,mt.c,mt.d,mt.tx,mt.ty);
			}
			context.beginPath();
			context.moveTo(x0,y0);
			context.lineTo(x1,y1);
			context.lineTo(x2,y2);
			context.closePath();
			context.clip();
			var delta=(u0 *v1)+(v0 *u2)+(u1 *v2)-(v1 *u2)-(v0 *u1)-(u0 *v2);
			var dDelta=1 / delta;
			var deltaA=(x0 *v1)+(v0 *x2)+(x1 *v2)-(v1 *x2)-(v0 *x1)-(x0 *v2);
			var deltaB=(u0 *x1)+(x0 *u2)+(u1 *x2)-(x1 *u2)-(x0 *u1)-(u0 *x2);
			var deltaC=(u0 *v1 *x2)+(v0 *x1 *u2)+(x0 *u1 *v2)-(x0 *v1 *u2)-(v0 *u1 *x2)-(u0 *x1 *v2);
			var deltaD=(y0 *v1)+(v0 *y2)+(y1 *v2)-(v1 *y2)-(v0 *y1)-(y0 *v2);
			var deltaE=(u0 *y1)+(y0 *u2)+(u1 *y2)-(y1 *u2)-(y0 *u1)-(u0 *y2);
			var deltaF=(u0 *v1 *y2)+(v0 *y1 *u2)+(y0 *u1 *v2)-(y0 *v1 *u2)-(v0 *u1 *y2)-(u0 *y1 *v2);
			context.transform(deltaA *dDelta,deltaD *dDelta,deltaB *dDelta,deltaE*dDelta,deltaC *dDelta,deltaF *dDelta);
			context.drawImage(textureSource,texture.uv[0]*sourceWidth,texture.uv[1]*sourceHeight,textureWidth,textureHeight,texture.uv[0]*sourceWidth,texture.uv[1]*sourceHeight,textureWidth,textureHeight);
			context.restore();
		}

		return CanvasMeshRender;
	})()


	/**
	*@private
	*/
	//class laya.ani.bone.canvasmesh.MeshData
	var MeshData=(function(){
		function MeshData(){
			this.texture=null;
			this.uvs=[0,0,1,0,1,1,0,1];
			this.vertices=[0,0,100,0,100,100,0,100];
			this.indexes=[0,1,3,3,1,2];
			this.uvTransform=null;
			this.useUvTransform=false;
			this.canvasPadding=1;
		}

		__class(MeshData,'laya.ani.bone.canvasmesh.MeshData');
		var __proto=MeshData.prototype;
		/**
		*计算mesh的Bounds
		*@return
		*
		*/
		__proto.getBounds=function(){
			return Rectangle._getWrapRec(this.vertices);
		}

		return MeshData;
	})()


	/**
	*@private
	*/
	//class laya.ani.bone.DeformAniData
	var DeformAniData=(function(){
		function DeformAniData(){
			this.skinName=null;
			this.deformSlotDataList=[];
		}

		__class(DeformAniData,'laya.ani.bone.DeformAniData');
		return DeformAniData;
	})()


	/**
	*@private
	*/
	//class laya.ani.bone.DeformSlotData
	var DeformSlotData=(function(){
		function DeformSlotData(){
			this.deformSlotDisplayList=[];
		}

		__class(DeformSlotData,'laya.ani.bone.DeformSlotData');
		return DeformSlotData;
	})()


	/**
	*@private
	*/
	//class laya.ani.bone.DeformSlotDisplayData
	var DeformSlotDisplayData=(function(){
		function DeformSlotDisplayData(){
			this.boneSlot=null;
			this.slotIndex=-1;
			this.attachment=null;
			this.deformData=null;
			this.frameIndex=0;
			this.timeList=[];
			this.vectices=[];
			this.tweenKeyList=[];
		}

		__class(DeformSlotDisplayData,'laya.ani.bone.DeformSlotDisplayData');
		var __proto=DeformSlotDisplayData.prototype;
		__proto.binarySearch1=function(values,target){
			var low=0;
			var high=values.length-2;
			if (high==0)
				return 1;
			var current=high >>> 1;
			while (true){
				if (values[Math.floor(current+1)] <=target)
					low=current+1;
				else
				high=current;
				if (low==high)
					return low+1;
				current=(low+high)>>> 1;
			}
			return 0;
		}

		// Can't happen.
		__proto.apply=function(time,boneSlot,alpha){
			(alpha===void 0)&& (alpha=1);
			time+=0.05;
			if (this.timeList.length <=0){
				return;
			};
			var i=0;
			var n=0;
			var tTime=this.timeList[0];
			if (time < tTime){
				return;
			};
			var tVertexCount=this.vectices[0].length;
			var tVertices=[];
			var tFrameIndex=this.binarySearch1(this.timeList,time);
			this.frameIndex=tFrameIndex;
			if (time >=this.timeList[this.timeList.length-1]){
				var lastVertices=this.vectices[this.vectices.length-1];
				if (alpha < 1){
					for (i=0;i < tVertexCount;i++){
						tVertices[i]+=(lastVertices[i]-tVertices[i])*alpha;
					}
					}else {
					for (i=0;i < tVertexCount;i++){
						tVertices[i]=lastVertices[i];
					}
				}
				this.deformData=tVertices;
				return;
			};
			var tTweenKey=this.tweenKeyList[this.frameIndex];
			var tPrevVertices=this.vectices[this.frameIndex-1];
			var tNextVertices=this.vectices[this.frameIndex];
			var tPreFrameTime=this.timeList[this.frameIndex-1];
			var tFrameTime=this.timeList[this.frameIndex];
			if (this.tweenKeyList[tFrameIndex-1]){
				alpha=(time-tPreFrameTime)/ (tFrameTime-tPreFrameTime);
				}else {
				alpha=0;
			};
			var tPrev=NaN;
			for (i=0;i < tVertexCount;i++){
				tPrev=tPrevVertices[i];
				tVertices[i]=tPrev+(tNextVertices[i]-tPrev)*alpha;
			}
			this.deformData=tVertices;
		}

		return DeformSlotDisplayData;
	})()


	/**
	*@private
	*/
	//class laya.ani.bone.DrawOrderData
	var DrawOrderData=(function(){
		function DrawOrderData(){
			this.time=NaN;
			this.drawOrder=[];
		}

		__class(DrawOrderData,'laya.ani.bone.DrawOrderData');
		return DrawOrderData;
	})()


	/**
	*@private
	*/
	//class laya.ani.bone.EventData
	var EventData=(function(){
		function EventData(){
			this.name=null;
			this.intValue=0;
			this.floatValue=NaN;
			this.stringValue=null;
			this.time=NaN;
		}

		__class(EventData,'laya.ani.bone.EventData');
		return EventData;
	})()


	/**
	*@private
	*/
	//class laya.ani.bone.IkConstraint
	var IkConstraint=(function(){
		function IkConstraint(data,bones){
			this._targetBone=null;
			this._bones=null;
			this._data=null;
			this.name=null;
			this.mix=NaN;
			this.bendDirection=NaN;
			this.isSpine=true;
			this._sp=null;
			this.isDebug=false;
			this._data=data;
			this._targetBone=bones[data.targetBoneIndex];
			this.isSpine=data.isSpine;
			if (this._bones==null)this._bones=[];
			this._bones.length=0;
			for (var i=0,n=data.boneIndexs.length;i < n;i++){
				this._bones.push(bones[data.boneIndexs[i]]);
			}
			this.name=data.name;
			this.mix=data.mix;
			this.bendDirection=data.bendDirection;
		}

		__class(IkConstraint,'laya.ani.bone.IkConstraint');
		var __proto=IkConstraint.prototype;
		__proto.apply=function(){
			switch (this._bones.length){
				case 1:
					this._applyIk1(this._bones[0],this._targetBone.resultMatrix.tx,this._targetBone.resultMatrix.ty,this.mix);
					break ;
				case 2:
					if (this.isSpine){
						this._applyIk2(this._bones[0],this._bones[1],this._targetBone.resultMatrix.tx,this._targetBone.resultMatrix.ty,this.bendDirection,this.mix);
						}else{
						this._applyIk3(this._bones[0],this._bones[1],this._targetBone.resultMatrix.tx,this._targetBone.resultMatrix.ty,this.bendDirection,this.mix);
					}
					break ;
				}
		}

		__proto._applyIk1=function(bone,targetX,targetY,alpha){
			var pp=bone.parentBone;
			var id=1 / (pp.resultMatrix.a *pp.resultMatrix.d-pp.resultMatrix.b *pp.resultMatrix.c);
			var x=targetX-pp.resultMatrix.tx;
			var y=targetY-pp.resultMatrix.ty;
			var tx=(x *pp.resultMatrix.d-y *pp.resultMatrix.c)*id-bone.transform.x;
			var ty=(y *pp.resultMatrix.a-x *pp.resultMatrix.b)*id-bone.transform.y;
			var rotationIK=Math.atan2(ty,tx)*IkConstraint.radDeg-0-bone.transform.skX;
			if (bone.transform.scX < 0)rotationIK+=180;
			if (rotationIK > 180)
				rotationIK-=360;
			else if (rotationIK <-180)rotationIK+=360;
			bone.transform.skX=bone.transform.skY=bone.transform.skX+rotationIK *alpha;
			bone.update();
		}

		__proto.updatePos=function(x,y){
			if (this._sp){
				this._sp.pos(x,y);
			}
		}

		__proto._applyIk2=function(parent,child,targetX,targetY,bendDir,alpha){
			if (alpha==0){
				return;
			};
			var px=parent.resultTransform.x,py=parent.resultTransform.y;
			var psx=parent.transform.scX,psy=parent.transform.scY;
			var csx=child.transform.scX;
			var os1=0,os2=0,s2=0;
			if (psx < 0){
				psx=-psx;
				os1=180;
				s2=-1;
				}else {
				os1=0;
				s2=1;
			}
			if (psy < 0){
				psy=-psy;
				s2=-s2;
			}
			if (csx < 0){
				csx=-csx;
				os2=180;
				}else {
				os2=0
			};
			var cx=child.resultTransform.x,cy=NaN,cwx=NaN,cwy=NaN;
			var a=parent.resultMatrix.a,b=parent.resultMatrix.c;
			var c=parent.resultMatrix.b,d=parent.resultMatrix.d;
			var u=Math.abs(psx-psy)<=0.0001;
			if (!u){
				cy=0;
				cwx=a *cx+parent.resultMatrix.tx;
				cwy=c *cx+parent.resultMatrix.ty;
				}else {
				cy=child.resultTransform.y;
				cwx=a *cx+b *cy+parent.resultMatrix.tx;
				cwy=c *cx+d *cy+parent.resultMatrix.ty;
			}
			if (this.isDebug){
				if (!this._sp){
					this._sp=new Sprite();
					Laya.stage.addChild(this._sp);
				}
				this._sp.graphics.clear();
				this._sp.graphics.drawCircle(targetX,targetY,15,"#ffff00");
				this._sp.graphics.drawCircle(cwx,cwy,15,"#ff00ff");
			}
			parent.setRotation(Math.atan2(cwy-parent.resultMatrix.ty,cwx-parent.resultMatrix.tx));
			var pp=parent.parentBone;
			a=pp.resultMatrix.a;
			b=pp.resultMatrix.c;
			c=pp.resultMatrix.b;
			d=pp.resultMatrix.d;
			var id=1 / (a *d-b *c);
			var x=targetX-pp.resultMatrix.tx,y=targetY-pp.resultMatrix.ty;
			var tx=(x *d-y *b)*id-px;
			var ty=(y *a-x *c)*id-py;
			x=cwx-pp.resultMatrix.tx;
			y=cwy-pp.resultMatrix.ty;
			var dx=(x *d-y *b)*id-px;
			var dy=(y *a-x *c)*id-py;
			var l1=Math.sqrt(dx *dx+dy *dy);
			var l2=child.length *csx;
			var a1=NaN,a2=NaN;
			if (u){
				l2 *=psx;
				var cos=(tx *tx+ty *ty-l1 *l1-l2 *l2)/ (2 *l1 *l2);
				if (cos <-1)
					cos=-1;
				else if (cos > 1)cos=1;
				a2=Math.acos(cos)*bendDir;
				a=l1+l2 *cos;
				b=l2 *Math.sin(a2);
				a1=Math.atan2(ty *a-tx *b,tx *a+ty *b);
				}else {
				a=psx *l2;
				b=psy *l2;
				var aa=a *a,bb=b *b,dd=tx *tx+ty *ty,ta=Math.atan2(ty,tx);
				c=bb *l1 *l1+aa *dd-aa *bb;
				var c1=-2 *bb *l1,c2=bb-aa;
				d=c1 *c1-4 *c2 *c;
				if (d > 0){
					var q=Math.sqrt(d);
					if (c1 < 0)q=-q;
					q=-(c1+q)/ 2;
					var r0=q / c2,r1=c / q;
					var r=Math.abs(r0)< Math.abs(r1)? r0 :r1;
					if (r *r <=dd){
						y=Math.sqrt(dd-r *r)*bendDir;
						a1=ta-Math.atan2(y,r);
						a2=Math.atan2(y / psy,(r-l1)/ psx);
					}
				};
				var minAngle=0,minDist=Number.MAX_VALUE,minX=0,minY=0;
				var maxAngle=0,maxDist=0,maxX=0,maxY=0;
				x=l1+a;
				d=x *x;
				if (d > maxDist){
					maxAngle=0;
					maxDist=d;
					maxX=x;
				}
				x=l1-a;
				d=x *x;
				if (d < minDist){
					minAngle=Math.PI;
					minDist=d;
					minX=x;
				};
				var angle=Math.acos(-a *l1 / (aa-bb));
				x=a *Math.cos(angle)+l1;
				y=b *Math.sin(angle);
				d=x *x+y *y;
				if (d < minDist){
					minAngle=angle;
					minDist=d;
					minX=x;
					minY=y;
				}
				if (d > maxDist){
					maxAngle=angle;
					maxDist=d;
					maxX=x;
					maxY=y;
				}
				if (dd <=(minDist+maxDist)/ 2){
					a1=ta-Math.atan2(minY *bendDir,minX);
					a2=minAngle *bendDir;
					}else {
					a1=ta-Math.atan2(maxY *bendDir,maxX);
					a2=maxAngle *bendDir;
				}
			};
			var os=Math.atan2(cy,cx)*s2;
			var rotation=parent.resultTransform.skX;
			a1=(a1-os)*IkConstraint.radDeg+os1-rotation;
			if (a1 > 180)
				a1-=360;
			else if (a1 <-180)a1+=360;
			parent.resultTransform.x=px;
			parent.resultTransform.y=py;
			parent.resultTransform.skX=parent.resultTransform.skY=rotation+a1 *alpha;
			rotation=child.resultTransform.skX;
			rotation=rotation % 360;
			a2=((a2+os)*IkConstraint.radDeg-0)*s2+os2-rotation;
			if (a2 > 180)
				a2-=360;
			else if (a2 <-180)a2+=360;
			child.resultTransform.x=cx;
			child.resultTransform.y=cy;
			child.resultTransform.skX=child.resultTransform.skY=child.resultTransform.skY+a2 *alpha;
			parent.update();
		}

		__proto._applyIk3=function(parent,child,targetX,targetY,bendDir,alpha){
			if (alpha==0){
				return;
			};
			var cwx=NaN,cwy=NaN;
			var x=child.resultMatrix.a *child.length;
			var y=child.resultMatrix.b *child.length;
			var lLL=x *x+y *y;
			var lL=Math.sqrt(lLL);
			var parentX=parent.resultMatrix.tx;
			var parentY=parent.resultMatrix.ty;
			var childX=child.resultMatrix.tx;
			var childY=child.resultMatrix.ty;
			var dX=childX-parentX;
			var dY=childY-parentY;
			var lPP=dX *dX+dY *dY;
			var lP=Math.sqrt(lPP);
			dX=targetX-parent.resultMatrix.tx;
			dY=targetY-parent.resultMatrix.ty;
			var lTT=dX *dX+dY *dY;
			var lT=Math.sqrt(lTT);
			var ikRadianA=0;
			if (lL+lP <=lT || lT+lL <=lP || lT+lP <=lL){
				var rate=NaN;
				if (lL+lP <=lT){
					rate=1;
					}else{
					rate=-1;
				}
				childX=parentX+rate*(targetX-parentX)*lP / lT;
				childY=parentY+rate*(targetY-parentY)*lP / lT;
			}
			else{
				var h=(lPP-lLL+lTT)/ (2 *lTT);
				var r=Math.sqrt(lPP-h *h *lTT)/ lT;
				var hX=parentX+(dX *h);
				var hY=parentY+(dY *h);
				var rX=-dY *r;
				var rY=dX *r;
				if (bendDir>0){
					childX=hX-rX;
					childY=hY-rY;
				}
				else{
					childX=hX+rX;
					childY=hY+rY;
				}
			}
			cwx=childX;
			cwy=childY;
			if (this.isDebug){
				if (!this._sp){
					this._sp=new Sprite();
					Laya.stage.addChild(this._sp);
				}
				this._sp.graphics.clear();
				this._sp.graphics.drawCircle(parentX,parentY,15,"#ff00ff");
				this._sp.graphics.drawCircle(targetX,targetY,15,"#ffff00");
				this._sp.graphics.drawCircle(cwx,cwy,15,"#ff00ff");
			};
			var pRotation=NaN;
			pRotation=Math.atan2(cwy-parent.resultMatrix.ty,cwx-parent.resultMatrix.tx);
			parent.setRotation(pRotation);
			var pTarMatrix;
			pTarMatrix=IkConstraint._tempMatrix;
			pTarMatrix.identity();
			pTarMatrix.rotate(pRotation);
			pTarMatrix.scale(parent.resultMatrix.getScaleX(),parent.resultMatrix.getScaleY());
			pTarMatrix.translate(parent.resultMatrix.tx,parent.resultMatrix.ty);
			pTarMatrix.copyTo(parent.resultMatrix);
			parent.updateChild();
			var childRotation=NaN;
			childRotation=Math.atan2(targetY-cwy,targetX-cwx);
			child.setRotation(childRotation);
			var childTarMatrix;
			childTarMatrix=IkConstraint._tempMatrix;
			childTarMatrix.identity();
			childTarMatrix.rotate(childRotation);
			childTarMatrix.scale(child.resultMatrix.getScaleX(),child.resultMatrix.getScaleY());
			childTarMatrix.translate(cwx,cwy);
			pTarMatrix.copyTo(child.resultMatrix);
			child.updateChild();
		}

		__static(IkConstraint,
		['radDeg',function(){return this.radDeg=180 / Math.PI;},'degRad',function(){return this.degRad=Math.PI / 180;},'_tempMatrix',function(){return this._tempMatrix=new Matrix();}
		]);
		return IkConstraint;
	})()


	/**
	*@private
	*/
	//class laya.ani.bone.IkConstraintData
	var IkConstraintData=(function(){
		function IkConstraintData(){
			this.name=null;
			this.targetBoneName=null;
			this.bendDirection=1;
			this.mix=1;
			this.isSpine=true;
			this.targetBoneIndex=-1;
			this.boneNames=[];
			this.boneIndexs=[];
		}

		__class(IkConstraintData,'laya.ani.bone.IkConstraintData');
		return IkConstraintData;
	})()


	/**
	*@private
	*Mesh数据处理工具
	*@version 1.0
	*
	*@created 2017-4-28 下午2:46:23
	*/
	//class laya.ani.bone.MeshTools
	var MeshTools=(function(){
		function MeshTools(){};
		__class(MeshTools,'laya.ani.bone.MeshTools');
		MeshTools.findEdge=function(verticles,offI,min){
			(offI===void 0)&& (offI=0);
			(min===void 0)&& (min=true);
			var i=0,len=0;
			var tIndex=0;
			len=verticles.length;
			tIndex=-1;
			for (i=0;i < len;i+=2){
				if (tIndex < 0 || (min==(verticles[tIndex+offI] < verticles[i+offI]))){
					tIndex=i;
				}
			}
			return tIndex;
		}

		MeshTools.findBestTriangle=function(verticles){
			var topI=0;
			topI=MeshTools.findEdge(verticles,1,true);
			var bottomI=0;
			bottomI=MeshTools.findEdge(verticles,1,false);
			var leftI=0;
			leftI=MeshTools.findEdge(verticles,0,true);
			var rightI=0;
			rightI=MeshTools.findEdge(verticles,0,false);
			var rst;
			rst=MeshTools._bestTriangle;
			rst.length=0;
			rst.push(leftI,rightI);
			if (rst.indexOf(topI)< 0)rst.push(topI);
			if (rst.indexOf(bottomI)< 0)rst.push(bottomI);
			return rst;
		}

		MeshTools.solveMesh=function(mesh,rst){
			rst=rst||[];
			rst.length=0;
			var mUv;
			mUv=mesh.uvs;
			var mVer;
			mVer=mesh.vertices;
			var uvAbs;
			var indexs;
			indexs=MeshTools.findBestTriangle(mUv);
			var index0=0;
			var index1=0;
			var index2=0;
			index0=indexs[0];
			index1=indexs[1];
			index2=indexs[2];
			MeshTools._absArr.length=0;
			uvAbs=MeshTools.solvePoints(mesh.texture.uv,mUv[index0],mUv[index0+1],mUv[index1]-mUv[index0],mUv[index1+1]-mUv[index0+1],mUv[index2]-mUv[index0],mUv[index2+1]-mUv[index0+1],MeshTools._absArr);
			var newVerticles;
			newVerticles=MeshTools.transPoints(uvAbs,mVer[index0],mVer[index0+1],mVer[index1]-mVer[index0],mVer[index1+1]-mVer[index0+1],mVer[index2]-mVer[index0],mVer[index2+1]-mVer[index0+1],rst);
			return newVerticles;
		}

		MeshTools.solvePoints=function(pointList,oX,oY,v1x,v1y,v2x,v2y,rst){
			rst=rst||[];
			var i=0,len=0;
			len=pointList.length;
			var tRst;
			for (i=0;i < len;i+=2){
				tRst=MeshTools.solve2(pointList[i],pointList[i+1],oX,oY,v1x,v1y,v2x,v2y);
				rst.push(tRst[0],tRst[1]);
			}
			return rst;
		}

		MeshTools.transPoints=function(abs,oX,oY,v1x,v1y,v2x,v2y,rst){
			rst=rst|| [];
			var i=0,len=0;
			len=abs.length;
			var tRst;
			for (i=0;i < len;i+=2){
				tRst=MeshTools.transPoint(abs[i],abs[i+1],oX,oY,v1x,v1y,v2x,v2y,rst);
			}
			return rst;
		}

		MeshTools.transPoint=function(a,b,oX,oY,v1x,v1y,v2x,v2y,rst){
			rst=rst|| [];
			var nX=NaN;
			var nY=NaN;
			nX=oX+v1x *a+v2x *b;
			nY=oY+v1y *a+v2y *b;
			rst.push(nX,nY)
			return rst;
		}

		MeshTools.solve2=function(rx,ry,oX,oY,v1x,v1y,v2x,v2y,rv,rst){
			(rv===void 0)&& (rv=false);
			rst=rst||[];
			var a=NaN,b=NaN;
			if (v1x==0){
				return MeshTools.solve2(rx,ry,oX,oY,v2x,v2y,v1x,v1y,true,rst);
			};
			var dX=NaN;
			var dY=NaN;
			dX=rx-oX;
			dY=ry-oY;
			b=(dY-dX *v1y / v1x)/ (v2y-v2x *v1y / v1x);
			a=(dX-b *v2x)/ v1x;
			if(rv){
				rst.push(b,a);
				}else{
				rst.push(a,b);
			}
			return rst;
		}

		MeshTools.solve=function(pointC,point0,v1,v2){
			return MeshTools.solve2(pointC.x,pointC.y,point0.x,point0.y,v1.x,v1.y,v2.x,v2.y);
		}

		MeshTools._bestTriangle=[];
		MeshTools._absArr=[];
		return MeshTools;
	})()


	/**
	*@private
	*路径作用器
	*1，生成根据骨骼计算控制点
	*2，根据控制点生成路径，并计算路径上的节点
	*3，根据节点，重新调整骨骼位置
	*/
	//class laya.ani.bone.PathConstraint
	var PathConstraint=(function(){
		function PathConstraint(data,bones){
			this.target=null;
			this.data=null;
			this.bones=null;
			this.position=NaN;
			this.spacing=NaN;
			this.rotateMix=NaN;
			this.translateMix=NaN;
			this._debugKey=false;
			this._spaces=null;
			this._segments=[];
			this._curves=[];
			this.data=data;
			this.position=data.position;
			this.spacing=data.spacing;
			this.rotateMix=data.rotateMix;
			this.translateMix=data.translateMix;
			this.bones=[];
			var tBoneIds=this.data.bones;
			for (var i=0,n=tBoneIds.length;i < n;i++){
				this.bones.push(bones[tBoneIds[i]]);
			}
		}

		__class(PathConstraint,'laya.ani.bone.PathConstraint');
		var __proto=PathConstraint.prototype;
		/**
		*计算骨骼在路径上的节点
		*@param boneSlot
		*@param boneMatrixArray
		*@param graphics
		*/
		__proto.apply=function(boneList,graphics){
			if (!this.target)
				return;
			var tTranslateMix=this.translateMix;
			var tRotateMix=this.translateMix;
			var tTranslate=tTranslateMix > 0;
			var tRotate=tRotateMix > 0;
			var tSpacingMode=this.data.spacingMode;
			var tLengthSpacing=tSpacingMode=="length";
			var tRotateMode=this.data.rotateMode;
			var tTangents=tRotateMode=="tangent";
			var tScale=tRotateMode=="chainScale";
			var lengths=[];
			var boneCount=this.bones.length;
			var spacesCount=tTangents ? boneCount :boneCount+1;
			var spaces=[];
			this._spaces=spaces;
			spaces[0]=this.position;
			var spacing=this.spacing;
			if (tScale || tLengthSpacing){
				for (var i=0,n=spacesCount-1;i < n;){
					var bone=this.bones[i];
					var length=bone.length;
					var x=length *bone.resultMatrix.a;
					var y=length *bone.resultMatrix.b;
					length=Math.sqrt(x *x+y *y);
					if (tScale)
						lengths[i]=length;
					spaces[++i]=tLengthSpacing ? Math.max(0,length+spacing):spacing;
				}
			}
			else {
				for (i=1;i < spacesCount;i++){
					spaces[i]=spacing;
				}
			};
			var positions=this.computeWorldPositions(this.target,boneList,graphics,spacesCount,tTangents,this.data.positionMode=="percent",tSpacingMode=="percent");
			if (this._debugKey){
				for (i=0;i < positions.length;i++){
					graphics.drawCircle(positions[i++],positions[i++],5,"#00ff00");
				};
				var tLinePos=[];
				for (i=0;i < positions.length;i++){
					tLinePos.push(positions[i++],positions[i++]);
				}
				graphics.drawLines(0,0,tLinePos,"#ff0000");
			};
			var skeletonX=NaN;
			var skeletonY=NaN;
			var boneX=positions[0];
			var boneY=positions[1];
			var offsetRotation=this.data.offsetRotation;
			var tip=tRotateMode=="chain" && offsetRotation==0;
			var p=NaN;
			for (i=0,p=3;i < boneCount;i++,p+=3){
				bone=this.bones[i];
				bone.resultMatrix.tx+=(boneX-bone.resultMatrix.tx)*tTranslateMix;
				bone.resultMatrix.ty+=(boneY-bone.resultMatrix.ty)*tTranslateMix;
				x=positions[p];
				y=positions[p+1];
				var dx=x-boneX,dy=y-boneY;
				if (tScale){
					length=lengths[i];
					if (length !=0){
						var s=(Math.sqrt(dx *dx+dy *dy)/ length-1)*tRotateMix+1;
						bone.resultMatrix.a *=s;
						bone.resultMatrix.c *=s;
					}
				}
				boneX=x;
				boneY=y;
				if (tRotate){
					var a=bone.resultMatrix.a;
					var b=bone.resultMatrix.c;
					var c=bone.resultMatrix.b;
					var d=bone.resultMatrix.d;
					var r=NaN;
					var cos=NaN;
					var sin=NaN;
					if (tTangents){
						r=positions[p-1];
					}
					else if (spaces[i+1]==0){
						r=positions[p+2];
					}
					else {
						r=Math.atan2(dy,dx);
					}
					r-=Math.atan2(c,a)-offsetRotation / 180 *Math.PI;
					if (tip){
						cos=Math.cos(r);
						sin=Math.sin(r);
						length=bone.length;
						boneX+=(length *(cos *a-sin *c)-dx)*tRotateMix;
						boneY+=(length *(sin *a+cos *c)-dy)*tRotateMix;
					}
					if (r > Math.PI){
						r-=(Math.PI *2);
					}
					else if (r <-Math.PI){
						r+=(Math.PI *2);
					}
					r *=tRotateMix;
					cos=Math.cos(r);
					sin=Math.sin(r);
					bone.resultMatrix.a=cos *a-sin *c;
					bone.resultMatrix.c=cos *b-sin *d;
					bone.resultMatrix.b=sin *a+cos *c;
					bone.resultMatrix.d=sin *b+cos *d;
				}
			}
		}

		/**
		*计算顶点的世界坐标
		*@param boneSlot
		*@param boneList
		*@param start
		*@param count
		*@param worldVertices
		*@param offset
		*/
		__proto.computeWorldVertices2=function(boneSlot,boneList,start,count,worldVertices,offset){
			var tBones=boneSlot.currDisplayData.bones;
			var tWeights=boneSlot.currDisplayData.weights;
			var tTriangles=boneSlot.currDisplayData.triangles;
			var tMatrix;
			var i=0;
			var v=0;
			var skip=0;
			var n=0;
			var w=0;
			var b=0;
			var wx=0;
			var wy=0;
			var vx=0;
			var vy=0;
			var bone;
			var len=0;
			if (tBones==null){
				if (!tTriangles)tTriangles=tWeights;
				if (boneSlot.deformData)
					tTriangles=boneSlot.deformData;
				var parentName;
				parentName=boneSlot.parent;
				if (boneList){
					len=boneList.length;
					for (i=0;i < len;i++){
						if (boneList[i].name==parentName){
							bone=boneList[i];
							break ;
						}
					}
				};
				var tBoneMt;
				if (bone){
					tBoneMt=bone.resultMatrix;
				}
				if (!tBoneMt)tBoneMt=PathConstraint._tempMt;
				var x=tBoneMt.tx;
				var y=tBoneMt.ty;
				var a=tBoneMt.a,bb=tBoneMt.b,c=tBoneMt.c,d=tBoneMt.d;
				if(bone)d*=bone.d;
				for (v=start,w=offset;w < count;v+=2,w+=2){
					vx=tTriangles[v],vy=tTriangles[v+1];
					worldVertices[w]=vx *a+vy *bb+x;
					worldVertices[w+1]=-(vx *c+vy *d+y);
				}
				return;
			}
			for (i=0;i < start;i+=2){
				n=tBones[v];
				v+=n+1;
				skip+=n;
			};
			var skeletonBones=boneList;
			for (w=offset,b=skip *3;w < count;w+=2){
				wx=0,wy=0;
				n=tBones[v++];
				n+=v;
				for (;v < n;v++,b+=3){
					tMatrix=skeletonBones[tBones[v]].resultMatrix;
					vx=tWeights[b];
					vy=tWeights[b+1];
					var weight=tWeights[b+2];
					wx+=(vx *tMatrix.a+vy *tMatrix.c+tMatrix.tx)*weight;
					wy+=(vx *tMatrix.b+vy *tMatrix.d+tMatrix.ty)*weight;
				}
				worldVertices[w]=wx;
				worldVertices[w+1]=wy;
			}
		}

		/**
		*计算路径上的节点
		*@param boneSlot
		*@param boneList
		*@param graphics
		*@param spacesCount
		*@param tangents
		*@param percentPosition
		*@param percentSpacing
		*@return
		*/
		__proto.computeWorldPositions=function(boneSlot,boneList,graphics,spacesCount,tangents,percentPosition,percentSpacing){
			var tBones=boneSlot.currDisplayData.bones;
			var tWeights=boneSlot.currDisplayData.weights;
			var tTriangles=boneSlot.currDisplayData.triangles;
			var tRx=0;
			var tRy=0;
			var nn=0;
			var tMatrix;
			var tX=NaN;
			var tY=NaN;
			var tB=0;
			var tWeight=0;
			var tVertices=[];
			var i=0,j=0,n=0;
			var verticesLength=boneSlot.currDisplayData.verLen;
			var target=boneSlot;
			var position=this.position;
			var spaces=this._spaces;
			var world=[];
			var out=[];
			var closed=false;
			var curveCount=verticesLength / 6;
			var prevCurve=-1;
			var pathLength=NaN;
			var o=0,curve=0;
			var p=NaN;
			var space=NaN;
			var prev=NaN;
			var length=NaN;
			if (!true){
				var lengths=boneSlot.currDisplayData.lengths;
				curveCount-=closed ? 1 :2;
				pathLength=lengths[curveCount];
				if (percentPosition)
					position *=pathLength;
				if (percentSpacing){
					for (i=0;i < spacesCount;i++)
					spaces[i] *=pathLength;
				}
				world.length=8;
				for (i=0,o=0,curve=0;i < spacesCount;i++,o+=3){
					space=spaces[i];
					position+=space;
					p=position;
					if (closed){
						p %=pathLength;
						if (p < 0)
							p+=pathLength;
						curve=0;
					}
					else if (p < 0){
						if (prevCurve !=PathConstraint.BEFORE){
							prevCurve=PathConstraint.BEFORE;
							this.computeWorldVertices2(target,boneList,2,4,world,0);
						}
						this.addBeforePosition(p,world,0,out,o);
						continue ;
					}
					else if (p > pathLength){
						if (prevCurve !=PathConstraint.AFTER){
							prevCurve=PathConstraint.AFTER;
							this.computeWorldVertices2(target,boneList,verticesLength-6,4,world,0);
						}
						this.addAfterPosition(p-pathLength,world,0,out,o);
						continue ;
					}
					for (;;curve++){
						length=lengths[curve];
						if (p > length)
							continue ;
						if (curve==0)
							p /=length;
						else {
							prev=lengths[curve-1];
							p=(p-prev)/ (length-prev);
						}
						break ;
					}
					if (curve !=prevCurve){
						prevCurve=curve;
						if (closed && curve==curveCount){
							this.computeWorldVertices2(target,boneList,verticesLength-4,4,world,0);
							this.computeWorldVertices2(target,boneList,0,4,world,4);
						}
						else
						this.computeWorldVertices2(target,boneList,curve *6+2,8,world,0);
					}
					this.addCurvePosition(p,world[0],world[1],world[2],world[3],world[4],world[5],world[6],world[7],out,o,tangents || (i > 0 && space==0));
				}
				return out;
			}
			if (closed){
				verticesLength+=2;
				world[verticesLength-2]=world[0];
				world[verticesLength-1]=world[1];
			}
			else {
				curveCount--;
				verticesLength-=4;
				this.computeWorldVertices2(boneSlot,boneList,2,verticesLength,tVertices,0);
				if (this._debugKey){
					for (i=0;i < tVertices.length;){
						graphics.drawCircle(tVertices[i++],tVertices[i++],10,"#ff0000");
					}
				}
				world=tVertices;
			}
			this._curves.length=curveCount;
			var curves=this._curves;
			pathLength=0;
			var x1=world[0],y1=world[1],cx1=0,cy1=0,cx2=0,cy2=0,x2=0,y2=0;
			var tmpx=NaN,tmpy=NaN,dddfx=NaN,dddfy=NaN,ddfx=NaN,ddfy=NaN,dfx=NaN,dfy=NaN;
			var w=0;
			for (i=0,w=2;i < curveCount;i++,w+=6){
				cx1=world[w];
				cy1=world[w+1];
				cx2=world[w+2];
				cy2=world[w+3];
				x2=world[w+4];
				y2=world[w+5];
				tmpx=(x1-cx1 *2+cx2)*0.1875;
				tmpy=(y1-cy1 *2+cy2)*0.1875;
				dddfx=((cx1-cx2)*3-x1+x2)*0.09375;
				dddfy=((cy1-cy2)*3-y1+y2)*0.09375;
				ddfx=tmpx *2+dddfx;
				ddfy=tmpy *2+dddfy;
				dfx=(cx1-x1)*0.75+tmpx+dddfx *0.16666667;
				dfy=(cy1-y1)*0.75+tmpy+dddfy *0.16666667;
				pathLength+=Math.sqrt(dfx *dfx+dfy *dfy);
				dfx+=ddfx;
				dfy+=ddfy;
				ddfx+=dddfx;
				ddfy+=dddfy;
				pathLength+=Math.sqrt(dfx *dfx+dfy *dfy);
				dfx+=ddfx;
				dfy+=ddfy;
				pathLength+=Math.sqrt(dfx *dfx+dfy *dfy);
				dfx+=ddfx+dddfx;
				dfy+=ddfy+dddfy;
				pathLength+=Math.sqrt(dfx *dfx+dfy *dfy);
				curves[i]=pathLength;
				x1=x2;
				y1=y2;
			}
			if (percentPosition)
				position *=pathLength;
			if (percentSpacing){
				for (i=0;i < spacesCount;i++)
				spaces[i] *=pathLength;
			};
			var segments=this._segments;
			var curveLength=0;
			var segment=0;
			for (i=0,o=0,curve=0,segment=0;i < spacesCount;i++,o+=3){
				space=spaces[i];
				position+=space;
				p=position;
				if (closed){
					p %=pathLength;
					if (p < 0)
						p+=pathLength;
					curve=0;
				}
				else if (p < 0){
					this.addBeforePosition(p,world,0,out,o);
					continue ;
				}
				else if (p > pathLength){
					this.addAfterPosition(p-pathLength,world,verticesLength-4,out,o);
					continue ;
				}
				for (;;curve++){
					length=curves[curve];
					if (p > length)
						continue ;
					if (curve==0)
						p /=length;
					else {
						prev=curves[curve-1];
						p=(p-prev)/ (length-prev);
					}
					break ;
				}
				if (curve !=prevCurve){
					prevCurve=curve;
					var ii=curve *6;
					x1=world[ii];
					y1=world[ii+1];
					cx1=world[ii+2];
					cy1=world[ii+3];
					cx2=world[ii+4];
					cy2=world[ii+5];
					x2=world[ii+6];
					y2=world[ii+7];
					tmpx=(x1-cx1 *2+cx2)*0.03;
					tmpy=(y1-cy1 *2+cy2)*0.03;
					dddfx=((cx1-cx2)*3-x1+x2)*0.006;
					dddfy=((cy1-cy2)*3-y1+y2)*0.006;
					ddfx=tmpx *2+dddfx;
					ddfy=tmpy *2+dddfy;
					dfx=(cx1-x1)*0.3+tmpx+dddfx *0.16666667;
					dfy=(cy1-y1)*0.3+tmpy+dddfy *0.16666667;
					curveLength=Math.sqrt(dfx *dfx+dfy *dfy);
					segments[0]=curveLength;
					for (ii=1;ii < 8;ii++){
						dfx+=ddfx;
						dfy+=ddfy;
						ddfx+=dddfx;
						ddfy+=dddfy;
						curveLength+=Math.sqrt(dfx *dfx+dfy *dfy);
						segments[ii]=curveLength;
					}
					dfx+=ddfx;
					dfy+=ddfy;
					curveLength+=Math.sqrt(dfx *dfx+dfy *dfy);
					segments[8]=curveLength;
					dfx+=ddfx+dddfx;
					dfy+=ddfy+dddfy;
					curveLength+=Math.sqrt(dfx *dfx+dfy *dfy);
					segments[9]=curveLength;
					segment=0;
				}
				p *=curveLength;
				for (;;segment++){
					length=segments[segment];
					if (p > length)
						continue ;
					if (segment==0)
						p /=length;
					else {
						prev=segments[segment-1];
						p=segment+(p-prev)/ (length-prev);
					}
					break ;
				}
				this.addCurvePosition(p *0.1,x1,y1,cx1,cy1,cx2,cy2,x2,y2,out,o,tangents || (i > 0 && space==0));
			}
			return out;
		}

		__proto.addBeforePosition=function(p,temp,i,out,o){
			var x1=temp[i],y1=temp[i+1],dx=temp[i+2]-x1,dy=temp[i+3]-y1,r=Math.atan2(dy,dx);
			out[o]=x1+p *Math.cos(r);
			out[o+1]=y1+p *Math.sin(r);
			out[o+2]=r;
		}

		__proto.addAfterPosition=function(p,temp,i,out,o){
			var x1=temp[i+2],y1=temp[i+3],dx=x1-temp[i],dy=y1-temp[i+1],r=Math.atan2(dy,dx);
			out[o]=x1+p *Math.cos(r);
			out[o+1]=y1+p *Math.sin(r);
			out[o+2]=r;
		}

		__proto.addCurvePosition=function(p,x1,y1,cx1,cy1,cx2,cy2,x2,y2,out,o,tangents){
			if (p==0)
				p=0.0001;
			var tt=p *p,ttt=tt *p,u=1-p,uu=u *u,uuu=uu *u;
			var ut=u *p,ut3=ut *3,uut3=u *ut3,utt3=ut3 *p;
			var x=x1 *uuu+cx1 *uut3+cx2 *utt3+x2 *ttt,y=y1 *uuu+cy1 *uut3+cy2 *utt3+y2 *ttt;
			out[o]=x;
			out[o+1]=y;
			if (tangents){
				out[o+2]=Math.atan2(y-(y1 *uu+cy1 *ut *2+cy2 *tt),x-(x1 *uu+cx1 *ut *2+cx2 *tt));
			}
			else {
				out[o+2]=0;
			}
		}

		PathConstraint.NONE=-1;
		PathConstraint.BEFORE=-2;
		PathConstraint.AFTER=-3;
		__static(PathConstraint,
		['_tempMt',function(){return this._tempMt=new Matrix();}
		]);
		return PathConstraint;
	})()


	/**
	*@private
	*/
	//class laya.ani.bone.PathConstraintData
	var PathConstraintData=(function(){
		function PathConstraintData(){
			this.name=null;
			this.target=null;
			this.positionMode=null;
			this.spacingMode=null;
			this.rotateMode=null;
			this.offsetRotation=NaN;
			this.position=NaN;
			this.spacing=NaN;
			this.rotateMix=NaN;
			this.translateMix=NaN;
			this.bones=[];
		}

		__class(PathConstraintData,'laya.ani.bone.PathConstraintData');
		return PathConstraintData;
	})()


	/**
	*@private
	*/
	//class laya.ani.bone.SkinData
	var SkinData=(function(){
		function SkinData(){
			this.name=null;
			this.slotArr=[];
		}

		__class(SkinData,'laya.ani.bone.SkinData');
		return SkinData;
	})()


	/**
	*@private
	*/
	//class laya.ani.bone.SkinSlotDisplayData
	var SkinSlotDisplayData=(function(){
		function SkinSlotDisplayData(){
			this.name=null;
			this.attachmentName=null;
			this.type=0;
			this.transform=null;
			this.width=NaN;
			this.height=NaN;
			this.texture=null;
			this.bones=null;
			this.uvs=null;
			this.weights=null;
			this.triangles=null;
			this.vertices=null;
			this.lengths=null;
			this.verLen=0;
		}

		__class(SkinSlotDisplayData,'laya.ani.bone.SkinSlotDisplayData');
		var __proto=SkinSlotDisplayData.prototype;
		__proto.createTexture=function(currTexture){
			if (this.texture)return this.texture;
			this.texture=new Texture(currTexture.bitmap,this.uvs);
			if (this.uvs[0] > this.uvs[4]
				&& this.uvs[1] > this.uvs[5]){
				this.texture.width=currTexture.height;
				this.texture.height=currTexture.width;
				this.texture.offsetX=-currTexture.offsetX;
				this.texture.offsetY=-currTexture.offsetY;
				this.texture.sourceWidth=currTexture.sourceHeight;
				this.texture.sourceHeight=currTexture.sourceWidth;
				}else {
				this.texture.width=currTexture.width;
				this.texture.height=currTexture.height;
				this.texture.offsetX=-currTexture.offsetX;
				this.texture.offsetY=-currTexture.offsetY;
				this.texture.sourceWidth=currTexture.sourceWidth;
				this.texture.sourceHeight=currTexture.sourceHeight;
			}
			return this.texture;
		}

		__proto.destory=function(){
			if (this.texture)this.texture.destroy();
		}

		return SkinSlotDisplayData;
	})()


	/**
	*@private
	*/
	//class laya.ani.bone.SlotData
	var SlotData=(function(){
		function SlotData(){
			this.name=null;
			this.displayArr=[];
		}

		__class(SlotData,'laya.ani.bone.SlotData');
		var __proto=SlotData.prototype;
		__proto.getDisplayByName=function(name){
			var tDisplay;
			for (var i=0,n=this.displayArr.length;i < n;i++){
				tDisplay=this.displayArr[i];
				if (tDisplay.attachmentName==name){
					return i;
				}
			}
			return-1;
		}

		return SlotData;
	})()


	/**
	*@private
	*/
	//class laya.ani.bone.TfConstraint
	var TfConstraint=(function(){
		function TfConstraint(data,bones){
			this._data=null;
			this._bones=null;
			this.target=null;
			this.rotateMix=NaN;
			this.translateMix=NaN;
			this.scaleMix=NaN;
			this.shearMix=NaN;
			this._temp=__newvec(2,0);
			this._data=data;
			if (this._bones==null){
				this._bones=[];
			}
			this.target=bones[data.targetIndex];
			var j=0,n=0;
			for (j=0,n=data.boneIndexs.length;j < n;j++){
				this._bones.push(bones[data.boneIndexs[j]]);
			}
			this.rotateMix=data.rotateMix;
			this.translateMix=data.translateMix;
			this.scaleMix=data.scaleMix;
			this.shearMix=data.shearMix;
		}

		__class(TfConstraint,'laya.ani.bone.TfConstraint');
		var __proto=TfConstraint.prototype;
		__proto.apply=function(){
			var tTfBone;
			var ta=this.target.resultMatrix.a,tb=this.target.resultMatrix.b,tc=this.target.resultMatrix.c,td=this.target.resultMatrix.d;
			for (var j=0,n=this._bones.length;j < n;j++){
				tTfBone=this._bones[j];
				if (this.rotateMix > 0){
					var a=tTfBone.resultMatrix.a,b=tTfBone.resultMatrix.b,c=tTfBone.resultMatrix.c,d=tTfBone.resultMatrix.d;
					var r=Math.atan2(tc,ta)-Math.atan2(c,a)+this._data.offsetRotation *Math.PI / 180;
					if (r > Math.PI)
						r-=Math.PI *2;
					else if (r <-Math.PI)r+=Math.PI *2;
					r *=this.rotateMix;
					var cos=Math.cos(r),sin=Math.sin(r);
					tTfBone.resultMatrix.a=cos *a-sin *c;
					tTfBone.resultMatrix.b=cos *b-sin *d;
					tTfBone.resultMatrix.c=sin *a+cos *c;
					tTfBone.resultMatrix.d=sin *b+cos *d;
				}
				if (this.translateMix){
					this._temp[0]=this._data.offsetX;
					this._temp[1]=this._data.offsetY;
					this.target.localToWorld(this._temp);
					tTfBone.resultMatrix.tx+=(this._temp[0]-tTfBone.resultMatrix.tx)*this.translateMix;
					tTfBone.resultMatrix.ty+=(this._temp[1]-tTfBone.resultMatrix.ty)*this.translateMix;
					tTfBone.updateChild();
				}
				if (this.scaleMix > 0){
					var bs=Math.sqrt(tTfBone.resultMatrix.a *tTfBone.resultMatrix.a+tTfBone.resultMatrix.c *tTfBone.resultMatrix.c);
					var ts=Math.sqrt(ta *ta+tc *tc);
					var s=bs > 0.00001 ? (bs+(ts-bs+this._data.offsetScaleX)*this.scaleMix)/ bs :0;
					tTfBone.resultMatrix.a *=s;
					tTfBone.resultMatrix.c *=s;
					bs=Math.sqrt(tTfBone.resultMatrix.b *tTfBone.resultMatrix.b+tTfBone.resultMatrix.d *tTfBone.resultMatrix.d);
					ts=Math.sqrt(tb *tb+td *td);
					s=bs > 0.00001 ? (bs+(ts-bs+this._data.offsetScaleY)*this.scaleMix)/ bs :0;
					tTfBone.resultMatrix.b *=s;
					tTfBone.resultMatrix.d *=s;
				}
				if (this.shearMix > 0){
					b=tTfBone.resultMatrix.b,d=tTfBone.resultMatrix.d;
					var by=Math.atan2(d,b);
					r=Math.atan2(td,tb)-Math.atan2(tc,ta)-(by-Math.atan2(tTfBone.resultMatrix.c,tTfBone.resultMatrix.a));
					if (r > Math.PI)
						r-=Math.PI *2;
					else if (r <-Math.PI)r+=Math.PI *2;
					r=by+(r+this._data.offsetShearY *Math.PI / 180)*this.shearMix;
					s=Math.sqrt(b *b+d *d);
					tTfBone.resultMatrix.b=Math.cos(r)*s;
					tTfBone.resultMatrix.d=Math.sin(r)*s;
				}
			}
		}

		return TfConstraint;
	})()


	/**
	*@private
	*/
	//class laya.ani.bone.TfConstraintData
	var TfConstraintData=(function(){
		function TfConstraintData(){
			this.name=null;
			this.targetIndex=0;
			this.rotateMix=NaN;
			this.translateMix=NaN;
			this.scaleMix=NaN;
			this.shearMix=NaN;
			this.offsetRotation=NaN;
			this.offsetX=NaN;
			this.offsetY=NaN;
			this.offsetScaleX=NaN;
			this.offsetScaleY=NaN;
			this.offsetShearY=NaN;
			this.boneIndexs=[];
		}

		__class(TfConstraintData,'laya.ani.bone.TfConstraintData');
		return TfConstraintData;
	})()


	/**
	*@private
	*/
	//class laya.ani.bone.Transform
	var Transform=(function(){
		function Transform(){
			this.skX=0;
			this.skY=0;
			this.scX=1;
			this.scY=1;
			this.x=0;
			this.y=0;
			this.skewX=0;
			this.skewY=0;
			this.mMatrix=null;
		}

		__class(Transform,'laya.ani.bone.Transform');
		var __proto=Transform.prototype;
		__proto.initData=function(data){
			if (data.x !=undefined){
				this.x=data.x;
			}
			if (data.y !=undefined){
				this.y=data.y;
			}
			if (data.skX !=undefined){
				this.skX=data.skX;
			}
			if (data.skY !=undefined){
				this.skY=data.skY;
			}
			if (data.scX !=undefined){
				this.scX=data.scX;
			}
			if (data.scY !=undefined){
				this.scY=data.scY;
			}
		}

		__proto.getMatrix=function(){
			var tMatrix;
			if (this.mMatrix){
				tMatrix=this.mMatrix;
				}else {
				tMatrix=this.mMatrix=new Matrix();
			}
			tMatrix.identity();
			tMatrix.scale(this.scX,this.scY);
			if (this.skewX || this.skewY){
				this.skew(tMatrix,this.skewX *Math.PI / 180,this.skewY *Math.PI / 180);
			}
			tMatrix.rotate(this.skX *Math.PI / 180);
			tMatrix.translate(this.x,this.y);
			return tMatrix;
		}

		__proto.skew=function(m,x,y){
			var sinX=Math.sin(y);
			var cosX=Math.cos(y);
			var sinY=Math.sin(x);
			var cosY=Math.cos(x);
			m.setTo(m.a *cosY-m.b *sinX,
			m.a *sinY+m.b *cosX,
			m.c *cosY-m.d *sinX,
			m.c *sinY+m.d *cosX,
			m.tx *cosY-m.ty *sinX,
			m.tx *sinY+m.ty *cosX);
			return m;
		}

		return Transform;
	})()


	/**
	*用于UV转换的工具类
	*@private
	*/
	//class laya.ani.bone.UVTools
	var UVTools=(function(){
		function UVTools(){}
		__class(UVTools,'laya.ani.bone.UVTools');
		UVTools.getRelativeUV=function(bigUV,smallUV,rst){
			var startX=bigUV[0];
			var width=bigUV[2]-bigUV[0];
			var startY=bigUV[1];
			var height=bigUV[5]-bigUV[1];
			if(!rst)rst=[];
			rst.length=smallUV.length;
			var i=0,len=0;
			len=rst.length;
			var dWidth=1 / width;
			var dHeight=1 / height;
			for (i=0;i < len;i+=2){
				rst[i]=(smallUV[i]-startX)*dWidth;
				rst[i+1]=(smallUV[i+1]-startY)*dHeight;
			}
			return rst;
		}

		UVTools.getAbsoluteUV=function(bigUV,smallUV,rst){
			if (bigUV[0]==0 && bigUV[1]==0 && bigUV[4]==1 && bigUV[5]==1){
				if (rst){
					Utils.copyArray(rst,smallUV);
					return rst;
					}else{
					return smallUV;
				}
			};
			var startX=bigUV[0];
			var width=bigUV[2]-bigUV[0];
			var startY=bigUV[1];
			var height=bigUV[5]-bigUV[1];
			if(!rst)rst=[];
			rst.length=smallUV.length;
			var i=0,len=0;
			len=rst.length;
			for (i=0;i < len;i+=2){
				rst[i]=smallUV[i]*width+startX;
				rst[i+1]=smallUV[i+1]*height+startY;
			}
			return rst;
		}

		return UVTools;
	})()


	/**
	*@private
	*@author ...
	*/
	//class laya.ani.KeyFramesContent
	var KeyFramesContent=(function(){
		function KeyFramesContent(){
			this.startTime=NaN;
			this.duration=NaN;
			this.interpolationData=null;
			this.data=null;
			this.nextData=null;
		}

		__class(KeyFramesContent,'laya.ani.KeyFramesContent');
		return KeyFramesContent;
	})()


	/**
	*@private
	*...
	*@author ww
	*/
	//class laya.ani.math.BezierLerp
	var BezierLerp=(function(){
		function BezierLerp(){}
		__class(BezierLerp,'laya.ani.math.BezierLerp');
		BezierLerp.getBezierRate=function(t,px0,py0,px1,py1){
			var key=BezierLerp._getBezierParamKey(px0,py0,px1,py1);
			var vKey=key *100+t;
			if (BezierLerp._bezierResultCache[vKey])return BezierLerp._bezierResultCache[vKey];
			var points=BezierLerp._getBezierPoints(px0,py0,px1,py1,key);
			var i=0,len=0;
			len=points.length;
			for (i=0;i < len;i+=2){
				if (t <=points[i]){
					BezierLerp._bezierResultCache[vKey]=points[i+1];
					return points[i+1];
				}
			}
			BezierLerp._bezierResultCache[vKey]=1;
			return 1;
		}

		BezierLerp._getBezierParamKey=function(px0,py0,px1,py1){
			return (((px0 *100+py0)*100+px1)*100+py1)*100;
		}

		BezierLerp._getBezierPoints=function(px0,py0,px1,py1,key){
			if (BezierLerp._bezierPointsCache[key])return BezierLerp._bezierPointsCache[key];
			var controlPoints;
			controlPoints=[0,0,px0,py0,px1,py1,1,1];
			var bz;
			bz=new Bezier();
			var points;
			points=bz.getBezierPoints(controlPoints,100,3);
			BezierLerp._bezierPointsCache[key]=points;
			return points;
		}

		BezierLerp._bezierResultCache={};
		BezierLerp._bezierPointsCache={};
		return BezierLerp;
	})()


	/**
	*<code>AnimationPlayer</code> 类用于动画播放器。
	*/
	//class laya.ani.AnimationPlayer extends laya.events.EventDispatcher
	var AnimationPlayer=(function(_super){
		function AnimationPlayer(){
			this._destroyed=false;
			this._templet=null;
			this._currentTime=NaN;
			this._currentFrameTime=NaN;
			this._playStart=NaN;
			this._playEnd=NaN;
			this._playDuration=NaN;
			this._overallDuration=NaN;
			this._stopWhenCircleFinish=false;
			this._elapsedPlaybackTime=NaN;
			this._startUpdateLoopCount=NaN;
			this._currentAnimationClipIndex=0;
			this._currentKeyframeIndex=0;
			this._paused=false;
			this._cacheFrameRate=0;
			this._cacheFrameRateInterval=NaN;
			this._cachePlayRate=NaN;
			this._fullFrames=null;
			this.isCache=true;
			this.playbackRate=1.0;
			this.returnToZeroStopped=false;
			AnimationPlayer.__super.call(this);
			this._destroyed=false;
			this._currentAnimationClipIndex=-1;
			this._currentKeyframeIndex=-1;
			this._currentTime=0.0;
			this._overallDuration=Number.MAX_VALUE;
			this._stopWhenCircleFinish=false;
			this._elapsedPlaybackTime=0;
			this._startUpdateLoopCount=-1;
			this._cachePlayRate=1.0;
			this.cacheFrameRate=60;
			this.returnToZeroStopped=false;
		}

		__class(AnimationPlayer,'laya.ani.AnimationPlayer',_super);
		var __proto=AnimationPlayer.prototype;
		Laya.imps(__proto,{"laya.resource.IDestroy":true})
		/**
		*@private
		*/
		__proto._onTempletLoadedComputeFullKeyframeIndices=function(cachePlayRate,cacheFrameRate,templet){
			if (this._templet===templet && this._cachePlayRate===cachePlayRate && this._cacheFrameRate===cacheFrameRate)
				this._computeFullKeyframeIndices();
		}

		/**
		*@private
		*/
		__proto._computeFullKeyframeIndices=function(){
			var anifullFrames=this._fullFrames=[];
			var templet=this._templet;
			var cacheFrameInterval=this._cacheFrameRateInterval *this._cachePlayRate;
			for (var i=0,iNum=templet.getAnimationCount();i < iNum;i++){
				var aniFullFrame=[];
				for (var j=0,jNum=templet.getAnimation(i).nodes.length;j < jNum;j++){
					var node=templet.getAnimation(i).nodes[j];
					var frameCount=Math.floor(node.playTime / cacheFrameInterval+0.01);
					var nodeFullFrames=new Uint16Array(frameCount+1);
					var lastFrameIndex=-1;
					for (var n=0,nNum=node.keyFrame.length;n < nNum;n++){
						var keyFrame=node.keyFrame[n];
						var tm=keyFrame.startTime;
						var endTm=tm+keyFrame.duration+cacheFrameInterval;
						do {
							var frameIndex=Math.floor(tm / cacheFrameInterval+0.5);
							for (var k=lastFrameIndex+1;k < frameIndex;k++)
							nodeFullFrames[k]=n;
							lastFrameIndex=frameIndex;
							nodeFullFrames[frameIndex]=n;
							tm+=cacheFrameInterval;
						}while (tm <=endTm);
					}
					aniFullFrame.push(nodeFullFrames);
				}
				anifullFrames.push(aniFullFrame);
			}
		}

		/**
		*@private
		*/
		__proto._onAnimationTempletLoaded=function(){
			(this.destroyed)|| (this._calculatePlayDuration());
		}

		/**
		*@private
		*/
		__proto._calculatePlayDuration=function(){
			if (this.state!==/*laya.ani.AnimationState.stopped*/0){
				var oriDuration=this._templet.getAniDuration(this._currentAnimationClipIndex);
				(this._playEnd===0)&& (this._playEnd=oriDuration);
				if (this._playEnd > oriDuration)
					this._playEnd=oriDuration;
				this._playDuration=this._playEnd-this._playStart;
			}
		}

		/**
		*@private
		*/
		__proto._setPlayParams=function(time,cacheFrameInterval){
			this._currentTime=time;
			this._currentKeyframeIndex=Math.floor((this.currentPlayTime)/ cacheFrameInterval+0.01);
			this._currentFrameTime=this._currentKeyframeIndex *cacheFrameInterval;
		}

		/**
		*@private
		*/
		__proto._setPlayParamsWhenStop=function(currentAniClipPlayDuration,cacheFrameInterval){
			this._currentTime=currentAniClipPlayDuration;
			this._currentKeyframeIndex=Math.floor(currentAniClipPlayDuration / cacheFrameInterval+0.01);
			this._currentFrameTime=this._currentKeyframeIndex *cacheFrameInterval;
			this._currentAnimationClipIndex=-1;
		}

		/**
		*@private
		*/
		__proto._update=function(elapsedTime){
			if (this._currentAnimationClipIndex===-1 || this._paused || !this._templet || !this._templet.loaded)
				return;
			var cacheFrameInterval=this._cacheFrameRateInterval *this._cachePlayRate;
			var time=0;
			(this._startUpdateLoopCount!==Stat.loopCount)&& (time=elapsedTime *this.playbackRate,this._elapsedPlaybackTime+=time);
			var currentAniClipPlayDuration=this.playDuration;
			if ((this._overallDuration!==0 && this._elapsedPlaybackTime >=this._overallDuration)|| (this._overallDuration===0 && this._elapsedPlaybackTime >=currentAniClipPlayDuration)){
				this._setPlayParamsWhenStop(currentAniClipPlayDuration,cacheFrameInterval);
				this.event(/*laya.events.Event.STOPPED*/"stopped");
				return;
			}
			time+=this._currentTime;
			if (currentAniClipPlayDuration > 0){
				if (time >=currentAniClipPlayDuration){
					do {
						time-=currentAniClipPlayDuration;
						if (this._stopWhenCircleFinish){
							this._setPlayParamsWhenStop(currentAniClipPlayDuration,cacheFrameInterval);
							this._stopWhenCircleFinish=false;
							this.event(/*laya.events.Event.STOPPED*/"stopped");
							return;
						}
						if (time < currentAniClipPlayDuration){
							this._setPlayParams(time,cacheFrameInterval);
							this.event(/*laya.events.Event.COMPLETE*/"complete");
						}
					}while (time >=currentAniClipPlayDuration)
					}else {
					this._setPlayParams(time,cacheFrameInterval);
				}
				}else {
				if (this._stopWhenCircleFinish){
					this._setPlayParamsWhenStop(currentAniClipPlayDuration,cacheFrameInterval);
					this._stopWhenCircleFinish=false;
					this.event(/*laya.events.Event.STOPPED*/"stopped");
					return;
				}
				this._currentTime=this._currentFrameTime=this._currentKeyframeIndex=0;
				this.event(/*laya.events.Event.COMPLETE*/"complete");
			}
		}

		/**
		*@private
		*/
		__proto._destroy=function(){
			this.offAll();
			this._templet=null;
			this._fullFrames=null;
			this._destroyed=true;
		}

		/**
		*播放动画。
		*@param index 动画索引。
		*@param playbackRate 播放速率。
		*@param duration 播放时长（0为1次,Number.MAX_VALUE为循环播放）。
		*@param playStart 播放的起始时间位置。
		*@param playEnd 播放的结束时间位置。（0为动画一次循环的最长结束时间位置）。
		*/
		__proto.play=function(index,playbackRate,overallDuration,playStart,playEnd){
			(index===void 0)&& (index=0);
			(playbackRate===void 0)&& (playbackRate=1.0);
			(overallDuration===void 0)&& (overallDuration=2147483647);
			(playStart===void 0)&& (playStart=0);
			(playEnd===void 0)&& (playEnd=0);
			if (!this._templet)
				throw new Error("AnimationPlayer:templet must not be null,maybe you need to set url.");
			if (overallDuration < 0 || playStart < 0 || playEnd < 0)
				throw new Error("AnimationPlayer:overallDuration,playStart and playEnd must large than zero.");
			if ((playEnd!==0)&& (playStart > playEnd))
				throw new Error("AnimationPlayer:start must less than end.");
			this._currentTime=0;
			this._currentFrameTime=0;
			this._elapsedPlaybackTime=0;
			this.playbackRate=playbackRate;
			this._overallDuration=overallDuration;
			this._playStart=playStart;
			this._playEnd=playEnd;
			this._paused=false;
			this._currentAnimationClipIndex=index;
			this._currentKeyframeIndex=0;
			this._startUpdateLoopCount=Stat.loopCount;
			this.event(/*laya.events.Event.PLAYED*/"played");
			if (this._templet.loaded)
				this._calculatePlayDuration();
			else
			this._templet.once(/*laya.events.Event.LOADED*/"loaded",this,this._onAnimationTempletLoaded);
			this._update(0);
		}

		/**
		*播放动画。
		*@param index 动画索引。
		*@param playbackRate 播放速率。
		*@param duration 播放时长（0为1次,Number.MAX_VALUE为循环播放）。
		*@param playStartFrame 播放的原始起始帧率位置。
		*@param playEndFrame 播放的原始结束帧率位置。（0为动画一次循环的最长结束时间位置）。
		*/
		__proto.playByFrame=function(index,playbackRate,overallDuration,playStartFrame,playEndFrame,fpsIn3DBuilder){
			(index===void 0)&& (index=0);
			(playbackRate===void 0)&& (playbackRate=1.0);
			(overallDuration===void 0)&& (overallDuration=2147483647);
			(playStartFrame===void 0)&& (playStartFrame=0);
			(playEndFrame===void 0)&& (playEndFrame=0);
			(fpsIn3DBuilder===void 0)&& (fpsIn3DBuilder=30);
			var interval=1000.0 / fpsIn3DBuilder;
			this.play(index,playbackRate,overallDuration,playStartFrame *interval,playEndFrame *interval);
		}

		/**
		*停止播放当前动画
		*@param immediate 是否立即停止
		*/
		__proto.stop=function(immediate){
			(immediate===void 0)&& (immediate=true);
			if (immediate){
				this._currentTime=this._currentFrameTime=this._currentKeyframeIndex=0;
				this._currentAnimationClipIndex=-1;
				this.event(/*laya.events.Event.STOPPED*/"stopped");
				}else {
				this._stopWhenCircleFinish=true;
			}
		}

		/**
		*动画播放的结束时间位置。
		*@return 结束时间位置。
		*/
		__getset(0,__proto,'playEnd',function(){
			return this._playEnd;
		});

		/**
		*设置动画数据模板,注意：修改此值会有计算开销。
		*@param value 动画数据模板
		*/
		/**
		*获取动画数据模板
		*@param value 动画数据模板
		*/
		__getset(0,__proto,'templet',function(){
			return this._templet;
			},function(value){
			if (!this.state===/*laya.ani.AnimationState.stopped*/0)
				this.stop(true);
			if (this._templet!==value){
				this._templet=value;
				if (value.loaded)
					this._computeFullKeyframeIndices();
				else
				value.once(/*laya.events.Event.LOADED*/"loaded",this,this._onTempletLoadedComputeFullKeyframeIndices,[this._cachePlayRate,this._cacheFrameRate]);
			}
		});

		/**
		*动画播放的起始时间位置。
		*@return 起始时间位置。
		*/
		__getset(0,__proto,'playStart',function(){
			return this._playStart;
		});

		/**
		*获取动画播放一次的总时间
		*@return 动画播放一次的总时间
		*/
		__getset(0,__proto,'playDuration',function(){
			return this._playDuration;
		});

		/**
		*获取当前播放状态
		*@return 当前播放状态
		*/
		__getset(0,__proto,'state',function(){
			if (this._currentAnimationClipIndex===-1)
				return /*laya.ani.AnimationState.stopped*/0;
			if (this._paused)
				return /*laya.ani.AnimationState.paused*/1;
			return /*laya.ani.AnimationState.playing*/2;
		});

		/**
		*获取当前帧数
		*@return 当前帧数
		*/
		__getset(0,__proto,'currentKeyframeIndex',function(){
			return this._currentKeyframeIndex;
		});

		/**
		*获取动画播放的总总时间
		*@return 动画播放的总时间
		*/
		__getset(0,__proto,'overallDuration',function(){
			return this._overallDuration;
		});

		/**
		*获取当前帧时间，不包括重播时间
		*@return value 当前时间
		*/
		__getset(0,__proto,'currentFrameTime',function(){
			return this._currentFrameTime;
		});

		/**
		*获取当前动画索引
		*@return value 当前动画索引
		*/
		__getset(0,__proto,'currentAnimationClipIndex',function(){
			return this._currentAnimationClipIndex;
		});

		/**
		*获取当前精确时间，不包括重播时间
		*@return value 当前时间
		*/
		__getset(0,__proto,'currentPlayTime',function(){
			return this._currentTime+this._playStart;
		});

		/**
		*设置缓存播放速率,默认值为1.0,注意：修改此值会有计算开销。*
		*@return value 缓存播放速率。
		*/
		/**
		*获取缓存播放速率。*
		*@return 缓存播放速率。
		*/
		__getset(0,__proto,'cachePlayRate',function(){
			return this._cachePlayRate;
			},function(value){
			if (this._cachePlayRate!==value){
				this._cachePlayRate=value;
				if (this._templet)
					if (this._templet.loaded)
				this._computeFullKeyframeIndices();
				else
				this._templet.once(/*laya.events.Event.LOADED*/"loaded",this,this._onTempletLoadedComputeFullKeyframeIndices,[value,this._cacheFrameRate]);
			}
		});

		/**
		*设置默认帧率,每秒60帧,注意：修改此值会有计算开销。*
		*@return value 缓存帧率
		*/
		/**
		*获取默认帧率*
		*@return value 默认帧率
		*/
		__getset(0,__proto,'cacheFrameRate',function(){
			return this._cacheFrameRate;
			},function(value){
			if (this._cacheFrameRate!==value){
				this._cacheFrameRate=value;
				this._cacheFrameRateInterval=1000.0 / this._cacheFrameRate;
				if (this._templet)
					if (this._templet.loaded)
				this._computeFullKeyframeIndices();
				else
				this._templet.once(/*laya.events.Event.LOADED*/"loaded",this,this._onTempletLoadedComputeFullKeyframeIndices,[this._cachePlayRate,value]);
			}
		});

		/**
		*设置当前播放位置
		*@param value 当前时间
		*/
		__getset(0,__proto,'currentTime',null,function(value){
			if (this._currentAnimationClipIndex===-1 || !this._templet || !this._templet.loaded)
				return;
			if (value < this._playStart || value > this._playEnd)
				throw new Error("AnimationPlayer:value must large than playStartTime,small than playEndTime.");
			this._startUpdateLoopCount=Stat.loopCount;
			var cacheFrameInterval=this._cacheFrameRateInterval *this._cachePlayRate;
			this._currentTime=value;
			this._currentKeyframeIndex=Math.floor(this.currentPlayTime / cacheFrameInterval);
			this._currentFrameTime=this._currentKeyframeIndex *cacheFrameInterval;
		});

		/**
		*设置是否暂停
		*@param value 是否暂停
		*/
		/**
		*获取当前是否暂停
		*@return 是否暂停
		*/
		__getset(0,__proto,'paused',function(){
			return this._paused;
			},function(value){
			this._paused=value;
			value && this.event(/*laya.events.Event.PAUSED*/"paused");
		});

		/**
		*获取缓存帧率间隔时间
		*@return 缓存帧率间隔时间
		*/
		__getset(0,__proto,'cacheFrameRateInterval',function(){
			return this._cacheFrameRateInterval;
		});

		/**
		*获取是否已销毁。
		*@return 是否已销毁。
		*/
		__getset(0,__proto,'destroyed',function(){
			return this._destroyed;
		});

		return AnimationPlayer;
	})(EventDispatcher)


	/**
	*@private
	*/
	//class laya.ani.GraphicsAni extends laya.display.Graphics
	var GraphicsAni=(function(_super){
		function GraphicsAni(){
			GraphicsAni.__super.call(this);
			if (Render.isConchNode){
				this["drawSkin"]=function (skin){
					skin.transform || (skin.transform=Matrix.EMPTY);
					this.setSkinMesh&&this.setSkinMesh(skin._ps,skin.mVBData,skin.mEleNum,0,skin.mTexture,skin.transform);
				};
			}
		}

		__class(GraphicsAni,'laya.ani.GraphicsAni',_super);
		var __proto=GraphicsAni.prototype;
		/**
		*@private
		*画自定义蒙皮动画
		*@param skin
		*/
		__proto.drawSkin=function(skin){
			var arr=[skin];
			this._saveToCmd(Render._context._drawSkin,arr);
		}

		return GraphicsAni;
	})(Graphics)


	/**
	*@private
	*Canvas版本的SkinMesh
	*/
	//class laya.ani.bone.canvasmesh.SkinMeshCanvas extends laya.ani.bone.canvasmesh.CanvasMeshRender
	var SkinMeshCanvas=(function(_super){
		function SkinMeshCanvas(){
			SkinMeshCanvas.__super.call(this);
			this.mesh=new MeshData();
		}

		__class(SkinMeshCanvas,'laya.ani.bone.canvasmesh.SkinMeshCanvas',_super);
		var __proto=SkinMeshCanvas.prototype;
		__proto.init2=function(texture,vs,ps,verticles,uvs){
			if (this.transform){
				this.transform=null;
			};
			var _ps;
			if (ps){
				_ps=ps;
				}else {
				_ps=[];
				_ps.push(0,1,3,3,1,2);
			}
			this.mesh.texture=texture;
			this.mesh.indexes=_ps;
			this.mesh.vertices=verticles;
			this.mesh.uvs=uvs;
		}

		__proto.render=function(context,x,y){
			if(!this.mesh.texture)return;
			if(!this.transform){
				this.transform=SkinMeshCanvas._tempMatrix;
				this.transform.identity();
				this.transform.translate(x,y);
				this.renderToContext(context);
				this.transform.translate(-x,-y);
				this.transform=null;
				}else{
				this.transform.translate(x,y);
				this.renderToContext(context);
				this.transform.translate(-x,-y);
			}
		}

		__static(SkinMeshCanvas,
		['_tempMatrix',function(){return this._tempMatrix=new Matrix();}
		]);
		return SkinMeshCanvas;
	})(CanvasMeshRender)


	/**
	*<code>AnimationTemplet</code> 类用于动画模板资源。
	*/
	//class laya.ani.AnimationTemplet extends laya.resource.Resource
	var AnimationTemplet=(function(_super){
		function AnimationTemplet(){
			//this._aniVersion=null;
			this._aniMap={};
			//this._publicExtData=null;
			//this._useParent=false;
			//this.unfixedCurrentFrameIndexes=null;
			//this.unfixedCurrentTimes=null;
			//this.unfixedKeyframes=null;
			this.unfixedLastAniIndex=-1;
			//this._aniClassName=null;
			//this._animationDatasCache=null;
			AnimationTemplet.__super.call(this);
			this._anis=new Array;
		}

		__class(AnimationTemplet,'laya.ani.AnimationTemplet',_super);
		var __proto=AnimationTemplet.prototype;
		/**
		*@private
		*/
		__proto.parse=function(data){
			var reader=new Byte(data);
			this._aniVersion=reader.readUTFString();
			AnimationParser01.parse(this,reader);
		}

		/**
		*@private
		*/
		__proto._calculateKeyFrame=function(node,keyframeCount,keyframeDataCount){
			var keyFrames=node.keyFrame;
			keyFrames[keyframeCount]=keyFrames[0];
			for (var i=0;i < keyframeCount;i++){
				var keyFrame=keyFrames[i];
				keyFrame.nextData=(keyFrame.duration===0)? keyFrame.data :keyFrames[i+1].data;
			}
			keyFrames.length--;
		}

		/**
		*@inheritDoc
		*/
		__proto.onAsynLoaded=function(url,data,params){
			var reader=new Byte(data);
			this._aniVersion=reader.readUTFString();
			switch (this._aniVersion){
				case "LAYAANIMATION:02":
					AnimationParser02.parse(this,reader);
					break ;
				default :
					AnimationParser01.parse(this,reader);
				}
			this._endLoaded();
		}

		__proto.getAnimationCount=function(){
			return this._anis.length;
		}

		__proto.getAnimation=function(aniIndex){
			return this._anis[aniIndex];
		}

		__proto.getAniDuration=function(aniIndex){
			return this._anis[aniIndex].playTime;
		}

		__proto.getNodes=function(aniIndex){
			return this._anis[aniIndex].nodes;
		}

		__proto.getNodeIndexWithName=function(aniIndex,name){
			return this._anis[aniIndex].bone3DMap[name];
		}

		__proto.getNodeCount=function(aniIndex){
			return this._anis[aniIndex].nodes.length;
		}

		__proto.getTotalkeyframesLength=function(aniIndex){
			return this._anis[aniIndex].totalKeyframeDatasLength;
		}

		__proto.getPublicExtData=function(){
			return this._publicExtData;
		}

		__proto.getAnimationDataWithCache=function(key,cacheDatas,aniIndex,frameIndex){
			var aniDatas=cacheDatas[aniIndex];
			if (!aniDatas){
				return null;
				}else {
				var keyDatas=aniDatas[key];
				if (!keyDatas)
					return null;
				else {
					return keyDatas[frameIndex];
				}
			}
		}

		__proto.setAnimationDataWithCache=function(key,cacheDatas,aniIndex,frameIndex,data){
			var aniDatas=(cacheDatas[aniIndex])|| (cacheDatas[aniIndex]={});
			var aniDatasCache=(aniDatas[key])|| (aniDatas[key]=[]);
			aniDatasCache[frameIndex]=data;
		}

		__proto.getOriginalData=function(aniIndex,originalData,nodesFrameIndices,frameIndex,playCurTime){
			var oneAni=this._anis[aniIndex];
			var nodes=oneAni.nodes;
			var j=0;
			for (var i=0,n=nodes.length,outOfs=0;i < n;i++){
				var node=nodes[i];
				var key;
				key=node.keyFrame[nodesFrameIndices[i][frameIndex]];
				node.dataOffset=outOfs;
				var dt=playCurTime-key.startTime;
				var lerpType=node.lerpType;
				if (lerpType){
					switch (lerpType){
						case 0:
						case 1:
							for (j=0;j < node.keyframeWidth;)
							j+=node.interpolationMethod[j](node,j,originalData,outOfs+j,key.data,dt,null,key.duration,key.nextData);
							break ;
						case 2:;
							var interpolationData=key.interpolationData;
							var interDataLen=interpolationData.length;
							var dataIndex=0;
							for (j=0;j < interDataLen;){
								var type=interpolationData[j];
							switch (type){
								case 6:
									j+=AnimationTemplet.interpolation[type](node,dataIndex,originalData,outOfs+dataIndex,key.data,dt,null,key.duration,key.nextData,interpolationData,j+1);
									break ;
								case 7:
									j+=AnimationTemplet.interpolation[type](node,dataIndex,originalData,outOfs+dataIndex,key.data,dt,null,key.duration,key.nextData,interpolationData,j+1);
									break ;
								default :
									j+=AnimationTemplet.interpolation[type](node,dataIndex,originalData,outOfs+dataIndex,key.data,dt,null,key.duration,key.nextData);
								}
							dataIndex++;
						}
						break ;
					}
					}else {
					for (j=0;j < node.keyframeWidth;)
					j+=node.interpolationMethod[j](node,j,originalData,outOfs+j,key.data,dt,null,key.duration,key.nextData);
				}
				outOfs+=node.keyframeWidth;
			}
		}

		__proto.getNodesCurrentFrameIndex=function(aniIndex,playCurTime){
			var ani=this._anis[aniIndex];
			var nodes=ani.nodes;
			if (aniIndex!==this.unfixedLastAniIndex){
				this.unfixedCurrentFrameIndexes=new Uint32Array(nodes.length);
				this.unfixedCurrentTimes=new Float32Array(nodes.length);
				this.unfixedLastAniIndex=aniIndex;
			}
			for (var i=0,n=nodes.length,outOfs=0;i < n;i++){
				var node=nodes[i];
				if (playCurTime < this.unfixedCurrentTimes[i])
					this.unfixedCurrentFrameIndexes[i]=0;
				this.unfixedCurrentTimes[i]=playCurTime;
				while ((this.unfixedCurrentFrameIndexes[i] < node.keyFrame.length)){
					if (node.keyFrame[this.unfixedCurrentFrameIndexes[i]].startTime > this.unfixedCurrentTimes[i])
						break ;
					this.unfixedCurrentFrameIndexes[i]++;
				}
				this.unfixedCurrentFrameIndexes[i]--;
			}
			return this.unfixedCurrentFrameIndexes;
		}

		__proto.getOriginalDataUnfixedRate=function(aniIndex,originalData,playCurTime){
			var oneAni=this._anis[aniIndex];
			var nodes=oneAni.nodes;
			if (aniIndex!==this.unfixedLastAniIndex){
				this.unfixedCurrentFrameIndexes=new Uint32Array(nodes.length);
				this.unfixedCurrentTimes=new Float32Array(nodes.length);
				this.unfixedKeyframes=__newvec(nodes.length);
				this.unfixedLastAniIndex=aniIndex;
			};
			var j=0;
			for (var i=0,n=nodes.length,outOfs=0;i < n;i++){
				var node=nodes[i];
				if (playCurTime < this.unfixedCurrentTimes[i])
					this.unfixedCurrentFrameIndexes[i]=0;
				this.unfixedCurrentTimes[i]=playCurTime;
				while (this.unfixedCurrentFrameIndexes[i] < node.keyFrame.length){
					if (node.keyFrame[this.unfixedCurrentFrameIndexes[i]].startTime > this.unfixedCurrentTimes[i])
						break ;
					this.unfixedKeyframes[i]=node.keyFrame[this.unfixedCurrentFrameIndexes[i]];
					this.unfixedCurrentFrameIndexes[i]++;
				};
				var key=this.unfixedKeyframes[i];
				node.dataOffset=outOfs;
				var dt=playCurTime-key.startTime;
				var lerpType=node.lerpType;
				if (lerpType){
					switch (node.lerpType){
						case 0:
						case 1:
							for (j=0;j < node.keyframeWidth;)
							j+=node.interpolationMethod[j](node,j,originalData,outOfs+j,key.data,dt,null,key.duration,key.nextData);
							break ;
						case 2:;
							var interpolationData=key.interpolationData;
							var interDataLen=interpolationData.length;
							var dataIndex=0;
							for (j=0;j < interDataLen;){
								var type=interpolationData[j];
							switch (type){
								case 6:
									j+=AnimationTemplet.interpolation[type](node,dataIndex,originalData,outOfs+dataIndex,key.data,dt,null,key.duration,key.nextData,interpolationData,j+1);
									break ;
								case 7:
									j+=AnimationTemplet.interpolation[type](node,dataIndex,originalData,outOfs+dataIndex,key.data,dt,null,key.duration,key.nextData,interpolationData,j+1);
									break ;
								default :
									j+=AnimationTemplet.interpolation[type](node,dataIndex,originalData,outOfs+dataIndex,key.data,dt,null,key.duration,key.nextData);
								}
							dataIndex++;
						}
						break ;
					}
					}else {
					for (j=0;j < node.keyframeWidth;)
					j+=node.interpolationMethod[j](node,j,originalData,outOfs+j,key.data,dt,null,key.duration,key.nextData);
				}
				outOfs+=node.keyframeWidth;
			}
		}

		AnimationTemplet._LinearInterpolation_0=function(bone,index,out,outOfs,data,dt,dData,duration,nextData,interData){
			var amount=duration===0 ? 0 :dt / duration;
			out[outOfs]=(1.0-amount)*data[index]+amount *nextData[index];
			return 1;
		}

		AnimationTemplet._QuaternionInterpolation_1=function(bone,index,out,outOfs,data,dt,dData,duration,nextData,interData){
			var amount=duration===0 ? 0 :dt / duration;
			MathUtil.slerpQuaternionArray(data,index,nextData,index,amount,out,outOfs);
			return 4;
		}

		AnimationTemplet._AngleInterpolation_2=function(bone,index,out,outOfs,data,dt,dData,duration,nextData,interData){
			return 0;
		}

		AnimationTemplet._RadiansInterpolation_3=function(bone,index,out,outOfs,data,dt,dData,duration,nextData,interData){
			return 0;
		}

		AnimationTemplet._Matrix4x4Interpolation_4=function(bone,index,out,outOfs,data,dt,dData,duration,nextData,interData){
			for (var i=0;i < 16;i++,index++)
			out[outOfs+i]=data[index]+dt *dData[index];
			return 16;
		}

		AnimationTemplet._NoInterpolation_5=function(bone,index,out,outOfs,data,dt,dData,duration,nextData,interData){
			out[outOfs]=data[index];
			return 1;
		}

		AnimationTemplet._BezierInterpolation_6=function(bone,index,out,outOfs,data,dt,dData,duration,nextData,interData,offset){
			(offset===void 0)&& (offset=0);
			out[outOfs]=data[index]+(nextData[index]-data[index])*BezierLerp.getBezierRate(dt / duration,interData[offset],interData[offset+1],interData[offset+2],interData[offset+3]);
			return 5;
		}

		AnimationTemplet._BezierInterpolation_7=function(bone,index,out,outOfs,data,dt,dData,duration,nextData,interData,offset){
			(offset===void 0)&& (offset=0);
			out[outOfs]=interData[offset+4]+interData[offset+5] *BezierLerp.getBezierRate((dt *0.001+interData[offset+6])/ interData[offset+7],interData[offset],interData[offset+1],interData[offset+2],interData[offset+3]);
			return 9;
		}

		AnimationTemplet.load=function(url){
			return Laya.loader.create(url,null,null,AnimationTemplet);
		}

		AnimationTemplet.interpolation=[AnimationTemplet._LinearInterpolation_0,AnimationTemplet._QuaternionInterpolation_1,AnimationTemplet._AngleInterpolation_2,AnimationTemplet._RadiansInterpolation_3,AnimationTemplet._Matrix4x4Interpolation_4,AnimationTemplet._NoInterpolation_5,AnimationTemplet._BezierInterpolation_6,AnimationTemplet._BezierInterpolation_7];
		return AnimationTemplet;
	})(Resource)


	/**
	*@private
	*将mesh元素缓存到canvas中并进行绘制
	*/
	//class laya.ani.bone.canvasmesh.CacheAbleSkinMesh extends laya.ani.bone.canvasmesh.SkinMeshCanvas
	var CacheAbleSkinMesh=(function(_super){
		function CacheAbleSkinMesh(){
			this.isCached=false;
			this.canvas=null;
			this.tex=null;
			this.rec=null;
			CacheAbleSkinMesh.__super.call(this);
		}

		__class(CacheAbleSkinMesh,'laya.ani.bone.canvasmesh.CacheAbleSkinMesh',_super);
		var __proto=CacheAbleSkinMesh.prototype;
		__proto.getCanvasPic=function(){
			var canvas=new HTMLCanvas("2D");
			var ctx=canvas.getContext('2d');
			this.rec=this.mesh.getBounds();
			debugger;
			canvas.size(this.rec.width,this.rec.height);
			var preTransform;
			preTransform=this.transform;
			this.transform=CacheAbleSkinMesh.tempMt;
			this.transform.identity();
			this.transform.translate(-this.rec.x,-this.rec.y);
			this.renderToContext(ctx);
			this.transform.translate(+this.rec.x,+this.rec.y);
			this.transform=preTransform;
			return new Texture(canvas);
		}

		__proto.render=function(context,x,y){
			if (!this.mesh.texture)return;
			if (!this.isCached){
				this.isCached=true;
				this.tex=this.getCanvasPic();
			}
			if(!this.transform){
				this.transform=SkinMeshCanvas._tempMatrix;
				this.transform.identity();
				this.transform.translate(x,y);
				this._renderTextureToContext(context);
				this.transform.translate(-x,-y);
				this.transform=null;
				}else{
				this.transform.translate(x,y);
				this._renderTextureToContext(context);
				this.transform.translate(-x,-y);
			}
		}

		__proto._renderTextureToContext=function(context){
			this.context=context.ctx || context;
			context.save();
			var texture;
			texture=this.tex;
			if (this.transform){
				var mt=this.transform;
				context.transform(mt.a,mt.b,mt.c,mt.d,mt.tx,mt.ty);
			}
			this.rec=this.mesh.getBounds();
			context.translate(this.rec.x,this.rec.y);
			context.drawTexture(texture,0,0,texture.width,texture.height,0,0);
			context.restore();
		}

		__static(CacheAbleSkinMesh,
		['tempMt',function(){return this.tempMt=new Matrix();}
		]);
		return CacheAbleSkinMesh;
	})(SkinMeshCanvas)


	/**
	*@private
	*简化mesh绘制，多顶点mesh改为四顶点mesh，只绘制矩形不绘制三角形
	*/
	//class laya.ani.bone.canvasmesh.SimpleSkinMeshCanvas extends laya.ani.bone.canvasmesh.SkinMeshCanvas
	var SimpleSkinMeshCanvas=(function(_super){
		function SimpleSkinMeshCanvas(){
			this.cacheOK=false;
			this.cacheCmdOK=false;
			this.transformCmds=[];
			this.drawCmds=[]
			SimpleSkinMeshCanvas.__super.call(this);
			this.tempMesh=new MeshData();
		}

		__class(SimpleSkinMeshCanvas,'laya.ani.bone.canvasmesh.SimpleSkinMeshCanvas',_super);
		var __proto=SimpleSkinMeshCanvas.prototype;
		__proto.init2=function(texture,vs,ps,verticles,uvs){
			_super.prototype.init2.call(this,texture,vs,ps,verticles,uvs);
			this.cacheOK=false;
			this.cacheCmdOK=false;
			this.transformCmds.length=6;
			this.drawCmds.length=9;
		}

		__proto.renderToContext=function(context){
			this.context=context.ctx || context;
			if (this.mesh){
				if (this.mesh.uvs.length <=8){
					if (this.mode==0){
						this._renderWithIndexes(this.mesh);
					}
					else {
						this._renderNoIndexes(this.mesh);
					}
					return;
				}
				if (!this.cacheOK){
					this.tempMesh.texture=this.mesh.texture;
					this.tempMesh.uvs=this.mesh.texture.uv;
					this.tempMesh.vertices=MeshTools.solveMesh(this.mesh,this.tempMesh.vertices);
					this.cacheOK=true;
				}
				if (this.mode==0){
					this._renderWithIndexes(this.tempMesh);
				}
				else {
					this._renderNoIndexes(this.tempMesh);
				}
			}
		}

		__proto._renderWithIndexes=function(mesh){
			if(this.cacheCmdOK){
				this.renderByCache(mesh);
				return;
			};
			var indexes=mesh.indexes;
			var i=0,len=indexes.length;
			if (len > 1)
				len=1;
			for (i=0;i < len;i+=3){
				var index0=indexes[i] *2;
				var index1=indexes[i+1] *2;
				var index2=indexes[i+2] *2;
				this._renderDrawTriangle(mesh,index0,index1,index2);
			}
			this.cacheCmdOK=true;
		}

		__proto._renderDrawTriangle=function(mesh,index0,index1,index2){
			var context=this.context;
			var uvs=mesh.uvs;
			var vertices=mesh.vertices;
			var texture=mesh.texture;
			var source=texture.bitmap;
			var textureSource=source.source;
			var textureWidth=texture.width;
			var textureHeight=texture.height;
			var sourceWidth=source.width;
			var sourceHeight=source.height;
			var u0=NaN;
			var u1=NaN;
			var u2=NaN;
			var v0=NaN;
			var v1=NaN;
			var v2=NaN;
			if (mesh.useUvTransform){
				var ut=mesh.uvTransform;
				u0=((uvs[index0] *ut.a)+(uvs[index0+1] *ut.c)+ut.tx)*sourceWidth;
				u1=((uvs[index1] *ut.a)+(uvs[index1+1] *ut.c)+ut.tx)*sourceWidth;
				u2=((uvs[index2] *ut.a)+(uvs[index2+1] *ut.c)+ut.tx)*sourceWidth;
				v0=((uvs[index0] *ut.b)+(uvs[index0+1] *ut.d)+ut.ty)*sourceHeight;
				v1=((uvs[index1] *ut.b)+(uvs[index1+1] *ut.d)+ut.ty)*sourceHeight;
				v2=((uvs[index2] *ut.b)+(uvs[index2+1] *ut.d)+ut.ty)*sourceHeight;
			}
			else {
				u0=uvs[index0] *sourceWidth;
				u1=uvs[index1] *sourceWidth;
				u2=uvs[index2] *sourceWidth;
				v0=uvs[index0+1] *sourceHeight;
				v1=uvs[index1+1] *sourceHeight;
				v2=uvs[index2+1] *sourceHeight;
			};
			var x0=vertices[index0];
			var x1=vertices[index1];
			var x2=vertices[index2];
			var y0=vertices[index0+1];
			var y1=vertices[index1+1];
			var y2=vertices[index2+1];
			var delta=(u0 *v1)+(v0 *u2)+(u1 *v2)-(v1 *u2)-(v0 *u1)-(u0 *v2);
			var dDelta=1 / delta;
			var deltaA=(x0 *v1)+(v0 *x2)+(x1 *v2)-(v1 *x2)-(v0 *x1)-(x0 *v2);
			var deltaB=(u0 *x1)+(x0 *u2)+(u1 *x2)-(x1 *u2)-(x0 *u1)-(u0 *x2);
			var deltaC=(u0 *v1 *x2)+(v0 *x1 *u2)+(x0 *u1 *v2)-(x0 *v1 *u2)-(v0 *u1 *x2)-(u0 *x1 *v2);
			var deltaD=(y0 *v1)+(v0 *y2)+(y1 *v2)-(v1 *y2)-(v0 *y1)-(y0 *v2);
			var deltaE=(u0 *y1)+(y0 *u2)+(u1 *y2)-(y1 *u2)-(y0 *u1)-(u0 *y2);
			var deltaF=(u0 *v1 *y2)+(v0 *y1 *u2)+(y0 *u1 *v2)-(y0 *v1 *u2)-(v0 *u1 *y2)-(u0 *y1 *v2);
			this.transformCmds[0]=deltaA *dDelta;
			this.transformCmds[1]=deltaD *dDelta;
			this.transformCmds[2]=deltaB *dDelta;
			this.transformCmds[3]=deltaE *dDelta;
			this.transformCmds[4]=deltaC *dDelta;
			this.transformCmds[5]=deltaF *dDelta;
			this.drawCmds[0]=textureSource;
			this.drawCmds[1]=texture.uv[0] *sourceWidth;
			this.drawCmds[2]=texture.uv[1] *sourceHeight;
			this.drawCmds[3]=textureWidth;
			this.drawCmds[4]=textureHeight;
			this.drawCmds[5]=texture.uv[0] *sourceWidth;
			this.drawCmds[6]=texture.uv[1] *sourceHeight;
			this.drawCmds[7]=textureWidth;
			this.drawCmds[8]=textureHeight;
			context.save();
			if (this.transform){
				var mt=this.transform;
				context.transform(mt.a,mt.b,mt.c,mt.d,mt.tx,mt.ty);
			}
			context.transform.apply(context,this.transformCmds);
			context.drawImage.apply(context,this.drawCmds);
			context.restore();
		}

		/**
		*绘制缓存的命令
		*@param mesh
		*
		*/
		__proto.renderByCache=function(mesh){
			var context=this.context;
			context.save();
			if (this.transform){
				var mt=this.transform;
				context.transform(mt.a,mt.b,mt.c,mt.d,mt.tx,mt.ty);
			}
			context.transform.apply(context,this.transformCmds);
			context.drawImage.apply(context,this.drawCmds);
			context.restore();
		}

		return SimpleSkinMeshCanvas;
	})(SkinMeshCanvas)


	/**
	*骨骼动画由<code>Templet</code>，<code>AnimationPlayer</code>，<code>Skeleton</code>三部分组成。
	*/
	//class laya.ani.bone.Skeleton extends laya.display.Sprite
	var Skeleton=(function(_super){
		function Skeleton(templet,aniMode){
			this._templet=null;
			this._player=null;
			this._curOriginalData=null;
			this._boneMatrixArray=[];
			this._lastTime=0;
			this._currAniName=null;
			this._currAniIndex=-1;
			this._pause=true;
			this._aniClipIndex=-1;
			this._clipIndex=-1;
			this._skinIndex=0;
			this._skinName="default";
			this._aniMode=0;
			this._graphicsCache=null;
			this._boneSlotDic=null;
			this._bindBoneBoneSlotDic=null;
			this._boneSlotArray=null;
			this._index=-1;
			this._total=-1;
			this._indexControl=false;
			this._aniPath=null;
			this._texturePath=null;
			this._complete=null;
			this._loadAniMode=0;
			this._yReverseMatrix=null;
			this._ikArr=null;
			this._tfArr=null;
			this._pathDic=null;
			this._rootBone=null;
			this._boneList=null;
			this._aniSectionDic=null;
			this._eventIndex=0;
			this._drawOrderIndex=0;
			this._drawOrder=null;
			this._lastAniClipIndex=-1;
			this._lastUpdateAniClipIndex=-1;
			Skeleton.__super.call(this);
			(aniMode===void 0)&& (aniMode=0);
			if (templet)this.init(templet,aniMode);
		}

		__class(Skeleton,'laya.ani.bone.Skeleton',_super);
		var __proto=Skeleton.prototype;
		/**
		*初始化动画
		*@param templet 模板
		*@param aniMode 动画模式
		*<table>
		*<tr><th>模式</th><th>描述</th></tr>
		*<tr>
		*<td>0</td> <td>使用模板缓冲的数据，模板缓冲的数据，不允许修改（内存开销小，计算开销小，不支持换装）</td>
		*</tr>
		*<tr>
		*<td>1</td> <td>使用动画自己的缓冲区，每个动画都会有自己的缓冲区，相当耗费内存 （内存开销大，计算开销小，支持换装）</td>
		*</tr>
		*<tr>
		*<td>2</td> <td>使用动态方式，去实时去画（内存开销小，计算开销大，支持换装,不建议使用）</td>
		*</tr>
		*</table>
		*/
		__proto.init=function(templet,aniMode){
			(aniMode===void 0)&& (aniMode=0);
			var i=0,n=0;
			if (aniMode==1){
				this._graphicsCache=[];
				for (i=0,n=templet.getAnimationCount();i < n;i++){
					this._graphicsCache.push([]);
				}
			}
			this._yReverseMatrix=templet.yReverseMatrix;
			this._aniMode=aniMode;
			this._templet=templet;
			this._player=new AnimationPlayer();
			this._player.cacheFrameRate=templet.rate;
			this._player.templet=templet;
			this._player.play();
			this._parseSrcBoneMatrix();
			this._boneList=templet.mBoneArr;
			this._rootBone=templet.mRootBone;
			this._aniSectionDic=templet.aniSectionDic;
			if (templet.ikArr.length > 0){
				this._ikArr=[];
				for (i=0,n=templet.ikArr.length;i < n;i++){
					this._ikArr.push(new IkConstraint(templet.ikArr[i],this._boneList));
				}
			}
			if (templet.pathArr.length > 0){
				var tPathData;
				var tPathConstraint;
				if (this._pathDic==null)this._pathDic={};
				var tBoneSlot;
				for (i=0,n=templet.pathArr.length;i < n;i++){
					tPathData=templet.pathArr[i];
					tPathConstraint=new PathConstraint(tPathData,this._boneList);
					tBoneSlot=this._boneSlotDic[tPathData.name];
					if (tBoneSlot){
						tPathConstraint=new PathConstraint(tPathData,this._boneList);
						tPathConstraint.target=tBoneSlot;
					}
					this._pathDic[tPathData.name]=tPathConstraint;
				}
			}
			if (templet.tfArr.length > 0){
				this._tfArr=[];
				for (i=0,n=templet.tfArr.length;i < n;i++){
					this._tfArr.push(new TfConstraint(templet.tfArr[i],this._boneList));
				}
			}
			if (templet.skinDataArray.length > 0){
				var tSkinData=this._templet.skinDataArray[this._skinIndex];
				this._skinName=tSkinData.name;
			}
			this._player.on(/*laya.events.Event.PLAYED*/"played",this,this._onPlay);
			this._player.on(/*laya.events.Event.STOPPED*/"stopped",this,this._onStop);
			this._player.on(/*laya.events.Event.PAUSED*/"paused",this,this._onPause);
		}

		/**
		*通过加载直接创建动画
		*@param path 要加载的动画文件路径
		*@param complete 加载完成的回调函数
		*@param aniMode 与<code>Skeleton.init</code>的<code>aniMode</code>作用一致
		*/
		__proto.load=function(path,complete,aniMode){
			(aniMode===void 0)&& (aniMode=0);
			this._aniPath=path;
			this._complete=complete;
			this._loadAniMode=aniMode;
			Laya.loader.load([{url:path,type:/*laya.net.Loader.BUFFER*/"arraybuffer"}],Handler.create(this,this._onLoaded));
		}

		/**
		*加载完成
		*/
		__proto._onLoaded=function(){
			var arraybuffer=Loader.getRes(this._aniPath);
			if (arraybuffer==null)return;
			if (Templet.TEMPLET_DICTIONARY==null){
				Templet.TEMPLET_DICTIONARY={};
			};
			var tFactory;
			tFactory=Templet.TEMPLET_DICTIONARY[this._aniPath];
			if (tFactory){
				if (tFactory.isParseFail){
					this._parseFail();
					}else{
					if (tFactory.isParserComplete){
						this._parseComplete();
						}else{
						tFactory.on(/*laya.events.Event.COMPLETE*/"complete",this,this._parseComplete);
						tFactory.on(/*laya.events.Event.ERROR*/"error",this,this._parseFail);
					}
				}
				}else {
				tFactory=new Templet();
				tFactory.url=this._aniPath;
				Templet.TEMPLET_DICTIONARY[this._aniPath]=tFactory;
				tFactory.on(/*laya.events.Event.COMPLETE*/"complete",this,this._parseComplete);
				tFactory.on(/*laya.events.Event.ERROR*/"error",this,this._parseFail);
				tFactory.isParserComplete=false;
				tFactory.parseData(null,arraybuffer);
			}
		}

		/**
		*解析完成
		*/
		__proto._parseComplete=function(){
			var tTemple=Templet.TEMPLET_DICTIONARY[this._aniPath];
			if (tTemple){
				this.init(tTemple,this._loadAniMode);
				this.play(0,true);
			}
			this._complete && this._complete.runWith(this);
		}

		/**
		*解析失败
		*/
		__proto._parseFail=function(){
			console.log("[Error]:"+this._aniPath+"解析失败");
		}

		/**
		*传递PLAY事件
		*/
		__proto._onPlay=function(){
			this.event(/*laya.events.Event.PLAYED*/"played");
		}

		/**
		*传递STOP事件
		*/
		__proto._onStop=function(){
			var tEventData;
			var tEventAniArr=this._templet.eventAniArr;
			var tEventArr=tEventAniArr[this._aniClipIndex];
			if (tEventArr && this._eventIndex < tEventArr.length){
				for (;this._eventIndex < tEventArr.length;this._eventIndex++){
					tEventData=tEventArr[this._eventIndex];
					if (tEventData.time >=this._player.playStart && tEventData.time <=this._player.playEnd){
						this.event(/*laya.events.Event.LABEL*/"label",tEventData);
					}
				}
			}
			this._eventIndex=0;
			this._drawOrder=null;
			this.event(/*laya.events.Event.STOPPED*/"stopped");
		}

		/**
		*传递PAUSE事件
		*/
		__proto._onPause=function(){
			this.event(/*laya.events.Event.PAUSED*/"paused");
		}

		/**
		*创建骨骼的矩阵，保存每次计算的最终结果
		*/
		__proto._parseSrcBoneMatrix=function(){
			var i=0,n=0;
			n=this._templet.srcBoneMatrixArr.length;
			for (i=0;i < n;i++){
				this._boneMatrixArray.push(new Matrix());
			}
			if (this._aniMode==0){
				this._boneSlotDic=this._templet.boneSlotDic;
				this._bindBoneBoneSlotDic=this._templet.bindBoneBoneSlotDic;
				this._boneSlotArray=this._templet.boneSlotArray;
				}else {
				if (this._boneSlotDic==null)this._boneSlotDic={};
				if (this._bindBoneBoneSlotDic==null)this._bindBoneBoneSlotDic={};
				if (this._boneSlotArray==null)this._boneSlotArray=[];
				var tArr=this._templet.boneSlotArray;
				var tBS;
				var tBSArr;
				for (i=0,n=tArr.length;i < n;i++){
					tBS=tArr[i];
					tBSArr=this._bindBoneBoneSlotDic[tBS.parent];
					if (tBSArr==null){
						this._bindBoneBoneSlotDic[tBS.parent]=tBSArr=[];
					}
					this._boneSlotDic[tBS.name]=tBS=tBS.copy();
					tBSArr.push(tBS);
					this._boneSlotArray.push(tBS);
				}
			}
		}

		__proto._emitMissedEvents=function(startTime,endTime,startIndex){
			(startIndex===void 0)&& (startIndex=0);
			var tEventAniArr=this._templet.eventAniArr;
			var tEventArr=tEventAniArr[this._player.currentAnimationClipIndex];
			if (tEventArr){
				var i=0,len=0;
				var tEventData;
				len=tEventArr.length;
				for (i=startIndex;i < len;i++){
					tEventData=tEventArr[i];
					if (tEventData.time >=this._player.playStart && tEventData.time <=this._player.playEnd){
						this.event(/*laya.events.Event.LABEL*/"label",tEventData);
					}
				}
			}
		}

		/**
		*更新动画
		*@param autoKey true为正常更新，false为index手动更新
		*/
		__proto._update=function(autoKey){
			(autoKey===void 0)&& (autoKey=true);
			if (this._pause)return;
			if (autoKey && this._indexControl){
				return;
			};
			var tCurrTime=Laya.timer.currTimer;
			var preIndex=this._player.currentKeyframeIndex;
			var dTime=tCurrTime-this._lastTime;
			if (autoKey){
				this._player._update(dTime);
				}else{
				preIndex=-1;
			}
			this._lastTime=tCurrTime;
			if (!this._player)return;
			this._index=this._clipIndex=this._player.currentKeyframeIndex;
			if (this._index < 0)return;
			if (dTime>0&&this._clipIndex==preIndex&&this._lastUpdateAniClipIndex==this._aniClipIndex){
				return;
			}
			this._lastUpdateAniClipIndex=this._aniClipIndex;
			if (preIndex > this._clipIndex&&this._eventIndex!=0){
				this._emitMissedEvents(this._player.playStart,this._player.playEnd,this._eventIndex);
				this._eventIndex=0;
			};
			var tEventData;
			var tEventAniArr=this._templet.eventAniArr;
			var tEventArr=tEventAniArr[this._aniClipIndex];
			if (tEventArr && this._eventIndex < tEventArr.length){
				tEventData=tEventArr[this._eventIndex];
				if (tEventData.time >=this._player.playStart && tEventData.time <=this._player.playEnd){
					if (this._player.currentPlayTime >=tEventData.time){
						this.event(/*laya.events.Event.LABEL*/"label",tEventData);
						this._eventIndex++;
					}
					}else {
					this._eventIndex++;
				}
			};
			var tGraphics;
			if (this._aniMode==0){
				tGraphics=this._templet.getGrahicsDataWithCache(this._aniClipIndex,this._clipIndex);
				if (tGraphics){
					if (this.graphics !=tGraphics){
						this.graphics=tGraphics;
					}
					return;
					}else{
					var i=0,minIndex=0;
					minIndex=this._clipIndex;
					while ((!this._templet.getGrahicsDataWithCache(this._aniClipIndex,minIndex-1))&&(minIndex>0)){
						minIndex--;
					}
					if (minIndex < this._clipIndex){
						for (i=minIndex;i < this._clipIndex;i++){
							this._createGraphics(i);
						}
					}
				}
				}else if (this._aniMode==1){
				tGraphics=this._getGrahicsDataWithCache(this._aniClipIndex,this._clipIndex);
				if (tGraphics){
					if (this.graphics !=tGraphics){
						this.graphics=tGraphics;
					}
					return;
					}else{
					minIndex=this._clipIndex;
					while ((!this._getGrahicsDataWithCache(this._aniClipIndex,minIndex-1))&&(minIndex>0)){
						minIndex--;
					}
					if (minIndex < this._clipIndex){
						for (i=minIndex;i < this._clipIndex;i++){
							this._createGraphics(i);
						}
					}
				}
			}
			this._createGraphics();
		}

		/**
		*@private
		*创建grahics图像
		*/
		__proto._createGraphics=function(_clipIndex){
			(_clipIndex===void 0)&& (_clipIndex=-1);
			if (_clipIndex==-1)_clipIndex=this._clipIndex;
			var curTime=_clipIndex *this._player.cacheFrameRateInterval;
			var tDrawOrderData;
			var tDrawOrderAniArr=this._templet.drawOrderAniArr;
			var tDrawOrderArr=tDrawOrderAniArr[this._aniClipIndex];
			if (tDrawOrderArr && tDrawOrderArr.length > 0){
				this._drawOrderIndex=0;
				tDrawOrderData=tDrawOrderArr[this._drawOrderIndex];
				while (curTime >=tDrawOrderData.time){
					this._drawOrder=tDrawOrderData.drawOrder;
					this._drawOrderIndex++;
					if (this._drawOrderIndex >=tDrawOrderArr.length){
						break ;
					}
					tDrawOrderData=tDrawOrderArr[this._drawOrderIndex];
				}
			};
			var tGraphics;
			if (this._aniMode==0 || this._aniMode==1){
				this.graphics=new GraphicsAni();
				}else {
				if ((this.graphics instanceof laya.ani.GraphicsAni )){
					this.graphics.clear();
					}else {
					this.graphics=new GraphicsAni();
				}
			}
			tGraphics=this.graphics;
			var bones=this._templet.getNodes(this._aniClipIndex);
			this._templet.getOriginalData(this._aniClipIndex,this._curOriginalData,this._player._fullFrames[this._aniClipIndex],_clipIndex,curTime);
			var tSectionArr=this._aniSectionDic[this._aniClipIndex];
			var tParentMatrix;
			var tStartIndex=0;
			var i=0,j=0,k=0,n=0;
			var tDBBoneSlot;
			var tDBBoneSlotArr;
			var tParentTransform;
			var tSrcBone;
			var boneCount=this._templet.srcBoneMatrixArr.length;
			for (i=0,n=tSectionArr[0];i < boneCount;i++){
				tSrcBone=this._boneList[i];
				tParentTransform=this._templet.srcBoneMatrixArr[i];
				tSrcBone.resultTransform.scX=tParentTransform.scX *this._curOriginalData[tStartIndex++];
				tSrcBone.resultTransform.skX=tParentTransform.skX+this._curOriginalData[tStartIndex++];
				tSrcBone.resultTransform.skY=tParentTransform.skY+this._curOriginalData[tStartIndex++];
				tSrcBone.resultTransform.scY=tParentTransform.scY *this._curOriginalData[tStartIndex++];
				tSrcBone.resultTransform.x=tParentTransform.x+this._curOriginalData[tStartIndex++];
				tSrcBone.resultTransform.y=tParentTransform.y+this._curOriginalData[tStartIndex++];
				if (this._templet.tMatrixDataLen===8){
					tSrcBone.resultTransform.skewX=tParentTransform.skewX+this._curOriginalData[tStartIndex++];
					tSrcBone.resultTransform.skewY=tParentTransform.skewY+this._curOriginalData[tStartIndex++];
				}
			};
			var tSlotDic={};
			var tSlotAlphaDic={};
			var tBoneData;
			for (n+=tSectionArr[1];i < n;i++){
				tBoneData=bones[i];
				tSlotDic[tBoneData.name]=this._curOriginalData[tStartIndex++];
				tSlotAlphaDic[tBoneData.name]=this._curOriginalData[tStartIndex++];
				this._curOriginalData[tStartIndex++];
				this._curOriginalData[tStartIndex++];
				this._curOriginalData[tStartIndex++];
				this._curOriginalData[tStartIndex++];
			};
			var tBendDirectionDic={};
			var tMixDic={};
			for (n+=tSectionArr[2];i < n;i++){
				tBoneData=bones[i];
				tBendDirectionDic[tBoneData.name]=this._curOriginalData[tStartIndex++];
				tMixDic[tBoneData.name]=this._curOriginalData[tStartIndex++];
				this._curOriginalData[tStartIndex++];
				this._curOriginalData[tStartIndex++];
				this._curOriginalData[tStartIndex++];
				this._curOriginalData[tStartIndex++];
			}
			if (this._pathDic){
				var tPathConstraint;
				for (n+=tSectionArr[3];i < n;i++){
					tBoneData=bones[i];
					tPathConstraint=this._pathDic[tBoneData.name];
					if (tPathConstraint){
						var tByte=new Byte(tBoneData.extenData);
						switch(tByte.getByte()){
							case 1:
								tPathConstraint.position=this._curOriginalData[tStartIndex++];
								break ;
							case 2:
								tPathConstraint.spacing=this._curOriginalData[tStartIndex++];
								break ;
							case 3:
								tPathConstraint.rotateMix=this._curOriginalData[tStartIndex++];
								tPathConstraint.translateMix=this._curOriginalData[tStartIndex++];
								break ;
							}
					}
				}
			}
			if (this._yReverseMatrix){
				this._rootBone.update(this._yReverseMatrix);
				}else {
				this._rootBone.update(Matrix.TEMP.identity());
			}
			if (this._ikArr){
				var tIkConstraint;
				for (i=0,n=this._ikArr.length;i < n;i++){
					tIkConstraint=this._ikArr[i];
					if (tBendDirectionDic.hasOwnProperty(tIkConstraint.name)){
						tIkConstraint.bendDirection=tBendDirectionDic[tIkConstraint.name];
					}
					if (tMixDic.hasOwnProperty(tIkConstraint.name)){
						tIkConstraint.mix=tMixDic[tIkConstraint.name]
					}
					tIkConstraint.apply();
				}
			}
			if (this._pathDic){
				for (var tPathStr in this._pathDic){
					tPathConstraint=this._pathDic[tPathStr];
					tPathConstraint.apply(this._boneList,tGraphics);
				}
			}
			if (this._tfArr){
				var tTfConstraint;
				for (i=0,k=this._tfArr.length;i < k;i++){
					tTfConstraint=this._tfArr[i];
					tTfConstraint.apply();
				}
			}
			for (i=0,k=this._boneList.length;i < k;i++){
				tSrcBone=this._boneList[i];
				tDBBoneSlotArr=this._bindBoneBoneSlotDic[tSrcBone.name];
				tSrcBone.resultMatrix.copyTo(this._boneMatrixArray[i]);
				if (tDBBoneSlotArr){
					for (j=0,n=tDBBoneSlotArr.length;j < n;j++){
						tDBBoneSlot=tDBBoneSlotArr[j];
						if (tDBBoneSlot){
							tDBBoneSlot.setParentMatrix(tSrcBone.resultMatrix);
						}
					}
				}
			};
			var tDeformDic={};
			var tDeformAniArr=this._templet.deformAniArr;
			var tDeformAniData;
			var tDeformSlotData;
			var tDeformSlotDisplayData;
			if (tDeformAniArr && tDeformAniArr.length > 0){
				if (this._lastAniClipIndex !=this._aniClipIndex){
					this._lastAniClipIndex=this._aniClipIndex;
					for (i=0,n=this._boneSlotArray.length;i < n;i++){
						tDBBoneSlot=this._boneSlotArray[i];
						tDBBoneSlot.deformData=null;
					}
				};
				var tSkinDeformAni=tDeformAniArr[this._aniClipIndex];
				tDeformAniData=(tSkinDeformAni["default"]);
				this._setDeform(tDeformAniData,tDeformDic,this._boneSlotArray,curTime);
				var tSkin;
				for (tSkin in tSkinDeformAni){
					if (tSkin!="default"&&tSkin!=this._skinName){
						tDeformAniData=tSkinDeformAni [tSkin];
						this._setDeform(tDeformAniData,tDeformDic,this._boneSlotArray,curTime);
					}
				}
				tDeformAniData=(tSkinDeformAni[this._skinName]);
				this._setDeform(tDeformAniData,tDeformDic,this._boneSlotArray,curTime);
			};
			var tSlotData2;
			var tSlotData3;
			var tObject;
			if (this._drawOrder){
				for (i=0,n=this._drawOrder.length;i < n;i++){
					tDBBoneSlot=this._boneSlotArray[this._drawOrder[i]];
					tSlotData2=tSlotDic[tDBBoneSlot.name];
					tSlotData3=tSlotAlphaDic[tDBBoneSlot.name];
					if (!isNaN(tSlotData3)){
						tGraphics.save();
						tGraphics.alpha(tSlotData3);
					}
					if (!isNaN(tSlotData2)&&tSlotData2!=-2){
						if (this._templet.attachmentNames){
							tDBBoneSlot.showDisplayByName(this._templet.attachmentNames[tSlotData2]);
							}else {
							tDBBoneSlot.showDisplayByIndex(tSlotData2);
						}
					}
					if (tDeformDic[this._drawOrder[i]]){
						tObject=tDeformDic[this._drawOrder[i]];
						if (tDBBoneSlot.currDisplayData && tObject[tDBBoneSlot.currDisplayData.attachmentName]){
							tDBBoneSlot.deformData=tObject[tDBBoneSlot.currDisplayData.attachmentName];
							}else {
							tDBBoneSlot.deformData=null;
						}
						}else {
						tDBBoneSlot.deformData=null;
					}
					if (!isNaN(tSlotData3)){
						tDBBoneSlot.draw(tGraphics,this._boneMatrixArray,this._aniMode==2,tSlotData3);
						}else {
						tDBBoneSlot.draw(tGraphics,this._boneMatrixArray,this._aniMode==2);
					}
					if (!isNaN(tSlotData3)){
						tGraphics.restore();
					}
				}
				}else {
				for (i=0,n=this._boneSlotArray.length;i < n;i++){
					tDBBoneSlot=this._boneSlotArray[i];
					tSlotData2=tSlotDic[tDBBoneSlot.name];
					tSlotData3=tSlotAlphaDic[tDBBoneSlot.name];
					if (!isNaN(tSlotData3)){
						tGraphics.save();
						tGraphics.alpha(tSlotData3);
					}
					if (!isNaN(tSlotData2)&&tSlotData2!=-2){
						if (this._templet.attachmentNames){
							tDBBoneSlot.showDisplayByName(this._templet.attachmentNames[tSlotData2]);
							}else {
							tDBBoneSlot.showDisplayByIndex(tSlotData2);
						}
					}
					if (tDeformDic[i]){
						tObject=tDeformDic[i];
						if (tDBBoneSlot.currDisplayData && tObject[tDBBoneSlot.currDisplayData.attachmentName]){
							tDBBoneSlot.deformData=tObject[tDBBoneSlot.currDisplayData.attachmentName];
							}else {
							tDBBoneSlot.deformData=null;
						}
						}else {
						tDBBoneSlot.deformData=null;
					}
					if (!isNaN(tSlotData3)){
						tDBBoneSlot.draw(tGraphics,this._boneMatrixArray,this._aniMode==2,tSlotData3);
						}else {
						tDBBoneSlot.draw(tGraphics,this._boneMatrixArray,this._aniMode==2);
					}
					if (!isNaN(tSlotData3)){
						tGraphics.restore();
					}
				}
			}
			if (this._aniMode==0){
				this._templet.setGrahicsDataWithCache(this._aniClipIndex,_clipIndex,tGraphics);
				}else if (this._aniMode==1){
				this._setGrahicsDataWithCache(this._aniClipIndex,_clipIndex,tGraphics);
			}
		}

		/**
		*设置deform数据
		*@param tDeformAniData
		*@param tDeformDic
		*@param _boneSlotArray
		*@param curTime
		*/
		__proto._setDeform=function(tDeformAniData,tDeformDic,_boneSlotArray,curTime){
			if (!tDeformAniData)return;
			var tDeformSlotData;
			var tDeformSlotDisplayData;
			var tDBBoneSlot;
			var i=0,n=0,j=0;
			if (tDeformAniData){
				for (i=0,n=tDeformAniData.deformSlotDataList.length;i < n;i++){
					tDeformSlotData=tDeformAniData.deformSlotDataList[i];
					for (j=0;j < tDeformSlotData.deformSlotDisplayList.length;j++){
						tDeformSlotDisplayData=tDeformSlotData.deformSlotDisplayList[j];
						tDBBoneSlot=_boneSlotArray[tDeformSlotDisplayData.slotIndex];
						tDeformSlotDisplayData.apply(curTime,tDBBoneSlot);
						if (!tDeformDic[tDeformSlotDisplayData.slotIndex]){
							tDeformDic[tDeformSlotDisplayData.slotIndex]={};
						}
						tDeformDic[tDeformSlotDisplayData.slotIndex][tDeformSlotDisplayData.attachment]=tDeformSlotDisplayData.deformData;
					}
				}
			}
		}

		/**
		*得到当前动画的数量
		*@return 当前动画的数量
		*/
		__proto.getAnimNum=function(){
			return this._templet.getAnimationCount();
		}

		/**
		*得到指定动画的名字
		*@param index 动画的索引
		*/
		__proto.getAniNameByIndex=function(index){
			return this._templet.getAniNameByIndex(index);
		}

		/**
		*通过名字得到插槽的引用
		*@param name 动画的名字
		*@return 插槽的引用
		*/
		__proto.getSlotByName=function(name){
			return this._boneSlotDic[name];
		}

		/**
		*通过名字显示一套皮肤
		*@param name 皮肤的名字
		*@param freshSlotIndex 是否将插槽纹理重置到初始化状态
		*/
		__proto.showSkinByName=function(name,freshSlotIndex){
			(freshSlotIndex===void 0)&& (freshSlotIndex=true);
			this.showSkinByIndex(this._templet.getSkinIndexByName(name),freshSlotIndex);
		}

		/**
		*通过索引显示一套皮肤
		*@param skinIndex 皮肤索引
		*@param freshSlotIndex 是否将插槽纹理重置到初始化状态
		*/
		__proto.showSkinByIndex=function(skinIndex,freshSlotIndex){
			(freshSlotIndex===void 0)&& (freshSlotIndex=true);
			for (var i=0;i < this._boneSlotArray.length;i++){
				(this._boneSlotArray [i]).showSlotData(null,freshSlotIndex);
			}
			if (this._templet.showSkinByIndex(this._boneSlotDic,skinIndex,freshSlotIndex)){
				var tSkinData=this._templet.skinDataArray[skinIndex];
				this._skinIndex=skinIndex;
				this._skinName=tSkinData.name;
			}
			this._clearCache();
		}

		/**
		*设置某插槽的皮肤
		*@param slotName 插槽名称
		*@param index 插糟皮肤的索引
		*/
		__proto.showSlotSkinByIndex=function(slotName,index){
			if (this._aniMode==0)return;
			var tBoneSlot=this.getSlotByName(slotName);
			if (tBoneSlot){
				tBoneSlot.showDisplayByIndex(index);
			}
			this._clearCache();
		}

		/**
		*设置某插槽的皮肤
		*@param slotName 插槽名称
		*@param name 皮肤名称
		*/
		__proto.showSlotSkinByName=function(slotName,name){
			if (this._aniMode==0)return;
			var tBoneSlot=this.getSlotByName(slotName);
			if (tBoneSlot){
				tBoneSlot.showDisplayByName(name);
			}
			this._clearCache();
		}

		/**
		*替换插槽贴图名
		*@param slotName 插槽名称
		*@param oldName 要替换的贴图名
		*@param newName 替换后的贴图名
		*/
		__proto.replaceSlotSkinName=function(slotName,oldName,newName){
			if (this._aniMode==0)return;
			var tBoneSlot=this.getSlotByName(slotName);
			if (tBoneSlot){
				tBoneSlot.replaceDisplayByName(oldName,newName);
			}
			this._clearCache();
		}

		/**
		*替换插槽的贴图索引
		*@param slotName 插槽名称
		*@param oldIndex 要替换的索引
		*@param newIndex 替换后的索引
		*/
		__proto.replaceSlotSkinByIndex=function(slotName,oldIndex,newIndex){
			if (this._aniMode==0)return;
			var tBoneSlot=this.getSlotByName(slotName);
			if (tBoneSlot){
				tBoneSlot.replaceDisplayByIndex(oldIndex,newIndex);
			}
			this._clearCache();
		}

		/**
		*设置自定义皮肤
		*@param name 插糟的名字
		*@param texture 自定义的纹理
		*/
		__proto.setSlotSkin=function(slotName,texture){
			if (this._aniMode==0)return;
			var tBoneSlot=this.getSlotByName(slotName);
			if (tBoneSlot){
				tBoneSlot.replaceSkin(texture);
			}
			this._clearCache();
		}

		/**
		*换装的时候，需要清一下缓冲区
		*/
		__proto._clearCache=function(){
			if (this._aniMode==1){
				for (var i=0,n=this._graphicsCache.length;i < n;i++){
					this._graphicsCache[i].length=0;
				}
			}
		}

		/**
		*播放动画
		*
		*@param nameOrIndex 动画名字或者索引
		*@param loop 是否循环播放
		*@param force false,如果要播的动画跟上一个相同就不生效,true,强制生效
		*@param start 起始时间
		*@param end 结束时间
		*@param freshSkin 是否刷新皮肤数据
		*/
		__proto.play=function(nameOrIndex,loop,force,start,end,freshSkin){
			(force===void 0)&& (force=true);
			(start===void 0)&& (start=0);
			(end===void 0)&& (end=0);
			(freshSkin===void 0)&& (freshSkin=true);
			this._indexControl=false;
			var index=-1;
			var duration=NaN;
			if (loop){
				duration=2147483647;
				}else {
				duration=0;
			}
			if ((typeof nameOrIndex=='string')){
				for (var i=0,n=this._templet.getAnimationCount();i < n;i++){
					var animation=this._templet.getAnimation(i);
					if (animation && nameOrIndex==animation.name){
						index=i;
						break ;
					}
				}
				}else {
				index=nameOrIndex;
			}
			if (index >-1 && index < this.getAnimNum()){
				this._aniClipIndex=index;
				if (force || this._pause || this._currAniIndex !=index){
					this._currAniIndex=index;
					this._curOriginalData=new Float32Array(this._templet.getTotalkeyframesLength(index));
					this._drawOrder=null;
					this._eventIndex=0;
					this._player.play(index,this._player.playbackRate,duration,start,end);
					if(freshSkin)
						this._templet.showSkinByIndex(this._boneSlotDic,this._skinIndex);
					if (this._pause){
						this._pause=false;
						this._lastTime=Browser.now();
						Laya.stage.frameLoop(1,this,this._update,null,true);
					}
					this._update();
				}
			}
		}

		/**
		*停止动画
		*/
		__proto.stop=function(){
			if (!this._pause){
				this._pause=true;
				if (this._player){
					this._player.stop(true);
				}
				Laya.timer.clear(this,this._update);
			}
		}

		/**
		*设置动画播放速率
		*@param value 1为标准速率
		*/
		__proto.playbackRate=function(value){
			if (this._player){
				this._player.playbackRate=value;
			}
		}

		/**
		*暂停动画的播放
		*/
		__proto.paused=function(){
			if (!this._pause){
				this._pause=true;
				if (this._player){
					this._player.paused=true;
				}
				Laya.timer.clear(this,this._update);
			}
		}

		/**
		*恢复动画的播放
		*/
		__proto.resume=function(){
			this._indexControl=false;
			if (this._pause){
				this._pause=false;
				if (this._player){
					this._player.paused=false;
				}
				this._lastTime=Browser.now();
				Laya.stage.frameLoop(1,this,this._update,null,true);
			}
		}

		/**
		*@private
		*得到缓冲数据
		*@param aniIndex
		*@param frameIndex
		*@return
		*/
		__proto._getGrahicsDataWithCache=function(aniIndex,frameIndex){
			return this._graphicsCache[aniIndex][frameIndex];
		}

		/**
		*@private
		*保存缓冲grahpics
		*@param aniIndex
		*@param frameIndex
		*@param graphics
		*/
		__proto._setGrahicsDataWithCache=function(aniIndex,frameIndex,graphics){
			this._graphicsCache[aniIndex][frameIndex]=graphics;
		}

		/**
		*销毁当前动画
		*/
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._templet=null;
			if(this._player)this._player.offAll();
			this._player=null;
			this._curOriginalData=null;
			this._boneMatrixArray.length=0;
			this._lastTime=0;
			Laya.timer.clear(this,this._update);
		}

		/**
		*设置动画路径
		*/
		/**
		*得到资源的URL
		*/
		__getset(0,__proto,'url',function(){
			return this._aniPath;
			},function(path){
			this.load(path);
		});

		/**
		*@private
		*设置帧索引
		*/
		/**
		*@private
		*得到帧索引
		*/
		__getset(0,__proto,'index',function(){
			return this._index;
			},function(value){
			if (this.player){
				this._index=value;
				this._player.currentTime=this._index *1000 / this._player.cacheFrameRate;
				this._indexControl=true;
				this._update(false);
			}
		});

		/**
		*得到总帧数据
		*/
		__getset(0,__proto,'total',function(){
			if (this._templet && this._player){
				this._total=Math.floor(this._templet.getAniDuration(this._player.currentAnimationClipIndex)/ 1000 *this._player.cacheFrameRate);
				}else {
				this._total=-1;
			}
			return this._total;
		});

		/**
		*得到播放器的引用
		*/
		__getset(0,__proto,'player',function(){
			return this._player;
		});

		Skeleton.useSimpleMeshInCanvas=false;
		return Skeleton;
	})(Sprite)


	/**
	*<p> <code>MovieClip</code> 用于播放经过工具处理后的 swf 动画。</p>
	*/
	//class laya.ani.swf.MovieClip extends laya.display.Sprite
	var MovieClip=(function(_super){
		function MovieClip(parentMovieClip){
			this._start=0;
			this._Pos=0;
			this._data=null;
			this._curIndex=0;
			this._preIndex=0;
			this._playIndex=0;
			this._playing=false;
			this._ended=true;
			this._count=0;
			this._ids=null;
			this._loadedImage={};
			this._idOfSprite=null;
			this._parentMovieClip=null;
			this._movieClipList=null;
			this._labels=null;
			this.basePath=null;
			this._atlasPath=null;
			this._url=null;
			this._isRoot=false;
			this._completeHandler=null;
			this._endFrame=-1;
			this.interval=30;
			this.loop=false;
			MovieClip.__super.call(this);
			this._ids={};
			this._idOfSprite=[];
			this._reset();
			this._playing=false;
			this._parentMovieClip=parentMovieClip;
			if (!parentMovieClip){
				this._movieClipList=[this];
				this._isRoot=true;
				this._setUpNoticeType(/*laya.display.Node.NOTICE_DISPLAY*/0x1);
				}else {
				this._isRoot=false;
				this._movieClipList=parentMovieClip._movieClipList;
				this._movieClipList.push(this);
			}
		}

		__class(MovieClip,'laya.ani.swf.MovieClip',_super);
		var __proto=MovieClip.prototype;
		/**
		*<p>销毁此对象。以及销毁引用的Texture</p>
		*@param destroyChild 是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。
		*/
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this._clear();
			_super.prototype.destroy.call(this,destroyChild);
		}

		/**@private */
		__proto._setDisplay=function(value){
			_super.prototype._setDisplay.call(this,value);
			if (this._isRoot){
				this._$3__onDisplay(value);
			}
		}

		/**@private */
		__proto._$3__onDisplay=function(value){
			if (value)Laya.timer.loop(this.interval,this,this.updates,null,true);
			else Laya.timer.clear(this,this.updates);
		}

		/**@private 更新时间轴*/
		__proto.updates=function(){
			if (this._parentMovieClip)return;
			var i=0,len=0;
			len=this._movieClipList.length;
			for (i=0;i < len;i++){
				this._movieClipList[i]&&this._movieClipList[i]._update();
			}
		}

		/**
		*增加一个标签到index帧上，播放到此index后会派发label事件
		*@param label 标签名称
		*@param index 索引位置
		*/
		__proto.addLabel=function(label,index){
			if (!this._labels)this._labels={};
			this._labels[index]=label;
		}

		/**
		*删除某个标签
		*@param label 标签名字，如果label为空，则删除所有Label
		*/
		__proto.removeLabel=function(label){
			if (!label)this._labels=null;
			else if (!this._labels){
				for (var name in this._labels){
					if (this._labels[name]===label){
						delete this._labels[name];
						break ;
					}
				}
			}
		}

		/**
		*@private
		*动画的帧更新处理函数。
		*/
		__proto._update=function(){
			if (!this._data)return;
			if (!this._playing)return;
			this._playIndex++;
			if (this._playIndex >=this._count){
				if (!this.loop){
					this._playIndex--;
					this.stop();
					return;
				}
				this._playIndex=0;
			}
			this._parse(this._playIndex);
			if (this._labels && this._labels[this._playIndex])this.event(/*laya.events.Event.LABEL*/"label",this._labels[this._playIndex]);
			if (this._endFrame!=-1&&this._endFrame==this._playIndex){
				this._endFrame=-1;
				if (this._completeHandler !=null){
					var handler=this._completeHandler;
					this._completeHandler=null;
					handler.run();
				}
				this.stop();
			}
		}

		/**
		*停止播放动画。
		*/
		__proto.stop=function(){
			this._playing=false;
		}

		/**
		*跳到某帧并停止播放动画。
		*@param frame 要跳到的帧
		*/
		__proto.gotoAndStop=function(index){
			this.index=index;
			this.stop();
		}

		/**
		*@private
		*清理。
		*/
		__proto._clear=function(){
			this.stop();
			this._idOfSprite.length=0;
			if (!this._parentMovieClip){
				Laya.timer.clear(this,this.updates);
				var i=0,len=0;
				len=this._movieClipList.length;
				for (i=0;i < len;i++){
					if (this._movieClipList[i] !=this)
						this._movieClipList[i]._clear();
				}
				this._movieClipList.length=0;
			}
			if (this._atlasPath){
				Loader.clearRes(this._atlasPath);
			};
			var key;
			for (key in this._loadedImage){
				if (this._loadedImage[key]){
					Loader.clearRes(key);
					this._loadedImage[key]=false;
				}
			}
			this.removeChildren();
			this.graphics=null;
			this._parentMovieClip=null;
		}

		/**
		*播放动画。
		*@param index 帧索引。
		*/
		__proto.play=function(index,loop){
			(index===void 0)&& (index=0);
			(loop===void 0)&& (loop=true);
			this.loop=loop;
			this._playing=true;
			if (this._data)
				this._displayFrame(index);
		}

		/**@private */
		__proto._displayFrame=function(frameIndex){
			(frameIndex===void 0)&& (frameIndex=-1);
			if (frameIndex !=-1){
				if (this._curIndex > frameIndex)this._reset();
				this._parse(frameIndex);
			}
		}

		/**@private */
		__proto._reset=function(rm){
			(rm===void 0)&& (rm=true);
			if (rm && this._curIndex !=1)this.removeChildren();
			this._preIndex=this._curIndex=-1;
			this._Pos=this._start;
		}

		/**@private */
		__proto._parse=function(frameIndex){
			var curChild=this;
			var mc,sp,key=0,type=0,tPos=0,ttype=0,ifAdd=false;
			var _idOfSprite=this._idOfSprite,_data=this._data,eStr;
			if (this._ended)this._reset();
			_data.pos=this._Pos;
			this._ended=false;
			this._playIndex=frameIndex;
			if (this._curIndex > frameIndex&&frameIndex<this._preIndex){
				this._reset(true);
				_data.pos=this._Pos;
			}
			while ((this._curIndex <=frameIndex)&& (!this._ended)){
				type=_data.getUint16();
				switch (type){
					case 12:
						key=_data.getUint16();
						tPos=this._ids[_data.getUint16()];
						this._Pos=_data.pos;
						_data.pos=tPos;
						if ((ttype=_data.getUint8())==0){
							var pid=_data.getUint16();
							sp=_idOfSprite[key]
							if (!sp){
								sp=_idOfSprite[key]=new Sprite();
								var spp=new Sprite();
								spp.loadImage(this.basePath+pid+".png");
								this._loadedImage[this.basePath+pid+".png"]=true;
								sp.addChild(spp);
								spp.size(_data.getFloat32(),_data.getFloat32());
								var mat=_data._getMatrix();
								spp.transform=mat;
							}
							sp.alpha=1;
							}else if (ttype==1){
							mc=_idOfSprite[key]
							if (!mc){
								_idOfSprite[key]=mc=new MovieClip(this);
								mc.interval=this.interval;
								mc._ids=this._ids;
								mc.basePath=this.basePath;
								mc._setData(_data,tPos);
								mc._initState();
								mc.play(0);
							}
							mc.alpha=1;
						}
						_data.pos=this._Pos;
						break ;
					case 3:;
						var node=_idOfSprite[ _data.getUint16()];
						if (node){
							this.addChild(node);
							node.zOrder=_data.getUint16();
							ifAdd=true;
						}
						break ;
					case 4:
						node=_idOfSprite[ _data.getUint16()];
						node && node.removeSelf();
						break ;
					case 5:
						_idOfSprite[_data.getUint16()][MovieClip._ValueList[_data.getUint16()]]=(_data.getFloat32());
						break ;
					case 6:
						_idOfSprite[_data.getUint16()].visible=(_data.getUint8()> 0);
						break ;
					case 7:
						sp=_idOfSprite[ _data.getUint16()];
						var mt=sp.transform || Matrix.create();
						mt.setTo(_data.getFloat32(),_data.getFloat32(),_data.getFloat32(),_data.getFloat32(),_data.getFloat32(),_data.getFloat32());
						sp.transform=mt;
						break ;
					case 8:
						_idOfSprite[_data.getUint16()].setPos(_data.getFloat32(),_data.getFloat32());
						break ;
					case 9:
						_idOfSprite[_data.getUint16()].setSize(_data.getFloat32(),_data.getFloat32());
						break ;
					case 10:
						_idOfSprite[ _data.getUint16()].alpha=_data.getFloat32();
						break ;
					case 11:
						_idOfSprite[_data.getUint16()].setScale(_data.getFloat32(),_data.getFloat32());
						break ;
					case 98:
						eStr=_data.getString();
						this.event(eStr);
						if (eStr=="stop")this.stop();
						break ;
					case 99:
						this._curIndex=_data.getUint16();
						ifAdd && this.updateZOrder();
						break ;
					case 100:
						this._count=this._curIndex+1;
						this._ended=true;
						if (this._playing){
							this.event(/*laya.events.Event.FRAME*/"enterframe");
							this.event(/*laya.events.Event.END*/"end");
							this.event(/*laya.events.Event.COMPLETE*/"complete");
						}
						this._reset(false);
						break ;
					}
			}
			if (this._playing&&!this._ended)this.event(/*laya.events.Event.FRAME*/"enterframe");
			this._Pos=_data.pos;
		}

		/**@private */
		__proto._setData=function(data,start){
			this._data=data;
			this._start=start+3;
		}

		/**
		*加载资源。
		*@param url swf 资源地址。
		*@param atlas 是否使用图集资源
		*@param atlasPath 图集路径，默认使用与swf同名的图集
		*/
		__proto.load=function(url,atlas,atlasPath){
			(atlas===void 0)&& (atlas=false);
			this._url=url=URL.formatURL(url);
			if(atlas)this._atlasPath=atlasPath?atlasPath:url.split(".swf")[0]+".json";
			this.stop();
			this._clear();
			this._movieClipList=[this];
			var urls;
			urls=[ {url:url,type:/*laya.net.Loader.BUFFER*/"arraybuffer" }];
			if (this._atlasPath){
				urls.push({url:this._atlasPath,type:/*laya.net.Loader.ATLAS*/"atlas" });
			}
			Laya.loader.load(urls,Handler.create(this,this._onLoaded));
		}

		/**@private */
		__proto._onLoaded=function(){
			var data;
			data=Loader.getRes(this._url);
			if (!data){
				this.event(/*laya.events.Event.ERROR*/"error","file not find");
				return;
			}
			this.basePath=this._atlasPath?Loader.getAtlas(this._atlasPath).dir:this._url.split(".swf")[0]+"/image/";
			this._initData(data);
		}

		/**@private */
		__proto._initState=function(){
			this._reset();
			this._ended=false;
			var preState=this._playing;
			this._playing=false;
			this._curIndex=0;
			while (!this._ended)this._parse(++this._curIndex);
			this._playing=preState;
		}

		/**@private */
		__proto._initData=function(data){
			this._data=new Byte(data);
			var i=0,len=this._data.getUint16();
			for (i=0;i < len;i++)this._ids[this._data.getInt16()]=this._data.getInt32();
			this.interval=1000 / this._data.getUint16();
			this._setData(this._data,this._ids[32767]);
			this._initState();
			this.play(0);
			this.event(/*laya.events.Event.LOADED*/"loaded");
			if (!this._parentMovieClip)Laya.timer.loop(this.interval,this,this.updates,null,true);
		}

		/**
		*从开始索引播放到结束索引，结束之后出发complete回调
		*@param start 开始索引
		*@param end 结束索引
		*@param complete 结束回调
		*/
		__proto.playTo=function(start,end,complete){
			this._completeHandler=complete;
			this._endFrame=end;
			this.play(start,false);
		}

		/**当前播放索引。*/
		__getset(0,__proto,'index',function(){
			return this._playIndex;
			},function(value){
			this._playIndex=value;
			if (this._data)
				this._displayFrame(this._playIndex);
			if (this._labels && this._labels[value])this.event(/*laya.events.Event.LABEL*/"label",this._labels[value]);
		});

		/**
		*帧总数。
		*/
		__getset(0,__proto,'count',function(){
			return this._count;
		});

		/**
		*是否在播放中
		*/
		__getset(0,__proto,'playing',function(){
			return this._playing;
		});

		/**
		*资源地址。
		*/
		__getset(0,__proto,'url',null,function(path){
			this.load(path);
		});

		MovieClip._ValueList=["x","y","width","height","scaleX","scaleY","rotation","alpha"];
		return MovieClip;
	})(Sprite)


	/**
	*动画模板类
	*/
	//class laya.ani.bone.Templet extends laya.ani.AnimationTemplet
	var Templet=(function(_super){
		function Templet(){
			this._mainTexture=null;
			this._textureJson=null;
			this._graphicsCache=[];
			this.srcBoneMatrixArr=[];
			this.ikArr=[];
			this.tfArr=[];
			this.pathArr=[];
			this.boneSlotDic={};
			this.bindBoneBoneSlotDic={};
			this.boneSlotArray=[];
			this.skinDataArray=[];
			this.skinDic={};
			this.subTextureDic={};
			this.isParseFail=false;
			this.yReverseMatrix=null;
			this.drawOrderAniArr=[];
			this.eventAniArr=[];
			this.attachmentNames=null;
			this.deformAniArr=[];
			this._isDestroyed=false;
			this._rate=30;
			this.isParserComplete=false;
			this.aniSectionDic={};
			this._skBufferUrl=null;
			this._textureDic={};
			this._loadList=null;
			this._path=null;
			this.tMatrixDataLen=0;
			this.mRootBone=null;
			Templet.__super.call(this);
			this.skinSlotDisplayDataArr=[];
			this.mBoneArr=[];
		}

		__class(Templet,'laya.ani.bone.Templet',_super);
		var __proto=Templet.prototype;
		__proto.loadAni=function(url){
			this._skBufferUrl=url;
			Laya.loader.load(url,Handler.create(this,this.onComplete),null,/*laya.net.Loader.BUFFER*/"arraybuffer");
		}

		__proto.onComplete=function(content){
			if (this._isDestroyed){
				this.destroy();
				return;
			};
			var tSkBuffer=Loader.getRes(this._skBufferUrl);
			if (!tSkBuffer){
				this.event(/*laya.events.Event.ERROR*/"error","load failed:"+this._skBufferUrl);
				return;
			}
			this._path=this._skBufferUrl.slice(0,this._skBufferUrl.lastIndexOf("/"))+"/";
			this.parseData(null,tSkBuffer);
		}

		/**
		*解析骨骼动画数据
		*@param texture 骨骼动画用到的纹理
		*@param skeletonData 骨骼动画信息及纹理分块信息
		*@param playbackRate 缓冲的帧率数据（会根据帧率去分帧）
		*/
		__proto.parseData=function(texture,skeletonData,playbackRate){
			(playbackRate===void 0)&& (playbackRate=30);
			if(!this._path&&this.url)this._path=this.url.slice(0,this.url.lastIndexOf("/"))+"/";
			this._mainTexture=texture;
			if (this._mainTexture){
				if (Render.isWebGL && texture.bitmap){
					texture.bitmap.enableMerageInAtlas=false;
				}
			}
			this._rate=playbackRate;
			this.parse(skeletonData);
		}

		/**
		*创建动画
		*0,使用模板缓冲的数据，模板缓冲的数据，不允许修改 （内存开销小，计算开销小，不支持换装）
		*1,使用动画自己的缓冲区，每个动画都会有自己的缓冲区，相当耗费内存 （内存开销大，计算开销小，支持换装）
		*2,使用动态方式，去实时去画 （内存开销小，计算开销大，支持换装,不建议使用）
		*@param aniMode 0 动画模式，0:不支持换装,1,2支持换装
		*@return
		*/
		__proto.buildArmature=function(aniMode){
			(aniMode===void 0)&& (aniMode=0);
			return new Skeleton(this,aniMode);
		}

		/**
		*@private
		*解析动画
		*@param data 解析的二进制数据
		*@param playbackRate 帧率
		*/
		__proto.parse=function(data){
			_super.prototype.parse.call(this,data);
			this._endLoaded();
			if (this._aniVersion !=Templet.LAYA_ANIMATION_VISION){
				console.log("[Error] 版本不一致，请使用IDE版本配套的重新导出"+this._aniVersion+"->"+Templet.LAYA_ANIMATION_VISION);
				this._loaded=false;
			}
			if (this.loaded){
				if (this._mainTexture){
					this._parsePublicExtData();
					}else {
					this._parseTexturePath();
				}
				}else {
				this.event(/*laya.events.Event.ERROR*/"error",this);
				this.isParseFail=true;
			}
		}

		__proto._parseTexturePath=function(){
			if (this._isDestroyed){
				this.destroy();
				return;
			};
			var i=0;
			this._loadList=[];
			var tByte=new Byte(this.getPublicExtData());
			var tX=0,tY=0,tWidth=0,tHeight=0;
			var tFrameX=0,tFrameY=0,tFrameWidth=0,tFrameHeight=0;
			var tTempleData=0;
			var tTextureLen=tByte.getInt32();
			var tTextureName=tByte.readUTFString();
			var tTextureNameArr=tTextureName.split("\n");
			var tTexture;
			var tSrcTexturePath;
			for (i=0;i < tTextureLen;i++){
				tSrcTexturePath=this._path+tTextureNameArr[i *2];
				tTextureName=tTextureNameArr[i *2+1];
				tX=tByte.getFloat32();
				tY=tByte.getFloat32();
				tWidth=tByte.getFloat32();
				tHeight=tByte.getFloat32();
				tTempleData=tByte.getFloat32();
				tFrameX=isNaN(tTempleData)? 0 :tTempleData;
				tTempleData=tByte.getFloat32();
				tFrameY=isNaN(tTempleData)? 0 :tTempleData;
				tTempleData=tByte.getFloat32();
				tFrameWidth=isNaN(tTempleData)? tWidth :tTempleData;
				tTempleData=tByte.getFloat32();
				tFrameHeight=isNaN(tTempleData)? tHeight :tTempleData;
				if (this._loadList.indexOf(tSrcTexturePath)==-1){
					this._loadList.push(tSrcTexturePath);
				}
			}
			Laya.loader.load(this._loadList,Handler.create(this,this._textureComplete));
		}

		/**
		*纹理加载完成
		*/
		__proto._textureComplete=function(){
			var tTexture;
			var tTextureName;
			for (var i=0,n=this._loadList.length;i < n;i++){
				tTextureName=this._loadList[i];
				tTexture=this._textureDic[tTextureName]=Loader.getRes(tTextureName);
				if (Render.isWebGL && tTexture && tTexture.bitmap){
					tTexture.bitmap.enableMerageInAtlas=false;
				}
			}
			this._parsePublicExtData();
		}

		/**
		*解析自定义数据
		*/
		__proto._parsePublicExtData=function(){
			var i=0,j=0,k=0,l=0,n=0;
			for (i=0,n=this.getAnimationCount();i < n;i++){
				this._graphicsCache.push([]);
			};
			var isSpine=false;
			isSpine=this._aniClassName !="Dragon";
			var tByte=new Byte(this.getPublicExtData());
			var tX=0,tY=0,tWidth=0,tHeight=0;
			var tFrameX=0,tFrameY=0,tFrameWidth=0,tFrameHeight=0;
			var tTempleData=0;
			var tTextureLen=tByte.getInt32();
			var tTextureName=tByte.readUTFString();
			var tTextureNameArr=tTextureName.split("\n");
			var tTexture;
			var tSrcTexturePath;
			for (i=0;i < tTextureLen;i++){
				tTexture=this._mainTexture;
				tSrcTexturePath=this._path+tTextureNameArr[i *2];
				tTextureName=tTextureNameArr[i *2+1];
				if (this._mainTexture==null){
					tTexture=this._textureDic[tSrcTexturePath];
				}
				if (!tTexture){
					this.event(/*laya.events.Event.ERROR*/"error",this);
					this.isParseFail=true;
					return;
				}
				tX=tByte.getFloat32();
				tY=tByte.getFloat32();
				tWidth=tByte.getFloat32();
				tHeight=tByte.getFloat32();
				tTempleData=tByte.getFloat32();
				tFrameX=isNaN(tTempleData)? 0 :tTempleData;
				tTempleData=tByte.getFloat32();
				tFrameY=isNaN(tTempleData)? 0 :tTempleData;
				tTempleData=tByte.getFloat32();
				tFrameWidth=isNaN(tTempleData)? tWidth :tTempleData;
				tTempleData=tByte.getFloat32();
				tFrameHeight=isNaN(tTempleData)? tHeight :tTempleData;
				this.subTextureDic[tTextureName]=Texture.create(tTexture,tX,tY,tWidth,tHeight,-tFrameX,-tFrameY,tFrameWidth,tFrameHeight);
			}
			this._mainTexture=tTexture;
			var tAniCount=tByte.getUint16();
			var tSectionArr;
			for (i=0;i < tAniCount;i++){
				tSectionArr=[];
				tSectionArr.push(tByte.getUint16());
				tSectionArr.push(tByte.getUint16());
				tSectionArr.push(tByte.getUint16());
				tSectionArr.push(tByte.getUint16());
				this.aniSectionDic[i]=tSectionArr;
			};
			var tBone;
			var tParentBone;
			var tName;
			var tParentName;
			var tBoneLen=tByte.getInt16();
			var tBoneDic={};
			var tRootBone;
			for (i=0;i < tBoneLen;i++){
				tBone=new Bone();
				if (i==0){
					tRootBone=tBone;
					}else {
					tBone.root=tRootBone;
				}
				tBone.d=isSpine?-1:1;
				tName=tByte.readUTFString();
				tParentName=tByte.readUTFString();
				tBone.length=tByte.getFloat32();
				if (tByte.getByte()==1){
					tBone.inheritRotation=false;
				}
				if (tByte.getByte()==1){
					tBone.inheritScale=false;
				}
				tBone.name=tName;
				if (tParentName){
					tParentBone=tBoneDic[tParentName];
					if (tParentBone){
						tParentBone.addChild(tBone);
						}else {
						this.mRootBone=tBone;
					}
				}
				tBoneDic[tName]=tBone;
				this.mBoneArr.push(tBone);
			}
			this.tMatrixDataLen=tByte.getUint16();
			var tLen=tByte.getUint16();
			var parentIndex=0;
			var boneLength=Math.floor(tLen / this.tMatrixDataLen);
			var tResultTransform;
			var tMatrixArray=this.srcBoneMatrixArr;
			for (i=0;i < boneLength;i++){
				tResultTransform=new Transform();
				tResultTransform.scX=tByte.getFloat32();
				tResultTransform.skX=tByte.getFloat32();
				tResultTransform.skY=tByte.getFloat32();
				tResultTransform.scY=tByte.getFloat32();
				tResultTransform.x=tByte.getFloat32();
				tResultTransform.y=tByte.getFloat32();
				if (this.tMatrixDataLen===8){
					tResultTransform.skewX=tByte.getFloat32();
					tResultTransform.skewY=tByte.getFloat32();
				}
				tMatrixArray.push(tResultTransform);
				tBone=this.mBoneArr[i];
				tBone.transform=tResultTransform;
			};
			var tIkConstraintData;
			var tIkLen=tByte.getUint16();
			var tIkBoneLen=0;
			for (i=0;i < tIkLen;i++){
				tIkConstraintData=new IkConstraintData();
				tIkBoneLen=tByte.getUint16();
				for (j=0;j < tIkBoneLen;j++){
					tIkConstraintData.boneNames.push(tByte.readUTFString());
					tIkConstraintData.boneIndexs.push(tByte.getInt16());
				}
				tIkConstraintData.name=tByte.readUTFString();
				tIkConstraintData.targetBoneName=tByte.readUTFString();
				tIkConstraintData.targetBoneIndex=tByte.getInt16();
				tIkConstraintData.bendDirection=tByte.getFloat32();
				tIkConstraintData.mix=tByte.getFloat32();
				tIkConstraintData.isSpine=isSpine;
				this.ikArr.push(tIkConstraintData);
			};
			var tTfConstraintData;
			var tTfLen=tByte.getUint16();
			var tTfBoneLen=0;
			for (i=0;i < tTfLen;i++){
				tTfConstraintData=new TfConstraintData();
				tTfBoneLen=tByte.getUint16();
				for (j=0;j < tTfBoneLen;j++){
					tTfConstraintData.boneIndexs.push(tByte.getInt16());
				}
				tTfConstraintData.name=tByte.getUTFString();
				tTfConstraintData.targetIndex=tByte.getInt16();
				tTfConstraintData.rotateMix=tByte.getFloat32();
				tTfConstraintData.translateMix=tByte.getFloat32();
				tTfConstraintData.scaleMix=tByte.getFloat32();
				tTfConstraintData.shearMix=tByte.getFloat32();
				tTfConstraintData.offsetRotation=tByte.getFloat32();
				tTfConstraintData.offsetX=tByte.getFloat32();
				tTfConstraintData.offsetY=tByte.getFloat32();
				tTfConstraintData.offsetScaleX=tByte.getFloat32();
				tTfConstraintData.offsetScaleY=tByte.getFloat32();
				tTfConstraintData.offsetShearY=tByte.getFloat32();
				this.tfArr.push(tTfConstraintData);
			};
			var tPathConstraintData;
			var tPathLen=tByte.getUint16();
			var tPathBoneLen=0;
			for (i=0;i < tPathLen;i++){
				tPathConstraintData=new PathConstraintData();
				tPathConstraintData.name=tByte.readUTFString();
				tPathBoneLen=tByte.getUint16();
				for (j=0;j < tPathBoneLen;j++){
					tPathConstraintData.bones.push(tByte.getInt16());
				}
				tPathConstraintData.target=tByte.readUTFString();
				tPathConstraintData.positionMode=tByte.readUTFString();
				tPathConstraintData.spacingMode=tByte.readUTFString();
				tPathConstraintData.rotateMode=tByte.readUTFString();
				tPathConstraintData.offsetRotation=tByte.getFloat32();
				tPathConstraintData.position=tByte.getFloat32();
				tPathConstraintData.spacing=tByte.getFloat32();
				tPathConstraintData.rotateMix=tByte.getFloat32();
				tPathConstraintData.translateMix=tByte.getFloat32();
				this.pathArr.push(tPathConstraintData);
			};
			var tDeformSlotLen=0;
			var tDeformSlotDisplayLen=0;
			var tDSlotIndex=0;
			var tDAttachment;
			var tDeformTimeLen=0;
			var tDTime=NaN;
			var tDeformVecticesLen=0;
			var tDeformAniData;
			var tDeformSlotData;
			var tDeformSlotDisplayData;
			var tDeformVectices;
			var tDeformAniLen=tByte.getInt16();
			for (i=0;i < tDeformAniLen;i++){
				var tDeformSkinLen=tByte.getUint8();
				var tSkinDic={};
				this.deformAniArr.push(tSkinDic);
				for (var f=0;f < tDeformSkinLen;f++){
					tDeformAniData=new DeformAniData();
					tDeformAniData.skinName=tByte.getUTFString();
					tSkinDic[tDeformAniData.skinName]=tDeformAniData;
					tDeformSlotLen=tByte.getInt16();
					for (j=0;j < tDeformSlotLen;j++){
						tDeformSlotData=new DeformSlotData();
						tDeformAniData.deformSlotDataList.push(tDeformSlotData);
						tDeformSlotDisplayLen=tByte.getInt16();
						for (k=0;k < tDeformSlotDisplayLen;k++){
							tDeformSlotDisplayData=new DeformSlotDisplayData();
							tDeformSlotData.deformSlotDisplayList.push(tDeformSlotDisplayData);
							tDeformSlotDisplayData.slotIndex=tDSlotIndex=tByte.getInt16();
							tDeformSlotDisplayData.attachment=tDAttachment=tByte.getUTFString();
							tDeformTimeLen=tByte.getInt16();
							for (l=0;l < tDeformTimeLen;l++){
								if (tByte.getByte()==1){
									tDeformSlotDisplayData.tweenKeyList.push(true);
									}else {
									tDeformSlotDisplayData.tweenKeyList.push(false);
								}
								tDTime=tByte.getFloat32();
								tDeformSlotDisplayData.timeList.push(tDTime);
								tDeformVectices=[];
								tDeformSlotDisplayData.vectices.push(tDeformVectices);
								tDeformVecticesLen=tByte.getInt16();
								for (n=0;n < tDeformVecticesLen;n++){
									tDeformVectices.push(tByte.getFloat32());
								}
							}
						}
					}
				}
			};
			var tDrawOrderArr;
			var tDrawOrderAniLen=tByte.getInt16();
			var tDrawOrderLen=0;
			var tDrawOrderData;
			var tDoLen=0;
			for (i=0;i < tDrawOrderAniLen;i++){
				tDrawOrderLen=tByte.getInt16();
				tDrawOrderArr=[];
				for (j=0;j < tDrawOrderLen;j++){
					tDrawOrderData=new DrawOrderData();
					tDrawOrderData.time=tByte.getFloat32();
					tDoLen=tByte.getInt16();
					for (k=0;k < tDoLen;k++){
						tDrawOrderData.drawOrder.push(tByte.getInt16());
					}
					tDrawOrderArr.push(tDrawOrderData);
				}
				this.drawOrderAniArr.push(tDrawOrderArr);
			};
			var tEventArr;
			var tEventAniLen=tByte.getInt16();
			var tEventLen=0;
			var tEventData;
			for (i=0;i < tEventAniLen;i++){
				tEventLen=tByte.getInt16();
				tEventArr=[];
				for (j=0;j < tEventLen;j++){
					tEventData=new EventData();
					tEventData.name=tByte.getUTFString();
					tEventData.intValue=tByte.getInt32();
					tEventData.floatValue=tByte.getFloat32();
					tEventData.stringValue=tByte.getUTFString();
					tEventData.time=tByte.getFloat32();
					tEventArr.push(tEventData);
				}
				this.eventAniArr.push(tEventArr);
			};
			var tAttachmentLen=tByte.getInt16();
			if (tAttachmentLen > 0){
				this.attachmentNames=[];
				for (i=0;i < tAttachmentLen;i++){
					this.attachmentNames.push(tByte.getUTFString());
				}
			};
			var tBoneSlotLen=tByte.getInt16();
			var tDBBoneSlot;
			var tDBBoneSlotArr;
			for (i=0;i < tBoneSlotLen;i++){
				tDBBoneSlot=new BoneSlot();
				tDBBoneSlot.name=tByte.readUTFString();
				tDBBoneSlot.parent=tByte.readUTFString();
				tDBBoneSlot.attachmentName=tByte.readUTFString();
				tDBBoneSlot.srcDisplayIndex=tDBBoneSlot.displayIndex=tByte.getInt16();
				tDBBoneSlot.templet=this;
				this.boneSlotDic[tDBBoneSlot.name]=tDBBoneSlot;
				tDBBoneSlotArr=this.bindBoneBoneSlotDic[tDBBoneSlot.parent];
				if (tDBBoneSlotArr==null){
					this.bindBoneBoneSlotDic[tDBBoneSlot.parent]=tDBBoneSlotArr=[];
				}
				tDBBoneSlotArr.push(tDBBoneSlot);
				this.boneSlotArray.push(tDBBoneSlot);
			};
			var tNameString=tByte.readUTFString();
			var tNameArray=tNameString.split("\n");
			var tNameStartIndex=0;
			var tSkinDataLen=tByte.getUint8();
			var tSkinData,tSlotData,tDisplayData;
			var tSlotDataLen=0,tDisplayDataLen=0;
			var tUvLen=0,tWeightLen=0,tTriangleLen=0,tVerticeLen=0,tLengthLen=0;
			for (i=0;i < tSkinDataLen;i++){
				tSkinData=new SkinData();
				tSkinData.name=tNameArray[tNameStartIndex++];
				tSlotDataLen=tByte.getUint8();
				for (j=0;j < tSlotDataLen;j++){
					tSlotData=new SlotData();
					tSlotData.name=tNameArray[tNameStartIndex++];
					tDBBoneSlot=this.boneSlotDic[tSlotData.name];
					tDisplayDataLen=tByte.getUint8();
					for (k=0;k < tDisplayDataLen;k++){
						tDisplayData=new SkinSlotDisplayData();
						this.skinSlotDisplayDataArr.push(tDisplayData);
						tDisplayData.name=tNameArray[tNameStartIndex++];
						tDisplayData.attachmentName=tNameArray[tNameStartIndex++];
						tDisplayData.transform=new Transform();
						tDisplayData.transform.scX=tByte.getFloat32();
						tDisplayData.transform.skX=tByte.getFloat32();
						tDisplayData.transform.skY=tByte.getFloat32();
						tDisplayData.transform.scY=tByte.getFloat32();
						tDisplayData.transform.x=tByte.getFloat32();
						tDisplayData.transform.y=tByte.getFloat32();
						tSlotData.displayArr.push(tDisplayData);
						tDisplayData.width=tByte.getFloat32();
						tDisplayData.height=tByte.getFloat32();
						tDisplayData.type=tByte.getUint8();
						tDisplayData.verLen=tByte.getUint16();
						tBoneLen=tByte.getUint16();
						if (tBoneLen > 0){
							tDisplayData.bones=[];
							for (l=0;l < tBoneLen;l++){
								var tBoneId=tByte.getUint16();
								tDisplayData.bones.push(tBoneId);
							}
						}
						tUvLen=tByte.getUint16();
						if (tUvLen > 0){
							tDisplayData.uvs=[];
							for (l=0;l < tUvLen;l++){
								tDisplayData.uvs.push(tByte.getFloat32());
							}
						}
						tWeightLen=tByte.getUint16();
						if (tWeightLen > 0){
							tDisplayData.weights=[];
							for (l=0;l < tWeightLen;l++){
								tDisplayData.weights.push(tByte.getFloat32());
							}
						}
						tTriangleLen=tByte.getUint16();
						if (tTriangleLen > 0){
							tDisplayData.triangles=[];
							for (l=0;l < tTriangleLen;l++){
								tDisplayData.triangles.push(tByte.getUint16());
							}
						}
						tVerticeLen=tByte.getUint16();
						if (tVerticeLen > 0){
							tDisplayData.vertices=[];
							for (l=0;l < tVerticeLen;l++){
								tDisplayData.vertices.push(tByte.getFloat32());
							}
						}
						tLengthLen=tByte.getUint16();
						if (tLengthLen > 0){
							tDisplayData.lengths=[];
							for (l=0;l < tLengthLen;l++){
								tDisplayData.lengths.push(tByte.getFloat32());
							}
						}
					}
					tSkinData.slotArr.push(tSlotData);
				}
				this.skinDic[tSkinData.name]=tSkinData;
				this.skinDataArray.push(tSkinData);
			};
			var tReverse=tByte.getUint8();
			if (tReverse==1){
				this.yReverseMatrix=new Matrix(1,0,0,-1,0,0);
				if (tRootBone){
					tRootBone.setTempMatrix(this.yReverseMatrix);
				}
				}else {
				if (tRootBone){
					tRootBone.setTempMatrix(new Matrix());
				}
			}
			this.showSkinByIndex(this.boneSlotDic,0);
			this.isParserComplete=true;
			this.event(/*laya.events.Event.COMPLETE*/"complete",this);
		}

		/**
		*得到指定的纹理
		*@param name 纹理的名字
		*@return
		*/
		__proto.getTexture=function(name){
			var tTexture=this.subTextureDic[name];
			if (tTexture==null){
				return this._mainTexture;
			}
			return tTexture;
		}

		/**
		*@private
		*显示指定的皮肤
		*@param boneSlotDic 插糟字典的引用
		*@param skinIndex 皮肤的索引
		*@param freshDisplayIndex 是否重置插槽纹理
		*/
		__proto.showSkinByIndex=function(boneSlotDic,skinIndex,freshDisplayIndex){
			(freshDisplayIndex===void 0)&& (freshDisplayIndex=true);
			if (skinIndex < 0 && skinIndex >=this.skinDataArray.length)return false;
			var i=0,n=0;
			var tBoneSlot;
			var tSlotData;
			var tSkinData=this.skinDataArray[skinIndex];
			if (tSkinData){
				for (i=0,n=tSkinData.slotArr.length;i < n;i++){
					tSlotData=tSkinData.slotArr[i];
					if (tSlotData){
						tBoneSlot=boneSlotDic[tSlotData.name];
						if (tBoneSlot){
							tBoneSlot.showSlotData(tSlotData,freshDisplayIndex);
							if (freshDisplayIndex&&tBoneSlot.attachmentName !="undefined" && tBoneSlot.attachmentName !="null"){
								tBoneSlot.showDisplayByName(tBoneSlot.attachmentName);
								}else {
								tBoneSlot.showDisplayByIndex(tBoneSlot.displayIndex);
							}
						}
					}
				}
				return true;
			}
			return false;
		}

		/**
		*通过皮肤名字得到皮肤索引
		*@param skinName 皮肤名称
		*@return
		*/
		__proto.getSkinIndexByName=function(skinName){
			var tSkinData;
			for (var i=0,n=this.skinDataArray.length;i < n;i++){
				tSkinData=this.skinDataArray[i];
				if (tSkinData.name==skinName){
					return i;
				}
			}
			return-1;
		}

		/**
		*@private
		*得到缓冲数据
		*@param aniIndex 动画索引
		*@param frameIndex 帧索引
		*@return
		*/
		__proto.getGrahicsDataWithCache=function(aniIndex,frameIndex){
			return this._graphicsCache[aniIndex][frameIndex];
		}

		/**
		*@private
		*保存缓冲grahpics
		*@param aniIndex 动画索引
		*@param frameIndex 帧索引
		*@param graphics 要保存的数据
		*/
		__proto.setGrahicsDataWithCache=function(aniIndex,frameIndex,graphics){
			this._graphicsCache[aniIndex][frameIndex]=graphics;
		}

		/**
		*释放纹理
		*/
		__proto.destroy=function(){
			this._isDestroyed=true;
			var tTexture;
			/*for each*/for(var $each_tTexture in this.subTextureDic){
				tTexture=this.subTextureDic[$each_tTexture];
				if(tTexture)
					tTexture.destroy();
			}
			var $each_tTexture;
			/*for each*/for($each_tTexture in this._textureDic){
				tTexture=this._textureDic[$each_tTexture];
				if(tTexture)
					tTexture.destroy();
			};
			var tSkinSlotDisplayData;
			for (var i=0,n=this.skinSlotDisplayDataArr.length;i < n;i++){
				tSkinSlotDisplayData=this.skinSlotDisplayDataArr[i];
				tSkinSlotDisplayData.destory();
			}
			this.skinSlotDisplayDataArr.length=0;
			if (this.url){
				delete Templet.TEMPLET_DICTIONARY[this.url];
			}
			this.dispose();
		}

		/**
		*通过索引得动画名称
		*@param index
		*@return
		*/
		__proto.getAniNameByIndex=function(index){
			var tAni=this.getAnimation(index);
			if (tAni)return tAni.name;
			return null;
		}

		__getset(0,__proto,'rate',function(){
			return this._rate;
			},function(v){
			this._rate=v;
		});

		Templet.LAYA_ANIMATION_VISION="LAYAANIMATION:1.6.0";
		Templet.TEMPLET_DICTIONARY=null
		return Templet;
	})(AnimationTemplet)



})(window,document,Laya);

function md5(n){var r,d,e,t,o,a,i,H,F,G=Array(),I=7,g=12,u=17,f=22,s=5,c=9,U=14,C=20,h=4,v=11,T=16,m=23,x=6,S=10,w=15,A=21;for(n=uTF8Encode(n),G=convertToWordArray(n),a=1732584193,i=4023233417,H=2562383102,F=271733878,r=0;r<G.length;r+=16)d=a,e=i,t=H,o=F,a=FF(a,i,H,F,G[r+0],I,3614090360),F=FF(F,a,i,H,G[r+1],g,3905402710),H=FF(H,F,a,i,G[r+2],u,606105819),i=FF(i,H,F,a,G[r+3],f,3250441966),a=FF(a,i,H,F,G[r+4],I,4118548399),F=FF(F,a,i,H,G[r+5],g,1200080426),H=FF(H,F,a,i,G[r+6],u,2821735955),i=FF(i,H,F,a,G[r+7],f,4249261313),a=FF(a,i,H,F,G[r+8],I,1770035416),F=FF(F,a,i,H,G[r+9],g,2336552879),H=FF(H,F,a,i,G[r+10],u,4294925233),i=FF(i,H,F,a,G[r+11],f,2304563134),a=FF(a,i,H,F,G[r+12],I,1804603682),F=FF(F,a,i,H,G[r+13],g,4254626195),H=FF(H,F,a,i,G[r+14],u,2792965006),i=FF(i,H,F,a,G[r+15],f,1236535329),a=GG(a,i,H,F,G[r+1],s,4129170786),F=GG(F,a,i,H,G[r+6],c,3225465664),H=GG(H,F,a,i,G[r+11],U,643717713),i=GG(i,H,F,a,G[r+0],C,3921069994),a=GG(a,i,H,F,G[r+5],s,3593408605),F=GG(F,a,i,H,G[r+10],c,38016083),H=GG(H,F,a,i,G[r+15],U,3634488961),i=GG(i,H,F,a,G[r+4],C,3889429448),a=GG(a,i,H,F,G[r+9],s,568446438),F=GG(F,a,i,H,G[r+14],c,3275163606),H=GG(H,F,a,i,G[r+3],U,4107603335),i=GG(i,H,F,a,G[r+8],C,1163531501),a=GG(a,i,H,F,G[r+13],s,2850285829),F=GG(F,a,i,H,G[r+2],c,4243563512),H=GG(H,F,a,i,G[r+7],U,1735328473),i=GG(i,H,F,a,G[r+12],C,2368359562),a=HH(a,i,H,F,G[r+5],h,4294588738),F=HH(F,a,i,H,G[r+8],v,2272392833),H=HH(H,F,a,i,G[r+11],T,1839030562),i=HH(i,H,F,a,G[r+14],m,4259657740),a=HH(a,i,H,F,G[r+1],h,2763975236),F=HH(F,a,i,H,G[r+4],v,1272893353),H=HH(H,F,a,i,G[r+7],T,4139469664),i=HH(i,H,F,a,G[r+10],m,3200236656),a=HH(a,i,H,F,G[r+13],h,681279174),F=HH(F,a,i,H,G[r+0],v,3936430074),H=HH(H,F,a,i,G[r+3],T,3572445317),i=HH(i,H,F,a,G[r+6],m,76029189),a=HH(a,i,H,F,G[r+9],h,3654602809),F=HH(F,a,i,H,G[r+12],v,3873151461),H=HH(H,F,a,i,G[r+15],T,530742520),i=HH(i,H,F,a,G[r+2],m,3299628645),a=II(a,i,H,F,G[r+0],x,4096336452),F=II(F,a,i,H,G[r+7],S,1126891415),H=II(H,F,a,i,G[r+14],w,2878612391),i=II(i,H,F,a,G[r+5],A,4237533241),a=II(a,i,H,F,G[r+12],x,1700485571),F=II(F,a,i,H,G[r+3],S,2399980690),H=II(H,F,a,i,G[r+10],w,4293915773),i=II(i,H,F,a,G[r+1],A,2240044497),a=II(a,i,H,F,G[r+8],x,1873313359),F=II(F,a,i,H,G[r+15],S,4264355552),H=II(H,F,a,i,G[r+6],w,2734768916),i=II(i,H,F,a,G[r+13],A,1309151649),a=II(a,i,H,F,G[r+4],x,4149444226),F=II(F,a,i,H,G[r+11],S,3174756917),H=II(H,F,a,i,G[r+2],w,718787259),i=II(i,H,F,a,G[r+9],A,3951481745),a=addUnsigned(a,d),i=addUnsigned(i,e),H=addUnsigned(H,t),F=addUnsigned(F,o);var L=wordToHex(a)+wordToHex(i)+wordToHex(H)+wordToHex(F);return L.toLowerCase()}var rotateLeft=function(n,r){return n<<r|n>>>32-r},addUnsigned=function(n,r){var d,e,t,o,a;return t=2147483648&n,o=2147483648&r,d=1073741824&n,e=1073741824&r,a=(1073741823&n)+(1073741823&r),d&e?2147483648^a^t^o:d|e?1073741824&a?3221225472^a^t^o:1073741824^a^t^o:a^t^o},F=function(n,r,d){return n&r|~n&d},G=function(n,r,d){return n&d|r&~d},H=function(n,r,d){return n^r^d},I=function(n,r,d){return r^(n|~d)},FF=function(n,r,d,e,t,o,a){return n=addUnsigned(n,addUnsigned(addUnsigned(F(r,d,e),t),a)),addUnsigned(rotateLeft(n,o),r)},GG=function(n,r,d,e,t,o,a){return n=addUnsigned(n,addUnsigned(addUnsigned(G(r,d,e),t),a)),addUnsigned(rotateLeft(n,o),r)},HH=function(n,r,d,e,t,o,a){return n=addUnsigned(n,addUnsigned(addUnsigned(H(r,d,e),t),a)),addUnsigned(rotateLeft(n,o),r)},II=function(n,r,d,e,t,o,a){return n=addUnsigned(n,addUnsigned(addUnsigned(I(r,d,e),t),a)),addUnsigned(rotateLeft(n,o),r)},convertToWordArray=function(n){for(var r,d=n.length,e=d+8,t=(e-e%64)/64,o=16*(t+1),a=Array(o-1),i=0,H=0;d>H;)r=(H-H%4)/4,i=H%4*8,a[r]=a[r]|n.charCodeAt(H)<<i,H++;return r=(H-H%4)/4,i=H%4*8,a[r]=a[r]|128<<i,a[o-2]=d<<3,a[o-1]=d>>>29,a},wordToHex=function(n){var r,d,e="",t="";for(d=0;3>=d;d++)r=n>>>8*d&255,t="0"+r.toString(16),e+=t.substr(t.length-2,2);return e},uTF8Encode=function(n){n=n.replace(/\x0d\x0a/g,"\n");for(var r="",d=0;d<n.length;d++){var e=n.charCodeAt(d);128>e?r+=String.fromCharCode(e):e>127&&2048>e?(r+=String.fromCharCode(e>>6|192),r+=String.fromCharCode(63&e|128)):(r+=String.fromCharCode(e>>12|224),r+=String.fromCharCode(e>>6&63|128),r+=String.fromCharCode(63&e|128))}return r};

(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

	var Browser=laya.utils.Browser,Color=laya.utils.Color,ColorFilterAction=laya.filters.ColorFilterAction;
	var ColorFilterActionGL=laya.filters.webgl.ColorFilterActionGL,Filter=laya.filters.Filter,FilterActionGL=laya.filters.webgl.FilterActionGL;
	var Matrix=laya.maths.Matrix,Rectangle=laya.maths.Rectangle,Render=laya.renders.Render,RenderContext=laya.renders.RenderContext;
	var RenderTarget2D=laya.webgl.resource.RenderTarget2D,RunDriver=laya.utils.RunDriver,ShaderDefines2D=laya.webgl.shader.d2.ShaderDefines2D;
	var Sprite=laya.display.Sprite,Texture=laya.resource.Texture,Value2D=laya.webgl.shader.d2.value.Value2D;
	/**
	*默认的FILTER,什么都不做
	*@private
	*/
	//class laya.filters.FilterAction
	var FilterAction=(function(){
		function FilterAction(){
			this.data=null;
		}

		__class(FilterAction,'laya.filters.FilterAction');
		var __proto=FilterAction.prototype;
		Laya.imps(__proto,{"laya.filters.IFilterAction":true})
		__proto.apply=function(data){
			return null;
		}

		return FilterAction;
	})()


	/**
	*@private
	*/
	//class laya.filters.WebGLFilter
	var WebGLFilter=(function(){
		function WebGLFilter(){};
		__class(WebGLFilter,'laya.filters.WebGLFilter');
		WebGLFilter.enable=function(){
			if (WebGLFilter.isInit)return;
			WebGLFilter.isInit=true;
			if (!Render.isWebGL)return;
			RunDriver.createFilterAction=function (type){
				var action;
				switch (type){
					case /*laya.filters.Filter.COLOR*/0x20:
						action=new ColorFilterActionGL();
						break ;
					case /*laya.filters.Filter.BLUR*/0x10:
						action=new BlurFilterActionGL();
						break ;
					case /*laya.filters.Filter.GLOW*/0x08:
						action=new GlowFilterActionGL();
						break ;
					}
				return action;
			}
		}

		WebGLFilter.isInit=false;
		WebGLFilter.__init$=function(){
			BlurFilterActionGL;
			ColorFilterActionGL;
			GlowFilterActionGL;
			Render;
			RunDriver;{
				RunDriver.createFilterAction=function (type){
					var action;
					switch (type){
						case /*laya.filters.Filter.BLUR*/0x10:
							action=new FilterAction();
							break ;
						case /*laya.filters.Filter.GLOW*/0x08:
							action=new FilterAction();
							break ;
						case /*laya.filters.Filter.COLOR*/0x20:
							action=new ColorFilterAction();
							break ;
						}
					return action;
				}
			}
		}

		return WebGLFilter;
	})()


	/**
	*模糊滤镜
	*/
	//class laya.filters.BlurFilter extends laya.filters.Filter
	var BlurFilter=(function(_super){
		function BlurFilter(strength){
			this.strength=NaN;
			this.strength_sig2_2sig2_gauss1=[];
			BlurFilter.__super.call(this);
			(strength===void 0)&& (strength=4);
			if (Render.isWebGL)WebGLFilter.enable();
			this.strength=strength;
			this._action=RunDriver.createFilterAction(0x10);
			this._action.data=this;
		}

		__class(BlurFilter,'laya.filters.BlurFilter',_super);
		var __proto=BlurFilter.prototype;
		/**
		*@private 通知微端
		*/
		__proto.callNative=function(sp){
			sp.conchModel &&sp.conchModel.blurFilter&&sp.conchModel.blurFilter(this.strength);
		}

		/**
		*@private
		*当前滤镜对应的操作器
		*/
		__getset(0,__proto,'action',function(){
			return this._action;
		});

		/**
		*@private
		*当前滤镜的类型
		*/
		__getset(0,__proto,'type',function(){
			return 0x10;
		});

		return BlurFilter;
	})(Filter)


	/**
	*发光滤镜(也可以当成阴影滤使用）
	*/
	//class laya.filters.GlowFilter extends laya.filters.Filter
	var GlowFilter=(function(_super){
		function GlowFilter(color,blur,offX,offY){
			this._color=null;
			GlowFilter.__super.call(this);
			this._elements=new Float32Array(9);
			(blur===void 0)&& (blur=4);
			(offX===void 0)&& (offX=6);
			(offY===void 0)&& (offY=6);
			if (Render.isWebGL){
				WebGLFilter.enable();
			}
			this._color=new Color(color);
			this.blur=Math.min(blur,20);
			this.offX=offX;
			this.offY=offY;
			this._action=RunDriver.createFilterAction(0x08);
			this._action.data=this;
		}

		__class(GlowFilter,'laya.filters.GlowFilter',_super);
		var __proto=GlowFilter.prototype;
		/**@private */
		__proto.getColor=function(){
			return this._color._color;
		}

		/**
		*@private 通知微端
		*/
		__proto.callNative=function(sp){
			sp.conchModel &&sp.conchModel.glowFilter&&sp.conchModel.glowFilter(this._color.strColor,this._elements[4],this._elements[5],this._elements[6]);
		}

		/**
		*@private
		*滤镜类型
		*/
		__getset(0,__proto,'type',function(){
			return 0x08;
		});

		/**@private */
		__getset(0,__proto,'action',function(){
			return this._action;
		});

		/**@private */
		/**@private */
		__getset(0,__proto,'offY',function(){
			return this._elements[6];
			},function(value){
			this._elements[6]=value;
		});

		/**@private */
		/**@private */
		__getset(0,__proto,'offX',function(){
			return this._elements[5];
			},function(value){
			this._elements[5]=value;
		});

		/**@private */
		/**@private */
		__getset(0,__proto,'blur',function(){
			return this._elements[4];
			},function(value){
			this._elements[4]=value;
		});

		return GlowFilter;
	})(Filter)


	/**
	*@private
	*/
	//class laya.filters.webgl.BlurFilterActionGL extends laya.filters.webgl.FilterActionGL
	var BlurFilterActionGL=(function(_super){
		function BlurFilterActionGL(){
			this.data=null;
			BlurFilterActionGL.__super.call(this);
		}

		__class(BlurFilterActionGL,'laya.filters.webgl.BlurFilterActionGL',_super);
		var __proto=BlurFilterActionGL.prototype;
		__proto.setValueMix=function(shader){
			shader.defines.add(this.data.type);
			var o=shader;
		}

		__proto.apply3d=function(scope,sprite,context,x,y){
			var b=scope.getValue("bounds");
			var shaderValue=Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0);
			shaderValue.setFilters([this.data]);
			var tMatrix=Matrix.EMPTY;
			tMatrix.identity();
			context.ctx.drawTarget(scope,0,0,b.width,b.height,Matrix.EMPTY,"src",shaderValue);
			shaderValue.setFilters(null);
		}

		__proto.setValue=function(shader){
			shader.strength=this.data.strength;
			var sigma=this.data.strength/3.0;
			var sigma2=sigma*sigma;
			this.data.strength_sig2_2sig2_gauss1[0]=this.data.strength;
			this.data.strength_sig2_2sig2_gauss1[1]=sigma2;
			this.data.strength_sig2_2sig2_gauss1[2]=2.0*sigma2;
			this.data.strength_sig2_2sig2_gauss1[3]=1.0/(2.0*Math.PI*sigma2);
			shader.strength_sig2_2sig2_gauss1=this.data.strength_sig2_2sig2_gauss1;
		}

		__getset(0,__proto,'typeMix',function(){return /*laya.filters.Filter.BLUR*/0x10;});
		return BlurFilterActionGL;
	})(FilterActionGL)


	/**
	*@private
	*/
	//class laya.filters.webgl.GlowFilterActionGL extends laya.filters.webgl.FilterActionGL
	var GlowFilterActionGL=(function(_super){
		function GlowFilterActionGL(){
			this.data=null;
			this._initKey=false;
			this._textureWidth=0;
			this._textureHeight=0;
			GlowFilterActionGL.__super.call(this);
		}

		__class(GlowFilterActionGL,'laya.filters.webgl.GlowFilterActionGL',_super);
		var __proto=GlowFilterActionGL.prototype;
		Laya.imps(__proto,{"laya.filters.IFilterActionGL":true})
		__proto.setValueMix=function(shader){}
		__proto.apply3d=function(scope,sprite,context,x,y){
			var b=scope.getValue("bounds");
			scope.addValue("color",this.data.getColor());
			var w=b.width,h=b.height;
			this._textureWidth=w;
			this._textureHeight=h;
			var shaderValue;
			var mat=Matrix.TEMP;
			mat.identity();
			shaderValue=Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0);
			shaderValue.setFilters([this.data]);
			context.ctx.drawTarget(scope,0,0,this._textureWidth,this._textureHeight,mat,"src",shaderValue,null);
			shaderValue=Value2D.create(/*laya.webgl.shader.d2.ShaderDefines2D.TEXTURE2D*/0x01,0);
			context.ctx.drawTarget(scope,0,0,this._textureWidth,this._textureHeight,mat,"src",shaderValue);
			return null;
		}

		__proto.setSpriteWH=function(sprite){
			this._textureWidth=sprite.width;
			this._textureHeight=sprite.height;
		}

		__proto.setValue=function(shader){
			shader.u_offsetX=this.data.offX;
			shader.u_offsetY=-this.data.offY;
			shader.u_strength=1.0;
			shader.u_blurX=this.data.blur;
			shader.u_blurY=this.data.blur;
			shader.u_textW=this._textureWidth;
			shader.u_textH=this._textureHeight;
			shader.u_color=this.data.getColor();
		}

		__getset(0,__proto,'typeMix',function(){return /*laya.filters.Filter.GLOW*/0x08;});
		GlowFilterActionGL.tmpTarget=function(scope,sprite,context,x,y){
			var b=scope.getValue("bounds");
			var out=scope.getValue("out");
			out.end();
			var tmpTarget=RenderTarget2D.create(b.width,b.height);
			tmpTarget.start();
			var color=scope.getValue("color");
			if (color){
				tmpTarget.clear(color[0],color[1],color[2],0);
			}
			scope.addValue("tmpTarget",tmpTarget);
		}

		GlowFilterActionGL.startOut=function(scope,sprite,context,x,y){
			var tmpTarget=scope.getValue("tmpTarget");
			tmpTarget.end();
			var out=scope.getValue("out");
			out.start();
			var color=scope.getValue("color");
			if (color){
				out.clear(color[0],color[1],color[2],0);
			}
		}

		GlowFilterActionGL.recycleTarget=function(scope,sprite,context,x,y){
			var src=scope.getValue("src");
			var tmpTarget=scope.getValue("tmpTarget");
			tmpTarget.recycle();
		}

		return GlowFilterActionGL;
	})(FilterActionGL)


	Laya.__init([WebGLFilter]);
})(window,document,Laya);


(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

	var Browser=laya.utils.Browser,CSSStyle=laya.display.css.CSSStyle,ClassUtils=laya.utils.ClassUtils;
	var Event=laya.events.Event,HTMLChar=laya.utils.HTMLChar,Loader=laya.net.Loader,Node=laya.display.Node,Rectangle=laya.maths.Rectangle;
	var Render=laya.renders.Render,RenderContext=laya.renders.RenderContext,RenderSprite=laya.renders.RenderSprite;
	var Sprite=laya.display.Sprite,Stat=laya.utils.Stat,Texture=laya.resource.Texture,URL=laya.net.URL,Utils=laya.utils.Utils;
	/**
	*@private
	*/
	//class laya.html.utils.HTMLParse
	var HTMLParse=(function(){
		function HTMLParse(){};
		__class(HTMLParse,'laya.html.utils.HTMLParse');
		HTMLParse.parse=function(ower,xmlString,url){
			xmlString=xmlString.replace(/<br>/g,"<br/>");
			xmlString="<root>"+xmlString+"</root>";
			xmlString=xmlString.replace(HTMLParse.spacePattern,HTMLParse.char255);
			var xml=Utils.parseXMLFromString(xmlString);
			HTMLParse._parseXML(ower,xml.childNodes[0].childNodes,url);
		}

		HTMLParse._parseXML=function(parent,xml,url,href){
			var i=0,n=0;
			if (xml.join || xml.item){
				for (i=0,n=xml.length;i < n;++i){
					HTMLParse._parseXML(parent,xml[i],url,href);
				}
				}else {
				var node;
				var nodeName;
				if (xml.nodeType==3){
					var txt;
					if ((parent instanceof laya.html.dom.HTMLDivElement )){
						if (xml.nodeName==null){
							xml.nodeName="#text";
						}
						nodeName=xml.nodeName.toLowerCase();
						txt=xml.textContent.replace(/^\s+|\s+$/g,'');
						if (txt.length > 0){
							node=ClassUtils.getInstance(nodeName);
							if (node){
								parent.addChild(node);
								((node).innerTEXT=txt.replace(HTMLParse.char255AndOneSpacePattern," "));
							}
						}
						}else {
						txt=xml.textContent.replace(/^\s+|\s+$/g,'');
						if (txt.length > 0){
							((parent).innerTEXT=txt.replace(HTMLParse.char255AndOneSpacePattern," "));
						}
					}
					return;
					}else {
					nodeName=xml.nodeName.toLowerCase();
					if (nodeName=="#comment")return;
					node=ClassUtils.getInstance(nodeName);
					if (node){
						node=parent.addChild(node);
						(node).URI=url;
						(node).href=href;
						var attributes=xml.attributes;
						if (attributes && attributes.length > 0){
							for (i=0,n=attributes.length;i < n;++i){
								var attribute=attributes[i];
								var attrName=attribute.nodeName;
								var value=attribute.value;
								node._setAttributes(attrName,value);
							}
						}
						HTMLParse._parseXML(node,xml.childNodes,url,(node).href);
						}else {
						HTMLParse._parseXML(parent,xml.childNodes,url,href);
					}
				}
			}
		}

		HTMLParse.char255=String.fromCharCode(255);
		HTMLParse.spacePattern=/&nbsp;|&#160;/g;
		HTMLParse.char255AndOneSpacePattern=new RegExp(String.fromCharCode(255)+"|(\\s+)","g");
		return HTMLParse;
	})()


	/**
	*@private
	*HTML的布局类
	*对HTML的显示对象进行排版
	*/
	//class laya.html.utils.Layout
	var Layout=(function(){
		function Layout(){};
		__class(Layout,'laya.html.utils.Layout');
		Layout.later=function(element){
			if (Layout._will==null){
				Layout._will=[];
				Laya.stage.frameLoop(1,null,function(){
					if (Layout._will.length < 1)
						return;
					for (var i=0;i < Layout._will.length;i++){
						laya.html.utils.Layout.layout(Layout._will[i]);
					}
					Layout._will.length=0;
				});
			}
			Layout._will.push(element);
		}

		Layout.layout=function(element){
			if (!element || !element._style)return null;
			if ((element._style._type & /*laya.display.css.CSSStyle.ADDLAYOUTED*/0x200)===0)
				return null;
			element.getStyle()._type &=~ /*laya.display.css.CSSStyle.ADDLAYOUTED*/0x200;
			var arr=Layout._multiLineLayout(element);
			if (Render.isConchApp&&element["layaoutCallNative"]){
				(element).layaoutCallNative();
			}
			return arr;
		}

		Layout._multiLineLayout=function(element){
			var elements=new Array;
			element._addChildsToLayout(elements);
			var i=0,n=elements.length,j=0;
			var style=element._getCSSStyle();
			var letterSpacing=style.letterSpacing;
			var leading=style.leading;
			var lineHeight=style.lineHeight;
			var widthAuto=style._widthAuto()|| !style.wordWrap;
			var width=widthAuto ? 999999 :element.width;
			var height=element.height;
			var maxWidth=0;
			var exWidth=style.italic ? style.fontSize / 3 :0;
			var align=style._getAlign();
			var valign=style._getValign();
			var endAdjust=valign!==0 || align!==0 || lineHeight !=0;
			var oneLayout;
			var x=0;
			var y=0;
			var w=0;
			var h=0;
			var tBottom=0;
			var lines=new Array;
			var curStyle;
			var curPadding;
			var curLine=lines[0]=new LayoutLine();
			var newLine=false,nextNewline=false;
			var htmlWord;
			var sprite;
			curLine.h=0;
			if (style.italic)
				width-=style.fontSize / 3;
			var tWordWidth=0;
			var tLineFirstKey=true;
			function addLine (){
				curLine.y=y;
				y+=curLine.h+leading;
				if (curLine.h==0)y+=lineHeight;
				curLine.mWidth=tWordWidth;
				tWordWidth=0;
				curLine=new LayoutLine();
				lines.push(curLine);
				curLine.h=0;
				x=0;
				tLineFirstKey=true;
				newLine=false;
			}
			for (i=0;i < n;i++){
				oneLayout=elements[i];
				if (oneLayout==null){
					if (!tLineFirstKey){
						x+=Layout.DIV_ELEMENT_PADDING;
					}
					curLine.wordStartIndex=curLine.elements.length;
					continue ;
				}
				tLineFirstKey=false;
				if ((oneLayout instanceof laya.html.dom.HTMLBrElement )){
					addLine();
					curLine.y=y;
					continue ;
					}else if (oneLayout._isChar()){
					htmlWord=oneLayout;
					if (!htmlWord.isWord){
						if (lines.length > 0 && (x+w)> width && curLine.wordStartIndex > 0){
							var tLineWord=0;
							tLineWord=curLine.elements.length-curLine.wordStartIndex+1;
							curLine.elements.length=curLine.wordStartIndex;
							i-=tLineWord;
							addLine();
							continue ;
						}
						newLine=false;
						tWordWidth+=htmlWord.width;
						}else {
						newLine=nextNewline || (htmlWord.char==='\n');
						curLine.wordStartIndex=curLine.elements.length;
					}
					w=htmlWord.width+letterSpacing;
					h=htmlWord.height;
					nextNewline=false;
					newLine=newLine || ((x+w)> width);
					newLine && addLine();
					curLine.minTextHeight=Math.min(curLine.minTextHeight,oneLayout.height);
					}else {
					curStyle=oneLayout._getCSSStyle();
					sprite=oneLayout;
					curPadding=curStyle.padding;
					curStyle._getCssFloat()===0 || (endAdjust=true);
					newLine=nextNewline || curStyle.lineElement;
					w=sprite.width *sprite._style._tf.scaleX+curPadding[1]+curPadding[3]+letterSpacing;
					h=sprite.height *sprite._style._tf.scaleY+curPadding[0]+curPadding[2];
					nextNewline=curStyle.lineElement;
					newLine=newLine || ((x+w)> width && curStyle.wordWrap);
					newLine && addLine();
				}
				curLine.elements.push(oneLayout);
				curLine.h=Math.max(curLine.h,h);
				oneLayout.x=x;
				oneLayout.y=y;
				x+=w;
				curLine.w=x-letterSpacing;
				curLine.y=y;
				maxWidth=Math.max(x+exWidth,maxWidth);
			}
			y=curLine.y+curLine.h;
			if (endAdjust){
				var tY=0;
				var tWidth=width;
				if (widthAuto && element.width > 0){
					tWidth=element.width;
				}
				for (i=0,n=lines.length;i < n;i++){
					lines[i].updatePos(0,tWidth,i,tY,align,valign,lineHeight);
					tY+=Math.max(lineHeight,lines[i].h+leading);
				}
				y=tY;
			}
			widthAuto && (element.width=maxWidth);
			(y > element.height)&& (element.height=y);
			return [maxWidth,y];
		}

		Layout._will=null
		Layout.DIV_ELEMENT_PADDING=0;
		return Layout;
	})()


	/**
	*@private
	*/
	//class laya.html.utils.LayoutLine
	var LayoutLine=(function(){
		function LayoutLine(){
			this.x=0;
			this.y=0;
			this.w=0;
			this.h=0;
			this.wordStartIndex=0;
			this.minTextHeight=99999;
			this.mWidth=0;
			this.elements=new Array;
		}

		__class(LayoutLine,'laya.html.utils.LayoutLine');
		var __proto=LayoutLine.prototype;
		/**
		*底对齐（默认）
		*@param left
		*@param width
		*@param dy
		*@param align 水平
		*@param valign 垂直
		*@param lineHeight 行高
		*/
		__proto.updatePos=function(left,width,lineNum,dy,align,valign,lineHeight){
			var w=0;
			var one
			if (this.elements.length > 0){
				one=this.elements[this.elements.length-1];
				w=one.x+one.width-this.elements[0].x;
			};
			var dx=0,ddy=NaN;
			align===/*laya.display.css.CSSStyle.ALIGN_CENTER*/1 && (dx=(width-w)/ 2);
			align===/*laya.display.css.CSSStyle.ALIGN_RIGHT*/2 && (dx=(width-w));
			lineHeight===0 || valign !=0 || (valign=1);
			for (var i=0,n=this.elements.length;i < n;i++){
				one=this.elements[i];
				var tCSSStyle=one._getCSSStyle();
				dx!==0 && (one.x+=dx);
				switch (tCSSStyle._getValign()){
					case 0:
						one.y=dy;
						break ;
					case /*laya.display.css.CSSStyle.VALIGN_MIDDLE*/1:;
						var tMinTextHeight=0;
						if (this.minTextHeight !=99999){
							tMinTextHeight=this.minTextHeight;
						};
						var tBottomLineY=(tMinTextHeight+lineHeight)/ 2;
						tBottomLineY=Math.max(tBottomLineY,this.h);
						if ((one instanceof laya.html.dom.HTMLImageElement )){
							ddy=dy+tBottomLineY-one.height;
							}else {
							ddy=dy+tBottomLineY-one.height;
						}
						one.y=ddy;
						break ;
					case /*laya.display.css.CSSStyle.VALIGN_BOTTOM*/2:
						one.y=dy+(lineHeight-one.height);
						break ;
					}
			}
		}

		return LayoutLine;
	})()


	/**
	*@private
	*/
	//class laya.html.dom.HTMLElement extends laya.display.Sprite
	var HTMLElement=(function(_super){
		function HTMLElement(){
			this.URI=null;
			this._href=null;
			HTMLElement.__super.call(this);
			this._text=HTMLElement._EMPTYTEXT;
			this.setStyle(new CSSStyle(this));
			this._getCSSStyle().valign="middle";
			this.mouseEnabled=true;
		}

		__class(HTMLElement,'laya.html.dom.HTMLElement',_super);
		var __proto=HTMLElement.prototype;
		/**
		*@private
		*/
		__proto.layaoutCallNative=function(){
			var n=0;
			if (this._childs &&(n=this._childs.length)> 0){
				for (var i=0;i < n;i++){
					this._childs[i].layaoutCallNative && this._childs[i].layaoutCallNative();
				}
			};
			var word=this._getWords();
			word&&HTMLElement.fillWords(this,word,0,0,this.style.font,this.style.color,this.style.underLine);
		}

		__proto.appendChild=function(c){
			return this.addChild(c);
		}

		__proto._getWords=function(){
			var txt=this._text.text;
			if (!txt || txt.length===0)
				return null;
			var words=this._text.words;
			if (words && words.length===txt.length)
				return words;
			words===null && (this._text.words=words=[]);
			words.length=txt.length;
			var size;
			var style=this.style;
			var fontStr=style.font;
			var startX=0;
			for (var i=0,n=txt.length;i < n;i++){
				size=Utils.measureText(txt.charAt(i),fontStr);
				var tHTMLChar=words[i]=new HTMLChar(txt.charAt(i),size.width,size.height||style.fontSize,style);
				if (this.href){
					var tSprite=new Sprite();
					this.addChild(tSprite);
					tHTMLChar.setSprite(tSprite);
				}
			}
			return words;
		}

		__proto.showLinkSprite=function(){
			var words=this._text.words;
			if (words){
				var tLinkSpriteList=[];
				var tSprite;
				var tHtmlChar;
				for (var i=0;i < words.length;i++){
					tHtmlChar=words[i];
					tSprite=new Sprite();
					tSprite.graphics.drawRect(0,0,tHtmlChar.width,tHtmlChar.height,"#ff0000");
					tSprite.width=tHtmlChar.width;
					tSprite.height=tHtmlChar.height;
					this.addChild(tSprite);
					tLinkSpriteList.push(tSprite);
				}
			}
		}

		__proto._layoutLater=function(){
			var style=this.style;
			if ((style._type & /*laya.display.css.CSSStyle.ADDLAYOUTED*/0x200))return;
			if (style.widthed(this)&& (this._childs.length>0 || this._getWords()!=null)&& style.block){
				Layout.later(this);
				style._type |=/*laya.display.css.CSSStyle.ADDLAYOUTED*/0x200;
			}
			else{
				this.parent && (this.parent)._layoutLater();
			}
		}

		__proto._setAttributes=function(name,value){
			switch (name){
				case 'style':
					this.style.cssText(value);
					return;
				case 'class':
					this.className=value;
					return;
				}
			_super.prototype._setAttributes.call(this,name,value);
		}

		__proto.updateHref=function(){
			if (this._href !=null){
				var words=this._getWords();
				if (words){
					var tHTMLChar;
					var tSprite;
					for (var i=0;i < words.length;i++){
						tHTMLChar=words[i];
						tSprite=tHTMLChar.getSprite();
						if (tSprite){
							tSprite.size(tHTMLChar.width,tHTMLChar.height);
							tSprite.on(/*laya.events.Event.CLICK*/"click",this,this.onLinkHandler);
						}
					}
				}
			}
		}

		__proto.onLinkHandler=function(e){
			switch(e.type){
				case /*laya.events.Event.CLICK*/"click":;
					var target=this;
					while (target){
						target.event(/*laya.events.Event.LINK*/"link",[this.href]);
						target=target.parent;
					}
					break ;
				}
		}

		__proto.formatURL=function(url){
			if (!this.URI)return url;
			return URL.formatURL(url,this.URI ? this.URI.path :null);
		}

		__getset(0,__proto,'href',function(){
			return this._href;
			},function(url){
			this._href=url;
			if (url !=null){
				this._getCSSStyle().underLine=1;
				this.updateHref();
			}
		});

		__getset(0,__proto,'color',null,function(value){
			this.style.color=value;
		});

		__getset(0,__proto,'onClick',null,function(value){
			var fn;
			/*__JS__ */eval("fn=function(event){"+value+";}");
			this.on(/*laya.events.Event.CLICK*/"click",this,fn);
		});

		__getset(0,__proto,'id',null,function(value){
			HTMLDocument.document.setElementById(value,this);
		});

		__getset(0,__proto,'innerTEXT',function(){
			return this._text.text;
			},function(value){
			this.text=value;
		});

		__getset(0,__proto,'style',function(){
			return this._style;
		});

		__getset(0,__proto,'text',function(){
			return this._text.text;
			},function(value){
			if (this._text==HTMLElement._EMPTYTEXT){
				this._text={text:value,words:null};
			}
			else{
				this._text.text=value;
				this._text.words && (this._text.words.length=0);
			}
			this._renderType |=/*laya.renders.RenderSprite.CHILDS*/0x800;
			this.repaint();
			this.updateHref();
		});

		__getset(0,__proto,'parent',_super.prototype._$get_parent,function(value){
			if ((value instanceof laya.html.dom.HTMLElement )){
				var p=value;
				this.URI || (this.URI=p.URI);
				this.style.inherit(p.style);
			}
			_super.prototype._$set_parent.call(this,value);
		});

		__getset(0,__proto,'className',null,function(value){
			this.style.attrs(HTMLDocument.document.styleSheets['.'+value]);
		});

		HTMLElement.fillWords=function(ele,words,x,y,font,color,underLine){
			ele.graphics.clear();
			for (var i=0,n=words.length;i < n;i++){
				var a=words[i];
				ele.graphics.fillText(a.char,a.x+x,a.y+y,font,color,'left',underLine);
			}
		}

		HTMLElement._EMPTYTEXT={text:null,words:null};
		return HTMLElement;
	})(Sprite)


	/**
	*@private
	*/
	//class laya.html.dom.HTMLBrElement extends laya.html.dom.HTMLElement
	var HTMLBrElement=(function(_super){
		function HTMLBrElement(){
			HTMLBrElement.__super.call(this);
			this.style.lineElement=true;
			this.style.block=true;
		}

		__class(HTMLBrElement,'laya.html.dom.HTMLBrElement',_super);
		return HTMLBrElement;
	})(HTMLElement)


	/**
	*DIV标签
	*/
	//class laya.html.dom.HTMLDivElement extends laya.html.dom.HTMLElement
	var HTMLDivElement=(function(_super){
		function HTMLDivElement(){
			this.contextHeight=NaN;
			this.contextWidth=NaN;
			HTMLDivElement.__super.call(this);
			this.style.block=true;
			this.style.lineElement=true;
			this.style.width=200;
			this.style.height=200;
			HTMLStyleElement;
		}

		__class(HTMLDivElement,'laya.html.dom.HTMLDivElement',_super);
		var __proto=HTMLDivElement.prototype;
		/**
		*追加内容，解析并对显示对象排版
		*@param text
		*/
		__proto.appendHTML=function(text){
			HTMLParse.parse(this,text,this.URI);
			this.layout();
		}

		/**
		*@private
		*@param out
		*@return
		*/
		__proto._addChildsToLayout=function(out){
			var words=this._getWords();
			if (words==null && this._childs.length==0)return false;
			words && words.forEach(function(o){
				out.push(o);
			});
			var tFirstKey=true;
			for (var i=0,len=this._childs.length;i < len;i++){
				var o=this._childs[i];
				if (tFirstKey){
					tFirstKey=false;
					}else {
					out.push(null);
				}
				o._addToLayout(out)
			}
			return true;
		}

		/**
		*@private
		*@param out
		*/
		__proto._addToLayout=function(out){
			this.layout();
		}

		/**
		*@private
		*对显示内容进行排版
		*/
		__proto.layout=function(){
			this.style._type |=/*laya.display.css.CSSStyle.ADDLAYOUTED*/0x200;
			var tArray=Layout.layout(this);
			if (tArray){
				if (!this._$P.mHtmlBounds)this._set$P("mHtmlBounds",new Rectangle());
				var tRectangle=this._$P.mHtmlBounds;
				tRectangle.x=tRectangle.y=0;
				tRectangle.width=this.contextWidth=tArray[0];
				tRectangle.height=this.contextHeight=tArray[1];
				this.setBounds(tRectangle);
			}
		}

		/**
		*获取对象的高
		*/
		__getset(0,__proto,'height',function(){
			if (this._height)return this._height;
			return this.contextHeight;
		},_super.prototype._$set_height);

		/**
		*设置标签内容
		*/
		__getset(0,__proto,'innerHTML',null,function(text){
			this.destroyChildren();
			this.appendHTML(text);
		});

		/**
		*获取对象的宽
		*/
		__getset(0,__proto,'width',function(){
			if (this._width)return this._width;
			return this.contextWidth;
			},function(value){
			var changed=false;
			if (value===0){
				changed=value !=this._width;
				}else{
				changed=value !=this.width;
			}
			_super.prototype._$set_width.call(this,value);
			if(changed)
				this.layout();
		});

		return HTMLDivElement;
	})(HTMLElement)


	/**
	*@private
	*/
	//class laya.html.dom.HTMLDocument extends laya.html.dom.HTMLElement
	var HTMLDocument=(function(_super){
		function HTMLDocument(){
			this.all=new Array;
			this.styleSheets=CSSStyle.styleSheets;
			HTMLDocument.__super.call(this);
		}

		__class(HTMLDocument,'laya.html.dom.HTMLDocument',_super);
		var __proto=HTMLDocument.prototype;
		__proto.getElementById=function(id){
			return this.all[id];
		}

		__proto.setElementById=function(id,e){
			this.all[id]=e;
		}

		__static(HTMLDocument,
		['document',function(){return this.document=new HTMLDocument();}
		]);
		return HTMLDocument;
	})(HTMLElement)


	/**
	*@private
	*/
	//class laya.html.dom.HTMLImageElement extends laya.html.dom.HTMLElement
	var HTMLImageElement=(function(_super){
		function HTMLImageElement(){
			this._tex=null;
			this._url=null;
			this._renderArgs=[];
			HTMLImageElement.__super.call(this);
			this.style.block=true;
		}

		__class(HTMLImageElement,'laya.html.dom.HTMLImageElement',_super);
		var __proto=HTMLImageElement.prototype;
		__proto._addToLayout=function(out){
			!this._style.absolute && out.push(this);
		}

		__proto.render=function(context,x,y){
			if (!this._tex || !this._tex.loaded || !this._tex.loaded || this._width < 1 || this._height < 1)return;
			Stat.spriteCount++;
			this._renderArgs[0]=this._tex;
			this._renderArgs[1]=this.x;
			this._renderArgs[2]=this.y;
			this._renderArgs[3]=this.width || this._tex.width;
			this._renderArgs[4]=this.height || this._tex.height;
			context.ctx.drawTexture2(x,y,this.style.translateX,this.style.translateY,this.transform,this.style.alpha,this.style.blendMode,this._renderArgs);
		}

		__getset(0,__proto,'src',null,function(url){
			var _$this=this;
			url=this.formatURL(url);
			if (this._url==url)return;
			this._url=url;
			var tex=this._tex=Loader.getRes(url);
			if (!tex){
				this._tex=tex=new Texture();
				tex.load(url);
				Loader.cacheRes(url,tex);
			}
			function onloaded (){
				var style=_$this._style;
				var w=style.widthed(_$this)?-1:_$this._tex.width;
				var h=style.heighted(_$this)?-1:_$this._tex.height;
				if (!style.widthed(_$this)&& _$this._width !=_$this._tex.width){
					_$this.width=_$this._tex.width;
					_$this.parent && (_$this.parent)._layoutLater();
				}
				if (!style.heighted(_$this)&& _$this._height !=_$this._tex.height){
					_$this.height=_$this._tex.height;
					_$this.parent && (_$this.parent)._layoutLater();
				}
				if (Render.isConchApp){
					_$this._renderArgs[0]=_$this._tex;
					_$this._renderArgs[1]=_$this.x;
					_$this._renderArgs[2]=_$this.y;
					_$this._renderArgs[3]=_$this.width || _$this._tex.width;
					_$this._renderArgs[4]=_$this.height || _$this._tex.height;
					_$this.graphics.drawTexture(_$this._tex,0,0,_$this._renderArgs[3],_$this._renderArgs[4]);
				}
				_$this.repaint();
				_$this.parentRepaint();
			}
			tex.loaded?onloaded():tex.on(/*laya.events.Event.LOADED*/"loaded",null,onloaded);
		});

		return HTMLImageElement;
	})(HTMLElement)


	/**
	*@private
	*/
	//class laya.html.dom.HTMLLinkElement extends laya.html.dom.HTMLElement
	var HTMLLinkElement=(function(_super){
		function HTMLLinkElement(){
			this.type=null;
			HTMLLinkElement.__super.call(this);
			this.visible=false;
		}

		__class(HTMLLinkElement,'laya.html.dom.HTMLLinkElement',_super);
		var __proto=HTMLLinkElement.prototype;
		__proto._onload=function(data){
			switch(this.type){
				case 'text/css':
					CSSStyle.parseCSS(data,this.URI);
					break ;
				}
		}

		__getset(0,__proto,'href',_super.prototype._$get_href,function(url){
			var _$this=this;
			url=this.formatURL(url);
			this.URI=new URL(url);
			var l=new Loader();
			l.once(/*laya.events.Event.COMPLETE*/"complete",null,function(data){
				_$this._onload(data);
			});
			l.load(url,/*laya.net.Loader.TEXT*/"text");
		});

		HTMLLinkElement._cuttingStyle=new RegExp("((@keyframes[\\s\\t]+|)(.+))[\\t\\n\\r\\\s]*{","g");
		return HTMLLinkElement;
	})(HTMLElement)


	/**
	*@private
	*/
	//class laya.html.dom.HTMLStyleElement extends laya.html.dom.HTMLElement
	var HTMLStyleElement=(function(_super){
		function HTMLStyleElement(){
			HTMLStyleElement.__super.call(this);
			this.visible=false;
		}

		__class(HTMLStyleElement,'laya.html.dom.HTMLStyleElement',_super);
		var __proto=HTMLStyleElement.prototype;
		/**
		*解析样式
		*/
		__getset(0,__proto,'text',_super.prototype._$get_text,function(value){
			CSSStyle.parseCSS(value,null);
		});

		return HTMLStyleElement;
	})(HTMLElement)


	/**
	*iframe标签类，目前用于加载外并解析数据
	*/
	//class laya.html.dom.HTMLIframeElement extends laya.html.dom.HTMLDivElement
	var HTMLIframeElement=(function(_super){
		function HTMLIframeElement(){
			HTMLIframeElement.__super.call(this);
			this._getCSSStyle().valign="middle";
		}

		__class(HTMLIframeElement,'laya.html.dom.HTMLIframeElement',_super);
		var __proto=HTMLIframeElement.prototype;
		/**
		*加载html文件，并解析数据
		*@param url
		*/
		__getset(0,__proto,'href',_super.prototype._$get_href,function(url){
			var _$this=this;
			url=this.formatURL(url);
			var l=new Loader();
			l.once(/*laya.events.Event.COMPLETE*/"complete",null,function(data){
				var pre=_$this.URI;
				_$this.URI=new URL(url);
				_$this.innerHTML=data;
				!pre || (_$this.URI=pre);
			});
			l.load(url,/*laya.net.Loader.TEXT*/"text");
		});

		return HTMLIframeElement;
	})(HTMLDivElement)



})(window,document,Laya);


(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

	var BlendMode=laya.webgl.canvas.BlendMode,Event=laya.events.Event,HTMLCanvas=laya.resource.HTMLCanvas;
	var Handler=laya.utils.Handler,IndexBuffer2D=laya.webgl.utils.IndexBuffer2D,Loader=laya.net.Loader,MathUtil=laya.maths.MathUtil;
	var Matrix=laya.maths.Matrix,Render=laya.renders.Render,RenderContext=laya.renders.RenderContext,RenderSprite=laya.renders.RenderSprite;
	var Shader=laya.webgl.shader.Shader,Sprite=laya.display.Sprite,Stat=laya.utils.Stat,Texture=laya.resource.Texture;
	var Utils=laya.utils.Utils,Value2D=laya.webgl.shader.d2.value.Value2D,VertexBuffer2D=laya.webgl.utils.VertexBuffer2D;
	var WebGL=laya.webgl.WebGL,WebGLContext=laya.webgl.WebGLContext;
	/**
	*<code>EmitterBase</code> 类是粒子发射器类
	*/
	//class laya.particle.emitter.EmitterBase
	var EmitterBase=(function(){
		function EmitterBase(){
			this._frameTime=0;
			this._emissionRate=60;
			this._emissionTime=0;
			this.minEmissionTime=1 / 60;
			this._particleTemplate=null;
		}

		__class(EmitterBase,'laya.particle.emitter.EmitterBase');
		var __proto=EmitterBase.prototype;
		/**
		*开始发射粒子
		*@param duration 发射持续的时间(秒)
		*/
		__proto.start=function(duration){
			(duration===void 0)&& (duration=Number.MAX_VALUE);
			if (this._emissionRate !=0)
				this._emissionTime=duration;
		}

		/**
		*停止发射粒子
		*@param clearParticles 是否清理当前的粒子
		*/
		__proto.stop=function(){
			this._emissionTime=0;
		}

		/**
		*清理当前的活跃粒子
		*@param clearTexture 是否清理贴图数据,若清除贴图数据将无法再播放
		*/
		__proto.clear=function(){
			this._emissionTime=0;
		}

		/**
		*发射一个粒子
		*
		*/
		__proto.emit=function(){}
		/**
		*时钟前进
		*@param passedTime 前进时间
		*
		*/
		__proto.advanceTime=function(passedTime){
			(passedTime===void 0)&& (passedTime=1);
			this._emissionTime-=passedTime;
			if (this._emissionTime < 0)return;
			this._frameTime+=passedTime;
			if (this._frameTime < this.minEmissionTime)return;
			while (this._frameTime > this.minEmissionTime){
				this._frameTime-=this.minEmissionTime;
				this.emit();
			}
		}

		/**
		*设置粒子粒子模板
		*@param particleTemplate 粒子模板
		*
		*/
		__getset(0,__proto,'particleTemplate',null,function(particleTemplate){
			this._particleTemplate=particleTemplate;
		});

		/**
		*设置粒子发射速率
		*@param emissionRate 粒子发射速率 (个/秒)
		*/
		/**
		*获取粒子发射速率
		*@return 发射速率 粒子发射速率 (个/秒)
		*/
		__getset(0,__proto,'emissionRate',function(){
			return this._emissionRate;
			},function(_emissionRate){
			if (_emissionRate <=0)return;
			this._emissionRate=_emissionRate;
			(_emissionRate > 0)&& (this.minEmissionTime=1 / _emissionRate);
		});

		return EmitterBase;
	})()


	/**
	*@private
	*/
	//class laya.particle.ParticleData
	var ParticleData=(function(){
		function ParticleData(){
			this.position=null;
			this.velocity=null;
			this.startColor=null;
			this.endColor=null;
			this.sizeRotation=null;
			this.radius=null;
			this.radian=null;
			this.durationAddScale=NaN;
			this.time=NaN;
		}

		__class(ParticleData,'laya.particle.ParticleData');
		ParticleData.Create=function(settings,position,velocity,time){
			var particleData=new ParticleData();
			particleData.position=position;
			MathUtil.scaleVector3(velocity,settings.emitterVelocitySensitivity,ParticleData._tempVelocity);
			var horizontalVelocity=MathUtil.lerp(settings.minHorizontalVelocity,settings.maxHorizontalVelocity,Math.random());
			var horizontalAngle=Math.random()*Math.PI *2;
			ParticleData._tempVelocity[0]+=horizontalVelocity *Math.cos(horizontalAngle);
			ParticleData._tempVelocity[2]+=horizontalVelocity *Math.sin(horizontalAngle);
			ParticleData._tempVelocity[1]+=MathUtil.lerp(settings.minVerticalVelocity,settings.maxVerticalVelocity,Math.random());
			particleData.velocity=ParticleData._tempVelocity;
			particleData.startColor=ParticleData._tempStartColor;
			particleData.endColor=ParticleData._tempEndColor;
			var i=0;
			if (settings.disableColor){
				for (i=0;i < 4;i++){
					particleData.startColor[i]=1;
					particleData.endColor[i]=1;
				}
			}
			else{
				if (settings.colorComponentInter){
					for (i=0;i < 4;i++){
						particleData.startColor[i]=MathUtil.lerp(settings.minStartColor[i],settings.maxStartColor[i],Math.random());
						particleData.endColor[i]=MathUtil.lerp(settings.minEndColor[i],settings.maxEndColor[i],Math.random());
					}
					}else {
					MathUtil.lerpVector4(settings.minStartColor,settings.maxStartColor,Math.random(),particleData.startColor);
					MathUtil.lerpVector4(settings.minEndColor,settings.maxEndColor,Math.random(),particleData.endColor);
				}
			}
			particleData.sizeRotation=ParticleData._tempSizeRotation;
			var sizeRandom=Math.random();
			particleData.sizeRotation[0]=MathUtil.lerp(settings.minStartSize,settings.maxStartSize,sizeRandom);
			particleData.sizeRotation[1]=MathUtil.lerp(settings.minEndSize,settings.maxEndSize,sizeRandom);
			particleData.sizeRotation[2]=MathUtil.lerp(settings.minRotateSpeed,settings.maxRotateSpeed,Math.random());
			particleData.radius=ParticleData._tempRadius;
			var radiusRandom=Math.random();
			particleData.radius[0]=MathUtil.lerp(settings.minStartRadius,settings.maxStartRadius,radiusRandom);
			particleData.radius[1]=MathUtil.lerp(settings.minEndRadius,settings.maxEndRadius,radiusRandom);
			particleData.radian=ParticleData._tempRadian;
			particleData.radian[0]=MathUtil.lerp(settings.minHorizontalStartRadian,settings.maxHorizontalStartRadian,Math.random());
			particleData.radian[1]=MathUtil.lerp(settings.minVerticalStartRadian,settings.maxVerticalStartRadian,Math.random());
			var useEndRadian=settings.useEndRadian;
			particleData.radian[2]=useEndRadian?MathUtil.lerp(settings.minHorizontalEndRadian,settings.maxHorizontalEndRadian,Math.random()):particleData.radian[0];
			particleData.radian[3]=useEndRadian?MathUtil.lerp(settings.minVerticalEndRadian,settings.maxVerticalEndRadian,Math.random()):particleData.radian[1];
			particleData.durationAddScale=settings.ageAddScale *Math.random();
			particleData.time=time;
			return particleData;
		}

		__static(ParticleData,
		['_tempVelocity',function(){return this._tempVelocity=new Float32Array(3);},'_tempStartColor',function(){return this._tempStartColor=new Float32Array(4);},'_tempEndColor',function(){return this._tempEndColor=new Float32Array(4);},'_tempSizeRotation',function(){return this._tempSizeRotation=new Float32Array(3);},'_tempRadius',function(){return this._tempRadius=new Float32Array(2);},'_tempRadian',function(){return this._tempRadian=new Float32Array(4);}
		]);
		return ParticleData;
	})()


	/**
	*@private
	*/
	//class laya.particle.ParticleEmitter
	var ParticleEmitter=(function(){
		function ParticleEmitter(templet,particlesPerSecond,initialPosition){
			this._templet=null;
			this._timeBetweenParticles=NaN;
			this._previousPosition=null;
			this._timeLeftOver=0;
			this._tempVelocity=new Float32Array([0,0,0]);
			this._tempPosition=new Float32Array([0,0,0]);
			this._templet=templet;
			this._timeBetweenParticles=1.0 / particlesPerSecond;
			this._previousPosition=initialPosition;
		}

		__class(ParticleEmitter,'laya.particle.ParticleEmitter');
		var __proto=ParticleEmitter.prototype;
		__proto.update=function(elapsedTime,newPosition){
			elapsedTime=elapsedTime / 1000;
			if (elapsedTime > 0){
				MathUtil.subtractVector3(newPosition,this._previousPosition,this._tempVelocity);
				MathUtil.scaleVector3(this._tempVelocity,1 / elapsedTime,this._tempVelocity);
				var timeToSpend=this._timeLeftOver+elapsedTime;
				var currentTime=-this._timeLeftOver;
				while (timeToSpend > this._timeBetweenParticles){
					currentTime+=this._timeBetweenParticles;
					timeToSpend-=this._timeBetweenParticles;
					MathUtil.lerpVector3(this._previousPosition,newPosition,currentTime / elapsedTime,this._tempPosition);
					this._templet.addParticleArray(this._tempPosition,this._tempVelocity);
				}
				this._timeLeftOver=timeToSpend;
			}
			this._previousPosition[0]=newPosition[0];
			this._previousPosition[1]=newPosition[1];
			this._previousPosition[2]=newPosition[2];
		}

		return ParticleEmitter;
	})()


	/**
	*<code>ParticleSettings</code> 类是粒子配置数据类
	*/
	//class laya.particle.ParticleSetting
	var ParticleSetting=(function(){
		function ParticleSetting(){
			this.textureName=null;
			this.textureCount=1;
			this.maxPartices=100;
			this.duration=1;
			this.ageAddScale=0;
			this.emitterVelocitySensitivity=1;
			this.minStartSize=100;
			this.maxStartSize=100;
			this.minEndSize=100;
			this.maxEndSize=100;
			this.minHorizontalVelocity=0;
			this.maxHorizontalVelocity=0;
			this.minVerticalVelocity=0;
			this.maxVerticalVelocity=0;
			this.endVelocity=1;
			this.minRotateSpeed=0;
			this.maxRotateSpeed=0;
			this.minStartRadius=0;
			this.maxStartRadius=0;
			this.minEndRadius=0;
			this.maxEndRadius=0;
			this.minHorizontalStartRadian=0;
			this.maxHorizontalStartRadian=0;
			this.minVerticalStartRadian=0;
			this.maxVerticalStartRadian=0;
			this.useEndRadian=true;
			this.minHorizontalEndRadian=0;
			this.maxHorizontalEndRadian=0;
			this.minVerticalEndRadian=0;
			this.maxVerticalEndRadian=0;
			this.colorComponentInter=false;
			this.disableColor=false;
			this.blendState=0;
			this.emitterType="null";
			this.emissionRate=0;
			this.sphereEmitterRadius=1;
			this.sphereEmitterVelocity=0;
			this.sphereEmitterVelocityAddVariance=0;
			this.ringEmitterRadius=30;
			this.ringEmitterVelocity=0;
			this.ringEmitterVelocityAddVariance=0;
			this.ringEmitterUp=2;
			this.gravity=new Float32Array([0,0,0]);
			this.minStartColor=new Float32Array([1,1,1,1]);
			this.maxStartColor=new Float32Array([1,1,1,1]);
			this.minEndColor=new Float32Array([1,1,1,1]);
			this.maxEndColor=new Float32Array([1,1,1,1]);
			this.pointEmitterPosition=new Float32Array([0,0,0]);
			this.pointEmitterPositionVariance=new Float32Array([0,0,0]);
			this.pointEmitterVelocity=new Float32Array([0,0,0]);
			this.pointEmitterVelocityAddVariance=new Float32Array([0,0,0]);
			this.boxEmitterCenterPosition=new Float32Array([0,0,0]);
			this.boxEmitterSize=new Float32Array([0,0,0]);
			this.boxEmitterVelocity=new Float32Array([0,0,0]);
			this.boxEmitterVelocityAddVariance=new Float32Array([0,0,0]);
			this.sphereEmitterCenterPosition=new Float32Array([0,0,0]);
			this.ringEmitterCenterPosition=new Float32Array([0,0,0]);
			this.positionVariance=new Float32Array([0,0,0]);
		}

		__class(ParticleSetting,'laya.particle.ParticleSetting');
		ParticleSetting.checkSetting=function(setting){
			var key;
			for (key in ParticleSetting._defaultSetting){
				if (!setting.hasOwnProperty(key)){
					setting[key]=ParticleSetting._defaultSetting[key];
				}
			}
		}

		__static(ParticleSetting,
		['_defaultSetting',function(){return this._defaultSetting=new ParticleSetting();}
		]);
		return ParticleSetting;
	})()


	/**
	*
	*<code>ParticleTemplateBase</code> 类是粒子模板基类
	*
	*/
	//class laya.particle.ParticleTemplateBase
	var ParticleTemplateBase=(function(){
		function ParticleTemplateBase(){
			this.settings=null;
			this.texture=null;
		}

		__class(ParticleTemplateBase,'laya.particle.ParticleTemplateBase');
		var __proto=ParticleTemplateBase.prototype;
		/**
		*添加一个粒子
		*@param position 粒子位置
		*@param velocity 粒子速度
		*
		*/
		__proto.addParticleArray=function(position,velocity){}
		return ParticleTemplateBase;
	})()


	/**
	*@private
	*/
	//class laya.particle.particleUtils.CanvasShader
	var CanvasShader=(function(){
		function CanvasShader(){
			this.u_Duration=NaN;
			this.u_EndVelocity=NaN;
			this.u_Gravity=null;
			this.a_Position=null;
			this.a_Velocity=null;
			this.a_StartColor=null;
			this.a_EndColor=null;
			this.a_SizeRotation=null;
			this.a_Radius=null;
			this.a_Radian=null;
			this.a_AgeAddScale=NaN;
			this.gl_Position=null;
			this.v_Color=null;
			this.oSize=NaN;
			this._color=new Float32Array(4);
			this._position=new Float32Array(3);
		}

		__class(CanvasShader,'laya.particle.particleUtils.CanvasShader');
		var __proto=CanvasShader.prototype;
		__proto.getLen=function(position){
			return Math.sqrt(position[0] *position[0]+position[1] *position[1]+position[2] *position[2]);
		}

		__proto.ComputeParticlePosition=function(position,velocity,age,normalizedAge){
			this._position[0]=position[0];
			this._position[1]=position[1];
			this._position[2]=position[2];
			var startVelocity=this.getLen(velocity);
			var endVelocity=startVelocity *this.u_EndVelocity;
			var velocityIntegral=startVelocity *normalizedAge+(endVelocity-startVelocity)*normalizedAge *normalizedAge / 2.0;
			var lenVelocity=NaN;
			lenVelocity=this.getLen(velocity);
			var i=0,len=0;
			len=3;
			for (i=0;i < len;i++){
				this._position[i]=this._position[i]+(velocity[i] / lenVelocity)*velocityIntegral *this.u_Duration;
				this._position[i]+=this.u_Gravity[i] *age *normalizedAge;
			};
			var radius=MathUtil.lerp(this.a_Radius[0],this.a_Radius[1],normalizedAge);
			var radianHorizontal=MathUtil.lerp(this.a_Radian[0],this.a_Radian[2],normalizedAge);
			var radianVertical=MathUtil.lerp(this.a_Radian[1],this.a_Radian[3],normalizedAge);
			var r=Math.cos(radianVertical)*radius;
			this._position[1]+=Math.sin(radianVertical)*radius;
			this._position[0]+=Math.cos(radianHorizontal)*r;
			this._position[2]+=Math.sin(radianHorizontal)*r;
			return new Float32Array([this._position[0],this._position[1],0.0,1.0]);
		}

		__proto.ComputeParticleSize=function(startSize,endSize,normalizedAge){
			var size=MathUtil.lerp(startSize,endSize,normalizedAge);
			return size;
		}

		__proto.ComputeParticleRotation=function(rot,age){
			return rot *age;
		}

		__proto.ComputeParticleColor=function(startColor,endColor,normalizedAge){
			var rst=this._color;
			MathUtil.lerpVector4(startColor,endColor,normalizedAge,rst);
			rst[3]=rst[3]*normalizedAge *(1.0-normalizedAge)*(1.0-normalizedAge)*6.7;
			return rst;
		}

		__proto.clamp=function(value,min,max){
			if(value<min)return min;
			if(value>max)return max;
			return value;
		}

		__proto.getData=function(age){
			age *=1.0+this.a_AgeAddScale;
			var normalizedAge=this.clamp(age / this.u_Duration,0.0,1.0);
			this.gl_Position=this.ComputeParticlePosition(this.a_Position,this.a_Velocity,age,normalizedAge);
			var pSize=this.ComputeParticleSize(this.a_SizeRotation[0],this.a_SizeRotation[1],normalizedAge);
			var rotation=this.ComputeParticleRotation(this.a_SizeRotation[2],age);
			this.v_Color=this.ComputeParticleColor(this.a_StartColor,this.a_EndColor,normalizedAge);
			var matric=new Matrix();
			var scale=NaN;
			scale=pSize/this.oSize*2;
			matric.scale(scale,scale);
			matric.rotate(rotation);
			matric.setTranslate(this.gl_Position[0],-this.gl_Position[1]);
			var alpha=NaN;
			alpha=this.v_Color[3];
			return [this.v_Color,alpha,matric,this.v_Color[0]*alpha,this.v_Color[1]*alpha,this.v_Color[2]*alpha];
		}

		return CanvasShader;
	})()


	/**
	*
	*@private
	*
	*@created 2015-8-25 下午3:41:07
	*/
	//class laya.particle.particleUtils.CMDParticle
	var CMDParticle=(function(){
		function CMDParticle(){
			this.maxIndex=0;
			this.cmds=null;
			this.id=0;
		}

		__class(CMDParticle,'laya.particle.particleUtils.CMDParticle');
		var __proto=CMDParticle.prototype;
		__proto.setCmds=function(cmds){
			this.cmds=cmds;
			this.maxIndex=cmds.length-1;
		}

		return CMDParticle;
	})()


	//class laya.particle.particleUtils.PicTool
	var PicTool=(function(){
		function PicTool(){};
		__class(PicTool,'laya.particle.particleUtils.PicTool');
		PicTool.getCanvasPic=function(img,color){
			img=img.bitmap;
			var canvas=new HTMLCanvas("2D");
			var ctx=canvas.getContext('2d');
			canvas.size(img.width,img.height);
			var red=(color >> 16 & 0xFF);
			var green=(color >> 8 & 0xFF);
			var blue=(color & 0xFF);
			if(Render.isConchApp){
				ctx.setFilter(red/255,green/255,blue/255,0);
			}
			ctx.drawImage(img.source,0,0);
			if (!Render.isConchApp){
				var imgdata=ctx.getImageData(0,0,canvas.width,canvas.height);
				var data=imgdata.data;
				for (var i=0,n=data.length;i < n;i+=4){
					if (data[i+3]==0)continue ;
					data[i] *=red/255;
					data[i+1] *=green/255;
					data[i+2] *=blue/255;
				}
				ctx.putImageData(imgdata,0,0);
			}
			return canvas;
		}

		PicTool.getRGBPic=function(img){
			var rst;
			rst=[new Texture(PicTool.getCanvasPic(img,0xFF0000)),new Texture(PicTool.getCanvasPic(img,0x00FF00)),new Texture(PicTool.getCanvasPic(img,0x0000FF))];
			return rst;
		}

		return PicTool;
	})()


	/**
	*
	*@private
	*/
	//class laya.particle.emitter.Emitter2D extends laya.particle.emitter.EmitterBase
	var Emitter2D=(function(_super){
		function Emitter2D(_template){
			this.setting=null;
			this._posRange=null;
			this._canvasTemplate=null;
			this._emitFun=null;
			Emitter2D.__super.call(this);
			this.template=_template;
		}

		__class(Emitter2D,'laya.particle.emitter.Emitter2D',_super);
		var __proto=Emitter2D.prototype;
		__proto.emit=function(){
			_super.prototype.emit.call(this);
			if(this._emitFun!=null)
				this._emitFun();
		}

		__proto.getRandom=function(value){
			return (Math.random()*2-1)*value;
		}

		__proto.webGLEmit=function(){
			var pos=new Float32Array(3);
			pos[0]=this.getRandom(this._posRange[0]);
			pos[1]=this.getRandom(this._posRange[1]);
			pos[2]=this.getRandom(this._posRange[2]);
			var v=new Float32Array(3);
			v[0]=0;
			v[1]=0;
			v[2]=0;
			this._particleTemplate.addParticleArray(pos,v);
		}

		__proto.canvasEmit=function(){
			var pos=new Float32Array(3);
			pos[0]=this.getRandom(this._posRange[0]);
			pos[1]=this.getRandom(this._posRange[1]);
			pos[2]=this.getRandom(this._posRange[2]);
			var v=new Float32Array(3);
			v[0]=0;
			v[1]=0;
			v[2]=0;
			this._particleTemplate.addParticleArray(pos,v);
		}

		__getset(0,__proto,'template',function(){
			return this._particleTemplate;
			},function(template){
			this._particleTemplate=template;
			if (!template){
				this._emitFun=null;
				this.setting=null;
				this._posRange=null;
			};
			this.setting=template.settings;
			this._posRange=this.setting.positionVariance;
			if((this._particleTemplate instanceof laya.particle.ParticleTemplate2D )){
				this._emitFun=this.webGLEmit;
			}else
			if((this._particleTemplate instanceof laya.particle.ParticleTemplateCanvas )){
				this._canvasTemplate=template;
				this._emitFun=this.canvasEmit;
			}
		});

		return Emitter2D;
	})(EmitterBase)


	/**
	*@private
	*/
	//class laya.particle.ParticleTemplateWebGL extends laya.particle.ParticleTemplateBase
	var ParticleTemplateWebGL=(function(_super){
		function ParticleTemplateWebGL(parSetting){
			this._vertices=null;
			this._vertexBuffer=null;
			this._indexBuffer=null;
			this._floatCountPerVertex=29;
			this._firstActiveElement=0;
			this._firstNewElement=0;
			this._firstFreeElement=0;
			this._firstRetiredElement=0;
			this._currentTime=0;
			this._drawCounter=0;
			ParticleTemplateWebGL.__super.call(this);
			this.settings=parSetting;
		}

		__class(ParticleTemplateWebGL,'laya.particle.ParticleTemplateWebGL',_super);
		var __proto=ParticleTemplateWebGL.prototype;
		__proto.initialize=function(){
			this._vertices=new Float32Array(this.settings.maxPartices *this._floatCountPerVertex *4);
			var particleOffset=0;
			for (var i=0;i < this.settings.maxPartices;i++){
				var random=Math.random();
				var cornerYSegement=this.settings.textureCount ? 1.0 / this.settings.textureCount :1.0;
				var cornerY=NaN;
				for (cornerY=0;cornerY < this.settings.textureCount;cornerY+=cornerYSegement){
					if (random < cornerY+cornerYSegement)
						break ;
				}
				particleOffset=i *this._floatCountPerVertex *4;
				this._vertices[particleOffset+this._floatCountPerVertex *0+0]=-1;
				this._vertices[particleOffset+this._floatCountPerVertex *0+1]=-1;
				this._vertices[particleOffset+this._floatCountPerVertex *0+2]=0;
				this._vertices[particleOffset+this._floatCountPerVertex *0+3]=cornerY;
				this._vertices[particleOffset+this._floatCountPerVertex *1+0]=1;
				this._vertices[particleOffset+this._floatCountPerVertex *1+1]=-1;
				this._vertices[particleOffset+this._floatCountPerVertex *1+2]=1;
				this._vertices[particleOffset+this._floatCountPerVertex *1+3]=cornerY;
				this._vertices[particleOffset+this._floatCountPerVertex *2+0]=1;
				this._vertices[particleOffset+this._floatCountPerVertex *2+1]=1;
				this._vertices[particleOffset+this._floatCountPerVertex *2+2]=1;
				this._vertices[particleOffset+this._floatCountPerVertex *2+3]=cornerY+cornerYSegement;
				this._vertices[particleOffset+this._floatCountPerVertex *3+0]=-1;
				this._vertices[particleOffset+this._floatCountPerVertex *3+1]=1;
				this._vertices[particleOffset+this._floatCountPerVertex *3+2]=0;
				this._vertices[particleOffset+this._floatCountPerVertex *3+3]=cornerY+cornerYSegement;
			}
		}

		__proto.loadContent=function(){}
		__proto.update=function(elapsedTime){
			this._currentTime+=elapsedTime / 1000;
			this.retireActiveParticles();
			this.freeRetiredParticles();
			if (this._firstActiveElement==this._firstFreeElement)
				this._currentTime=0;
			if (this._firstRetiredElement==this._firstActiveElement)
				this._drawCounter=0;
		}

		__proto.retireActiveParticles=function(){
			var epsilon=0.0001;
			var particleDuration=this.settings.duration;
			while (this._firstActiveElement !=this._firstNewElement){
				var offset=this._firstActiveElement *this._floatCountPerVertex *4;
				var index=offset+28;
				var particleAge=this._currentTime-this._vertices[index];
				particleAge *=(1.0+this._vertices[offset+27]);
				if (particleAge+epsilon < particleDuration)
					break ;
				this._vertices[index]=this._drawCounter;
				this._firstActiveElement++;
				if (this._firstActiveElement >=this.settings.maxPartices)
					this._firstActiveElement=0;
			}
		}

		__proto.freeRetiredParticles=function(){
			while (this._firstRetiredElement !=this._firstActiveElement){
				var age=this._drawCounter-this._vertices[this._firstRetiredElement *this._floatCountPerVertex *4+28];
				if (age < 3)
					break ;
				this._firstRetiredElement++;
				if (this._firstRetiredElement >=this.settings.maxPartices)
					this._firstRetiredElement=0;
			}
		}

		__proto.addNewParticlesToVertexBuffer=function(){}
		__proto.addParticleArray=function(position,velocity){
			var nextFreeParticle=this._firstFreeElement+1;
			if (nextFreeParticle >=this.settings.maxPartices)
				nextFreeParticle=0;
			if (nextFreeParticle===this._firstRetiredElement)
				return;
			var particleData=ParticleData.Create(this.settings,position,velocity,this._currentTime);
			var startIndex=this._firstFreeElement *this._floatCountPerVertex *4;
			for (var i=0;i < 4;i++){
				var j=0,offset=0;
				for (j=0,offset=4;j < 3;j++)
				this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.position[j];
				for (j=0,offset=7;j < 3;j++)
				this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.velocity[j];
				for (j=0,offset=10;j < 4;j++)
				this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.startColor[j];
				for (j=0,offset=14;j < 4;j++)
				this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.endColor[j];
				for (j=0,offset=18;j < 3;j++)
				this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.sizeRotation[j];
				for (j=0,offset=21;j < 2;j++)
				this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.radius[j];
				for (j=0,offset=23;j < 4;j++)
				this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.radian[j];
				this._vertices[startIndex+i *this._floatCountPerVertex+27]=particleData.durationAddScale;
				this._vertices[startIndex+i *this._floatCountPerVertex+28]=particleData.time;
			}
			this._firstFreeElement=nextFreeParticle;
		}

		return ParticleTemplateWebGL;
	})(ParticleTemplateBase)


	/**
	*@private
	*/
	//class laya.particle.ParticleTemplateCanvas extends laya.particle.ParticleTemplateBase
	var ParticleTemplateCanvas=(function(_super){
		function ParticleTemplateCanvas(particleSetting){
			this._ready=false;
			this.textureList=[];
			this.particleList=[];
			this.pX=0;
			this.pY=0;
			this.activeParticles=[];
			this.deadParticles=[];
			this.iList=[];
			this._maxNumParticles=0;
			this.textureWidth=NaN;
			this.dTextureWidth=NaN;
			this.colorChange=true;
			this.step=1/60;
			this.canvasShader=new CanvasShader();
			ParticleTemplateCanvas.__super.call(this);
			this.settings=particleSetting;
			this._maxNumParticles=particleSetting.maxPartices;
			this.texture=new Texture();
			this.texture.on(/*laya.events.Event.LOADED*/"loaded",this,this._textureLoaded);
			this.texture.load(particleSetting.textureName);
		}

		__class(ParticleTemplateCanvas,'laya.particle.ParticleTemplateCanvas',_super);
		var __proto=ParticleTemplateCanvas.prototype;
		__proto._textureLoaded=function(e){
			this.setTexture(this.texture);
			this._ready=true;
		}

		__proto.clear=function(clearTexture){
			(clearTexture===void 0)&& (clearTexture=true);
			this.deadParticles.length=0;
			this.activeParticles.length=0;
			this.textureList.length=0;
		}

		/**
		*设置纹理
		*@param texture
		*
		*/
		__proto.setTexture=function(texture){
			this.texture=texture;
			this.textureWidth=texture.width;
			this.dTextureWidth=1/this.textureWidth;
			this.pX=-texture.width*0.5;
			this.pY=-texture.height*0.5;
			this.textureList=ParticleTemplateCanvas.changeTexture(texture,this.textureList);
			this.particleList.length=0;
			this.deadParticles.length=0;
			this.activeParticles.length=0;
		}

		/**
		*创建一个粒子数据
		*@return
		*
		*/
		__proto._createAParticleData=function(position,velocity){
			this.canvasShader.u_EndVelocity=this.settings.endVelocity;
			this.canvasShader.u_Gravity=this.settings.gravity;
			this.canvasShader.u_Duration=this.settings.duration;
			var particle;
			particle=ParticleData.Create(this.settings,position,velocity,0);
			this.canvasShader.a_Position=particle.position;
			this.canvasShader.a_Velocity=particle.velocity;
			this.canvasShader.a_StartColor=particle.startColor;
			this.canvasShader.a_EndColor=particle.endColor;
			this.canvasShader.a_SizeRotation=particle.sizeRotation;
			this.canvasShader.a_Radius=particle.radius;
			this.canvasShader.a_Radian=particle.radian;
			this.canvasShader.a_AgeAddScale=particle.durationAddScale;
			this.canvasShader.oSize=this.textureWidth;
			var rst=new CMDParticle();
			var i=0,len=this.settings.duration/(1+particle.durationAddScale);
			var params=[];
			var mStep=NaN;
			for(i=0;i<len;i+=this.step){
				params.push(this.canvasShader.getData(i));
			}
			rst.id=this.particleList.length;
			this.particleList.push(rst);
			rst.setCmds(params);
			return rst;
		}

		__proto.addParticleArray=function(position,velocity){
			if(!this._ready)return;
			var tParticle;
			if(this.particleList.length<this._maxNumParticles){
				tParticle=this._createAParticleData(position,velocity);
				this.iList[tParticle.id]=0;
				this.activeParticles.push(tParticle);
				}else{
				if(this.deadParticles.length>0){
					tParticle=this.deadParticles.pop();
					this.iList[tParticle.id]=0;
					this.activeParticles.push(tParticle);
				}
			}
		}

		__proto.advanceTime=function(passedTime){
			(passedTime===void 0)&& (passedTime=1);
			if(!this._ready)return;
			var particleList=this.activeParticles;
			var pool=this.deadParticles;
			var i=0,len=particleList.length;
			var tcmd;
			var tI=0;
			var iList=this.iList;
			for(i=len-1;i>-1;i--){
				tcmd=particleList[i];
				tI=iList[tcmd.id];
				if(tI>=tcmd.maxIndex){
					tI=0;
					particleList.splice(i,1);
					pool.push(tcmd);
					}else{
					tI+=1;
				}
				iList[tcmd.id]=tI;
			}
		}

		__proto.render=function(context,x,y){
			if(!this._ready)return;
			if(this.activeParticles.length<1)return;
			if (this.textureList.length < 2)return;
			if (this.settings.disableColor){
				this.noColorRender(context,x,y);
				}else{
				this.canvasRender(context,x,y);
			}
		}

		__proto.noColorRender=function(context,x,y){
			var particleList=this.activeParticles;
			var i=0,len=particleList.length;
			var tcmd;
			var tParam;
			var tAlpha=NaN;
			var px=this.pX,py=this.pY;
			var pw=-px*2,ph=-py*2;
			var tI=0;
			var textureList=this.textureList;
			var iList=this.iList;
			var preAlpha=NaN;
			context.translate(x,y);
			preAlpha=context.ctx.globalAlpha;
			for(i=0;i<len;i++){
				tcmd=particleList[i];
				tI=iList[tcmd.id];
				tParam=tcmd.cmds[tI];
				if (!tParam)continue ;
				if ((tAlpha=tParam[1])<=0.01)continue ;
				context.setAlpha(preAlpha*tAlpha);
				context.drawTextureWithTransform(this.texture,px,py,pw,ph,tParam[2],1);
			}
			context.setAlpha(preAlpha);
			context.translate(-x,-y);
		}

		__proto.canvasRender=function(context,x,y){
			var particleList=this.activeParticles;
			var i=0,len=particleList.length;
			var tcmd;
			var tParam;
			var tAlpha=NaN;
			var px=this.pX,py=this.pY;
			var pw=-px*2,ph=-py*2;
			var tI=0;
			var textureList=this.textureList;
			var iList=this.iList;
			var preAlpha=NaN;
			var preB;
			context.translate(x,y);
			preAlpha=context.ctx.globalAlpha;
			preB=context.ctx.globalCompositeOperation;
			context.blendMode("lighter");
			for(i=0;i<len;i++){
				tcmd=particleList[i];
				tI=iList[tcmd.id];
				tParam=tcmd.cmds[tI];
				if (!tParam)continue ;
				if ((tAlpha=tParam[1])<=0.01)continue ;
				context.save();
				context.transformByMatrix(tParam[2]);
				if(tParam[3]>0.01){
					context.setAlpha(preAlpha*tParam[3]);
					context.drawTexture(textureList[0],px,py,pw,ph);
				}
				if(tParam[4]>0.01){
					context.setAlpha(preAlpha*tParam[4]);
					context.drawTexture(textureList[1],px,py,pw,ph);
				}
				if(tParam[5]>0.01){
					context.setAlpha(preAlpha*tParam[5]);
					context.drawTexture(textureList[2],px,py,pw,ph);
				}
				context.restore();
			}
			context.setAlpha(preAlpha);
			context.translate(-x,-y);
			context.blendMode(preB);
		}

		ParticleTemplateCanvas.changeTexture=function(texture,rst,settings){
			if(!rst)rst=[];
			rst.length=0;
			if (settings&&settings.disableColor){
				rst.push(texture,texture,texture);
				}else{
				Utils.copyArray(rst,PicTool.getRGBPic(texture));
			}
			return rst;
		}

		return ParticleTemplateCanvas;
	})(ParticleTemplateBase)


	/**
	*@private
	*/
	//class laya.particle.ParticleTemplate2D extends laya.particle.ParticleTemplateWebGL
	var ParticleTemplate2D=(function(_super){
		function ParticleTemplate2D(parSetting){
			this._vertexBuffer2D=null;
			this._indexBuffer2D=null;
			this.x=0;
			this.y=0;
			this._blendFn=null;
			this._startTime=0;
			this.sv=new ParticleShaderValue();
			ParticleTemplate2D.__super.call(this,parSetting);
			var _this=this;
			Laya.loader.load(this.settings.textureName,Handler.create(null,function(texture){
				(texture.bitmap).enableMerageInAtlas=false;
				_this.texture=texture;
			}));
			this.sv.u_Duration=this.settings.duration;
			this.sv.u_Gravity=this.settings.gravity;
			this.sv.u_EndVelocity=this.settings.endVelocity;
			this._blendFn=BlendMode.fns[parSetting.blendState];
			this.initialize();
			this._vertexBuffer=this._vertexBuffer2D=VertexBuffer2D.create(-1,/*laya.webgl.WebGLContext.DYNAMIC_DRAW*/0x88E8);
			this._indexBuffer=this._indexBuffer2D=IndexBuffer2D.create(/*laya.webgl.WebGLContext.STATIC_DRAW*/0x88E4);
			this.loadContent();
		}

		__class(ParticleTemplate2D,'laya.particle.ParticleTemplate2D',_super);
		var __proto=ParticleTemplate2D.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto.getRenderType=function(){return-111}
		__proto.releaseRender=function(){}
		__proto.addParticleArray=function(position,velocity){
			position[0]+=this.x;
			position[1]+=this.y;
			_super.prototype.addParticleArray.call(this,position,velocity);
		}

		__proto.loadContent=function(){
			var indexes=new Uint16Array(this.settings.maxPartices *6);
			for (var i=0;i < this.settings.maxPartices;i++){
				indexes[i *6+0]=(i *4+0);
				indexes[i *6+1]=(i *4+1);
				indexes[i *6+2]=(i *4+2);
				indexes[i *6+3]=(i *4+0);
				indexes[i *6+4]=(i *4+2);
				indexes[i *6+5]=(i *4+3);
			}
			this._indexBuffer2D.clear();
			this._indexBuffer2D.append(indexes);
			this._indexBuffer2D.upload();
		}

		__proto.addNewParticlesToVertexBuffer=function(){
			this._vertexBuffer2D.clear();
			this._vertexBuffer2D.append(this._vertices);
			var start=0;
			if (this._firstNewElement < this._firstFreeElement){
				start=this._firstNewElement *4 *this._floatCountPerVertex *4;
				this._vertexBuffer2D.subUpload(start,start,start+(this._firstFreeElement-this._firstNewElement)*4 *this._floatCountPerVertex *4);
				}else {
				start=this._firstNewElement *4 *this._floatCountPerVertex *4;
				this._vertexBuffer2D.subUpload(start,start,start+(this.settings.maxPartices-this._firstNewElement)*4 *this._floatCountPerVertex *4);
				if (this._firstFreeElement > 0){
					this._vertexBuffer2D.setNeedUpload();
					this._vertexBuffer2D.subUpload(0,0,this._firstFreeElement *4 *this._floatCountPerVertex *4);
				}
			}
			this._firstNewElement=this._firstFreeElement;
		}

		__proto.renderSubmit=function(){
			if (this.texture&&this.texture.loaded){
				this.update(Laya.timer.delta);
				this.sv.u_CurrentTime=this._currentTime;
				if (this._firstNewElement !=this._firstFreeElement){
					this.addNewParticlesToVertexBuffer();
				}
				this.blend();
				if (this._firstActiveElement !=this._firstFreeElement){
					var gl=WebGL.mainContext;
					this._vertexBuffer2D.bind(this._indexBuffer2D);
					this.sv.u_texture=this.texture.source;
					this.sv.upload();
					if (this._firstActiveElement < this._firstFreeElement){
						WebGL.mainContext.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,(this._firstFreeElement-this._firstActiveElement)*6,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this._firstActiveElement *6 *2);
					}
					else{
						WebGL.mainContext.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,(this.settings.maxPartices-this._firstActiveElement)*6,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,this._firstActiveElement *6 *2);
						if (this._firstFreeElement > 0)
							WebGL.mainContext.drawElements(/*laya.webgl.WebGLContext.TRIANGLES*/0x0004,this._firstFreeElement *6,/*laya.webgl.WebGLContext.UNSIGNED_SHORT*/0x1403,0);
					}
					Stat.drawCall++;
				}
				this._drawCounter++;
			}
			return 1;
		}

		__proto.blend=function(){
			if (BlendMode.activeBlendFunction!==this._blendFn){
				var gl=WebGL.mainContext;
				gl.enable(/*laya.webgl.WebGLContext.BLEND*/0x0BE2);
				this._blendFn(gl);
				BlendMode.activeBlendFunction=this._blendFn;
			}
		}

		__proto.dispose=function(){
			this._indexBuffer2D.dispose();
		}

		ParticleTemplate2D.activeBlendType=-1;
		return ParticleTemplate2D;
	})(ParticleTemplateWebGL)


	/**
	*@private
	*/
	//class laya.particle.shader.value.ParticleShaderValue extends laya.webgl.shader.d2.value.Value2D
	var ParticleShaderValue=(function(_super){
		function ParticleShaderValue(){
			this.a_CornerTextureCoordinate=[4,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,0];
			this.a_Position=[3,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,16];
			this.a_Velocity=[3,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,28];
			this.a_StartColor=[4,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,40];
			this.a_EndColor=[4,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,56];
			this.a_SizeRotation=[3,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,72];
			this.a_Radius=[2,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,84];
			this.a_Radian=[4,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,92];
			this.a_AgeAddScale=[1,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,108];
			this.a_Time=[1,/*laya.webgl.WebGLContext.FLOAT*/0x1406,false,116,112];
			this.u_CurrentTime=NaN;
			this.u_Duration=NaN;
			this.u_Gravity=null;
			this.u_EndVelocity=NaN;
			this.u_texture=null;
			ParticleShaderValue.__super.call(this,0,0);
		}

		__class(ParticleShaderValue,'laya.particle.shader.value.ParticleShaderValue',_super);
		var __proto=ParticleShaderValue.prototype;
		__proto.upload=function(){
			this.refresh();
			ParticleShaderValue.pShader.upload(this);
		}

		__static(ParticleShaderValue,
		['pShader',function(){return this.pShader=new ParticleShader();}
		]);
		return ParticleShaderValue;
	})(Value2D)


	/**
	*<code>Particle2D</code> 类是2D粒子播放类
	*
	*/
	//class laya.particle.Particle2D extends laya.display.Sprite
	var Particle2D=(function(_super){
		function Particle2D(setting){
			this._matrix4=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
			this._particleTemplate=null;
			this._canvasTemplate=null;
			this._emitter=null;
			this.autoPlay=true;
			Particle2D.__super.call(this);
			if (setting)this.setParticleSetting(setting);
		}

		__class(Particle2D,'laya.particle.Particle2D',_super);
		var __proto=Particle2D.prototype;
		/**
		*加载粒子文件
		*@param url 粒子文件地址
		*/
		__proto.load=function(url){
			Laya.loader.load(url,Handler.create(this,this.setParticleSetting),null,/*laya.net.Loader.JSON*/"json");
		}

		/**
		*设置粒子配置数据
		*@param settings 粒子配置数据
		*/
		__proto.setParticleSetting=function(setting){
			var _$this=this;
			if (!setting)return this.stop();
			ParticleSetting.checkSetting(setting);
			if(/*__JS__ */!window.ConchParticleTemplate2D||Render.isWebGL)this.customRenderEnable=true;
			if (Render.isWebGL){
				this._particleTemplate=new ParticleTemplate2D(setting);
				this.graphics._saveToCmd(Render.context._drawParticle,[this._particleTemplate]);
			}
			else if (Render.isConchApp&&/*__JS__ */window.ConchParticleTemplate2D){
				this._particleTemplate=/*__JS__ */new ConchParticleTemplate2D();
				var _this=this;
				Laya.loader.load(setting.textureName,Handler.create(null,function(texture){
					/*__JS__ */_this._particleTemplate.texture=texture;
					_this._particleTemplate.settings=setting;
					if (Render.isConchNode){
						/*__JS__ */_this.graphics.drawParticle(_this._particleTemplate);
					}
					else{
						_this.graphics._saveToCmd(Render.context._drawParticle,[_$this._particleTemplate]);
					}
				}));
				this._emitter={start:function (){}};
				/*__JS__ */this.play=this._particleTemplate.play.bind(this._particleTemplate);
				/*__JS__ */this.stop=this._particleTemplate.stop.bind(this._particleTemplate);
				if (this.autoPlay)this.play();
				return;
			}
			else {
				this._particleTemplate=this._canvasTemplate=new ParticleTemplateCanvas(setting);
			}
			if (!this._emitter){
				this._emitter=new Emitter2D(this._particleTemplate);
				}else {
				(this._emitter).template=this._particleTemplate;
			}
			if (this.autoPlay){
				this.emitter.start();
				this.play();
			}
		}

		/**
		*播放
		*/
		__proto.play=function(){
			Laya.timer.frameLoop(1,this,this._loop);
		}

		/**
		*停止
		*/
		__proto.stop=function(){
			Laya.timer.clear(this,this._loop);
		}

		/**@private */
		__proto._loop=function(){
			this.advanceTime(1 / 60);
		}

		/**
		*时钟前进
		*@param passedTime 时钟前进时间
		*/
		__proto.advanceTime=function(passedTime){
			(passedTime===void 0)&& (passedTime=1);
			if (this._canvasTemplate){
				this._canvasTemplate.advanceTime(passedTime);
			}
			if (this._emitter){
				this._emitter.advanceTime(passedTime);
			}
		}

		__proto.customRender=function(context,x,y){
			if (Render.isWebGL){
				this._matrix4[0]=context.ctx._curMat.a;
				this._matrix4[1]=context.ctx._curMat.b;
				this._matrix4[4]=context.ctx._curMat.c;
				this._matrix4[5]=context.ctx._curMat.d;
				this._matrix4[12]=context.ctx._curMat.tx;
				this._matrix4[13]=context.ctx._curMat.ty;
				var sv=(this._particleTemplate).sv;
				sv.u_mmat=this._matrix4;
			}
			if (this._canvasTemplate){
				this._canvasTemplate.render(context,x,y);
			}
		}

		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			if ((this._particleTemplate instanceof laya.particle.ParticleTemplate2D ))
				(this._particleTemplate).dispose();
			_super.prototype.destroy.call(this,destroyChild);
		}

		/**
		*设置 粒子文件地址
		*@param path 粒子文件地址
		*/
		__getset(0,__proto,'url',null,function(url){
			this.load(url);
		});

		/**
		*获取粒子发射器
		*/
		__getset(0,__proto,'emitter',function(){
			return this._emitter;
		});

		return Particle2D;
	})(Sprite)


	/**
	*@private
	*/
	//class laya.particle.shader.ParticleShader extends laya.webgl.shader.Shader
	var ParticleShader=(function(_super){
		function ParticleShader(){
			ParticleShader.__super.call(this,ParticleShader.vs,ParticleShader.ps,"ParticleShader");
		}

		__class(ParticleShader,'laya.particle.shader.ParticleShader',_super);
		__static(ParticleShader,
		['vs',function(){return this.vs="attribute vec4 a_CornerTextureCoordinate;\nattribute vec3 a_Position;\nattribute vec3 a_Velocity;\nattribute vec4 a_StartColor;\nattribute vec4 a_EndColor;\nattribute vec3 a_SizeRotation;\nattribute vec2 a_Radius;\nattribute vec4 a_Radian;\nattribute float a_AgeAddScale;\nattribute float a_Time;\n\nvarying vec4 v_Color;\nvarying vec2 v_TextureCoordinate;\n\nuniform float u_CurrentTime;\nuniform float u_Duration;\nuniform float u_EndVelocity;\nuniform vec3 u_Gravity;\n\n#ifdef PARTICLE3D\n uniform mat4 u_WorldMat;\n uniform mat4 u_View;\n uniform mat4 u_Projection;\n uniform vec2 u_ViewportScale;\n#else\n uniform vec2 size;\n uniform mat4 mmat;\n uniform mat4 u_mmat;\n#endif\n\nvec4 ComputeParticlePosition(in vec3 position, in vec3 velocity,in float age,in float normalizedAge)\n{\n\n   float startVelocity = length(velocity);//起始标量速度\n   float endVelocity = startVelocity * u_EndVelocity;//结束标量速度\n\n   float velocityIntegral = startVelocity * normalizedAge +(endVelocity - startVelocity) * normalizedAge *normalizedAge/2.0;//计算当前速度的标量（单位空间），vt=v0*t+(1/2)*a*(t^2)\n   \n   vec3 addPosition = normalize(velocity) * velocityIntegral * u_Duration;//计算受自身速度影响的位置，转换标量到矢量    \n   addPosition += u_Gravity * age * normalizedAge;//计算受重力影响的位置\n   \n   float radius=mix(a_Radius.x, a_Radius.y, normalizedAge); //计算粒子受半径和角度影响（无需计算角度和半径时，可用宏定义优化屏蔽此计算）\n   float radianHorizontal =mix(a_Radian.x,a_Radian.z,normalizedAge);\n   float radianVertical =mix(a_Radian.y,a_Radian.w,normalizedAge);\n   \n   float r =cos(radianVertical)* radius;\n   addPosition.y += sin(radianVertical) * radius;\n	\n   addPosition.x += cos(radianHorizontal) *r;\n   addPosition.z += sin(radianHorizontal) *r;\n  \n   #ifdef PARTICLE3D\n   position+=addPosition;\n    return  u_Projection*u_View*u_WorldMat*(vec4(position, 1.0));\n   #else\n   addPosition.y=-addPosition.y;//2D粒子位置更新需要取负，2D粒子坐标系Y轴正向朝上\n   position+=addPosition;\n    return  vec4(position,1.0);\n   #endif\n}\n\nfloat ComputeParticleSize(in float startSize,in float endSize, in float normalizedAge)\n{    \n    float size = mix(startSize, endSize, normalizedAge);\n    \n	#ifdef PARTICLE3D\n    //Project the size into screen coordinates.\n     return size * u_Projection[1][1];\n	#else\n	 return size;\n	#endif\n}\n\nmat2 ComputeParticleRotation(in float rot,in float age)\n{    \n    float rotation =rot * age;\n    //计算2x2旋转矩阵.\n    float c = cos(rotation);\n    float s = sin(rotation);\n    return mat2(c, -s, s, c);\n}\n\nvec4 ComputeParticleColor(in vec4 startColor,in vec4 endColor,in float normalizedAge)\n{\n	vec4 color=mix(startColor,endColor,normalizedAge);\n    //硬编码设置，使粒子淡入很快，淡出很慢,6.7的缩放因子把置归一在0到1之间，可以谷歌x*(1-x)*(1-x)*6.7的制图表\n    color.a *= normalizedAge * (1.0-normalizedAge) * (1.0-normalizedAge) * 6.7;\n   \n    return color;\n}\n\nvoid main()\n{\n   float age = u_CurrentTime - a_Time;\n   age *= 1.0 + a_AgeAddScale;\n   float normalizedAge = clamp(age / u_Duration,0.0,1.0);\n   gl_Position = ComputeParticlePosition(a_Position, a_Velocity, age, normalizedAge);//计算粒子位置\n   float pSize = ComputeParticleSize(a_SizeRotation.x,a_SizeRotation.y, normalizedAge);\n   mat2 rotation = ComputeParticleRotation(a_SizeRotation.z, age);\n	\n   #ifdef PARTICLE3D\n	gl_Position.xy += (rotation*a_CornerTextureCoordinate.xy) * pSize * u_ViewportScale;\n   #else\n    mat4 mat=u_mmat*mmat;\n    gl_Position=vec4((mat*gl_Position).xy,0.0,1.0);\n	gl_Position.xy += (rotation*a_CornerTextureCoordinate.xy) * pSize*vec2(mat[0][0],mat[1][1]);\n    gl_Position=vec4((gl_Position.x/size.x-0.5)*2.0,(0.5-gl_Position.y/size.y)*2.0,0.0,1.0);\n   #endif\n   \n   v_Color = ComputeParticleColor(a_StartColor,a_EndColor, normalizedAge);\n   v_TextureCoordinate =a_CornerTextureCoordinate.zw;\n}\n\n"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/particle/src/laya/particle/shader/files/Particle.vs*/;},'ps',function(){return this.ps="#ifdef FSHIGHPRECISION\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nvarying vec4 v_Color;\nvarying vec2 v_TextureCoordinate;\nuniform sampler2D u_texture;\n\nvoid main()\n{	\n	gl_FragColor=texture2D(u_texture,v_TextureCoordinate)*v_Color;\n	gl_FragColor.xyz *= v_Color.w;\n}"/*__INCLUDESTR__D:/gittest/publishtools/publibs/libs/particle/src/laya/particle/shader/files/Particle.ps*/;}
		]);
		return ParticleShader;
	})(Shader)



})(window,document,Laya);


(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

	var Browser=laya.utils.Browser,HTMLCanvas=laya.resource.HTMLCanvas,Handler=laya.utils.Handler,Loader=laya.net.Loader;
	var Point=laya.maths.Point,Rectangle=laya.maths.Rectangle,Render=laya.renders.Render,RenderContext=laya.renders.RenderContext;
	var Sprite=laya.display.Sprite,Texture=laya.resource.Texture;
	/**
	*tiledMap是整个地图的核心
	*地图以层级来划分地图（例如：地表层，植被层，建筑层）
	*每层又以分块（GridSprite)来处理显示对象，只显示在视口区域的区
	*每块又包括N*N个格子（tile)
	*格子类型又分为动画格子跟图片格子两种
	*@author ...
	*/
	//class laya.map.TiledMap
	var TiledMap=(function(){
		var GRect,TileMapAniData,TileSet;
		function TiledMap(){
			this._jsonData=null;
			this._tileTexSetArr=[];
			this._texArray=[];
			this._x=0;
			this._y=0;
			this._width=0;
			this._height=0;
			this._mapW=0;
			this._mapH=0;
			this._mapTileW=0;
			this._mapTileH=0;
			this._mapSprite=null;
			this._layerArray=[];
			this._renderLayerArray=[];
			this._gridArray=[];
			this._showGridKey=false;
			this._totalGridNum=0;
			this._gridW=0;
			this._gridH=0;
			this._gridWidth=450;
			this._gridHeight=450;
			this._jsonLoader=null;
			this._loader=null;
			this._tileSetArray=[];
			this._currTileSet=null;
			this._completeHandler=null;
			this._index=0;
			this._animationDic={};
			this._properties=null;
			this._tileProperties={};
			this._tileProperties2={};
			this._orientation="orthogonal";
			this._renderOrder="right-down";
			this._colorArray=["FF","00","33","66"];
			this._scale=1;
			this._pivotScaleX=0.5;
			this._pivotScaleY=0.5;
			this._centerX=0;
			this._centerY=0;
			this._viewPortX=0;
			this._viewPortY=0;
			this._viewPortWidth=0;
			this._viewPortHeight=0;
			this._enableLinear=true;
			this._resPath=null;
			this._pathArray=null;
			this._limitRange=false;
			this._fastDirty=true;
			this.autoCache=true;
			this.autoCacheType="normal";
			this.enableMergeLayer=false;
			this.removeCoveredTile=false;
			this.showGridTextureCount=false;
			this.antiCrack=true;
			this.cacheAllAfterInit=false;
			this._rect=new Rectangle();
			this._paddingRect=new Rectangle();
			this._mapRect=new GRect();
			this._mapLogicRect=new GRect();
			this._mapLastRect=new GRect();
			this._mapSprite=new Sprite();
		}

		__class(TiledMap,'laya.map.TiledMap');
		var __proto=TiledMap.prototype;
		/**
		*创建地图
		*@param mapName JSON文件名字
		*@param viewRect 视口区域
		*@param completeHandler 地图创建完成的回调函数
		*@param viewRectPadding 视口扩充区域，把视口区域上、下、左、右扩充一下，防止视口移动时的穿帮
		*@param gridSize grid大小
		*@param enableLinear 是否开启线性取样（为false时，可以解决地图黑线的问题，但画质会锐化）
		*@param limitRange 把地图限制在显示区域
		*/
		__proto.createMap=function(mapName,viewRect,completeHandler,viewRectPadding,gridSize,enableLinear,limitRange){
			(enableLinear===void 0)&& (enableLinear=true);
			(limitRange===void 0)&& (limitRange=false);
			this._enableLinear=enableLinear;
			this._limitRange=limitRange;
			this._rect.x=viewRect.x;
			this._rect.y=viewRect.y;
			this._rect.width=viewRect.width;
			this._rect.height=viewRect.height;
			this._viewPortWidth=viewRect.width / this._scale;
			this._viewPortHeight=viewRect.height / this._scale;
			this._completeHandler=completeHandler;
			if (viewRectPadding){
				this._paddingRect.copyFrom(viewRectPadding);
			}
			else {
				this._paddingRect.setTo(0,0,0,0);
			}
			if (gridSize){
				this._gridWidth=gridSize.x;
				this._gridHeight=gridSize.y;
			};
			var tIndex=mapName.lastIndexOf("/");
			if (tIndex >-1){
				this._resPath=mapName.substr(0,tIndex);
				this._pathArray=this._resPath.split("/");
			}
			else {
				this._resPath="";
				this._pathArray=[];
			}
			this._jsonLoader=new Loader();
			this._jsonLoader.once("complete",this,this.onJsonComplete);
			this._jsonLoader.load(mapName,/*laya.net.Loader.JSON*/"json",false);
		}

		/**
		*json文件读取成功后，解析里面的纹理数据，进行加载
		*@param e JSON数据
		*/
		__proto.onJsonComplete=function(e){
			var tJsonData=this._jsonData=e;
			this._properties=tJsonData.properties;
			this._orientation=tJsonData.orientation;
			this._renderOrder=tJsonData.renderorder;
			this._mapW=tJsonData.width;
			this._mapH=tJsonData.height;
			this._mapTileW=tJsonData.tilewidth;
			this._mapTileH=tJsonData.tileheight;
			this._width=this._mapTileW *this._mapW;
			this._height=this._mapTileH *this._mapH;
			if (this._orientation=="staggered"){
				this._height=(0.5+this._mapH *0.5)*this._mapTileH;
			}
			this._mapLastRect.top=this._mapLastRect.bottom=this._mapLastRect.left=this._mapLastRect.right=-1;
			var tArray=tJsonData.tilesets;
			var tileset;
			var tTileSet;
			var i=0;
			for (i=0;i < tArray.length;i++){
				tileset=tArray[i];
				tTileSet=new TileSet();
				tTileSet.init(tileset);
				if (tTileSet.properties && tTileSet.properties.ignore)continue ;
				this._tileProperties[i]=tTileSet.tileproperties;
				this.addTileProperties(tTileSet.tileproperties);
				this._tileSetArray.push(tTileSet);
				var tTiles=tileset.tiles;
				if (tTiles){
					for (var p in tTiles){
						var tAnimation=tTiles[p].animation;
						if (tAnimation){
							var tAniData=new TileMapAniData();
							this._animationDic[p]=tAniData;
							for (var j=0;j < tAnimation.length;j++){
								var tAnimationItem=tAnimation[j];
								tAniData.mAniIdArray.push(tAnimationItem.tileid);
								tAniData.mDurationTimeArray.push(tAnimationItem.duration);
							}
						}
					}
				}
			}
			this._tileTexSetArr.push(null);
			if (this._tileSetArray.length > 0){
				tTileSet=this._currTileSet=this._tileSetArray.shift();
				this._loader=new Loader();
				this._loader.once("complete",this,this.onTextureComplete);
				var tPath=this.mergePath(this._resPath,tTileSet.image);
				this._loader.load(tPath,/*laya.net.Loader.IMAGE*/"image",false);
			}
		}

		/**
		*合并路径
		*@param resPath
		*@param relativePath
		*@return
		*/
		__proto.mergePath=function(resPath,relativePath){
			var tResultPath="";
			var tImageArray=relativePath.split("/");
			var tParentPathNum=0;
			var i=0;
			for (i=tImageArray.length-1;i >=0;i--){
				if (tImageArray[i]==".."){
					tParentPathNum++;
				}
			}
			if (tParentPathNum==0){
				if (this._pathArray.length > 0){
					tResultPath=resPath+"/"+relativePath;
				}
				else {
					tResultPath=relativePath;
				}
				return tResultPath;
			};
			var tSrcNum=this._pathArray.length-tParentPathNum;
			if (tSrcNum < 0){
				console.log("[error]path does not exist",this._pathArray,tImageArray,resPath,relativePath);
			}
			for (i=0;i < tSrcNum;i++){
				if (i==0){
					tResultPath+=this._pathArray[i];
				}
				else {
					tResultPath=tResultPath+"/"+this._pathArray[i];
				}
			}
			for (i=tParentPathNum;i < tImageArray.length;i++){
				tResultPath=tResultPath+"/"+tImageArray[i];
			}
			return tResultPath;
		}

		/**
		*纹理加载完成，如果所有的纹理加载，开始初始化地图
		*@param e 纹理数据
		*/
		__proto.onTextureComplete=function(e){
			var json=this._jsonData;
			var tTexture=e;
			if (Render.isWebGL && (!this._enableLinear)){
				tTexture.bitmap.minFifter=0x2600;
				tTexture.bitmap.magFifter=0x2600;
				tTexture.bitmap.enableMerageInAtlas=false;
			}
			this._texArray.push(tTexture);
			var tSubTexture=null;
			var tTileSet=this._currTileSet;
			var tTileTextureW=tTileSet.tilewidth;
			var tTileTextureH=tTileSet.tileheight;
			var tImageWidth=tTileSet.imagewidth;
			var tImageHeight=tTileSet.imageheight;
			var tFirstgid=tTileSet.firstgid;
			var tTileWNum=Math.floor((tImageWidth-tTileSet.margin-tTileTextureW)/ (tTileTextureW+tTileSet.spacing))+1;
			var tTileHNum=Math.floor((tImageHeight-tTileSet.margin-tTileTextureH)/ (tTileTextureH+tTileSet.spacing))+1;
			var tTileTexSet=null;
			for (var i=0;i < tTileHNum;i++){
				for (var j=0;j < tTileWNum;j++){
					tTileTexSet=new TileTexSet();
					tTileTexSet.offX=tTileSet.titleoffsetX;
					tTileTexSet.offY=tTileSet.titleoffsetY-(tTileTextureH-this._mapTileH);
					tTileTexSet.texture=Texture.createFromTexture(tTexture,tTileSet.margin+(tTileTextureW+tTileSet.spacing)*j,tTileSet.margin+(tTileTextureH+tTileSet.spacing)*i,tTileTextureW,tTileTextureH);
					if(this.antiCrack)
						this.adptTexture(tTileTexSet.texture);
					this._tileTexSetArr.push(tTileTexSet);
					tTileTexSet.gid=this._tileTexSetArr.length;
				}
			}
			if (this._tileSetArray.length > 0){
				tTileSet=this._currTileSet=this._tileSetArray.shift();
				this._loader.once("complete",this,this.onTextureComplete);
				var tPath=this.mergePath(this._resPath,tTileSet.image);
				this._loader.load(tPath,/*laya.net.Loader.IMAGE*/"image",false);
			}
			else {
				this._currTileSet=null;
				this.initMap();
			}
		}

		__proto.adptTexture=function(tex){
			if (!tex)return;
			var pX=tex.uv[0];
			var pX1=tex.uv[2];
			var pY=tex.uv[1];
			var pY1=tex.uv[7];
			var dW=1 / tex.bitmap.width;
			var dH=1 / tex.bitmap.height;
			tex.uv[0]=tex.uv[6]=pX+dW;
			tex.uv[2]=tex.uv[4]=pX1-dW;
			tex.uv[1]=tex.uv[3]=pY+dH;
			tex.uv[5]=tex.uv[7]=pY1-dH;
		}

		/**
		*初始化地图
		*/
		__proto.initMap=function(){
			var i=0,n=0;
			for (var p in this._animationDic){
				var tTileTexSet=this.getTexture(parseInt(p)+1);
				var tAniData=this._animationDic[p];
				if (tAniData.mAniIdArray.length > 0){
					tTileTexSet.textureArray=[];
					tTileTexSet.durationTimeArray=tAniData.mDurationTimeArray;
					tTileTexSet.isAnimation=true;
					tTileTexSet.animationTotalTime=0;
					for (i=0,n=tTileTexSet.durationTimeArray.length;i < n;i++){
						tTileTexSet.animationTotalTime+=tTileTexSet.durationTimeArray[i];
					}
					for (i=0,n=tAniData.mAniIdArray.length;i < n;i++){
						var tTexture=this.getTexture(tAniData.mAniIdArray[i]+1);
						tTileTexSet.textureArray.push(tTexture);
					}
				}
			}
			this._gridWidth=Math.floor(this._gridWidth / this._mapTileW)*this._mapTileW;
			this._gridHeight=Math.floor(this._gridHeight / this._mapTileH)*this._mapTileH;
			if (this._gridWidth < this._mapTileW){
				this._gridWidth=this._mapTileW;
			}
			if (this._gridHeight < this._mapTileH){
				this._gridHeight=this._mapTileH;
			}
			this._gridW=Math.ceil(this._width / this._gridWidth);
			this._gridH=Math.ceil(this._height / this._gridHeight);
			this._totalGridNum=this._gridW *this._gridH;
			for (i=0;i < this._gridH;i++){
				var tGridArray=[];
				this._gridArray.push(tGridArray);
				for (var j=0;j < this._gridW;j++){
					tGridArray.push(null);
				}
			};
			var tLayerArray=this._jsonData.layers;
			var isFirst=true;
			var tTarLayerID=1;
			var tLayerTarLayerName;
			var preLayerTarName;
			var preLayer;
			for (var tLayerLoop=0;tLayerLoop < tLayerArray.length;tLayerLoop++){
				var tLayerData=tLayerArray[tLayerLoop];
				if (tLayerData.visible==true){
					var tMapLayer=new MapLayer();
					tMapLayer.init(tLayerData,this);
					if (!this.enableMergeLayer){
						this._mapSprite.addChild(tMapLayer);
						this._renderLayerArray.push(tMapLayer);
						}else{
						tLayerTarLayerName=tMapLayer.getLayerProperties("layer");
						isFirst=isFirst || (!preLayer)|| (tLayerTarLayerName !=preLayerTarName);
						if (isFirst){
							isFirst=false;
							tMapLayer.tarLayer=tMapLayer;
							preLayer=tMapLayer;
							this._mapSprite.addChild(tMapLayer);
							this._renderLayerArray.push(tMapLayer);
							}else{
							tMapLayer.tarLayer=preLayer;
						}
						preLayerTarName=tLayerTarLayerName;
					}
					this._layerArray.push(tMapLayer);
				}
			}
			if (this.removeCoveredTile){
				this.adptTiledMapData();
			}
			if (this.cacheAllAfterInit){
				this.cacheAllGrid();
			}
			this.moveViewPort(this._rect.x,this._rect.y);
			Laya.stage.addChild(this.mapSprite());
			if (this._completeHandler !=null){
				this._completeHandler.run();
			}
		}

		//这里应该发送消息，通知上层，地图创建完成
		__proto.addTileProperties=function(tileDataDic){
			var key;
			for (key in tileDataDic){
				this._tileProperties2[key]=tileDataDic[key];
			}
		}

		__proto.getTileUserData=function(id,sign,defaultV){
			if (!this._tileProperties2 || !this._tileProperties2[id] || !(sign in this._tileProperties2[id]))return defaultV;
			return this._tileProperties2[id][sign];
		}

		__proto.adptTiledMapData=function(){
			var i=0,len=0;
			len=this._layerArray.length;
			var tLayer;
			var noNeeds={};
			var tDatas;
			for (i=len-1;i >=0;i--){
				tLayer=this._layerArray[i];
				tDatas=tLayer._mapData;
				if (!tDatas)continue ;
				this.removeCoverd(tDatas,noNeeds);
				this.collectCovers(tDatas,noNeeds,i);
			}
		}

		__proto.removeCoverd=function(datas,noNeeds){
			var i=0,len=0;
			len=datas.length;
			for (i=0;i < len;i++){
				if (noNeeds[i]){
					datas[i]=0;
				}
			}
		}

		__proto.collectCovers=function(datas,noNeeds,layer){
			var i=0,len=0;
			len=datas.length;
			var tTileData=0;
			var isCover=0;
			for (i=0;i < len;i++){
				tTileData=datas[i];
				if (tTileData > 0){
					isCover=this.getTileUserData(tTileData-1,"type",0);
					if (isCover > 0){
						noNeeds[i]=tTileData;
					}
				}
			}
		}

		/**
		*得到一块指定的地图纹理
		*@param index 纹理的索引值，默认从1开始
		*@return
		*/
		__proto.getTexture=function(index){
			if (index < this._tileTexSetArr.length){
				return this._tileTexSetArr[index];
			}
			return null;
		}

		/**
		*得到地图的自定义属性
		*@param name 属性名称
		*@return
		*/
		__proto.getMapProperties=function(name){
			if (this._properties){
				return this._properties[name];
			}
			return null;
		}

		/**
		*得到tile自定义属性
		*@param index 地图块索引
		*@param id 具体的TileSetID
		*@param name 属性名称
		*@return
		*/
		__proto.getTileProperties=function(index,id,name){
			if (this._tileProperties[index] && this._tileProperties[index][id]){
				return this._tileProperties[index][id][name];
			}
			return null;
		}

		/**
		*通过纹理索引，生成一个可控制物件
		*@param index 纹理的索引值，默认从1开始
		*@return
		*/
		__proto.getSprite=function(index,width,height){
			if (0 < this._tileTexSetArr.length){
				var tGridSprite=new GridSprite();
				tGridSprite.initData(this,true);
				tGridSprite.size(width,height);
				var tTileTexSet=this._tileTexSetArr[index];
				if (tTileTexSet !=null && tTileTexSet.texture !=null){
					if (tTileTexSet.isAnimation){
						var tAnimationSprite=new TileAniSprite();
						this._index++;
						tAnimationSprite.setTileTextureSet(this._index.toString(),tTileTexSet);
						tGridSprite.addAniSprite(tAnimationSprite);
						tGridSprite.addChild(tAnimationSprite);
					}
					else {
						tGridSprite.graphics.drawTexture(tTileTexSet.texture,0,0,width,height);
					}
					tGridSprite.drawImageNum++;
				}
				return tGridSprite;
			}
			return null;
		}

		/**
		*设置视口的缩放中心点（例如：scaleX=scaleY=0.5,就是以视口中心缩放）
		*@param scaleX
		*@param scaleY
		*/
		__proto.setViewPortPivotByScale=function(scaleX,scaleY){
			this._pivotScaleX=scaleX;
			this._pivotScaleY=scaleY;
			this._fastDirty=true;
		}

		/**
		*移动视口
		*@param moveX 视口的坐标x
		*@param moveY 视口的坐标y
		*/
		__proto.moveViewPort=function(moveX,moveY){
			this._x=-moveX;
			this._y=-moveY;
			if (this._fastDirty){
				this._rect.x=moveX;
				this._rect.y=moveY;
				this.updateViewPort();
				}else{
				var dx=NaN,dy=NaN;
				dx=moveX-this._rect.x;
				dy=moveY-this._rect.y;
				this._rect.x=moveX;
				this._rect.y=moveY;
				this.updateViewPortFast(dx,dy);
			}
		}

		/**
		*改变视口大小
		*@param moveX 视口的坐标x
		*@param moveY 视口的坐标y
		*@param width 视口的宽
		*@param height 视口的高
		*/
		__proto.changeViewPort=function(moveX,moveY,width,height){
			if (moveX==this._rect.x && moveY==this._rect.y && width==this._rect.width && height==this._rect.height)return;
			if (width==this._rect.width && height==this._rect.height){
				this.moveViewPort(moveX,moveY);
				return;
			}
			this._fastDirty=true;
			this._x=-moveX;
			this._y=-moveY;
			this._rect.x=moveX;
			this._rect.y=moveY;
			this._rect.width=width;
			this._rect.height=height;
			this._viewPortWidth=width / this._scale;
			this._viewPortHeight=height / this._scale;
			this.updateViewPort();
		}

		/**
		*在锚点的基础上计算，通过宽和高，重新计算视口
		*@param width 新视口宽
		*@param height 新视口高
		*@param rect 返回的结果
		*@return
		*/
		__proto.changeViewPortBySize=function(width,height,rect){
			if (rect==null){
				rect=new Rectangle();
			}
			this._centerX=this._rect.x+this._rect.width *this._pivotScaleX;
			this._centerY=this._rect.y+this._rect.height *this._pivotScaleY;
			rect.x=this._centerX-width *this._pivotScaleX;
			rect.y=this._centerY-height *this._pivotScaleY;
			rect.width=width;
			rect.height=height;
			this.changeViewPort(rect.x,rect.y,rect.width,rect.height);
			return rect;
		}

		/**
		*快速更新视口 ,只有在视口大小和各种缩放信息没有改变时才可以使用这个函数更新
		*@param dx 视口偏移x
		*@param dy 视口偏移y
		*/
		__proto.updateViewPortFast=function(dx,dy){
			this._centerX+=dx;
			this._centerY+=dy;
			this._viewPortX+=dx;
			this._viewPortY+=dy;
			var posChanged=false;
			var dyG=dy / this._gridHeight;
			var dxG=dx / this._gridWidth;
			this._mapLogicRect.top+=dyG;
			this._mapLogicRect.bottom+=dyG;
			this._mapLogicRect.left+=dxG;
			this._mapLogicRect.right+=dxG;
			this._mapRect.top=0|this._mapLogicRect.top;
			this._mapRect.bottom=0|this._mapLogicRect.bottom;
			this._mapRect.left=0|this._mapLogicRect.left;
			this._mapRect.right=0|this._mapLogicRect.right;
			if (this._mapRect.top !=this._mapLastRect.top || this._mapRect.bottom !=this._mapLastRect.bottom || this._mapRect.left !=this._mapLastRect.left || this._mapRect.right !=this._mapLastRect.right){
				this.clipViewPort();
				this._mapLastRect.top=this._mapRect.top;
				this._mapLastRect.bottom=this._mapRect.bottom;
				this._mapLastRect.left=this._mapRect.left;
				this._mapLastRect.right=this._mapRect.right;
				posChanged=true;
			};posChanged=posChanged|| (dx !=0 || dy !=0);
			if (!posChanged)return;
			this.updateMapLayersPos();
		}

		/**
		*刷新地图层坐标
		*/
		__proto.updateMapLayersPos=function(){
			var tMapLayer;
			var len=this._renderLayerArray.length;
			for (var i=0;i < len;i++){
				tMapLayer=this._renderLayerArray[i];
				if (tMapLayer._gridSpriteArray.length > 0){
					tMapLayer.updateAloneObject();
					tMapLayer.pos(-this._viewPortX,-this._viewPortY);
				}
			}
		}

		/**
		*刷新视口
		*/
		__proto.updateViewPort=function(){
			this._fastDirty=false;
			var dw=this._rect.width *this._pivotScaleX;
			var dh=this._rect.height *this._pivotScaleY;
			this._centerX=this._rect.x+dw;
			this._centerY=this._rect.y+dh;
			var posChanged=false;
			var preValue=this._viewPortX;
			this._viewPortX=this._centerX-dw / this._scale;
			if (preValue !=this._viewPortX){
				posChanged=true;
				}else {
				preValue=this._viewPortY;
			}
			this._viewPortY=this._centerY-dh/ this._scale;
			if (!posChanged && preValue !=this._viewPortY){
				posChanged=true;
			}
			if (this._limitRange){
				var tRight=this._viewPortX+this._viewPortWidth;
				if (tRight > this._width){
					this._viewPortX=this._width-this._viewPortWidth;
				};
				var tBottom=this._viewPortY+this._viewPortHeight;
				if (tBottom > this._height){
					this._viewPortY=this._height-this._viewPortHeight;
				}
				if (this._viewPortX < 0){
					this._viewPortX=0;
				}
				if (this._viewPortY < 0){
					this._viewPortY=0;
				}
			};
			var tPaddingRect=this._paddingRect;
			this._mapLogicRect.top=(this._viewPortY-tPaddingRect.y)/ this._gridHeight;
			this._mapLogicRect.bottom=(this._viewPortY+this._viewPortHeight+tPaddingRect.height+tPaddingRect.y)/ this._gridHeight;
			this._mapLogicRect.left=(this._viewPortX-tPaddingRect.x)/ this._gridWidth;
			this._mapLogicRect.right=(this._viewPortX+this._viewPortWidth+tPaddingRect.width+tPaddingRect.x)/ this._gridWidth;
			this._mapRect.top=0|this._mapLogicRect.top;
			this._mapRect.bottom=0|this._mapLogicRect.bottom;
			this._mapRect.left=0|this._mapLogicRect.left;
			this._mapRect.right=0|this._mapLogicRect.right;
			if (this._mapRect.top !=this._mapLastRect.top || this._mapRect.bottom !=this._mapLastRect.bottom || this._mapRect.left !=this._mapLastRect.left || this._mapRect.right !=this._mapLastRect.right){
				this.clipViewPort();
				this._mapLastRect.top=this._mapRect.top;
				this._mapLastRect.bottom=this._mapRect.bottom;
				this._mapLastRect.left=this._mapRect.left;
				this._mapLastRect.right=this._mapRect.right;
				posChanged=true;
			}
			if (!posChanged)return;
			this.updateMapLayersPos();
		}

		/**
		*GRID裁剪
		*/
		__proto.clipViewPort=function(){
			var tSpriteNum=0;
			var tSprite;
			var tIndex=0;
			var tSub=0;
			var tAdd=0;
			var i=0,j=0;
			if (this._mapRect.left > this._mapLastRect.left){
				tSub=this._mapRect.left-this._mapLastRect.left;
				if (tSub > 0){
					for (j=this._mapLastRect.left;j < this._mapLastRect.left+tSub;j++){
						for (i=this._mapLastRect.top;i <=this._mapLastRect.bottom;i++){
							this.hideGrid(j,i);
						}
					}
				}
			}
			else {
				tAdd=Math.min(this._mapLastRect.left,this._mapRect.right+1)-this._mapRect.left;
				if (tAdd > 0){
					for (j=this._mapRect.left;j < this._mapRect.left+tAdd;j++){
						for (i=this._mapRect.top;i <=this._mapRect.bottom;i++){
							this.showGrid(j,i);
						}
					}
				}
			}
			if (this._mapRect.right > this._mapLastRect.right){
				tAdd=this._mapRect.right-this._mapLastRect.right;
				if (tAdd > 0){
					for (j=Math.max(this._mapLastRect.right+1,this._mapRect.left);j <=this._mapLastRect.right+tAdd;j++){
						for (i=this._mapRect.top;i <=this._mapRect.bottom;i++){
							this.showGrid(j,i);
						}
					}
				}
			}
			else {
				tSub=this._mapLastRect.right-this._mapRect.right
				if (tSub > 0){
					for (j=this._mapRect.right+1;j <=this._mapRect.right+tSub;j++){
						for (i=this._mapLastRect.top;i <=this._mapLastRect.bottom;i++){
							this.hideGrid(j,i);
						}
					}
				}
			}
			if (this._mapRect.top > this._mapLastRect.top){
				tSub=this._mapRect.top-this._mapLastRect.top;
				if (tSub > 0){
					for (i=this._mapLastRect.top;i < this._mapLastRect.top+tSub;i++){
						for (j=this._mapLastRect.left;j <=this._mapLastRect.right;j++){
							this.hideGrid(j,i);
						}
					}
				}
			}
			else {
				tAdd=Math.min(this._mapLastRect.top,this._mapRect.bottom+1)-this._mapRect.top;
				if (tAdd > 0){
					for (i=this._mapRect.top;i < this._mapRect.top+tAdd;i++){
						for (j=this._mapRect.left;j <=this._mapRect.right;j++){
							this.showGrid(j,i);
						}
					}
				}
			}
			if (this._mapRect.bottom > this._mapLastRect.bottom){
				tAdd=this._mapRect.bottom-this._mapLastRect.bottom;
				if (tAdd > 0){
					for (i=Math.max(this._mapLastRect.bottom+1,this._mapRect.top);i <=this._mapLastRect.bottom+tAdd;i++){
						for (j=this._mapRect.left;j <=this._mapRect.right;j++){
							this.showGrid(j,i);
						}
					}
				}
			}
			else {
				tSub=this._mapLastRect.bottom-this._mapRect.bottom
				if (tSub > 0){
					for (i=this._mapRect.bottom+1;i <=this._mapRect.bottom+tSub;i++){
						for (j=this._mapLastRect.left;j <=this._mapLastRect.right;j++){
							this.hideGrid(j,i);
						}
					}
				}
			}
		}

		/**
		*显示指定的GRID
		*@param gridX
		*@param gridY
		*/
		__proto.showGrid=function(gridX,gridY){
			if (gridX < 0 || gridX >=this._gridW || gridY < 0 || gridY >=this._gridH){
				return;
			};
			var i=0,j=0;
			var tGridSprite;
			var tTempArray=this._gridArray[gridY][gridX];
			if (tTempArray==null){
				tTempArray=this.getGridArray(gridX,gridY);
			}
			else {
				for (i=0;i < tTempArray.length && i < this._layerArray.length;i++){
					var tLayerSprite=this._layerArray[i];
					if (tLayerSprite && tTempArray[i]){
						tGridSprite=tTempArray[i];
						if (tGridSprite.visible==false && tGridSprite.drawImageNum > 0){
							tGridSprite.show();
						}
					}
				}
			}
		}

		__proto.cacheAllGrid=function(){
			var i=0,j=0;
			var tempArr;
			for (i=0;i < this._gridW;i++){
				for (j=0;j < this._gridH;j++){
					tempArr=this.getGridArray(i,j);
					this.cacheGridsArray(tempArr);
				}
			}
		}

		__proto.cacheGridsArray=function(arr){
			var canvas;
			if (!TiledMap._tempContext){
				TiledMap._tempContext=new RenderContext(1,1,HTMLCanvas.create(/*laya.resource.HTMLCanvas.TYPEAUTO*/"AUTO"));
			}
			canvas=TiledMap._tempContext.canvas;
			canvas.context.asBitmap=false;
			var i=0,len=0;
			len=arr.length;
			var tGrid;
			for (i=0;i < len;i++){
				tGrid=arr[i];
				canvas.clear();
				canvas.size(1,1);
				tGrid.render(TiledMap._tempContext,0,0);
				tGrid.hide();
			}
			canvas.clear();
			canvas.size(1,1);
		}

		__proto.getGridArray=function(gridX,gridY){
			var i=0,j=0;
			var tGridSprite;
			var tTempArray=this._gridArray[gridY][gridX];
			if (tTempArray==null){
				tTempArray=this._gridArray[gridY][gridX]=[];
				var tLeft=0;
				var tRight=0;
				var tTop=0;
				var tBottom=0;
				var tGridWidth=this._gridWidth;
				var tGridHeight=this._gridHeight;
				switch (this.orientation){
					case /*CLASS CONST:laya.map.TiledMap.ORIENTATION_ISOMETRIC*/"isometric":
						tLeft=Math.floor(gridX *tGridWidth);
						tRight=Math.floor(gridX *tGridWidth+tGridWidth);
						tTop=Math.floor(gridY *tGridHeight);
						tBottom=Math.floor(gridY *tGridHeight+tGridHeight);
						var tLeft1=0,tRight1=0,tTop1=0,tBottom1=0;
						break ;
					case /*CLASS CONST:laya.map.TiledMap.ORIENTATION_STAGGERED*/"staggered":
						tLeft=Math.floor(gridX *tGridWidth / this._mapTileW);
						tRight=Math.floor((gridX *tGridWidth+tGridWidth)/ this._mapTileW);
						tTop=Math.floor(gridY *tGridHeight / (this._mapTileH / 2));
						tBottom=Math.floor((gridY *tGridHeight+tGridHeight)/ (this._mapTileH / 2));
						break ;
					case /*CLASS CONST:laya.map.TiledMap.ORIENTATION_ORTHOGONAL*/"orthogonal":
						tLeft=Math.floor(gridX *tGridWidth / this._mapTileW);
						tRight=Math.floor((gridX *tGridWidth+tGridWidth)/ this._mapTileW);
						tTop=Math.floor(gridY *tGridHeight / this._mapTileH);
						tBottom=Math.floor((gridY *tGridHeight+tGridHeight)/ this._mapTileH);
						break ;
					case /*CLASS CONST:laya.map.TiledMap.ORIENTATION_HEXAGONAL*/"hexagonal":;
						var tHeight=this._mapTileH *2 / 3;
						tLeft=Math.floor(gridX *tGridWidth / this._mapTileW);
						tRight=Math.ceil((gridX *tGridWidth+tGridWidth)/ this._mapTileW);
						tTop=Math.floor(gridY *tGridHeight / tHeight);
						tBottom=Math.ceil((gridY *tGridHeight+tGridHeight)/ tHeight);
						break ;
					};
				var tLayer=null;
				var tTGridSprite;
				var tDrawMapLayer;
				for (var z=0;z < this._layerArray.length;z++){
					tLayer=this._layerArray[z];
					if (this.enableMergeLayer){
						if (tLayer.tarLayer !=tDrawMapLayer){
							tTGridSprite=null;
							tDrawMapLayer=tLayer.tarLayer;
						}
						if (!tTGridSprite){
							tTGridSprite=tDrawMapLayer.getDrawSprite(gridX,gridY);
							tTempArray.push(tTGridSprite);
						}
						tGridSprite=tTGridSprite;
					}
					else {
						tGridSprite=tLayer.getDrawSprite(gridX,gridY);
						tTempArray.push(tGridSprite);
					};
					var tColorStr;
					if (this._showGridKey){
						tColorStr="#";
						tColorStr+=this._colorArray[Math.floor(Math.random()*this._colorArray.length)];
						tColorStr+=this._colorArray[Math.floor(Math.random()*this._colorArray.length)];
						tColorStr+=this._colorArray[Math.floor(Math.random()*this._colorArray.length)];
					}
					switch (this.orientation){
						case /*CLASS CONST:laya.map.TiledMap.ORIENTATION_ISOMETRIC*/"isometric":;
							var tHalfTileHeight=this.tileHeight / 2;
							var tHalfTileWidth=this.tileWidth / 2;
							var tHalfMapWidth=this._width / 2;
							tTop1=Math.floor(tTop / tHalfTileHeight);
							tBottom1=Math.floor(tBottom / tHalfTileHeight);
							tLeft1=this._mapW+Math.floor((tLeft-tHalfMapWidth)/ tHalfTileWidth);
							tRight1=this._mapW+Math.floor((tRight-tHalfMapWidth)/ tHalfTileWidth);
							var tMapW=this._mapW *2;
							var tMapH=this._mapH *2;
							if (tTop1 < 0){
								tTop1=0;
							}
							if (tTop1 >=tMapH){
								tTop1=tMapH-1;
							}
							if (tBottom1 < 0){
								tBottom=0;
							}
							if (tBottom1 >=tMapH){
								tBottom1=tMapH-1;
							}
							tGridSprite.zOrder=this._totalGridNum *z+gridY *this._gridW+gridX;
							for (i=tTop1;i < tBottom1;i++){
								for (j=0;j <=i;j++){
									var tIndexX=i-j;
									var tIndexY=j;
									var tIndexValue=(tIndexX-tIndexY)+this._mapW;
									if (tIndexValue > tLeft1 && tIndexValue <=tRight1){
										if (tLayer.drawTileTexture(tGridSprite,tIndexX,tIndexY)){
											tGridSprite.drawImageNum++;
										}
									}
								}
							}
							break ;
						case /*CLASS CONST:laya.map.TiledMap.ORIENTATION_STAGGERED*/"staggered":
							tGridSprite.zOrder=z *this._totalGridNum+gridY *this._gridW+gridX;
							for (i=tTop;i < tBottom;i++){
								for (j=tLeft;j < tRight;j++){
									if (tLayer.drawTileTexture(tGridSprite,j,i)){
										tGridSprite.drawImageNum++;
									}
								}
							}
							break ;
						case /*CLASS CONST:laya.map.TiledMap.ORIENTATION_ORTHOGONAL*/"orthogonal":
						case /*CLASS CONST:laya.map.TiledMap.ORIENTATION_HEXAGONAL*/"hexagonal":
						switch (this._renderOrder){
							case "right-down":
								tGridSprite.zOrder=z *this._totalGridNum+gridY *this._gridW+gridX;
								for (i=tTop;i < tBottom;i++){
									for (j=tLeft;j < tRight;j++){
										if (tLayer.drawTileTexture(tGridSprite,j,i)){
											tGridSprite.drawImageNum++;
										}
									}
								}
								break ;
							case "right-up":
								tGridSprite.zOrder=z *this._totalGridNum+(this._gridH-1-gridY)*this._gridW+gridX;
								for (i=tBottom-1;i >=tTop;i--){
									for (j=tLeft;j < tRight;j++){
										if (tLayer.drawTileTexture(tGridSprite,j,i)){
											tGridSprite.drawImageNum++;
										}
									}
								}
								break ;
							case "left-down":
								tGridSprite.zOrder=z *this._totalGridNum+gridY *this._gridW+(this._gridW-1-gridX);
								for (i=tTop;i < tBottom;i++){
									for (j=tRight-1;j >=tLeft;j--){
										if (tLayer.drawTileTexture(tGridSprite,j,i)){
											tGridSprite.drawImageNum++;
										}
									}
								}
								break ;
							case "left-up":
								tGridSprite.zOrder=z *this._totalGridNum+(this._gridH-1-gridY)*this._gridW+(this._gridW-1-gridX);
								for (i=tBottom-1;i >=tTop;i--){
									for (j=tRight-1;j >=tLeft;j--){
										if (tLayer.drawTileTexture(tGridSprite,j,i)){
											tGridSprite.drawImageNum++;
										}
									}
								}
								break ;
							}
						break ;
					}
					if (!tGridSprite.isHaveAnimation){
						tGridSprite.autoSize=true;
						if (this.autoCache)
							tGridSprite.cacheAs=this.autoCacheType;
						tGridSprite.autoSize=false;
					}
					if (!this.enableMergeLayer){
						if (tGridSprite.drawImageNum > 0){
							tLayer.addChild(tGridSprite);
							tGridSprite.visible=false;
							tGridSprite.show();
						}
						if (this._showGridKey){
							tGridSprite.graphics.drawRect(0,0,tGridWidth,tGridHeight,null,tColorStr);
						}
						}else{
						if (tTGridSprite && tTGridSprite.drawImageNum > 0&&tDrawMapLayer){
							tDrawMapLayer.addChild(tTGridSprite);
							tTGridSprite.visible=false;
							tTGridSprite.show();
						}
					}
				}
				if (this.enableMergeLayer&&this.showGridTextureCount){
					if (tTGridSprite){
						tTGridSprite.graphics.fillText(tTGridSprite.drawImageNum+"",20,20,null,"#ff0000","left");
					}
				}
			}
			return tTempArray;
		}

		/**
		*隐藏指定的GRID
		*@param gridX
		*@param gridY
		*/
		__proto.hideGrid=function(gridX,gridY){
			if (gridX < 0 || gridX >=this._gridW || gridY < 0 || gridY >=this._gridH){
				return;
			};
			var tTempArray=this._gridArray[gridY][gridX];
			if (tTempArray){
				var tGridSprite;
				for (var i=0;i < tTempArray.length;i++){
					tGridSprite=tTempArray[i];
					if (tGridSprite.drawImageNum > 0){
						if (tGridSprite !=null){
							tGridSprite.hide();
						}
					}
				}
			}
		}

		/**
		*得到对象层上的某一个物品
		*@param layerName 层的名称
		*@param objectName 所找物品的名称
		*@return
		*/
		__proto.getLayerObject=function(layerName,objectName){
			var tLayer=null;
			for (var i=0;i < this._layerArray.length;i++){
				tLayer=this._layerArray[i];
				if (tLayer.layerName==layerName){
					break ;
				}
			}
			if (tLayer){
				return tLayer.getObjectByName(objectName);
			}
			return null;
		}

		/**
		*销毁地图
		*/
		__proto.destroy=function(){
			this._orientation="orthogonal";
			this._jsonData=null;
			var i=0;
			var j=0;
			var z=0;
			this._gridArray=[];
			var tTileTexSet;
			for (i=0;i < this._tileTexSetArr.length;i++){
				tTileTexSet=this._tileTexSetArr[i];
				if (tTileTexSet){
					tTileTexSet.clearAll();
				}
			}
			this._tileTexSetArr=[];
			var tTexture;
			for (i=0;i < this._texArray.length;i++){
				tTexture=this._texArray[i];
				tTexture.destroy();
			}
			this._texArray=[];
			this._width=0;
			this._height=0;
			this._mapW=0;
			this._mapH=0;
			this._mapTileW=0;
			this._mapTileH=0;
			this._rect.setTo(0,0,0,0);
			var tLayer;
			for (i=0;i < this._layerArray.length;i++){
				tLayer=this._layerArray[i];
				tLayer.clearAll();
			}
			this._layerArray=[];
			this._renderLayerArray=[];
			if (this._mapSprite){
				this._mapSprite.destroy();
				this._mapSprite=null;
			}
			this._jsonLoader=null;
			this._loader=null;
			var tDic=this._animationDic;
			for (var p in tDic){
				delete tDic[p];
			}
			this._properties=null;
			tDic=this._tileProperties;
			for (p in tDic){
				delete tDic[p];
			}
			this._currTileSet=null;
			this._completeHandler=null;
			this._mapRect.clearAll();
			this._mapLastRect.clearAll();
			this._tileSetArray=[];
			this._gridWidth=450;
			this._gridHeight=450;
			this._gridW=0;
			this._gridH=0;
			this._x=0;
			this._y=0;
			this._index=0;
			this._enableLinear=true;
			this._resPath=null;
			this._pathArray=null;
		}

		/**
		*整个地图的显示容器
		*@return 地图的显示容器
		*/
		__proto.mapSprite=function(){
			return this._mapSprite;
		}

		/**
		*得到指定的MapLayer
		*@param layerName 要找的层名称
		*@return
		*/
		__proto.getLayerByName=function(layerName){
			var tMapLayer;
			for (var i=0;i < this._layerArray.length;i++){
				tMapLayer=this._layerArray[i];
				if (layerName==tMapLayer.layerName){
					return tMapLayer;
				}
			}
			return null;
		}

		/**
		*通过索引得MapLayer
		*@param index 要找的层索引
		*@return
		*/
		__proto.getLayerByIndex=function(index){
			if (index < this._layerArray.length){
				return this._layerArray[index];
			}
			return null;
		}

		/**
		*当前地图类型
		*/
		__getset(0,__proto,'orientation',function(){
			return this._orientation;
		});

		/**
		*@private
		*视口x坐标
		*/
		__getset(0,__proto,'viewPortX',function(){
			return-this._viewPortX;
		});

		/**
		*设置地图缩放
		*@param scale
		*/
		/**
		*得到当前地图的缩放
		*/
		__getset(0,__proto,'scale',function(){
			return this._scale;
			},function(scale){
			if (scale <=0)
				return;
			this._scale=scale;
			this._viewPortWidth=this._rect.width / scale;
			this._viewPortHeight=this._rect.height / scale;
			this._mapSprite.scale(this._scale,this._scale);
			this.updateViewPort();
		});

		/**
		*格子的宽度
		*/
		__getset(0,__proto,'tileWidth',function(){
			return this._mapTileW;
		});

		/**
		*@private
		*视口的y坐标
		*/
		__getset(0,__proto,'viewPortY',function(){
			return-this._viewPortY;
		});

		/**
		*格子的高度
		*/
		__getset(0,__proto,'tileHeight',function(){
			return this._mapTileH;
		});

		/**
		*地图的宽度
		*/
		__getset(0,__proto,'width',function(){
			return this._width;
		});

		/**
		*地图竖向的格子数
		*/
		__getset(0,__proto,'numRowsTile',function(){
			return this._mapH;
		});

		/**
		*地图横向的格子数
		*/
		__getset(0,__proto,'numColumnsTile',function(){
			return this._mapW;
		});

		/**
		*地图的高度
		*/
		__getset(0,__proto,'height',function(){
			return this._height;
		});

		/**
		*@private
		*视口的宽度
		*/
		__getset(0,__proto,'viewPortWidth',function(){
			return this._viewPortWidth;
		});

		/**
		*@private
		*视口的高度
		*/
		__getset(0,__proto,'viewPortHeight',function(){
			return this._viewPortHeight;
		});

		/**
		*地图的x坐标
		*/
		__getset(0,__proto,'x',function(){
			return this._x;
		});

		/**
		*地图的y坐标
		*/
		__getset(0,__proto,'y',function(){
			return this._y;
		});

		/**
		*块的宽度
		*/
		__getset(0,__proto,'gridWidth',function(){
			return this._gridWidth;
		});

		/**
		*块的高度
		*/
		__getset(0,__proto,'gridHeight',function(){
			return this._gridHeight;
		});

		/**
		*地图的横向块数
		*/
		__getset(0,__proto,'numColumnsGrid',function(){
			return this._gridW;
		});

		/**
		*地图的坚向块数
		*/
		__getset(0,__proto,'numRowsGrid',function(){
			return this._gridH;
		});

		/**
		*tile渲染顺序
		*/
		__getset(0,__proto,'renderOrder',function(){
			return this._renderOrder;
		});

		TiledMap.ORIENTATION_ORTHOGONAL="orthogonal";
		TiledMap.ORIENTATION_ISOMETRIC="isometric";
		TiledMap.ORIENTATION_STAGGERED="staggered";
		TiledMap.ORIENTATION_HEXAGONAL="hexagonal";
		TiledMap.RENDERORDER_RIGHTDOWN="right-down";
		TiledMap.RENDERORDER_RIGHTUP="right-up";
		TiledMap.RENDERORDER_LEFTDOWN="left-down";
		TiledMap.RENDERORDER_LEFTUP="left-up";
		TiledMap._tempContext=null
		TiledMap.__init$=function(){
			//class GRect
			GRect=(function(){
				function GRect(){
					this.left=0;
					this.top=0;
					this.right=0;
					this.bottom=0;
				}
				__class(GRect,'');
				var __proto=GRect.prototype;
				__proto.clearAll=function(){
					this.left=this.top=this.right=this.bottom=0;
				}
				return GRect;
			})()
			//class TileMapAniData
			TileMapAniData=(function(){
				function TileMapAniData(){
					this.mAniIdArray=[];
					this.mDurationTimeArray=[];
					this.mTileTexSetArr=[];
				}
				__class(TileMapAniData,'');
				return TileMapAniData;
			})()
			//class TileSet
			TileSet=(function(){
				function TileSet(){
					this.firstgid=0;
					this.image="";
					this.imageheight=0;
					this.imagewidth=0;
					this.margin=0;
					this.name=0;
					this.properties=null;
					this.spacing=0;
					this.tileheight=0;
					this.tilewidth=0;
					this.titleoffsetX=0;
					this.titleoffsetY=0;
					this.tileproperties=null;
				}
				__class(TileSet,'');
				var __proto=TileSet.prototype;
				__proto.init=function(data){
					this.firstgid=data.firstgid;
					this.image=data.image;
					this.imageheight=data.imageheight;
					this.imagewidth=data.imagewidth;
					this.margin=data.margin;
					this.name=data.name;
					this.properties=data.properties;
					this.spacing=data.spacing;
					this.tileheight=data.tileheight;
					this.tilewidth=data.tilewidth;
					this.tileproperties=data.tileproperties;
					var tTileoffset=data.tileoffset;
					if (tTileoffset){
						this.titleoffsetX=tTileoffset.x;
						this.titleoffsetY=tTileoffset.y;
					}
				}
				return TileSet;
			})()
		}

		return TiledMap;
	})()


	/**
	*此类是子纹理类，也包括同类动画的管理
	*TiledMap会把纹理分割成无数子纹理，也可以把其中的某块子纹理替换成一个动画序列
	*本类的实现就是如果发现子纹理被替换成一个动画序列，animationKey会被设为true
	*即animationKey为true,就使用TileAniSprite来做显示，把动画序列根据时间画到TileAniSprite上
	*@author ...
	*/
	//class laya.map.TileTexSet
	var TileTexSet=(function(){
		function TileTexSet(){
			this.gid=-1;
			this.texture=null;
			this.offX=0;
			this.offY=0;
			this.textureArray=null;
			this.durationTimeArray=null;
			this.animationTotalTime=0;
			this.isAnimation=false;
			this._spriteNum=0;
			this._aniDic=null;
			this._frameIndex=0;
			this._time=0;
			this._interval=0;
			this._preFrameTime=0;
		}

		__class(TileTexSet,'laya.map.TileTexSet');
		var __proto=TileTexSet.prototype;
		/**
		*加入一个动画显示对象到此动画中
		*@param aniName //显示对象的名字
		*@param sprite //显示对象
		*/
		__proto.addAniSprite=function(aniName,sprite){
			if (this.animationTotalTime==0){
				return;
			}
			if (this._aniDic==null){
				this._aniDic={};
			}
			if (this._spriteNum==0){
				Laya.timer.frameLoop(3,this,this.animate);
				this._preFrameTime=Browser.now();
				this._frameIndex=0;
				this._time=0;
				this._interval=0;
			}
			this._spriteNum++;
			this._aniDic[aniName]=sprite;
			if (this.textureArray && this._frameIndex < this.textureArray.length){
				var tTileTextureSet=this.textureArray[this._frameIndex];
				this.drawTexture(sprite,tTileTextureSet);
			}
		}

		/**
		*把动画画到所有注册的SPRITE上
		*/
		__proto.animate=function(){
			if (this.textureArray && this.textureArray.length > 0 && this.durationTimeArray && this.durationTimeArray.length > 0){
				var tNow=Browser.now();
				this._interval=tNow-this._preFrameTime;
				this._preFrameTime=tNow;
				if (this._interval > this.animationTotalTime){
					this._interval=this._interval % this.animationTotalTime;
				}
				this._time+=this._interval;
				var tTime=this.durationTimeArray[this._frameIndex];
				while (this._time > tTime){
					this._time-=tTime;
					this._frameIndex++;
					if (this._frameIndex >=this.durationTimeArray.length || this._frameIndex >=this.textureArray.length){
						this._frameIndex=0;
					};
					var tTileTextureSet=this.textureArray[this._frameIndex];
					var tSprite;
					for (var p in this._aniDic){
						tSprite=this._aniDic[p];
						this.drawTexture(tSprite,tTileTextureSet);
					}
					tTime=this.durationTimeArray[this._frameIndex];
				}
			}
		}

		__proto.drawTexture=function(sprite,tileTextSet){
			sprite.graphics.clear();
			sprite.graphics.drawTexture(tileTextSet.texture,tileTextSet.offX,tileTextSet.offY);
		}

		/**
		*移除不需要更新的SPRITE
		*@param _name
		*/
		__proto.removeAniSprite=function(_name){
			if (this._aniDic && this._aniDic[_name]){
				delete this._aniDic[_name];
				this._spriteNum--
				if (this._spriteNum==0){
					Laya.timer.clear(this,this.animate);
				}
			}
		}

		/**
		*显示当前动画的使用情况
		*/
		__proto.showDebugInfo=function(){
			var tInfo=null;
			if (this._spriteNum > 0){
				tInfo="TileTextureSet::gid:"+this.gid.toString()+" 动画数:"+this._spriteNum.toString();
			}
			return tInfo;
		}

		/**
		*清理
		*/
		__proto.clearAll=function(){
			this.gid=-1;
			if (this.texture){
				this.texture.destroy();
				this.texture=null;
			}
			this.offX=0;
			this.offY=0;
			this.textureArray=null;
			this.durationTimeArray=null;
			this.isAnimation=false;
			this._spriteNum=0;
			this._aniDic=null;
			this._frameIndex=0;
			this._preFrameTime=0;
			this._time=0;
			this._interval=0;
		}

		return TileTexSet;
	})()


	/**
	*地图的每层都会分块渲染处理
	*本类就是地图的块数据
	*@author ...
	*/
	//class laya.map.GridSprite extends laya.display.Sprite
	var GridSprite=(function(_super){
		function GridSprite(){
			this.relativeX=0;
			this.relativeY=0;
			this.isAloneObject=false;
			this.isHaveAnimation=false;
			this.aniSpriteArray=null;
			this.drawImageNum=0;
			this._map=null;
			GridSprite.__super.call(this);
		}

		__class(GridSprite,'laya.map.GridSprite',_super);
		var __proto=GridSprite.prototype;
		/**
		*传入必要的参数，用于裁剪，跟确认此对象类型
		*@param map 把地图的引用传进来，参与一些裁剪计算
		*@param objectKey true:表示当前GridSprite是个活动对象，可以控制，false:地图层的组成块
		*/
		__proto.initData=function(map,objectKey){
			(objectKey===void 0)&& (objectKey=false);
			this._map=map;
			this.isAloneObject=objectKey;
		}

		/**@private */
		__proto._setDisplay=function(value){
			if (!value){
				var cc=this._$P.cacheCanvas;
				if (cc && cc.ctx){
					cc.ctx.canvas.destroy();
					cc.ctx=null;
				};
				var fc=this._$P._filterCache;
				if (fc){
					fc.destroy();
					fc.recycle();
					this._set$P('_filterCache',null);
				}
				this._$P._isHaveGlowFilter && this._set$P('_isHaveGlowFilter',false);
			}
			_super.prototype._setDisplay.call(this,value);
		}

		/**
		*把一个动画对象绑定到当前GridSprite
		*@param sprite 动画的显示对象
		*/
		__proto.addAniSprite=function(sprite){
			if (this.aniSpriteArray==null){
				this.aniSpriteArray=[];
			}
			this.aniSpriteArray.push(sprite);
		}

		/**
		*显示当前GridSprite，并把上面的动画全部显示
		*/
		__proto.show=function(){
			if (!this.visible){
				this.visible=true;
				if (!this.isAloneObject){
					var tParent;
					tParent=this.parent;
					if (tParent){
						tParent.showGridSprite(this);
					}
				}
				if (!Render.isWebGL&&this._map.autoCache){
					this.cacheAs=this._map.autoCacheType;
				}
				if (this.aniSpriteArray==null){
					return;
				};
				var tAniSprite;
				for (var i=0;i < this.aniSpriteArray.length;i++){
					tAniSprite=this.aniSpriteArray[i];
					tAniSprite.show();
				}
			}
		}

		/**
		*隐藏当前GridSprite，并把上面绑定的动画全部移除
		*/
		__proto.hide=function(){
			if (this.visible){
				this.visible=false;
				if (!this.isAloneObject){
					var tParent;
					tParent=this.parent;
					if (tParent){
						tParent.hideGridSprite(this);
					}
				}
				if (!Render.isWebGL&&this._map.autoCache){
					this.cacheAs="none";
				}
				if (this.aniSpriteArray==null){
					return;
				};
				var tAniSprite;
				for (var i=0;i < this.aniSpriteArray.length;i++){
					tAniSprite=this.aniSpriteArray[i];
					tAniSprite.hide();
				}
			}
		}

		/**
		*刷新坐标，当我们自己控制一个GridSprite移动时，需要调用此函数，手动刷新
		*/
		__proto.updatePos=function(){
			if (this.isAloneObject){
				if (this._map){
					this.x=this.relativeX;
					this.y=this.relativeY;
				}
				if (this.x < 0 || this.x > this._map.viewPortWidth || this.y < 0 || this.y > this._map.viewPortHeight){
					this.hide();
					}else {
					this.show();
				}
				}else {
				if (this._map){
					this.x=this.relativeX;
					this.y=this.relativeY;
				}
			}
		}

		/**
		*重置当前对象的所有属性
		*/
		__proto.clearAll=function(){
			if (this._map){
				this._map=null;
			}
			this.visible=false;
			if (this.aniSpriteArray==null){
				return;
			};
			var tAniSprite;
			for (var i=0;i < this.aniSpriteArray.length;i++){
				tAniSprite=this.aniSpriteArray[i];
				tAniSprite.clearAll();
			}
			this.destroy();
			this.relativeX=0;
			this.relativeY=0;
			this.isHaveAnimation=false;
			this.aniSpriteArray=null;
			this.drawImageNum=0;
		}

		return GridSprite;
	})(Sprite)


	/**
	*地图支持多层渲染（例如，地表层，植被层，建筑层等）
	*本类就是层级类
	*@author ...
	*/
	//class laya.map.MapLayer extends laya.display.Sprite
	var MapLayer=(function(_super){
		function MapLayer(){
			this._map=null;
			this._mapData=null;
			this._tileWidthHalf=0;
			this._tileHeightHalf=0;
			this._mapWidthHalf=0;
			this._mapHeightHalf=0;
			this._gridSpriteArray=[];
			this._objDic=null;
			this._dataDic=null;
			this._properties=null;
			this.tarLayer=null;
			this.layerName=null;
			this._showGridList=[];
			this._aloneObjs=[];
			MapLayer.__super.call(this);
			this._tempMapPos=new Point();
		}

		__class(MapLayer,'laya.map.MapLayer',_super);
		var __proto=MapLayer.prototype;
		/**
		*解析LAYER数据，以及初始化一些数据
		*@param layerData 地图数据中，layer数据的引用
		*@param map 地图的引用
		*/
		__proto.init=function(layerData,map){
			this._map=map;
			this._mapData=layerData.data;
			var tHeight=layerData.height;
			var tWidth=layerData.width;
			var tTileW=map.tileWidth;
			var tTileH=map.tileHeight;
			this.layerName=layerData.name;
			this._properties=layerData.properties;
			this.alpha=layerData.opacity;
			this._tileWidthHalf=tTileW / 2;
			this._tileHeightHalf=tTileH / 2;
			this._mapWidthHalf=this._map.width / 2-this._tileWidthHalf;
			this._mapHeightHalf=this._map.height / 2;
			switch (layerData.type){
				case "tilelayer":
					break ;
				case "objectgroup":;
					var tObjectGid=0;
					var tArray=layerData.objects;
					if (tArray.length > 0){
						this._objDic={};
						this._dataDic={};
					};
					var tObjectData;
					var tObjWidth=NaN;
					var tObjHeight=NaN;
					for (var i=0;i < tArray.length;i++){
						tObjectData=tArray[i];
						this._dataDic[tObjectData.name]=tObjectData;
						if (tObjectData.visible==true){
							tObjWidth=tObjectData.width;
							tObjHeight=tObjectData.height;
							var tSprite=map.getSprite(tObjectData.gid,tObjWidth,tObjHeight);
							if (tSprite !=null){
							switch (this._map.orientation){
								case /*laya.map.TiledMap.ORIENTATION_ISOMETRIC*/"isometric":
									this.getScreenPositionByTilePos(tObjectData.x / tTileH,tObjectData.y / tTileH,Point.TEMP);
									tSprite.pivot(tObjWidth / 2,tObjHeight / 2);
									tSprite.rotation=tObjectData.rotation;
									tSprite.x=tSprite.relativeX=Point.TEMP.x+this._map.viewPortX;
									tSprite.y=tSprite.relativeY=Point.TEMP.y+this._map.viewPortY-tObjHeight / 2;
									break ;
								case /*laya.map.TiledMap.ORIENTATION_STAGGERED*/"staggered":
									tSprite.pivot(tObjWidth / 2,tObjHeight / 2);
									tSprite.rotation=tObjectData.rotation;
									tSprite.x=tSprite.relativeX=tObjectData.x+tObjWidth / 2;
									tSprite.y=tSprite.relativeY=tObjectData.y-tObjHeight / 2;
									break ;
								case /*laya.map.TiledMap.ORIENTATION_ORTHOGONAL*/"orthogonal":
									tSprite.pivot(tObjWidth / 2,tObjHeight / 2);
									tSprite.rotation=tObjectData.rotation;
									tSprite.x=tSprite.relativeX=tObjectData.x+tObjWidth / 2;
									tSprite.y=tSprite.relativeY=tObjectData.y-tObjHeight / 2;
									break ;
								case /*laya.map.TiledMap.ORIENTATION_HEXAGONAL*/"hexagonal":
									tSprite.x=tSprite.relativeX=tObjectData.x;
									tSprite.y=tSprite.relativeY=tObjectData.y;
									break ;
								}
							this.addChild(tSprite);
							this._gridSpriteArray.push(tSprite);
							if (tSprite.isAloneObject){
								this._showGridList.push(tSprite);
								this._aloneObjs.push(tSprite);
							}
							this._objDic[tObjectData.name]=tSprite;
						}
					}
				}
				break ;
			}
		}

		/**
		*通过名字获取控制对象，如果找不到返回为null
		*@param objName 所要获取对象的名字
		*@return
		*/
		__proto.getObjectByName=function(objName){
			if (this._objDic){
				return this._objDic[objName];
			}
			return null;
		}

		/**
		*通过名字获取数据，如果找不到返回为null
		*@param objName 所要获取对象的名字
		*@return
		*/
		__proto.getObjectDataByName=function(objName){
			if (this._dataDic){
				return this._dataDic[objName];
			}
			return null;
		}

		/**
		*得到地图层的自定义属性
		*@param name
		*@return
		*/
		__proto.getLayerProperties=function(name){
			if (this._properties){
				return this._properties[name];
			}
			return null;
		}

		/**
		*得到指定格子的数据
		*@param tileX 格子坐标X
		*@param tileY 格子坐标Y
		*@return
		*/
		__proto.getTileData=function(tileX,tileY){
			if (tileY >=0 && tileY < this._map.numRowsTile && tileX >=0 && tileX < this._map.numColumnsTile){
				var tIndex=tileY *this._map.numColumnsTile+tileX;
				var tMapData=this._mapData;
				if (tMapData !=null && tIndex < tMapData.length){
					return tMapData[tIndex];
				}
			}
			return 0;
		}

		/**
		*通过地图坐标得到屏幕坐标
		*@param tileX 格子坐标X
		*@param tileY 格子坐标Y
		*@param screenPos 把计算好的屏幕坐标数据，放到此对象中
		*/
		__proto.getScreenPositionByTilePos=function(tileX,tileY,screenPos){
			if (screenPos){
				switch (this._map.orientation){
					case /*laya.map.TiledMap.ORIENTATION_ISOMETRIC*/"isometric":
						screenPos.x=this._map.width / 2-(tileY-tileX)*this._tileWidthHalf;
						screenPos.y=(tileY+tileX)*this._tileHeightHalf;
						break ;
					case /*laya.map.TiledMap.ORIENTATION_STAGGERED*/"staggered":
						tileX=Math.floor(tileX);
						tileY=Math.floor(tileY);
						screenPos.x=tileX *this._map.tileWidth+(tileY & 1)*this._tileWidthHalf;
						screenPos.y=tileY *this._tileHeightHalf;
						break ;
					case /*laya.map.TiledMap.ORIENTATION_ORTHOGONAL*/"orthogonal":
						screenPos.x=tileX *this._map.tileWidth;
						screenPos.y=tileY *this._map.tileHeight;
						break ;
					case /*laya.map.TiledMap.ORIENTATION_HEXAGONAL*/"hexagonal":
						tileX=Math.floor(tileX);
						tileY=Math.floor(tileY);
						var tTileHeight=this._map.tileHeight *2 / 3;
						screenPos.x=(tileX *this._map.tileWidth+tileY % 2 *this._tileWidthHalf)% this._map.gridWidth;
						screenPos.y=(tileY *tTileHeight)% this._map.gridHeight;
						break ;
					}
				screenPos.x=(screenPos.x+this._map.viewPortX)*this._map.scale;
				screenPos.y=(screenPos.y+this._map.viewPortY)*this._map.scale;
			}
		}

		/**
		*通过屏幕坐标来获取选中格子的数据
		*@param screenX 屏幕坐标x
		*@param screenY 屏幕坐标y
		*@return
		*/
		__proto.getTileDataByScreenPos=function(screenX,screenY){
			var tData=0;
			if (this.getTilePositionByScreenPos(screenX,screenY,this._tempMapPos)){
				tData=this.getTileData(Math.floor(this._tempMapPos.x),Math.floor(this._tempMapPos.y));
			}
			return tData;
		}

		/**
		*通过屏幕坐标来获取选中格子的索引
		*@param screenX 屏幕坐标x
		*@param screenY 屏幕坐标y
		*@param result 把计算好的格子坐标，放到此对象中
		*@return
		*/
		__proto.getTilePositionByScreenPos=function(screenX,screenY,result){
			screenX=screenX/this._map.scale-this._map.viewPortX;
			screenY=screenY/this._map.scale-this._map.viewPortY;
			var tTileW=this._map.tileWidth;
			var tTileH=this._map.tileHeight;
			var tV=0;
			var tU=0;
			switch (this._map.orientation){
				case /*laya.map.TiledMap.ORIENTATION_ISOMETRIC*/"isometric":;
					var tDirX=screenX-this._map.width / 2;
					var tDirY=screenY;
					tV=-(tDirX / tTileW-tDirY / tTileH);
					tU=tDirX / tTileW+tDirY / tTileH;
					if (result){
						result.x=tU;
						result.y=tV;
					}
					return true;
					break ;
				case /*laya.map.TiledMap.ORIENTATION_STAGGERED*/"staggered":
					if (result){
						var cx=0,cy=0,rx=0,ry=0;
						cx=Math.floor(screenX / tTileW)*tTileW+tTileW / 2;
						cy=Math.floor(screenY / tTileH)*tTileH+tTileH / 2;
						rx=(screenX-cx)*tTileH / 2;
						ry=(screenY-cy)*tTileW / 2;
						if (Math.abs(rx)+Math.abs(ry)<=tTileW *tTileH / 4){
							tU=Math.floor(screenX / tTileW);
							tV=Math.floor(screenY / tTileH)*2;
							}else {
							screenX=screenX-tTileW / 2;
							tU=Math.floor(screenX / tTileW)+1;
							screenY=screenY-tTileH / 2;
							tV=Math.floor(screenY / tTileH)*2+1;
						}
						result.x=tU-(tV & 1);
						result.y=tV;
					}
					return true;
					break ;
				case /*laya.map.TiledMap.ORIENTATION_ORTHOGONAL*/"orthogonal":
					tU=screenX / tTileW;
					tV=screenY / tTileH;
					if (result){
						result.x=tU;
						result.y=tV;
					}
					return true;
					break ;
				case /*laya.map.TiledMap.ORIENTATION_HEXAGONAL*/"hexagonal":;
					var tTileHeight=tTileH *2 / 3;
					tV=screenY / tTileHeight;
					tU=(screenX-tV % 2 *this._tileWidthHalf)/ tTileW;
					if (result){
						result.x=tU;
						result.y=tV;
					}
					break ;
				}
			return false;
		}

		/**
		*得到一个GridSprite
		*@param gridX 当前Grid的X轴索引
		*@param gridY 当前Grid的Y轴索引
		*@return 一个GridSprite对象
		*/
		__proto.getDrawSprite=function(gridX,gridY){
			var tSprite=new GridSprite();
			tSprite.relativeX=gridX *this._map.gridWidth;
			tSprite.relativeY=gridY *this._map.gridHeight;
			tSprite.initData(this._map);
			tSprite.updatePos();
			this._gridSpriteArray.push(tSprite);
			return tSprite;
		}

		/**
		*将gridSprite设为显示状态
		*@param gridSprite
		*/
		__proto.showGridSprite=function(gridSprite){
			var gridList=this._showGridList;
			var i=0,len=0;
			len=gridList.length;
			var ok_i=-1;
			var tGridSprite;
			for (i=0;i < len;i++){
				tGridSprite=gridList[i];
				if (tGridSprite==gridSprite)return;
				if (!tGridSprite.isAloneObject && !tGridSprite.visible){
					ok_i=i;
				}
			}
			if (ok_i >=0){
				gridList[ok_i]=gridSprite;
				}else{
				gridList.push(gridSprite);
			}
		}

		/**
		*将gridSprite设为隐藏状态
		*@param gridSprite
		*
		*/
		__proto.hideGridSprite=function(gridSprite){
			gridSprite.visible=false;
		}

		/**
		*更新此层中块的坐标
		*手动刷新的目的是，保持层级的宽和高保持最小，加快渲染
		*/
		__proto.updateGridPos=function(){
			var tSprite;
			var tList;
			tList=this._showGridList;
			var len=0;
			len=tList.length;
			for (var i=0;i < len;i++){
				tSprite=tList[i];
				if ((tSprite._style.visible || tSprite.isAloneObject)&& tSprite.drawImageNum > 0){
					tSprite.updatePos();
				}
			}
		}

		/**
		*更新此层中的活动对象
		*/
		__proto.updateAloneObject=function(){
			var tSprite;
			var tList;
			tList=this._aloneObjs;
			var len=0;
			len=tList.length;
			for (var i=0;i < len;i++){
				tSprite=tList[i];
				if (tSprite.drawImageNum > 0){
					tSprite.updatePos();
				}
			}
		}

		/**
		*渲染时使用需要更新的列表进行渲染，减少遍历
		*@param context
		*@param x
		*@param y
		*
		*/
		__proto.render=function(context,x,y){
			var childs=this._childs;
			this._childs=this._showGridList;
			_super.prototype.render.call(this,context,x,y);
			this._childs=childs;
		}

		/**
		*@private
		*把tile画到指定的显示对象上
		*@param gridSprite 被指定显示的目标
		*@param tileX 格子的X轴坐标
		*@param tileY 格子的Y轴坐标
		*@return
		*/
		__proto.drawTileTexture=function(gridSprite,tileX,tileY){
			if (tileY >=0 && tileY < this._map.numRowsTile && tileX >=0 && tileX < this._map.numColumnsTile){
				var tIndex=tileY *this._map.numColumnsTile+tileX;
				var tMapData=this._mapData;
				if (tMapData !=null && tIndex < tMapData.length){
					if (tMapData[tIndex] !=0){
						var tTileTexSet=this._map.getTexture(tMapData[tIndex]);
						if (tTileTexSet){
							var tX=0;
							var tY=0;
							var tTexture=tTileTexSet.texture;
							switch (this._map.orientation){
								case /*laya.map.TiledMap.ORIENTATION_STAGGERED*/"staggered":
									tX=tileX *this._map.tileWidth % this._map.gridWidth+(tileY & 1)*this._tileWidthHalf;
									tY=tileY *this._tileHeightHalf % this._map.gridHeight;
									break ;
								case /*laya.map.TiledMap.ORIENTATION_ORTHOGONAL*/"orthogonal":
									tX=tileX *this._map.tileWidth % this._map.gridWidth;
									tY=tileY *this._map.tileHeight % this._map.gridHeight;
									break ;
								case /*laya.map.TiledMap.ORIENTATION_ISOMETRIC*/"isometric":
									tX=(this._mapWidthHalf+(tileX-tileY)*this._tileWidthHalf)% this._map.gridWidth;
									tY=((tileX+tileY)*this._tileHeightHalf)% this._map.gridHeight;
									break ;
								case /*laya.map.TiledMap.ORIENTATION_HEXAGONAL*/"hexagonal":;
									var tTileHeight=this._map.tileHeight *2 / 3;
									tX=(tileX *this._map.tileWidth+tileY % 2 *this._tileWidthHalf)% this._map.gridWidth;
									tY=(tileY *tTileHeight)% this._map.gridHeight;
									break ;
								}
							if (tTileTexSet.isAnimation){
								var tAnimationSprite=new TileAniSprite();
								tAnimationSprite.x=tX;
								tAnimationSprite.y=tY;
								tAnimationSprite.setTileTextureSet(tIndex.toString(),tTileTexSet);
								gridSprite.addAniSprite(tAnimationSprite);
								gridSprite.addChild(tAnimationSprite);
								gridSprite.isHaveAnimation=true;
								}else {
								gridSprite.graphics.drawTexture(tTileTexSet.texture,tX+tTileTexSet.offX,tY+tTileTexSet.offY);
							}
							return true;
						}
					}
				}
			}
			return false;
		}

		/**
		*@private
		*清理当前对象
		*/
		__proto.clearAll=function(){
			this._map=null;
			this._mapData=null;
			this._tileWidthHalf=0;
			this._tileHeightHalf=0;
			this._mapWidthHalf=0;
			this._mapHeightHalf=0;
			this.layerName=null;
			var i=0;
			if (this._objDic){
				for (var p in this._objDic){
					delete this._objDic[p];
				}
				this._objDic=null;
			}
			if (this._dataDic){
				for (p in this._dataDic){
					delete this._dataDic[p];
				}
				this._dataDic=null;
			};
			var tGridSprite;
			for (i=0;i < this._gridSpriteArray.length;i++){
				tGridSprite=this._gridSpriteArray[i];
				tGridSprite.clearAll();
			}
			this._properties=null;
			this._tempMapPos=null;
			this.tarLayer=null;
		}

		return MapLayer;
	})(Sprite)


	/**
	*TildMap的动画显示对象（一个动画（TileTexSet），可以绑定多个动画显示对象（TileAniSprite））
	*@author ...
	*/
	//class laya.map.TileAniSprite extends laya.display.Sprite
	var TileAniSprite=(function(_super){
		function TileAniSprite(){
			this._tileTextureSet=null;
			this._aniName=null;
			TileAniSprite.__super.call(this);
		}

		__class(TileAniSprite,'laya.map.TileAniSprite',_super);
		var __proto=TileAniSprite.prototype;
		/**
		*确定当前显示对象的名称以及属于哪个动画
		*@param aniName 当前动画显示对象的名字，名字唯一
		*@param tileTextureSet 当前显示对象属于哪个动画（一个动画，可以绑定多个同类显示对象）
		*/
		__proto.setTileTextureSet=function(aniName,tileTextureSet){
			this._aniName=aniName;
			this._tileTextureSet=tileTextureSet;
			tileTextureSet.addAniSprite(this._aniName,this);
		}

		/**
		*把当前动画加入到对应的动画刷新列表中
		*/
		__proto.show=function(){
			this._tileTextureSet.addAniSprite(this._aniName,this);
		}

		/**
		*把当前动画从对应的动画刷新列表中移除
		*/
		__proto.hide=function(){
			this._tileTextureSet.removeAniSprite(this._aniName);
		}

		/**
		*清理
		*/
		__proto.clearAll=function(){
			this._tileTextureSet.removeAniSprite(this._aniName);
			this.destroy();
			this._tileTextureSet=null;
			this._aniName=null;
		}

		return TileAniSprite;
	})(Sprite)


	Laya.__init([TiledMap]);
})(window,document,Laya);


(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;

	var Animation=laya.display.Animation,ClassUtils=laya.utils.ClassUtils,ColorFilter=laya.filters.ColorFilter;
	var Ease=laya.utils.Ease,Event=laya.events.Event,Font=laya.display.css.Font,FrameAnimation=laya.display.FrameAnimation;
	var Graphics=laya.display.Graphics,Handler=laya.utils.Handler,Input=laya.display.Input,Loader=laya.net.Loader;
	var Node=laya.display.Node,Point=laya.maths.Point,Rectangle=laya.maths.Rectangle,Render=laya.renders.Render;
	var Sprite=laya.display.Sprite,Text=laya.display.Text,Texture=laya.resource.Texture,Tween=laya.utils.Tween;
	var Utils=laya.utils.Utils,WeakObject=laya.utils.WeakObject;
	Laya.interface('laya.ui.IItem');
	Laya.interface('laya.ui.ISelect');
	Laya.interface('laya.ui.IRender');
	Laya.interface('laya.ui.IComponent');
	Laya.interface('laya.ui.IBox','IComponent');
	/**
	*<code>LayoutStyle</code> 是一个布局样式类。
	*/
	//class laya.ui.LayoutStyle
	var LayoutStyle=(function(){
		function LayoutStyle(){
			this.enable=false;
			this.top=NaN;
			this.bottom=NaN;
			this.left=NaN;
			this.right=NaN;
			this.centerX=NaN;
			this.centerY=NaN;
			this.anchorX=NaN;
			this.anchorY=NaN;
		}

		__class(LayoutStyle,'laya.ui.LayoutStyle');
		__static(LayoutStyle,
		['EMPTY',function(){return this.EMPTY=new LayoutStyle();}
		]);
		return LayoutStyle;
	})()


	/**
	*<code>Styles</code> 定义了组件常用的样式属性。
	*/
	//class laya.ui.Styles
	var Styles=(function(){
		function Styles(){};
		__class(Styles,'laya.ui.Styles');
		Styles.labelColor="#000000";
		Styles.buttonStateNum=3;
		Styles.scrollBarMinNum=15;
		Styles.scrollBarDelayTime=500;
		__static(Styles,
		['defaultSizeGrid',function(){return this.defaultSizeGrid=[4,4,4,4,0];},'labelPadding',function(){return this.labelPadding=[2,2,2,2];},'inputLabelPadding',function(){return this.inputLabelPadding=[1,1,1,3];},'buttonLabelColors',function(){return this.buttonLabelColors=["#32556b","#32cc6b","#ff0000","#C0C0C0"];},'comboBoxItemColors',function(){return this.comboBoxItemColors=["#5e95b6","#ffffff","#000000","#8fa4b1","#ffffff"];}
		]);
		return Styles;
	})()


	/**
	*<code>UIUtils</code> 是文本工具集。
	*/
	//class laya.ui.UIUtils
	var UIUtils=(function(){
		function UIUtils(){};
		__class(UIUtils,'laya.ui.UIUtils');
		UIUtils.fillArray=function(arr,str,type){
			var temp=arr.concat();
			if (str){
				var a=str.split(",");
				for (var i=0,n=Math.min(temp.length,a.length);i < n;i++){
					var value=a[i];
					temp[i]=(value=="true" ? true :(value=="false" ? false :value));
					if (type !=null)temp[i]=type(value);
				}
			}
			return temp;
		}

		UIUtils.toColor=function(color){
			return Utils.toHexColor(color);
		}

		UIUtils.gray=function(traget,isGray){
			(isGray===void 0)&& (isGray=true);
			if (isGray){
				UIUtils.addFilter(traget,UIUtils.grayFilter);
				}else {
				UIUtils.clearFilter(traget,ColorFilter);
			}
		}

		UIUtils.addFilter=function(target,filter){
			var filters=target.filters || [];
			filters.push(filter);
			target.filters=filters;
		}

		UIUtils.clearFilter=function(target,filterType){
			var filters=target.filters;
			if (filters !=null && filters.length > 0){
				for (var i=filters.length-1;i >-1;i--){
					var filter=filters[i];
					if (Laya.__typeof(filter,filterType))filters.splice(i,1);
				}
				target.filters=filters;
			}
		}

		UIUtils._getReplaceStr=function(word){
			return UIUtils.escapeSequence[word];
		}

		UIUtils.adptString=function(str){
			return str.replace(/\\(\w)/g,UIUtils._getReplaceStr);
		}

		__static(UIUtils,
		['grayFilter',function(){return this.grayFilter=new ColorFilter([0.3086,0.6094,0.082,0,0,0.3086,0.6094,0.082,0,0,0.3086,0.6094,0.082,0,0,0,0,0,1,0]);},'escapeSequence',function(){return this.escapeSequence={"\\n":"\n","\\t":"\t"};}
		]);
		return UIUtils;
	})()


	/**全局配置*/
	//class UIConfig
	var UIConfig=(function(){
		function UIConfig(){};
		__class(UIConfig,'UIConfig');
		UIConfig.touchScrollEnable=true;
		UIConfig.mouseWheelEnable=true;
		UIConfig.showButtons=true;
		UIConfig.popupBgColor="#000000";
		UIConfig.popupBgAlpha=0.5;
		UIConfig.closeDialogOnSide=true;
		return UIConfig;
	})()


	/**
	*<code>AutoBitmap</code> 类是用于表示位图图像或绘制图形的显示对象。
	*<p>封装了位置，宽高及九宫格的处理，供UI组件使用。</p>
	*/
	//class laya.ui.AutoBitmap extends laya.display.Graphics
	var AutoBitmap=(function(_super){
		function AutoBitmap(){
			this.autoCacheCmd=true;
			this._width=0;
			this._height=0;
			this._source=null;
			this._sizeGrid=null;
			this._isChanged=false;
			this._offset=null;
			AutoBitmap.__super.call(this);
		}

		__class(AutoBitmap,'laya.ui.AutoBitmap',_super);
		var __proto=AutoBitmap.prototype;
		/**@inheritDoc */
		__proto.destroy=function(){
			_super.prototype.destroy.call(this);
			this._source=null;
			this._sizeGrid=null;
			this._offset=null;
		}

		/**@private */
		__proto._setChanged=function(){
			if (!this._isChanged){
				this._isChanged=true;
				Laya.timer.callLater(this,this.changeSource);
			}
		}

		/**
		*@private
		*修改纹理资源。
		*/
		__proto.changeSource=function(){
			this._isChanged=false;
			var source=this._source;
			if (!source || !source.bitmap)return;
			var width=this.width;
			var height=this.height;
			var sizeGrid=this._sizeGrid;
			var sw=source.sourceWidth;
			var sh=source.sourceHeight;
			if (!sizeGrid || (sw===width && sh===height)){
				this.cleanByTexture(source,this._offset ? this._offset[0] :0,this._offset ? this._offset[1] :0,width,height);
				}else {
				source.$_GID || (source.$_GID=Utils.getGID());
				var key=source.$_GID+"."+width+"."+height+"."+sizeGrid.join(".");
				if (WeakObject.I.get(key)){
					this.cmds=WeakObject.I.get(key);
					return;
				}
				this.clear();
				var top=sizeGrid[0];
				var right=sizeGrid[1];
				var bottom=sizeGrid[2];
				var left=sizeGrid[3];
				var repeat=sizeGrid[4];
				var needClip=false;
				if (left+right > width){
					var clipWidth=width;
					needClip=true;
					width=left+right;
				}
				if (needClip){
					this.save();
					this.clipRect(0,0,clipWidth,height);
				}
				left && top && this.drawTexture(AutoBitmap.getTexture(source,0,0,left,top),0,0,left,top);
				right && top && this.drawTexture(AutoBitmap.getTexture(source,sw-right,0,right,top),width-right,0,right,top);
				left && bottom && this.drawTexture(AutoBitmap.getTexture(source,0,sh-bottom,left,bottom),0,height-bottom,left,bottom);
				right && bottom && this.drawTexture(AutoBitmap.getTexture(source,sw-right,sh-bottom,right,bottom),width-right,height-bottom,right,bottom);
				top && this.drawBitmap(repeat,AutoBitmap.getTexture(source,left,0,sw-left-right,top),left,0,width-left-right,top);
				bottom && this.drawBitmap(repeat,AutoBitmap.getTexture(source,left,sh-bottom,sw-left-right,bottom),left,height-bottom,width-left-right,bottom);
				left && this.drawBitmap(repeat,AutoBitmap.getTexture(source,0,top,left,sh-top-bottom),0,top,left,height-top-bottom);
				right && this.drawBitmap(repeat,AutoBitmap.getTexture(source,sw-right,top,right,sh-top-bottom),width-right,top,right,height-top-bottom);
				this.drawBitmap(repeat,AutoBitmap.getTexture(source,left,top,sw-left-right,sh-top-bottom),left,top,width-left-right,height-top-bottom);
				if (needClip)this.restore();
				if (this.autoCacheCmd && !Render.isConchApp)WeakObject.I.set(key,this.cmds);
			}
			this._repaint();
		}

		__proto.drawBitmap=function(repeat,tex,x,y,width,height){
			(width===void 0)&& (width=0);
			(height===void 0)&& (height=0);
			if (width < 0.1 || height < 0.1)return;
			if (repeat && (tex.width !=width || tex.height !=height))this.fillTexture(tex,x,y,width,height);
			else this.drawTexture(tex,x,y,width,height);
		}

		__proto.clear=function(recoverCmds){
			(recoverCmds===void 0)&& (recoverCmds=true);
			_super.prototype.clear.call(this,false);
		}

		/**
		*当前实例的有效缩放网格数据。
		*<p>如果设置为null,则在应用任何缩放转换时，将正常缩放整个显示对象。</p>
		*<p>数据格式：[上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)]。
		*<ul><li>例如：[4,4,4,4,1]</li></ul></p>
		*<p> <code>sizeGrid</code> 的值如下所示：
		*<ol>
		*<li>上边距</li>
		*<li>右边距</li>
		*<li>下边距</li>
		*<li>左边距</li>
		*<li>是否重复填充(值为0：不重复填充，1：重复填充)</li>
		*</ol></p>
		*<p>当定义 <code>sizeGrid</code> 属性时，该显示对象被分割到以 <code>sizeGrid</code> 数据中的"上边距,右边距,下边距,左边距" 组成的矩形为基础的具有九个区域的网格中，该矩形定义网格的中心区域。网格的其它八个区域如下所示：
		*<ul>
		*<li>矩形上方的区域</li>
		*<li>矩形外的右上角</li>
		*<li>矩形左侧的区域</li>
		*<li>矩形右侧的区域</li>
		*<li>矩形外的左下角</li>
		*<li>矩形下方的区域</li>
		*<li>矩形外的右下角</li>
		*<li>矩形外的左上角</li>
		*</ul>
		*同时也支持3宫格，比如0,4,0,4,1为水平3宫格，4,0,4,0,1为垂直3宫格，3宫格性能比9宫格高。
		*</p>
		*/
		__getset(0,__proto,'sizeGrid',function(){
			return this._sizeGrid;
			},function(value){
			this._sizeGrid=value;
			this._setChanged();
		});

		/**
		*表示显示对象的宽度，以像素为单位。
		*/
		__getset(0,__proto,'width',function(){
			if (this._width)return this._width;
			if (this._source)return this._source.sourceWidth;
			return 0;
			},function(value){
			if (this._width !=value){
				this._width=value;
				this._setChanged();
			}
		});

		/**
		*表示显示对象的高度，以像素为单位。
		*/
		__getset(0,__proto,'height',function(){
			if (this._height)return this._height;
			if (this._source)return this._source.sourceHeight;
			return 0;
			},function(value){
			if (this._height !=value){
				this._height=value;
				this._setChanged();
			}
		});

		/**
		*对象的纹理资源。
		*@see laya.resource.Texture
		*/
		__getset(0,__proto,'source',function(){
			return this._source;
			},function(value){
			if (value){
				this._source=value
				this._setChanged();
				}else {
				this._source=null;
				this.clear();
			}
		});

		AutoBitmap.getTexture=function(tex,x,y,width,height){
			if (width <=0)width=1;
			if (height <=0)height=1;
			tex.$_GID || (tex.$_GID=Utils.getGID())
			var key=tex.$_GID+"."+x+"."+y+"."+width+"."+height;
			var texture=WeakObject.I.get(key);
			if (!texture){
				texture=Texture.createFromTexture(tex,x,y,width,height);
				WeakObject.I.set(key,texture);
			}
			return texture;
		}

		return AutoBitmap;
	})(Graphics)


	/**
	*<code>UIEvent</code> 类用来定义UI组件类的事件类型。
	*/
	//class laya.ui.UIEvent extends laya.events.Event
	var UIEvent=(function(_super){
		function UIEvent(){UIEvent.__super.call(this);;
		};

		__class(UIEvent,'laya.ui.UIEvent',_super);
		UIEvent.SHOW_TIP="showtip";
		UIEvent.HIDE_TIP="hidetip";
		return UIEvent;
	})(Event)


	/**
	*<code>Component</code> 是ui控件类的基类。
	*<p>生命周期：preinitialize > createChildren > initialize > 组件构造函数</p>
	*/
	//class laya.ui.Component extends laya.display.Sprite
	var Component=(function(_super){
		function Component(){
			this._comXml=null;
			this._dataSource=null;
			this._toolTip=null;
			this._tag=null;
			this._disabled=false;
			this._gray=false;
			this.layoutEnabled=true;
			Component.__super.call(this);
			this._layout=LayoutStyle.EMPTY;
			this.preinitialize();
			this.createChildren();
			this.initialize();
		}

		__class(Component,'laya.ui.Component',_super);
		var __proto=Component.prototype;
		Laya.imps(__proto,{"laya.ui.IComponent":true})
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._dataSource=this._layout=null;
			this._tag=null;
			this._toolTip=null;
		}

		/**
		*<p>预初始化。</p>
		*@internal 子类可在此函数内设置、修改属性默认值
		*/
		__proto.preinitialize=function(){}
		/**
		*<p>创建并添加控件子节点。</p>
		*@internal 子类可在此函数内创建并添加子节点。
		*/
		__proto.createChildren=function(){}
		/**
		*<p>控件初始化。</p>
		*@internal 在此子对象已被创建，可以对子对象进行修改。
		*/
		__proto.initialize=function(){}
		/**
		*<p>延迟运行指定的函数。</p>
		*<p>在控件被显示在屏幕之前调用，一般用于延迟计算数据。</p>
		*@param method 要执行的函数的名称。例如，functionName。
		*@param args 传递给 <code>method</code> 函数的可选参数列表。
		*
		*@see #runCallLater()
		*/
		__proto.callLater=function(method,args){
			Laya.timer.callLater(this,method,args);
		}

		/**
		*<p>如果有需要延迟调用的函数（通过 <code>callLater</code> 函数设置），则立即执行延迟调用函数。</p>
		*@param method 要执行的函数名称。例如，functionName。
		*@see #callLater()
		*/
		__proto.runCallLater=function(method){
			Laya.timer.runCallLater(this,method);
		}

		/**
		*<p>立即执行影响宽高度量的延迟调用函数。</p>
		*@internal <p>使用 <code>runCallLater</code> 函数，立即执行影响宽高度量的延迟运行函数(使用 <code>callLater</code> 设置延迟执行函数)。</p>
		*@see #callLater()
		*@see #runCallLater()
		*/
		__proto.commitMeasure=function(){}
		/**
		*<p>重新调整对象的大小。</p>
		*/
		__proto.changeSize=function(){
			this.event(/*laya.events.Event.RESIZE*/"resize");
		}

		/**
		*@private
		*<p>获取对象的布局样式。</p>
		*/
		__proto.getLayout=function(){
			this._layout===LayoutStyle.EMPTY && (this._layout=new LayoutStyle());
			return this._layout;
		}

		/**
		*@private
		*<p>指定对象是否可使用布局。</p>
		*<p>如果值为true,则此对象可以使用布局样式，否则不使用布局样式。</p>
		*@param value 一个 Boolean 值，指定对象是否可使用布局。
		*/
		__proto._setLayoutEnabled=function(value){
			if (this._layout && this._layout.enable !=value){
				this._layout.enable=value;
				this.on(/*laya.events.Event.ADDED*/"added",this,this.onAdded);
				this.on(/*laya.events.Event.REMOVED*/"removed",this,this.onRemoved);
				if (this.parent){
					this.onAdded();
				}
			}
		}

		/**
		*对象从显示列表移除的事件侦听处理函数。
		*/
		__proto.onRemoved=function(){
			this.parent.off(/*laya.events.Event.RESIZE*/"resize",this,this.onCompResize);
		}

		/**
		*对象被添加到显示列表的事件侦听处理函数。
		*/
		__proto.onAdded=function(){
			this.parent.on(/*laya.events.Event.RESIZE*/"resize",this,this.onCompResize);
			this.resetLayoutX();
			this.resetLayoutY();
		}

		/**
		*父容器的 <code>Event.RESIZE</code> 事件侦听处理函数。
		*/
		__proto.onCompResize=function(){
			if (this._layout && this._layout.enable){
				this.resetLayoutX();
				this.resetLayoutY();
			}
		}

		/**
		*<p>重置对象的 <code>X</code> 轴（水平方向）布局。</p>
		*/
		__proto.resetLayoutX=function(){
			var layout=this._layout;
			if (!isNaN(layout.anchorX))this.pivotX=layout.anchorX *this.width;
			if (!this.layoutEnabled)return;
			var parent=this.parent;
			if (parent){
				if (!isNaN(layout.centerX)){
					this.x=Math.round((parent.width-this.displayWidth)*0.5+layout.centerX+this.pivotX *this.scaleX);
					}else if (!isNaN(layout.left)){
					this.x=Math.round(layout.left+this.pivotX *this.scaleX);
					if (!isNaN(layout.right)){
						this.width=(parent._width-layout.left-layout.right)/ (this.scaleX || 0.01);
					}
					}else if (!isNaN(layout.right)){
					this.x=Math.round(parent.width-this.displayWidth-layout.right+this.pivotX *this.scaleX);
				}
			}
		}

		/**
		*<p>重置对象的 <code>Y</code> 轴（垂直方向）布局。</p>
		*/
		__proto.resetLayoutY=function(){
			var layout=this._layout;
			if (!isNaN(layout.anchorY))this.pivotY=layout.anchorY *this.height;
			if (!this.layoutEnabled)return;
			var parent=this.parent;
			if (parent){
				if (!isNaN(layout.centerY)){
					this.y=Math.round((parent.height-this.displayHeight)*0.5+layout.centerY+this.pivotY *this.scaleY);
					}else if (!isNaN(layout.top)){
					this.y=Math.round(layout.top+this.pivotY *this.scaleY);
					if (!isNaN(layout.bottom)){
						this.height=(parent._height-layout.top-layout.bottom)/ (this.scaleY || 0.01);
					}
					}else if (!isNaN(layout.bottom)){
					this.y=Math.round(parent.height-this.displayHeight-layout.bottom+this.pivotY *this.scaleY);
				}
			}
		}

		/**
		*对象的 <code>Event.MOUSE_OVER</code> 事件侦听处理函数。
		*/
		__proto.onMouseOver=function(e){
			Laya.stage.event(/*laya.ui.UIEvent.SHOW_TIP*/"showtip",this._toolTip);
		}

		/**
		*对象的 <code>Event.MOUSE_OUT</code> 事件侦听处理函数。
		*/
		__proto.onMouseOut=function(e){
			Laya.stage.event(/*laya.ui.UIEvent.HIDE_TIP*/"hidetip",this._toolTip);
		}

		/**
		*<p>对象的显示宽度（以像素为单位）。</p>
		*/
		__getset(0,__proto,'displayWidth',function(){
			return this.width *this.scaleX;
		});

		/**
		*<p>表示显示对象的宽度，以像素为单位。</p>
		*<p><b>注：</b>当值为0时，宽度为自适应大小。</p>
		*/
		__getset(0,__proto,'width',function(){
			if (this._width)return this._width;
			return this.measureWidth;
			},function(value){
			if (this._width !=value){
				this._width=value;
				this.conchModel && this.conchModel.size(this._width,this._height);
				this.callLater(this.changeSize);
				if (this._layout.enable && (!isNaN(this._layout.centerX)|| !isNaN(this._layout.right)|| !isNaN(this._layout.anchorX)))this.resetLayoutX();
			}
		});

		/**
		*<p>显示对象的实际显示区域宽度（以像素为单位）。</p>
		*/
		__getset(0,__proto,'measureWidth',function(){
			var max=0;
			this.commitMeasure();
			for (var i=this.numChildren-1;i >-1;i--){
				var comp=this.getChildAt(i);
				if (comp.visible){
					max=Math.max(comp.x+comp.width *comp.scaleX,max);
				}
			}
			return max;
		});

		/**
		*<p>对象的显示高度（以像素为单位）。</p>
		*/
		__getset(0,__proto,'displayHeight',function(){
			return this.height *this.scaleY;
		});

		/**
		*<p>表示显示对象的高度，以像素为单位。</p>
		*<p><b>注：</b>当值为0时，高度为自适应大小。</p>
		*/
		__getset(0,__proto,'height',function(){
			if (this._height)return this._height;
			return this.measureHeight;
			},function(value){
			if (this._height !=value){
				this._height=value;
				this.conchModel && this.conchModel.size(this._width,this._height);
				this.callLater(this.changeSize);
				if (this._layout.enable && (!isNaN(this._layout.centerY)|| !isNaN(this._layout.bottom)|| !isNaN(this._layout.anchorY)))this.resetLayoutY();
			}
		});

		/**
		*<p>数据赋值，通过对UI赋值来控制UI显示逻辑。</p>
		*<p>简单赋值会更改组件的默认属性，使用大括号可以指定组件的任意属性进行赋值。</p>
		*@example
		//默认属性赋值
		dataSource={label1:"改变了label",checkbox1:true};//(更改了label1的text属性值，更改checkbox1的selected属性)。
		//任意属性赋值
		dataSource={label2:{text:"改变了label",size:14},checkbox2:{selected:true,x:10}};
		*/
		__getset(0,__proto,'dataSource',function(){
			return this._dataSource;
			},function(value){
			this._dataSource=value;
			for (var prop in this._dataSource){
				if (this.hasOwnProperty(prop)&& !((typeof (this[prop])=='function'))){
					this[prop]=this._dataSource[prop];
				}
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'scaleY',_super.prototype._$get_scaleY,function(value){
			if (_super.prototype._$get_scaleY.call(this)!=value){
				_super.prototype._$set_scaleY.call(this,value);
				this.callLater(this.changeSize);
				this._layout.enable && this.resetLayoutY();
			}
		});

		/**
		*<p>显示对象的实际显示区域高度（以像素为单位）。</p>
		*/
		__getset(0,__proto,'measureHeight',function(){
			var max=0;
			this.commitMeasure();
			for (var i=this.numChildren-1;i >-1;i--){
				var comp=this.getChildAt(i);
				if (comp.visible){
					max=Math.max(comp.y+comp.height *comp.scaleY,max);
				}
			}
			return max;
		});

		/**@inheritDoc */
		__getset(0,__proto,'scaleX',_super.prototype._$get_scaleX,function(value){
			if (_super.prototype._$get_scaleX.call(this)!=value){
				_super.prototype._$set_scaleX.call(this,value);
				this.callLater(this.changeSize);
				this._layout.enable && this.resetLayoutX();
			}
		});

		/**
		*<p>从组件顶边到其内容区域顶边之间的垂直距离（以像素为单位）。</p>
		*/
		__getset(0,__proto,'top',function(){
			return this._layout.top;
			},function(value){
			if (value !=this._layout.top){
				this.getLayout().top=value;
				this._setLayoutEnabled(true);
			}
			this.resetLayoutY();
		});

		/**
		*<p>从组件底边到其内容区域底边之间的垂直距离（以像素为单位）。</p>
		*/
		__getset(0,__proto,'bottom',function(){
			return this._layout.bottom;
			},function(value){
			if (value !=this._layout.bottom){
				this.getLayout().bottom=value;
				this._setLayoutEnabled(true);
			}
			this.resetLayoutY();
		});

		/**
		*<p>从组件左边到其内容区域左边之间的水平距离（以像素为单位）。</p>
		*/
		__getset(0,__proto,'left',function(){
			return this._layout.left;
			},function(value){
			if (value !=this._layout.left){
				this.getLayout().left=value;
				this._setLayoutEnabled(true);
			}
			this.resetLayoutX();
		});

		/**
		*<p>从组件右边到其内容区域右边之间的水平距离（以像素为单位）。</p>
		*/
		__getset(0,__proto,'right',function(){
			return this._layout.right;
			},function(value){
			if (value !=this._layout.right){
				this.getLayout().right=value;
				this._setLayoutEnabled(true);
			}
			this.resetLayoutX();
		});

		/**
		*<p>在父容器中，此对象的水平方向中轴线与父容器的水平方向中心线的距离（以像素为单位）。</p>
		*/
		__getset(0,__proto,'centerX',function(){
			return this._layout.centerX;
			},function(value){
			if (value !=this._layout.centerX){
				this.getLayout().centerX=value;
				this._setLayoutEnabled(true);
			}
			this.resetLayoutX();
		});

		/**
		*<p>在父容器中，此对象的垂直方向中轴线与父容器的垂直方向中心线的距离（以像素为单位）。</p>
		*/
		__getset(0,__proto,'centerY',function(){
			return this._layout.centerY;
			},function(value){
			if (value !=this._layout.centerY){
				this.getLayout().centerY=value;
				this._setLayoutEnabled(true);
			}
			this.resetLayoutY();
		});

		/**X轴锚点，值为0-1*/
		__getset(0,__proto,'anchorX',function(){
			return this._layout.anchorX;
			},function(value){
			if (value !=this._layout.anchorX){
				this.getLayout().anchorX=value;
				this._setLayoutEnabled(true);
			}
			this.resetLayoutX();
		});

		/**Y轴锚点，值为0-1*/
		__getset(0,__proto,'anchorY',function(){
			return this._layout.anchorY;
			},function(value){
			if (value !=this._layout.anchorY){
				this.getLayout().anchorY=value;
				this._setLayoutEnabled(true);
			}
			this.resetLayoutY();
		});

		/**
		*<p>对象的标签。</p>
		*@internal 冗余字段，可以用来储存数据。
		*/
		__getset(0,__proto,'tag',function(){
			return this._tag;
			},function(value){
			this._tag=value;
		});

		/**
		*<p>鼠标悬停提示。</p>
		*<p>可以赋值为文本 <code>String</code> 或函数 <code>Handler</code> ，用来实现自定义样式的鼠标提示和参数携带等。</p>
		*@example
		*private var _testTips:TestTipsUI=new TestTipsUI();
		*private function testTips():void {
			//简单鼠标提示
			*btn2.toolTip="这里是鼠标提示&lt;b&gt;粗体&lt;/b&gt;&lt;br&gt;换行";
			//自定义的鼠标提示
			*btn1.toolTip=showTips1;
			//带参数的自定义鼠标提示
			*clip.toolTip=new Handler(this,showTips2,["clip"]);
			*}
		*private function showTips1():void {
			*_testTips.label.text="这里是按钮["+btn1.label+"]";
			*tip.addChild(_testTips);
			*}
		*private function showTips2(name:String):void {
			*_testTips.label.text="这里是"+name;
			*tip.addChild(_testTips);
			*}
		*/
		__getset(0,__proto,'toolTip',function(){
			return this._toolTip;
			},function(value){
			if (this._toolTip !=value){
				this._toolTip=value;
				if (value !=null){
					this.on(/*laya.events.Event.MOUSE_OVER*/"mouseover",this,this.onMouseOver);
					this.on(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.onMouseOut);
					}else {
					this.off(/*laya.events.Event.MOUSE_OVER*/"mouseover",this,this.onMouseOver);
					this.off(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.onMouseOut);
				}
			}
		});

		/**
		*XML 数据。
		*/
		__getset(0,__proto,'comXml',function(){
			return this._comXml;
			},function(value){
			this._comXml=value;
		});

		/**是否变灰。*/
		__getset(0,__proto,'gray',function(){
			return this._gray;
			},function(value){
			if (value!==this._gray){
				this._gray=value;
				UIUtils.gray(this,value);
			}
		});

		/**是否禁用页面，设置为true后，会变灰并且禁用鼠标。*/
		__getset(0,__proto,'disabled',function(){
			return this._disabled;
			},function(value){
			if (value!==this._disabled){
				this.gray=this._disabled=value;
				this.mouseEnabled=!value;
			}
		});

		return Component;
	})(Sprite)


	/**
	*<code>DialogManager</code> 对话框管理容器，所有的对话框都在该容器内，并且受管理器管理。
	*任意对话框打开和关闭，都会出发管理类的open和close事件
	*可以通过UIConfig设置弹出框背景透明度，模式窗口点击边缘是否关闭，点击窗口是否切换层次等
	*通过设置对话框的zOrder属性，可以更改弹出的层次
	*/
	//class laya.ui.DialogManager extends laya.display.Sprite
	var DialogManager=(function(_super){
		function DialogManager(){
			this.lockLayer=null;
			this.popupEffect=function(dialog){
				dialog.scale(1,1);
				Tween.from(dialog,{x:Laya.stage.width / 2,y:Laya.stage.height / 2,scaleX:0,scaleY:0},300,Ease.backOut,Handler.create(this,this.doOpen,[dialog]));
			}
			this.closeEffect=function(dialog,type){
				Tween.to(dialog,{x:Laya.stage.width / 2,y:Laya.stage.height / 2,scaleX:0,scaleY:0},300,Ease.strongOut,Handler.create(this,this.doClose,[dialog,type]));
			}
			DialogManager.__super.call(this);
			this.maskLayer=new Sprite();
			this.popupEffectHandler=new Handler(this,this.popupEffect);
			this.closeEffectHandler=new Handler(this,this.closeEffect);
			this.mouseEnabled=this.maskLayer.mouseEnabled=true;
			this.zOrder=1000;
			Laya.stage.addChild(this);
			Laya.stage.on(/*laya.events.Event.RESIZE*/"resize",this,this._onResize);
			if (UIConfig.closeDialogOnSide)this.maskLayer.on("click",this,this._closeOnSide);
			this._onResize(null);
		}

		__class(DialogManager,'laya.ui.DialogManager',_super);
		var __proto=DialogManager.prototype;
		__proto._closeOnSide=function(){
			var dialog=this.getChildAt(this.numChildren-1);
			if ((dialog instanceof laya.ui.Dialog ))dialog.close("side");
		}

		/**设置锁定界面，如果为空则什么都不显示*/
		__proto.setLockView=function(value){
			if (!this.lockLayer){
				this.lockLayer=new Box();
				this.lockLayer.mouseEnabled=true;
				this.lockLayer.size(Laya.stage.width,Laya.stage.height);
			}
			this.lockLayer.removeChildren();
			if (value){
				value.centerX=value.centerY=0;
				this.lockLayer.addChild(value);
			}
		}

		/**@private */
		__proto._onResize=function(e){
			var width=this.maskLayer.width=Laya.stage.width;
			var height=this.maskLayer.height=Laya.stage.height;
			if (this.lockLayer)this.lockLayer.size(width,height);
			this.maskLayer.graphics.clear();
			this.maskLayer.graphics.drawRect(0,0,width,height,UIConfig.popupBgColor);
			this.maskLayer.alpha=UIConfig.popupBgAlpha;
			for (var i=this.numChildren-1;i >-1;i--){
				var item=this.getChildAt(i);
				if (item.popupCenter)this._centerDialog(item);
			}
		}

		__proto._centerDialog=function(dialog){
			dialog.x=Math.round(((Laya.stage.width-dialog.width)>> 1)+dialog.pivotX);
			dialog.y=Math.round(((Laya.stage.height-dialog.height)>> 1)+dialog.pivotY);
		}

		/**
		*显示对话框(非模式窗口类型)。
		*@param dialog 需要显示的对象框 <code>Dialog</code> 实例。
		*@param closeOther 是否关闭其它对话框，若值为ture，则关闭其它的对话框。
		*/
		__proto.open=function(dialog,closeOther){
			(closeOther===void 0)&& (closeOther=false);
			if (closeOther)this._closeAll();
			if (dialog.popupCenter)this._centerDialog(dialog);
			this.addChild(dialog);
			if (dialog.isModal || this._$P["hasZorder"])this.timer.callLater(this,this._checkMask);
			if (dialog.popupEffect !=null)dialog.popupEffect.runWith(dialog);
			else this.doOpen(dialog);
			this.event(/*laya.events.Event.OPEN*/"open");
		}

		/**
		*执行打开对话框。
		*@param dialog 需要关闭的对象框 <code>Dialog</code> 实例。
		*@param type 关闭的类型，默认为空
		*/
		__proto.doOpen=function(dialog){
			dialog.onOpened();
		}

		/**
		*锁定所有层，显示加载条信息，防止双击
		*/
		__proto.lock=function(value){
			if (this.lockLayer){
				if (value)this.addChild(this.lockLayer);
				else this.lockLayer.removeSelf();
			}
		}

		/**
		*关闭对话框。
		*@param dialog 需要关闭的对象框 <code>Dialog</code> 实例。
		*@param type 关闭的类型，默认为空
		*/
		__proto.close=function(dialog,type){
			if (dialog.closeEffect !=null)dialog.closeEffect.runWith([dialog,type]);
			else this.doClose(dialog,type);
			this.event(/*laya.events.Event.CLOSE*/"close");
		}

		/**
		*执行关闭对话框。
		*@param dialog 需要关闭的对象框 <code>Dialog</code> 实例。
		*@param type 关闭的类型，默认为空
		*/
		__proto.doClose=function(dialog,type){
			dialog.removeSelf();
			dialog.isModal && this._checkMask();
			dialog.closeHandler && dialog.closeHandler.runWith(type);
			dialog.onClosed(type);
		}

		/**
		*关闭所有的对话框。
		*/
		__proto.closeAll=function(){
			this._closeAll();
			this.event(/*laya.events.Event.CLOSE*/"close");
		}

		/**@private */
		__proto._closeAll=function(){
			for (var i=this.numChildren-1;i >-1;i--){
				var item=this.getChildAt(i);
				if (item.close!=null){
					this.doClose(item);
				}
			}
		}

		/**
		*根据组获取所有对话框
		*@param group 组名称
		*@return 对话框数组
		*/
		__proto.getDialogsByGroup=function(group){
			var arr=[];
			for (var i=this.numChildren-1;i >-1;i--){
				var item=this.getChildAt(i);
				if (item.group===group){
					arr.push(item);
				}
			}
			return arr;
		}

		/**
		*根据组关闭所有弹出框
		*@param group 需要关闭的组名称
		*@return 需要关闭的对话框数组
		*/
		__proto.closeByGroup=function(group){
			var arr=[];
			for (var i=this.numChildren-1;i >-1;i--){
				var item=this.getChildAt(i);
				if (item.group===group){
					item.close();
					arr.push(item);
				}
			}
			return arr;
		}

		/**@private 发生层次改变后，重新检查遮罩层是否正确*/
		__proto._checkMask=function(){
			this.maskLayer.removeSelf();
			for (var i=this.numChildren-1;i >-1;i--){
				var dialog=this.getChildAt(i);
				if (dialog && dialog.isModal){
					this.addChildAt(this.maskLayer,i);
					return;
				}
			}
		}

		return DialogManager;
	})(Sprite)


	/**
	*<code>Box</code> 类是一个控件容器类。
	*/
	//class laya.ui.Box extends laya.ui.Component
	var Box=(function(_super){
		function Box(){Box.__super.call(this);;
		};

		__class(Box,'laya.ui.Box',_super);
		var __proto=Box.prototype;
		Laya.imps(__proto,{"laya.ui.IBox":true})
		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			for (var name in value){
				var comp=this.getChildByName(name);
				if (comp)comp.dataSource=value[name];
				else if (this.hasOwnProperty(name)&& !((typeof (this[name])=='function')))this[name]=value[name];
			}
		});

		return Box;
	})(Component)


	/**
	*<code>Button</code> 组件用来表示常用的多态按钮。 <code>Button</code> 组件可显示文本标签、图标或同时显示两者。 *
	*<p>可以是单态，两态和三态，默认三态(up,over,down)。</p>
	*
	*@example <caption>以下示例代码，创建了一个 <code>Button</code> 实例。</caption>
	*package
	*{
		*import laya.ui.Button;
		*import laya.utils.Handler;
		*public class Button_Example
		*{
			*public function Button_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load("resource/ui/button.png",Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*trace("资源加载完成！");
				*var button:Button=new Button("resource/ui/button.png","label");//创建一个 Button 类的实例对象 button ,并传入它的皮肤。
				*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
				*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
				*button.clickHandler=new Handler(this,onClickButton,[button]);//设置 button 的点击事件处理器。
				*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
				*}
			*private function onClickButton(button:Button):void
			*{
				*trace("按钮button被点击了！");
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
	*Laya.loader.load("resource/ui/button.png",laya.utils.Handler.create(this,loadComplete));//加载资源
	*function loadComplete()
	*{
		*console.log("资源加载完成！");
		*var button=new laya.ui.Button("resource/ui/button.png","label");//创建一个 Button 类的实例对象 button ,传入它的皮肤skin和标签label。
		*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
		*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
		*button.clickHandler=laya.utils.Handler.create(this,onClickButton,[button],false);//设置 button 的点击事件处理函数。
		*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
		*}
	*function onClickButton(button)
	*{
		*console.log("按钮被点击了。",button);
		*}
	*@example
	*import Button=laya.ui.Button;
	*import Handler=laya.utils.Handler;
	*class Button_Example{
		*constructor()
		*{
			*Laya.init(640,800);
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/button.png",laya.utils.Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete()
		*{
			*var button:Button=new Button("resource/ui/button.png","label");//创建一个 Button 类的实例对象 button ,并传入它的皮肤。
			*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
			*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
			*button.clickHandler=new Handler(this,this.onClickButton,[button]);//设置 button 的点击事件处理器。
			*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
			*}
		*private onClickButton(button:Button):void
		*{
			*console.log("按钮button被点击了！")
			*}
		*}
	*/
	//class laya.ui.Button extends laya.ui.Component
	var Button=(function(_super){
		function Button(skin,label){
			this.toggle=false;
			this._bitmap=null;
			this._text=null;
			this._strokeColors=null;
			this._state=0;
			this._selected=false;
			this._skin=null;
			this._autoSize=true;
			this._sources=null;
			this._clickHandler=null;
			this._stateChanged=false;
			Button.__super.call(this);
			this._labelColors=Styles.buttonLabelColors;
			this._stateNum=Styles.buttonStateNum;
			(label===void 0)&& (label="");
			this.skin=skin;
			this.label=label;
		}

		__class(Button,'laya.ui.Button',_super);
		var __proto=Button.prototype;
		Laya.imps(__proto,{"laya.ui.ISelect":true})
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._bitmap && this._bitmap.destroy();
			this._text && this._text.destroy(destroyChild);
			this._bitmap=null;
			this._text=null;
			this._clickHandler=null;
			this._labelColors=this._sources=this._strokeColors=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.graphics=this._bitmap=new AutoBitmap();
		}

		/**@private */
		__proto.createText=function(){
			if (!this._text){
				this._text=new Text();
				this._text.overflow=Text.HIDDEN;
				this._text.align="center";
				this._text.valign="middle";
				this._text.width=this._width;
				this._text.height=this._height;
			}
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			if (this._mouseEnableState!==1){
				this.mouseEnabled=true;
				this._setBit(/*laya.display.Node.MOUSEENABLE*/0x2,true);
			}
			this._createListener(/*laya.events.Event.MOUSE_OVER*/"mouseover",this,this.onMouse,null,false,false);
			this._createListener(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.onMouse,null,false,false);
			this._createListener(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onMouse,null,false,false);
			this._createListener(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.onMouse,null,false,false);
			this._createListener(/*laya.events.Event.CLICK*/"click",this,this.onMouse,null,false,false);
		}

		/**
		*对象的 <code>Event.MOUSE_OVER、Event.MOUSE_OUT、Event.MOUSE_DOWN、Event.MOUSE_UP、Event.CLICK</code> 事件侦听处理函数。
		*@param e Event 对象。
		*/
		__proto.onMouse=function(e){
			if (this.toggle===false && this._selected)return;
			if (e.type===/*laya.events.Event.CLICK*/"click"){
				this.toggle && (this.selected=!this._selected);
				this._clickHandler && this._clickHandler.run();
				return;
			}
			!this._selected && (this.state=Button.stateMap[e.type]);
		}

		/**
		*@private
		*对象的资源切片发生改变。
		*/
		__proto.changeClips=function(){
			var img=Loader.getRes(this._skin);
			if (!img){
				console.log("lose skin",this._skin);
				return;
			};
			var width=img.sourceWidth;
			var height=img.sourceHeight / this._stateNum;
			img.$_GID || (img.$_GID=Utils.getGID());
			var key=img.$_GID+"-"+this._stateNum;
			var clips=WeakObject.I.get(key);
			if (clips)this._sources=clips;
			else {
				this._sources=[];
				if (this._stateNum===1){
					this._sources.push(img);
					}else {
					for (var i=0;i < this._stateNum;i++){
						this._sources.push(Texture.createFromTexture(img,0,height *i,width,height));
					}
				}
				WeakObject.I.set(key,this._sources);
			}
			if (this._autoSize){
				this._bitmap.width=this._width || width;
				this._bitmap.height=this._height || height;
				if (this._text){
					this._text.width=this._bitmap.width;
					this._text.height=this._bitmap.height;
				}
				}else {
				this._text && (this._text.x=width);
			}
		}

		/**
		*@private
		*改变对象的状态。
		*/
		__proto.changeState=function(){
			this._stateChanged=false;
			this.runCallLater(this.changeClips);
			var index=this._state < this._stateNum ? this._state :this._stateNum-1;
			this._sources && (this._bitmap.source=this._sources[index]);
			if (this.label){
				this._text.color=this._labelColors[index];
				if (this._strokeColors)this._text.strokeColor=this._strokeColors[index];
			}
		}

		/**@private */
		__proto._setStateChanged=function(){
			if (!this._stateChanged){
				this._stateChanged=true;
				this.callLater(this.changeState);
			}
		}

		/**
		*<p>描边颜色，以字符串表示。</p>
		*默认值为 "#000000"（黑色）;
		*@see laya.display.Text.strokeColor()
		*/
		__getset(0,__proto,'labelStrokeColor',function(){
			this.createText();
			return this._text.strokeColor;
			},function(value){
			this.createText();
			this._text.strokeColor=value
		});

		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'measureHeight',function(){
			this.runCallLater(this.changeClips);
			return this._text ? Math.max(this._bitmap.height,this._text.height):this._bitmap.height;
		});

		/**
		*<p>对象的皮肤资源地址。</p>
		*支持单态，两态和三态，用 <code>stateNum</code> 属性设置
		*<p>对象的皮肤地址，以字符串表示。</p>
		*@see #stateNum
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				this.callLater(this.changeClips);
				this._setStateChanged();
			}
		});

		/**
		*对象的状态值。
		*@see #stateMap
		*/
		__getset(0,__proto,'state',function(){
			return this._state;
			},function(value){
			if (this._state !=value){
				this._state=value;
				this._setStateChanged();
			}
		});

		/**
		*按钮文本标签 <code>Text</code> 控件。
		*/
		__getset(0,__proto,'text',function(){
			this.createText();
			return this._text;
		});

		/**
		*<p>指定对象的状态值，以数字表示。</p>
		*<p>默认值为3。此值决定皮肤资源图片的切割方式。</p>
		*<p><b>取值：</b>
		*<li>1：单态。图片不做切割，按钮的皮肤状态只有一种。</li>
		*<li>2：两态。图片将以竖直方向被等比切割为2部分，从上向下，依次为
		*弹起状态皮肤、
		*按下和经过及选中状态皮肤。</li>
		*<li>3：三态。图片将以竖直方向被等比切割为3部分，从上向下，依次为
		*弹起状态皮肤、
		*经过状态皮肤、
		*按下和选中状态皮肤</li>
		*</p>
		*/
		__getset(0,__proto,'stateNum',function(){
			return this._stateNum;
			},function(value){
			if ((typeof value=='string')){
				value=parseInt(value);
			}
			if (this._stateNum !=value){
				this._stateNum=value < 1 ? 1 :value > 3 ? 3 :value;
				this.callLater(this.changeClips);
			}
		});

		/**
		*表示按钮各个状态下的描边颜色。
		*<p><b>格式:</b> "upColor,overColor,downColor,disableColor"。</p>
		*/
		__getset(0,__proto,'strokeColors',function(){
			return this._strokeColors ? this._strokeColors.join(","):"";
			},function(value){
			this._strokeColors=UIUtils.fillArray(Styles.buttonLabelColors,value,String);
			this._setStateChanged();
		});

		/**
		*表示按钮各个状态下的文本颜色。
		*<p><b>格式:</b> "upColor,overColor,downColor,disableColor"。</p>
		*/
		__getset(0,__proto,'labelColors',function(){
			return this._labelColors.join(",");
			},function(value){
			this._labelColors=UIUtils.fillArray(Styles.buttonLabelColors,value,String);
			this._setStateChanged();
		});

		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'measureWidth',function(){
			this.runCallLater(this.changeClips);
			if (this._autoSize)return this._bitmap.width;
			this.runCallLater(this.changeState);
			return this._bitmap.width+(this._text ? this._text.width :0);
		});

		/**
		*按钮的文本内容。
		*/
		__getset(0,__proto,'label',function(){
			return this._text ? this._text.text :null;
			},function(value){
			if (!this._text && !value)return;
			this.createText();
			if (this._text.text !=value){
				value && !this._text.parent && this.addChild(this._text);
				this._text.text=(value+"").replace(/\\n/g,"\n");
				this._setStateChanged();
			}
		});

		/**
		*表示按钮的选中状态。
		*<p>如果值为true，表示该对象处于选中状态。否则该对象处于未选中状态。</p>
		*/
		__getset(0,__proto,'selected',function(){
			return this._selected;
			},function(value){
			if (this._selected !=value){
				this._selected=value;
				this.state=this._selected ? 2 :0;
				this.event(/*laya.events.Event.CHANGE*/"change");
			}
		});

		/**
		*表示按钮文本标签的边距。
		*<p><b>格式：</b>"上边距,右边距,下边距,左边距"。</p>
		*/
		__getset(0,__proto,'labelPadding',function(){
			this.createText();
			return this._text.padding.join(",");
			},function(value){
			this.createText();
			this._text.padding=UIUtils.fillArray(Styles.labelPadding,value,Number);
		});

		/**
		*表示按钮文本标签的字体大小。
		*@see laya.display.Text.fontSize()
		*/
		__getset(0,__proto,'labelSize',function(){
			this.createText();
			return this._text.fontSize;
			},function(value){
			this.createText();
			this._text.fontSize=value
		});

		/**
		*<p>描边宽度（以像素为单位）。</p>
		*默认值0，表示不描边。
		*@see laya.display.Text.stroke()
		*/
		__getset(0,__proto,'labelStroke',function(){
			this.createText();
			return this._text.stroke;
			},function(value){
			this.createText();
			this._text.stroke=value
		});

		/**
		*表示按钮文本标签是否为粗体字。
		*@see laya.display.Text.bold()
		*/
		__getset(0,__proto,'labelBold',function(){
			this.createText();
			return this._text.bold;
			},function(value){
			this.createText();
			this._text.bold=value;
		});

		/**
		*表示按钮文本标签的字体名称，以字符串形式表示。
		*@see laya.display.Text.font()
		*/
		__getset(0,__proto,'labelFont',function(){
			this.createText();
			return this._text.font;
			},function(value){
			this.createText();
			this._text.font=value;
		});

		/**标签对齐模式，默认为居中对齐。*/
		__getset(0,__proto,'labelAlign',function(){
			this.createText()
			return this._text.align;
			},function(value){
			this.createText()
			this._text.align=value;
		});

		/**
		*对象的点击事件处理器函数（无默认参数）。
		*/
		__getset(0,__proto,'clickHandler',function(){
			return this._clickHandler;
			},function(value){
			this._clickHandler=value;
		});

		/**
		*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			if (this._bitmap.sizeGrid)return this._bitmap.sizeGrid.join(",");
			return null;
			},function(value){
			this._bitmap.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			if (this._autoSize){
				this._bitmap.width=value;
				this._text && (this._text.width=value);
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			if (this._autoSize){
				this._bitmap.height=value;
				this._text && (this._text.height=value);
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='number')|| (typeof value=='string'))this.label=value+"";
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**图标x,y偏移，格式：100,100*/
		__getset(0,__proto,'iconOffset',function(){
			return this._bitmap._offset ? this._bitmap._offset.join(","):null;
			},function(value){
			if (value)this._bitmap._offset=UIUtils.fillArray([1,1],value,Number);
			else this._bitmap._offset=[];
		});

		__static(Button,
		['stateMap',function(){return this.stateMap={"mouseup":0,"mouseover":1,"mousedown":2,"mouseout":0};}
		]);
		return Button;
	})(Component)


	/**
	*<p> <code>Clip</code> 类是位图切片动画。</p>
	*<p> <code>Clip</code> 可将一张图片，按横向分割数量 <code>clipX</code> 、竖向分割数量 <code>clipY</code> ，
	*或横向分割每个切片的宽度 <code>clipWidth</code> 、竖向分割每个切片的高度 <code>clipHeight</code> ，
	*从左向右，从上到下，分割组合为一个切片动画。</p>
	*Image和Clip组件是唯一支持异步加载的两个组件，比如clip.skin="abc/xxx.png"，其他UI组件均不支持异步加载。
	*
	*@example <caption>以下示例代码，创建了一个 <code>Clip</code> 实例。</caption>
	*package
	*{
		*import laya.ui.Clip;
		*public class Clip_Example
		*{
			*private var clip:Clip;
			*public function Clip_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*onInit();
				*}
			*private function onInit():void
			*{
				*clip=new Clip("resource/ui/clip_num.png",10,1);//创建一个 Clip 类的实例对象 clip ,传入它的皮肤skin和横向分割数量、竖向分割数量。
				*clip.autoPlay=true;//设置 clip 动画自动播放。
				*clip.interval=100;//设置 clip 动画的播放时间间隔。
				*clip.x=100;//设置 clip 对象的属性 x 的值，用于控制 clip 对象的显示位置。
				*clip.y=100;//设置 clip 对象的属性 y 的值，用于控制 clip 对象的显示位置。
				*clip.on(Event.CLICK,this,onClick);//给 clip 添加点击事件函数侦听。
				*Laya.stage.addChild(clip);//将此 clip 对象添加到显示列表。
				*}
			*private function onClick():void
			*{
				*trace("clip 的点击事件侦听处理函数。clip.total="+clip.total);
				*if (clip.isPlaying==true)
				*{
					*clip.stop();//停止动画。
					*}else {
					*clip.play();//播放动画。
					*}
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var clip;
	*Laya.loader.load("resource/ui/clip_num.png",laya.utils.Handler.create(this,loadComplete));//加载资源
	*function loadComplete(){
		*console.log("资源加载完成！");
		*clip=new laya.ui.Clip("resource/ui/clip_num.png",10,1);//创建一个 Clip 类的实例对象 clip ,传入它的皮肤skin和横向分割数量、竖向分割数量。
		*clip.autoPlay=true;//设置 clip 动画自动播放。
		*clip.interval=100;//设置 clip 动画的播放时间间隔。
		*clip.x=100;//设置 clip 对象的属性 x 的值，用于控制 clip 对象的显示位置。
		*clip.y=100;//设置 clip 对象的属性 y 的值，用于控制 clip 对象的显示位置。
		*clip.on(Event.CLICK,this,onClick);//给 clip 添加点击事件函数侦听。
		*Laya.stage.addChild(clip);//将此 clip 对象添加到显示列表。
		*}
	*function onClick()
	*{
		*console.log("clip 的点击事件侦听处理函数。");
		*if(clip.isPlaying==true)
		*{
			*clip.stop();
			*}else {
			*clip.play();
			*}
		*}
	*@example
	*import Clip=laya.ui.Clip;
	*import Handler=laya.utils.Handler;
	*class Clip_Example {
		*private clip:Clip;
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*this.onInit();
			*}
		*private onInit():void {
			*this.clip=new Clip("resource/ui/clip_num.png",10,1);//创建一个 Clip 类的实例对象 clip ,传入它的皮肤skin和横向分割数量、竖向分割数量。
			*this.clip.autoPlay=true;//设置 clip 动画自动播放。
			*this.clip.interval=100;//设置 clip 动画的播放时间间隔。
			*this.clip.x=100;//设置 clip 对象的属性 x 的值，用于控制 clip 对象的显示位置。
			*this.clip.y=100;//设置 clip 对象的属性 y 的值，用于控制 clip 对象的显示位置。
			*this.clip.on(laya.events.Event.CLICK,this,this.onClick);//给 clip 添加点击事件函数侦听。
			*Laya.stage.addChild(this.clip);//将此 clip 对象添加到显示列表。
			*}
		*private onClick():void {
			*console.log("clip 的点击事件侦听处理函数。clip.total="+this.clip.total);
			*if (this.clip.isPlaying==true){
				*this.clip.stop();//停止动画。
				*}else {
				*this.clip.play();//播放动画。
				*}
			*}
		*}
	*
	*/
	//class laya.ui.Clip extends laya.ui.Component
	var Clip=(function(_super){
		function Clip(url,clipX,clipY){
			this._sources=null;
			this._bitmap=null;
			this._skin=null;
			this._clipX=1;
			this._clipY=1;
			this._clipWidth=0;
			this._clipHeight=0;
			this._autoPlay=false;
			this._interval=50;
			this._complete=null;
			this._isPlaying=false;
			this._index=0;
			this._clipChanged=false;
			this._group=null;
			Clip.__super.call(this);
			(clipX===void 0)&& (clipX=1);
			(clipY===void 0)&& (clipY=1);
			this._clipX=clipX;
			this._clipY=clipY;
			this.skin=url;
		}

		__class(Clip,'laya.ui.Clip',_super);
		var __proto=Clip.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,true);
			this._bitmap && this._bitmap.destroy();
			this._bitmap=null;
			this._sources=null;
		}

		/**
		*销毁对象并释放加载的皮肤资源。
		*/
		__proto.dispose=function(){
			this.destroy(true);
			Laya.loader.clearRes(this._skin);
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.graphics=this._bitmap=new AutoBitmap();
		}

		/**@private */
		__proto._onDisplay=function(e){
			if (this._isPlaying){
				if (this._displayedInStage)this.play();
				else this.stop();
				}else if (this._autoPlay){
				this.play();
			}
		}

		/**
		*@private
		*改变切片的资源、切片的大小。
		*/
		__proto.changeClip=function(){
			this._clipChanged=false;
			if (!this._skin)return;
			var img=Loader.getRes(this._skin);
			if (img){
				this.loadComplete(this._skin,img);
				}else {
				Laya.loader.load(this._skin,Handler.create(this,this.loadComplete,[this._skin]));
			}
		}

		/**
		*@private
		*加载切片图片资源完成函数。
		*@param url 资源地址。
		*@param img 纹理。
		*/
		__proto.loadComplete=function(url,img){
			if (url===this._skin && img){
				var w=this._clipWidth || Math.ceil(img.sourceWidth / this._clipX);
				var h=this._clipHeight || Math.ceil(img.sourceHeight / this._clipY);
				var key=this._skin+w+h;
				var clips=WeakObject.I.get(key);
				if (clips)this._sources=clips;
				else {
					this._sources=[];
					for (var i=0;i < this._clipY;i++){
						for (var j=0;j < this._clipX;j++){
							this._sources.push(Texture.createFromTexture(img,w *j,h *i,w,h));
						}
					}
					WeakObject.I.set(key,this._sources);
				}
				this.index=this._index;
				this.event(/*laya.events.Event.LOADED*/"loaded");
				this.onCompResize();
			}
		}

		/**
		*播放动画。
		*/
		__proto.play=function(){
			this._isPlaying=true;
			this.index=0;
			this._index++;
			Laya.timer.loop(this.interval,this,this._loop);
			this.on(/*laya.events.Event.DISPLAY*/"display",this,this._onDisplay);
			this.on(/*laya.events.Event.UNDISPLAY*/"undisplay",this,this._onDisplay);
		}

		/**
		*@private
		*/
		__proto._loop=function(){
			if (this._style.visible && this._sources){
				this.index=this._index,this._index++;
				this._index >=this._sources.length && (this._index=0);
			}
		}

		/**
		*停止动画。
		*/
		__proto.stop=function(){
			this._isPlaying=false;
			Laya.timer.clear(this,this._loop);
		}

		/**@private */
		__proto._setClipChanged=function(){
			if (!this._clipChanged){
				this._clipChanged=true;
				this.callLater(this.changeClip);
			}
		}

		/**
		*表示动画播放间隔时间(以毫秒为单位)。
		*/
		__getset(0,__proto,'interval',function(){
			return this._interval;
			},function(value){
			if (this._interval !=value){
				this._interval=value;
				if (this._isPlaying)this.play();
			}
		});

		/**
		*@copy laya.ui.Image#skin
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				if (value){
					this._setClipChanged()
					}else {
					this._bitmap.source=null;
				}
			}
		});

		/**
		*源数据。
		*/
		__getset(0,__proto,'sources',function(){
			return this._sources;
			},function(value){
			this._sources=value;
			this.index=this._index;
			this.event(/*laya.events.Event.LOADED*/"loaded");
		});

		/**X轴（横向）切片数量。*/
		__getset(0,__proto,'clipX',function(){
			return this._clipX;
			},function(value){
			this._clipX=value || 1;
			this._setClipChanged()
		});

		/**Y轴(竖向)切片数量。*/
		__getset(0,__proto,'clipY',function(){
			return this._clipY;
			},function(value){
			this._clipY=value || 1;
			this._setClipChanged()
		});

		/**
		*切片动画的总帧数。
		*/
		__getset(0,__proto,'total',function(){
			this.runCallLater(this.changeClip);
			return this._sources ? this._sources.length :0;
		});

		/**
		*横向分割时每个切片的宽度，与 <code>clipX</code> 同时设置时优先级高于 <code>clipX</code> 。
		*/
		__getset(0,__proto,'clipWidth',function(){
			return this._clipWidth;
			},function(value){
			this._clipWidth=value;
			this._setClipChanged()
		});

		/**
		*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			if (this._bitmap.sizeGrid)return this._bitmap.sizeGrid.join(",");
			return null;
			},function(value){
			this._bitmap.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
		});

		/**
		*资源分组。
		*/
		__getset(0,__proto,'group',function(){
			return this._group;
			},function(value){
			if (value && this._skin)Loader.setGroup(this._skin,value);
			this._group=value;
		});

		/**
		*竖向分割时每个切片的高度，与 <code>clipY</code> 同时设置时优先级高于 <code>clipY</code> 。
		*/
		__getset(0,__proto,'clipHeight',function(){
			return this._clipHeight;
			},function(value){
			this._clipHeight=value;
			this._setClipChanged()
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._bitmap.width=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._bitmap.height=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureWidth',function(){
			this.runCallLater(this.changeClip);
			return this._bitmap.width;
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureHeight',function(){
			this.runCallLater(this.changeClip);
			return this._bitmap.height;
		});

		/**
		*当前帧索引。
		*/
		__getset(0,__proto,'index',function(){
			return this._index;
			},function(value){
			this._index=value;
			this._bitmap && this._sources && (this._bitmap.source=this._sources[value]);
			this.event(/*laya.events.Event.CHANGE*/"change");
		});

		/**
		*表示是否自动播放动画，若自动播放值为true,否则值为false;
		*<p>可控制切片动画的播放、停止。</p>
		*/
		__getset(0,__proto,'autoPlay',function(){
			return this._autoPlay;
			},function(value){
			if (this._autoPlay !=value){
				this._autoPlay=value;
				value ? this.play():this.stop();
			}
		});

		/**
		*表示动画的当前播放状态。
		*如果动画正在播放中，则为true，否则为flash。
		*/
		__getset(0,__proto,'isPlaying',function(){
			return this._isPlaying;
			},function(value){
			this._isPlaying=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.index=parseInt(value);
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**
		*<code>AutoBitmap</code> 位图实例。
		*/
		__getset(0,__proto,'bitmap',function(){
			return this._bitmap;
		});

		return Clip;
	})(Component)


	/**
	*<code>ColorPicker</code> 组件将显示包含多个颜色样本的列表，用户可以从中选择颜色。
	*
	*@example <caption>以下示例代码，创建了一个 <code>ColorPicker</code> 实例。</caption>
	*package
	*{
		*import laya.ui.ColorPicker;
		*import laya.utils.Handler;
		*public class ColorPicker_Example
		*{
			*public function ColorPicker_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load("resource/ui/color.png",Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*trace("资源加载完成！");
				*var colorPicket:ColorPicker=new ColorPicker();//创建一个 ColorPicker 类的实例对象 colorPicket 。
				*colorPicket.skin="resource/ui/color.png";//设置 colorPicket 的皮肤。
				*colorPicket.x=100;//设置 colorPicket 对象的属性 x 的值，用于控制 colorPicket 对象的显示位置。
				*colorPicket.y=100;//设置 colorPicket 对象的属性 y 的值，用于控制 colorPicket 对象的显示位置。
				*colorPicket.changeHandler=new Handler(this,onChangeColor,[colorPicket]);//设置 colorPicket 的颜色改变回调函数。
				*Laya.stage.addChild(colorPicket);//将此 colorPicket 对象添加到显示列表。
				*}
			*private function onChangeColor(colorPicket:ColorPicker):void
			*{
				*trace("当前选择的颜色： "+colorPicket.selectedColor);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load("resource/ui/color.png",laya.utils.Handler.create(this,loadComplete));//加载资源
	*function loadComplete()
	*{
		*console.log("资源加载完成！");
		*var colorPicket=new laya.ui.ColorPicker();//创建一个 ColorPicker 类的实例对象 colorPicket 。
		*colorPicket.skin="resource/ui/color.png";//设置 colorPicket 的皮肤。
		*colorPicket.x=100;//设置 colorPicket 对象的属性 x 的值，用于控制 colorPicket 对象的显示位置。
		*colorPicket.y=100;//设置 colorPicket 对象的属性 y 的值，用于控制 colorPicket 对象的显示位置。
		*colorPicket.changeHandler=laya.utils.Handler.create(this,onChangeColor,[colorPicket],false);//设置 colorPicket 的颜色改变回调函数。
		*Laya.stage.addChild(colorPicket);//将此 colorPicket 对象添加到显示列表。
		*}
	*function onChangeColor(colorPicket)
	*{
		*console.log("当前选择的颜色： "+colorPicket.selectedColor);
		*}
	*@example
	*import ColorPicker=laya.ui.ColorPicker;
	*import Handler=laya.utils.Handler;
	*class ColorPicker_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/color.png",Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*console.log("资源加载完成！");
			*var colorPicket:ColorPicker=new ColorPicker();//创建一个 ColorPicker 类的实例对象 colorPicket 。
			*colorPicket.skin="resource/ui/color.png";//设置 colorPicket 的皮肤。
			*colorPicket.x=100;//设置 colorPicket 对象的属性 x 的值，用于控制 colorPicket 对象的显示位置。
			*colorPicket.y=100;//设置 colorPicket 对象的属性 y 的值，用于控制 colorPicket 对象的显示位置。
			*colorPicket.changeHandler=new Handler(this,this.onChangeColor,[colorPicket]);//设置 colorPicket 的颜色改变回调函数。
			*Laya.stage.addChild(colorPicket);//将此 colorPicket 对象添加到显示列表。
			*}
		*private onChangeColor(colorPicket:ColorPicker):void {
			*console.log("当前选择的颜色： "+colorPicket.selectedColor);
			*}
		*}
	*/
	//class laya.ui.ColorPicker extends laya.ui.Component
	var ColorPicker=(function(_super){
		function ColorPicker(){
			this.changeHandler=null;
			this._gridSize=11;
			this._bgColor="#ffffff";
			this._borderColor="#000000";
			this._inputColor="#000000";
			this._inputBgColor="#efefef";
			this._colorPanel=null;
			this._colorTiles=null;
			this._colorBlock=null;
			this._colorInput=null;
			this._colorButton=null;
			this._colors=[];
			this._selectedColor="#000000";
			this._panelChanged=false;
			ColorPicker.__super.call(this);
		}

		__class(ColorPicker,'laya.ui.ColorPicker',_super);
		var __proto=ColorPicker.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._colorPanel && this._colorPanel.destroy(destroyChild);
			this._colorButton && this._colorButton.destroy(destroyChild);
			this._colorPanel=null;
			this._colorTiles=null;
			this._colorBlock=null;
			this._colorInput=null;
			this._colorButton=null;
			this._colors=null;
			this.changeHandler=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._colorButton=new Button());
			this._colorPanel=new Box();
			this._colorPanel.size(230,166);
			this._colorPanel.addChild(this._colorTiles=new Sprite());
			this._colorPanel.addChild(this._colorBlock=new Sprite());
			this._colorPanel.addChild(this._colorInput=new Input());
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			this._colorButton.on(/*laya.events.Event.CLICK*/"click",this,this.onColorButtonClick);
			this._colorBlock.pos(5,5);
			this._colorInput.pos(60,5);
			this._colorInput.size(60,20);
			this._colorInput.on(/*laya.events.Event.CHANGE*/"change",this,this.onColorInputChange);
			this._colorInput.on(/*laya.events.Event.KEY_DOWN*/"keydown",this,this.onColorFieldKeyDown);
			this._colorTiles.pos(5,30);
			this._colorTiles.on(/*laya.events.Event.MOUSE_MOVE*/"mousemove",this,this.onColorTilesMouseMove);
			this._colorTiles.on(/*laya.events.Event.CLICK*/"click",this,this.onColorTilesClick);
			this._colorTiles.size(20 *this._gridSize,12 *this._gridSize);
			this._colorPanel.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onPanelMouseDown);
			this.bgColor=this._bgColor;
		}

		__proto.onPanelMouseDown=function(e){
			e.stopPropagation();
		}

		/**
		*改变颜色样本列表面板。
		*/
		__proto.changePanel=function(){
			this._panelChanged=false;
			var g=this._colorPanel.graphics;
			g.clear();
			g.drawRect(0,0,230,166,this._bgColor,this._borderColor);
			this.drawBlock(this._selectedColor);
			this._colorInput.borderColor=this._borderColor;
			this._colorInput.bgColor=this._inputBgColor;
			this._colorInput.color=this._inputColor;
			g=this._colorTiles.graphics;
			g.clear();
			var mainColors=[0x000000,0x333333,0x666666,0x999999,0xCCCCCC,0xFFFFFF,0xFF0000,0x00FF00,0x0000FF,0xFFFF00,0x00FFFF,0xFF00FF];
			for (var i=0;i < 12;i++){
				for (var j=0;j < 20;j++){
					var color=0;
					if (j===0)color=mainColors[i];
					else if (j===1)color=0x000000;
					else color=(((i *3+j / 6)% 3 << 0)+((i / 6)<< 0)*3)*0x33 << 16 | j % 6 *0x33 << 8 | (i << 0)% 6 *0x33;
					var strColor=UIUtils.toColor(color);
					this._colors.push(strColor);
					var x=j *this._gridSize;
					var y=i *this._gridSize;
					g.drawRect(x,y,this._gridSize,this._gridSize,strColor,"#000000");
				}
			}
		}

		/**
		*颜色样本列表面板的显示按钮的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*/
		__proto.onColorButtonClick=function(e){
			if (this._colorPanel.parent)this.close();
			else this.open();
		}

		/**
		*打开颜色样本列表面板。
		*/
		__proto.open=function(){
			var p=this.localToGlobal(new Point());
			var px=p.x+this._colorPanel.width <=Laya.stage.width ? p.x :Laya.stage.width-this._colorPanel.width;
			var py=p.y+this._colorButton.height;
			py=py+this._colorPanel.height <=Laya.stage.height ? py :p.y-this._colorPanel.height;
			this._colorPanel.pos(px,py);
			this._colorPanel.zOrder=1001;
			Laya._currentStage.addChild(this._colorPanel);
			Laya.stage.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.removeColorBox);
		}

		/**
		*关闭颜色样本列表面板。
		*/
		__proto.close=function(){
			Laya.stage.off(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.removeColorBox);
			this._colorPanel.removeSelf();
		}

		/**
		*舞台的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*/
		__proto.removeColorBox=function(e){
			this.close();
		}

		/**
		*小格子色块的 <code>Event.KEY_DOWN</code> 事件侦听处理函数。
		*/
		__proto.onColorFieldKeyDown=function(e){
			if (e.keyCode==13){
				if (this._colorInput.text)this.selectedColor=this._colorInput.text;
				else this.selectedColor=null;
				this.close();
				e.stopPropagation();
			}
		}

		/**
		*颜色值输入框 <code>Event.CHANGE</code> 事件侦听处理函数。
		*/
		__proto.onColorInputChange=function(e){
			if (this._colorInput.text)this.drawBlock(this._colorInput.text);
			else this.drawBlock("#FFFFFF");
		}

		/**
		*小格子色块的 <code>Event.CLICK</code> 事件侦听处理函数。
		*/
		__proto.onColorTilesClick=function(e){
			this.selectedColor=this.getColorByMouse();
			this.close();
		}

		/**
		*@private
		*小格子色块的 <code>Event.MOUSE_MOVE</code> 事件侦听处理函数。
		*/
		__proto.onColorTilesMouseMove=function(e){
			this._colorInput.focus=false;
			var color=this.getColorByMouse();
			this._colorInput.text=color;
			this.drawBlock(color);
		}

		/**
		*通过鼠标位置取对应的颜色块的颜色值。
		*/
		__proto.getColorByMouse=function(){
			var point=this._colorTiles.getMousePoint();
			var x=Math.floor(point.x / this._gridSize);
			var y=Math.floor(point.y / this._gridSize);
			return this._colors[y *20+x];
		}

		/**
		*绘制颜色块。
		*@param color 需要绘制的颜色块的颜色值。
		*/
		__proto.drawBlock=function(color){
			var g=this._colorBlock.graphics;
			g.clear();
			var showColor=color ? color :"#ffffff";
			g.drawRect(0,0,50,20,showColor,this._borderColor);
			color || g.drawLine(0,0,50,20,"#ff0000");
		}

		/**
		*改变颜色。
		*/
		__proto.changeColor=function(){
			var g=this.graphics;
			g.clear();
			var showColor=this._selectedColor || "#000000";
			g.drawRect(0,0,this._colorButton.width,this._colorButton.height,showColor);
		}

		/**@private */
		__proto._setPanelChanged=function(){
			if (!this._panelChanged){
				this._panelChanged=true;
				this.callLater(this.changePanel);
			}
		}

		/**
		*表示颜色输入框的背景颜色值。
		*/
		__getset(0,__proto,'inputBgColor',function(){
			return this._inputBgColor;
			},function(value){
			this._inputBgColor=value;
			this._setPanelChanged();
		});

		/**
		*表示选择的颜色值。
		*/
		__getset(0,__proto,'selectedColor',function(){
			return this._selectedColor;
			},function(value){
			if (this._selectedColor !=value){
				this._selectedColor=this._colorInput.text=value;
				this.drawBlock(value);
				this.changeColor();
				this.changeHandler && this.changeHandler.runWith(this._selectedColor);
				this.event(/*laya.events.Event.CHANGE*/"change",Event.EMPTY.setTo(/*laya.events.Event.CHANGE*/"change",this,this));
			}
		});

		/**
		*@copy laya.ui.Button#skin
		*/
		__getset(0,__proto,'skin',function(){
			return this._colorButton.skin;
			},function(value){
			this._colorButton.skin=value;
			this.changeColor();
		});

		/**
		*表示颜色样本列表面板的背景颜色值。
		*/
		__getset(0,__proto,'bgColor',function(){
			return this._bgColor;
			},function(value){
			this._bgColor=value;
			this._setPanelChanged();
		});

		/**
		*表示颜色样本列表面板的边框颜色值。
		*/
		__getset(0,__proto,'borderColor',function(){
			return this._borderColor;
			},function(value){
			this._borderColor=value;
			this._setPanelChanged();
		});

		/**
		*表示颜色样本列表面板选择或输入的颜色值。
		*/
		__getset(0,__proto,'inputColor',function(){
			return this._inputColor;
			},function(value){
			this._inputColor=value;
			this._setPanelChanged();
		});

		return ColorPicker;
	})(Component)


	/**
	*<code>ComboBox</code> 组件包含一个下拉列表，用户可以从该列表中选择单个值。
	*
	*@example <caption>以下示例代码，创建了一个 <code>ComboBox</code> 实例。</caption>
	*package
	*{
		*import laya.ui.ComboBox;
		*import laya.utils.Handler;
		*public class ComboBox_Example
		*{
			*public function ComboBox_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load("resource/ui/button.png",Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*trace("资源加载完成！");
				*var comboBox:ComboBox=new ComboBox("resource/ui/button.png","item0,item1,item2,item3,item4,item5");//创建一个 ComboBox 类的实例对象 comboBox ,传入它的皮肤和标签集。
				*comboBox.x=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
				*comboBox.y=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
				*comboBox.selectHandler=new Handler(this,onSelect);//设置 comboBox 选择项改变时执行的处理器。
				*Laya.stage.addChild(comboBox);//将此 comboBox 对象添加到显示列表。
				*}
			*private function onSelect(index:int):void
			*{
				*trace("当前选中的项对象索引： ",index);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高。
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
	*Laya.loader.load("resource/ui/button.png",laya.utils.Handler.create(this,loadComplete));//加载资源
	*function loadComplete(){
		*console.log("资源加载完成！");
		*var comboBox=new laya.ui.ComboBox("resource/ui/button.png","item0,item1,item2,item3,item4,item5");//创建一个 ComboBox 类的实例对象 comboBox ,传入它的皮肤和标签集。
		*comboBox.x=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
		*comboBox.y=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
		*comboBox.selectHandler=new laya.utils.Handler(this,onSelect);//设置 comboBox 选择项改变时执行的处理器。
		*Laya.stage.addChild(comboBox);//将此 comboBox 对象添加到显示列表。
		*}
	*function onSelect(index)
	*{
		*console.log("当前选中的项对象索引： ",index);
		*}
	*@example
	*import ComboBox=laya.ui.ComboBox;
	*import Handler=laya.utils.Handler;
	*class ComboBox_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/button.png",Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*console.log("资源加载完成！");
			*var comboBox:ComboBox=new ComboBox("resource/ui/button.png","item0,item1,item2,item3,item4,item5");//创建一个 ComboBox 类的实例对象 comboBox ,传入它的皮肤和标签集。
			*comboBox.x=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
			*comboBox.y=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
			*comboBox.selectHandler=new Handler(this,this.onSelect);//设置 comboBox 选择项改变时执行的处理器。
			*Laya.stage.addChild(comboBox);//将此 comboBox 对象添加到显示列表。
			*}
		*private onSelect(index:number):void {
			*console.log("当前选中的项对象索引： ",index);
			*}
		*}
	*
	*/
	//class laya.ui.ComboBox extends laya.ui.Component
	var ComboBox=(function(_super){
		function ComboBox(skin,labels){
			this._visibleNum=6;
			this._button=null;
			this._list=null;
			this._isOpen=false;
			this._itemSize=12;
			this._labels=[];
			this._selectedIndex=-1;
			this._selectHandler=null;
			this._itemHeight=NaN;
			this._listHeight=NaN;
			this._listChanged=false;
			this._itemChanged=false;
			this._scrollBarSkin=null;
			this._isCustomList=false;
			this.itemRender=null;
			ComboBox.__super.call(this);
			this._itemColors=Styles.comboBoxItemColors;
			this.skin=skin;
			this.labels=labels;
		}

		__class(ComboBox,'laya.ui.ComboBox',_super);
		var __proto=ComboBox.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._button && this._button.destroy(destroyChild);
			this._list && this._list.destroy(destroyChild);
			this._button=null;
			this._list=null;
			this._itemColors=null;
			this._labels=null;
			this._selectHandler=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._button=new Button());
			this._button.text.align="left";
			this._button.labelPadding="0,0,0,5";
			this._button.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onButtonMouseDown);
		}

		__proto._createList=function(){
			this._list=new List();
			if (this._scrollBarSkin)this._list.vScrollBarSkin=this._scrollBarSkin;
			this._setListEvent(this._list);
		}

		__proto._setListEvent=function(list){
			this._list.selectEnable=true;
			this._list.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onListDown);
			this._list.mouseHandler=Handler.create(this,this.onlistItemMouse,null,false);
			if (this._list.scrollBar)this._list.scrollBar.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onScrollBarDown);
		}

		/**
		*@private
		*/
		__proto.onListDown=function(e){
			e.stopPropagation();
		}

		__proto.onScrollBarDown=function(e){
			e.stopPropagation();
		}

		__proto.onButtonMouseDown=function(e){
			this.callLater(this.switchTo,[!this._isOpen]);
		}

		/**
		*@private
		*/
		__proto.changeList=function(){
			this._listChanged=false;
			var labelWidth=this.width-2;
			var labelColor=this._itemColors[2];
			this._itemHeight=this._itemSize+6;
			this._list.itemRender=this.itemRender || {type:"Box",child:[{type:"Label",props:{name:"label",x:1,padding:"3,3,3,3",width:labelWidth,height:this._itemHeight,fontSize:this._itemSize,color:labelColor}}]};
			this._list.repeatY=this._visibleNum;
			this._list.refresh();
		}

		/**
		*@private
		*下拉列表的鼠标事件响应函数。
		*/
		__proto.onlistItemMouse=function(e,index){
			var type=e.type;
			if (type===/*laya.events.Event.MOUSE_OVER*/"mouseover" || type===/*laya.events.Event.MOUSE_OUT*/"mouseout"){
				if (this._isCustomList)return;
				var box=this._list.getCell(index);
				if (!box)return;
				var label=box.getChildByName("label");
				if (label){
					if (type===/*laya.events.Event.ROLL_OVER*/"mouseover"){
						label.bgColor=this._itemColors[0];
						label.color=this._itemColors[1];
						}else {
						label.bgColor=null;
						label.color=this._itemColors[2];
					}
				}
				}else if (type===/*laya.events.Event.CLICK*/"click"){
				this.selectedIndex=index;
				this.isOpen=false;
			}
		}

		/**
		*@private
		*/
		__proto.switchTo=function(value){
			this.isOpen=value;
		}

		/**
		*更改下拉列表的打开状态。
		*/
		__proto.changeOpen=function(){
			this.isOpen=!this._isOpen;
		}

		/**
		*更改下拉列表。
		*/
		__proto.changeItem=function(){
			this._itemChanged=false;
			this._listHeight=this._labels.length > 0 ? Math.min(this._visibleNum,this._labels.length)*this._itemHeight :this._itemHeight;
			if (!this._isCustomList){
				var g=this._list.graphics;
				g.clear();
				g.drawRect(0,0,this.width-1,this._listHeight,this._itemColors[4],this._itemColors[3]);
			};
			var a=this._list.array || [];
			a.length=0;
			for (var i=0,n=this._labels.length;i < n;i++){
				a.push({label:this._labels[i]});
			}
			this._list.height=this._listHeight;
			this._list.array=a;
		}

		__proto.changeSelected=function(){
			this._button.label=this.selectedLabel;
		}

		/**
		*关闭下拉列表。
		*/
		__proto.removeList=function(e){
			this.isOpen=false;
		}

		/**
		*表示选择的下拉列表项的索引。
		*/
		__getset(0,__proto,'selectedIndex',function(){
			return this._selectedIndex;
			},function(value){
			if (this._selectedIndex !=value){
				this._selectedIndex=value;
				if (this._labels.length > 0)this.changeSelected();
				else this.callLater(this.changeSelected);
				this.event(/*laya.events.Event.CHANGE*/"change",[Event.EMPTY.setTo(/*laya.events.Event.CHANGE*/"change",this,this)]);
				this._selectHandler && this._selectHandler.runWith(this._selectedIndex);
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureHeight',function(){
			return this._button.height;
		});

		/**
		*@copy laya.ui.Button#skin
		*/
		__getset(0,__proto,'skin',function(){
			return this._button.skin;
			},function(value){
			if (this._button.skin !=value){
				this._button.skin=value;
				this._listChanged=true;
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureWidth',function(){
			return this._button.width;
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._button.width=this._width;
			this._itemChanged=true;
			this._listChanged=true;
		});

		/**
		*表示选择的下拉列表项的的标签。
		*/
		__getset(0,__proto,'selectedLabel',function(){
			return this._selectedIndex >-1 && this._selectedIndex < this._labels.length ? this._labels[this._selectedIndex] :null;
			},function(value){
			this.selectedIndex=this._labels.indexOf(value);
		});

		/**
		*标签集合字符串。
		*/
		__getset(0,__proto,'labels',function(){
			return this._labels.join(",");
			},function(value){
			if (this._labels.length > 0)this.selectedIndex=-1;
			if (value)this._labels=value.split(",");
			else this._labels.length=0;
			this._itemChanged=true;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._button.height=this._height;
		});

		/**
		*改变下拉列表的选择项时执行的处理器(默认返回参数index:int)。
		*/
		__getset(0,__proto,'selectHandler',function(){
			return this._selectHandler;
			},function(value){
			this._selectHandler=value;
		});

		/**
		*获取或设置没有滚动条的下拉列表中可显示的最大行数。
		*/
		__getset(0,__proto,'visibleNum',function(){
			return this._visibleNum;
			},function(value){
			this._visibleNum=value;
			this._listChanged=true;
		});

		/**
		*表示按钮文本标签是否为粗体字。
		*@see laya.display.Text#bold
		*/
		__getset(0,__proto,'labelBold',function(){
			return this._button.text.bold;
			},function(value){
			this._button.text.bold=value
		});

		/**
		*下拉列表项颜色。
		*<p><b>格式：</b>"悬停或被选中时背景颜色,悬停或被选中时标签颜色,标签颜色,边框颜色,背景颜色"</p>
		*/
		__getset(0,__proto,'itemColors',function(){
			return String(this._itemColors)
			},function(value){
			this._itemColors=UIUtils.fillArray(this._itemColors,value,String);
			this._listChanged=true;
		});

		/**
		*下拉列表项标签的字体大小。
		*/
		__getset(0,__proto,'itemSize',function(){
			return this._itemSize;
			},function(value){
			this._itemSize=value;
			this._listChanged=true;
		});

		/**
		*获取对 <code>ComboBox</code> 组件所包含的 <code>VScrollBar</code> 滚动条组件的引用。
		*/
		__getset(0,__proto,'scrollBar',function(){
			return this.list.scrollBar;
		});

		/**
		*表示下拉列表的打开状态。
		*/
		__getset(0,__proto,'isOpen',function(){
			return this._isOpen;
			},function(value){
			if (this._isOpen !=value){
				this._isOpen=value;
				this._button.selected=this._isOpen;
				if (this._isOpen){
					this._list || this._createList();
					this._listChanged && !this._isCustomList && this.changeList();
					this._itemChanged && this.changeItem();
					var p=this.localToGlobal(Point.TEMP.setTo(0,0));
					var py=p.y+this._button.height;
					py=py+this._listHeight <=Laya.stage.height ? py :p.y-this._listHeight;
					this._list.pos(p.x,py);
					this._list.zOrder=1001;
					Laya._currentStage.addChild(this._list);
					Laya.stage.once(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.removeList);
					this._list.selectedIndex=this._selectedIndex;
					}else {
					this._list && this._list.removeSelf();
				}
			}
		});

		/**
		*滚动条皮肤。
		*/
		__getset(0,__proto,'scrollBarSkin',function(){
			return this._scrollBarSkin;
			},function(value){
			this._scrollBarSkin=value;
		});

		/**
		*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			return this._button.sizeGrid;
			},function(value){
			this._button.sizeGrid=value;
		});

		/**
		*获取对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的引用。
		*/
		__getset(0,__proto,'button',function(){
			return this._button;
		});

		/**
		*获取对 <code>ComboBox</code> 组件所包含的 <code>List</code> 列表组件的引用。
		*/
		__getset(0,__proto,'list',function(){
			this._list || this._createList();
			return this._list;
			},function(value){
			if (value){
				value.removeSelf();
				this._isCustomList=true;
				this._list=value;
				this._setListEvent(value);
				this._itemHeight=value.getCell(0).height+value.spaceY;
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.selectedIndex=parseInt(value);
			else if ((value instanceof Array))this.labels=(value).join(",");
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**
		*获取或设置对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的文本标签颜色。
		*<p><b>格式：</b>upColor,overColor,downColor,disableColor</p>
		*/
		__getset(0,__proto,'labelColors',function(){
			return this._button.labelColors;
			},function(value){
			if (this._button.labelColors !=value){
				this._button.labelColors=value;
			}
		});

		/**
		*获取或设置对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的文本边距。
		*<p><b>格式：</b>上边距,右边距,下边距,左边距</p>
		*/
		__getset(0,__proto,'labelPadding',function(){
			return this._button.text.padding.join(",");
			},function(value){
			this._button.text.padding=UIUtils.fillArray(Styles.labelPadding,value,Number);
		});

		/**
		*获取或设置对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的标签字体大小。
		*/
		__getset(0,__proto,'labelSize',function(){
			return this._button.text.fontSize;
			},function(value){
			this._button.text.fontSize=value
		});

		/**
		*表示按钮文本标签的字体名称，以字符串形式表示。
		*@see laya.display.Text#font
		*/
		__getset(0,__proto,'labelFont',function(){
			return this._button.text.font;
			},function(value){
			this._button.text.font=value
		});

		/**
		*表示按钮的状态值。
		*@see laya.ui.Button#stateNum
		*/
		__getset(0,__proto,'stateNum',function(){
			return this._button.stateNum;
			},function(value){
			this._button.stateNum=value
		});

		return ComboBox;
	})(Component)


	/**
	*<code>ScrollBar</code> 组件是一个滚动条组件。
	*<p>当数据太多以至于显示区域无法容纳时，最终用户可以使用 <code>ScrollBar</code> 组件控制所显示的数据部分。</p>
	*<p> 滚动条由四部分组成：两个箭头按钮、一个轨道和一个滑块。 </p> *
	*
	*@see laya.ui.VScrollBar
	*@see laya.ui.HScrollBar
	*/
	//class laya.ui.ScrollBar extends laya.ui.Component
	var ScrollBar=(function(_super){
		function ScrollBar(skin){
			this.rollRatio=0.95;
			this.changeHandler=null;
			this.scaleBar=true;
			this.autoHide=false;
			this.elasticDistance=0;
			this.elasticBackTime=500;
			this.upButton=null;
			this.downButton=null;
			this.slider=null;
			this._scrollSize=1;
			this._skin=null;
			this._thumbPercent=1;
			this._target=null;
			this._lastPoint=null;
			this._lastOffset=0;
			this._checkElastic=false;
			this._isElastic=false;
			this._value=NaN;
			this._hide=false;
			this._clickOnly=true;
			this._offsets=null;
			ScrollBar.__super.call(this);
			this._showButtons=UIConfig.showButtons;
			this._touchScrollEnable=UIConfig.touchScrollEnable;
			this._mouseWheelEnable=UIConfig.mouseWheelEnable;
			this.skin=skin;
			this.max=1;
		}

		__class(ScrollBar,'laya.ui.ScrollBar',_super);
		var __proto=ScrollBar.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this.stopScroll();
			this.target=null;
			_super.prototype.destroy.call(this,destroyChild);
			this.upButton && this.upButton.destroy(destroyChild);
			this.downButton && this.downButton.destroy(destroyChild);
			this.slider && this.slider.destroy(destroyChild);
			this.upButton=this.downButton=null;
			this.slider=null;
			this.changeHandler=null;
			this._offsets=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this.slider=new Slider());
			this.addChild(this.upButton=new Button());
			this.addChild(this.downButton=new Button());
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			this.slider.showLabel=false;
			this.slider.on(/*laya.events.Event.CHANGE*/"change",this,this.onSliderChange);
			this.slider.setSlider(0,0,0);
			this.upButton.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onButtonMouseDown);
			this.downButton.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onButtonMouseDown);
		}

		/**
		*@private
		*滑块位置发生改变的处理函数。
		*/
		__proto.onSliderChange=function(){
			this.value=this.slider.value;
		}

		/**
		*@private
		*向上和向下按钮的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*/
		__proto.onButtonMouseDown=function(e){
			var isUp=e.currentTarget===this.upButton;
			this.slide(isUp);
			Laya.timer.once(Styles.scrollBarDelayTime,this,this.startLoop,[isUp]);
			Laya.stage.once(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.onStageMouseUp);
		}

		/**@private */
		__proto.startLoop=function(isUp){
			Laya.timer.frameLoop(1,this,this.slide,[isUp]);
		}

		/**@private */
		__proto.slide=function(isUp){
			if (isUp)this.value-=this._scrollSize;
			else this.value+=this._scrollSize;
		}

		/**
		*@private
		*舞台的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*/
		__proto.onStageMouseUp=function(e){
			Laya.timer.clear(this,this.startLoop);
			Laya.timer.clear(this,this.slide);
		}

		/**
		*@private
		*更改对象的皮肤及位置。
		*/
		__proto.changeScrollBar=function(){
			this.upButton.visible=this._showButtons;
			this.downButton.visible=this._showButtons;
			if (this._showButtons){
				this.upButton.skin=this._skin.replace(".png","$up.png");
				this.downButton.skin=this._skin.replace(".png","$down.png");
			}
			if (this.slider.isVertical)this.slider.y=this._showButtons ? this.upButton.height :0;
			else this.slider.x=this._showButtons ? this.upButton.width :0;
			this.resetPositions();
		}

		/**@inheritDoc */
		__proto.changeSize=function(){
			_super.prototype.changeSize.call(this);
			this.resetPositions();
			this.event(/*laya.events.Event.CHANGE*/"change");
			this.changeHandler && this.changeHandler.runWith(this.value);
		}

		/**@private */
		__proto.resetPositions=function(){
			if (this.slider.isVertical)this.slider.height=this.height-(this._showButtons ? (this.upButton.height+this.downButton.height):0);
			else this.slider.width=this.width-(this._showButtons ? (this.upButton.width+this.downButton.width):0);
			this.resetButtonPosition();
		}

		/**@private */
		__proto.resetButtonPosition=function(){
			if (this.slider.isVertical)this.downButton.y=this.slider.y+this.slider.height;
			else this.downButton.x=this.slider.x+this.slider.width;
		}

		/**
		*设置滚动条信息。
		*@param min 滚动条最小位置值。
		*@param max 滚动条最大位置值。
		*@param value 滚动条当前位置值。
		*/
		__proto.setScroll=function(min,max,value){
			this.runCallLater(this.changeSize);
			this.slider.setSlider(min,max,value);
			this.slider.bar.visible=max > 0;
			if (!this._hide && this.autoHide)this.visible=false;
		}

		/**@private */
		__proto.onTargetMouseWheel=function(e){
			this.value-=e.delta *this._scrollSize;
			this.target=this._target;
		}

		/**@private */
		__proto.onTargetMouseDown=function(e){
			this._clickOnly=true;
			this._lastOffset=0;
			this._checkElastic=false;
			this._lastPoint || (this._lastPoint=new Point());
			this._lastPoint.setTo(Laya.stage.mouseX,Laya.stage.mouseY);
			Laya.timer.clear(this,this.tweenMove);
			Tween.clearTween(this);
			Laya.stage.once(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.onStageMouseUp2);
			Laya.stage.once(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.onStageMouseUp2);
			Laya.timer.frameLoop(1,this,this.loop);
		}

		/**@private */
		__proto.loop=function(){
			var mouseY=Laya.stage.mouseY;
			var mouseX=Laya.stage.mouseX;
			this._lastOffset=this.isVertical ? (mouseY-this._lastPoint.y):(mouseX-this._lastPoint.x);
			if (this._clickOnly){
				if (Math.abs(this._lastOffset *(this.isVertical ? Laya.stage._canvasTransform.getScaleY():Laya.stage._canvasTransform.getScaleX()))> 1){
					this._clickOnly=false;
					this._offsets || (this._offsets=[]);
					this._offsets.length=0;
					this._target.mouseEnabled=false;
					if (!this.hide && this.autoHide){
						this.alpha=1;
						this.visible=true;
					}
					this.event(/*laya.events.Event.START*/"start");
				}else return;
			}
			this._offsets.push(this._lastOffset);
			this._lastPoint.x=mouseX;
			this._lastPoint.y=mouseY;
			if (this._lastOffset===0)return;
			if (!this._checkElastic){
				if (this.elasticDistance > 0){
					if (!this._checkElastic && this._lastOffset !=0){
						if ((this._lastOffset > 0 && this._value <=this.min)|| (this._lastOffset < 0 && this._value >=this.max)){
							this._isElastic=true;
							this._checkElastic=true;
							}else {
							this._isElastic=false;
						}
					}
					}else {
					this._checkElastic=true;
				}
			}
			if (this._isElastic){
				if (this._value <=this.min){
					this.value-=this._lastOffset *Math.max(0,(1-((this.min-this._value)/ this.elasticDistance)));
					}else if (this._value >=this.max){
					this.value-=this._lastOffset *Math.max(0,(1-((this._value-this.max)/ this.elasticDistance)));
				}
				}else {
				this.value-=this._lastOffset;
			}
		}

		/**@private */
		__proto.onStageMouseUp2=function(e){
			Laya.stage.off(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.onStageMouseUp2);
			Laya.stage.off(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.onStageMouseUp2);
			Laya.timer.clear(this,this.loop);
			if (this._clickOnly)return;
			this._target.mouseEnabled=true;
			if (this._isElastic){
				if (this._value < this.min){
					Tween.to(this,{value:this.min},this.elasticBackTime,Ease.sineOut,Handler.create(this,this.elasticOver));
					}else if (this._value > this.max){
					Tween.to(this,{value:this.max},this.elasticBackTime,Ease.sineOut,Handler.create(this,this.elasticOver));
				}
				}else {
				if (!this._offsets)return;
				if (this._offsets.length < 1){
					this._offsets[0]=this.isVertical ? Laya.stage.mouseY-this._lastPoint.y :Laya.stage.mouseX-this._lastPoint.x;
				};
				var offset=0;
				var n=Math.min(this._offsets.length,3);
				for (var i=0;i < n;i++){
					offset+=this._offsets[this._offsets.length-1-i];
				}
				this._lastOffset=offset / n;
				offset=Math.abs(this._lastOffset);
				if (offset < 2){
					this.event(/*laya.events.Event.END*/"end");
					return;
				}
				if (offset > 60)this._lastOffset=this._lastOffset > 0 ? 60 :-60;
				var dis=Math.round(Math.abs(this.elasticDistance *(this._lastOffset / 240)));
				Laya.timer.frameLoop(1,this,this.tweenMove,[dis]);
			}
		}

		/**@private */
		__proto.elasticOver=function(){
			this._isElastic=false;
			if (!this.hide && this.autoHide){
				Tween.to(this,{alpha:0},500);
			}
			this.event(/*laya.events.Event.END*/"end");
		}

		/**@private */
		__proto.tweenMove=function(maxDistance){
			this._lastOffset *=this.rollRatio;
			var tarSpeed=NaN;
			if (maxDistance > 0){
				if (this._lastOffset > 0 && this.value <=this.min){
					this._isElastic=true;
					tarSpeed=-(this.min-maxDistance-this.value)*0.5;
					if (this._lastOffset > tarSpeed)this._lastOffset=tarSpeed;
					}else if (this._lastOffset < 0 && this.value >=this.max){
					this._isElastic=true;
					tarSpeed=-(this.max+maxDistance-this.value)*0.5;
					if (this._lastOffset < tarSpeed)this._lastOffset=tarSpeed;
				}
			}
			this.value-=this._lastOffset;
			if (Math.abs(this._lastOffset)< 1){
				Laya.timer.clear(this,this.tweenMove);
				if (this._isElastic){
					if (this._value < this.min){
						Tween.to(this,{value:this.min},this.elasticBackTime,Ease.sineOut,Handler.create(this,this.elasticOver));
						}else if (this._value > this.max){
						Tween.to(this,{value:this.max},this.elasticBackTime,Ease.sineOut,Handler.create(this,this.elasticOver));
						}else {
						this.elasticOver();
					}
					return;
				}
				this.event(/*laya.events.Event.END*/"end");
				if (!this.hide && this.autoHide){
					Tween.to(this,{alpha:0},500);
				}
			}
		}

		/**
		*停止滑动。
		*/
		__proto.stopScroll=function(){
			this.onStageMouseUp2(null);
			Laya.timer.clear(this,this.tweenMove);
			Tween.clearTween(this);
		}

		/**@inheritDoc */
		__getset(0,__proto,'measureHeight',function(){
			if (this.slider.isVertical)return 100;
			return this.slider.height;
		});

		/**
		*@copy laya.ui.Image#skin
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				this.slider.skin=this._skin;
				this.callLater(this.changeScrollBar);
			}
		});

		/**
		*获取或设置表示最高滚动位置的数字。
		*/
		__getset(0,__proto,'max',function(){
			return this.slider.max;
			},function(value){
			this.slider.max=value;
		});

		/**一个布尔值，指定是否显示向上、向下按钮，默认值为true。*/
		__getset(0,__proto,'showButtons',function(){
			return this._showButtons;
			},function(value){
			this._showButtons=value;
			this.callLater(this.changeScrollBar);
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureWidth',function(){
			if (this.slider.isVertical)return this.slider.width;
			return 100;
		});

		/**
		*获取或设置表示最低滚动位置的数字。
		*/
		__getset(0,__proto,'min',function(){
			return this.slider.min;
			},function(value){
			this.slider.min=value;
		});

		/**
		*获取或设置表示当前滚动位置的数字。
		*/
		__getset(0,__proto,'value',function(){
			return this._value;
			},function(v){
			if (v!==this._value){
				if (this._isElastic)this._value=v;
				else {
					this.slider.value=v;
					this._value=this.slider.value;
				}
				this.event(/*laya.events.Event.CHANGE*/"change");
				this.changeHandler && this.changeHandler.runWith(this.value);
			}
		});

		/**
		*一个布尔值，指示滚动条是否为垂直滚动。如果值为true，则为垂直滚动，否则为水平滚动。
		*<p>默认值为：true。</p>
		*/
		__getset(0,__proto,'isVertical',function(){
			return this.slider.isVertical;
			},function(value){
			this.slider.isVertical=value;
		});

		/**
		*<p>当前实例的 <code>Slider</code> 实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			return this.slider.sizeGrid;
			},function(value){
			this.slider.sizeGrid=value;
		});

		/**获取或设置一个值，该值表示按下滚动条轨道时页面滚动的增量。 */
		__getset(0,__proto,'scrollSize',function(){
			return this._scrollSize;
			},function(value){
			this._scrollSize=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='number')|| (typeof value=='string'))this.value=Number(value);
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**获取或设置一个值，该值表示滑条长度比例，值为：（0-1）。 */
		__getset(0,__proto,'thumbPercent',function(){
			return this._thumbPercent;
			},function(value){
			this.runCallLater(this.changeScrollBar);
			this.runCallLater(this.changeSize);
			value=value >=1 ? 0.99 :value;
			this._thumbPercent=value;
			if (this.scaleBar){
				if (this.slider.isVertical)this.slider.bar.height=Math.max(this.slider.height *value,Styles.scrollBarMinNum);
				else this.slider.bar.width=Math.max(this.slider.width *value,Styles.scrollBarMinNum);
			}
		});

		/**
		*设置滚动对象。
		*@see laya.ui.TouchScroll#target
		*/
		__getset(0,__proto,'target',function(){
			return this._target;
			},function(value){
			if (this._target){
				this._target.off(/*laya.events.Event.MOUSE_WHEEL*/"mousewheel",this,this.onTargetMouseWheel);
				this._target.off(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onTargetMouseDown);
			}
			this._target=value;
			if (value){
				this._mouseWheelEnable && this._target.on(/*laya.events.Event.MOUSE_WHEEL*/"mousewheel",this,this.onTargetMouseWheel);
				this._touchScrollEnable && this._target.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onTargetMouseDown);
			}
		});

		/**是否隐藏滚动条，不显示滚动条，但是可以正常滚动，默认为false。*/
		__getset(0,__proto,'hide',function(){
			return this._hide;
			},function(value){
			this._hide=value;
			this.visible=!value;
		});

		/**一个布尔值，指定是否开启触摸，默认值为true。*/
		__getset(0,__proto,'touchScrollEnable',function(){
			return this._touchScrollEnable;
			},function(value){
			this._touchScrollEnable=value;
			this.target=this._target;
		});

		/**一个布尔值，指定是否滑轮滚动，默认值为true。*/
		__getset(0,__proto,'mouseWheelEnable',function(){
			return this._mouseWheelEnable;
			},function(value){
			this._mouseWheelEnable=value;
		});

		/**
		*滚动的刻度值，滑动数值为tick的整数倍。默认值为1。
		*/
		__getset(0,__proto,'tick',function(){
			return this.slider.tick;
			},function(value){
			this.slider.tick=value;
		});

		return ScrollBar;
	})(Component)


	/**
	*使用 <code>Slider</code> 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。
	*<p>滑块的当前值由滑块端点（对应于滑块的最小值和最大值）之间滑块的相对位置确定。</p>
	*<p>滑块允许最小值和最大值之间特定间隔内的值。滑块还可以使用数据提示显示其当前值。</p>
	*
	*@see laya.ui.HSlider
	*@see laya.ui.VSlider
	*/
	//class laya.ui.Slider extends laya.ui.Component
	var Slider=(function(_super){
		function Slider(skin){
			this.changeHandler=null;
			this.isVertical=true;
			this.showLabel=true;
			this._allowClickBack=false;
			this._max=100;
			this._min=0;
			this._tick=1;
			this._value=0;
			this._skin=null;
			this._bg=null;
			this._progress=null;
			this._bar=null;
			this._tx=NaN;
			this._ty=NaN;
			this._maxMove=NaN;
			this._globalSacle=null;
			Slider.__super.call(this);
			this.skin=skin;
		}

		__class(Slider,'laya.ui.Slider',_super);
		var __proto=Slider.prototype;
		/**
		*@inheritDoc
		*/
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._bg && this._bg.destroy(destroyChild);
			this._bar && this._bar.destroy(destroyChild);
			this._progress && this._progress.destroy(destroyChild);
			this._bg=null;
			this._bar=null;
			this._progress=null;
			this.changeHandler=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._bg=new Image());
			this.addChild(this._bar=new Button());
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			this._bar.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onBarMouseDown);
			this._bg.sizeGrid=this._bar.sizeGrid="4,4,4,4,0";
			if (this._progress)this._progress.sizeGrid=this._bar.sizeGrid;
			this.allowClickBack=true;
		}

		/**
		*@private
		*滑块的的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*/
		__proto.onBarMouseDown=function(e){
			this._globalSacle || (this._globalSacle=new Point());
			this._globalSacle.setTo(this.globalScaleX || 0.01,this.globalScaleY || 0.01);
			this._maxMove=this.isVertical ? (this.height-this._bar.height):(this.width-this._bar.width);
			this._tx=Laya.stage.mouseX;
			this._ty=Laya.stage.mouseY;
			Laya.stage.on(/*laya.events.Event.MOUSE_MOVE*/"mousemove",this,this.mouseMove);
			Laya.stage.once(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.mouseUp);
			Laya.stage.once(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.mouseUp);
			this.showValueText();
		}

		/**
		*@private
		*显示标签。
		*/
		__proto.showValueText=function(){
			if (this.showLabel){
				var label=laya.ui.Slider.label;
				this.addChild(label);
				label.textField.changeText(this._value+"");
				if (this.isVertical){
					label.x=this._bar.x+20;
					label.y=(this._bar.height-label.height)*0.5+this._bar.y;
					}else {
					label.y=this._bar.y-20;
					label.x=(this._bar.width-label.width)*0.5+this._bar.x;
				}
			}
		}

		/**
		*@private
		*隐藏标签。
		*/
		__proto.hideValueText=function(){
			laya.ui.Slider.label && laya.ui.Slider.label.removeSelf();
		}

		/**
		*@private
		*/
		__proto.mouseUp=function(e){
			Laya.stage.off(/*laya.events.Event.MOUSE_MOVE*/"mousemove",this,this.mouseMove);
			Laya.stage.off(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.mouseUp);
			Laya.stage.off(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.mouseUp);
			this.sendChangeEvent(/*laya.events.Event.CHANGED*/"changed");
			this.hideValueText();
		}

		/**
		*@private
		*/
		__proto.mouseMove=function(e){
			var oldValue=this._value;
			if (this.isVertical){
				this._bar.y+=(Laya.stage.mouseY-this._ty)/ this._globalSacle.y;
				if (this._bar.y > this._maxMove)this._bar.y=this._maxMove;
				else if (this._bar.y < 0)this._bar.y=0;
				this._value=this._bar.y / this._maxMove *(this._max-this._min)+this._min;
				if(this._progress)this._progress.height=this._bar.y+0.5*this._bar.height;
				}else {
				this._bar.x+=(Laya.stage.mouseX-this._tx)/ this._globalSacle.x;
				if (this._bar.x > this._maxMove)this._bar.x=this._maxMove;
				else if (this._bar.x < 0)this._bar.x=0;
				this._value=this._bar.x / this._maxMove *(this._max-this._min)+this._min;
				if(this._progress)this._progress.width=this._bar.x+0.5*this._bar.width;
			}
			this._tx=Laya.stage.mouseX;
			this._ty=Laya.stage.mouseY;
			var pow=Math.pow(10,(this._tick+"").length-1);
			this._value=Math.round(Math.round(this._value / this._tick)*this._tick *pow)/ pow;
			if (this._value !=oldValue){
				this.sendChangeEvent();
			}
			this.showValueText();
		}

		/**
		*@private
		*/
		__proto.sendChangeEvent=function(type){
			(type===void 0)&& (type=/*laya.events.Event.CHANGE*/"change");
			this.event(type);
			this.changeHandler && this.changeHandler.runWith(this._value);
		}

		/**
		*@private
		*设置滑块的位置信息。
		*/
		__proto.setBarPoint=function(){
			if (this.isVertical)this._bar.x=Math.round((this._bg.width-this._bar.width)*0.5);
			else this._bar.y=Math.round((this._bg.height-this._bar.height)*0.5);
		}

		/**@inheritDoc */
		__proto.changeSize=function(){
			_super.prototype.changeSize.call(this);
			if (this.isVertical)this._bg.height=this.height;
			else this._bg.width=this.width;
			this.setBarPoint();
			this.changeValue();
		}

		/**
		*设置滑动条的信息。
		*@param min 滑块的最小值。
		*@param max 滑块的最小值。
		*@param value 滑块的当前值。
		*/
		__proto.setSlider=function(min,max,value){
			this._value=-1;
			this._min=min;
			this._max=max > min ? max :min;
			this.value=value < min ? min :value > max ? max :value;
		}

		/**
		*@private
		*改变滑块的位置值。
		*/
		__proto.changeValue=function(){
			var pow=Math.pow(10,(this._tick+"").length-1);
			this._value=Math.round(Math.round(this._value / this._tick)*this._tick *pow)/ pow;
			this._value=this._value > this._max ? this._max :this._value < this._min ? this._min :this._value;
			var num=this._max-this._min;
			if (num===0)num=1;
			if (this.isVertical){
				this._bar.y=(this._value-this._min)/ num *(this.height-this._bar.height);
				if(this._progress)this._progress.height=this._bar.y+0.5*this._bar.height;
			}
			else{
				this._bar.x=(this._value-this._min)/ num *(this.width-this._bar.width);
				if(this._progress)this._progress.width=this._bar.x+0.5*this._bar.width;
			}
		}

		/**
		*@private
		*滑动条的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*/
		__proto.onBgMouseDown=function(e){
			var point=this._bg.getMousePoint();
			if (this.isVertical)this.value=point.y / (this.height-this._bar.height)*(this._max-this._min)+this._min;
			else this.value=point.x / (this.width-this._bar.width)*(this._max-this._min)+this._min;
		}

		/**@inheritDoc */
		__getset(0,__proto,'measureHeight',function(){
			return Math.max(this._bg.height,this._bar.height);
		});

		/**
		*@copy laya.ui.Image#skin
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				this._bg.skin=this._skin;
				this._bar.skin=this._skin.replace(".png","$bar.png");
				var progressSkin=this._skin.replace(".png","$progress.png");
				if (Loader.getRes(progressSkin)){
					if (!this._progress){
						this.addChild(this._progress=new Image());
						this._progress.sizeGrid=this._bar.sizeGrid;
						this.setChildIndex(this._progress,1);
					}
					this._progress.skin=progressSkin;
				}
				this.setBarPoint();
				this.callLater(this.changeValue);
			}
		});

		/**
		*一个布尔值，指定是否允许通过点击滑动条改变 <code>Slider</code> 的 <code>value</code> 属性值。
		*/
		__getset(0,__proto,'allowClickBack',function(){
			return this._allowClickBack;
			},function(value){
			if (this._allowClickBack !=value){
				this._allowClickBack=value;
				if (value)this._bg.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onBgMouseDown);
				else this._bg.off(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onBgMouseDown);
			}
		});

		/**
		*获取或设置表示最高位置的数字。 默认值为100。
		*/
		__getset(0,__proto,'max',function(){
			return this._max;
			},function(value){
			if (this._max !=value){
				this._max=value;
				this.callLater(this.changeValue);
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureWidth',function(){
			return Math.max(this._bg.width,this._bar.width);
		});

		/**
		*滑动的刻度值，滑动数值为tick的整数倍。默认值为1。
		*/
		__getset(0,__proto,'tick',function(){
			return this._tick;
			},function(value){
			if (this._tick !=value){
				this._tick=value;
				this.callLater(this.changeValue);
			}
		});

		/**
		*<p>当前实例的背景图（ <code>Image</code> ）和滑块按钮（ <code>Button</code> ）实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			return this._bg.sizeGrid;
			},function(value){
			this._bg.sizeGrid=value;
			this._bar.sizeGrid=value;
			if (this._progress)this._progress.sizeGrid=this._bar.sizeGrid;
		});

		/**
		*获取或设置表示最低位置的数字。 默认值为0。
		*/
		__getset(0,__proto,'min',function(){
			return this._min;
			},function(value){
			if (this._min !=value){
				this._min=value;
				this.callLater(this.changeValue);
			}
		});

		/**
		*获取或设置表示当前滑块位置的数字。
		*/
		__getset(0,__proto,'value',function(){
			return this._value;
			},function(num){
			if (this._value !=num){
				var oldValue=this._value;
				this._value=num;
				this.changeValue();
				if (this._value !=oldValue){
					this.sendChangeEvent();
				}
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='number')|| (typeof value=='string'))this.value=Number(value);
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**
		*表示滑块按钮的引用。
		*/
		__getset(0,__proto,'bar',function(){
			return this._bar;
		});

		__static(Slider,
		['label',function(){return this.label=new Label();}
		]);
		return Slider;
	})(Component)


	/**
	*<code>Image</code> 类是用于表示位图图像或绘制图形的显示对象。
	*Image和Clip组件是唯一支持异步加载的两个组件，比如img.skin="abc/xxx.png"，其他UI组件均不支持异步加载。
	*
	*@example <caption>以下示例代码，创建了一个新的 <code>Image</code> 实例，设置了它的皮肤、位置信息，并添加到舞台上。</caption>
	*package
	*{
		*import laya.ui.Image;
		*public class Image_Example
		*{
			*public function Image_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*onInit();
				*}
			*private function onInit():void
			*{
				*var bg:Image=new Image("resource/ui/bg.png");//创建一个 Image 类的实例对象 bg ,并传入它的皮肤。
				*bg.x=100;//设置 bg 对象的属性 x 的值，用于控制 bg 对象的显示位置。
				*bg.y=100;//设置 bg 对象的属性 y 的值，用于控制 bg 对象的显示位置。
				*bg.sizeGrid="40,10,5,10";//设置 bg 对象的网格信息。
				*bg.width=150;//设置 bg 对象的宽度。
				*bg.height=250;//设置 bg 对象的高度。
				*Laya.stage.addChild(bg);//将此 bg 对象添加到显示列表。
				*var image:Image=new Image("resource/ui/image.png");//创建一个 Image 类的实例对象 image ,并传入它的皮肤。
				*image.x=100;//设置 image 对象的属性 x 的值，用于控制 image 对象的显示位置。
				*image.y=100;//设置 image 对象的属性 y 的值，用于控制 image 对象的显示位置。
				*Laya.stage.addChild(image);//将此 image 对象添加到显示列表。
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*onInit();
	*function onInit(){
		*var bg=new laya.ui.Image("resource/ui/bg.png");//创建一个 Image 类的实例对象 bg ,并传入它的皮肤。
		*bg.x=100;//设置 bg 对象的属性 x 的值，用于控制 bg 对象的显示位置。
		*bg.y=100;//设置 bg 对象的属性 y 的值，用于控制 bg 对象的显示位置。
		*bg.sizeGrid="40,10,5,10";//设置 bg 对象的网格信息。
		*bg.width=150;//设置 bg 对象的宽度。
		*bg.height=250;//设置 bg 对象的高度。
		*Laya.stage.addChild(bg);//将此 bg 对象添加到显示列表。
		*var image=new laya.ui.Image("resource/ui/image.png");//创建一个 Image 类的实例对象 image ,并传入它的皮肤。
		*image.x=100;//设置 image 对象的属性 x 的值，用于控制 image 对象的显示位置。
		*image.y=100;//设置 image 对象的属性 y 的值，用于控制 image 对象的显示位置。
		*Laya.stage.addChild(image);//将此 image 对象添加到显示列表。
		*}
	*@example
	*class Image_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*this.onInit();
			*}
		*private onInit():void {
			*var bg:laya.ui.Image=new laya.ui.Image("resource/ui/bg.png");//创建一个 Image 类的实例对象 bg ,并传入它的皮肤。
			*bg.x=100;//设置 bg 对象的属性 x 的值，用于控制 bg 对象的显示位置。
			*bg.y=100;//设置 bg 对象的属性 y 的值，用于控制 bg 对象的显示位置。
			*bg.sizeGrid="40,10,5,10";//设置 bg 对象的网格信息。
			*bg.width=150;//设置 bg 对象的宽度。
			*bg.height=250;//设置 bg 对象的高度。
			*Laya.stage.addChild(bg);//将此 bg 对象添加到显示列表。
			*var image:laya.ui.Image=new laya.ui.Image("resource/ui/image.png");//创建一个 Image 类的实例对象 image ,并传入它的皮肤。
			*image.x=100;//设置 image 对象的属性 x 的值，用于控制 image 对象的显示位置。
			*image.y=100;//设置 image 对象的属性 y 的值，用于控制 image 对象的显示位置。
			*Laya.stage.addChild(image);//将此 image 对象添加到显示列表。
			*}
		*}
	*@see laya.ui.AutoBitmap
	*/
	//class laya.ui.Image extends laya.ui.Component
	var Image=(function(_super){
		function Image(skin){
			this._bitmap=null;
			this._skin=null;
			this._group=null;
			Image.__super.call(this);
			this.skin=skin;
		}

		__class(Image,'laya.ui.Image',_super);
		var __proto=Image.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,true);
			this._bitmap && this._bitmap.destroy();
			this._bitmap=null;
		}

		/**
		*销毁对象并释放加载的皮肤资源。
		*/
		__proto.dispose=function(){
			this.destroy(true);
			Laya.loader.clearRes(this._skin);
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.graphics=this._bitmap=new AutoBitmap();
			this._bitmap.autoCacheCmd=false;
		}

		/**
		*@private
		*设置皮肤资源。
		*/
		__proto.setSource=function(url,img){
			if (url===this._skin && img){
				this.source=img
				this.onCompResize();
			}
		}

		/**
		*@copy laya.ui.AutoBitmap#source
		*/
		__getset(0,__proto,'source',function(){
			return this._bitmap.source;
			},function(value){
			if (!this._bitmap)return;
			this._bitmap.source=value;
			this.event(/*laya.events.Event.LOADED*/"loaded");
			this.repaint();
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='string'))this.skin=value;
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureHeight',function(){
			return this._bitmap.height;
		});

		/**
		*<p>对象的皮肤地址，以字符串表示。</p>
		*<p>如果资源未加载，则先加载资源，加载完成后应用于此对象。</p>
		*<b>注意：</b>资源加载完成后，会自动缓存至资源库中。
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				if (value){
					var source=Loader.getRes(value);
					if (source){
						this.source=source;
						this.onCompResize();
					}else Laya.loader.load(this._skin,Handler.create(this,this.setSource,[this._skin]),null,/*laya.net.Loader.IMAGE*/"image",1,true,this._group);
					}else {
					this.source=null;
				}
			}
		});

		/**
		*资源分组。
		*/
		__getset(0,__proto,'group',function(){
			return this._group;
			},function(value){
			if (value && this._skin)Loader.setGroup(this._skin,value);
			this._group=value;
		});

		/**
		*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"。</li></ul></p>
		*@see laya.ui.AutoBitmap#sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			if (this._bitmap.sizeGrid)return this._bitmap.sizeGrid.join(",");
			return null;
			},function(value){
			this._bitmap.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureWidth',function(){
			return this._bitmap.width;
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._bitmap.width=value==0 ? 0.0000001 :value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._bitmap.height=value==0 ? 0.0000001 :value;
		});

		return Image;
	})(Component)


	/**
	*<p> <code>Label</code> 类用于创建显示对象以显示文本。</p>
	*
	*@example <caption>以下示例代码，创建了一个 <code>Label</code> 实例。</caption>
	*package
	*{
		*import laya.ui.Label;
		*public class Label_Example
		*{
			*public function Label_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*onInit();
				*}
			*private function onInit():void
			*{
				*var label:Label=new Label();//创建一个 Label 类的实例对象 label 。
				*label.font="Arial";//设置 label 的字体。
				*label.bold=true;//设置 label 显示为粗体。
				*label.leading=4;//设置 label 的行间距。
				*label.wordWrap=true;//设置 label 自动换行。
				*label.padding="10,10,10,10";//设置 label 的边距。
				*label.color="#ff00ff";//设置 label 的颜色。
				*label.text="Hello everyone,我是一个可爱的文本！";//设置 label 的文本内容。
				*label.x=100;//设置 label 对象的属性 x 的值，用于控制 label 对象的显示位置。
				*label.y=100;//设置 label 对象的属性 y 的值，用于控制 label 对象的显示位置。
				*label.width=300;//设置 label 的宽度。
				*label.height=200;//设置 label 的高度。
				*Laya.stage.addChild(label);//将 label 添加到显示列表。
				*var passwordLabel:Label=new Label("请原谅我，我不想被人看到我心里话。");//创建一个 Label 类的实例对象 passwordLabel 。
				*passwordLabel.asPassword=true;//设置 passwordLabel 的显示反式为密码显示。
				*passwordLabel.x=100;//设置 passwordLabel 对象的属性 x 的值，用于控制 passwordLabel 对象的显示位置。
				*passwordLabel.y=350;//设置 passwordLabel 对象的属性 y 的值，用于控制 passwordLabel 对象的显示位置。
				*passwordLabel.width=300;//设置 passwordLabel 的宽度。
				*passwordLabel.color="#000000";//设置 passwordLabel 的文本颜色。
				*passwordLabel.bgColor="#ccffff";//设置 passwordLabel 的背景颜色。
				*passwordLabel.fontSize=20;//设置 passwordLabel 的文本字体大小。
				*Laya.stage.addChild(passwordLabel);//将 passwordLabel 添加到显示列表。
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*onInit();
	*function onInit(){
		*var label=new laya.ui.Label();//创建一个 Label 类的实例对象 label 。
		*label.font="Arial";//设置 label 的字体。
		*label.bold=true;//设置 label 显示为粗体。
		*label.leading=4;//设置 label 的行间距。
		*label.wordWrap=true;//设置 label 自动换行。
		*label.padding="10,10,10,10";//设置 label 的边距。
		*label.color="#ff00ff";//设置 label 的颜色。
		*label.text="Hello everyone,我是一个可爱的文本！";//设置 label 的文本内容。
		*label.x=100;//设置 label 对象的属性 x 的值，用于控制 label 对象的显示位置。
		*label.y=100;//设置 label 对象的属性 y 的值，用于控制 label 对象的显示位置。
		*label.width=300;//设置 label 的宽度。
		*label.height=200;//设置 label 的高度。
		*Laya.stage.addChild(label);//将 label 添加到显示列表。
		*var passwordLabel=new laya.ui.Label("请原谅我，我不想被人看到我心里话。");//创建一个 Label 类的实例对象 passwordLabel 。
		*passwordLabel.asPassword=true;//设置 passwordLabel 的显示反式为密码显示。
		*passwordLabel.x=100;//设置 passwordLabel 对象的属性 x 的值，用于控制 passwordLabel 对象的显示位置。
		*passwordLabel.y=350;//设置 passwordLabel 对象的属性 y 的值，用于控制 passwordLabel 对象的显示位置。
		*passwordLabel.width=300;//设置 passwordLabel 的宽度。
		*passwordLabel.color="#000000";//设置 passwordLabel 的文本颜色。
		*passwordLabel.bgColor="#ccffff";//设置 passwordLabel 的背景颜色。
		*passwordLabel.fontSize=20;//设置 passwordLabel 的文本字体大小。
		*Laya.stage.addChild(passwordLabel);//将 passwordLabel 添加到显示列表。
		*}
	*@example
	*import Label=laya.ui.Label;
	*class Label_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*this.onInit();
			*}
		*private onInit():void {
			*var label:Label=new Label();//创建一个 Label 类的实例对象 label 。
			*label.font="Arial";//设置 label 的字体。
			*label.bold=true;//设置 label 显示为粗体。
			*label.leading=4;//设置 label 的行间距。
			*label.wordWrap=true;//设置 label 自动换行。
			*label.padding="10,10,10,10";//设置 label 的边距。
			*label.color="#ff00ff";//设置 label 的颜色。
			*label.text="Hello everyone,我是一个可爱的文本！";//设置 label 的文本内容。
			*label.x=100;//设置 label 对象的属性 x 的值，用于控制 label 对象的显示位置。
			*label.y=100;//设置 label 对象的属性 y 的值，用于控制 label 对象的显示位置。
			*label.width=300;//设置 label 的宽度。
			*label.height=200;//设置 label 的高度。
			*Laya.stage.addChild(label);//将 label 添加到显示列表。
			*var passwordLabel:Label=new Label("请原谅我，我不想被人看到我心里话。");//创建一个 Label 类的实例对象 passwordLabel 。
			*passwordLabel.asPassword=true;//设置 passwordLabel 的显示反式为密码显示。
			*passwordLabel.x=100;//设置 passwordLabel 对象的属性 x 的值，用于控制 passwordLabel 对象的显示位置。
			*passwordLabel.y=350;//设置 passwordLabel 对象的属性 y 的值，用于控制 passwordLabel 对象的显示位置。
			*passwordLabel.width=300;//设置 passwordLabel 的宽度。
			*passwordLabel.color="#000000";//设置 passwordLabel 的文本颜色。
			*passwordLabel.bgColor="#ccffff";//设置 passwordLabel 的背景颜色。
			*passwordLabel.fontSize=20;//设置 passwordLabel 的文本字体大小。
			*Laya.stage.addChild(passwordLabel);//将 passwordLabel 添加到显示列表。
			*}
		*}
	*@see laya.display.Text
	*/
	//class laya.ui.Label extends laya.ui.Component
	var Label=(function(_super){
		function Label(text){
			this._tf=null;
			Label.__super.call(this);
			(text===void 0)&& (text="");
			Font.defaultColor=Styles.labelColor;
			this.text=text;
		}

		__class(Label,'laya.ui.Label',_super);
		var __proto=Label.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._tf=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._tf=new Text());
		}

		/**@copy laya.display.Text#changeText()
		**/
		__proto.changeText=function(text){
			this._tf.changeText(text);
		}

		/**
		*<p>边距信息</p>
		*<p>"上边距，右边距，下边距 , 左边距（边距以像素为单位）"</p>
		*@see laya.display.Text.padding
		*/
		__getset(0,__proto,'padding',function(){
			return this._tf.padding.join(",");
			},function(value){
			this._tf.padding=UIUtils.fillArray(Styles.labelPadding,value,Number);
		});

		/**
		*@copy laya.display.Text#bold
		*/
		__getset(0,__proto,'bold',function(){
			return this._tf.bold;
			},function(value){
			this._tf.bold=value;
		});

		/**
		*@copy laya.display.Text#align
		*/
		__getset(0,__proto,'align',function(){
			return this._tf.align;
			},function(value){
			this._tf.align=value;
		});

		/**
		*当前文本内容字符串。
		*@see laya.display.Text.text
		*/
		__getset(0,__proto,'text',function(){
			return this._tf.text;
			},function(value){
			if (this._tf.text !=value){
				if(value)
					value=UIUtils.adptString(value+"");
				this._tf.text=value;
				this.event(/*laya.events.Event.CHANGE*/"change");
				if (!this._width || !this._height)this.onCompResize();
			}
		});

		/**
		*@copy laya.display.Text#italic
		*/
		__getset(0,__proto,'italic',function(){
			return this._tf.italic;
			},function(value){
			this._tf.italic=value;
		});

		/**
		*@copy laya.display.Text#wordWrap
		*/
		/**
		*@copy laya.display.Text#wordWrap
		*/
		__getset(0,__proto,'wordWrap',function(){
			return this._tf.wordWrap;
			},function(value){
			this._tf.wordWrap=value;
		});

		/**
		*@copy laya.display.Text#font
		*/
		__getset(0,__proto,'font',function(){
			return this._tf.font;
			},function(value){
			this._tf.font=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='number')|| (typeof value=='string'))this.text=value+"";
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**
		*@copy laya.display.Text#color
		*/
		__getset(0,__proto,'color',function(){
			return this._tf.color;
			},function(value){
			this._tf.color=value;
		});

		/**
		*@copy laya.display.Text#valign
		*/
		__getset(0,__proto,'valign',function(){
			return this._tf.valign;
			},function(value){
			this._tf.valign=value;
		});

		/**
		*@copy laya.display.Text#leading
		*/
		__getset(0,__proto,'leading',function(){
			return this._tf.leading;
			},function(value){
			this._tf.leading=value;
		});

		/**
		*@copy laya.display.Text#fontSize
		*/
		__getset(0,__proto,'fontSize',function(){
			return this._tf.fontSize;
			},function(value){
			this._tf.fontSize=value;
		});

		/**
		*@copy laya.display.Text#bgColor
		*/
		__getset(0,__proto,'bgColor',function(){
			return this._tf.bgColor
			},function(value){
			this._tf.bgColor=value;
		});

		/**
		*@copy laya.display.Text#borderColor
		*/
		__getset(0,__proto,'borderColor',function(){
			return this._tf.borderColor
			},function(value){
			this._tf.borderColor=value;
		});

		/**
		*@copy laya.display.Text#stroke
		*/
		__getset(0,__proto,'stroke',function(){
			return this._tf.stroke;
			},function(value){
			this._tf.stroke=value;
		});

		/**
		*@copy laya.display.Text#strokeColor
		*/
		__getset(0,__proto,'strokeColor',function(){
			return this._tf.strokeColor;
			},function(value){
			this._tf.strokeColor=value;
		});

		/**
		*文本控件实体 <code>Text</code> 实例。
		*/
		__getset(0,__proto,'textField',function(){
			return this._tf;
		});

		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'measureWidth',function(){
			return this._tf.width;
		});

		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'measureHeight',function(){
			return this._tf.height;
		});

		/**
		*@inheritDoc
		*/
		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'width',function(){
			if (this._width || this._tf.text)return _super.prototype._$get_width.call(this);
			return 0;
			},function(value){
			_super.prototype._$set_width.call(this,value);
			this._tf.width=value;
		});

		/**
		*@inheritDoc
		*/
		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'height',function(){
			if (this._height || this._tf.text)return _super.prototype._$get_height.call(this);
			return 0;
			},function(value){
			_super.prototype._$set_height.call(this,value);
			this._tf.height=value;
		});

		/**
		*@copy laya.display.Text#overflow
		*/
		/**
		*@copy laya.display.Text#overflow
		*/
		__getset(0,__proto,'overflow',function(){
			return this._tf.overflow;
			},function(value){
			this._tf.overflow=value;
		});

		/**
		*@copy laya.display.Text#underline
		*/
		/**
		*@copy laya.display.Text#underline
		*/
		__getset(0,__proto,'underline',function(){
			return this._tf.underline;
			},function(value){
			this._tf.underline=value;
		});

		/**
		*@copy laya.display.Text#underlineColor
		*/
		/**
		*@copy laya.display.Text#underlineColor
		*/
		__getset(0,__proto,'underlineColor',function(){
			return this._tf.underlineColor;
			},function(value){
			this._tf.underlineColor=value;
		});

		return Label;
	})(Component)


	/**
	*<code>ProgressBar</code> 组件显示内容的加载进度。
	*@example <caption>以下示例代码，创建了一个新的 <code>ProgressBar</code> 实例，设置了它的皮肤、位置、宽高、网格等信息，并添加到舞台上。</caption>
	*package
	*{
		*import laya.ui.ProgressBar;
		*import laya.utils.Handler;
		*public class ProgressBar_Example
		*{
			*private var progressBar:ProgressBar;
			*public function ProgressBar_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/progress.png","resource/ui/progress$bar.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*progressBar=new ProgressBar("resource/ui/progress.png");//创建一个 ProgressBar 类的实例对象 progressBar 。
				*progressBar.x=100;//设置 progressBar 对象的属性 x 的值，用于控制 progressBar 对象的显示位置。
				*progressBar.y=100;//设置 progressBar 对象的属性 y 的值，用于控制 progressBar 对象的显示位置。
				*progressBar.value=0.3;//设置 progressBar 的进度值。
				*progressBar.width=200;//设置 progressBar 的宽度。
				*progressBar.height=50;//设置 progressBar 的高度。
				*progressBar.sizeGrid="5,10,5,10";//设置 progressBar 的网格信息。
				*progressBar.changeHandler=new Handler(this,onChange);//设置 progressBar 的value值改变时执行的处理器。
				*Laya.stage.addChild(progressBar);//将 progressBar 添加到显示列表。
				*Laya.timer.once(3000,this,changeValue);//设定 3000ms（毫秒）后，执行函数changeValue。
				*}
			*private function changeValue():void
			*{
				*trace("改变进度条的进度值。");
				*progressBar.value=0.6;
				*}
			*private function onChange(value:Number):void
			*{
				*trace("进度发生改变： value=" ,value);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var res=["resource/ui/progress.png","resource/ui/progress$bar.png"];
	*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));//加载资源。
	*function onLoadComplete()
	*{
		*progressBar=new laya.ui.ProgressBar("resource/ui/progress.png");//创建一个 ProgressBar 类的实例对象 progressBar 。
		*progressBar.x=100;//设置 progressBar 对象的属性 x 的值，用于控制 progressBar 对象的显示位置。
		*progressBar.y=100;//设置 progressBar 对象的属性 y 的值，用于控制 progressBar 对象的显示位置。
		*progressBar.value=0.3;//设置 progressBar 的进度值。
		*progressBar.width=200;//设置 progressBar 的宽度。
		*progressBar.height=50;//设置 progressBar 的高度。
		*progressBar.sizeGrid="10,5,10,5";//设置 progressBar 的网格信息。
		*progressBar.changeHandler=new laya.utils.Handler(this,onChange);//设置 progressBar 的value值改变时执行的处理器。
		*Laya.stage.addChild(progressBar);//将 progressBar 添加到显示列表。
		*Laya.timer.once(3000,this,changeValue);//设定 3000ms（毫秒）后，执行函数changeValue。
		*}
	*function changeValue()
	*{
		*console.log("改变进度条的进度值。");
		*progressBar.value=0.6;
		*}
	*function onChange(value)
	*{
		*console.log("进度发生改变： value=" ,value);
		*}
	*@example
	*import ProgressBar=laya.ui.ProgressBar;
	*import Handler=laya.utils.Handler;
	*class ProgressBar_Example {
		*private progressBar:ProgressBar;
		*public ProgressBar_Example(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/progress.png","resource/ui/progress$bar.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*this.progressBar=new ProgressBar("resource/ui/progress.png");//创建一个 ProgressBar 类的实例对象 progressBar 。
			*this.progressBar.x=100;//设置 progressBar 对象的属性 x 的值，用于控制 progressBar 对象的显示位置。
			*this.progressBar.y=100;//设置 progressBar 对象的属性 y 的值，用于控制 progressBar 对象的显示位置。
			*this.progressBar.value=0.3;//设置 progressBar 的进度值。
			*this.progressBar.width=200;//设置 progressBar 的宽度。
			*this.progressBar.height=50;//设置 progressBar 的高度。
			*this.progressBar.sizeGrid="5,10,5,10";//设置 progressBar 的网格信息。
			*this.progressBar.changeHandler=new Handler(this,this.onChange);//设置 progressBar 的value值改变时执行的处理器。
			*Laya.stage.addChild(this.progressBar);//将 progressBar 添加到显示列表。
			*Laya.timer.once(3000,this,this.changeValue);//设定 3000ms（毫秒）后，执行函数changeValue。
			*}
		*private changeValue():void {
			*console.log("改变进度条的进度值。");
			*this.progressBar.value=0.6;
			*}
		*private onChange(value:number):void {
			*console.log("进度发生改变： value=",value);
			*}
		*}
	*/
	//class laya.ui.ProgressBar extends laya.ui.Component
	var ProgressBar=(function(_super){
		function ProgressBar(skin){
			this.changeHandler=null;
			this._bg=null;
			this._bar=null;
			this._skin=null;
			this._value=0.5;
			ProgressBar.__super.call(this);
			this.skin=skin;
		}

		__class(ProgressBar,'laya.ui.ProgressBar',_super);
		var __proto=ProgressBar.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._bg && this._bg.destroy(destroyChild);
			this._bar && this._bar.destroy(destroyChild);
			this._bg=this._bar=null;
			this.changeHandler=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._bg=new Image());
			this.addChild(this._bar=new Image());
			this._bar._bitmap.autoCacheCmd=false;
		}

		/**
		*@private
		*更改进度值的显示。
		*/
		__proto.changeValue=function(){
			 //zhc 1707240935 修改了引擎源码 
			// if (this.sizeGrid){
			// 	var grid=this.sizeGrid.split(",");
			// 	var left=Number(grid[3]);
			// 	var right=Number(grid[1]);
			// 	var max=this.width-left-right;
			// 	var sw=max *this._value;
			// 	this._bar.width=left+right+sw;
			// 	this._bar.visible=this._bar.width > left+right;
			// 	}else {
				this._bar.width=this.width *this._value;
			// }
		}

		/**@inheritDoc */
		__getset(0,__proto,'measureHeight',function(){
			return this._bg.height;
		});

		/**
		*@copy laya.ui.Image#skin
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				this._bg.skin=this._skin;
				this._bar.skin=this._skin.replace(".png","$bar.png");
				this.callLater(this.changeValue);
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureWidth',function(){
			return this._bg.width;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._bg.height=this._height;
			this._bar.height=this._height;
		});

		/**
		*获取进度条对象。
		*/
		__getset(0,__proto,'bar',function(){
			return this._bar;
		});

		/**
		*当前的进度量。
		*<p><b>取值：</b>介于0和1之间。</p>
		*/
		__getset(0,__proto,'value',function(){
			return this._value;
			},function(num){
			if (this._value !=num){
				num=num > 1 ? 1 :num < 0 ? 0 :num;
				this._value=num;
				this.callLater(this.changeValue);
				this.event(/*laya.events.Event.CHANGE*/"change");
				this.changeHandler && this.changeHandler.runWith(num);
			}
		});

		/**
		*获取背景条对象。
		*/
		__getset(0,__proto,'bg',function(){
			return this._bg;
		});

		/**
		*<p>当前 <code>ProgressBar</code> 实例的进度条背景位图（ <code>Image</code> 实例）的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			return this._bg.sizeGrid;
			},function(value){
			this._bg.sizeGrid=this._bar.sizeGrid=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._bg.width=this._width;
			this.callLater(this.changeValue);
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='number')|| (typeof value=='string'))this.value=Number(value);
			else _super.prototype._$set_dataSource.call(this,value);
		});

		return ProgressBar;
	})(Component)


	/**鼠标提示管理类*/
	//class laya.ui.TipManager extends laya.ui.Component
	var TipManager=(function(_super){
		function TipManager(){
			this._tipBox=null;
			this._tipText=null;
			this._defaultTipHandler=null;
			TipManager.__super.call(this);
			this._tipBox=new Component();
			this._tipBox.addChild(this._tipText=new Text());
			this._tipText.x=this._tipText.y=5;
			this._tipText.color=TipManager.tipTextColor;
			this._defaultTipHandler=this._showDefaultTip;
			Laya.stage.on(/*laya.ui.UIEvent.SHOW_TIP*/"showtip",this,this._onStageShowTip);
			Laya.stage.on(/*laya.ui.UIEvent.HIDE_TIP*/"hidetip",this,this._onStageHideTip);
			this.zOrder=1100
		}

		__class(TipManager,'laya.ui.TipManager',_super);
		var __proto=TipManager.prototype;
		/**
		*@private
		*/
		__proto._onStageHideTip=function(e){
			Laya.timer.clear(this,this._showTip);
			this.closeAll();
			this.removeSelf();
		}

		/**
		*@private
		*/
		__proto._onStageShowTip=function(data){
			Laya.timer.once(TipManager.tipDelay,this,this._showTip,[data],true);
		}

		/**
		*@private
		*/
		__proto._showTip=function(tip){
			if ((typeof tip=='string')){
				var text=String(tip);
				if (Boolean(text)){
					this._defaultTipHandler(text);
				}
				}else if ((tip instanceof laya.utils.Handler )){
				(tip).run();
				}else if ((typeof tip=='function')){
				(tip).apply();
			}
			if (true){
				Laya.stage.on(/*laya.events.Event.MOUSE_MOVE*/"mousemove",this,this._onStageMouseMove);
				Laya.stage.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this._onStageMouseDown);
			}
			this._onStageMouseMove(null);
		}

		/**
		*@private
		*/
		__proto._onStageMouseDown=function(e){
			this.closeAll();
		}

		/**
		*@private
		*/
		__proto._onStageMouseMove=function(e){
			this._showToStage(this,TipManager.offsetX,TipManager.offsetY);
		}

		/**
		*@private
		*/
		__proto._showToStage=function(dis,offX,offY){
			(offX===void 0)&& (offX=0);
			(offY===void 0)&& (offY=0);
			var rec=dis.getBounds();
			dis.x=Laya.stage.mouseX+offX;
			dis.y=Laya.stage.mouseY+offY;
			if (dis.x+rec.width > Laya.stage.width){
				dis.x-=rec.width+offX;
			}
			if (dis.y+rec.height > Laya.stage.height){
				dis.y-=rec.height+offY;
			}
		}

		/**关闭所有鼠标提示*/
		__proto.closeAll=function(){
			Laya.timer.clear(this,this._showTip);
			Laya.stage.off(/*laya.events.Event.MOUSE_MOVE*/"mousemove",this,this._onStageMouseMove);
			Laya.stage.off(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this._onStageMouseDown);
			this.removeChildren();
		}

		/**
		*显示显示对象类型的tip
		*/
		__proto.showDislayTip=function(tip){
			this.addChild(tip);
			this._showToStage(this);
			Laya._currentStage.addChild(this);
		}

		/**
		*@private
		*/
		__proto._showDefaultTip=function(text){
			this._tipText.text=text;
			var g=this._tipBox.graphics;
			g.clear();
			g.drawRect(0,0,this._tipText.width+10,this._tipText.height+10,TipManager.tipBackColor);
			this.addChild(this._tipBox);
			this._showToStage(this);
			Laya._currentStage.addChild(this);
		}

		/**默认鼠标提示函数*/
		__getset(0,__proto,'defaultTipHandler',function(){
			return this._defaultTipHandler;
			},function(value){
			this._defaultTipHandler=value;
		});

		TipManager.offsetX=10;
		TipManager.offsetY=15;
		TipManager.tipTextColor="#ffffff";
		TipManager.tipBackColor="#111111";
		TipManager.tipDelay=200;
		return TipManager;
	})(Component)


	/**
	*<code>View</code> 是一个视图类。
	*@internal <p><code>View</code></p>
	*/
	//class laya.ui.View extends laya.ui.Box
	var View=(function(_super){
		function View(){
			this._idMap=null;
			this._aniList=null;
			View.__super.call(this);
		}

		__class(View,'laya.ui.View',_super);
		var __proto=View.prototype;
		/**
		*@private
		*通过视图数据创建视图。
		*@param uiView 视图数据信息。
		*/
		__proto.createView=function(uiView){
			if (uiView.animations && !this._idMap)this._idMap={};
			View.createComp(uiView,this,this);
			if (uiView.animations){
				var anilist=[];
				var animations=uiView.animations;
				var i=0,len=animations.length;
				var tAni;
				var tAniO;
				for (i=0;i < len;i++){
					tAni=new FrameAnimation();
					tAniO=animations[i];
					tAni._setUp(this._idMap,tAniO);
					this[tAniO.name]=tAni;
					tAni._setControlNode(this);
					switch (tAniO.action){
						case 1:
							tAni.play(0,false);
							break ;
						case 2:
							tAni.play(0,true);
							break ;
						}
					anilist.push(tAni);
				}
				this._aniList=anilist;
			}
			if (this._width > 0 && uiView.props.hitTestPrior==null && !this.mouseThrough)this.hitTestPrior=true;
		}

		/**
		*@private
		*装载UI视图。用于加载模式。
		*@param path UI资源地址。
		*/
		__proto.loadUI=function(path){
			var uiView=View.uiMap[path];
			uiView && this.createView(uiView);
		}

		/**
		*<p>销毁此对象。</p>
		*@param destroyChild 是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。
		*/
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			if (this._aniList)this._aniList.length=0;
			this._idMap=null;
			this._aniList=null;
			laya.ui.Component.prototype.destroy.call(this,destroyChild);
		}

		View._regs=function(){
			var key;
			for (key in View.uiClassMap){
				ClassUtils.regClass(key,View.uiClassMap[key]);
			}
		}

		View.createComp=function(uiView,comp,view){
			comp=comp || View.getCompInstance(uiView);
			if (!comp){
				console.warn("can not create:"+uiView.type);
				return null;
			};
			var child=uiView.child;
			if (child){
				for (var i=0,n=child.length;i < n;i++){
					var node=child[i];
					if (comp.hasOwnProperty("itemRender")&& (node.props.name=="render" || node.props.renderType==="render")){
						(comp).itemRender=node;
						}else if (node.type=="Graphic"){
						ClassUtils.addGraphicsToSprite(node,comp);
						}else if (ClassUtils.isDrawType(node.type)){
						ClassUtils.addGraphicToSprite(node,comp,true);
						}else {
						var tChild=View.createComp(node,null,view);
						if (node.type=="Script"){
							if ("owner" in tChild){
								tChild["owner"]=comp;
								}else if ("target" in tChild){
								tChild["target"]=comp;
							}
							}else if (node.props.renderType=="mask" || node.props.name=="mask"){
							comp.mask=tChild;
							}else {(
							tChild instanceof laya.display.Sprite )&& comp.addChild(tChild);
						}
					}
				}
			};
			var props=uiView.props;
			for (var prop in props){
				var value=props[prop];
				View.setCompValue(comp,prop,value,view);
			}
			if (Laya.__typeof(comp,'laya.ui.IItem'))(comp).initItems();
			if (uiView.compId && view && view._idMap){
				view._idMap[uiView.compId]=comp;
			}
			return comp;
		}

		View.setCompValue=function(comp,prop,value,view){
			if (prop==="var" && view){
				view[value]=comp;
				}else {
				comp[prop]=(value==="true" ? true :(value==="false" ? false :value))
			}
		}

		View.getCompInstance=function(json){
			var runtime=json.props?json.props.runtime:null;
			var compClass;
			compClass=runtime ? (View.viewClassMap[runtime] || View.uiClassMap[runtime]|| Laya["__classmap"][runtime]):View.uiClassMap[json.type];
			if (json.props && json.props.hasOwnProperty("renderType")&& json.props["renderType"]=="instance")return compClass["instance"];
			return compClass ? new compClass():null;
		}

		View.regComponent=function(key,compClass){
			View.uiClassMap[key]=compClass;
			ClassUtils.regClass(key,compClass);
		}

		View.regViewRuntime=function(key,compClass){
			View.viewClassMap[key]=compClass;
		}

		View.uiMap={};
		View.viewClassMap={};
		__static(View,
		['uiClassMap',function(){return this.uiClassMap={"ViewStack":ViewStack,"LinkButton":Button,"TextArea":TextArea,"ColorPicker":ColorPicker,"Box":Box,"Button":Button,"CheckBox":CheckBox,"Clip":Clip,"ComboBox":ComboBox,"Component":Component,"HScrollBar":HScrollBar,"HSlider":HSlider,"Image":Image,"Label":Label,"List":List,"Panel":Panel,"ProgressBar":ProgressBar,"Radio":Radio,"RadioGroup":RadioGroup,"ScrollBar":ScrollBar,"Slider":Slider,"Tab":Tab,"TextInput":TextInput,"View":View,"VScrollBar":VScrollBar,"VSlider":VSlider,"Tree":Tree,"HBox":HBox,"VBox":VBox,"Sprite":Sprite,"Animation":Animation,"Text":Text,"FontClip":FontClip};}
		]);
		View.__init$=function(){
			View._regs()
		}

		return View;
	})(Box)


	/**
	*<code>CheckBox</code> 组件显示一个小方框，该方框内可以有选中标记。
	*<code>CheckBox</code> 组件还可以显示可选的文本标签，默认该标签位于 CheckBox 右侧。
	*<p><code>CheckBox</code> 使用 <code>dataSource</code>赋值时的的默认属性是：<code>selected</code>。</p>
	*
	*@example <caption>以下示例代码，创建了一个 <code>CheckBox</code> 实例。</caption>
	*package
	*{
		*import laya.ui.CheckBox;
		*import laya.utils.Handler;
		*public class CheckBox_Example
		*{
			*public function CheckBox_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load("resource/ui/check.png",Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*trace("资源加载完成！");
				*var checkBox:CheckBox=new CheckBox("resource/ui/check.png","这个是一个CheckBox组件。");//创建一个 CheckBox 类的实例对象 checkBox ,传入它的皮肤skin和标签label。
				*checkBox.x=100;//设置 checkBox 对象的属性 x 的值，用于控制 checkBox 对象的显示位置。
				*checkBox.y=100;//设置 checkBox 对象的属性 y 的值，用于控制 checkBox 对象的显示位置。
				*checkBox.clickHandler=new Handler(this,onClick,[checkBox]);//设置 checkBox 的点击事件处理器。
				*Laya.stage.addChild(checkBox);//将此 checkBox 对象添加到显示列表。
				*}
			*private function onClick(checkBox:CheckBox):void
			*{
				*trace("输出选中状态: checkBox.selected = "+checkBox.selected);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load("resource/ui/check.png",laya.utils.Handler.create(this,loadComplete));//加载资源
	*function loadComplete()
	*{
		*console.log("资源加载完成！");
		*var checkBox:laya.ui.CheckBox=new laya.ui.CheckBox("resource/ui/check.png","这个是一个CheckBox组件。");//创建一个 CheckBox 类的类的实例对象 checkBox ,传入它的皮肤skin和标签label。
		*checkBox.x=100;//设置 checkBox 对象的属性 x 的值，用于控制 checkBox 对象的显示位置。
		*checkBox.y=100;//设置 checkBox 对象的属性 y 的值，用于控制 checkBox 对象的显示位置。
		*checkBox.clickHandler=new laya.utils.Handler(this,this.onClick,[checkBox],false);//设置 checkBox 的点击事件处理器。
		*Laya.stage.addChild(checkBox);//将此 checkBox 对象添加到显示列表。
		*}
	*function onClick(checkBox)
	*{
		*console.log("checkBox.selected = ",checkBox.selected);
		*}
	*@example
	*import CheckBox=laya.ui.CheckBox;
	*import Handler=laya.utils.Handler;
	*class CheckBox_Example{
		*constructor()
		*{
			*Laya.init(640,800);
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/check.png",Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete()
		*{
			*var checkBox:CheckBox=new CheckBox("resource/ui/check.png","这个是一个CheckBox组件。");//创建一个 CheckBox 类的实例对象 checkBox ,传入它的皮肤skin和标签label。
			*checkBox.x=100;//设置 checkBox 对象的属性 x 的值，用于控制 checkBox 对象的显示位置。
			*checkBox.y=100;//设置 checkBox 对象的属性 y 的值，用于控制 checkBox 对象的显示位置。
			*checkBox.clickHandler=new Handler(this,this.onClick,[checkBox]);//设置 checkBox 的点击事件处理器。
			*Laya.stage.addChild(checkBox);//将此 checkBox 对象添加到显示列表。
			*}
		*private onClick(checkBox:CheckBox):void
		*{
			*console.log("输出选中状态: checkBox.selected = "+checkBox.selected);
			*}
		*}
	*/
	//class laya.ui.CheckBox extends laya.ui.Button
	var CheckBox=(function(_super){
		/**
		*创建一个新的 <code>CheckBox</code> 组件实例。
		*@param skin 皮肤资源地址。
		*@param label 文本标签的内容。
		*/
		function CheckBox(skin,label){
			(label===void 0)&& (label="");
			CheckBox.__super.call(this,skin,label);
		}

		__class(CheckBox,'laya.ui.CheckBox',_super);
		var __proto=CheckBox.prototype;
		/**@inheritDoc */
		__proto.preinitialize=function(){
			laya.ui.Component.prototype.preinitialize.call(this);
			this.toggle=true;
			this._autoSize=false;
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			_super.prototype.initialize.call(this);
			this.createText();
			this._text.align="left";
			this._text.valign="top";
			this._text.width=0;
		}

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='boolean'))this.selected=value;
			else if ((typeof value=='string'))this.selected=value==="true";
			else _super.prototype._$set_dataSource.call(this,value);
		});

		return CheckBox;
	})(Button)


	/**
	*<code>LayoutBox</code> 是一个布局容器类。
	*/
	//class laya.ui.LayoutBox extends laya.ui.Box
	var LayoutBox=(function(_super){
		function LayoutBox(){
			this._space=0;
			this._align="none";
			this._itemChanged=false;
			LayoutBox.__super.call(this);
		}

		__class(LayoutBox,'laya.ui.LayoutBox',_super);
		var __proto=LayoutBox.prototype;
		/**@inheritDoc */
		__proto.addChild=function(child){
			child.on(/*laya.events.Event.RESIZE*/"resize",this,this.onResize);
			this._setItemChanged();
			return laya.display.Node.prototype.addChild.call(this,child);
		}

		__proto.onResize=function(e){
			this._setItemChanged();
		}

		/**@inheritDoc */
		__proto.addChildAt=function(child,index){
			child.on(/*laya.events.Event.RESIZE*/"resize",this,this.onResize);
			this._setItemChanged();
			return laya.display.Node.prototype.addChildAt.call(this,child,index);
		}

		/**@inheritDoc */
		__proto.removeChild=function(child){
			child.off(/*laya.events.Event.RESIZE*/"resize",this,this.onResize);
			this._setItemChanged();
			return laya.display.Node.prototype.removeChild.call(this,child);
		}

		/**@inheritDoc */
		__proto.removeChildAt=function(index){
			this.getChildAt(index).off(/*laya.events.Event.RESIZE*/"resize",this,this.onResize);
			this._setItemChanged();
			return laya.display.Node.prototype.removeChildAt.call(this,index);
		}

		/**刷新。*/
		__proto.refresh=function(){
			this._setItemChanged();
		}

		/**
		*改变子对象的布局。
		*/
		__proto.changeItems=function(){
			this._itemChanged=false;
		}

		/**
		*排序项目列表。可通过重写改变默认排序规则。
		*@param items 项目列表。
		*/
		__proto.sortItem=function(items){
			if (items)items.sort(function(a,b){return a.y-b.y;});
		}

		__proto._setItemChanged=function(){
			if (!this._itemChanged){
				this._itemChanged=true;
				this.callLater(this.changeItems);
			}
		}

		/**子对象的间隔。*/
		__getset(0,__proto,'space',function(){
			return this._space;
			},function(value){
			this._space=value;
			this._setItemChanged();
		});

		/**子对象对齐方式。*/
		__getset(0,__proto,'align',function(){
			return this._align;
			},function(value){
			this._align=value;
			this._setItemChanged();
		});

		return LayoutBox;
	})(Box)


	/**
	*字体切片，简化版的位图字体，只需设置一个切片图片和文字内容即可使用，效果同位图字体
	*使用方式：设置位图字体皮肤skin，设置皮肤对应的字体内容sheet（如果多行，可以使用空格换行），示例：
	*fontClip.skin="font1.png";//设置皮肤
	*fontClip.sheet="abc123 456";//设置皮肤对应的内容，空格换行。此皮肤为2行5列（显示时skin会被等分为2行5列），第一行对应的文字为"abc123"，第二行为"456"
	*fontClip.value="a1326";//显示"a1326"文字
	*/
	//class laya.ui.FontClip extends laya.ui.Clip
	var FontClip=(function(_super){
		function FontClip(skin,sheet){
			this._valueArr=null;
			this._indexMap=null;
			this._sheet=null;
			this._direction="horizontal";
			this._spaceX=0;
			this._spaceY=0;
			this._align="left";
			this._wordsW=0;
			this._wordsH=0;
			FontClip.__super.call(this);
			if (skin)this.skin=skin;
			if (sheet)this.sheet=sheet;
		}

		__class(FontClip,'laya.ui.FontClip',_super);
		var __proto=FontClip.prototype;
		__proto.createChildren=function(){
			this._bitmap=new AutoBitmap();
			this.on(/*laya.events.Event.LOADED*/"loaded",this,this._onClipLoaded);
		}

		/**
		*资源加载完毕
		*/
		__proto._onClipLoaded=function(){
			this.callLater(this.changeValue);
		}

		/**渲染数值*/
		__proto.changeValue=function(){
			if (!this._sources)return;
			if (!this._valueArr)return;
			this.graphics.clear(true);
			var texture;
			texture=this._sources[0];
			if (!texture)return;
			var isHorizontal=(this._direction==="horizontal");
			if (isHorizontal){
				this._wordsW=this._valueArr.length *(texture.sourceWidth+this.spaceX);
				this._wordsH=texture.sourceHeight;
				}else{
				this._wordsW=texture.sourceWidth;
				this._wordsH=(texture.sourceHeight+this.spaceY)*this._valueArr.length;
			};
			var dX=0;
			if (this._width){
				switch(this._align){
					case "center":
						dX=0.5 *(this._width-this._wordsW);
						break ;
					case "right":
						dX=this._width-this._wordsW;
						break ;
					default :
						dX=0;
					}
			}
			for (var i=0,sz=this._valueArr.length;i < sz;i++){
				var index=this._indexMap[this._valueArr.charAt(i)];
				if (!this.sources[index])continue ;
				texture=this.sources[index];
				if (isHorizontal)this.graphics.drawTexture(texture,dX+i *(texture.sourceWidth+this.spaceX),0,texture.sourceWidth,texture.sourceHeight);
				else this.graphics.drawTexture(texture,0+dX,i *(texture.sourceHeight+this.spaceY),texture.sourceWidth,texture.sourceHeight);
			}
			if (!this._width){
				this.resetLayoutX();
				this.callLater(this.changeSize);
			}
			if (!this._height){
				this.resetLayoutY();
				this.callLater(this.changeSize);
			}
		}

		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this._valueArr=null;
			this._indexMap=null;
			this.graphics.clear(true);
			this.removeSelf();
			this.off(/*laya.events.Event.LOADED*/"loaded",this,this._onClipLoaded);
			_super.prototype.destroy.call(this,destroyChild);
		}

		/**
		*设置位图字体内容，空格代表换行。比如"abc123 456"，代表第一行对应的文字为"abc123"，第二行为"456"
		*/
		__getset(0,__proto,'sheet',function(){
			return this._sheet;
			},function(value){
			value+="";
			this._sheet=value;
			var arr=value.split(" ");
			this._clipX=String(arr[0]).length;
			this.clipY=arr.length;
			this._indexMap={};
			for (var i=0;i < this._clipY;i++){
				var line=arr[i].split("");
				for (var j=0,n=line.length;j < n;j++){
					this._indexMap[line[j]]=i *this._clipX+j;
				}
			}
		});

		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this.callLater(this.changeValue);
		});

		/**
		*布局方向。
		*<p>默认值为"horizontal"。</p>
		*<p><b>取值：</b>
		*<li>"horizontal"：表示水平布局。</li>
		*<li>"vertical"：表示垂直布局。</li>
		*</p>
		*/
		__getset(0,__proto,'direction',function(){
			return this._direction;
			},function(value){
			this._direction=value;
			this.callLater(this.changeValue);
		});

		/**
		*设置位图字体的显示内容
		*/
		__getset(0,__proto,'value',function(){
			if (!this._valueArr)return "";
			return this._valueArr;
			},function(value){
			value+="";
			this._valueArr=value;
			this.callLater(this.changeValue);
		});

		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this.callLater(this.changeValue);
		});

		/**X方向文字间隙*/
		__getset(0,__proto,'spaceX',function(){
			return this._spaceX;
			},function(value){
			this._spaceX=value;
			if (this._direction==="horizontal")this.callLater(this.changeValue);
		});

		/**Y方向文字间隙*/
		__getset(0,__proto,'spaceY',function(){
			return this._spaceY;
			},function(value){
			this._spaceY=value;
			if (!(this._direction==="horizontal"))this.callLater(this.changeValue);
		});

		/**水平对齐方式*/
		__getset(0,__proto,'align',function(){
			return this._align;
			},function(v){
			this._align=v;
			this.callLater(this.changeValue);
		});

		__getset(0,__proto,'measureWidth',function(){
			return this._wordsW;
		});

		__getset(0,__proto,'measureHeight',function(){
			return this._wordsH;
		});

		return FontClip;
	})(Clip)


	/**
	*<code>List</code> 控件可显示项目列表。默认为垂直方向列表。可通过UI编辑器自定义列表。
	*
	*@example <caption>以下示例代码，创建了一个 <code>List</code> 实例。</caption>
	*package
	*{
		*import laya.ui.List;
		*import laya.utils.Handler;
		*public class List_Example
		*{
			*public function List_Example()
			*{
				*Laya.init(640,800,"false");//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,onLoadComplete));
				*}
			*private function onLoadComplete():void
			*{
				*var arr:Array=[];//创建一个数组，用于存贮列表的数据信息。
				*for (var i:int=0;i &lt;20;i++)
				*{
					*arr.push({label:"item"+i});
					*}
				*var list:List=new List();//创建一个 List 类的实例对象 list 。
				*list.itemRender=Item;//设置 list 的单元格渲染器。
				*list.repeatX=1;//设置 list 的水平方向单元格数量。
				*list.repeatY=10;//设置 list 的垂直方向单元格数量。
				*list.vScrollBarSkin="resource/ui/vscroll.png";//设置 list 的垂直方向滚动条皮肤。
				*list.array=arr;//设置 list 的列表数据源。
				*list.pos(100,100);//设置 list 的位置。
				*list.selectEnable=true;//设置 list 可选。
				*list.selectHandler=new Handler(this,onSelect);//设置 list 改变选择项执行的处理器。
				*Laya.stage.addChild(list);//将 list 添加到显示列表。
				*}
			*private function onSelect(index:int):void
			*{
				*trace("当前选择的项目索引： index= ",index);
				*}
			*}
		*}
	*import laya.ui.Box;
	*import laya.ui.Label;
	*class Item extends Box
	*{
		*public function Item()
		*{
			*graphics.drawRect(0,0,100,20,null,"#ff0000");
			*var label:Label=new Label();
			*label.text="100000";
			*label.name="label";//设置 label 的name属性值。
			*label.size(100,20);
			*addChild(label);
			*}
		*}
	*@example
	*(function (_super){
		*function Item(){
			*Item.__super.call(this);//初始化父类
			*this.graphics.drawRect(0,0,100,20,"#ff0000");
			*var label=new laya.ui.Label();//创建一个 Label 类的实例对象 label 。
			*label.text="100000";//设置 label 的文本内容。
			*label.name="label";//设置 label 的name属性值。
			*label.size(100,20);//设置 label 的宽度、高度。
			*this.addChild(label);//将 label 添加到显示列表。
			*};
		*Laya.class(Item,"mypackage.listExample.Item",_super);//注册类 Item 。
		*})(laya.ui.Box);
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
	*var res=["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"];
	*Laya.loader.load(res,new laya.utils.Handler(this,onLoadComplete));//加载资源。
	*function onLoadComplete(){
		*var arr=[];//创建一个数组，用于存贮列表的数据信息。
		*for (var i=0;i &lt;20;i++){
			*arr.push({label:"item"+i});
			*}
		*var list=new laya.ui.List();//创建一个 List 类的实例对象 list 。
		*list.itemRender=mypackage.listExample.Item;//设置 list 的单元格渲染器。
		*list.repeatX=1;//设置 list 的水平方向单元格数量。
		*list.repeatY=10;//设置 list 的垂直方向单元格数量。
		*list.vScrollBarSkin="resource/ui/vscroll.png";//设置 list 的垂直方向滚动条皮肤。
		*list.array=arr;//设置 list 的列表数据源。
		*list.pos(100,100);//设置 list 的位置。
		*list.selectEnable=true;//设置 list 可选。
		*list.selectHandler=new laya.utils.Handler(this,onSelect);//设置 list 改变选择项执行的处理器。
		*Laya.stage.addChild(list);//将 list 添加到显示列表。
		*}
	*function onSelect(index)
	*{
		*console.log("当前选择的项目索引： index= ",index);
		*}
	*
	*@example
	*import List=laya.ui.List;
	*import Handler=laya.utils.Handler;
	*public class List_Example {
		*public List_Example(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,this.onLoadComplete));
			*}
		*private onLoadComplete():void {
			*var arr=[];//创建一个数组，用于存贮列表的数据信息。
			*for (var i:number=0;i &lt;20;i++)
			*{
				*arr.push({label:"item"+i });
				*}
			*var list:List=new List();//创建一个 List 类的实例对象 list 。
			*list.itemRender=Item;//设置 list 的单元格渲染器。
			*list.repeatX=1;//设置 list 的水平方向单元格数量。
			*list.repeatY=10;//设置 list 的垂直方向单元格数量。
			*list.vScrollBarSkin="resource/ui/vscroll.png";//设置 list 的垂直方向滚动条皮肤。
			*list.array=arr;//设置 list 的列表数据源。
			*list.pos(100,100);//设置 list 的位置。
			*list.selectEnable=true;//设置 list 可选。
			*list.selectHandler=new Handler(this,this.onSelect);//设置 list 改变选择项执行的处理器。
			*Laya.stage.addChild(list);//将 list 添加到显示列表。
			*}
		*private onSelect(index:number):void {
			*console.log("当前选择的项目索引： index= ",index);
			*}
		*}
	*import Box=laya.ui.Box;
	*import Label=laya.ui.Label;
	*class Item extends Box {
		*constructor(){
			*this.graphics.drawRect(0,0,100,20,null,"#ff0000");
			*var label:Label=new Label();
			*label.text="100000";
			*label.name="label";//设置 label 的name属性值。
			*label.size(100,20);
			*this.addChild(label);
			*}
		*}
	*/
	//class laya.ui.List extends laya.ui.Box
	var List=(function(_super){
		function List(){
			this.selectHandler=null;
			this.renderHandler=null;
			this.mouseHandler=null;
			this.selectEnable=false;
			this.totalPage=0;
			this._content=null;
			this._scrollBar=null;
			this._itemRender=null;
			this._repeatX=0;
			this._repeatY=0;
			this._repeatX2=0;
			this._repeatY2=0;
			this._spaceX=0;
			this._spaceY=0;
			this._array=null;
			this._startIndex=0;
			this._selectedIndex=-1;
			this._page=0;
			this._isVertical=true;
			this._cellSize=20;
			this._cellOffset=0;
			this._isMoved=false;
			this.cacheContent=false;
			this._createdLine=0;
			this._cellChanged=false;
			List.__super.call(this);
			this._cells=[];
			this._offset=new Point();
		}

		__class(List,'laya.ui.List',_super);
		var __proto=List.prototype;
		Laya.imps(__proto,{"laya.ui.IRender":true,"laya.ui.IItem":true})
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this._content && this._content.destroy(destroyChild);
			this._scrollBar && this._scrollBar.destroy(destroyChild);
			laya.ui.Component.prototype.destroy.call(this,destroyChild);
			this._content=null;
			this._scrollBar=null;
			this._itemRender=null;
			this._cells=null;
			this._array=null;
			this.selectHandler=this.renderHandler=this.mouseHandler=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._content=new Box());
		}

		__proto.onScrollStart=function(){
			this._$P.cacheAs || (this._$P.cacheAs=_super.prototype._$get_cacheAs.call(this));
			_super.prototype._$set_cacheAs.call(this,"none");
			this._scrollBar.once(/*laya.events.Event.END*/"end",this,this.onScrollEnd);
		}

		__proto.onScrollEnd=function(){
			_super.prototype._$set_cacheAs.call(this,this._$P.cacheAs);
		}

		__proto._removePreScrollBar=function(){
			var preNode=this.removeChildByName("scrollBar");
			if (preNode)preNode.destroy(true);
		}

		/**
		*@private
		*更改单元格的信息。
		*@internal 在此销毁、创建单元格，并设置单元格的位置等属性。相当于此列表内容发送改变时调用此函数。
		*/
		__proto.changeCells=function(){
			this._cellChanged=false;
			if (this._itemRender){
				this.scrollBar=this.getChildByName("scrollBar");
				var cell=this._getOneCell();
				var cellWidth=(cell.width+this._spaceX)|| 1;
				var cellHeight=(cell.height+this._spaceY)|| 1;
				if (this._width > 0)this._repeatX2=this._isVertical ? Math.round(this._width / cellWidth):Math.ceil(this._width / cellWidth);
				if (this._height > 0)this._repeatY2=this._isVertical ? Math.ceil(this._height / cellHeight):Math.round(this._height / cellHeight);
				var listWidth=this._width ? this._width :(cellWidth *this.repeatX-this._spaceX);
				var listHeight=this._height ? this._height :(cellHeight *this.repeatY-this._spaceY);
				this._cellSize=this._isVertical ? cellHeight :cellWidth;
				this._cellOffset=this._isVertical ? (cellHeight *Math.max(this._repeatY2,this._repeatY)-listHeight-this._spaceY):(cellWidth *Math.max(this._repeatX2,this._repeatX)-listWidth-this._spaceX);
				if (this._isVertical && this._scrollBar)this._scrollBar.height=listHeight;
				else if (!this._isVertical && this._scrollBar)this._scrollBar.width=listWidth;
				this.setContentSize(listWidth,listHeight);
				var numX=this._isVertical ? this.repeatX :this.repeatY;
				var numY=(this._isVertical ? this.repeatY :this.repeatX)+(this._scrollBar ? 1 :0);
				this._createItems(0,numX,numY);
				this._createdLine=numY;
				if (this._array){
					this.array=this._array;
					this.runCallLater(this.renderItems);
				}
			}
		}

		__proto._getOneCell=function(){
			if (this._cells.length===0){
				var item=this.createItem();
				this._offset.setTo(item.x,item.y);
				this._cells.push(item);
			}
			return this._cells[0];
		}

		__proto._createItems=function(startY,numX,numY){
			var box=this._content;
			var cell=this._getOneCell();
			var cellWidth=cell.width+this._spaceX;
			var cellHeight=cell.height+this._spaceY;
			if (this.cacheContent){
				var cacheBox=new Box();
				cacheBox.cacheAsBitmap=true;
				cacheBox.pos((this._isVertical ? 0 :startY)*cellWidth,(this._isVertical ? startY :0)*cellHeight);
				this._content.addChild(cacheBox);
				this._content.optimizeScrollRect=true;
				box=cacheBox;
			};
			var arr=[];
			for (var i=this._cells.length-1;i >-1;i--){
				var item=this._cells[i];
				item.removeSelf();
				arr.push(item);
			}
			this._cells.length=0;
			for (var k=startY;k < numY;k++){
				for (var l=0;l < numX;l++){
					if (arr.length){
						cell=arr.pop();
						}else {
						cell=this.createItem();
					}
					cell.x=(this._isVertical ? l :k)*cellWidth-box.x;
					cell.y=(this._isVertical ? k :l)*cellHeight-box.y;
					cell.name="item"+(k *numX+l);
					box.addChild(cell);
					this.addCell(cell);
				}
			}
		}

		__proto.createItem=function(){
			return (typeof this._itemRender=='function')? new this._itemRender():View.createComp(this._itemRender);
		}

		/**
		*@private
		*添加单元格。
		*@param cell 需要添加的单元格对象。
		*/
		__proto.addCell=function(cell){
			cell.on(/*laya.events.Event.CLICK*/"click",this,this.onCellMouse);
			cell.on(/*laya.events.Event.RIGHT_CLICK*/"rightclick",this,this.onCellMouse);
			cell.on(/*laya.events.Event.MOUSE_OVER*/"mouseover",this,this.onCellMouse);
			cell.on(/*laya.events.Event.MOUSE_OUT*/"mouseout",this,this.onCellMouse);
			cell.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this.onCellMouse);
			cell.on(/*laya.events.Event.MOUSE_UP*/"mouseup",this,this.onCellMouse);
			this._cells.push(cell);
		}

		/**
		*初始化单元格信息。
		*/
		__proto.initItems=function(){
			if (!this._itemRender && this.getChildByName("item0")!=null){
				this.repeatX=1;
				var count=0;
				count=0;
				for (var i=0;i < 10000;i++){
					var cell=this.getChildByName("item"+i);
					if (cell){
						this.addCell(cell);
						count++;
						continue ;
					}
					break ;
				}
				this.repeatY=count;
			}
		}

		/**
		*设置可视区域大小。
		*<p>以（0，0，width参数，height参数）组成的矩形区域为可视区域。</p>
		*@param width 可视区域宽度。
		*@param height 可视区域高度。
		*/
		__proto.setContentSize=function(width,height){
			this._content.width=width;
			this._content.height=height;
			if (this._scrollBar||this._offset.x!=0||this._offset.y!=0){
				this._content.scrollRect || (this._content.scrollRect=new Rectangle());
				this._content.scrollRect.setTo(-this._offset.x,-this._offset.y,width,height);
				this._content.conchModel && this._content.conchModel.scrollRect(-this._offset.x,-this._offset.y,width,height);
			}
			this.event(/*laya.events.Event.RESIZE*/"resize");
		}

		/**
		*@private
		*单元格的鼠标事件侦听处理函数。
		*/
		__proto.onCellMouse=function(e){
			if (e.type===/*laya.events.Event.MOUSE_DOWN*/"mousedown")this._isMoved=false;
			var cell=e.currentTarget;
			var index=this._startIndex+this._cells.indexOf(cell);
			if (index < 0)return;
			if (e.type===/*laya.events.Event.CLICK*/"click" || e.type===/*laya.events.Event.RIGHT_CLICK*/"rightclick"){
				if (this.selectEnable && !this._isMoved)this.selectedIndex=index;
				else this.changeCellState(cell,true,0);
				}else if ((e.type===/*laya.events.Event.MOUSE_OVER*/"mouseover" || e.type===/*laya.events.Event.MOUSE_OUT*/"mouseout")&& this._selectedIndex!==index){
				this.changeCellState(cell,e.type===/*laya.events.Event.MOUSE_OVER*/"mouseover",0);
			}
			this.mouseHandler && this.mouseHandler.runWith([e,index]);
		}

		/**
		*@private
		*改变单元格的可视状态。
		*@param cell 单元格对象。
		*@param visable 是否显示。
		*@param index 单元格的属性 <code>index</code> 值。
		*/
		__proto.changeCellState=function(cell,visable,index){
			var selectBox=cell.getChildByName("selectBox");
			if (selectBox){
				this.selectEnable=true;
				selectBox.visible=visable;
				selectBox.index=index;
			}
		}

		/**@inheritDoc */
		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
			this.setContentSize(this.width,this.height);
			if (this._scrollBar)this.callLater(this.onScrollBarChange);
		}

		/**
		*@private
		*滚动条的 <code>Event.CHANGE</code> 事件侦听处理函数。
		*/
		__proto.onScrollBarChange=function(e){
			this.runCallLater(this.changeCells);
			var scrollValue=this._scrollBar.value;
			var lineX=(this._isVertical ? this.repeatX :this.repeatY);
			var lineY=(this._isVertical ? this.repeatY :this.repeatX);
			var scrollLine=Math.floor(scrollValue / this._cellSize);
			if (!this.cacheContent){
				var index=scrollLine *lineX;
				var num=0;
				if (index > this._startIndex){
					num=index-this._startIndex;
					var down=true;
					var toIndex=this._startIndex+lineX *(lineY+1);
					this._isMoved=true;
					}else if (index < this._startIndex){
					num=this._startIndex-index;
					down=false;
					toIndex=this._startIndex-1;
					this._isMoved=true;
				}
				for (var i=0;i < num;i++){
					if (down){
						var cell=this._cells.shift();
						this._cells[this._cells.length]=cell;
						var cellIndex=toIndex+i;
						}else {
						cell=this._cells.pop();
						this._cells.unshift(cell);
						cellIndex=toIndex-i;
					};
					var pos=Math.floor(cellIndex / lineX)*this._cellSize;
					this._isVertical ? cell.y=pos :cell.x=pos;
					this.renderItem(cell,cellIndex);
				}
				this._startIndex=index;
				this.changeSelectStatus();
				}else {
				num=(lineY+1);
				if (this._createdLine-scrollLine < num){
					this._createItems(this._createdLine,lineX,this._createdLine+num);
					this._createdLine+=num;
					this.renderItems(this._createdLine *lineX,0);
				}
			};
			var r=this._content.scrollRect;
			if (this._isVertical){
				r.y=scrollValue-this._offset.y;
				r.x=-this._offset.x;
				}else {
				r.y=-this._offset.y;
				r.x=scrollValue-this._offset.x;
			}
			this._content.conchModel && this._content.conchModel.scrollRect(r.x,r.y,r.width,r.height);
			this.repaint();
		}

		__proto.posCell=function(cell,cellIndex){
			if (!this._scrollBar)return;
			var lineX=(this._isVertical ? this.repeatX :this.repeatY);
			var lineY=(this._isVertical ? this.repeatY :this.repeatX);
			var pos=Math.floor(cellIndex / lineX)*this._cellSize;
			this._isVertical ? cell.y=pos :cell.x=pos;
		}

		/**
		*@private
		*改变单元格的选择状态。
		*/
		__proto.changeSelectStatus=function(){
			for (var i=0,n=this._cells.length;i < n;i++){
				this.changeCellState(this._cells[i],this._selectedIndex===this._startIndex+i,1);
			}
		}

		/**
		*@private
		*渲染单元格列表。
		*/
		__proto.renderItems=function(from,to){
			(from===void 0)&& (from=0);
			(to===void 0)&& (to=0);
			for (var i=from,n=to || this._cells.length;i < n;i++){
				this.renderItem(this._cells[i],this._startIndex+i);
			}
			this.changeSelectStatus();
		}

		/**
		*渲染一个单元格。
		*@param cell 需要渲染的单元格对象。
		*@param index 单元格索引。
		*/
		__proto.renderItem=function(cell,index){
			if (this._array&&index >=0 && index < this._array.length){
				cell.visible=true;
				cell.dataSource=this._array[index];
				if (!this.cacheContent){
					this.posCell(cell,index);
				}
				if (this.hasListener(/*laya.events.Event.RENDER*/"render"))this.event(/*laya.events.Event.RENDER*/"render",[cell,index]);
				if (this.renderHandler)this.renderHandler.runWith([cell,index]);
				}else {
				cell.visible=false;
				cell.dataSource=null;
			}
		}

		/**
		*刷新列表数据源。
		*/
		__proto.refresh=function(){
			this.startIndex=this._startIndex;
		}

		/**
		*获取单元格数据源。
		*@param index 单元格索引。
		*/
		__proto.getItem=function(index){
			if (index >-1 && index < this._array.length){
				return this._array[index];
			}
			return null;
		}

		/**
		*修改单元格数据源。
		*@param index 单元格索引。
		*@param source 单元格数据源。
		*/
		__proto.changeItem=function(index,source){
			if (index >-1 && index < this._array.length){
				this._array[index]=source;
				if (index >=this._startIndex && index < this._startIndex+this._cells.length){
					this.renderItem(this.getCell(index),index);
				}
			}
		}

		/**
		*设置单元格数据源。
		*@param index 单元格索引。
		*@param source 单元格数据源。
		*/
		__proto.setItem=function(index,source){
			this.changeItem(index,source);
		}

		/**
		*添加单元格数据源。
		*@param souce 数据源。
		*/
		__proto.addItem=function(souce){
			this._array.push(souce);
			this.array=this._array;
		}

		/**
		*添加单元格数据源到对应的数据索引处。
		*@param souce 单元格数据源。
		*@param index 索引。
		*/
		__proto.addItemAt=function(souce,index){
			this._array.splice(index,0,souce);
			this.array=this._array;
		}

		/**
		*通过数据源索引删除单元格数据源。
		*@param index 需要删除的数据源索引值。
		*/
		__proto.deleteItem=function(index){
			this._array.splice(index,1);
			this.array=this._array;
		}

		/**
		*通过可视单元格索引，获取单元格。
		*@param index 可视单元格索引。
		*@return 单元格对象。
		*/
		__proto.getCell=function(index){
			this.runCallLater(this.changeCells);
			if (index >-1 && this._cells){
				return this._cells[(index-this._startIndex)% this._cells.length];
			}
			return null;
		}

		/**
		*<p>滚动列表，以设定的数据索引对应的单元格为当前可视列表的第一项。</p>
		*@param index 单元格在数据列表中的索引。
		*/
		__proto.scrollTo=function(index){
			if (this._scrollBar){
				var numX=this._isVertical ? this.repeatX :this.repeatY;
				this._scrollBar.value=Math.floor(index / numX)*this._cellSize;
				}else {
				this.startIndex=index;
			}
		}

		/**
		*<p>缓动滚动列表，以设定的数据索引对应的单元格为当前可视列表的第一项。</p>
		*@param index 单元格在数据列表中的索引。
		*@param time 缓动时间。
		*@param complete 缓动结束回掉
		*/
		__proto.tweenTo=function(index,time,complete){
			(time===void 0)&& (time=200);
			if (this._scrollBar){
				var numX=this._isVertical ? this.repeatX :this.repeatY;
				Tween.to(this._scrollBar,{value:Math.floor(index / numX)*this._cellSize},time,null,complete,0,true);
				}else {
				this.startIndex=index;
				if (complete)complete.run();
			}
		}

		/**@private */
		__proto._setCellChanged=function(){
			if (!this._cellChanged){
				this._cellChanged=true;
				this.callLater(this.changeCells);
			}
		}

		__proto.commitMeasure=function(){
			this.runCallLater(this.changeCells);
		}

		/**@inheritDoc */
		__getset(0,__proto,'cacheAs',_super.prototype._$get_cacheAs,function(value){
			_super.prototype._$set_cacheAs.call(this,value);
			if (this._scrollBar){
				this._$P.cacheAs=null;
				if (value!=="none")this._scrollBar.on(/*laya.events.Event.START*/"start",this,this.onScrollStart);
				else this._scrollBar.off(/*laya.events.Event.START*/"start",this,this.onScrollStart);
			}
		});

		/**
		*获取对 <code>List</code> 组件所包含的内容容器 <code>Box</code> 组件的引用。
		*/
		__getset(0,__proto,'content',function(){
			return this._content;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			if (value !=this._height){
				_super.prototype._$set_height.call(this,value);
				this._setCellChanged();
			}
		});

		/**
		*单元格渲染器。
		*<p><b>取值：</b>
		*<ol>
		*<li>单元格类对象。</li>
		*<li> UI 的 JSON 描述。</li>
		*</ol></p>
		*/
		__getset(0,__proto,'itemRender',function(){
			return this._itemRender;
			},function(value){
			if (this._itemRender !=value){
				this._itemRender=value;
				for (var i=this._cells.length-1;i >-1;i--){
					this._cells[i].destroy();
				}
				this._cells.length=0;
				this._setCellChanged();
			}
		});

		/**
		*垂直方向滚动条皮肤。
		*/
		__getset(0,__proto,'vScrollBarSkin',function(){
			return this._scrollBar ? this._scrollBar.skin :null;
			},function(value){
			this._removePreScrollBar();
			var scrollBar=new VScrollBar();
			scrollBar.name="scrollBar";
			scrollBar.right=0;
			if (value && value !=" ")
				scrollBar.skin=value;
			this.scrollBar=scrollBar;
			this.addChild(scrollBar);
			this._setCellChanged();
		});

		/**
		*列表的当前页码。
		*/
		__getset(0,__proto,'page',function(){
			return this._page;
			},function(value){
			this._page=value
			if (this._array){
				this._page=value > 0 ? value :0;
				this._page=this._page < this.totalPage ? this._page :this.totalPage-1;
				this.startIndex=this._page *this.repeatX *this.repeatY;
			}
		});

		/**
		*水平方向滚动条皮肤。
		*/
		__getset(0,__proto,'hScrollBarSkin',function(){
			return this._scrollBar ? this._scrollBar.skin :null;
			},function(value){
			this._removePreScrollBar();
			var scrollBar=new HScrollBar();
			scrollBar.name="scrollBar";
			scrollBar.bottom=0;
			if (value && value !=" ")
				scrollBar.skin=value;
			this.scrollBar=scrollBar;
			this.addChild(scrollBar);
			this._setCellChanged();
		});

		/**
		*水平方向显示的单元格数量。
		*/
		__getset(0,__proto,'repeatX',function(){
			return this._repeatX > 0 ? this._repeatX :this._repeatX2 > 0 ? this._repeatX2 :1;
			},function(value){
			this._repeatX=value;
			this._setCellChanged();
		});

		/**
		*获取对 <code>List</code> 组件所包含的滚动条 <code>ScrollBar</code> 组件的引用。
		*/
		__getset(0,__proto,'scrollBar',function(){
			return this._scrollBar;
			},function(value){
			if (this._scrollBar !=value){
				this._scrollBar=value;
				if (value){
					this._isVertical=this._scrollBar.isVertical;
					this.addChild(this._scrollBar);
					this._scrollBar.on(/*laya.events.Event.CHANGE*/"change",this,this.onScrollBarChange);
				}
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			if (value !=this._width){
				_super.prototype._$set_width.call(this,value);
				this._setCellChanged();
			}
		});

		/**
		*垂直方向显示的单元格数量。
		*/
		__getset(0,__proto,'repeatY',function(){
			return this._repeatY > 0 ? this._repeatY :this._repeatY2 > 0 ? this._repeatY2 :1;
			},function(value){
			this._repeatY=value;
			this._setCellChanged();
		});

		/**
		*水平方向显示的单元格之间的间距（以像素为单位）。
		*/
		__getset(0,__proto,'spaceX',function(){
			return this._spaceX;
			},function(value){
			this._spaceX=value;
			this._setCellChanged();
		});

		/**
		*垂直方向显示的单元格之间的间距（以像素为单位）。
		*/
		__getset(0,__proto,'spaceY',function(){
			return this._spaceY;
			},function(value){
			this._spaceY=value;
			this._setCellChanged();
		});

		/**
		*表示当前选择的项索引。selectedIndex值更改会引起list重新渲染
		*/
		__getset(0,__proto,'selectedIndex',function(){
			return this._selectedIndex;
			},function(value){
			if (this._selectedIndex !=value){
				this._selectedIndex=value;
				this.changeSelectStatus();
				this.event(/*laya.events.Event.CHANGE*/"change");
				this.selectHandler && this.selectHandler.runWith(value);
				this.startIndex=this._startIndex;
			}
		});

		/**
		*当前选中的单元格数据源。
		*/
		__getset(0,__proto,'selectedItem',function(){
			return this._selectedIndex !=-1 ? this._array[this._selectedIndex] :null;
			},function(value){
			this.selectedIndex=this._array.indexOf(value);
		});

		/**
		*列表的数据总个数。
		*/
		__getset(0,__proto,'length',function(){
			return this._array ? this._array.length :0;
		});

		/**
		*获取或设置当前选择的单元格对象。
		*/
		__getset(0,__proto,'selection',function(){
			return this.getCell(this._selectedIndex);
			},function(value){
			this.selectedIndex=this._startIndex+this._cells.indexOf(value);
		});

		/**
		*当前显示的单元格列表的开始索引。
		*/
		__getset(0,__proto,'startIndex',function(){
			return this._startIndex;
			},function(value){
			this._startIndex=value > 0 ? value :0;
			this.callLater(this.renderItems);
		});

		/**
		*列表数据源。
		*/
		__getset(0,__proto,'array',function(){
			return this._array;
			},function(value){
			this.runCallLater(this.changeCells);
			this._array=value || [];
			var length=this._array.length;
			this.totalPage=Math.ceil(length / (this.repeatX *this.repeatY));
			this._selectedIndex=this._selectedIndex < length ? this._selectedIndex :length-1;
			this.startIndex=this._startIndex;
			if (this._scrollBar){
				this._scrollBar.stopScroll();
				var numX=this._isVertical ? this.repeatX :this.repeatY;
				var numY=this._isVertical ? this.repeatY :this.repeatX;
				var lineCount=Math.ceil(length / numX);
				var total=this._cellOffset > 0 ? this.totalPage+1 :this.totalPage;
				if (total > 1){
					this._scrollBar.scrollSize=this._cellSize;
					this._scrollBar.thumbPercent=numY / lineCount;
					this._scrollBar.setScroll(0,(lineCount-numY)*this._cellSize+this._cellOffset,this._scrollBar.value);
					this._scrollBar.target=this._content;
					}else {
					this._scrollBar.setScroll(0,0,0);
					this._scrollBar.target=this._content;
				}
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.selectedIndex=parseInt(value);
			else if ((value instanceof Array))this.array=value
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**
		*单元格集合。
		*/
		__getset(0,__proto,'cells',function(){
			this.runCallLater(this.changeCells);
			return this._cells;
		});

		return List;
	})(Box)


	/**
	*<code>Panel</code> 是一个面板容器类。
	*/
	//class laya.ui.Panel extends laya.ui.Box
	var Panel=(function(_super){
		function Panel(){
			this._content=null;
			this._vScrollBar=null;
			this._hScrollBar=null;
			this._scrollChanged=false;
			Panel.__super.call(this);
			this.width=this.height=100;
			this._content.optimizeScrollRect=true;
		}

		__class(Panel,'laya.ui.Panel',_super);
		var __proto=Panel.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			laya.ui.Component.prototype.destroy.call(this,destroyChild);
			this._content && this._content.destroy(destroyChild);
			this._vScrollBar && this._vScrollBar.destroy(destroyChild);
			this._hScrollBar && this._hScrollBar.destroy(destroyChild);
			this._vScrollBar=null;
			this._hScrollBar=null;
			this._content=null;
		}

		/**@inheritDoc */
		__proto.destroyChildren=function(){
			this._content.destroyChildren();
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			laya.display.Node.prototype.addChild.call(this,this._content=new Box());
		}

		/**@inheritDoc */
		__proto.addChild=function(child){
			child.on(/*laya.events.Event.RESIZE*/"resize",this,this.onResize);
			this._setScrollChanged();
			return this._content.addChild(child);
		}

		/**
		*@private
		*子对象的 <code>Event.RESIZE</code> 事件侦听处理函数。
		*/
		__proto.onResize=function(){
			this._setScrollChanged();
		}

		/**@inheritDoc */
		__proto.addChildAt=function(child,index){
			child.on(/*laya.events.Event.RESIZE*/"resize",this,this.onResize);
			this._setScrollChanged();
			return this._content.addChildAt(child,index);
		}

		/**@inheritDoc */
		__proto.removeChild=function(child){
			child.off(/*laya.events.Event.RESIZE*/"resize",this,this.onResize);
			this._setScrollChanged();
			return this._content.removeChild(child);
		}

		/**@inheritDoc */
		__proto.removeChildAt=function(index){
			this.getChildAt(index).off(/*laya.events.Event.RESIZE*/"resize",this,this.onResize);
			this._setScrollChanged();
			return this._content.removeChildAt(index);
		}

		/**@inheritDoc */
		__proto.removeChildren=function(beginIndex,endIndex){
			(beginIndex===void 0)&& (beginIndex=0);
			(endIndex===void 0)&& (endIndex=0x7fffffff);
			for (var i=this._content.numChildren-1;i >-1;i--){
				this._content.removeChildAt(i);
			}
			this._setScrollChanged();
			return this;
		}

		/**@inheritDoc */
		__proto.getChildAt=function(index){
			return this._content.getChildAt(index);
		}

		/**@inheritDoc */
		__proto.getChildByName=function(name){
			return this._content.getChildByName(name);
		}

		/**@inheritDoc */
		__proto.getChildIndex=function(child){
			return this._content.getChildIndex(child);
		}

		/**@private */
		__proto.changeScroll=function(){
			this._scrollChanged=false;
			var contentW=this.contentWidth || 1;
			var contentH=this.contentHeight || 1;
			var vscroll=this._vScrollBar;
			var hscroll=this._hScrollBar;
			var vShow=vscroll && contentH > this._height;
			var hShow=hscroll && contentW > this._width;
			var showWidth=vShow ? this._width-vscroll.width :this._width;
			var showHeight=hShow ? this._height-hscroll.height :this._height;
			if (vscroll){
				vscroll.x=this._width-vscroll.width;
				vscroll.y=0;
				vscroll.height=this._height-(hShow ? hscroll.height :0);
				vscroll.scrollSize=Math.max(this._height *0.033,1);
				vscroll.thumbPercent=showHeight / contentH;
				vscroll.setScroll(0,contentH-showHeight,vscroll.value);
			}
			if (hscroll){
				hscroll.x=0;
				hscroll.y=this._height-hscroll.height;
				hscroll.width=this._width-(vShow ? vscroll.width :0);
				hscroll.scrollSize=Math.max(this._width *0.033,1);
				hscroll.thumbPercent=showWidth / contentW;
				hscroll.setScroll(0,contentW-showWidth,hscroll.value);
			}
		}

		/**@inheritDoc */
		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
			this.setContentSize(this._width,this._height);
		}

		/**
		*@private
		*设置内容的宽度、高度（以像素为单位）。
		*@param width 宽度。
		*@param height 高度。
		*/
		__proto.setContentSize=function(width,height){
			var content=this._content;
			content.width=width;
			content.height=height;
			content.scrollRect || (content.scrollRect=new Rectangle());
			content.scrollRect.setTo(0,0,width,height);
			content.conchModel&&content.conchModel.scrollRect(0,0,width,height);
		}

		/**
		*@private
		*滚动条的<code><code>Event.MOUSE_DOWN</code>事件侦听处理函数。</code>事件侦听处理函数。
		*@param scrollBar 滚动条对象。
		*@param e Event 对象。
		*/
		__proto.onScrollBarChange=function(scrollBar){
			var rect=this._content.scrollRect;
			if (rect){
				var start=Math.round(scrollBar.value);
				scrollBar.isVertical ? rect.y=start :rect.x=start;
				this._content.conchModel&&this._content.conchModel.scrollRect(rect.x,rect.y,rect.width,rect.height);
			}
		}

		/**
		*<p>滚动内容容器至设定的垂直、水平方向滚动条位置。</p>
		*@param x 水平方向滚动条属性value值。滚动条位置数字。
		*@param y 垂直方向滚动条属性value值。滚动条位置数字。
		*/
		__proto.scrollTo=function(x,y){
			(x===void 0)&& (x=0);
			(y===void 0)&& (y=0);
			if (this.vScrollBar)this.vScrollBar.value=y;
			if (this.hScrollBar)this.hScrollBar.value=x;
		}

		/**
		*刷新滚动内容。
		*/
		__proto.refresh=function(){
			this.changeScroll();
		}

		__proto.onScrollStart=function(){
			this._$P.cacheAs || (this._$P.cacheAs=_super.prototype._$get_cacheAs.call(this));
			_super.prototype._$set_cacheAs.call(this,"none");
			this._hScrollBar && this._hScrollBar.once(/*laya.events.Event.END*/"end",this,this.onScrollEnd);
			this._vScrollBar && this._vScrollBar.once(/*laya.events.Event.END*/"end",this,this.onScrollEnd);
		}

		__proto.onScrollEnd=function(){
			_super.prototype._$set_cacheAs.call(this,this._$P.cacheAs);
		}

		/**@private */
		__proto._setScrollChanged=function(){
			if (!this._scrollChanged){
				this._scrollChanged=true;
				this.callLater(this.changeScroll);
			}
		}

		/**@inheritDoc */
		__getset(0,__proto,'numChildren',function(){
			return this._content.numChildren;
		});

		/**
		*水平方向滚动条皮肤。
		*/
		__getset(0,__proto,'hScrollBarSkin',function(){
			return this._hScrollBar ? this._hScrollBar.skin :null;
			},function(value){
			if (this._hScrollBar==null){
				laya.display.Node.prototype.addChild.call(this,this._hScrollBar=new HScrollBar());
				this._hScrollBar.on(/*laya.events.Event.CHANGE*/"change",this,this.onScrollBarChange,[this._hScrollBar]);
				this._hScrollBar.target=this._content;
				this._setScrollChanged();
			}
			this._hScrollBar.skin=value;
		});

		/**
		*@private
		*获取内容宽度（以像素为单位）。
		*/
		__getset(0,__proto,'contentWidth',function(){
			var max=0;
			for (var i=this._content.numChildren-1;i >-1;i--){
				var comp=this._content.getChildAt(i);
				max=Math.max(comp.x+comp.width *comp.scaleX,max);
			}
			return max;
		});

		/**
		*@private
		*获取内容高度（以像素为单位）。
		*/
		__getset(0,__proto,'contentHeight',function(){
			var max=0;
			for (var i=this._content.numChildren-1;i >-1;i--){
				var comp=this._content.getChildAt(i);
				max=Math.max(comp.y+comp.height *comp.scaleY,max);
			}
			return max;
		});

		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._setScrollChanged();
		});

		/**
		*水平方向滚动条对象。
		*/
		__getset(0,__proto,'hScrollBar',function(){
			return this._hScrollBar;
		});

		/**
		*获取内容容器对象。
		*/
		__getset(0,__proto,'content',function(){
			return this._content;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._setScrollChanged();
		});

		/**
		*垂直方向滚动条皮肤。
		*/
		__getset(0,__proto,'vScrollBarSkin',function(){
			return this._vScrollBar ? this._vScrollBar.skin :null;
			},function(value){
			if (this._vScrollBar==null){
				laya.display.Node.prototype.addChild.call(this,this._vScrollBar=new VScrollBar());
				this._vScrollBar.on(/*laya.events.Event.CHANGE*/"change",this,this.onScrollBarChange,[this._vScrollBar]);
				this._vScrollBar.target=this._content;
				this._setScrollChanged();
			}
			this._vScrollBar.skin=value;
		});

		/**
		*垂直方向滚动条对象。
		*/
		__getset(0,__proto,'vScrollBar',function(){
			return this._vScrollBar;
		});

		/**@inheritDoc */
		__getset(0,__proto,'cacheAs',_super.prototype._$get_cacheAs,function(value){
			_super.prototype._$set_cacheAs.call(this,value);
			this._$P.cacheAs=null;
			if (value!=="none"){
				this._hScrollBar && this._hScrollBar.on(/*laya.events.Event.START*/"start",this,this.onScrollStart);
				this._vScrollBar && this._vScrollBar.on(/*laya.events.Event.START*/"start",this,this.onScrollStart);
				}else {
				this._hScrollBar && this._hScrollBar.off(/*laya.events.Event.START*/"start",this,this.onScrollStart);
				this._vScrollBar && this._vScrollBar.off(/*laya.events.Event.START*/"start",this,this.onScrollStart);
			}
		});

		return Panel;
	})(Box)


	/**
	*使用 <code>HScrollBar</code> （水平 <code>ScrollBar</code> ）控件，可以在因数据太多而不能在显示区域完全显示时控制显示的数据部分。
	*@example <caption>以下示例代码，创建了一个 <code>HScrollBar</code> 实例。</caption>
	*package
	*{
		*import laya.ui.HScrollBar;
		*import laya.utils.Handler;
		*public class HScrollBar_Example
		*{
			*private var hScrollBar:HScrollBar;
			*public function HScrollBar_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/hscroll.png","resource/ui/hscroll$bar.png","resource/ui/hscroll$down.png","resource/ui/hscroll$up.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*hScrollBar=new HScrollBar();//创建一个 HScrollBar 类的实例对象 hScrollBar 。
				*hScrollBar.skin="resource/ui/hscroll.png";//设置 hScrollBar 的皮肤。
				*hScrollBar.x=100;//设置 hScrollBar 对象的属性 x 的值，用于控制 hScrollBar 对象的显示位置。
				*hScrollBar.y=100;//设置 hScrollBar 对象的属性 y 的值，用于控制 hScrollBar 对象的显示位置。
				*hScrollBar.changeHandler=new Handler(this,onChange);//设置 hScrollBar 的滚动变化处理器。
				*Laya.stage.addChild(hScrollBar);//将此 hScrollBar 对象添加到显示列表。
				*}
			*private function onChange(value:Number):void
			*{
				*trace("滚动条的位置： value="+value);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var hScrollBar;
	*var res=["resource/ui/hscroll.png","resource/ui/hscroll$bar.png","resource/ui/hscroll$down.png","resource/ui/hscroll$up.png"];
	*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));//加载资源。
	*function onLoadComplete(){
		*console.log("资源加载完成！");
		*hScrollBar=new laya.ui.HScrollBar();//创建一个 HScrollBar 类的实例对象 hScrollBar 。
		*hScrollBar.skin="resource/ui/hscroll.png";//设置 hScrollBar 的皮肤。
		*hScrollBar.x=100;//设置 hScrollBar 对象的属性 x 的值，用于控制 hScrollBar 对象的显示位置。
		*hScrollBar.y=100;//设置 hScrollBar 对象的属性 y 的值，用于控制 hScrollBar 对象的显示位置。
		*hScrollBar.changeHandler=new laya.utils.Handler(this,onChange);//设置 hScrollBar 的滚动变化处理器。
		*Laya.stage.addChild(hScrollBar);//将此 hScrollBar 对象添加到显示列表。
		*}
	*function onChange(value)
	*{
		*console.log("滚动条的位置： value="+value);
		*}
	*@example
	*import HScrollBar=laya.ui.HScrollBar;
	*import Handler=laya.utils.Handler;
	*class HScrollBar_Example {
		*private hScrollBar:HScrollBar;
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/hscroll.png","resource/ui/hscroll$bar.png","resource/ui/hscroll$down.png","resource/ui/hscroll$up.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*this.hScrollBar=new HScrollBar();//创建一个 HScrollBar 类的实例对象 hScrollBar 。
			*this.hScrollBar.skin="resource/ui/hscroll.png";//设置 hScrollBar 的皮肤。
			*this.hScrollBar.x=100;//设置 hScrollBar 对象的属性 x 的值，用于控制 hScrollBar 对象的显示位置。
			*this.hScrollBar.y=100;//设置 hScrollBar 对象的属性 y 的值，用于控制 hScrollBar 对象的显示位置。
			*this.hScrollBar.changeHandler=new Handler(this,this.onChange);//设置 hScrollBar 的滚动变化处理器。
			*Laya.stage.addChild(this.hScrollBar);//将此 hScrollBar 对象添加到显示列表。
			*}
		*private onChange(value:number):void {
			*console.log("滚动条的位置： value="+value);
			*}
		*}
	*/
	//class laya.ui.HScrollBar extends laya.ui.ScrollBar
	var HScrollBar=(function(_super){
		function HScrollBar(){HScrollBar.__super.call(this);;
		};

		__class(HScrollBar,'laya.ui.HScrollBar',_super);
		var __proto=HScrollBar.prototype;
		/**@inheritDoc */
		__proto.initialize=function(){
			_super.prototype.initialize.call(this);
			this.slider.isVertical=false;
		}

		return HScrollBar;
	})(ScrollBar)


	/**
	*<code>Group</code> 是一个可以自动布局的项集合控件。
	*<p> <code>Group</code> 的默认项对象为 <code>Button</code> 类实例。
	*<code>Group</code> 是 <code>Tab</code> 和 <code>RadioGroup</code> 的基类。</p>
	*/
	//class laya.ui.UIGroup extends laya.ui.Box
	var UIGroup=(function(_super){
		function UIGroup(labels,skin){
			this.selectHandler=null;
			this._items=null;
			this._selectedIndex=-1;
			this._skin=null;
			this._direction="horizontal";
			this._space=0;
			this._labels=null;
			this._labelColors=null;
			this._labelFont=null;
			this._labelStrokeColor=null;
			this._strokeColors=null;
			this._labelStroke=NaN;
			this._labelSize=0;
			this._labelBold=false;
			this._labelPadding=null;
			this._labelAlign=null;
			this._stateNum=0;
			this._labelChanged=false;
			UIGroup.__super.call(this);
			this.skin=skin;
			this.labels=labels;
		}

		__class(UIGroup,'laya.ui.UIGroup',_super);
		var __proto=UIGroup.prototype;
		Laya.imps(__proto,{"laya.ui.IItem":true})
		/**@inheritDoc */
		__proto.preinitialize=function(){
			this.mouseEnabled=true;
		}

		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			laya.ui.Component.prototype.destroy.call(this,destroyChild);
			this._items && (this._items.length=0);
			this._items=null;
			this.selectHandler=null;
		}

		/**
		*添加一个项对象，返回此项对象的索引id。
		*
		*@param item 需要添加的项对象。
		*@param autoLayOut 是否自动布局，如果为true，会根据 <code>direction</code> 和 <code>space</code> 属性计算item的位置。
		*@return
		*/
		__proto.addItem=function(item,autoLayOut){
			(autoLayOut===void 0)&& (autoLayOut=true);
			var display=item;
			var index=this._items.length;
			display.name="item"+index;
			this.addChild(display);
			this.initItems();
			if (autoLayOut && index > 0){
				var preItem=this._items [index-1];
				if (this._direction=="horizontal"){
					display.x=preItem.x+preItem.width+this._space;
					}else {
					display.y=preItem.y+preItem.height+this._space;
				}
				}else {
				if (autoLayOut){
					display.x=0;
					display.y=0;
				}
			}
			return index;
		}

		/**
		*删除一个项对象。
		*@param item 需要删除的项对象。
		*@param autoLayOut 是否自动布局，如果为true，会根据 <code>direction</code> 和 <code>space</code> 属性计算item的位置。
		*/
		__proto.delItem=function(item,autoLayOut){
			(autoLayOut===void 0)&& (autoLayOut=true);
			var index=this._items.indexOf(item);
			if (index !=-1){
				var display=item;
				this.removeChild(display);
				for (var i=index+1,n=this._items.length;i < n;i++){
					var child=this._items [i];
					child.name="item"+(i-1);
					if (autoLayOut){
						if (this._direction=="horizontal"){
							child.x-=display.width+this._space;
							}else {
							child.y-=display.height+this._space;
						}
					}
				}
				this.initItems();
				if (this._selectedIndex >-1){
					var newIndex=0;
					newIndex=this._selectedIndex < this._items.length ? this._selectedIndex :(this._selectedIndex-1);
					this._selectedIndex=-1;
					this.selectedIndex=newIndex;
				}
			}
		}

		/**
		*初始化项对象们。
		*/
		__proto.initItems=function(){
			this._items || (this._items=[]);
			this._items.length=0;
			for (var i=0;i < 10000;i++){
				var item=this.getChildByName("item"+i);
				if (item==null)break ;
				this._items.push(item);
				item.selected=(i===this._selectedIndex);
				item.clickHandler=Handler.create(this,this.itemClick,[i],false);
			}
		}

		/**
		*@private
		*项对象的点击事件侦听处理函数。
		*@param index 项索引。
		*/
		__proto.itemClick=function(index){
			this.selectedIndex=index;
		}

		/**
		*@private
		*通过对象的索引设置项对象的 <code>selected</code> 属性值。
		*@param index 需要设置的项对象的索引。
		*@param selected 表示项对象的选中状态。
		*/
		__proto.setSelect=function(index,selected){
			if (this._items && index >-1 && index < this._items.length)this._items[index].selected=selected;
		}

		/**
		*@private
		*创建一个项显示对象。
		*@param skin 项对象的皮肤。
		*@param label 项对象标签。
		*/
		__proto.createItem=function(skin,label){
			return null;
		}

		/**
		*@private
		*更改项对象的属性值。
		*/
		__proto.changeLabels=function(){
			this._labelChanged=false;
			if (this._items){
				var left=0
				for (var i=0,n=this._items.length;i < n;i++){
					var btn=this._items [i];
					this._skin && (btn.skin=this._skin);
					this._labelColors && (btn.labelColors=this._labelColors);
					this._labelSize && (btn.labelSize=this._labelSize);
					this._labelStroke && (btn.labelStroke=this._labelStroke);
					this._labelStrokeColor && (btn.labelStrokeColor=this._labelStrokeColor);
					this._strokeColors && (btn.strokeColors=this._strokeColors);
					this._labelBold && (btn.labelBold=this._labelBold);
					this._labelPadding && (btn.labelPadding=this._labelPadding);
					this._labelAlign && (btn.labelAlign=this._labelAlign);
					this._stateNum && (btn.stateNum=this._stateNum);
					this._labelFont && (btn.labelFont=this._labelFont);
					if (this._direction==="horizontal"){
						btn.y=0;
						btn.x=left;
						left+=btn.width+this._space;
						}else {
						btn.x=0;
						btn.y=left;
						left+=btn.height+this._space;
					}
				}
			}
			this.changeSize();
		}

		/**@inheritDoc */
		__proto.commitMeasure=function(){
			this.runCallLater(this.changeLabels);
		}

		/**@private */
		__proto._setLabelChanged=function(){
			if (!this._labelChanged){
				this._labelChanged=true;
				this.callLater(this.changeLabels);
			}
		}

		/**
		*<p>描边颜色，以字符串表示。</p>
		*默认值为 "#000000"（黑色）;
		*@see laya.display.Text.strokeColor()
		*/
		__getset(0,__proto,'labelStrokeColor',function(){
			return this._labelStrokeColor;
			},function(value){
			if (this._labelStrokeColor !=value){
				this._labelStrokeColor=value;
				this._setLabelChanged();
			}
		});

		/**
		*@copy laya.ui.Image#skin
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				this._setLabelChanged();
			}
		});

		/**
		*表示当前选择的项索引。默认值为-1。
		*/
		__getset(0,__proto,'selectedIndex',function(){
			return this._selectedIndex;
			},function(value){
			if (this._selectedIndex !=value){
				this.setSelect(this._selectedIndex,false);
				this._selectedIndex=value;
				this.setSelect(value,true);
				this.event(/*laya.events.Event.CHANGE*/"change");
				this.selectHandler && this.selectHandler.runWith(this._selectedIndex);
			}
		});

		/**
		*标签集合字符串。以逗号做分割，如"item0,item1,item2,item3,item4,item5"。
		*/
		__getset(0,__proto,'labels',function(){
			return this._labels;
			},function(value){
			if (this._labels !=value){
				this._labels=value;
				this.removeChildren();
				this._setLabelChanged();
				if (this._labels){
					var a=this._labels.split(",");
					for (var i=0,n=a.length;i < n;i++){
						var item=this.createItem(this._skin,a[i]);
						item.name="item"+i;
						this.addChild(item);
					}
				}
				this.initItems();
			}
		});

		/**
		*<p>表示各个状态下的描边颜色。</p>
		*@see laya.display.Text.strokeColor()
		*/
		__getset(0,__proto,'strokeColors',function(){
			return this._strokeColors;
			},function(value){
			if (this._strokeColors !=value){
				this._strokeColors=value;
				this._setLabelChanged();
			}
		});

		/**
		*@copy laya.ui.Button#labelColors()
		*/
		__getset(0,__proto,'labelColors',function(){
			return this._labelColors;
			},function(value){
			if (this._labelColors !=value){
				this._labelColors=value;
				this._setLabelChanged();
			}
		});

		/**
		*<p>描边宽度（以像素为单位）。</p>
		*默认值0，表示不描边。
		*@see laya.display.Text.stroke()
		*/
		__getset(0,__proto,'labelStroke',function(){
			return this._labelStroke;
			},function(value){
			if (this._labelStroke !=value){
				this._labelStroke=value;
				this._setLabelChanged();
			}
		});

		/**
		*表示按钮文本标签的字体大小。
		*/
		__getset(0,__proto,'labelSize',function(){
			return this._labelSize;
			},function(value){
			if (this._labelSize !=value){
				this._labelSize=value;
				this._setLabelChanged();
			}
		});

		/**
		*表示按钮的状态值，以数字表示，默认为3态。
		*@see laya.ui.Button#stateNum
		*/
		__getset(0,__proto,'stateNum',function(){
			return this._stateNum;
			},function(value){
			if (this._stateNum !=value){
				this._stateNum=value;
				this._setLabelChanged();
			}
		});

		/**
		*表示按钮文本标签是否为粗体字。
		*/
		__getset(0,__proto,'labelBold',function(){
			return this._labelBold;
			},function(value){
			if (this._labelBold !=value){
				this._labelBold=value;
				this._setLabelChanged();
			}
		});

		/**
		*表示按钮文本标签的字体名称，以字符串形式表示。
		*@see laya.display.Text.font()
		*/
		__getset(0,__proto,'labelFont',function(){
			return this._labelFont;
			},function(value){
			if (this._labelFont !=value){
				this._labelFont=value;
				this._setLabelChanged();
			}
		});

		/**
		*表示按钮文本标签的边距。
		*<p><b>格式：</b>"上边距,右边距,下边距,左边距"。</p>
		*/
		__getset(0,__proto,'labelPadding',function(){
			return this._labelPadding;
			},function(value){
			if (this._labelPadding !=value){
				this._labelPadding=value;
				this._setLabelChanged();
			}
		});

		/**
		*布局方向。
		*<p>默认值为"horizontal"。</p>
		*<p><b>取值：</b>
		*<li>"horizontal"：表示水平布局。</li>
		*<li>"vertical"：表示垂直布局。</li>
		*</p>
		*/
		__getset(0,__proto,'direction',function(){
			return this._direction;
			},function(value){
			this._direction=value;
			this._setLabelChanged();
		});

		/**
		*项对象们之间的间隔（以像素为单位）。
		*/
		__getset(0,__proto,'space',function(){
			return this._space;
			},function(value){
			this._space=value;
			this._setLabelChanged();
		});

		/**
		*项对象们的存放数组。
		*/
		__getset(0,__proto,'items',function(){
			return this._items;
		});

		/**
		*获取或设置当前选择的项对象。
		*/
		__getset(0,__proto,'selection',function(){
			return this._selectedIndex >-1 && this._selectedIndex < this._items.length ? this._items[this._selectedIndex] :null;
			},function(value){
			this.selectedIndex=this._items.indexOf(value);
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.selectedIndex=parseInt(value);
			else if ((value instanceof Array))this.labels=(value).join(",");
			else _super.prototype._$set_dataSource.call(this,value);
		});

		return UIGroup;
	})(Box)


	/**
	*使用 <code>HSlider</code> 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。
	*<p> <code>HSlider</code> 控件采用水平方向。滑块轨道从左向右扩展，而标签位于轨道的顶部或底部。</p>
	*
	*@example <caption>以下示例代码，创建了一个 <code>HSlider</code> 实例。</caption>
	*package
	*{
		*import laya.ui.HSlider;
		*import laya.utils.Handler;
		*public class HSlider_Example
		*{
			*private var hSlider:HSlider;
			*public function HSlider_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/hslider.png","resource/ui/hslider$bar.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*hSlider=new HSlider();//创建一个 HSlider 类的实例对象 hSlider 。
				*hSlider.skin="resource/ui/hslider.png";//设置 hSlider 的皮肤。
				*hSlider.min=0;//设置 hSlider 最低位置值。
				*hSlider.max=10;//设置 hSlider 最高位置值。
				*hSlider.value=2;//设置 hSlider 当前位置值。
				*hSlider.tick=1;//设置 hSlider 刻度值。
				*hSlider.x=100;//设置 hSlider 对象的属性 x 的值，用于控制 hSlider 对象的显示位置。
				*hSlider.y=100;//设置 hSlider 对象的属性 y 的值，用于控制 hSlider 对象的显示位置。
				*hSlider.changeHandler=new Handler(this,onChange);//设置 hSlider 位置变化处理器。
				*Laya.stage.addChild(hSlider);//把 hSlider 添加到显示列表。
				*}
			*private function onChange(value:Number):void
			*{
				*trace("滑块的位置： value="+value);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800,"canvas");//设置游戏画布宽高、渲染模式
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var hSlider;
	*var res=["resource/ui/hslider.png","resource/ui/hslider$bar.png"];
	*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));
	*function onLoadComplete(){
		*console.log("资源加载完成！");
		*hSlider=new laya.ui.HSlider();//创建一个 HSlider 类的实例对象 hSlider 。
		*hSlider.skin="resource/ui/hslider.png";//设置 hSlider 的皮肤。
		*hSlider.min=0;//设置 hSlider 最低位置值。
		*hSlider.max=10;//设置 hSlider 最高位置值。
		*hSlider.value=2;//设置 hSlider 当前位置值。
		*hSlider.tick=1;//设置 hSlider 刻度值。
		*hSlider.x=100;//设置 hSlider 对象的属性 x 的值，用于控制 hSlider 对象的显示位置。
		*hSlider.y=100;//设置 hSlider 对象的属性 y 的值，用于控制 hSlider 对象的显示位置。
		*hSlider.changeHandler=new laya.utils.Handler(this,onChange);//设置 hSlider 位置变化处理器。
		*Laya.stage.addChild(hSlider);//把 hSlider 添加到显示列表。
		*}
	*function onChange(value)
	*{
		*console.log("滑块的位置： value="+value);
		*}
	*@example
	*import Handler=laya.utils.Handler;
	*import HSlider=laya.ui.HSlider;
	*class HSlider_Example {
		*private hSlider:HSlider;
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/hslider.png","resource/ui/hslider$bar.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*this.hSlider=new HSlider();//创建一个 HSlider 类的实例对象 hSlider 。
			*this.hSlider.skin="resource/ui/hslider.png";//设置 hSlider 的皮肤。
			*this.hSlider.min=0;//设置 hSlider 最低位置值。
			*this.hSlider.max=10;//设置 hSlider 最高位置值。
			*this.hSlider.value=2;//设置 hSlider 当前位置值。
			*this.hSlider.tick=1;//设置 hSlider 刻度值。
			*this.hSlider.x=100;//设置 hSlider 对象的属性 x 的值，用于控制 hSlider 对象的显示位置。
			*this.hSlider.y=100;//设置 hSlider 对象的属性 y 的值，用于控制 hSlider 对象的显示位置。
			*this.hSlider.changeHandler=new Handler(this,this.onChange);//设置 hSlider 位置变化处理器。
			*Laya.stage.addChild(this.hSlider);//把 hSlider 添加到显示列表。
			*}
		*private onChange(value:number):void {
			*console.log("滑块的位置： value="+value);
			*}
		*}
	*
	*@see laya.ui.Slider
	*/
	//class laya.ui.HSlider extends laya.ui.Slider
	var HSlider=(function(_super){
		/**
		*创建一个 <code>HSlider</code> 类实例。
		*@param skin 皮肤。
		*/
		function HSlider(skin){
			HSlider.__super.call(this,skin);
			this.isVertical=false;
		}

		__class(HSlider,'laya.ui.HSlider',_super);
		return HSlider;
	})(Slider)


	/**
	*<code>Radio</code> 控件使用户可在一组互相排斥的选择中做出一种选择。
	*用户一次只能选择 <code>Radio</code> 组中的一个成员。选择未选中的组成员将取消选择该组中当前所选的 <code>Radio</code> 控件。
	*@see laya.ui.RadioGroup
	*/
	//class laya.ui.Radio extends laya.ui.Button
	var Radio=(function(_super){
		function Radio(skin,label){
			this._value=null;
			(label===void 0)&& (label="");
			Radio.__super.call(this,skin,label);
		}

		__class(Radio,'laya.ui.Radio',_super);
		var __proto=Radio.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._value=null;
		}

		/**@inheritDoc */
		__proto.preinitialize=function(){
			laya.ui.Component.prototype.preinitialize.call(this);
			this.toggle=false;
			this._autoSize=false;
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			_super.prototype.initialize.call(this);
			this.createText();
			this._text.align="left";
			this._text.valign="top";
			this._text.width=0;
			this.on(/*laya.events.Event.CLICK*/"click",this,this.onClick);
		}

		/**
		*@private
		*对象的<code>Event.CLICK</code>事件侦听处理函数。
		*/
		__proto.onClick=function(e){
			this.selected=true;
		}

		/**
		*获取或设置 <code>Radio</code> 关联的可选用户定义值。
		*/
		__getset(0,__proto,'value',function(){
			return this._value !=null ? this._value :this.label;
			},function(obj){
			this._value=obj;
		});

		return Radio;
	})(Button)


	/**
	*<code>Tree</code> 控件使用户可以查看排列为可扩展树的层次结构数据。
	*
	*@example
	*package
	*{
		*import laya.ui.Tree;
		*import laya.utils.Browser;
		*import laya.utils.Handler;
		*public class Tree_Example
		*{
			*public function Tree_Example()
			*{
				*Laya.init(640,800);
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png","resource/ui/clip_selectBox.png","resource/ui/clip_tree_folder.png","resource/ui/clip_tree_arrow.png"],Handler.create(this,onLoadComplete));
				*}
			*private function onLoadComplete():void
			*{
				*var xmlString:String;//创建一个xml字符串，用于存储树结构数据。
				*xmlString="&lt;root&gt;&lt;item label='box1'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;abc label='child5'/&gt;&lt;/item&gt;&lt;item label='box2'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;/item&gt;&lt;/root&gt;";
				*var domParser:*=new Browser.window.DOMParser();//创建一个DOMParser实例domParser。
				*var xml:*=domParser.parseFromString(xmlString,"text/xml");//解析xml字符。
				*var tree:Tree=new Tree();//创建一个 Tree 类的实例对象 tree 。
				*tree.scrollBarSkin="resource/ui/vscroll.png";//设置 tree 的皮肤。
				*tree.itemRender=Item;//设置 tree 的项渲染器。
				*tree.xml=xml;//设置 tree 的树结构数据。
				*tree.x=100;//设置 tree 对象的属性 x 的值，用于控制 tree 对象的显示位置。
				*tree.y=100;//设置 tree 对象的属性 y 的值，用于控制 tree 对象的显示位置。
				*tree.width=200;//设置 tree 的宽度。
				*tree.height=100;//设置 tree 的高度。
				*Laya.stage.addChild(tree);//将 tree 添加到显示列表。
				*}
			*}
		*}
	*import laya.ui.Box;
	*import laya.ui.Clip;
	*import laya.ui.Label;
	*class Item extends Box
	*{
		*public function Item()
		*{
			*this.name="render";
			*this.right=0;
			*this.left=0;
			*var selectBox:Clip=new Clip("resource/ui/clip_selectBox.png",1,2);
			*selectBox.name="selectBox";
			*selectBox.height=24;
			*selectBox.x=13;
			*selectBox.y=0;
			*selectBox.left=12;
			*addChild(selectBox);
			*var folder:Clip=new Clip("resource/ui/clip_tree_folder.png",1,3);
			*folder.name="folder";
			*folder.x=14;
			*folder.y=4;
			*addChild(folder);
			*var label:Label=new Label("treeItem");
			*label.name="label";
			*label.color="#ffff00";
			*label.width=150;
			*label.height=22;
			*label.x=33;
			*label.y=1;
			*label.left=33;
			*label.right=0;
			*addChild(label);
			*var arrow:Clip=new Clip("resource/ui/clip_tree_arrow.png",1,2);
			*arrow.name="arrow";
			*arrow.x=0;
			*arrow.y=5;
			*addChild(arrow);
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var res=["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png","resource/ui/clip_selectBox.png","resource/ui/clip_tree_folder.png","resource/ui/clip_tree_arrow.png"];
	*Laya.loader.load(res,new laya.utils.Handler(this,onLoadComplete));
	*function onLoadComplete(){
		*var xmlString;//创建一个xml字符串，用于存储树结构数据。
		*xmlString="&lt;root&gt;&lt;item label='box1'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;abc label='child5'/&gt;&lt;/item&gt;&lt;item label='box2'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;/item&gt;&lt;/root&gt;";
		*var domParser=new laya.utils.Browser.window.DOMParser();//创建一个DOMParser实例domParser。
		*var xml=domParser.parseFromString(xmlString,"text/xml");//解析xml字符。
		*var tree=new laya.ui.Tree();//创建一个 Tree 类的实例对象 tree 。
		*tree.scrollBarSkin="resource/ui/vscroll.png";//设置 tree 的皮肤。
		*tree.itemRender=mypackage.treeExample.Item;//设置 tree 的项渲染器。
		*tree.xml=xml;//设置 tree 的树结构数据。
		*tree.x=100;//设置 tree 对象的属性 x 的值，用于控制 tree 对象的显示位置。
		*tree.y=100;//设置 tree 对象的属性 y 的值，用于控制 tree 对象的显示位置。
		*tree.width=200;//设置 tree 的宽度。
		*tree.height=100;//设置 tree 的高度。
		*Laya.stage.addChild(tree);//将 tree 添加到显示列表。
		*}
	*(function (_super){
		*function Item(){
			*Item.__super.call(this);//初始化父类。
			*this.right=0;
			*this.left=0;
			*var selectBox=new laya.ui.Clip("resource/ui/clip_selectBox.png",1,2);
			*selectBox.name="selectBox";//设置 selectBox 的name 为“selectBox”时，将被识别为树结构的项的背景。2帧：悬停时背景、选中时背景。
			*selectBox.height=24;
			*selectBox.x=13;
			*selectBox.y=0;
			*selectBox.left=12;
			*this.addChild(selectBox);//需要使用this.访问父类的属性或方法。
			*var folder=new laya.ui.Clip("resource/ui/clip_tree_folder.png",1,3);
			*folder.name="folder";//设置 folder 的name 为“folder”时，将被识别为树结构的文件夹开启状态图表。2帧：折叠状态、打开状态。
			*folder.x=14;
			*folder.y=4;
			*this.addChild(folder);
			*var label=new laya.ui.Label("treeItem");
			*label.name="label";//设置 label 的name 为“label”时，此值将用于树结构数据赋值。
			*label.color="#ffff00";
			*label.width=150;
			*label.height=22;
			*label.x=33;
			*label.y=1;
			*label.left=33;
			*label.right=0;
			*this.addChild(label);
			*var arrow=new laya.ui.Clip("resource/ui/clip_tree_arrow.png",1,2);
			*arrow.name="arrow";//设置 arrow 的name 为“arrow”时，将被识别为树结构的文件夹开启状态图表。2帧：折叠状态、打开状态。
			*arrow.x=0;
			*arrow.y=5;
			*this.addChild(arrow);
			*};
		*Laya.class(Item,"mypackage.treeExample.Item",_super);//注册类 Item 。
		*})(laya.ui.Box);
	*@example
	*import Tree=laya.ui.Tree;
	*import Browser=laya.utils.Browser;
	*import Handler=laya.utils.Handler;
	*class Tree_Example {
		*constructor(){
			*Laya.init(640,800);
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png","resource/ui/vscroll$up.png","resource/ui/clip_selectBox.png","resource/ui/clip_tree_folder * . * png","resource/ui/clip_tree_arrow.png"],Handler.create(this,this.onLoadComplete));
			*}
		*private onLoadComplete():void {
			*var xmlString:String;//创建一个xml字符串，用于存储树结构数据。
			*xmlString="&lt;root&gt;&lt;item label='box1'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;abc label='child5'/&gt;&lt;/item&gt;&lt;item label='box2'&gt;&lt;abc  * label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;/item&gt;&lt;/root&gt;";
			*var domParser:any=new Browser.window.DOMParser();//创建一个DOMParser实例domParser。
			*var xml:any=domParser.parseFromString(xmlString,"text/xml");//解析xml字符。
			*var tree:Tree=new Tree();//创建一个 Tree 类的实例对象 tree 。
			*tree.scrollBarSkin="resource/ui/vscroll.png";//设置 tree 的皮肤。
			*tree.itemRender=Item;//设置 tree 的项渲染器。
			*tree.xml=xml;//设置 tree 的树结构数据。
			*tree.x=100;//设置 tree 对象的属性 x 的值，用于控制 tree 对象的显示位置。
			*tree.y=100;//设置 tree 对象的属性 y 的值，用于控制 tree 对象的显示位置。
			*tree.width=200;//设置 tree 的宽度。
			*tree.height=100;//设置 tree 的高度。
			*Laya.stage.addChild(tree);//将 tree 添加到显示列表。
			*}
		*}
	*import Box=laya.ui.Box;
	*import Clip=laya.ui.Clip;
	*import Label=laya.ui.Label;
	*class Item extends Box {
		*constructor(){
			*super();
			*this.name="render";
			*this.right=0;
			*this.left=0;
			*var selectBox:Clip=new Clip("resource/ui/clip_selectBox.png",1,2);
			*selectBox.name="selectBox";
			*selectBox.height=24;
			*selectBox.x=13;
			*selectBox.y=0;
			*selectBox.left=12;
			*this.addChild(selectBox);
			*var folder:Clip=new Clip("resource/ui/clip_tree_folder.png",1,3);
			*folder.name="folder";
			*folder.x=14;
			*folder.y=4;
			*this.addChild(folder);
			*var label:Label=new Label("treeItem");
			*label.name="label";
			*label.color="#ffff00";
			*label.width=150;
			*label.height=22;
			*label.x=33;
			*label.y=1;
			*label.left=33;
			*label.right=0;
			*this.addChild(label);
			*var arrow:Clip=new Clip("resource/ui/clip_tree_arrow.png",1,2);
			*arrow.name="arrow";
			*arrow.x=0;
			*arrow.y=5;
			*this.addChild(arrow);
			*}
		*}
	*/
	//class laya.ui.Tree extends laya.ui.Box
	var Tree=(function(_super){
		function Tree(){
			this._list=null;
			this._source=null;
			this._renderHandler=null;
			this._spaceLeft=10;
			this._spaceBottom=0;
			this._keepStatus=true;
			Tree.__super.call(this);
			this.width=this.height=200;
		}

		__class(Tree,'laya.ui.Tree',_super);
		var __proto=Tree.prototype;
		Laya.imps(__proto,{"laya.ui.IRender":true})
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			laya.ui.Component.prototype.destroy.call(this,destroyChild);
			this._list && this._list.destroy(destroyChild);
			this._list=null;
			this._source=null;
			this._renderHandler=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._list=new List());
			this._list.renderHandler=Handler.create(this,this.renderItem,null,false);
			this._list.repeatX=1;
			this._list.on(/*laya.events.Event.CHANGE*/"change",this,this.onListChange);
		}

		/**
		*@private
		*此对象包含的<code>List</code>实例的<code>Event.CHANGE</code>事件侦听处理函数。
		*/
		__proto.onListChange=function(e){
			this.event(/*laya.events.Event.CHANGE*/"change");
		}

		/**
		*@private
		*获取数据源集合。
		*/
		__proto.getArray=function(){
			var arr=[];
			var item;
			/*for each*/for(var $each_item in this._source){
				item=this._source[$each_item];
				if (this.getParentOpenStatus(item)){
					item.x=this._spaceLeft *this.getDepth(item);
					arr.push(item);
				}
			}
			return arr;
		}

		/**
		*@private
		*获取项对象的深度。
		*/
		__proto.getDepth=function(item,num){
			(num===void 0)&& (num=0);
			if (item.nodeParent==null)return num;
			else return this.getDepth(item.nodeParent,num+1);
		}

		/**
		*@private
		*获取项对象的上一级的打开状态。
		*/
		__proto.getParentOpenStatus=function(item){
			var parent=item.nodeParent;
			if (parent==null){
				return true;
				}else {
				if (parent.isOpen){
					if (parent.nodeParent !=null)return this.getParentOpenStatus(parent);
					else return true;
					}else {
					return false;
				}
			}
		}

		/**
		*@private
		*渲染一个项对象。
		*@param cell 一个项对象。
		*@param index 项的索引。
		*/
		__proto.renderItem=function(cell,index){
			var item=cell.dataSource;
			if (item){
				cell.left=item.x;
				var arrow=cell.getChildByName("arrow");
				if (arrow){
					if (item.hasChild){
						arrow.visible=true;
						arrow.index=item.isOpen ? 1 :0;
						arrow.tag=index;
						arrow.off(/*laya.events.Event.CLICK*/"click",this,this.onArrowClick);
						arrow.on(/*laya.events.Event.CLICK*/"click",this,this.onArrowClick);
						}else {
						arrow.visible=false;
					}
				};
				var folder=cell.getChildByName("folder");
				if (folder){
					if (folder.clipY==2){
						folder.index=item.isDirectory ? 0 :1;
						}else {
						folder.index=item.isDirectory ? item.isOpen ? 1 :0 :2;
					}
				}
				this._renderHandler && this._renderHandler.runWith([cell,index]);
			}
		}

		/**
		*@private
		*/
		__proto.onArrowClick=function(e){
			var arrow=e.currentTarget;
			var index=arrow.tag;
			this._list.array[index].isOpen=!this._list.array[index].isOpen;
			this.event(/*laya.events.Event.OPEN*/"open");
			this._list.array=this.getArray();
		}

		/**
		*设置指定项索引的项对象的打开状态。
		*@param index 项索引。
		*@param isOpen 是否处于打开状态。
		*/
		__proto.setItemState=function(index,isOpen){
			if (!this._list.array[index])return;
			this._list.array[index].isOpen=isOpen;
			this._list.array=this.getArray();
		}

		/**
		*刷新项列表。
		*/
		__proto.fresh=function(){
			this._list.array=this.getArray();
			this.repaint();
		}

		/**
		*@private
		*解析并处理XML类型的数据源。
		*/
		__proto.parseXml=function(xml,source,nodeParent,isRoot){
			var obj;
			var list=xml.childNodes;
			var childCount=list.length;
			if (!isRoot){
				obj={};
				var list2=xml.attributes;
				var attrs;
				/*for each*/for(var $each_attrs in list2){
					attrs=list2[$each_attrs];
					var prop=attrs.nodeName;
					var value=attrs.nodeValue;
					obj[prop]=value=="true" ? true :value=="false" ? false :value;
				}
				obj.nodeParent=nodeParent;
				if (childCount > 0)obj.isDirectory=true;
				obj.hasChild=childCount > 0;
				source.push(obj);
			}
			for (var i=0;i < childCount;i++){
				var node=list[i];
				this.parseXml(node,source,obj,false);
			}
		}

		/**
		*@private
		*处理数据项的打开状态。
		*/
		__proto.parseOpenStatus=function(oldSource,newSource){
			for (var i=0,n=newSource.length;i < n;i++){
				var newItem=newSource[i];
				if (newItem.isDirectory){
					for (var j=0,m=oldSource.length;j < m;j++){
						var oldItem=oldSource[j];
						if (oldItem.isDirectory && this.isSameParent(oldItem,newItem)&& newItem.label==oldItem.label){
							newItem.isOpen=oldItem.isOpen;
							break ;
						}
					}
				}
			}
		}

		/**
		*@private
		*判断两个项对象在树结构中的父节点是否相同。
		*@param item1 项对象。
		*@param item2 项对象。
		*@return 如果父节点相同值为true，否则值为false。
		*/
		__proto.isSameParent=function(item1,item2){
			if (item1.nodeParent==null && item2.nodeParent==null)return true;
			else if (item1.nodeParent==null || item2.nodeParent==null)return false
			else {
				if (item1.nodeParent.label==item2.nodeParent.label)return this.isSameParent(item1.nodeParent,item2.nodeParent);
				else return false;
			}
		}

		/**
		*更新项列表，显示指定键名的数据项。
		*@param key 键名。
		*/
		__proto.filter=function(key){
			if (Boolean(key)){
				var result=[];
				this.getFilterSource(this._source,result,key);
				this._list.array=result;
				}else {
				this._list.array=this.getArray();
			}
		}

		/**
		*@private
		*获取数据源中指定键名的值。
		*/
		__proto.getFilterSource=function(array,result,key){
			key=key.toLocaleLowerCase();
			var item;
			/*for each*/for(var $each_item in array){
				item=array[$each_item];
				if (!item.isDirectory && String(item.label).toLowerCase().indexOf(key)>-1){
					item.x=0;
					result.push(item);
				}
				if (item.child && item.child.length > 0){
					this.getFilterSource(item.child,result,key);
				}
			}
		}

		/**
		*每一项之间的间隔距离（以像素为单位）。
		*/
		__getset(0,__proto,'spaceBottom',function(){
			return this._list.spaceY;
			},function(value){
			this._list.spaceY=value;
		});

		/**
		*数据源发生变化后，是否保持之前打开状态，默认为true。
		*<p><b>取值：</b>
		*<li>true：保持之前打开状态。</li>
		*<li>false：不保持之前打开状态。</li>
		*</p>
		*/
		__getset(0,__proto,'keepStatus',function(){
			return this._keepStatus;
			},function(value){
			this._keepStatus=value;
		});

		/**
		*此对象包含的<code>List</code>实例的单元格渲染器。
		*<p><b>取值：</b>
		*<ol>
		*<li>单元格类对象。</li>
		*<li> UI 的 JSON 描述。</li>
		*</ol></p>
		*/
		__getset(0,__proto,'itemRender',function(){
			return this._list.itemRender;
			},function(value){
			this._list.itemRender=value;
		});

		/**
		*列表数据源，只包含当前可视节点数据。
		*/
		__getset(0,__proto,'array',function(){
			return this._list.array;
			},function(value){
			if (this._keepStatus && this._list.array && value){
				this.parseOpenStatus(this._list.array,value);
			}
			this._source=value;
			this._list.array=this.getArray();
		});

		/**
		*单元格鼠标事件处理器。
		*<p>默认返回参数（e:Event,index:int）。</p>
		*/
		__getset(0,__proto,'mouseHandler',function(){
			return this._list.mouseHandler;
			},function(value){
			this._list.mouseHandler=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			_super.prototype._$set_dataSource.call(this,value);
		});

		/**
		*数据源，全部节点数据。
		*/
		__getset(0,__proto,'source',function(){
			return this._source;
		});

		/**滚动条*/
		__getset(0,__proto,'scrollBar',function(){
			return this._list.scrollBar;
		});

		/**
		*此对象包含的<code>List</code>实例对象。
		*/
		__getset(0,__proto,'list',function(){
			return this._list;
		});

		/**
		*滚动条皮肤。
		*/
		__getset(0,__proto,'scrollBarSkin',function(){
			return this._list.vScrollBarSkin;
			},function(value){
			this._list.vScrollBarSkin=value;
		});

		/**
		*<code>Tree</code> 实例的渲染处理器。
		*/
		__getset(0,__proto,'renderHandler',function(){
			return this._renderHandler;
			},function(value){
			this._renderHandler=value;
		});

		/**
		*表示当前选择的项索引。
		*/
		__getset(0,__proto,'selectedIndex',function(){
			return this._list.selectedIndex;
			},function(value){
			this._list.selectedIndex=value;
		});

		/**
		*左侧缩进距离（以像素为单位）。
		*/
		__getset(0,__proto,'spaceLeft',function(){
			return this._spaceLeft;
			},function(value){
			this._spaceLeft=value;
		});

		/**
		*当前选中的项对象的数据源。
		*/
		__getset(0,__proto,'selectedItem',function(){
			return this._list.selectedItem;
			},function(value){
			this._list.selectedItem=value;
		});

		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._list.width=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._list.height=value;
		});

		/**
		*xml结构的数据源。
		*/
		__getset(0,__proto,'xml',null,function(value){
			var arr=[];
			this.parseXml(value.childNodes[0],arr,null,true);
			this.array=arr;
		});

		/**
		*表示选择的树节点项的<code>path</code>属性值。
		*/
		__getset(0,__proto,'selectedPath',function(){
			if (this._list.selectedItem){
				return this._list.selectedItem.path;
			}
			return null;
		});

		return Tree;
	})(Box)


	/**
	*<code>ViewStack</code> 类用于视图堆栈类，用于视图的显示等设置处理。
	*/
	//class laya.ui.ViewStack extends laya.ui.Box
	var ViewStack=(function(_super){
		function ViewStack(){
			this._items=null;
			this._selectedIndex=0;
			ViewStack.__super.call(this);
			this._setIndexHandler=Handler.create(this,this.setIndex,null,false);
		}

		__class(ViewStack,'laya.ui.ViewStack',_super);
		var __proto=ViewStack.prototype;
		Laya.imps(__proto,{"laya.ui.IItem":true})
		/**
		*批量设置视图对象。
		*@param views 视图对象数组。
		*/
		__proto.setItems=function(views){
			this.removeChildren();
			var index=0;
			for (var i=0,n=views.length;i < n;i++){
				var item=views[i];
				if (item){
					item.name="item"+index;
					this.addChild(item);
					index++;
				}
			}
			this.initItems();
		}

		/**
		*添加视图。
		*@internal 添加视图对象，并设置此视图对象的<code>name</code> 属性。
		*@param view 需要添加的视图对象。
		*/
		__proto.addItem=function(view){
			view.name="item"+this._items.length;
			this.addChild(view);
			this.initItems();
		}

		/**
		*初始化视图对象集合。
		*/
		__proto.initItems=function(){
			this._items=[];
			for (var i=0;i < 10000;i++){
				var item=this.getChildByName("item"+i);
				if (item==null){
					break ;
				}
				this._items.push(item);
				item.visible=(i==this._selectedIndex);
			}
		}

		/**
		*@private
		*通过对象的索引设置项对象的 <code>selected</code> 属性值。
		*@param index 需要设置的对象的索引。
		*@param selected 表示对象的选中状态。
		*/
		__proto.setSelect=function(index,selected){
			if (this._items && index >-1 && index < this._items.length){
				this._items[index].visible=selected;
			}
		}

		/**
		*@private
		*设置属性<code>selectedIndex</code>的值。
		*@param index 选中项索引值。
		*/
		__proto.setIndex=function(index){
			this.selectedIndex=index;
		}

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string')){
				this.selectedIndex=parseInt(value);
				}else {
				for (var prop in this._dataSource){
					if (this.hasOwnProperty(prop)){
						this[prop]=this._dataSource[prop];
					}
				}
			}
		});

		/**
		*表示当前视图索引。
		*/
		__getset(0,__proto,'selectedIndex',function(){
			return this._selectedIndex;
			},function(value){
			if (this._selectedIndex !=value){
				this.setSelect(this._selectedIndex,false);
				this._selectedIndex=value;
				this.setSelect(this._selectedIndex,true);
			}
		});

		/**
		*获取或设置当前选择的项对象。
		*/
		__getset(0,__proto,'selection',function(){
			return this._selectedIndex >-1 && this._selectedIndex < this._items.length ? this._items[this._selectedIndex] :null;
			},function(value){
			this.selectedIndex=this._items.indexOf(value);
		});

		/**
		*视图集合数组。
		*/
		__getset(0,__proto,'items',function(){
			return this._items;
		});

		/**
		*索引设置处理器。
		*<p>默认回调参数：index:int</p>
		*/
		__getset(0,__proto,'setIndexHandler',function(){
			return this._setIndexHandler;
			},function(value){
			this._setIndexHandler=value;
		});

		return ViewStack;
	})(Box)


	/**
	*
	*使用 <code>VScrollBar</code> （垂直 <code>ScrollBar</code> ）控件，可以在因数据太多而不能在显示区域完全显示时控制显示的数据部分。
	*
	*@example <caption>以下示例代码，创建了一个 <code>VScrollBar</code> 实例。</caption>
	*package
	*{
		*import laya.ui.vScrollBar;
		*import laya.ui.VScrollBar;
		*import laya.utils.Handler;
		*public class VScrollBar_Example
		*{
			*private var vScrollBar:VScrollBar;
			*public function VScrollBar_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,onLoadComplete));
				*}
			*private function onLoadComplete():void
			*{
				*vScrollBar=new VScrollBar();//创建一个 vScrollBar 类的实例对象 hScrollBar 。
				*vScrollBar.skin="resource/ui/vscroll.png";//设置 vScrollBar 的皮肤。
				*vScrollBar.x=100;//设置 vScrollBar 对象的属性 x 的值，用于控制 vScrollBar 对象的显示位置。
				*vScrollBar.y=100;//设置 vScrollBar 对象的属性 y 的值，用于控制 vScrollBar 对象的显示位置。
				*vScrollBar.changeHandler=new Handler(this,onChange);//设置 vScrollBar 的滚动变化处理器。
				*Laya.stage.addChild(vScrollBar);//将此 vScrollBar 对象添加到显示列表。
				*}
			*private function onChange(value:Number):void
			*{
				*trace("滚动条的位置： value="+value);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var vScrollBar;
	*var res=["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"];
	*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));//加载资源。
	*function onLoadComplete(){
		*vScrollBar=new laya.ui.VScrollBar();//创建一个 vScrollBar 类的实例对象 hScrollBar 。
		*vScrollBar.skin="resource/ui/vscroll.png";//设置 vScrollBar 的皮肤。
		*vScrollBar.x=100;//设置 vScrollBar 对象的属性 x 的值，用于控制 vScrollBar 对象的显示位置。
		*vScrollBar.y=100;//设置 vScrollBar 对象的属性 y 的值，用于控制 vScrollBar 对象的显示位置。
		*vScrollBar.changeHandler=new laya.utils.Handler(this,onChange);//设置 vScrollBar 的滚动变化处理器。
		*Laya.stage.addChild(vScrollBar);//将此 vScrollBar 对象添加到显示列表。
		*}
	*function onChange(value){
		*console.log("滚动条的位置： value="+value);
		*}
	*@example
	*import VScrollBar=laya.ui.VScrollBar;
	*import Handler=laya.utils.Handler;
	*class VScrollBar_Example {
		*private vScrollBar:VScrollBar;
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,this.onLoadComplete));
			*}
		*private onLoadComplete():void {
			*this.vScrollBar=new VScrollBar();//创建一个 vScrollBar 类的实例对象 hScrollBar 。
			*this.vScrollBar.skin="resource/ui/vscroll.png";//设置 vScrollBar 的皮肤。
			*this.vScrollBar.x=100;//设置 vScrollBar 对象的属性 x 的值，用于控制 vScrollBar 对象的显示位置。
			*this.vScrollBar.y=100;//设置 vScrollBar 对象的属性 y 的值，用于控制 vScrollBar 对象的显示位置。
			*this.vScrollBar.changeHandler=new Handler(this,this.onChange);//设置 vScrollBar 的滚动变化处理器。
			*Laya.stage.addChild(this.vScrollBar);//将此 vScrollBar 对象添加到显示列表。
			*}
		*private onChange(value:number):void {
			*console.log("滚动条的位置： value="+value);
			*}
		*}
	*/
	//class laya.ui.VScrollBar extends laya.ui.ScrollBar
	var VScrollBar=(function(_super){
		function VScrollBar(){VScrollBar.__super.call(this);;
		};

		__class(VScrollBar,'laya.ui.VScrollBar',_super);
		return VScrollBar;
	})(ScrollBar)


	/**
	*<code>TextInput</code> 类用于创建显示对象以显示和输入文本。
	*
	*@example <caption>以下示例代码，创建了一个 <code>TextInput</code> 实例。</caption>
	*package
	*{
		*import laya.display.Stage;
		*import laya.ui.TextInput;
		*import laya.utils.Handler;
		*public class TextInput_Example
		*{
			*public function TextInput_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*var textInput:TextInput=new TextInput("这是一个TextInput实例。");//创建一个 TextInput 类的实例对象 textInput 。
				*textInput.skin="resource/ui/input.png";//设置 textInput 的皮肤。
				*textInput.sizeGrid="4,4,4,4";//设置 textInput 的网格信息。
				*textInput.color="#008fff";//设置 textInput 的文本颜色。
				*textInput.font="Arial";//设置 textInput 的文本字体。
				*textInput.bold=true;//设置 textInput 的文本显示为粗体。
				*textInput.fontSize=30;//设置 textInput 的字体大小。
				*textInput.wordWrap=true;//设置 textInput 的文本自动换行。
				*textInput.x=100;//设置 textInput 对象的属性 x 的值，用于控制 textInput 对象的显示位置。
				*textInput.y=100;//设置 textInput 对象的属性 y 的值，用于控制 textInput 对象的显示位置。
				*textInput.width=300;//设置 textInput 的宽度。
				*textInput.height=200;//设置 textInput 的高度。
				*Laya.stage.addChild(textInput);//将 textInput 添加到显示列表。
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load(["resource/ui/input.png"],laya.utils.Handler.create(this,onLoadComplete));//加载资源。
	*function onLoadComplete(){
		*var textInput=new laya.ui.TextInput("这是一个TextInput实例。");//创建一个 TextInput 类的实例对象 textInput 。
		*textInput.skin="resource/ui/input.png";//设置 textInput 的皮肤。
		*textInput.sizeGrid="4,4,4,4";//设置 textInput 的网格信息。
		*textInput.color="#008fff";//设置 textInput 的文本颜色。
		*textInput.font="Arial";//设置 textInput 的文本字体。
		*textInput.bold=true;//设置 textInput 的文本显示为粗体。
		*textInput.fontSize=30;//设置 textInput 的字体大小。
		*textInput.wordWrap=true;//设置 textInput 的文本自动换行。
		*textInput.x=100;//设置 textInput 对象的属性 x 的值，用于控制 textInput 对象的显示位置。
		*textInput.y=100;//设置 textInput 对象的属性 y 的值，用于控制 textInput 对象的显示位置。
		*textInput.width=300;//设置 textInput 的宽度。
		*textInput.height=200;//设置 textInput 的高度。
		*Laya.stage.addChild(textInput);//将 textInput 添加到显示列表。
		*}
	*@example
	*import Stage=laya.display.Stage;
	*import TextInput=laya.ui.TextInput;
	*import Handler=laya.utils.Handler;
	*class TextInput_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*var textInput:TextInput=new TextInput("这是一个TextInput实例。");//创建一个 TextInput 类的实例对象 textInput 。
			*textInput.skin="resource/ui/input.png";//设置 textInput 的皮肤。
			*textInput.sizeGrid="4,4,4,4";//设置 textInput 的网格信息。
			*textInput.color="#008fff";//设置 textInput 的文本颜色。
			*textInput.font="Arial";//设置 textInput 的文本字体。
			*textInput.bold=true;//设置 textInput 的文本显示为粗体。
			*textInput.fontSize=30;//设置 textInput 的字体大小。
			*textInput.wordWrap=true;//设置 textInput 的文本自动换行。
			*textInput.x=100;//设置 textInput 对象的属性 x 的值，用于控制 textInput 对象的显示位置。
			*textInput.y=100;//设置 textInput 对象的属性 y 的值，用于控制 textInput 对象的显示位置。
			*textInput.width=300;//设置 textInput 的宽度。
			*textInput.height=200;//设置 textInput 的高度。
			*Laya.stage.addChild(textInput);//将 textInput 添加到显示列表。
			*}
		*}
	*/
	//class laya.ui.TextInput extends laya.ui.Label
	var TextInput=(function(_super){
		function TextInput(text){
			this._bg=null;
			this._skin=null;
			TextInput.__super.call(this);
			(text===void 0)&& (text="");
			this.text=text;
			this.skin=this.skin;
		}

		__class(TextInput,'laya.ui.TextInput',_super);
		var __proto=TextInput.prototype;
		/**@inheritDoc */
		__proto.preinitialize=function(){
			this.mouseEnabled=true;
		}

		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._bg && this._bg.destroy();
			this._bg=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._tf=new Input());
			this._tf.padding=Styles.inputLabelPadding;
			this._tf.on(/*laya.events.Event.INPUT*/"input",this,this._onInput);
			this._tf.on(/*laya.events.Event.ENTER*/"enter",this,this._onEnter);
			this._tf.on(/*laya.events.Event.BLUR*/"blur",this,this._onBlur);
			this._tf.on(/*laya.events.Event.FOCUS*/"focus",this,this._onFocus);
		}

		/**
		*@private
		*/
		__proto._onFocus=function(){
			this.event(/*laya.events.Event.FOCUS*/"focus",this);
		}

		/**
		*@private
		*/
		__proto._onBlur=function(){
			this.event(/*laya.events.Event.BLUR*/"blur",this);
		}

		/**
		*@private
		*/
		__proto._onInput=function(){
			this.event(/*laya.events.Event.INPUT*/"input",this);
		}

		/**
		*@private
		*/
		__proto._onEnter=function(){
			this.event(/*laya.events.Event.ENTER*/"enter",this);
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			this.width=128;
			this.height=22;
		}

		/**选中输入框内的文本。*/
		__proto.select=function(){
			(this._tf).select();
		}

		__proto.setSelection=function(startIndex,endIndex){
			(this._tf).setSelection(startIndex,endIndex);
		}

		/**
		*当前文本内容字符串。
		*@see laya.display.Text.text
		*/
		__getset(0,__proto,'text',_super.prototype._$get_text,function(value){
			if (this._tf.text !=value){
				value=value+"";
				this._tf.text=value;
				this.event(/*laya.events.Event.CHANGE*/"change");
			}
		});

		/**
		*表示此对象包含的文本背景 <code>AutoBitmap</code> 组件实例。
		*/
		__getset(0,__proto,'bg',function(){
			return this._bg;
			},function(value){
			this.graphics=this._bg=value;
		});

		/**
		*设置原生input输入框的y坐标偏移。
		*/
		__getset(0,__proto,'inputElementYAdjuster',function(){
			return (this._tf).inputElementYAdjuster;
			},function(value){
			(this._tf).inputElementYAdjuster=value;
		});

		/**
		*<p>指示当前是否是文本域。</p>
		*值为true表示当前是文本域，否则不是文本域。
		*/
		__getset(0,__proto,'multiline',function(){
			return (this._tf).multiline;
			},function(value){
			(this._tf).multiline=value;
		});

		/**
		*@copy laya.ui.Image#skin
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				this._bg || (this.graphics=this._bg=new AutoBitmap());
				this._bg.source=Loader.getRes(this._skin);
				this._width && (this._bg.width=this._width);
				this._height && (this._bg.height=this._height);
			}
		});

		/**
		*<p>当前实例的背景图（ <code>AutoBitmap</code> ）实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			return this._bg && this._bg.sizeGrid ? this._bg.sizeGrid.join(","):null;
			},function(value){
			this._bg || (this.graphics=this._bg=new AutoBitmap());
			this._bg.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
		});

		/**
		*设置原生input输入框的x坐标偏移。
		*/
		__getset(0,__proto,'inputElementXAdjuster',function(){
			return (this._tf).inputElementXAdjuster;
			},function(value){
			(this._tf).inputElementXAdjuster=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._bg && (this._bg.width=value);
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._bg && (this._bg.height=value);
		});

		/**
		*设置可编辑状态。
		*/
		__getset(0,__proto,'editable',function(){
			return (this._tf).editable;
			},function(value){
			(this._tf).editable=value;
		});

		/**限制输入的字符。*/
		__getset(0,__proto,'restrict',function(){
			return (this._tf).restrict;
			},function(pattern){
			(this._tf).restrict=pattern;
		});

		/**
		*@copy laya.display.Input#prompt
		*/
		__getset(0,__proto,'prompt',function(){
			return (this._tf).prompt;
			},function(value){
			(this._tf).prompt=value;
		});

		/**
		*@copy laya.display.Input#promptColor
		*/
		__getset(0,__proto,'promptColor',function(){
			return (this._tf).promptColor;
			},function(value){
			(this._tf).promptColor=value;
		});

		/**
		*@copy laya.display.Input#maxChars
		*/
		__getset(0,__proto,'maxChars',function(){
			return (this._tf).maxChars;
			},function(value){
			(this._tf).maxChars=value;
		});

		/**
		*@copy laya.display.Input#focus
		*/
		__getset(0,__proto,'focus',function(){
			return (this._tf).focus;
			},function(value){
			(this._tf).focus=value;
		});

		/**
		*@copy laya.display.Input#type
		*/
		__getset(0,__proto,'type',function(){
			return (this._tf).type;
			},function(value){
			(this._tf).type=value;
		});

		/**
		*@copy laya.display.Input#asPassword
		*/
		__getset(0,__proto,'asPassword',function(){
			return (this._tf).asPassword;
			},function(value){
			(this._tf).asPassword=value;
		});

		return TextInput;
	})(Label)


	/**
	*使用 <code>VSlider</code> 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。
	*<p> <code>VSlider</code> 控件采用垂直方向。滑块轨道从下往上扩展，而标签位于轨道的左右两侧。</p>
	*
	*@example <caption>以下示例代码，创建了一个 <code>VSlider</code> 实例。</caption>
	*package
	*{
		*import laya.ui.HSlider;
		*import laya.ui.VSlider;
		*import laya.utils.Handler;
		*public class VSlider_Example
		*{
			*private var vSlider:VSlider;
			*public function VSlider_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/vslider.png","resource/ui/vslider$bar.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*vSlider=new VSlider();//创建一个 VSlider 类的实例对象 vSlider 。
				*vSlider.skin="resource/ui/vslider.png";//设置 vSlider 的皮肤。
				*vSlider.min=0;//设置 vSlider 最低位置值。
				*vSlider.max=10;//设置 vSlider 最高位置值。
				*vSlider.value=2;//设置 vSlider 当前位置值。
				*vSlider.tick=1;//设置 vSlider 刻度值。
				*vSlider.x=100;//设置 vSlider 对象的属性 x 的值，用于控制 vSlider 对象的显示位置。
				*vSlider.y=100;//设置 vSlider 对象的属性 y 的值，用于控制 vSlider 对象的显示位置。
				*vSlider.changeHandler=new Handler(this,onChange);//设置 vSlider 位置变化处理器。
				*Laya.stage.addChild(vSlider);//把 vSlider 添加到显示列表。
				*}
			*private function onChange(value:Number):void
			*{
				*trace("滑块的位置： value="+value);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var vSlider;
	*Laya.loader.load(["resource/ui/vslider.png","resource/ui/vslider$bar.png"],laya.utils.Handler.create(this,onLoadComplete));//加载资源。
	*function onLoadComplete(){
		*vSlider=new laya.ui.VSlider();//创建一个 VSlider 类的实例对象 vSlider 。
		*vSlider.skin="resource/ui/vslider.png";//设置 vSlider 的皮肤。
		*vSlider.min=0;//设置 vSlider 最低位置值。
		*vSlider.max=10;//设置 vSlider 最高位置值。
		*vSlider.value=2;//设置 vSlider 当前位置值。
		*vSlider.tick=1;//设置 vSlider 刻度值。
		*vSlider.x=100;//设置 vSlider 对象的属性 x 的值，用于控制 vSlider 对象的显示位置。
		*vSlider.y=100;//设置 vSlider 对象的属性 y 的值，用于控制 vSlider 对象的显示位置。
		*vSlider.changeHandler=new laya.utils.Handler(this,onChange);//设置 vSlider 位置变化处理器。
		*Laya.stage.addChild(vSlider);//把 vSlider 添加到显示列表。
		*}
	*function onChange(value){
		*console.log("滑块的位置： value="+value);
		*}
	*@example
	*import HSlider=laya.ui.HSlider;
	*import VSlider=laya.ui.VSlider;
	*import Handler=laya.utils.Handler;
	*class VSlider_Example {
		*private vSlider:VSlider;
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vslider.png","resource/ui/vslider$bar.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*this.vSlider=new VSlider();//创建一个 VSlider 类的实例对象 vSlider 。
			*this.vSlider.skin="resource/ui/vslider.png";//设置 vSlider 的皮肤。
			*this.vSlider.min=0;//设置 vSlider 最低位置值。
			*this.vSlider.max=10;//设置 vSlider 最高位置值。
			*this.vSlider.value=2;//设置 vSlider 当前位置值。
			*this.vSlider.tick=1;//设置 vSlider 刻度值。
			*this.vSlider.x=100;//设置 vSlider 对象的属性 x 的值，用于控制 vSlider 对象的显示位置。
			*this.vSlider.y=100;//设置 vSlider 对象的属性 y 的值，用于控制 vSlider 对象的显示位置。
			*this.vSlider.changeHandler=new Handler(this,this.onChange);//设置 vSlider 位置变化处理器。
			*Laya.stage.addChild(this.vSlider);//把 vSlider 添加到显示列表。
			*}
		*private onChange(value:number):void {
			*console.log("滑块的位置： value="+value);
			*}
		*}
	*@see laya.ui.Slider
	*/
	//class laya.ui.VSlider extends laya.ui.Slider
	var VSlider=(function(_super){
		function VSlider(){VSlider.__super.call(this);;
		};

		__class(VSlider,'laya.ui.VSlider',_super);
		return VSlider;
	})(Slider)


	/**
	*<code>Dialog</code> 组件是一个弹出对话框，实现对话框弹出，拖动，模式窗口功能。
	*可以通过UIConfig设置弹出框背景透明度，模式窗口点击边缘是否关闭等
	*通过设置zOrder属性，可以更改弹出的层次
	*通过设置popupEffect和closeEffect可以设置弹出效果和关闭效果，如果不想有任何弹出关闭效果，可以设置前述属性为空
	*
	*@example <caption>以下示例代码，创建了一个 <code>Dialog</code> 实例。</caption>
	*package
	*{
		*import laya.ui.Dialog;
		*import laya.utils.Handler;
		*public class Dialog_Example
		*{
			*private var dialog:Dialog_Instance;
			*public function Dialog_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load("resource/ui/btn_close.png",Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*dialog=new Dialog_Instance();//创建一个 Dialog_Instance 类的实例对象 dialog。
				*dialog.dragArea="0,0,150,50";//设置 dialog 的拖拽区域。
				*dialog.show();//显示 dialog。
				*dialog.closeHandler=new Handler(this,onClose);//设置 dialog 的关闭函数处理器。
				*}
			*private function onClose(name:String):void
			*{
				*if (name==Dialog.CLOSE)
				*{
					*trace("通过点击 name 为"+name+"的组件，关闭了dialog。");
					*}
				*}
			*}
		*}
	*import laya.ui.Button;
	*import laya.ui.Dialog;
	*import laya.ui.Image;
	*class Dialog_Instance extends Dialog
	*{
		*function Dialog_Instance():void
		*{
			*var bg:Image=new Image("resource/ui/bg.png");
			*bg.sizeGrid="40,10,5,10";
			*bg.width=150;
			*bg.height=250;
			*addChild(bg);
			*var image:Image=new Image("resource/ui/image.png");
			*addChild(image);
			*var button:Button=new Button("resource/ui/btn_close.png");
			*button.name=Dialog.CLOSE;//设置button的name属性值。
			*button.x=0;
			*button.y=0;
			*addChild(button);
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var dialog;
	*Laya.loader.load("resource/ui/btn_close.png",laya.utils.Handler.create(this,loadComplete));//加载资源
	*(function (_super){//新建一个类Dialog_Instance继承自laya.ui.Dialog。
		*function Dialog_Instance(){
			*Dialog_Instance.__super.call(this);//初始化父类
			*var bg=new laya.ui.Image("resource/ui/bg.png");//新建一个 Image 类的实例 bg 。
			*bg.sizeGrid="10,40,10,5";//设置 bg 的网格信息。
			*bg.width=150;//设置 bg 的宽度。
			*bg.height=250;//设置 bg 的高度。
			*this.addChild(bg);//将 bg 添加到显示列表。
			*var image=new laya.ui.Image("resource/ui/image.png");//新建一个 Image 类的实例 image 。
			*this.addChild(image);//将 image 添加到显示列表。
			*var button=new laya.ui.Button("resource/ui/btn_close.png");//新建一个 Button 类的实例 bg 。
			*button.name=laya.ui.Dialog.CLOSE;//设置 button 的 name 属性值。
			*button.x=0;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
			*button.y=0;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
			*this.addChild(button);//将 button 添加到显示列表。
			*};
		*Laya.class(Dialog_Instance,"mypackage.dialogExample.Dialog_Instance",_super);//注册类Dialog_Instance。
		*})(laya.ui.Dialog);
	*function loadComplete(){
		*console.log("资源加载完成！");
		*dialog=new mypackage.dialogExample.Dialog_Instance();//创建一个 Dialog_Instance 类的实例对象 dialog。
		*dialog.dragArea="0,0,150,50";//设置 dialog 的拖拽区域。
		*dialog.show();//显示 dialog。
		*dialog.closeHandler=new laya.utils.Handler(this,onClose);//设置 dialog 的关闭函数处理器。
		*}
	*function onClose(name){
		*if (name==laya.ui.Dialog.CLOSE){
			*console.log("通过点击 name 为"+name+"的组件，关闭了dialog。");
			*}
		*}
	*@example
	*import Dialog=laya.ui.Dialog;
	*import Handler=laya.utils.Handler;
	*class Dialog_Example {
		*private dialog:Dialog_Instance;
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/btn_close.png",Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*this.dialog=new Dialog_Instance();//创建一个 Dialog_Instance 类的实例对象 dialog。
			*this.dialog.dragArea="0,0,150,50";//设置 dialog 的拖拽区域。
			*this.dialog.show();//显示 dialog。
			*this.dialog.closeHandler=new Handler(this,this.onClose);//设置 dialog 的关闭函数处理器。
			*}
		*private onClose(name:string):void {
			*if (name==Dialog.CLOSE){
				*console.log("通过点击 name 为"+name+"的组件，关闭了dialog。");
				*}
			*}
		*}
	*import Button=laya.ui.Button;
	*class Dialog_Instance extends Dialog {
		*Dialog_Instance():void {
			*var bg:laya.ui.Image=new laya.ui.Image("resource/ui/bg.png");
			*bg.sizeGrid="40,10,5,10";
			*bg.width=150;
			*bg.height=250;
			*this.addChild(bg);
			*var image:laya.ui.Image=new laya.ui.Image("resource/ui/image.png");
			*this.addChild(image);
			*var button:Button=new Button("resource/ui/btn_close.png");
			*button.name=Dialog.CLOSE;//设置button的name属性值。
			*button.x=0;
			*button.y=0;
			*this.addChild(button);
			*}
		*}
	*/
	//class laya.ui.Dialog extends laya.ui.View
	var Dialog=(function(_super){
		function Dialog(){
			this.popupCenter=true;
			this.closeHandler=null;
			this.popupEffect=null;
			this.closeEffect=null;
			this.group=null;
			this.isModal=false;
			this._dragArea=null;
			Dialog.__super.call(this);
		}

		__class(Dialog,'laya.ui.Dialog',_super);
		var __proto=Dialog.prototype;
		/**@inheritDoc */
		__proto.initialize=function(){
			this.popupEffect=Dialog.manager.popupEffectHandler;
			this.closeEffect=Dialog.manager.closeEffectHandler;
			this._dealDragArea();
			this.on(/*laya.events.Event.CLICK*/"click",this,this._onClick);
		}

		/**@private */
		__proto._dealDragArea=function(){
			var dragTarget=this.getChildByName("drag");
			if (dragTarget){
				this.dragArea=dragTarget.x+","+dragTarget.y+","+dragTarget.width+","+dragTarget.height;
				dragTarget.removeSelf();
			}
		}

		/**
		*@private (protected)
		*对象的 <code>Event.CLICK</code> 点击事件侦听处理函数。
		*/
		__proto._onClick=function(e){
			var btn=e.target;
			if (btn){
				switch (btn.name){
					case "close":
					case "cancel":
					case "sure":
					case "no":
					case "ok":
					case "yes":
						this.close(btn.name);
						break ;
					}
			}
		}

		/**
		*显示对话框（以非模式窗口方式显示）。
		*@param closeOther 是否关闭其它的对话框。若值为true则关闭其它对话框。
		*/
		__proto.show=function(closeOther){
			(closeOther===void 0)&& (closeOther=false);
			this._open(false,closeOther);
		}

		/**
		*显示对话框（以模式窗口方式显示）。
		*@param closeOther 是否关闭其它的对话框。若值为true则关闭其它对话框。
		*/
		__proto.popup=function(closeOther){
			(closeOther===void 0)&& (closeOther=false);
			this._open(true,closeOther);
		}

		/**@private */
		__proto._open=function(modal,closeOther){
			Dialog.manager.lock(false);
			this.isModal=modal;
			Dialog.manager.open(this,closeOther);
		}

		/**打开完成后，调用此方法（如果有弹出动画，则在动画完成后执行）*/
		__proto.onOpened=function(){}
		/**
		*关闭对话框。
		*@param type 如果是点击默认关闭按钮触发，则传入关闭按钮的名字(name)，否则为null。
		*/
		__proto.close=function(type){
			Dialog.manager.close(this,type);
		}

		/**关闭完成后，调用此方法（如果有关闭动画，则在动画完成后执行）
		*@param type 如果是点击默认关闭按钮触发，则传入关闭按钮的名字(name)，否则为null。
		*/
		__proto.onClosed=function(type){}
		/**@private */
		__proto._onMouseDown=function(e){
			var point=this.getMousePoint();
			if (this._dragArea.contains(point.x,point.y))this.startDrag();
			else this.stopDrag();
		}

		/**
		*用来指定对话框的拖拽区域。默认值为"0,0,0,0"。
		*<p><b>格式：</b>构成一个矩形所需的 x,y,width,heith 值，用逗号连接为字符串。
		*例如："0,0,100,200"。
		*</p>
		*
		*@see #includeExamplesSummary 请参考示例
		*/
		__getset(0,__proto,'dragArea',function(){
			if (this._dragArea)return this._dragArea.toString();
			return null;
			},function(value){
			if (value){
				var a=UIUtils.fillArray([0,0,0,0],value,Number);
				this._dragArea=new Rectangle(a[0],a[1],a[2],a[3]);
				this.on(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this._onMouseDown);
				}else {
				this._dragArea=null;
				this.off(/*laya.events.Event.MOUSE_DOWN*/"mousedown",this,this._onMouseDown);
			}
		});

		/**
		*弹出框的显示状态；如果弹框处于显示中，则为true，否则为false;
		*/
		__getset(0,__proto,'isPopup',function(){
			return this.parent !=null;
		});

		__getset(0,__proto,'zOrder',_super.prototype._$get_zOrder,function(value){
			_super.prototype._$set_zOrder.call(this,value);
			Dialog.manager._checkMask();
		});

		/**对话框管理容器，所有的对话框都在该容器内，并且受管理器管，可以自定义自己的管理器，来更改窗口管理的流程。
		*任意对话框打开和关闭，都会触发管理类的open和close事件*/
		__getset(1,Dialog,'manager',function(){
			return Dialog._manager=Dialog._manager|| new DialogManager();
			},function(value){
			Dialog._manager=value;
		});

		Dialog.setLockView=function(view){
			Dialog.manager.setLockView(view);
		}

		Dialog.lock=function(value){
			Dialog.manager.lock(value);
		}

		Dialog.closeAll=function(){
			Dialog.manager.closeAll();
		}

		Dialog.getDialogsByGroup=function(group){
			return Dialog.manager.getDialogsByGroup(group);
		}

		Dialog.closeByGroup=function(group){
			return Dialog.manager.closeByGroup(group);
		}

		Dialog.CLOSE="close";
		Dialog.CANCEL="cancel";
		Dialog.SURE="sure";
		Dialog.NO="no";
		Dialog.OK="ok";
		Dialog.YES="yes";
		Dialog._manager=null
		return Dialog;
	})(View)


	/**
	*<code>HBox</code> 是一个水平布局容器类。
	*/
	//class laya.ui.HBox extends laya.ui.LayoutBox
	var HBox=(function(_super){
		function HBox(){HBox.__super.call(this);;
		};

		__class(HBox,'laya.ui.HBox',_super);
		var __proto=HBox.prototype;
		/**@inheritDoc */
		__proto.sortItem=function(items){
			if (items)items.sort(function(a,b){return a.x-b.x;});
		}

		/**@inheritDoc */
		__proto.changeItems=function(){
			this._itemChanged=false;
			var items=[];
			var maxHeight=0;
			for (var i=0,n=this.numChildren;i < n;i++){
				var item=this.getChildAt(i);
				if (item&&item.layoutEnabled){
					items.push(item);
					maxHeight=this._height?this._height:Math.max(maxHeight,item.height *item.scaleY);
				}
			}
			this.sortItem(items);
			var left=0;
			for (i=0,n=items.length;i < n;i++){
				item=items[i];
				item.x=left;
				left+=item.width *item.scaleX+this._space;
				if (this._align=="top"){
					item.y=0;
					}else if (this._align=="middle"){
					item.y=(maxHeight-item.height *item.scaleY)*0.5;
					}else if (this._align=="bottom"){
					item.y=maxHeight-item.height *item.scaleY;
				}
			}
			this.changeSize();
		}

		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			if (this._height !=value){
				_super.prototype._$set_height.call(this,value);
				this.callLater(this.changeItems);
			}
		});

		HBox.NONE="none";
		HBox.TOP="top";
		HBox.MIDDLE="middle";
		HBox.BOTTOM="bottom";
		return HBox;
	})(LayoutBox)


	/**
	*<code>VBox</code> 是一个垂直布局容器类。
	*/
	//class laya.ui.VBox extends laya.ui.LayoutBox
	var VBox=(function(_super){
		function VBox(){VBox.__super.call(this);;
		};

		__class(VBox,'laya.ui.VBox',_super);
		var __proto=VBox.prototype;
		/**@inheritDoc */
		__proto.changeItems=function(){
			this._itemChanged=false;
			var items=[];
			var maxWidth=0;
			for (var i=0,n=this.numChildren;i < n;i++){
				var item=this.getChildAt(i);
				if (item&&item.layoutEnabled){
					items.push(item);
					maxWidth=this._width?this._width:Math.max(maxWidth,item.width *item.scaleX);
				}
			}
			this.sortItem(items);
			var top=0;
			for (i=0,n=items.length;i < n;i++){
				item=items[i];
				item.y=top;
				top+=item.height *item.scaleY+this._space;
				if (this._align=="left"){
					item.x=0;
					}else if (this._align=="center"){
					item.x=(maxWidth-item.width *item.scaleX)*0.5;
					}else if (this._align=="right"){
					item.x=maxWidth-item.width *item.scaleX;
				}
			}
			this.changeSize();
		}

		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			if (this._width !=value){
				_super.prototype._$set_width.call(this,value);
				this.callLater(this.changeItems);
			}
		});

		VBox.NONE="none";
		VBox.LEFT="left";
		VBox.CENTER="center";
		VBox.RIGHT="right";
		return VBox;
	})(LayoutBox)


	/**
	*<code>RadioGroup</code> 控件定义一组 <code>Radio</code> 控件，这些控件相互排斥；
	*因此，用户每次只能选择一个 <code>Radio</code> 控件。
	*
	*@example <caption>以下示例代码，创建了一个 <code>RadioGroup</code> 实例。</caption>
	*package
	*{
		*import laya.ui.Radio;
		*import laya.ui.RadioGroup;
		*import laya.utils.Handler;
		*public class RadioGroup_Example
		*{
			*public function RadioGroup_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/radio.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*var radioGroup:RadioGroup=new RadioGroup();//创建一个 RadioGroup 类的实例对象 radioGroup 。
				*radioGroup.pos(100,100);//设置 radioGroup 的位置信息。
				*radioGroup.labels="item0,item1,item2";//设置 radioGroup 的标签集。
				*radioGroup.skin="resource/ui/radio.png";//设置 radioGroup 的皮肤。
				*radioGroup.space=10;//设置 radioGroup 的项间隔距离。
				*radioGroup.selectHandler=new Handler(this,onSelect);//设置 radioGroup 的选择项发生改变时执行的处理器。
				*Laya.stage.addChild(radioGroup);//将 radioGroup 添加到显示列表。
				*}
			*private function onSelect(index:int):void
			*{
				*trace("当前选择的单选按钮索引: index= ",index);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load(["resource/ui/radio.png"],laya.utils.Handler.create(this,onLoadComplete));
	*function onLoadComplete(){
		*var radioGroup=new laya.ui.RadioGroup();//创建一个 RadioGroup 类的实例对象 radioGroup 。
		*radioGroup.pos(100,100);//设置 radioGroup 的位置信息。
		*radioGroup.labels="item0,item1,item2";//设置 radioGroup 的标签集。
		*radioGroup.skin="resource/ui/radio.png";//设置 radioGroup 的皮肤。
		*radioGroup.space=10;//设置 radioGroup 的项间隔距离。
		*radioGroup.selectHandler=new laya.utils.Handler(this,onSelect);//设置 radioGroup 的选择项发生改变时执行的处理器。
		*Laya.stage.addChild(radioGroup);//将 radioGroup 添加到显示列表。
		*}
	*function onSelect(index){
		*console.log("当前选择的单选按钮索引: index= ",index);
		*}
	*@example
	*import Radio=laya.ui.Radio;
	*import RadioGroup=laya.ui.RadioGroup;
	*import Handler=laya.utils.Handler;
	*class RadioGroup_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/radio.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*var radioGroup:RadioGroup=new RadioGroup();//创建一个 RadioGroup 类的实例对象 radioGroup 。
			*radioGroup.pos(100,100);//设置 radioGroup 的位置信息。
			*radioGroup.labels="item0,item1,item2";//设置 radioGroup 的标签集。
			*radioGroup.skin="resource/ui/radio.png";//设置 radioGroup 的皮肤。
			*radioGroup.space=10;//设置 radioGroup 的项间隔距离。
			*radioGroup.selectHandler=new Handler(this,this.onSelect);//设置 radioGroup 的选择项发生改变时执行的处理器。
			*Laya.stage.addChild(radioGroup);//将 radioGroup 添加到显示列表。
			*}
		*private onSelect(index:number):void {
			*console.log("当前选择的单选按钮索引: index= ",index);
			*}
		*}
	*/
	//class laya.ui.RadioGroup extends laya.ui.UIGroup
	var RadioGroup=(function(_super){
		function RadioGroup(){RadioGroup.__super.call(this);;
		};

		__class(RadioGroup,'laya.ui.RadioGroup',_super);
		var __proto=RadioGroup.prototype;
		/**@inheritDoc */
		__proto.createItem=function(skin,label){
			return new Radio(skin,label);
		}

		return RadioGroup;
	})(UIGroup)


	/**
	*<code>Tab</code> 组件用来定义选项卡按钮组。 *
	*@internal <p>属性：<code>selectedIndex</code> 的默认值为-1。</p>
	*
	*@example <caption>以下示例代码，创建了一个 <code>Tab</code> 实例。</caption>
	*package
	*{
		*import laya.ui.Tab;
		*import laya.utils.Handler;
		*public class Tab_Example
		*{
			*public function Tab_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/tab.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*var tab:Tab=new Tab();//创建一个 Tab 类的实例对象 tab 。
				*tab.skin="resource/ui/tab.png";//设置 tab 的皮肤。
				*tab.labels="item0,item1,item2";//设置 tab 的标签集。
				*tab.x=100;//设置 tab 对象的属性 x 的值，用于控制 tab 对象的显示位置。
				*tab.y=100;//设置 tab 对象的属性 y 的值，用于控制 tab 对象的显示位置。
				*tab.selectHandler=new Handler(this,onSelect);//设置 tab 的选择项发生改变时执行的处理器。
				*Laya.stage.addChild(tab);//将 tab 添到显示列表。
				*}
			*private function onSelect(index:int):void
			*{
				*trace("当前选择的表情页索引: index= ",index);
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load(["resource/ui/tab.png"],laya.utils.Handler.create(this,onLoadComplete));
	*function onLoadComplete(){
		*var tab=new laya.ui.Tab();//创建一个 Tab 类的实例对象 tab 。
		*tab.skin="resource/ui/tab.png";//设置 tab 的皮肤。
		*tab.labels="item0,item1,item2";//设置 tab 的标签集。
		*tab.x=100;//设置 tab 对象的属性 x 的值，用于控制 tab 对象的显示位置。
		*tab.y=100;//设置 tab 对象的属性 y 的值，用于控制 tab 对象的显示位置。
		*tab.selectHandler=new laya.utils.Handler(this,onSelect);//设置 tab 的选择项发生改变时执行的处理器。
		*Laya.stage.addChild(tab);//将 tab 添到显示列表。
		*}
	*function onSelect(index){
		*console.log("当前选择的标签页索引: index= ",index);
		*}
	*@example
	*import Tab=laya.ui.Tab;
	*import Handler=laya.utils.Handler;
	*class Tab_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/tab.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*var tab:Tab=new Tab();//创建一个 Tab 类的实例对象 tab 。
			*tab.skin="resource/ui/tab.png";//设置 tab 的皮肤。
			*tab.labels="item0,item1,item2";//设置 tab 的标签集。
			*tab.x=100;//设置 tab 对象的属性 x 的值，用于控制 tab 对象的显示位置。
			*tab.y=100;//设置 tab 对象的属性 y 的值，用于控制 tab 对象的显示位置。
			*tab.selectHandler=new Handler(this,this.onSelect);//设置 tab 的选择项发生改变时执行的处理器。
			*Laya.stage.addChild(tab);//将 tab 添到显示列表。
			*}
		*private onSelect(index:number):void {
			*console.log("当前选择的表情页索引: index= ",index);
			*}
		*}
	*/
	//class laya.ui.Tab extends laya.ui.UIGroup
	var Tab=(function(_super){
		function Tab(){Tab.__super.call(this);;
		};

		__class(Tab,'laya.ui.Tab',_super);
		var __proto=Tab.prototype;
		/**
		*@private
		*@inheritDoc
		*/
		__proto.createItem=function(skin,label){
			return new Button(skin,label);
		}

		return Tab;
	})(UIGroup)


	/**
	*<code>TextArea</code> 类用于创建显示对象以显示和输入文本。
	*@example <caption>以下示例代码，创建了一个 <code>TextArea</code> 实例。</caption>
	*package
	*{
		*import laya.ui.TextArea;
		*import laya.utils.Handler;
		*public class TextArea_Example
		*{
			*public function TextArea_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*var textArea:TextArea=new TextArea("这个一个TextArea实例。");//创建一个 TextArea 类的实例对象 textArea 。
				*textArea.skin="resource/ui/input.png";//设置 textArea 的皮肤。
				*textArea.sizeGrid="4,4,4,4";//设置 textArea 的网格信息。
				*textArea.color="#008fff";//设置 textArea 的文本颜色。
				*textArea.font="Arial";//设置 textArea 的字体。
				*textArea.bold=true;//设置 textArea 的文本显示为粗体。
				*textArea.fontSize=20;//设置 textArea 的文本字体大小。
				*textArea.wordWrap=true;//设置 textArea 的文本自动换行。
				*textArea.x=100;//设置 textArea 对象的属性 x 的值，用于控制 textArea 对象的显示位置。
				*textArea.y=100;//设置 textArea 对象的属性 y 的值，用于控制 textArea 对象的显示位置。
				*textArea.width=300;//设置 textArea 的宽度。
				*textArea.height=200;//设置 textArea 的高度。
				*Laya.stage.addChild(textArea);//将 textArea 添加到显示列表。
				*}
			*}
		*}
	*@example
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load(["resource/ui/input.png"],laya.utils.Handler.create(this,onLoadComplete));//加载资源。
	*function onLoadComplete(){
		*var textArea=new laya.ui.TextArea("这个一个TextArea实例。");//创建一个 TextArea 类的实例对象 textArea 。
		*textArea.skin="resource/ui/input.png";//设置 textArea 的皮肤。
		*textArea.sizeGrid="4,4,4,4";//设置 textArea 的网格信息。
		*textArea.color="#008fff";//设置 textArea 的文本颜色。
		*textArea.font="Arial";//设置 textArea 的字体。
		*textArea.bold=true;//设置 textArea 的文本显示为粗体。
		*textArea.fontSize=20;//设置 textArea 的文本字体大小。
		*textArea.wordWrap=true;//设置 textArea 的文本自动换行。
		*textArea.x=100;//设置 textArea 对象的属性 x 的值，用于控制 textArea 对象的显示位置。
		*textArea.y=100;//设置 textArea 对象的属性 y 的值，用于控制 textArea 对象的显示位置。
		*textArea.width=300;//设置 textArea 的宽度。
		*textArea.height=200;//设置 textArea 的高度。
		*Laya.stage.addChild(textArea);//将 textArea 添加到显示列表。
		*}
	*@example
	*import TextArea=laya.ui.TextArea;
	*import Handler=laya.utils.Handler;
	*class TextArea_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*var textArea:TextArea=new TextArea("这个一个TextArea实例。");//创建一个 TextArea 类的实例对象 textArea 。
			*textArea.skin="resource/ui/input.png";//设置 textArea 的皮肤。
			*textArea.sizeGrid="4,4,4,4";//设置 textArea 的网格信息。
			*textArea.color="#008fff";//设置 textArea 的文本颜色。
			*textArea.font="Arial";//设置 textArea 的字体。
			*textArea.bold=true;//设置 textArea 的文本显示为粗体。
			*textArea.fontSize=20;//设置 textArea 的文本字体大小。
			*textArea.wordWrap=true;//设置 textArea 的文本自动换行。
			*textArea.x=100;//设置 textArea 对象的属性 x 的值，用于控制 textArea 对象的显示位置。
			*textArea.y=100;//设置 textArea 对象的属性 y 的值，用于控制 textArea 对象的显示位置。
			*textArea.width=300;//设置 textArea 的宽度。
			*textArea.height=200;//设置 textArea 的高度。
			*Laya.stage.addChild(textArea);//将 textArea 添加到显示列表。
			*}
		*}
	*/
	//class laya.ui.TextArea extends laya.ui.TextInput
	var TextArea=(function(_super){
		function TextArea(text){
			this._vScrollBar=null;
			this._hScrollBar=null;
			(text===void 0)&& (text="");
			TextArea.__super.call(this,text);
		}

		__class(TextArea,'laya.ui.TextArea',_super);
		var __proto=TextArea.prototype;
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._vScrollBar && this._vScrollBar.destroy();
			this._hScrollBar && this._hScrollBar.destroy();
			this._vScrollBar=null;
			this._hScrollBar=null;
		}

		__proto.initialize=function(){
			this.width=180;
			this.height=150;
			this._tf.wordWrap=true;
			this.multiline=true;
		}

		__proto.onVBarChanged=function(e){
			if (this._tf.scrollY !=this._vScrollBar.value){
				this._tf.scrollY=this._vScrollBar.value;
			}
		}

		__proto.onHBarChanged=function(e){
			if (this._tf.scrollX !=this._hScrollBar.value){
				this._tf.scrollX=this._hScrollBar.value;
			}
		}

		__proto.changeScroll=function(){
			var vShow=this._vScrollBar && this._tf.maxScrollY > 0;
			var hShow=this._hScrollBar && this._tf.maxScrollX > 0;
			var showWidth=vShow ? this._width-this._vScrollBar.width :this._width;
			var showHeight=hShow ? this._height-this._hScrollBar.height :this._height;
			var padding=this._tf.padding || Styles.labelPadding;
			this._tf.width=showWidth;
			this._tf.height=showHeight;
			if (this._vScrollBar){
				this._vScrollBar.x=this._width-this._vScrollBar.width-padding[2];
				this._vScrollBar.y=padding[1];
				this._vScrollBar.height=this._height-(hShow ? this._hScrollBar.height :0)-padding[1]-padding[3];
				this._vScrollBar.scrollSize=1;
				this._vScrollBar.thumbPercent=showHeight / Math.max(this._tf.textHeight,showHeight);
				this._vScrollBar.setScroll(1,this._tf.maxScrollY,this._tf.scrollY);
				this._vScrollBar.visible=vShow;
			}
			if (this._hScrollBar){
				this._hScrollBar.x=padding[0];
				this._hScrollBar.y=this._height-this._hScrollBar.height-padding[3];
				this._hScrollBar.width=this._width-(vShow ? this._vScrollBar.width :0)-padding[0]-padding[2];
				this._hScrollBar.scrollSize=Math.max(showWidth *0.033,1);
				this._hScrollBar.thumbPercent=showWidth / Math.max(this._tf.textWidth,showWidth);
				this._hScrollBar.setScroll(0,this.maxScrollX,this.scrollX);
				this._hScrollBar.visible=hShow;
			}
		}

		/**滚动到某个位置*/
		__proto.scrollTo=function(y){
			this.commitMeasure();
			this._tf.scrollY=y;
		}

		/**垂直滚动值*/
		__getset(0,__proto,'scrollY',function(){
			return this._tf.scrollY;
		});

		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this.callLater(this.changeScroll);
		});

		/**水平滚动条实体*/
		__getset(0,__proto,'hScrollBar',function(){
			return this._hScrollBar;
		});

		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this.callLater(this.changeScroll);
		});

		/**水平滚动最大值*/
		__getset(0,__proto,'maxScrollX',function(){
			return this._tf.maxScrollX;
		});

		/**垂直滚动条皮肤*/
		__getset(0,__proto,'vScrollBarSkin',function(){
			return this._vScrollBar ? this._vScrollBar.skin :null;
			},function(value){
			if (this._vScrollBar==null){
				this.addChild(this._vScrollBar=new VScrollBar());
				this._vScrollBar.on(/*laya.events.Event.CHANGE*/"change",this,this.onVBarChanged);
				this._vScrollBar.target=this._tf;
				this.callLater(this.changeScroll);
			}
			this._vScrollBar.skin=value;
		});

		/**水平滚动条皮肤*/
		__getset(0,__proto,'hScrollBarSkin',function(){
			return this._hScrollBar ? this._hScrollBar.skin :null;
			},function(value){
			if (this._hScrollBar==null){
				this.addChild(this._hScrollBar=new HScrollBar());
				this._hScrollBar.on(/*laya.events.Event.CHANGE*/"change",this,this.onHBarChanged);
				this._hScrollBar.mouseWheelEnable=false;
				this._hScrollBar.target=this._tf;
				this.callLater(this.changeScroll);
			}
			this._hScrollBar.skin=value;
		});

		/**垂直滚动条实体*/
		__getset(0,__proto,'vScrollBar',function(){
			return this._vScrollBar;
		});

		/**垂直滚动最大值*/
		__getset(0,__proto,'maxScrollY',function(){
			return this._tf.maxScrollY;
		});

		/**水平滚动值*/
		__getset(0,__proto,'scrollX',function(){
			return this._tf.scrollX;
		});

		return TextArea;
	})(TextInput)


	/**
	*异步Dialog的生命周期:show或者popup > onCreate(如果没有创建过)> onOpen > onClose > onDestroy(如果销毁)
	*onCreate在页面未创建时执行一次，再次打开页面不会再执行，适合写一些只执行一次的逻辑，比如资源加载，节点事件监听
	*onOpen在页面每次打开都会执行，适合做一些每次都需要处理的事情，比如消息请求，根据数据初始化页面
	*onClose在每次关闭的时候调用，适合关闭时停止动画，网络消息监听等逻辑
	*onDestroy在页面被销毁的时候调用，适合置空引用对象
	*/
	//class laya.ui.AsynDialog extends laya.ui.Dialog
	var AsynDialog=(function(_super){
		function AsynDialog(){
			this._uiView=null;
			this.isCloseOther=false;
			AsynDialog.__super.call(this);
		}

		__class(AsynDialog,'laya.ui.AsynDialog',_super);
		var __proto=AsynDialog.prototype;
		/**@private */
		__proto.createView=function(uiView){
			this._uiView=uiView;
		}

		__proto._open=function(modal,closeOther){
			this.isModal=modal;
			this.isCloseOther=closeOther;
			Dialog.manager.lock(true);
			if (this._uiView)this.onCreated();
			else this.onOpen();
		}

		/**
		*在页面未创建时执行一次，再次打开页面不会再执行，适合写一些只执行一次的逻辑，比如资源加载，节点事件监听
		*/
		__proto.onCreated=function(){
			this.createUI();
			this.onOpen();
		}

		/**根据节点数据创建UI*/
		__proto.createUI=function(){
			laya.ui.View.prototype.createView.call(this,this._uiView);
			this._uiView=null;
			this._dealDragArea();
		}

		/**
		*在页面每次打开都会执行，适合做一些每次都需要处理的事情，比如消息请求，根据数据初始化页面
		*/
		__proto.onOpen=function(){
			Dialog.manager.open(this,this.isCloseOther);
			Dialog.manager.lock(false);
		}

		__proto.close=function(type){
			Dialog.manager.close(this);
			this.onClose();
		}

		/**
		*在每次关闭的时候调用，适合关闭时停止动画，网络消息监听等逻辑
		*/
		__proto.onClose=function(){}
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			laya.ui.View.prototype.destroy.call(this,destroyChild);
			this._uiView=null;
			this.onDestroy();
		}

		/**
		*在页面被销毁的时候调用，适合置空引用对象
		*/
		__proto.onDestroy=function(){}
		return AsynDialog;
	})(Dialog)


	Laya.__init([View]);
})(window,document,Laya);

/*!
 * protobuf.js v6.8.3 (c) 2016, daniel wirtz
 * compiled wed, 29 nov 2017 11:13:36 utc
 * licensed under the bsd-3-clause license
 * see: https://github.com/dcodeio/protobuf.js for details
 */
!function(e,t){"use strict";!function(t,r,n){function i(e){var n=r[e];return n||t[e][0].call(n=r[e]={exports:{}},i,n,n.exports),n.exports}var o=e.protobuf=i(n[0]);"function"==typeof define&&define.amd&&define(["long"],function(e){return e&&e.isLong&&(o.util.Long=e,o.configure()),o}),"object"==typeof module&&module&&module.exports&&(module.exports=o)}({1:[function(e,t){function r(e,t){for(var r=Array(arguments.length-1),n=0,i=2,o=!0;i<arguments.length;)r[n++]=arguments[i++];return new Promise(function(i,s){r[n]=function(e){if(o)if(o=!1,e)s(e);else{for(var t=Array(arguments.length-1),r=0;r<t.length;)t[r++]=arguments[r];i.apply(null,t)}};try{e.apply(t||null,r)}catch(e){o&&(o=!1,s(e))}})}t.exports=r},{}],2:[function(e,r,n){var i=n;i.length=function(e){var t=e.length;if(!t)return 0;for(var r=0;--t%4>1&&"="===e.charAt(t);)++r;return Math.ceil(3*e.length)/4-r};for(var o=Array(64),s=Array(123),a=0;a<64;)s[o[a]=a<26?a+65:a<52?a+71:a<62?a-4:a-59|43]=a++;i.encode=function(e,t,r){for(var n,i=null,s=[],a=0,u=0;t<r;){var f=e[t++];switch(u){case 0:s[a++]=o[f>>2],n=(3&f)<<4,u=1;break;case 1:s[a++]=o[n|f>>4],n=(15&f)<<2,u=2;break;case 2:s[a++]=o[n|f>>6],s[a++]=o[63&f],u=0}a>8191&&((i||(i=[])).push(String.fromCharCode.apply(String,s)),a=0)}return u&&(s[a++]=o[n],s[a++]=61,1===u&&(s[a++]=61)),i?(a&&i.push(String.fromCharCode.apply(String,s.slice(0,a))),i.join("")):String.fromCharCode.apply(String,s.slice(0,a))};i.decode=function(e,r,n){for(var i,o=n,a=0,u=0;u<e.length;){var f=e.charCodeAt(u++);if(61===f&&a>1)break;if((f=s[f])===t)throw Error("invalid encoding");switch(a){case 0:i=f,a=1;break;case 1:r[n++]=i<<2|(48&f)>>4,i=f,a=2;break;case 2:r[n++]=(15&i)<<4|(60&f)>>2,i=f,a=3;break;case 3:r[n++]=(3&i)<<6|f,a=0}}if(1===a)throw Error("invalid encoding");return n-o},i.test=function(e){return/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(e)}},{}],3:[function(e,r){function n(e,r){function i(e){if("string"!=typeof e){var t=o();if(n.verbose&&console.log("codegen: "+t),t="return "+t,e){for(var r=Object.keys(e),a=Array(r.length+1),u=Array(r.length),f=0;f<r.length;)a[f]=r[f],u[f]=e[r[f++]];return a[f]=t,Function.apply(null,a).apply(null,u)}return Function(t)()}for(var l=Array(arguments.length-1),p=0;p<l.length;)l[p]=arguments[++p];if(p=0,e=e.replace(/%([%dfijs])/g,function(e,t){var r=l[p++];switch(t){case"d":case"f":return+r+"";case"i":return Math.floor(r)+"";case"j":return JSON.stringify(r);case"s":return r+""}return"%"}),p!==l.length)throw Error("parameter count mismatch");return s.push(e),i}function o(t){return"function "+(t||r||"")+"("+(e&&e.join(",")||"")+"){\n  "+s.join("\n  ")+"\n}"}"string"==typeof e&&(r=e,e=t);var s=[];return i.toString=o,i}r.exports=n,n.verbose=!1},{}],4:[function(e,r){function n(){this.a={}}r.exports=n,n.prototype.on=function(e,t,r){return(this.a[e]||(this.a[e]=[])).push({fn:t,ctx:r||this}),this},n.prototype.off=function(e,r){if(e===t)this.a={};else if(r===t)this.a[e]=[];else for(var n=this.a[e],i=0;i<n.length;)n[i].fn===r?n.splice(i,1):++i;return this},n.prototype.emit=function(e){var t=this.a[e];if(t){for(var r=[],n=1;n<arguments.length;)r.push(arguments[n++]);for(n=0;n<t.length;)t[n].fn.apply(t[n++].ctx,r)}return this}},{}],5:[function(e,r){function n(e,t,r){return"function"==typeof t?(r=t,t={}):t||(t={}),r?!t.xhr&&s&&s.readFile?s.readFile(e,function(i,o){return i&&"undefined"!=typeof XMLHttpRequest?n.xhr(e,t,r):i?r(i):r(null,t.binary?o:o.toString("utf8"))}):n.xhr(e,t,r):i(n,this,e,t)}r.exports=n;var i=e(1),o=e(7),s=o("fs");n.xhr=function(e,r,n){var i=new XMLHttpRequest;i.onreadystatechange=function(){if(4!==i.readyState)return t;if(0!==i.status&&200!==i.status)return n(Error("status "+i.status));if(r.binary){var e=i.response;if(!e){e=[];for(var o=0;o<i.responseText.length;++o)e.push(255&i.responseText.charCodeAt(o))}return n(null,"undefined"!=typeof Uint8Array?new Uint8Array(e):e)}return n(null,i.responseText)},r.binary&&("overrideMimeType"in i&&i.overrideMimeType("text/plain; charset=x-user-defined"),i.responseType="arraybuffer"),i.open("GET",e),i.send()}},{1:1,7:7}],6:[function(e,t){function r(e){return"undefined"!=typeof Float32Array?function(){function t(e,t,r){o[0]=e,t[r]=s[0],t[r+1]=s[1],t[r+2]=s[2],t[r+3]=s[3]}function r(e,t,r){o[0]=e,t[r]=s[3],t[r+1]=s[2],t[r+2]=s[1],t[r+3]=s[0]}function n(e,t){return s[0]=e[t],s[1]=e[t+1],s[2]=e[t+2],s[3]=e[t+3],o[0]}function i(e,t){return s[3]=e[t],s[2]=e[t+1],s[1]=e[t+2],s[0]=e[t+3],o[0]}var o=new Float32Array([-0]),s=new Uint8Array(o.buffer),a=128===s[3];e.writeFloatLE=a?t:r,e.writeFloatBE=a?r:t,e.readFloatLE=a?n:i,e.readFloatBE=a?i:n}():function(){function t(e,t,r,n){var i=t<0?1:0;if(i&&(t=-t),0===t)e(1/t>0?0:2147483648,r,n);else if(isNaN(t))e(2143289344,r,n);else if(t>3.4028234663852886e38)e((i<<31|2139095040)>>>0,r,n);else if(t<1.1754943508222875e-38)e((i<<31|Math.round(t/1.401298464324817e-45))>>>0,r,n);else{var o=Math.floor(Math.log(t)/Math.LN2),s=8388607&Math.round(t*Math.pow(2,-o)*8388608);e((i<<31|o+127<<23|s)>>>0,r,n)}}function r(e,t,r){var n=e(t,r),i=2*(n>>31)+1,o=n>>>23&255,s=8388607&n;return 255===o?s?NaN:i*(1/0):0===o?1.401298464324817e-45*i*s:i*Math.pow(2,o-150)*(s+8388608)}e.writeFloatLE=t.bind(null,n),e.writeFloatBE=t.bind(null,i),e.readFloatLE=r.bind(null,o),e.readFloatBE=r.bind(null,s)}(),"undefined"!=typeof Float64Array?function(){function t(e,t,r){o[0]=e,t[r]=s[0],t[r+1]=s[1],t[r+2]=s[2],t[r+3]=s[3],t[r+4]=s[4],t[r+5]=s[5],t[r+6]=s[6],t[r+7]=s[7]}function r(e,t,r){o[0]=e,t[r]=s[7],t[r+1]=s[6],t[r+2]=s[5],t[r+3]=s[4],t[r+4]=s[3],t[r+5]=s[2],t[r+6]=s[1],t[r+7]=s[0]}function n(e,t){return s[0]=e[t],s[1]=e[t+1],s[2]=e[t+2],s[3]=e[t+3],s[4]=e[t+4],s[5]=e[t+5],s[6]=e[t+6],s[7]=e[t+7],o[0]}function i(e,t){return s[7]=e[t],s[6]=e[t+1],s[5]=e[t+2],s[4]=e[t+3],s[3]=e[t+4],s[2]=e[t+5],s[1]=e[t+6],s[0]=e[t+7],o[0]}var o=new Float64Array([-0]),s=new Uint8Array(o.buffer),a=128===s[7];e.writeDoubleLE=a?t:r,e.writeDoubleBE=a?r:t,e.readDoubleLE=a?n:i,e.readDoubleBE=a?i:n}():function(){function t(e,t,r,n,i,o){var s=n<0?1:0;if(s&&(n=-n),0===n)e(0,i,o+t),e(1/n>0?0:2147483648,i,o+r);else if(isNaN(n))e(0,i,o+t),e(2146959360,i,o+r);else if(n>1.7976931348623157e308)e(0,i,o+t),e((s<<31|2146435072)>>>0,i,o+r);else{var a;if(n<2.2250738585072014e-308)a=n/5e-324,e(a>>>0,i,o+t),e((s<<31|a/4294967296)>>>0,i,o+r);else{var u=Math.floor(Math.log(n)/Math.LN2);1024===u&&(u=1023),a=n*Math.pow(2,-u),e(4503599627370496*a>>>0,i,o+t),e((s<<31|u+1023<<20|1048576*a&1048575)>>>0,i,o+r)}}}function r(e,t,r,n,i){var o=e(n,i+t),s=e(n,i+r),a=2*(s>>31)+1,u=s>>>20&2047,f=4294967296*(1048575&s)+o;return 2047===u?f?NaN:a*(1/0):0===u?5e-324*a*f:a*Math.pow(2,u-1075)*(f+4503599627370496)}e.writeDoubleLE=t.bind(null,n,0,4),e.writeDoubleBE=t.bind(null,i,4,0),e.readDoubleLE=r.bind(null,o,0,4),e.readDoubleBE=r.bind(null,s,4,0)}(),e}function n(e,t,r){t[r]=255&e,t[r+1]=e>>>8&255,t[r+2]=e>>>16&255,t[r+3]=e>>>24}function i(e,t,r){t[r]=e>>>24,t[r+1]=e>>>16&255,t[r+2]=e>>>8&255,t[r+3]=255&e}function o(e,t){return(e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24)>>>0}function s(e,t){return(e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3])>>>0}t.exports=r(r)},{}],7:[function(e,t,r){function n(e){try{var t=eval("quire".replace(/^/,"re"))(e);if(t&&(t.length||Object.keys(t).length))return t}catch(e){}return null}t.exports=n},{}],8:[function(e,t,r){var n=r,i=n.isAbsolute=function(e){return/^(?:\/|\w+:)/.test(e)},o=n.normalize=function(e){e=e.replace(/\\/g,"/").replace(/\/{2,}/g,"/");var t=e.split("/"),r=i(e),n="";r&&(n=t.shift()+"/");for(var o=0;o<t.length;)".."===t[o]?o>0&&".."!==t[o-1]?t.splice(--o,2):r?t.splice(o,1):++o:"."===t[o]?t.splice(o,1):++o;return n+t.join("/")};n.resolve=function(e,t,r){return r||(t=o(t)),i(t)?t:(r||(e=o(e)),(e=e.replace(/(?:\/|^)[^\/]+$/,"")).length?o(e+"/"+t):t)}},{}],9:[function(e,t){function r(e,t,r){var n=r||8192,i=n>>>1,o=null,s=n;return function(r){if(r<1||r>i)return e(r);s+r>n&&(o=e(n),s=0);var a=t.call(o,s,s+=r);return 7&s&&(s=1+(7|s)),a}}t.exports=r},{}],10:[function(e,t,r){var n=r;n.length=function(e){for(var t=0,r=0,n=0;n<e.length;++n)r=e.charCodeAt(n),r<128?t+=1:r<2048?t+=2:55296==(64512&r)&&56320==(64512&e.charCodeAt(n+1))?(++n,t+=4):t+=3;return t},n.read=function(e,t,r){if(r-t<1)return"";for(var n,i=null,o=[],s=0;t<r;)n=e[t++],n<128?o[s++]=n:n>191&&n<224?o[s++]=(31&n)<<6|63&e[t++]:n>239&&n<365?(n=((7&n)<<18|(63&e[t++])<<12|(63&e[t++])<<6|63&e[t++])-65536,o[s++]=55296+(n>>10),o[s++]=56320+(1023&n)):o[s++]=(15&n)<<12|(63&e[t++])<<6|63&e[t++],s>8191&&((i||(i=[])).push(String.fromCharCode.apply(String,o)),s=0);return i?(s&&i.push(String.fromCharCode.apply(String,o.slice(0,s))),i.join("")):String.fromCharCode.apply(String,o.slice(0,s))},n.write=function(e,t,r){for(var n,i,o=r,s=0;s<e.length;++s)n=e.charCodeAt(s),n<128?t[r++]=n:n<2048?(t[r++]=n>>6|192,t[r++]=63&n|128):55296==(64512&n)&&56320==(64512&(i=e.charCodeAt(s+1)))?(n=65536+((1023&n)<<10)+(1023&i),++s,t[r++]=n>>18|240,t[r++]=n>>12&63|128,t[r++]=n>>6&63|128,t[r++]=63&n|128):(t[r++]=n>>12|224,t[r++]=n>>6&63|128,t[r++]=63&n|128);return r-o}},{}],11:[function(e,t){function r(e,t){n.test(e)||(e="google/protobuf/"+e+".proto",t={nested:{google:{nested:{protobuf:{nested:t}}}}}),r[e]=t}t.exports=r;var n=/\/|\./;r("any",{Any:{fields:{type_url:{type:"string",id:1},value:{type:"bytes",id:2}}}});var i;r("duration",{Duration:i={fields:{seconds:{type:"int64",id:1},nanos:{type:"int32",id:2}}}}),r("timestamp",{Timestamp:i}),r("empty",{Empty:{fields:{}}}),r("struct",{Struct:{fields:{fields:{keyType:"string",type:"Value",id:1}}},Value:{oneofs:{kind:{oneof:["nullValue","numberValue","stringValue","boolValue","structValue","listValue"]}},fields:{nullValue:{type:"NullValue",id:1},numberValue:{type:"double",id:2},stringValue:{type:"string",id:3},boolValue:{type:"bool",id:4},structValue:{type:"Struct",id:5},listValue:{type:"ListValue",id:6}}},NullValue:{values:{NULL_VALUE:0}},ListValue:{fields:{values:{rule:"repeated",type:"Value",id:1}}}}),r("wrappers",{DoubleValue:{fields:{value:{type:"double",id:1}}},FloatValue:{fields:{value:{type:"float",id:1}}},Int64Value:{fields:{value:{type:"int64",id:1}}},UInt64Value:{fields:{value:{type:"uint64",id:1}}},Int32Value:{fields:{value:{type:"int32",id:1}}},UInt32Value:{fields:{value:{type:"uint32",id:1}}},BoolValue:{fields:{value:{type:"bool",id:1}}},StringValue:{fields:{value:{type:"string",id:1}}},BytesValue:{fields:{value:{type:"bytes",id:1}}}}),r.get=function(e){return r[e]||null}},{}],12:[function(e,t,r){function n(e,t,r,n){if(t.resolvedType)if(t.resolvedType instanceof s){e("switch(d%s){",n);for(var i=t.resolvedType.values,o=Object.keys(i),a=0;a<o.length;++a)t.repeated&&i[o[a]]===t.typeDefault&&e("default:"),e("case%j:",o[a])("case %i:",i[o[a]])("m%s=%j",n,i[o[a]])("break");e("}")}else e('if(typeof d%s!=="object")',n)("throw TypeError(%j)",t.fullName+": object expected")("m%s=types[%i].fromObject(d%s)",n,r,n);else{var u=!1;switch(t.type){case"double":case"float":e("m%s=Number(d%s)",n,n);break;case"uint32":case"fixed32":e("m%s=d%s>>>0",n,n);break;case"int32":case"sint32":case"sfixed32":e("m%s=d%s|0",n,n);break;case"uint64":u=!0;case"int64":case"sint64":case"fixed64":case"sfixed64":e("if(util.Long)")("(m%s=util.Long.fromValue(d%s)).unsigned=%j",n,n,u)('else if(typeof d%s==="string")',n)("m%s=parseInt(d%s,10)",n,n)('else if(typeof d%s==="number")',n)("m%s=d%s",n,n)('else if(typeof d%s==="object")',n)("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)",n,n,n,u?"true":"");break;case"bytes":e('if(typeof d%s==="string")',n)("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)",n,n,n)("else if(d%s.length)",n)("m%s=d%s",n,n);break;case"string":e("m%s=String(d%s)",n,n);break;case"bool":e("m%s=Boolean(d%s)",n,n)}}return e}function i(e,t,r,n){if(t.resolvedType)t.resolvedType instanceof s?e("d%s=o.enums===String?types[%i].values[m%s]:m%s",n,r,n,n):e("d%s=types[%i].toObject(m%s,o)",n,r,n);else{var i=!1;switch(t.type){case"double":case"float":e("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s",n,n,n,n);break;case"uint64":i=!0;case"int64":case"sint64":case"fixed64":case"sfixed64":e('if(typeof m%s==="number")',n)("d%s=o.longs===String?String(m%s):m%s",n,n,n)("else")("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s",n,n,n,n,i?"true":"",n);break;case"bytes":e("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s",n,n,n,n,n);break;default:e("d%s=m%s",n,n)}}return e}var o=r,s=e(15),a=e(37);o.fromObject=function(e){var t=e.fieldsArray,r=a.codegen(["d"],e.name+"$fromObject")("if(d instanceof this.ctor)")("return d");if(!t.length)return r("return new this.ctor");r("var m=new this.ctor");for(var i=0;i<t.length;++i){var o=t[i].resolve(),u=a.safeProp(o.name);o.map?(r("if(d%s){",u)('if(typeof d%s!=="object")',u)("throw TypeError(%j)",o.fullName+": object expected")("m%s={}",u)("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){",u),n(r,o,i,u+"[ks[i]]")("}")("}")):o.repeated?(r("if(d%s){",u)("if(!Array.isArray(d%s))",u)("throw TypeError(%j)",o.fullName+": array expected")("m%s=[]",u)("for(var i=0;i<d%s.length;++i){",u),n(r,o,i,u+"[i]")("}")("}")):(o.resolvedType instanceof s||r("if(d%s!=null){",u),n(r,o,i,u),o.resolvedType instanceof s||r("}"))}return r("return m")},o.toObject=function(e){var t=e.fieldsArray.slice().sort(a.compareFieldsById);if(!t.length)return a.codegen()("return {}");for(var r=a.codegen(["m","o"],e.name+"$toObject")("if(!o)")("o={}")("var d={}"),n=[],o=[],s=[],u=0;u<t.length;++u)t[u].partOf||(t[u].resolve().repeated?n:t[u].map?o:s).push(t[u]);var f,l,p=!1;for(u=0;u<t.length;++u){var f=t[u],c=e.b.indexOf(f),l=a.safeProp(f.name);f.map?(p||(p=!0,r("var ks2")),r("if(m%s&&(ks2=Object.keys(m%s)).length){",l,l)("d%s={}",l)("for(var j=0;j<ks2.length;++j){"),i(r,f,c,l+"[ks2[j]]")("}")):f.repeated?(r("if(m%s&&m%s.length){",l,l)("d%s=[]",l)("for(var j=0;j<m%s.length;++j){",l),i(r,f,c,l+"[j]")("}")):(r("if(m%s!=null&&m.hasOwnProperty(%j)){",l,f.name),i(r,f,c,l),f.partOf&&r("if(o.oneofs)")("d%s=%j",a.safeProp(f.partOf.name),f.name)),r("}")}return r("return d")}},{15:15,37:37}],13:[function(e,r){function n(e){return"missing required '"+e.name+"'"}function i(e){var r=a.codegen(["r","l"],e.name+"$decode")("if(!(r instanceof Reader))")("r=Reader.create(r)")("var c=l===undefined?r.len:r.pos+l,m=new this.ctor"+(e.fieldsArray.filter(function(e){return e.map}).length?",k":""))("while(r.pos<c){")("var t=r.uint32()");e.group&&r("if((t&7)===4)")("break"),r("switch(t>>>3){");for(var i=0;i<e.fieldsArray.length;++i){var u=e.b[i].resolve(),f=u.resolvedType instanceof o?"int32":u.type,l="m"+a.safeProp(u.name);r("case %i:",u.id),u.map?(r("r.skip().pos++")("if(%s===util.emptyObject)",l)("%s={}",l)("k=r.%s()",u.keyType)("r.pos++"),s.long[u.keyType]!==t?s.basic[f]===t?r('%s[typeof k==="object"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())',l,i):r('%s[typeof k==="object"?util.longToHash(k):k]=r.%s()',l,f):s.basic[f]===t?r("%s[k]=types[%i].decode(r,r.uint32())",l,i):r("%s[k]=r.%s()",l,f)):u.repeated?(r("if(!(%s&&%s.length))",l,l)("%s=[]",l),s.packed[f]!==t&&r("if((t&7)===2){")("var c2=r.uint32()+r.pos")("while(r.pos<c2)")("%s.push(r.%s())",l,f)("}else"),s.basic[f]===t?r(u.resolvedType.group?"%s.push(types[%i].decode(r))":"%s.push(types[%i].decode(r,r.uint32()))",l,i):r("%s.push(r.%s())",l,f)):s.basic[f]===t?r(u.resolvedType.group?"%s=types[%i].decode(r)":"%s=types[%i].decode(r,r.uint32())",l,i):r("%s=r.%s()",l,f),r("break")}for(r("default:")("r.skipType(t&7)")("break")("}")("}"),i=0;i<e.b.length;++i){var p=e.b[i];p.required&&r("if(!m.hasOwnProperty(%j))",p.name)("throw util.ProtocolError(%j,{instance:m})",n(p))}return r("return m")}r.exports=i;var o=e(15),s=e(36),a=e(37)},{15:15,36:36,37:37}],14:[function(e,r){function n(e,t,r,n){return t.resolvedType.group?e("types[%i].encode(%s,w.uint32(%i)).uint32(%i)",r,n,(t.id<<3|3)>>>0,(t.id<<3|4)>>>0):e("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()",r,n,(t.id<<3|2)>>>0)}function i(e){for(var r,i,u=a.codegen(["m","w"],e.name+"$encode")("if(!w)")("w=Writer.create()"),f=e.fieldsArray.slice().sort(a.compareFieldsById),r=0;r<f.length;++r){var l=f[r].resolve(),p=e.b.indexOf(l),c=l.resolvedType instanceof o?"int32":l.type,h=s.basic[c];i="m"+a.safeProp(l.name),l.map?(u("if(%s!=null&&m.hasOwnProperty(%j)){",i,l.name)("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){",i)("w.uint32(%i).fork().uint32(%i).%s(ks[i])",(l.id<<3|2)>>>0,8|s.mapKey[l.keyType],l.keyType),h===t?u("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()",p,i):u(".uint32(%i).%s(%s[ks[i]]).ldelim()",16|h,c,i),u("}")("}")):l.repeated?(u("if(%s!=null&&%s.length){",i,i),l.packed&&s.packed[c]!==t?u("w.uint32(%i).fork()",(l.id<<3|2)>>>0)("for(var i=0;i<%s.length;++i)",i)("w.%s(%s[i])",c,i)("w.ldelim()"):(u("for(var i=0;i<%s.length;++i)",i),h===t?n(u,l,p,i+"[i]"):u("w.uint32(%i).%s(%s[i])",(l.id<<3|h)>>>0,c,i)),u("}")):(l.optional&&u("if(%s!=null&&m.hasOwnProperty(%j))",i,l.name),h===t?n(u,l,p,i):u("w.uint32(%i).%s(%s)",(l.id<<3|h)>>>0,c,i))}return u("return w")}r.exports=i;var o=e(15),s=e(36),a=e(37)},{15:15,36:36,37:37}],15:[function(e,r){function n(e,r,n){if(i.call(this,e,n),r&&"object"!=typeof r)throw TypeError("values must be an object");if(this.valuesById={},this.values=Object.create(this.valuesById),this.comments={},this.reserved=t,r)for(var o=Object.keys(r),s=0;s<o.length;++s)"number"==typeof r[o[s]]&&(this.valuesById[this.values[o[s]]=r[o[s]]]=o[s])}r.exports=n;var i=e(24);((n.prototype=Object.create(i.prototype)).constructor=n).className="Enum";var o=e(23),s=e(37);n.fromJSON=function(e,t){var r=new n(e,t.values,t.options);return r.reserved=t.reserved,r},n.prototype.toJSON=function(){return s.toObject(["options",this.options,"values",this.values,"reserved",this.reserved&&this.reserved.length?this.reserved:t])},n.prototype.add=function(e,r,n){if(!s.isString(e))throw TypeError("name must be a string");if(!s.isInteger(r))throw TypeError("id must be an integer");if(this.values[e]!==t)throw Error("duplicate name '"+e+"' in "+this);if(this.isReservedId(r))throw Error("id "+r+" is reserved in "+this);if(this.isReservedName(e))throw Error("name '"+e+"' is reserved in "+this);if(this.valuesById[r]!==t){if(!this.options||!this.options.allow_alias)throw Error("duplicate id "+r+" in "+this);this.values[e]=r}else this.valuesById[this.values[e]=r]=e;return this.comments[e]=n||null,this},n.prototype.remove=function(e){if(!s.isString(e))throw TypeError("name must be a string");var t=this.values[e];if(null==t)throw Error("name '"+e+"' does not exist in "+this);return delete this.valuesById[t],delete this.values[e],delete this.comments[e],this},n.prototype.isReservedId=function(e){return o.isReservedId(this.reserved,e)},n.prototype.isReservedName=function(e){return o.isReservedName(this.reserved,e)}},{23:23,24:24,37:37}],16:[function(e,r){function n(e,r,n,o,s,l){if(u.isObject(o)?(l=o,o=s=t):u.isObject(s)&&(l=s,s=t),i.call(this,e,l),!u.isInteger(r)||r<0)throw TypeError("id must be a non-negative integer");if(!u.isString(n))throw TypeError("type must be a string");if(o!==t&&!f.test(o=(""+o).toLowerCase()))throw TypeError("rule must be a string rule");if(s!==t&&!u.isString(s))throw TypeError("extend must be a string");this.rule=o&&"optional"!==o?o:t,this.type=n,this.id=r,this.extend=s||t,this.required="required"===o,this.optional=!this.required,this.repeated="repeated"===o,this.map=!1,this.message=null,this.partOf=null,this.typeDefault=null,this.defaultValue=null,this.long=!!u.Long&&a.long[n]!==t,this.bytes="bytes"===n,this.resolvedType=null,this.extensionField=null,this.declaringField=null,this.c=null}r.exports=n;var i=e(24);((n.prototype=Object.create(i.prototype)).constructor=n).className="Field";var o,s=e(15),a=e(36),u=e(37),f=/^required|optional|repeated$/;n.fromJSON=function(e,t){return new n(e,t.id,t.type,t.rule,t.extend,t.options)},Object.defineProperty(n.prototype,"packed",{get:function(){return null===this.c&&(this.c=!1!==this.getOption("packed")),this.c}}),n.prototype.setOption=function(e,t,r){return"packed"===e&&(this.c=null),i.prototype.setOption.call(this,e,t,r)},n.prototype.toJSON=function(){return u.toObject(["rule","optional"!==this.rule&&this.rule||t,"type",this.type,"id",this.id,"extend",this.extend,"options",this.options])},n.prototype.resolve=function(){if(this.resolved)return this;if((this.typeDefault=a.defaults[this.type])===t&&(this.resolvedType=(this.declaringField?this.declaringField.parent:this.parent).lookupTypeOrEnum(this.type),this.resolvedType instanceof o?this.typeDefault=null:this.typeDefault=this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]),this.options&&null!=this.options.default&&(this.typeDefault=this.options.default,this.resolvedType instanceof s&&"string"==typeof this.typeDefault&&(this.typeDefault=this.resolvedType.values[this.typeDefault])),this.options&&(!0!==this.options.packed&&(this.options.packed===t||!this.resolvedType||this.resolvedType instanceof s)||delete this.options.packed,Object.keys(this.options).length||(this.options=t)),this.long)this.typeDefault=u.Long.fromNumber(this.typeDefault,"u"===this.type.charAt(0)),Object.freeze&&Object.freeze(this.typeDefault);else if(this.bytes&&"string"==typeof this.typeDefault){var e;u.base64.test(this.typeDefault)?u.base64.decode(this.typeDefault,e=u.newBuffer(u.base64.length(this.typeDefault)),0):u.utf8.write(this.typeDefault,e=u.newBuffer(u.utf8.length(this.typeDefault)),0),this.typeDefault=e}return this.map?this.defaultValue=u.emptyObject:this.repeated?this.defaultValue=u.emptyArray:this.defaultValue=this.typeDefault,this.parent instanceof o&&(this.parent.ctor.prototype[this.name]=this.defaultValue),i.prototype.resolve.call(this)},n.d=function(e,t,r,i){return"function"==typeof t?t=u.decorateType(t).name:t&&"object"==typeof t&&(t=u.decorateEnum(t).name),function(o,s){u.decorateType(o.constructor).add(new n(s,e,t,r,{default:i}))}},n.e=function(e){o=e}},{15:15,24:24,36:36,37:37}],17:[function(e,t){function r(e,t,r){return"function"==typeof t?(r=t,t=new i.Root):t||(t=new i.Root),t.load(e,r)}function n(e,t){return t||(t=new i.Root),t.loadSync(e)}var i=t.exports=e(18);i.build="light",i.load=r,i.loadSync=n,i.encoder=e(14),i.decoder=e(13),i.verifier=e(40),i.converter=e(12),i.ReflectionObject=e(24),i.Namespace=e(23),i.Root=e(29),i.Enum=e(15),i.Type=e(35),i.Field=e(16),i.OneOf=e(25),i.MapField=e(20),i.Service=e(33),i.Method=e(22),i.Message=e(21),i.wrappers=e(41),i.types=e(36),i.util=e(37),i.ReflectionObject.e(i.Root),i.Namespace.e(i.Type,i.Service),i.Root.e(i.Type),i.Field.e(i.Type)},{12:12,13:13,14:14,15:15,16:16,18:18,20:20,21:21,22:22,23:23,24:24,25:25,29:29,33:33,35:35,36:36,37:37,40:40,41:41}],18:[function(e,t,r){function n(){i.Reader.e(i.BufferReader),i.util.e()}var i=r;i.build="minimal",i.Writer=e(42),i.BufferWriter=e(43),i.Reader=e(27),i.BufferReader=e(28),i.util=e(39),i.rpc=e(31),i.roots=e(30),i.configure=n,i.Writer.e(i.BufferWriter),n()},{27:27,28:28,30:30,31:31,39:39,42:42,43:43}],19:[function(e,t){var r=t.exports=e(17);r.build="full",r.tokenize=e(34),r.parse=e(26),r.common=e(11),r.Root.e(r.Type,r.parse,r.common)},{11:11,17:17,26:26,34:34}],20:[function(e,r){function n(e,t,r,n,o){if(i.call(this,e,t,n,o),!s.isString(r))throw TypeError("keyType must be a string");this.keyType=r,this.resolvedKeyType=null,this.map=!0}r.exports=n;var i=e(16);((n.prototype=Object.create(i.prototype)).constructor=n).className="MapField";var o=e(36),s=e(37);n.fromJSON=function(e,t){return new n(e,t.id,t.keyType,t.type,t.options)},n.prototype.toJSON=function(){return s.toObject(["keyType",this.keyType,"type",this.type,"id",this.id,"extend",this.extend,"options",this.options])},n.prototype.resolve=function(){if(this.resolved)return this;if(o.mapKey[this.keyType]===t)throw Error("invalid key type: "+this.keyType);return i.prototype.resolve.call(this)},n.d=function(e,t,r){return"function"==typeof r?r=s.decorateType(r).name:r&&"object"==typeof r&&(r=s.decorateEnum(r).name),function(i,o){s.decorateType(i.constructor).add(new n(o,e,t,r))}}},{16:16,36:36,37:37}],21:[function(e,t){function r(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)this[t[r]]=e[t[r]]}t.exports=r;var n=e(39);r.create=function(e){return this.$type.create(e)},r.encode=function(e,t){return this.$type.encode(e,t)},r.encodeDelimited=function(e,t){return this.$type.encodeDelimited(e,t)},r.decode=function(e){return this.$type.decode(e)},r.decodeDelimited=function(e){return this.$type.decodeDelimited(e)},r.verify=function(e){return this.$type.verify(e)},r.fromObject=function(e){return this.$type.fromObject(e)},r.toObject=function(e,t){return this.$type.toObject(e,t)},r.prototype.toJSON=function(){return this.$type.toObject(this,n.toJSONOptions)}},{39:39}],22:[function(e,r){function n(e,r,n,s,a,u,f){if(o.isObject(a)?(f=a,a=u=t):o.isObject(u)&&(f=u,u=t),r!==t&&!o.isString(r))throw TypeError("type must be a string");if(!o.isString(n))throw TypeError("requestType must be a string");if(!o.isString(s))throw TypeError("responseType must be a string");i.call(this,e,f),this.type=r||"rpc",this.requestType=n,this.requestStream=!!a||t,this.responseType=s,this.responseStream=!!u||t,this.resolvedRequestType=null,this.resolvedResponseType=null}r.exports=n;var i=e(24);((n.prototype=Object.create(i.prototype)).constructor=n).className="Method";var o=e(37);n.fromJSON=function(e,t){return new n(e,t.type,t.requestType,t.responseType,t.requestStream,t.responseStream,t.options)},n.prototype.toJSON=function(){return o.toObject(["type","rpc"!==this.type&&this.type||t,"requestType",this.requestType,"requestStream",this.requestStream,"responseType",this.responseType,"responseStream",this.responseStream,"options",this.options])},n.prototype.resolve=function(){return this.resolved?this:(this.resolvedRequestType=this.parent.lookupType(this.requestType),this.resolvedResponseType=this.parent.lookupType(this.responseType),i.prototype.resolve.call(this))}},{24:24,37:37}],23:[function(e,r){function n(e){if(!e||!e.length)return t;for(var r={},n=0;n<e.length;++n)r[e[n].name]=e[n].toJSON();return r}function i(e,r){s.call(this,e,r),this.nested=t,this.f=null}function o(e){return e.f=null,e}r.exports=i;var s=e(24);((i.prototype=Object.create(s.prototype)).constructor=i).className="Namespace";var a,u,f=e(15),l=e(16),p=e(37);i.fromJSON=function(e,t){return new i(e,t.options).addJSON(t.nested)},i.arrayToJSON=n,i.isReservedId=function(e,t){if(e)for(var r=0;r<e.length;++r)if("string"!=typeof e[r]&&e[r][0]<=t&&e[r][1]>=t)return!0;return!1},i.isReservedName=function(e,t){if(e)for(var r=0;r<e.length;++r)if(e[r]===t)return!0;return!1},Object.defineProperty(i.prototype,"nestedArray",{get:function(){return this.f||(this.f=p.toArray(this.nested))}}),i.prototype.toJSON=function(){return p.toObject(["options",this.options,"nested",n(this.nestedArray)])},i.prototype.addJSON=function(e){var r=this;if(e)for(var n,o=Object.keys(e),s=0;s<o.length;++s)n=e[o[s]],r.add((n.fields!==t?a.fromJSON:n.values!==t?f.fromJSON:n.methods!==t?u.fromJSON:n.id!==t?l.fromJSON:i.fromJSON)(o[s],n));return this},i.prototype.get=function(e){return this.nested&&this.nested[e]||null},i.prototype.getEnum=function(e){if(this.nested&&this.nested[e]instanceof f)return this.nested[e].values;throw Error("no such enum")},i.prototype.add=function(e){if(!(e instanceof l&&e.extend!==t||e instanceof a||e instanceof f||e instanceof u||e instanceof i))throw TypeError("object must be a valid nested object");if(this.nested){var r=this.get(e.name);if(r){if(!(r instanceof i&&e instanceof i)||r instanceof a||r instanceof u)throw Error("duplicate name '"+e.name+"' in "+this);for(var n=r.nestedArray,s=0;s<n.length;++s)e.add(n[s]);this.remove(r),this.nested||(this.nested={}),e.setOptions(r.options,!0)}}else this.nested={};return this.nested[e.name]=e,e.onAdd(this),o(this)},i.prototype.remove=function(e){if(!(e instanceof s))throw TypeError("object must be a ReflectionObject");if(e.parent!==this)throw Error(e+" is not a member of "+this);return delete this.nested[e.name],Object.keys(this.nested).length||(this.nested=t),e.onRemove(this),o(this)},i.prototype.define=function(e,t){if(p.isString(e))e=e.split(".");else if(!Array.isArray(e))throw TypeError("illegal path");if(e&&e.length&&""===e[0])throw Error("path must be relative");for(var r=this;e.length>0;){var n=e.shift();if(r.nested&&r.nested[n]){if(!((r=r.nested[n])instanceof i))throw Error("path conflicts with non-namespace objects")}else r.add(r=new i(n))}return t&&r.addJSON(t),r},i.prototype.resolveAll=function(){for(var e=this.nestedArray,t=0;t<e.length;)e[t]instanceof i?e[t++].resolveAll():e[t++].resolve();return this.resolve()},i.prototype.lookup=function(e,r,n){if("boolean"==typeof r?(n=r,r=t):r&&!Array.isArray(r)&&(r=[r]),p.isString(e)&&e.length){if("."===e)return this.root;e=e.split(".")}else if(!e.length)return this;if(""===e[0])return this.root.lookup(e.slice(1),r);var o=this.get(e[0]);if(o){if(1===e.length){if(!r||r.indexOf(o.constructor)>-1)return o}else if(o instanceof i&&(o=o.lookup(e.slice(1),r,!0)))return o}else for(var s=0;s<this.nestedArray.length;++s)if(this.f[s]instanceof i&&(o=this.f[s].lookup(e,r,!0)))return o;return null===this.parent||n?null:this.parent.lookup(e,r)},i.prototype.lookupType=function(e){var t=this.lookup(e,[a]);if(!t)throw Error("no such type");return t},i.prototype.lookupEnum=function(e){var t=this.lookup(e,[f]);if(!t)throw Error("no such Enum '"+e+"' in "+this);return t},i.prototype.lookupTypeOrEnum=function(e){var t=this.lookup(e,[a,f]);if(!t)throw Error("no such Type or Enum '"+e+"' in "+this);return t},i.prototype.lookupService=function(e){var t=this.lookup(e,[u]);if(!t)throw Error("no such Service '"+e+"' in "+this);return t},i.e=function(e,t){a=e,u=t}},{15:15,16:16,24:24,37:37}],24:[function(e,r){function n(e,t){if(!o.isString(e))throw TypeError("name must be a string");if(t&&!o.isObject(t))throw TypeError("options must be an object");this.options=t,this.name=e,this.parent=null,this.resolved=!1,this.comment=null,this.filename=null}r.exports=n,n.className="ReflectionObject";var i,o=e(37);Object.defineProperties(n.prototype,{root:{get:function(){for(var e=this;null!==e.parent;)e=e.parent;return e}},fullName:{get:function(){for(var e=[this.name],t=this.parent;t;)e.unshift(t.name),t=t.parent;return e.join(".")}}}),n.prototype.toJSON=function(){throw Error()},n.prototype.onAdd=function(e){this.parent&&this.parent!==e&&this.parent.remove(this),this.parent=e,this.resolved=!1;var t=e.root;t instanceof i&&t.g(this)},n.prototype.onRemove=function(e){var t=e.root;t instanceof i&&t.h(this),this.parent=null,this.resolved=!1},n.prototype.resolve=function(){return this.resolved?this:(this.root instanceof i&&(this.resolved=!0),this)},n.prototype.getOption=function(e){return this.options?this.options[e]:t},n.prototype.setOption=function(e,r,n){return n&&this.options&&this.options[e]!==t||((this.options||(this.options={}))[e]=r),this},n.prototype.setOptions=function(e,t){if(e)for(var r=Object.keys(e),n=0;n<r.length;++n)this.setOption(r[n],e[r[n]],t);return this},n.prototype.toString=function(){var e=this.constructor.className,t=this.fullName;return t.length?e+" "+t:e},n.e=function(e){i=e}},{37:37}],25:[function(e,r){function n(e,r,n){if(Array.isArray(r)||(n=r,r=t),o.call(this,e,n),r!==t&&!Array.isArray(r))throw TypeError("fieldNames must be an Array");this.oneof=r||[],this.fieldsArray=[]}function i(e){if(e.parent)for(var t=0;t<e.fieldsArray.length;++t)e.fieldsArray[t].parent||e.parent.add(e.fieldsArray[t])}r.exports=n;var o=e(24);((n.prototype=Object.create(o.prototype)).constructor=n).className="OneOf";var s=e(16),a=e(37);n.fromJSON=function(e,t){return new n(e,t.oneof,t.options)},n.prototype.toJSON=function(){return a.toObject(["options",this.options,"oneof",this.oneof])},n.prototype.add=function(e){if(!(e instanceof s))throw TypeError("field must be a Field");return e.parent&&e.parent!==this.parent&&e.parent.remove(e),this.oneof.push(e.name),this.fieldsArray.push(e),e.partOf=this,i(this),this},n.prototype.remove=function(e){if(!(e instanceof s))throw TypeError("field must be a Field");var t=this.fieldsArray.indexOf(e);if(t<0)throw Error(e+" is not a member of "+this);return this.fieldsArray.splice(t,1),t=this.oneof.indexOf(e.name),t>-1&&this.oneof.splice(t,1),e.partOf=null,this},n.prototype.onAdd=function(e){o.prototype.onAdd.call(this,e);for(var t=this,r=0;r<this.oneof.length;++r){var n=e.get(this.oneof[r]);n&&!n.partOf&&(n.partOf=t,t.fieldsArray.push(n))}i(this)},n.prototype.onRemove=function(e){for(var t,r=0;r<this.fieldsArray.length;++r)(t=this.fieldsArray[r]).parent&&t.parent.remove(t);o.prototype.onRemove.call(this,e)},n.d=function(){for(var e=Array(arguments.length),t=0;t<arguments.length;)e[t]=arguments[t++];return function(t,r){a.decorateType(t.constructor).add(new n(r,e)),Object.defineProperty(t,r,{get:a.oneOfGetter(e),set:a.oneOfSetter(e)})}}},{16:16,24:24,37:37}],26:[function(e,r){function n(e,r,A){function S(e,t,r){var i=n.filename;return r||(n.filename=null),Error("illegal "+(t||"token")+" '"+e+"' ("+(i?i+", ":"")+"line "+Y.line+")")}function T(){var e,t=[];do{if('"'!==(e=ee())&&"'"!==e)throw S(e);t.push(ee()),ne(e),e=re()}while('"'===e||"'"===e);return t.join("")}function E(e){var t=ee();switch(t){case"'":case'"':return te(t),T();case"true":case"TRUE":return!0;case"false":case"FALSE":return!1}try{return R(t,!0)}catch(r){if(e&&j.test(t))return t;throw S(t,"value")}}function N(e,t){var r,n;do{!t||'"'!==(r=re())&&"'"!==r?e.push([n=I(ee()),ne("to",!0)?I(ee()):n]):e.push(T())}while(ne(",",!0));ne(";")}function R(e,t){var r=1;switch("-"===e.charAt(0)&&(r=-1,e=e.substring(1)),e){case"inf":case"INF":case"Inf":return r*(1/0);case"nan":case"NAN":case"Nan":case"NaN":return NaN;case"0":return 0}if(y.test(e))return r*parseInt(e,10);if(m.test(e))return r*parseInt(e,16);if(b.test(e))return r*parseInt(e,8);if(O.test(e))return r*parseFloat(e);throw S(e,"number",t)}function I(e,t){switch(e){case"max":case"MAX":case"Max":return 536870911;case"0":return 0}if(!t&&"-"===e.charAt(0))throw S(e,"id");if(v.test(e))return parseInt(e,10);if(g.test(e))return parseInt(e,16);if(w.test(e))return parseInt(e,8);throw S(e,"id")}function F(e,t){switch(t){case"option":return z(e,t),ne(";"),!0;case"message":return B(e,t),!0;case"enum":return V(e,t),!0;case"service":return _(e,t),!0;case"extend":return Z(e,t),!0}return!1}function L(e,t,r){var i=Y.line;if(e&&(e.comment=ie(),e.filename=n.filename),ne("{",!0)){for(var o;"}"!==(o=ee());)t(o);ne(";",!0)}else r&&r(),ne(";"),e&&"string"!=typeof e.comment&&(e.comment=ie(i))}function B(e,t){if(!k.test(t=ee()))throw S(t,"type name");var r=new s(t);L(r,function(e){if(!F(r,e))switch(e){case"map":D(r);break;case"required":case"optional":case"repeated":J(r,e);break;case"oneof":P(r,e);break;case"extensions":N(r.extensions||(r.extensions=[]));break;case"reserved":N(r.reserved||(r.reserved=[]),!0);break;default:if(!se||!j.test(e))throw S(e);te(e),J(r,"optional")}}),e.add(r)}function J(e,r,n){var i=ee();if("group"===i)return void $(e,r);if(!j.test(i))throw S(i,"type");var o=ee();if(!k.test(o))throw S(o,"name");o=ue(o),ne("=");var s=new a(o,I(ee()),i,r,n);L(s,function(e){if("option"!==e)throw S(e);z(s,e),ne(";")},function(){U(s)}),e.add(s),se||!s.repeated||h.packed[i]===t&&h.basic[i]!==t||s.setOption("packed",!1,!0)}function $(e,t){var r=ee();if(!k.test(r))throw S(r,"name");var i=d.lcFirst(r);r===i&&(r=d.ucFirst(r)),ne("=");var o=I(ee()),u=new s(r);u.group=!0;var f=new a(i,o,r,t);f.filename=n.filename,L(u,function(e){switch(e){case"option":z(u,e),ne(";");break;case"required":case"optional":case"repeated":J(u,e);break;default:throw S(e)}}),e.add(u).add(f)}function D(e){ne("<");var r=ee();if(h.mapKey[r]===t)throw S(r,"type");ne(",");var n=ee();if(!j.test(n))throw S(n,"type");ne(">");var i=ee();if(!k.test(i))throw S(i,"name");ne("=");var o=new u(ue(i),I(ee()),r,n);L(o,function(e){if("option"!==e)throw S(e);z(o,e),ne(";")},function(){U(o)}),e.add(o)}function P(e,t){if(!k.test(t=ee()))throw S(t,"name");var r=new f(ue(t));L(r,function(e){"option"===e?(z(r,e),ne(";")):(te(e),J(r,"optional"))}),e.add(r)}function V(e,t){if(!k.test(t=ee()))throw S(t,"name");var r=new l(t);L(r,function(e){switch(e){case"option":z(r,e),ne(";");break;case"reserved":N(r.reserved||(r.reserved=[]),!0);break;default:q(r,e)}}),e.add(r)}function q(e,t){if(!k.test(t))throw S(t,"name");ne("=");var r=I(ee(),!0),n={};L(n,function(e){if("option"!==e)throw S(e);z(n,e),ne(";")},function(){U(n)}),e.add(t,r,n.comment)}function z(e,t){var r=ne("(",!0);if(!j.test(t=ee()))throw S(t,"name");var n=t;r&&(ne(")"),n="("+n+")",t=re(),x.test(t)&&(n+=t,ee())),ne("="),C(e,n)}function C(e,t){if(ne("{",!0))do{if(!k.test(Q=ee()))throw S(Q,"name");"{"===re()?C(e,t+"."+Q):(ne(":"),"{"===re()?C(e,t+"."+Q):M(e,t+"."+Q,E(!0)))}while(!ne("}",!0));else M(e,t,E(!0))}function M(e,t,r){e.setOption&&e.setOption(t,r)}function U(e){if(ne("[",!0)){do{z(e,"option")}while(ne(",",!0));ne("]")}return e}function _(e,t){if(!k.test(t=ee()))throw S(t,"service name");var r=new p(t);L(r,function(e){if(!F(r,e)){if("rpc"!==e)throw S(e);H(r,e)}}),e.add(r)}function H(e,t){var r=t;if(!k.test(t=ee()))throw S(t,"name");var n,i,o,s,a=t;if(ne("("),ne("stream",!0)&&(i=!0),!j.test(t=ee()))throw S(t);if(n=t,ne(")"),ne("returns"),ne("("),ne("stream",!0)&&(s=!0),!j.test(t=ee()))throw S(t);o=t,ne(")");var u=new c(a,r,n,o,i,s);L(u,function(e){if("option"!==e)throw S(e);z(u,e),ne(";")}),e.add(u)}function Z(e,t){if(!j.test(t=ee()))throw S(t,"reference");var r=t;L(null,function(t){switch(t){case"required":case"repeated":case"optional":J(e,t,r);break;default:if(!se||!j.test(t))throw S(t);te(t),J(e,"optional",r)}})}r instanceof o||(A=r,r=new o),A||(A=n.defaults);for(var W,K,G,X,Q,Y=i(e),ee=Y.next,te=Y.push,re=Y.peek,ne=Y.skip,ie=Y.cmnt,oe=!0,se=!1,ae=r,ue=A.keepCase?function(e){return e}:d.camelCase;null!==(Q=ee());)switch(Q){case"package":if(!oe)throw S(Q);!function(){if(W!==t)throw S("package");if(W=ee(),!j.test(W))throw S(W,"name");ae=ae.define(W),ne(";")}();break;case"import":if(!oe)throw S(Q);!function(){var e,t=re();switch(t){case"weak":e=G||(G=[]),ee();break;case"public":ee();default:e=K||(K=[])}t=T(),ne(";"),e.push(t)}();break;case"syntax":if(!oe)throw S(Q);!function(){if(ne("="),X=T(),!(se="proto3"===X)&&"proto2"!==X)throw S(X,"syntax");ne(";")}();break;case"option":if(!oe)throw S(Q);z(ae,Q),ne(";");break;default:if(F(ae,Q)){oe=!1;continue}throw S(Q)}return n.filename=null,{package:W,imports:K,weakImports:G,syntax:X,root:r}}r.exports=n,n.filename=null,n.defaults={keepCase:!1};var i=e(34),o=e(29),s=e(35),a=e(16),u=e(20),f=e(25),l=e(15),p=e(33),c=e(22),h=e(36),d=e(37),y=/^[1-9][0-9]*$/,v=/^-?[1-9][0-9]*$/,m=/^0[x][0-9a-fA-F]+$/,g=/^-?0[x][0-9a-fA-F]+$/,b=/^0[0-7]+$/,w=/^-?0[0-7]+$/,O=/^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,k=/^[a-zA-Z_][a-zA-Z_0-9]*$/,j=/^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,x=/^(?:\.[a-zA-Z][a-zA-Z_0-9]*)+$/},{15:15,16:16,20:20,22:22,25:25,29:29,33:33,34:34,35:35,36:36,37:37}],27:[function(e,t){function r(e,t){return RangeError("index out of range: "+e.pos+" + "+(t||1)+" > "+e.len)}function n(e){this.buf=e,this.pos=0,this.len=e.length}function i(){var e=new f(0,0),t=0;if(!(this.len-this.pos>4)){for(;t<3;++t){if(this.pos>=this.len)throw r(this);if(e.lo=(e.lo|(127&this.buf[this.pos])<<7*t)>>>0,this.buf[this.pos++]<128)return e}return e.lo=(e.lo|(127&this.buf[this.pos++])<<7*t)>>>0,e}for(;t<4;++t)if(e.lo=(e.lo|(127&this.buf[this.pos])<<7*t)>>>0,this.buf[this.pos++]<128)return e;if(e.lo=(e.lo|(127&this.buf[this.pos])<<28)>>>0,e.hi=(e.hi|(127&this.buf[this.pos])>>4)>>>0,this.buf[this.pos++]<128)return e;if(t=0,this.len-this.pos>4){for(;t<5;++t)if(e.hi=(e.hi|(127&this.buf[this.pos])<<7*t+3)>>>0,this.buf[this.pos++]<128)return e}else for(;t<5;++t){if(this.pos>=this.len)throw r(this);if(e.hi=(e.hi|(127&this.buf[this.pos])<<7*t+3)>>>0,this.buf[this.pos++]<128)return e}throw Error("invalid varint encoding")}function o(e,t){return(e[t-4]|e[t-3]<<8|e[t-2]<<16|e[t-1]<<24)>>>0}function s(){if(this.pos+8>this.len)throw r(this,8);return new f(o(this.buf,this.pos+=4),o(this.buf,this.pos+=4))}t.exports=n;var a,u=e(39),f=u.LongBits,l=u.utf8,p="undefined"!=typeof Uint8Array?function(e){if(e instanceof Uint8Array||Array.isArray(e))return new n(e);throw Error("illegal buffer")}:function(e){if(Array.isArray(e))return new n(e);throw Error("illegal buffer")};n.create=u.Buffer?function(e){return(n.create=function(e){return u.Buffer.isBuffer(e)?new a(e):p(e)})(e)}:p,n.prototype.i=u.Array.prototype.subarray||u.Array.prototype.slice,n.prototype.uint32=function(){var e=4294967295;return function(){if(e=(127&this.buf[this.pos])>>>0,this.buf[this.pos++]<128)return e;if(e=(e|(127&this.buf[this.pos])<<7)>>>0,this.buf[this.pos++]<128)return e;if(e=(e|(127&this.buf[this.pos])<<14)>>>0,this.buf[this.pos++]<128)return e;if(e=(e|(127&this.buf[this.pos])<<21)>>>0,this.buf[this.pos++]<128)return e;if(e=(e|(15&this.buf[this.pos])<<28)>>>0,this.buf[this.pos++]<128)return e;if((this.pos+=5)>this.len)throw this.pos=this.len,r(this,10);return e}}(),n.prototype.int32=function(){return 0|this.uint32()},n.prototype.sint32=function(){var e=this.uint32();return e>>>1^-(1&e)|0},n.prototype.bool=function(){return 0!==this.uint32()},n.prototype.fixed32=function(){if(this.pos+4>this.len)throw r(this,4);return o(this.buf,this.pos+=4)},n.prototype.sfixed32=function(){if(this.pos+4>this.len)throw r(this,4);return 0|o(this.buf,this.pos+=4)},n.prototype.float=function(){if(this.pos+4>this.len)throw r(this,4);var e=u.float.readFloatLE(this.buf,this.pos);return this.pos+=4,e},n.prototype.double=function(){if(this.pos+8>this.len)throw r(this,4);var e=u.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,e},n.prototype.bytes=function(){var e=this.uint32(),t=this.pos,n=this.pos+e;if(n>this.len)throw r(this,e);return this.pos+=e,Array.isArray(this.buf)?this.buf.slice(t,n):t===n?new this.buf.constructor(0):this.i.call(this.buf,t,n)},n.prototype.string=function(){var e=this.bytes();return l.read(e,0,e.length)},n.prototype.skip=function(e){if("number"==typeof e){if(this.pos+e>this.len)throw r(this,e);this.pos+=e}else do{if(this.pos>=this.len)throw r(this)}while(128&this.buf[this.pos++]);return this},n.prototype.skipType=function(e){switch(e){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;;){if(4==(e=7&this.uint32()))break;this.skipType(e)}break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+e+" at offset "+this.pos)}return this},n.e=function(e){a=e;var t=u.Long?"toLong":"toNumber";u.merge(n.prototype,{int64:function(){return i.call(this)[t](!1)},uint64:function(){return i.call(this)[t](!0)},sint64:function(){return i.call(this).zzDecode()[t](!1)},fixed64:function(){return s.call(this)[t](!0)},sfixed64:function(){return s.call(this)[t](!1)}})}},{39:39}],28:[function(e,t){function r(e){n.call(this,e)}t.exports=r;var n=e(27);(r.prototype=Object.create(n.prototype)).constructor=r;var i=e(39);i.Buffer&&(r.prototype.i=i.Buffer.prototype.slice),r.prototype.string=function(){var e=this.uint32();return this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+e,this.len))}},{27:27,39:39}],29:[function(e,r){function n(e){s.call(this,"",e),this.deferred=[],this.files=[]}function i(){}function o(e,r){var n=r.parent.lookup(r.extend);if(n){var i=new l(r.fullName,r.id,r.type,r.rule,t,r.options);return i.declaringField=r,r.extensionField=i,n.add(i),!0}return!1}r.exports=n;var s=e(23);((n.prototype=Object.create(s.prototype)).constructor=n).className="Root";var a,u,f,l=e(16),p=e(15),c=e(25),h=e(37);n.fromJSON=function(e,t){return t||(t=new n),e.options&&t.setOptions(e.options),t.addJSON(e.nested)},n.prototype.resolvePath=h.path.resolve,n.prototype.load=function e(r,n,o){function s(e,t){if(o){var r=o;if(o=null,c)throw e;r(e,t)}}function a(e,t){try{if(h.isString(t)&&"{"===t.charAt(0)&&(t=JSON.parse(t)),h.isString(t)){u.filename=e;var r,i=u(t,p,n),o=0;if(i.imports)for(;o<i.imports.length;++o)(r=p.resolvePath(e,i.imports[o]))&&l(r);if(i.weakImports)for(o=0;o<i.weakImports.length;++o)(r=p.resolvePath(e,i.weakImports[o]))&&l(r,!0)}else p.setOptions(t.options).addJSON(t.nested)}catch(e){s(e)}c||d||s(null,p)}function l(e,t){var r=e.lastIndexOf("google/protobuf/");if(r>-1){var n=e.substring(r);n in f&&(e=n)}if(!(p.files.indexOf(e)>-1)){if(p.files.push(e),e in f)return void(c?a(e,f[e]):(++d,setTimeout(function(){--d,a(e,f[e])})));if(c){var i;try{i=h.fs.readFileSync(e).toString("utf8")}catch(e){return void(t||s(e))}a(e,i)}else++d,h.fetch(e,function(r,n){if(--d,o)return r?void(t?d||s(null,p):s(r)):void a(e,n)})}}"function"==typeof n&&(o=n,n=t);var p=this;if(!o)return h.asPromise(e,p,r,n);var c=o===i,d=0;h.isString(r)&&(r=[r]);for(var y,v=0;v<r.length;++v)(y=p.resolvePath("",r[v]))&&l(y);return c?p:(d||s(null,p),t)},n.prototype.loadSync=function(e,t){if(!h.isNode)throw Error("not supported");return this.load(e,t,i)},n.prototype.resolveAll=function(){if(this.deferred.length)throw Error("unresolvable extensions: "+this.deferred.map(function(e){return"'extend "+e.extend+"' in "+e.parent.fullName}).join(", "));return s.prototype.resolveAll.call(this)};var d=/^[A-Z]/;n.prototype.g=function(e){if(e instanceof l)e.extend===t||e.extensionField||o(this,e)||this.deferred.push(e);else if(e instanceof p)d.test(e.name)&&(e.parent[e.name]=e.values);else if(!(e instanceof c)){if(e instanceof a)for(var r=0;r<this.deferred.length;)o(this,this.deferred[r])?this.deferred.splice(r,1):++r;for(var n=0;n<e.nestedArray.length;++n)this.g(e.f[n]);d.test(e.name)&&(e.parent[e.name]=e)}},n.prototype.h=function(e){if(e instanceof l){if(e.extend!==t)if(e.extensionField)e.extensionField.parent.remove(e.extensionField),e.extensionField=null;else{var r=this.deferred.indexOf(e);r>-1&&this.deferred.splice(r,1)}}else if(e instanceof p)d.test(e.name)&&delete e.parent[e.name];else if(e instanceof s){for(var n=0;n<e.nestedArray.length;++n)this.h(e.f[n]);d.test(e.name)&&delete e.parent[e.name]}},n.e=function(e,t,r){a=e,u=t,f=r}},{15:15,16:16,23:23,25:25,37:37}],30:[function(e,t){t.exports={}},{}],31:[function(e,t,r){r.Service=e(32)},{32:32}],32:[function(e,r){function n(e,t,r){if("function"!=typeof e)throw TypeError("rpcImpl must be a function");i.EventEmitter.call(this),this.rpcImpl=e,this.requestDelimited=!!t,this.responseDelimited=!!r}r.exports=n;var i=e(39);(n.prototype=Object.create(i.EventEmitter.prototype)).constructor=n,n.prototype.rpcCall=function e(r,n,o,s,a){if(!s)throw TypeError("request must be specified");var u=this;if(!a)return i.asPromise(e,u,r,n,o,s);if(!u.rpcImpl)return setTimeout(function(){a(Error("already ended"))},0),t;try{return u.rpcImpl(r,n[u.requestDelimited?"encodeDelimited":"encode"](s).finish(),function(e,n){if(e)return u.emit("error",e,r),a(e);if(null===n)return u.end(!0),t;if(!(n instanceof o))try{n=o[u.responseDelimited?"decodeDelimited":"decode"](n)}catch(e){return u.emit("error",e,r),a(e)}return u.emit("data",n,r),a(null,n)})}catch(e){return u.emit("error",e,r),setTimeout(function(){a(e)},0),t}},n.prototype.end=function(e){return this.rpcImpl&&(e||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this}},{39:39}],33:[function(e,r){function n(e,t){o.call(this,e,t),this.methods={},this.j=null}function i(e){return e.j=null,e}r.exports=n;var o=e(23);((n.prototype=Object.create(o.prototype)).constructor=n).className="Service";var s=e(22),a=e(37),u=e(31);n.fromJSON=function(e,t){var r=new n(e,t.options);if(t.methods)for(var i=Object.keys(t.methods),o=0;o<i.length;++o)r.add(s.fromJSON(i[o],t.methods[i[o]]));return t.nested&&r.addJSON(t.nested),r},n.prototype.toJSON=function(){var e=o.prototype.toJSON.call(this);return a.toObject(["options",e&&e.options||t,"methods",o.arrayToJSON(this.methodsArray)||{},"nested",e&&e.nested||t])},Object.defineProperty(n.prototype,"methodsArray",{get:function(){return this.j||(this.j=a.toArray(this.methods))}}),n.prototype.get=function(e){return this.methods[e]||o.prototype.get.call(this,e)},n.prototype.resolveAll=function(){for(var e=this.methodsArray,t=0;t<e.length;++t)e[t].resolve();return o.prototype.resolve.call(this)},n.prototype.add=function(e){if(this.get(e.name))throw Error("duplicate name '"+e.name+"' in "+this);return e instanceof s?(this.methods[e.name]=e,e.parent=this,i(this)):o.prototype.add.call(this,e)},n.prototype.remove=function(e){if(e instanceof s){if(this.methods[e.name]!==e)throw Error(e+" is not a member of "+this);return delete this.methods[e.name],e.parent=null,i(this)}return o.prototype.remove.call(this,e)},n.prototype.create=function(e,t,r){for(var n,i=new u.Service(e,t,r),o=0;o<this.methodsArray.length;++o){var s=a.lcFirst((n=this.j[o]).resolve().name).replace(/[^$\w_]/g,"");i[s]=a.codegen(["r","c"],a.isReserved(s)?s+"_":s)("return this.rpcCall(m,q,s,r,c)")({m:n,q:n.resolvedRequestType.ctor,s:n.resolvedResponseType.ctor})}return i}},{22:22,23:23,31:31,37:37}],34:[function(e,r){function n(e){return e.replace(p,function(e,t){switch(t){case"\\":case"":return t;default:return c[t]||""}})}function i(e){function r(e){return Error("illegal "+e+" (line "+w+")")}function i(){var t="'"===S?a:s;t.lastIndex=g-1;var i=t.exec(e);if(!i)throw r("string");return g=t.lastIndex,d(S),S=null,n(i[1])}function p(t){return e.charAt(t)}function c(t,r){O=e.charAt(t++),j=w,x=!1;var n,i=t-3;do{if(--i<0||"\n"===(n=e.charAt(i))){x=!0;break}}while(" "===n||"\t"===n);for(var o=e.substring(t,r).split(f),s=0;s<o.length;++s)o[s]=o[s].replace(u,"").trim();k=o.join("\n").trim()}function h(){if(A.length>0)return A.shift();if(S)return i();var t,n,s,a,u;do{if(g===b)return null;for(t=!1;l.test(s=p(g));)if("\n"===s&&++w,++g===b)return null;if("/"===p(g)){if(++g===b)throw r("comment");if("/"===p(g)){for(u="/"===p(a=g+1);"\n"!==p(++g);)if(g===b)return null;++g,u&&c(a,g-1),++w,t=!0}else{if("*"!==(s=p(g)))return"/";u="*"===p(a=g+1);do{if("\n"===s&&++w,++g===b)throw r("comment");n=s,s=p(g)}while("*"!==n||"/"!==s);++g,u&&c(a,g-2),t=!0}}}while(t);var f=g;if(o.lastIndex=0,!o.test(p(f++)))for(;f<b&&!o.test(p(f));)++f;var h=e.substring(g,g=f);return'"'!==h&&"'"!==h||(S=h),h}function d(e){A.push(e)}function y(){if(!A.length){var e=h();if(null===e)return null;d(e)}return A[0]}function v(e,t){var n=y();if(n===e)return h(),!0;if(!t)throw r("token '"+n+"', '"+e+"' expected");return!1}function m(e){var r=null;return e===t?j!==w-1||"*"!==O&&!x||(r=k):(j<e&&y(),j!==e||x||"/"!==O||(r=k)),r}e=""+e;var g=0,b=e.length,w=1,O=null,k=null,j=0,x=!1,A=[],S=null;return Object.defineProperty({next:h,peek:y,push:d,skip:v,cmnt:m},"line",{get:function(){return w}})}r.exports=i;var o=/[\s{}=;:[\],'"()<>]/g,s=/(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g,a=/(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g,u=/^ *[*\/]+ */,f=/\n/g,l=/\s/,p=/\\(.?)/g,c={0:"\0",r:"\r",n:"\n",t:"\t"};i.unescape=n},{}],35:[function(e,r){function n(e,r){o.call(this,e,r),this.fields={},this.oneofs=t,this.extensions=t,this.reserved=t,this.group=t,this.k=null,this.b=null,this.l=null,this.o=null}function i(e){return e.k=e.b=e.l=null,delete e.encode,delete e.decode,delete e.verify,e}r.exports=n;var o=e(23);((n.prototype=Object.create(o.prototype)).constructor=n).className="Type";var s=e(15),a=e(25),u=e(16),f=e(20),l=e(33),p=e(21),c=e(27),h=e(42),d=e(37),y=e(14),v=e(13),m=e(40),g=e(12),b=e(41);Object.defineProperties(n.prototype,{fieldsById:{get:function(){if(this.k)return this.k;this.k={};for(var e=Object.keys(this.fields),t=0;t<e.length;++t){var r=this.fields[e[t]],n=r.id;if(this.k[n])throw Error("duplicate id "+n+" in "+this);this.k[n]=r}return this.k}},fieldsArray:{get:function(){return this.b||(this.b=d.toArray(this.fields))}},oneofsArray:{get:function(){return this.l||(this.l=d.toArray(this.oneofs))}},ctor:{get:function(){return this.o||(this.ctor=n.generateConstructor(this)())},set:function(e){var t=e.prototype;t instanceof p||((e.prototype=new p).constructor=e,d.merge(e.prototype,t)),e.$type=e.prototype.$type=this,d.merge(e,p,!0),this.o=e;for(var r=0;r<this.fieldsArray.length;++r)this.b[r].resolve();var n={};for(r=0;r<this.oneofsArray.length;++r)n[this.l[r].resolve().name]={get:d.oneOfGetter(this.l[r].oneof),set:d.oneOfSetter(this.l[r].oneof)};r&&Object.defineProperties(e.prototype,n)}}}),n.generateConstructor=function(e){for(var t,r=d.codegen(["p"],e.name),n=0;n<e.fieldsArray.length;++n)(t=e.b[n]).map?r("this%s={}",d.safeProp(t.name)):t.repeated&&r("this%s=[]",d.safeProp(t.name));return r("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)")("this[ks[i]]=p[ks[i]]")},n.fromJSON=function(e,r){var i=new n(e,r.options);i.extensions=r.extensions,i.reserved=r.reserved;for(var p=Object.keys(r.fields),c=0;c<p.length;++c)i.add((t!==r.fields[p[c]].keyType?f.fromJSON:u.fromJSON)(p[c],r.fields[p[c]]));if(r.oneofs)for(p=Object.keys(r.oneofs),c=0;c<p.length;++c)i.add(a.fromJSON(p[c],r.oneofs[p[c]]));if(r.nested)for(p=Object.keys(r.nested),c=0;c<p.length;++c){var h=r.nested[p[c]];i.add((h.id!==t?u.fromJSON:h.fields!==t?n.fromJSON:h.values!==t?s.fromJSON:h.methods!==t?l.fromJSON:o.fromJSON)(p[c],h))}return r.extensions&&r.extensions.length&&(i.extensions=r.extensions),r.reserved&&r.reserved.length&&(i.reserved=r.reserved),r.group&&(i.group=!0),i},n.prototype.toJSON=function(){var e=o.prototype.toJSON.call(this);return d.toObject(["options",e&&e.options||t,"oneofs",o.arrayToJSON(this.oneofsArray),"fields",o.arrayToJSON(this.fieldsArray.filter(function(e){return!e.declaringField}))||{},"extensions",this.extensions&&this.extensions.length?this.extensions:t,"reserved",this.reserved&&this.reserved.length?this.reserved:t,"group",this.group||t,"nested",e&&e.nested||t])},n.prototype.resolveAll=function(){for(var e=this.fieldsArray,t=0;t<e.length;)e[t++].resolve();var r=this.oneofsArray;for(t=0;t<r.length;)r[t++].resolve();return o.prototype.resolveAll.call(this)},n.prototype.get=function(e){return this.fields[e]||this.oneofs&&this.oneofs[e]||this.nested&&this.nested[e]||null},n.prototype.add=function(e){if(this.get(e.name))throw Error("duplicate name '"+e.name+"' in "+this);if(e instanceof u&&e.extend===t){if(this.k?this.k[e.id]:this.fieldsById[e.id])throw Error("duplicate id "+e.id+" in "+this);if(this.isReservedId(e.id))throw Error("id "+e.id+" is reserved in "+this);if(this.isReservedName(e.name))throw Error("name '"+e.name+"' is reserved in "+this);return e.parent&&e.parent.remove(e),this.fields[e.name]=e,e.message=this,e.onAdd(this),i(this)}return e instanceof a?(this.oneofs||(this.oneofs={}),this.oneofs[e.name]=e,e.onAdd(this),i(this)):o.prototype.add.call(this,e)},n.prototype.remove=function(e){if(e instanceof u&&e.extend===t){if(!this.fields||this.fields[e.name]!==e)throw Error(e+" is not a member of "+this);return delete this.fields[e.name],e.parent=null,e.onRemove(this),i(this)}if(e instanceof a){if(!this.oneofs||this.oneofs[e.name]!==e)throw Error(e+" is not a member of "+this);return delete this.oneofs[e.name],e.parent=null,e.onRemove(this),i(this)}return o.prototype.remove.call(this,e)},n.prototype.isReservedId=function(e){return o.isReservedId(this.reserved,e)},n.prototype.isReservedName=function(e){return o.isReservedName(this.reserved,e)},n.prototype.create=function(e){return new this.ctor(e)},n.prototype.setup=function(){for(var e=this.fullName,t=[],r=0;r<this.fieldsArray.length;++r)t.push(this.b[r].resolve().resolvedType);this.encode=y(this)({Writer:h,types:t,util:d}),this.decode=v(this)({Reader:c,types:t,util:d}),this.verify=m(this)({types:t,util:d}),this.fromObject=g.fromObject(this)({types:t,util:d}),this.toObject=g.toObject(this)({types:t,util:d});var n=b[e];if(n){var i=Object.create(this);i.fromObject=this.fromObject,this.fromObject=n.fromObject.bind(i),i.toObject=this.toObject,this.toObject=n.toObject.bind(i)}return this},n.prototype.encode=function(e,t){return this.setup().encode(e,t)},n.prototype.encodeDelimited=function(e,t){return this.encode(e,t&&t.len?t.fork():t).ldelim()},n.prototype.decode=function(e,t){return this.setup().decode(e,t)},n.prototype.decodeDelimited=function(e){return e instanceof c||(e=c.create(e)),this.decode(e,e.uint32())},n.prototype.verify=function(e){return this.setup().verify(e)},n.prototype.fromObject=function(e){return this.setup().fromObject(e)},n.prototype.toObject=function(e,t){return this.setup().toObject(e,t)},n.d=function(e){return function(t){d.decorateType(t,e)}}},{12:12,13:13,14:14,15:15,16:16,20:20,21:21,23:23,25:25,27:27,33:33,37:37,40:40,41:41,42:42}],36:[function(e,t,r){function n(e,t){var r=0,n={};for(t|=0;r<e.length;)n[s[r+t]]=e[r++];return n}var i=r,o=e(37),s=["double","float","int32","uint32","sint32","fixed32","sfixed32","int64","uint64","sint64","fixed64","sfixed64","bool","string","bytes"];i.basic=n([1,5,0,0,0,5,5,0,0,0,1,1,0,2,2]),i.defaults=n([0,0,0,0,0,0,0,0,0,0,0,0,!1,"",o.emptyArray,null]),i.long=n([0,0,0,1,1],7),i.mapKey=n([0,0,0,5,5,0,0,0,1,1,0,2],2),i.packed=n([1,5,0,0,0,5,5,0,0,0,1,1,0])},{37:37}],37:[function(e,r){var n,i,o=r.exports=e(39),s=e(30);o.codegen=e(3),o.fetch=e(5),o.path=e(8),o.fs=o.inquire("fs"),o.toArray=function(e){if(e){for(var t=Object.keys(e),r=Array(t.length),n=0;n<t.length;)r[n]=e[t[n++]];return r}return[]},o.toObject=function(e){for(var r={},n=0;n<e.length;){var i=e[n++],o=e[n++];o!==t&&(r[i]=o)}return r};var a=/\\/g,u=/"/g;o.isReserved=function(e){return/^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(e)},o.safeProp=function(e){return!/^[$\w_]+$/.test(e)||o.isReserved(e)?'["'+e.replace(a,"\\\\").replace(u,'\\"')+'"]':"."+e},o.ucFirst=function(e){return e.charAt(0).toUpperCase()+e.substring(1)};var f=/_([a-z])/g;o.camelCase=function(e){return e.substring(0,1)+e.substring(1).replace(f,function(e,t){return t.toUpperCase()})},o.compareFieldsById=function(e,t){return e.id-t.id},o.decorateType=function(t,r){if(t.$type)return r&&t.$type.name!==r&&(o.decorateRoot.remove(t.$type),t.$type.name=r,o.decorateRoot.add(t.$type)),t.$type;n||(n=e(35));var i=new n(r||t.name);return o.decorateRoot.add(i),i.ctor=t,Object.defineProperty(t,"$type",{value:i,enumerable:!1}),Object.defineProperty(t.prototype,"$type",{value:i,enumerable:!1}),i};var l=0;o.decorateEnum=function(t){if(t.$type)return t.$type;i||(i=e(15));var r=new i("Enum"+l++,t);return o.decorateRoot.add(r),Object.defineProperty(t,"$type",{value:r,enumerable:!1}),r},Object.defineProperty(o,"decorateRoot",{get:function(){return s.decorated||(s.decorated=new(e(29)))}})},{15:15,29:29,3:3,30:30,35:35,39:39,5:5,8:8}],38:[function(e,t){function r(e,t){this.lo=e>>>0,this.hi=t>>>0}t.exports=r;var n=e(39),i=r.zero=new r(0,0);i.toNumber=function(){return 0},i.zzEncode=i.zzDecode=function(){return this},i.length=function(){return 1};var o=r.zeroHash="\0\0\0\0\0\0\0\0";r.fromNumber=function(e){if(0===e)return i;var t=e<0;t&&(e=-e);var n=e>>>0,o=(e-n)/4294967296>>>0;return t&&(o=~o>>>0,n=~n>>>0,++n>4294967295&&(n=0,++o>4294967295&&(o=0))),new r(n,o)},r.from=function(e){if("number"==typeof e)return r.fromNumber(e);if(n.isString(e)){if(!n.Long)return r.fromNumber(parseInt(e,10));e=n.Long.fromString(e)}return e.low||e.high?new r(e.low>>>0,e.high>>>0):i},r.prototype.toNumber=function(e){if(!e&&this.hi>>>31){var t=1+~this.lo>>>0,r=~this.hi>>>0;return t||(r=r+1>>>0),-(t+4294967296*r)}return this.lo+4294967296*this.hi},r.prototype.toLong=function(e){return n.Long?new n.Long(0|this.lo,0|this.hi,!!e):{low:0|this.lo,high:0|this.hi,unsigned:!!e}};var s=String.prototype.charCodeAt;r.fromHash=function(e){return e===o?i:new r((s.call(e,0)|s.call(e,1)<<8|s.call(e,2)<<16|s.call(e,3)<<24)>>>0,(s.call(e,4)|s.call(e,5)<<8|s.call(e,6)<<16|s.call(e,7)<<24)>>>0)},r.prototype.toHash=function(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)},r.prototype.zzEncode=function(){var e=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^e)>>>0,this.lo=(this.lo<<1^e)>>>0,this},r.prototype.zzDecode=function(){var e=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^e)>>>0,this.hi=(this.hi>>>1^e)>>>0,this},r.prototype.length=function(){var e=this.lo,t=(this.lo>>>28|this.hi<<4)>>>0,r=this.hi>>>24;return 0===r?0===t?e<16384?e<128?1:2:e<2097152?3:4:t<16384?t<128?5:6:t<2097152?7:8:r<128?9:10}},{39:39}],39:[function(r,n,i){function o(e,r,n){for(var i=Object.keys(r),o=0;o<i.length;++o)e[i[o]]!==t&&n||(e[i[o]]=r[i[o]]);return e}function s(e){function t(e,r){if(!(this instanceof t))return new t(e,r);Object.defineProperty(this,"message",{get:function(){return e}}),Error.captureStackTrace?Error.captureStackTrace(this,t):Object.defineProperty(this,"stack",{value:Error().stack||""}),r&&o(this,r)}return(t.prototype=Object.create(Error.prototype)).constructor=t,Object.defineProperty(t.prototype,"name",{get:function(){return e}}),t.prototype.toString=function(){return this.name+": "+this.message},t}var a=i;a.asPromise=r(1),a.base64=r(2),a.EventEmitter=r(4),a.float=r(6),a.inquire=r(7),a.utf8=r(10),a.pool=r(9),a.LongBits=r(38),a.emptyArray=Object.freeze?Object.freeze([]):[],a.emptyObject=Object.freeze?Object.freeze({}):{},a.isNode=!!(e.process&&e.process.versions&&e.process.versions.node),a.isInteger=Number.isInteger||function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e},a.isString=function(e){return"string"==typeof e||e instanceof String},a.isObject=function(e){return e&&"object"==typeof e},a.isset=a.isSet=function(e,t){var r=e[t];return!(null==r||!e.hasOwnProperty(t))&&("object"!=typeof r||(Array.isArray(r)?r.length:Object.keys(r).length)>0)},a.Buffer=function(){try{var e=a.inquire("buffer").Buffer;return e.prototype.utf8Write?e:null}catch(e){return null}}(),a.p=null,a.u=null,a.newBuffer=function(e){return"number"==typeof e?a.Buffer?a.u(e):new a.Array(e):a.Buffer?a.p(e):"undefined"==typeof Uint8Array?e:new Uint8Array(e)},a.Array="undefined"!=typeof Uint8Array?Uint8Array:Array,a.Long=e.dcodeIO&&e.dcodeIO.Long||a.inquire("long"),a.key2Re=/^true|false|0|1$/,a.key32Re=/^-?(?:0|[1-9][0-9]*)$/,a.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,a.longToHash=function(e){return e?a.LongBits.from(e).toHash():a.LongBits.zeroHash},a.longFromHash=function(e,t){var r=a.LongBits.fromHash(e);return a.Long?a.Long.fromBits(r.lo,r.hi,t):r.toNumber(!!t)},a.merge=o,a.lcFirst=function(e){return e.charAt(0).toLowerCase()+e.substring(1)},a.newError=s,a.ProtocolError=s("ProtocolError"),a.oneOfGetter=function(e){for(var r={},n=0;n<e.length;++n)r[e[n]]=1;return function(){for(var e=Object.keys(this),n=e.length-1;n>-1;--n)if(1===r[e[n]]&&this[e[n]]!==t&&null!==this[e[n]])return e[n]}},a.oneOfSetter=function(e){return function(t){for(var r=0;r<e.length;++r)e[r]!==t&&delete this[e[r]]}},a.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},a.e=function(){var e=a.Buffer;if(!e)return void(a.p=a.u=null);a.p=e.from!==Uint8Array.from&&e.from||function(t,r){return new e(t,r)},a.u=e.allocUnsafe||function(t){return new e(t)}}},{1:1,10:10,2:2,38:38,4:4,6:6,7:7,9:9}],40:[function(e,t){function r(e,t){return e.name+": "+t+(e.repeated&&"array"!==t?"[]":e.map&&"object"!==t?"{k:"+e.keyType+"}":"")+" expected"}function n(e,t,n,i){if(t.resolvedType)if(t.resolvedType instanceof s){e("switch(%s){",i)("default:")("return%j",r(t,"enum value"));for(var o=Object.keys(t.resolvedType.values),a=0;a<o.length;++a)e("case %i:",t.resolvedType.values[o[a]]);e("break")("}")}else e("{")("var e=types[%i].verify(%s);",n,i)("if(e)")("return%j+e",t.name+".")("}");else switch(t.type){case"int32":case"uint32":case"sint32":case"fixed32":case"sfixed32":e("if(!util.isInteger(%s))",i)("return%j",r(t,"integer"));break;case"int64":case"uint64":case"sint64":case"fixed64":case"sfixed64":e("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))",i,i,i,i)("return%j",r(t,"integer|Long"));break;case"float":case"double":e('if(typeof %s!=="number")',i)("return%j",r(t,"number"));break;case"bool":e('if(typeof %s!=="boolean")',i)("return%j",r(t,"boolean"));break;case"string":e("if(!util.isString(%s))",i)("return%j",r(t,"string"));break;case"bytes":e('if(!(%s&&typeof %s.length==="number"||util.isString(%s)))',i,i,i)("return%j",r(t,"buffer"))}return e}function i(e,t,n){switch(t.keyType){case"int32":case"uint32":case"sint32":case"fixed32":case"sfixed32":e("if(!util.key32Re.test(%s))",n)("return%j",r(t,"integer key"));break;case"int64":case"uint64":case"sint64":case"fixed64":case"sfixed64":e("if(!util.key64Re.test(%s))",n)("return%j",r(t,"integer|Long key"));break;case"bool":e("if(!util.key2Re.test(%s))",n)("return%j",r(t,"boolean key"))}return e}function o(e){var t=a.codegen(["m"],e.name+"$verify")('if(typeof m!=="object"||m===null)')("return%j","object expected"),o=e.oneofsArray,s={};o.length&&t("var p={}");for(var u=0;u<e.fieldsArray.length;++u){var f=e.b[u].resolve(),l="m"+a.safeProp(f.name);if(f.optional&&t("if(%s!=null&&m.hasOwnProperty(%j)){",l,f.name),f.map)t("if(!util.isObject(%s))",l)("return%j",r(f,"object"))("var k=Object.keys(%s)",l)("for(var i=0;i<k.length;++i){"),i(t,f,"k[i]"),n(t,f,u,l+"[k[i]]")("}");else if(f.repeated)t("if(!Array.isArray(%s))",l)("return%j",r(f,"array"))("for(var i=0;i<%s.length;++i){",l),n(t,f,u,l+"[i]")("}");else{if(f.partOf){var p=a.safeProp(f.partOf.name);1===s[f.partOf.name]&&t("if(p%s===1)",p)("return%j",f.partOf.name+": multiple values"),s[f.partOf.name]=1,t("p%s=1",p)}n(t,f,u,l)}f.optional&&t("}")}return t("return null")}t.exports=o;var s=e(15),a=e(37)},{15:15,37:37}],41:[function(e,t,r){var n=r,i=e(21);n[".google.protobuf.Any"]={fromObject:function(e){if(e&&e["@type"]){var t=this.lookup(e["@type"]);if(t){var r="."===e["@type"].charAt(0)?e["@type"].substr(1):e["@type"];return this.create({type_url:"/"+r,value:t.encode(t.fromObject(e)).finish()})}}return this.fromObject(e)},toObject:function(e,t){if(t&&t.json&&e.type_url&&e.value){var r=e.type_url.substring(e.type_url.lastIndexOf("/")+1),n=this.lookup(r);n&&(e=n.decode(e.value))}if(!(e instanceof this.ctor)&&e instanceof i){var o=e.$type.toObject(e,t);return o["@type"]=e.$type.fullName,o}return this.toObject(e,t)}}},{21:21}],42:[function(e,r){function n(e,r,n){this.fn=e,this.len=r,this.next=t,this.val=n}function i(){}function o(e){this.head=e.head,this.tail=e.tail,this.len=e.len,this.next=e.states}function s(){this.len=0,this.head=new n(i,0,0),this.tail=this.head,this.states=null}function a(e,t,r){t[r]=255&e}function u(e,t,r){for(;e>127;)t[r++]=127&e|128,e>>>=7;t[r]=e}function f(e,r){this.len=e,this.next=t,this.val=r}function l(e,t,r){for(;e.hi;)t[r++]=127&e.lo|128,e.lo=(e.lo>>>7|e.hi<<25)>>>0,e.hi>>>=7;for(;e.lo>127;)t[r++]=127&e.lo|128,e.lo=e.lo>>>7;t[r++]=e.lo}function p(e,t,r){t[r]=255&e,t[r+1]=e>>>8&255,t[r+2]=e>>>16&255,t[r+3]=e>>>24}r.exports=s;var c,h=e(39),d=h.LongBits,y=h.base64,v=h.utf8;s.create=h.Buffer?function(){return(s.create=function(){return new c})()}:function(){return new s},s.alloc=function(e){return new h.Array(e)},h.Array!==Array&&(s.alloc=h.pool(s.alloc,h.Array.prototype.subarray)),s.prototype.v=function(e,t,r){return this.tail=this.tail.next=new n(e,t,r),this.len+=t,this},f.prototype=Object.create(n.prototype),f.prototype.fn=u,s.prototype.uint32=function(e){return this.len+=(this.tail=this.tail.next=new f((e>>>=0)<128?1:e<16384?2:e<2097152?3:e<268435456?4:5,e)).len,this},s.prototype.int32=function(e){return e<0?this.v(l,10,d.fromNumber(e)):this.uint32(e)},s.prototype.sint32=function(e){return this.uint32((e<<1^e>>31)>>>0)},s.prototype.uint64=function(e){var t=d.from(e);return this.v(l,t.length(),t)},s.prototype.int64=s.prototype.uint64,s.prototype.sint64=function(e){var t=d.from(e).zzEncode();return this.v(l,t.length(),t)},s.prototype.bool=function(e){return this.v(a,1,e?1:0)},s.prototype.fixed32=function(e){return this.v(p,4,e>>>0)},s.prototype.sfixed32=s.prototype.fixed32,s.prototype.fixed64=function(e){var t=d.from(e);return this.v(p,4,t.lo).v(p,4,t.hi)},s.prototype.sfixed64=s.prototype.fixed64,s.prototype.float=function(e){return this.v(h.float.writeFloatLE,4,e)},s.prototype.double=function(e){return this.v(h.float.writeDoubleLE,8,e)};var m=h.Array.prototype.set?function(e,t,r){t.set(e,r)}:function(e,t,r){for(var n=0;n<e.length;++n)t[r+n]=e[n]};s.prototype.bytes=function(e){var t=e.length>>>0;if(!t)return this.v(a,1,0);if(h.isString(e)){var r=s.alloc(t=y.length(e));y.decode(e,r,0),e=r}return this.uint32(t).v(m,t,e)},s.prototype.string=function(e){var t=v.length(e);return t?this.uint32(t).v(v.write,t,e):this.v(a,1,0)},s.prototype.fork=function(){return this.states=new o(this),this.head=this.tail=new n(i,0,0),this.len=0,this},s.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new n(i,0,0),this.len=0),this},s.prototype.ldelim=function(){var e=this.head,t=this.tail,r=this.len;return this.reset().uint32(r),r&&(this.tail.next=e.next,this.tail=t,this.len+=r),this},s.prototype.finish=function(){for(var e=this.head.next,t=this.constructor.alloc(this.len),r=0;e;)e.fn(e.val,t,r),r+=e.len,e=e.next;return t},s.e=function(e){c=e}},{39:39}],43:[function(e,t){function r(){i.call(this)}function n(e,t,r){e.length<40?o.utf8.write(e,t,r):t.utf8Write(e,r)}t.exports=r;var i=e(42);(r.prototype=Object.create(i.prototype)).constructor=r;var o=e(39),s=o.Buffer;r.alloc=function(e){return(r.alloc=o.u)(e)};var a=s&&s.prototype instanceof Uint8Array&&"set"===s.prototype.set.name?function(e,t,r){t.set(e,r)}:function(e,t,r){if(e.copy)e.copy(t,r,0,e.length);else for(var n=0;n<e.length;)t[r++]=e[n++]};r.prototype.bytes=function(e){o.isString(e)&&(e=o.p(e,"base64"));var t=e.length>>>0;return this.uint32(t),t&&this.v(a,t,e),this},r.prototype.string=function(e){var t=s.byteLength(e);return this.uint32(t),t&&this.v(n,t,e),this}},{39:39,42:42}]},{},[19])}("object"==typeof window&&window||"object"==typeof self&&self||this);
//# sourceMappingURL=protobuf.min.js.map

/*
* @author seacole
* 微信web;
*/
var WxWeb = /** @class */ (function () {
    function WxWeb() {
        this.BMap = Laya.Browser.window.BMap;
        this.wx = Laya.Browser.window.wx;
        this._records = [];
        this._lastRecords = [];
    }
    Object.defineProperty(WxWeb, "instance", {
        get: function () {
            if (this._instance == undefined) {
                this._instance = new WxWeb();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    WxWeb.prototype.wxConfig = function (response) {
        if (!Native.instance.isNative) {
            log("开始微信签名");
            this.wx.config({
                debug: false,
                appId: response.appId,
                timestamp: response.timestamp,
                nonceStr: response.nonceStr,
                signature: response.signature,
                jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage', 'startRecord', 'stopRecord', 'onVoiceRecordEnd', 'playVoice', 'pauseVoice',
                    'stopVoice', 'onVoicePlayEnd', 'uploadVoice', 'downloadVoice', 'getLocation'] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2
            });
            this.wx.ready(function () {
                log("微信签名成功");
                WxWeb.instance.onShare();
                // WxWeb.instance.getLocation();
                // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。
            });
            this.wx.error(function (res) {
                log("微信签名失败");
                // config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。
            });
        }
    };
    WxWeb.prototype.onShare = function () {
        if (!Native.instance.isNative && Native.instance.isWeiXin) {
            var data = Native.instance.getShareInfo(); //{link,desc,title,imgUrl}
            this.wx.onMenuShareTimeline({
                title: data.title,
                link: data.link,
                imgUrl: data.imgUrl,
                success: function () {
                    // 用户确认分享后执行的回调函数
                    HintCtrl.instance.show(GameConfig.language.wx_share_succ);
                },
                cancel: function () {
                    // 用户取消分享后执行的回调函数
                    // callback({code:1});
                },
                fail: function () {
                    HintCtrl.instance.show(GameConfig.language.wx_share_fail);
                },
                trigger: function () {
                },
            });
            this.wx.onMenuShareAppMessage({
                title: data.title,
                desc: data.desc,
                link: data.link,
                imgUrl: data.imgUrl,
                type: '',
                dataUrl: '',
                success: function () {
                    // 用户确认分享后执行的回调函数
                    HintCtrl.instance.show(GameConfig.language.wx_share_succ);
                },
                cancel: function () {
                    // 用户取消分享后执行的回调函数
                    //  callback({code:1});
                },
                fail: function () {
                    HintCtrl.instance.show(GameConfig.language.wx_share_fail);
                },
                trigger: function () {
                }
            });
        }
    };
    WxWeb.prototype.onShareInfo = function (type, pos, title, subTitle, info) {
        if (type === void 0) { type = 1; }
        if (pos === void 0) { pos = 0; }
        if (title === void 0) { title = ""; }
        if (subTitle === void 0) { subTitle = ""; }
        if (!Native.instance.isNative && Native.instance.isWeiXin) {
            var data = Native.instance.getMatchRankInfo(info, type, title, subTitle);
            this.wx.onMenuShareTimeline({
                title: data.title,
                link: data.link,
                imgUrl: data.imgUrl,
                success: function () {
                    // 用户确认分享后执行的回调函数
                    HintCtrl.instance.show(GameConfig.language.wx_share_succ);
                },
                cancel: function () {
                    // 用户取消分享后执行的回调函数
                    // callback({code:1});
                },
                fail: function () {
                    HintCtrl.instance.show(GameConfig.language.wx_share_fail);
                },
                trigger: function () {
                },
            });
            this.wx.onMenuShareAppMessage({
                title: data.title,
                desc: data.desc,
                link: data.link,
                imgUrl: data.imgUrl,
                type: '',
                dataUrl: '',
                success: function () {
                    // 用户确认分享后执行的回调函数
                    HintCtrl.instance.show(GameConfig.language.wx_share_succ);
                },
                cancel: function () {
                    // 用户取消分享后执行的回调函数
                    //  callback({code:1});
                },
                fail: function () {
                    HintCtrl.instance.show(GameConfig.language.wx_share_fail);
                },
                trigger: function () {
                }
            });
        }
    };
    WxWeb.prototype.startRecord = function (callback) {
        this.wx.startRecord({
            success: function () {
                callback();
            }
        });
    };
    WxWeb.prototype.stopRecord = function (needSend, seatid, nickname, time) {
        if (time === void 0) { time = 0; }
        this.wx.stopRecord({
            success: function (res) {
                if (needSend) {
                    WxWeb.instance._records.unshift({ localId: res.localId, seatid: seatid, nickname: nickname, time: time });
                    WxWeb.instance.uploadVoice(res.localId, time); //fuck wx!这玩意一定要写在播放前，不热监听不到播放结束！！！
                    WxWeb.instance.playVoice(); // 返回音频的本地ID
                    // WxWeb.instance.uploadVoice(res.localId);
                }
            }
        });
    };
    WxWeb.prototype.playVoice = function () {
        if (!WxWeb.instance._isRecordPlaying && WxWeb.instance._records.length) {
            if (Native.instance.OS == OSConfig.ANDROID_WEB)
                SoundManager.instance.stopMusic(true);
            WxWeb.instance._isRecordPlaying = true;
            var tmp = WxWeb.instance._records.shift();
            // WxWeb.instance.addToLastRecords(tmp);
            var localId = tmp.localId;
            Dispatcher.dispatch(EventNames.PLAY_RECORD, [tmp.seatid, tmp.nickname]);
            this.wx.playVoice({
                localId: localId // 需要播放的音频的本地ID，由stopRecord接口获得
            });
            // Laya.timer.clear(this, WxWeb.instance.onVoicePlayEnd);
            Laya.timer.once(Number(tmp.time) + 1500, this, WxWeb.instance.onVoicePlayEnd);
        }
    };
    WxWeb.prototype.onVoicePlayEnd = function () {
        // this.wx.onVoicePlayEnd({
        //     complete: function (res) {
        //         log("onVoicePlayEnd");
        //         // var localId = res.localId; // 返回音频的本地ID
        //         WxWeb.instance._isRecordPlaying = false;
        //         Dispatcher.dispatch(EventNames.PLAY_RECORD_END);
        //         WxWeb.instance.playVoice();
        //     }
        // });
        if (Native.instance.OS == OSConfig.ANDROID_WEB)
            SoundManager.instance.playBg(null, true);
        WxWeb.instance._isRecordPlaying = false;
        Dispatcher.dispatch(EventNames.PLAY_RECORD_END);
        WxWeb.instance.playVoice();
    };
    WxWeb.prototype.uploadVoice = function (recordId, time) {
        this.wx.uploadVoice({
            localId: recordId,
            isShowProgressTips: 0,
            success: function (res) {
                var serverId = res.serverId; // 返回音频的服务器端ID
                server.playerChatReq(3, time + ";" + serverId);
            }
        });
    };
    WxWeb.prototype.downloadVoice = function (serverId, seatid, nickname, time) {
        if (seatid === void 0) { seatid = 0; }
        if (nickname === void 0) { nickname = ""; }
        if (time === void 0) { time = 0; }
        log("downloadVoice:" + nickname);
        this.wx.downloadVoice({
            serverId: serverId,
            isShowProgressTips: 0,
            success: function (res) {
                WxWeb.instance._records.push({ localId: res.localId, seatid: seatid, nickname: nickname, time: time });
                WxWeb.instance.playVoice(); // 返回音频的本地ID
            }
        });
    };
    WxWeb.prototype.addToLastRecords = function (record) {
        if (this._lastRecords.indexOf(record) == -1) {
            for (var i = 0; i < this._lastRecords.length; i++) {
                if (this._lastRecords[i].seatid == record.seatid) {
                    this._lastRecords.splice(i, 1, record);
                    break;
                }
            }
        }
    };
    WxWeb.prototype.clearRecord = function () {
        this._records = [];
        this._lastRecords = [];
        this._isRecordPlaying = false;
    };
    WxWeb.prototype.getLocation = function () {
        this.wx.getLocation({
            type: 'wgs84',
            success: function (res) {
                var latitude = res.latitude; // 纬度，浮点数，范围为90 ~ -90
                var longitude = res.longitude; // 经度，浮点数，范围为180 ~ -180。
                var speed = res.speed; // 速度，以米/每秒计
                var accuracy = res.accuracy; // 位置精度
                server.latitude = latitude;
                server.longitude = longitude;
                log("getLocation:" + latitude + "," + longitude + "," + speed + "," + accuracy);
                WxWeb.instance.getAddress(longitude, latitude);
            }
        });
    };
    // getLocation(): void {
    //     var map = new BMap.Map("allmap");
    //     var gc = new BMap.Geolocation();
    //     gc.getCurrentPosition((res) => {
    //         var latitude = res.latitude; // 纬度，浮点数，范围为90 ~ -90
    //         var longitude = res.longitude; // 经度，浮点数，范围为180 ~ -180。          
    //         server.latitude = latitude;
    //         server.longitude = longitude;
    //         log("getLocation:" + latitude + "," + longitude);
    //         WxWeb.instance.getAddress(longitude, latitude);
    //     });
    // }
    WxWeb.prototype.getAddress = function (longitude, latitude) {
        if (longitude && latitude) {
            //通过baiduMap API获取街道名称
            var map = new this.BMap.Map("allmap");
            var point = new this.BMap.Point(longitude, latitude);
            var gc = new this.BMap.Geocoder();
            gc.getLocation(point, function (rs) {
                var addComp = rs.addressComponents;
                server.address = addComp.province + ", " + addComp.city + ", " + addComp.district + ", " + addComp.street + ", " + addComp.streetNumber;
                log("address:" + server.address);
                server.uploadInfoReq();
            });
        }
    };
    WxWeb.prototype.getLongitudeAndLatitude = function () {
        if (Native.instance.OS == OSConfig.ANDROID_NATIVE ||
            Native.instance.OS == OSConfig.IOS_NATIVE_INHOUSE ||
            Native.instance.OS == OSConfig.IOS_NATIVE_STORE) {
            var success = function (info) {
                log('经纬度: (' + info.longitude + '°, ' + info.latitude + '°)，精确度：' + info.accuracy + 'm');
                if (info.altitude != null) {
                    log('海拔：' + info.altitude + 'm' + (info.altitudeAccuracy != null ? ('，精确度：' + info.altitudeAccuracy + 'm') : ''));
                    var longitude = info.longitude;
                    var latitude = info.latitude;
                    server.latitude = info.latitude;
                    server.longitude = info.longitude;
                    WxWeb.instance.getAddress(longitude, latitude);
                }
            };
            var error = function (err) {
                // let errType:String
                // if (err.code = Laya.Geolocation.PERMISSION_DENIED)
                //      errType = "Permission Denied"
                // else if (err.code == Geolocation.POSITION_UNAVAILABLE)
                //      errType = "Position Unavailable"
                // else if (err.code == Geolocation.TIMEOUT)
                //      errType = "Time Out"
                log(err);
            };
            Laya.Geolocation.getCurrentPosition(Laya.Handler.create(this, success), Laya.Handler.create(this, error));
        }
        else {
            WxWeb.instance.getLocation();
        }
    };
    return WxWeb;
}());
//# sourceMappingURL=WxWeb.js.map
/**
 * @author seacole
 * 工具类
 */
var Utils = /** @class */ (function () {
    function Utils() {
    }
    /**
     * object转成查询字符串
     * @param obj
     * @returns {string}
     */
    Utils.obj2query = function (obj) {
        if (!obj) {
            return '';
        }
        var arr = [];
        for (var key in obj) {
            arr.push(key + '=' + obj[key]);
        }
        return arr.join('&');
    };
    Utils.injectProp = function (target, data, callback, ignoreMethod, ignoreNull, keyBefore) {
        if (data === void 0) { data = null; }
        if (callback === void 0) { callback = null; }
        if (ignoreMethod === void 0) { ignoreMethod = true; }
        if (ignoreNull === void 0) { ignoreNull = true; }
        if (keyBefore === void 0) { keyBefore = ""; }
        if (!data) {
            return false;
        }
        var result = true;
        for (var key in data) {
            var value = data[key];
            if ((!ignoreMethod || typeof value != 'function') && (!ignoreNull || value != null)) {
                if (callback) {
                    callback(target, key, value);
                }
                else {
                    target[key] = value;
                }
            }
        }
        return result;
    };
    Utils.checkSeatid = function (seatid) {
        return seatid && seatid > 0 && seatid <= BaseGameData.maxPlayer;
    };
    Utils.getDir = function (seatid) {
        var dirList = [
            [[1]],
            [[1, 3, 2, 4], [3, 1, 2, 4]],
            [[1, 2, 4, 3], [4, 1, 2, 3], [2, 4, 1, 3]],
            [[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]],
            [[1, 3, 4, 5, 6, 2], [6, 1, 3, 4, 5, 2], [5, 6, 1, 3, 4, 2], [4, 5, 6, 1, 3, 2], [3, 4, 5, 6, 1, 2]],
            [[1, 2, 3, 4, 5, 6], [6, 1, 2, 3, 4, 5], [5, 6, 1, 2, 3, 4], [4, 5, 6, 1, 2, 3], [3, 4, 5, 6, 1, 2], [2, 3, 4, 5, 6, 1]]
        ];
        var dir = seatid;
        if (BaseGameData.selfSeatid == 0) {
            var base_seat = 1;
            // if (BaseGameData.lastSeatid > 0){
            // 	base_seat = BaseGameData.lastSeatid
            // }
            return dirList[BaseGameData.maxPlayer - 1][base_seat - 1][seatid - 1];
        }
        return dirList[BaseGameData.maxPlayer - 1][BaseGameData.selfSeatid - 1][seatid - 1];
    };
    Utils.getRealDuration = function (timeout) {
        return timeout - server.serverTime;
    };
    Utils.currentPos = function (seatid) {
        if (!Utils.checkSeatid(seatid)) {
            return 0;
        }
        var num = (seatid - BaseGameData.offset - 1) % BaseGameData.maxPlayer + 1;
        return num <= 0 ? num + BaseGameData.maxPlayer : num;
    };
    Utils.getFitNickName = function (nickname, num) {
        var length = nickname.length;
        var arr = [];
        var charCode;
        var realLength = 0;
        var charCodelength;
        var newstr = [];
        for (var i = 0; i < length; i++) {
            charCode = nickname.charCodeAt(i);
            if (charCode >= 0 && charCode <= 128)
                charCodelength = 1;
            else
                charCodelength = 2;
            if (realLength + charCodelength > num) {
                for (var j = arr.length - 1; j >= 0; j--) {
                    if (realLength - arr[j] > num) {
                        realLength = realLength - arr[j];
                        newstr.pop();
                    }
                    else {
                        // newstr.pop()
                        var str = "";
                        for (var m = 0; m < newstr.length; m++) {
                            str = str + newstr[m];
                        }
                        str = str + "...";
                        return str;
                    }
                }
            }
            newstr[i] = nickname[i];
            arr[i] = charCodelength;
            realLength = realLength + charCodelength;
        }
        return nickname;
    };
    Utils.getCharCodeLength = function (str) {
        var length = str.length;
        var arr = [];
        var charCode;
        var realLength = 0;
        var charCodelength;
        var newstr = [];
        for (var i = 0; i < length; i++) {
            charCode = str.charCodeAt(i);
            if (charCode >= 0 && charCode <= 128)
                charCodelength = 1;
            else
                charCodelength = 2;
            realLength = realLength + charCodelength;
        }
        return realLength;
    };
    Utils.deepCopy = function (p, c) {
        var c = c || {};
        for (var i in p) {
            if (!p.hasOwnProperty(i)) {
                continue;
            }
            if (typeof p[i] === 'object') {
                c[i] = (p[i].constructor === Array) ? [] : {};
                this.deepCopy(p[i], c[i]);
            }
            else {
                c[i] = p[i];
            }
        }
        return c;
    };
    Utils.removeHeadAndEndSpace = function (str) {
        while (str.length) {
            if (str.substr(0, 1) == " ")
                str = str.substring(1, str.length);
            else
                break;
        }
        while (str.length) {
            if (str.substr(str.length - 1, 1) == " ")
                str = str.substring(0, str.length - 1);
            else
                break;
        }
        return str;
    };
    Utils.backToMenu = function () {
        // if(GameConfig.IS_MATCH)
        // 	matchSign.MatchSignData.backCode = parseInt(server.code)
        server.code = "";
        AppControl.getInstance().showPage(HallPage);
        server.close();
    };
    return Utils;
}());
//# sourceMappingURL=Utils.js.map
/*
* @author seacole
* 连续动画;
*/
var TweenUtils = /** @class */ (function () {
    function TweenUtils(target) {
        this._target = target;
        this.clear();
    }
    TweenUtils.get = function (target) {
        return new TweenUtils(target);
    };
    /**
     * 缓动对象的props属性到目标值。
     * @param	target 目标对象(即将更改属性值的对象)。
     * @param	props 变化的属性列表，比如
     * @param	duration 花费的时间，单位毫秒。
     * @param	ease 缓动类型，默认为匀速运动。
     * @param	complete 结束回调函数。
     * @param	delay 延迟执行时间。
     * @param	coverBefore 是否覆盖之前的缓动。
     * @param	autoRecover 是否自动回收，默认为true，缓动结束之后自动回收到对象池。
     */
    TweenUtils.prototype.to = function (props, duration, ease, complete, delay, coverBefore, autoRecover) {
        if (ease === void 0) { ease = null; }
        if (complete === void 0) { complete = null; }
        if (delay === void 0) { delay = 0; }
        if (coverBefore === void 0) { coverBefore = false; }
        if (autoRecover === void 0) { autoRecover = true; }
        this._steps.push({ props: props, duration: duration, ease: ease, complete: complete, delay: delay, coverBefore: coverBefore, autoRecover: autoRecover });
        this.gogogo();
        return this;
    };
    TweenUtils.prototype.delay = function (delay) {
        this._steps.push({ delay: delay });
        return this;
    };
    TweenUtils.prototype.set = function (setProps) {
        this._steps.push({ setProps: setProps });
        return this;
    };
    TweenUtils.prototype.gogogo = function () {
        if (!this._isPlaying) {
            if (this._steps && this._steps.length) {
                var step = this._steps.shift();
                if (step.hasOwnProperty("props")) {
                    this._isPlaying = true;
                    Laya.Tween.to(this._target, step.props, step.duration, step.ease, step.complete, step.delay, step.coverBefore, step.autoRecover);
                    Laya.timer.once(step.duration + step.delay, this, this.onStepComplete);
                }
                else if (step.hasOwnProperty("delay")) {
                    this._isPlaying = true;
                    Laya.timer.once(step.delay, this, this.onStepComplete);
                }
                else if (step.hasOwnProperty("setProps")) {
                    Utils.injectProp(this._target, step.setProps);
                    this.onStepComplete();
                }
            }
        }
    };
    TweenUtils.prototype.onStepComplete = function () {
        this._isPlaying = false;
        this.gogogo();
    };
    TweenUtils.prototype.clear = function () {
        this._steps = [];
        this._isPlaying = false;
        Laya.Tween.clearTween(this._target);
    };
    return TweenUtils;
}());
//# sourceMappingURL=TweenUtils.js.map
var TimeUtils = /** @class */ (function () {
    function TimeUtils() {
    }
    /**
     * 格式化到XX:XX:XX:XX
     * @param second 单位秒
     */
    TimeUtils.timeFormat = function (second, format, placeZero) {
        if (format === void 0) { format = '{1}:{0}'; }
        if (placeZero === void 0) { placeZero = true; }
        var ss = second % 60;
        var mm = Math.floor(second / 60) % 60;
        var hh = Math.floor(second / 3600) % 24;
        var dd = Math.floor(second / 3600 / 24);
        if (placeZero) {
            ss = StringUtils.supplement(ss, 2);
            mm = StringUtils.supplement(mm, 2);
            hh = StringUtils.supplement(hh, 2);
            dd = StringUtils.supplement(dd, 2);
        }
        return StringUtils.format(format, ss, mm, hh, dd);
    };
    TimeUtils.Format = function (fmt, time) {
        var date = new Date();
        if (time) {
            date = new Date(time * 1000);
        }
        var o = {
            "M+": date.getMonth() + 1,
            "d+": date.getDate(),
            "h+": date.getHours(),
            "m+": date.getMinutes(),
            "s+": date.getSeconds(),
            "q+": Math.floor((date.getMonth() + 3) / 3),
            "S": date.getMilliseconds() //毫秒 
        };
        if (/(y+)/.test(fmt))
            fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
        for (var k in o)
            if (new RegExp("(" + k + ")").test(fmt))
                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
        return fmt;
    };
    /**
     * 获取系统时间的xx:xx
     */
    TimeUtils.getSystemTimeHM = function (needTimeChange) {
        if (needTimeChange === void 0) { needTimeChange = false; }
        var time = Laya.Browser.now();
        var d = new Date(time);
        var hour = d.getHours();
        var min = d.getMinutes();
        var str = "";
        if (hour < 10)
            str += "0";
        str += hour + ":";
        if (min < 10)
            str += "0";
        str += min;
        if (needTimeChange) {
            var sec = d.getSeconds();
            Laya.timer.clear(this, this.dispath);
            Laya.timer.once(60 * 1000 - sec * 1000, this, this.dispath);
        }
        return str;
    };
    TimeUtils.dispath = function () {
        Dispatcher.dispatch(EventNames.TIME_CHANGE);
    };
    //时间戳转换日期 (yyyy-MM-dd HH:mm:ss)  
    TimeUtils.formatDateTime = function (timeValue) {
        var date = new Date(timeValue);
        var y = date.getFullYear();
        var m = date.getMonth() + 1;
        var M = m < 10 ? ('0' + m) : m;
        var d = date.getDate();
        var D = d < 10 ? ('0' + d) : d;
        var h = date.getHours();
        var H = h < 10 ? ('0' + h) : h;
        var minute = date.getMinutes();
        var second = date.getSeconds();
        var minut = minute < 10 ? ('0' + minute) : minute;
        var secon = second < 10 ? ('0' + second) : second;
        return y + '-' + M + '-' + D + ' ' + H + ':' + minut + ':' + secon;
    };
    ;
    //判断传入日期是否为昨天  
    TimeUtils.isYestday = function (timeValue) {
        var date = (new Date()); //当前时间  
        var today = new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime(); //今天凌晨  
        var yestday = new Date(today - 24 * 3600 * 1000).getTime();
        return timeValue < today && yestday <= timeValue;
    };
    ;
    //判断传入日期是否属于今年  
    TimeUtils.isYear = function (timeValue) {
        var takeNewYear = this.formatDateTime(new Date()).substr(0, 4); //当前时间的年份  
        var takeTimeValue = this.formatDateTime(timeValue).substr(0, 4); //传入时间的年份  
        return takeTimeValue == takeNewYear;
    };
    //60000 1分钟  
    //3600000 1小时  
    //86400000 24小时  
    //对传入时间进行时间转换   
    TimeUtils.timeChange = function (timeValue) {
        var timeNew = Date.parse(String(new Date())); //当前时间  
        var timeDiffer = timeNew - timeValue; //与当前时间误差  
        var returnTime = '';
        if (timeDiffer <= 60000) { //一分钟内  
            var returnTime = "刚刚";
        }
        else if (timeDiffer > 60000 && timeDiffer < 3600000) { //1小时内  
            var returnTime = Math.floor(timeDiffer / 60000) + '分钟前';
        }
        else if (timeDiffer >= 3600000 && timeDiffer < 86400000 && this.isYestday(timeValue) === false) { //今日  
            var returnTime = '今天 ' + this.formatDateTime(timeValue).substr(11, 5);
        }
        else if (timeDiffer > 3600000 && this.isYestday(timeValue) === true) { //昨天  
            var returnTime = '昨天 ' + this.formatDateTime(timeValue).substr(11, 5);
        }
        else if (timeDiffer > 86400000 && this.isYestday(timeValue) === false && this.isYear(timeValue) === true) { //今年  
            var returnTime = this.formatDateTime(timeValue).substr(5, 11);
        }
        else if (timeDiffer > 86400000 && this.isYestday(timeValue) === false && this.isYear(timeValue) === false) { //不属于今年  
            var returnTime = this.formatDateTime(timeValue).substr(0, 10);
        }
        return returnTime;
    };
    TimeUtils.isToday = function (time, now) {
        if (now === void 0) { now = 0; }
        if (!now)
            now = server.serverTime ? server.serverTime * 1000 : new Date().getTime();
        var t = new Date(time);
        var n = new Date(now);
        if (t.getFullYear() == n.getFullYear() && t.getMonth() == n.getMonth() && t.getDate() == n.getDate())
            return true;
        else
            return false;
    };
    TimeUtils.isTomorrow = function (time, now) {
        if (now === void 0) { now = 0; }
        if (!now)
            now = server.serverTime ? server.serverTime * 1000 : new Date().getTime();
        now += 24 * 60 * 60 * 1000;
        var t = new Date(time);
        var n = new Date(now);
        if (t.getFullYear() == n.getFullYear() && t.getMonth() == n.getMonth() && t.getDate() == n.getDate())
            return true;
        else
            return false;
    };
    return TimeUtils;
}());
//# sourceMappingURL=TimeUtils.js.map
/**
 * @author seacole
 * string辅助
 */
var StringUtils = /** @class */ (function () {
    function StringUtils() {
    }
    StringUtils.makeRandomString = function (len) {
        var s = "";
        var cl = this.chars.length;
        for (var i = 0; i < len; i++) {
            s += this.chars.charAt(MathUtils.makeRandomInt(cl));
        }
        return s;
    };
    StringUtils.makeRandomIntString = function (len) {
        var s = "";
        for (var i = 0; i < len; i++) {
            s += MathUtils.makeRandomInt(10);
        }
        return s;
    };
    StringUtils.stringCut = function (str, len, fill) {
        if (fill === void 0) { fill = '...'; }
        var result = str;
        if (str.length > len) {
            result = str.substr(0, len) + fill;
        }
        return result;
    };
    StringUtils.supplement = function (value, count) {
        var index = count - value.toString().length - 1;
        if (index < 0) {
            return value.toString();
        }
        return this.zeros[index] + value;
    };
    StringUtils.format = function (formatStr) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        var result = formatStr;
        for (var i = 0, len = params.length; i < len; i++) {
            result = result.replace("{" + i + "}", params[i]);
        }
        return result;
    };
    /**
     * 将下划线变成驼峰
     */
    StringUtils.transformStrToHump = function (str) {
        var re = /_(\w)/g;
        return str.replace(re, function (all, letter) {
            return letter.toUpperCase();
        });
    };
    StringUtils.getColor = function (content, color) {
        return "<font color='#" + color.toString(16) + "'>" + content + "</font>";
    };
    StringUtils.getIconName = function (path) {
        if (!path) {
            return "";
        }
        var pos = path.lastIndexOf('/');
        var name = path.substring(pos + 1, path.length);
        name = "props/Mobile_" + name + ".png";
        return name;
    };
    StringUtils.getShopPicName = function (path) {
        var pos = path.lastIndexOf('/');
        var name = path.substring(pos + 1, path.length);
        name = "props/" + name + ".png";
        return name;
    };
    StringUtils.chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    StringUtils.zeros = [
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000"
    ];
    return StringUtils;
}());
//# sourceMappingURL=StringUtils.js.map
/**
 * @author db
 * Native 接口包装
 */
/**
 GV_ON_JOINROOM_SUCC = 1;
 GV_ON_JOINROOM_TIMEOUT = 2;
 GV_ON_JOINROOM_SVR_ERR = 3;
 GV_ON_JOINROOM_UNKNOWN = 4;
 GV_ON_NET_ERR = 5;
 GV_ON_QUITROOM_SUCC = 6;
 GV_ON_MESSAGE_KEY_APPLIED_SUCC = 7;
 GV_ON_MESSAGE_KEY_APPLIED_TIMEOUT = 8;
 GV_ON_MESSAGE_KEY_APPLIED_SVR_ERR = 9;
 GV_ON_MESSAGE_KEY_APPLIED_UNKNOWN = 10;
 GV_ON_UPLOAD_RECORD_DONE = 11;
 GV_ON_UPLOAD_RECORD_ERROR = 12;
 GV_ON_DOWNLOAD_RECORD_DONE = 13;
 GV_ON_DOWNLOAD_RECORD_ERROR = 14;
 GV_ON_STT_SUCC = 15;
 GV_ON_STT_TIMEOUT = 16;
 GV_ON_STT_APIERR = 17;
 GV_ON_RSTT_SUCC = 18;
 GV_ON_RSTT_TIMEOUT = 19;
 GV_ON_RSTT_APIERR = 20;
 GV_ON_PLAYFILE_DONE = 21;
 GV_ON_ROOM_OFFLINE = 22;
 GV_ON_UNKNOWN = 23;
 GV_ON_ROLE_SUCC = 24;
 GV_ON_ROLE_TIMEOUT = 25;
 GV_ON_ROLE_MAX_AHCHOR = 26;
 GV_ON_ROLE_NO_CHANGE = 27;
 GV_ON_ROLE_SVR_ERROR = 28;
 */
var NativeHelper = /** @class */ (function () {
    function NativeHelper() {
    }
    Object.defineProperty(NativeHelper, "instance", {
        get: function () {
            if (this._instance == undefined) {
                this._instance = new NativeHelper();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    NativeHelper.prototype.init = function () {
        if (this.isIOS) {
            var call = Laya.PlatformClass.createClass("NativeHelper");
            call.call("jsLoadFinish");
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.NativeHelper");
            call.call("jsLoadFinish");
        }
    };
    Object.defineProperty(NativeHelper.prototype, "isIOS", {
        get: function () {
            return Laya.Browser.window.conchConfig && Laya.Browser.window.conchConfig.getOS() == "Conch-ios";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NativeHelper.prototype, "isAndroid", {
        get: function () {
            return Laya.Browser.window.conchConfig && Laya.Browser.window.conchConfig.getOS() == "Conch-android";
        },
        enumerable: true,
        configurable: true
    });
    NativeHelper.prototype.callNative = function (method) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (this.isIOS) {
            var call = Laya.PlatformClass.createClass("NativeHelper");
            // call.call("setOrientationPortrait");
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.voice.");
        }
    };
    NativeHelper.prototype.setOrientationPortrait = function () {
        if (Laya.Browser.window.conchConfig) {
            Laya.Browser.window.conchConfig.setScreenOrientation(1);
            if (this.isIOS) {
                var call = Laya.PlatformClass.createClass("NativeHelper");
                call.call("rotationBugfix");
            }
        }
    };
    NativeHelper.prototype.setOrientationLandscape = function () {
        if (Laya.Browser.window.conchConfig) {
            Laya.Browser.window.conchConfig.setScreenOrientation(0);
            if (this.isIOS) {
                var call = Laya.PlatformClass.createClass("NativeHelper");
                call.call("rotationBugfix");
            }
        }
    };
    /**
     * 实时语音加入房间
     *
     * @author DB
     * @param {string} roomName 房间名称
     * @param {Function} callback 结果回调
     * @memberof NativeHelper
     */
    NativeHelper.prototype.voiceJoinRoom = function (roomName, callback) {
        if (!Laya.Browser.window.conchConfig) {
            return;
        }
        log("voiceJoinRoom:" + roomName);
        var cb = function (result) {
            log(result);
            var response = JSON.parse(result);
            if (callback) {
                callback(response);
            }
        };
        if (this.isIOS) {
            var call = Laya.PlatformClass.createClass("GVoiceMgr");
            call.callWithBack(cb, "joinRoom:", roomName);
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.voice.ApolloVoice");
            call.callWithBack(cb, "joinRoom", roomName);
        }
    };
    /**
     * 退出语音房间
     *
     * @author DB
     * @param {string} roomName
     * @param {Function} callback
     * @memberof NativeHelper
     */
    NativeHelper.prototype.voiceQuitRoom = function (roomName, callback) {
        if (!Laya.Browser.window.conchConfig) {
            return;
        }
        log("voiceQuitRoom:" + roomName);
        var cb = function (result) {
            log(result);
            if (callback) {
                var response = JSON.parse(result);
                callback(response);
            }
        };
        if (this.isIOS) {
            var call = Laya.PlatformClass.createClass("GVoiceMgr");
            call.callWithBack(cb, "quitRoom:", roomName);
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.voice.ApolloVoice");
            call.callWithBack(cb, "quitRoom", roomName);
        }
    };
    /**
     * 开启喇叭
     *
     * @author DB
     * @param {Function} callback
     * @memberof NativeHelper
     */
    NativeHelper.prototype.voiceOpenSpeaker = function (callback) {
        if (this.isIOS) {
            var call = Laya.PlatformClass.createClass("GVoiceMgr");
            call.callWithBack(function (result) {
                if (callback) {
                    var response = JSON.parse(result);
                    callback(response.result);
                }
            }, "openSpeaker");
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.voice.ApolloVoice");
            var result = call.call("openSpeaker");
            if (callback) {
                callback(result);
            }
        }
    };
    /**
     * 关闭喇叭
     *
     * @author DB
     * @param {Function} callback
     * @memberof NativeHelper
     */
    NativeHelper.prototype.voiceCloseSpeaker = function (callback) {
        if (this.isIOS) {
            var call = Laya.PlatformClass.createClass("GVoiceMgr");
            call.callWithBack(function (result) {
                if (callback) {
                    var response = JSON.parse(result);
                    callback(response.result);
                }
            }, "closeSpeaker");
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.voice.ApolloVoice");
            var result = call.call("closeSpeaker");
            if (callback) {
                callback(result);
            }
        }
    };
    /**
     * 开启麦克风
     *
     * @author DB
     * @param {Function} callback
     * @memberof NativeHelper
     */
    NativeHelper.prototype.voiceOpenMic = function (callback) {
        if (this.isIOS) {
            var call = Laya.PlatformClass.createClass("GVoiceMgr");
            call.callWithBack(function (result) {
                if (callback) {
                    var response = JSON.parse(result);
                    callback(response.result);
                }
            }, "openMic");
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.voice.ApolloVoice");
            var result = call.call("openMic");
            if (callback) {
                callback(result);
            }
        }
    };
    /**
     * 关闭麦克风
     *
     * @author DB
     * @param {Function} callback
     * @memberof NativeHelper
     */
    NativeHelper.prototype.voiceCloseMic = function (callback) {
        if (this.isIOS) {
            var call = Laya.PlatformClass.createClass("GVoiceMgr");
            call.callWithBack(function (result) {
                if (callback) {
                    var response = JSON.parse(result);
                    callback(response.result);
                }
            }, "closeMic");
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.voice.ApolloVoice");
            var result = call.call("closeMic");
            if (callback) {
                callback(result);
            }
        }
    };
    /**
     * 屏蔽玩家语音
     *
     * @author DB
     * @param {string} roomName
     * @param {number} memberID
     * @param {number} enable
     * @param {Function} callback
     * @memberof NativeHelper
     */
    NativeHelper.prototype.voiceForbidMemberVoice = function (roomName, memberID, enable, callback) {
        if (this.isIOS) {
            var call = Laya.PlatformClass.createClass("GVoiceMgr");
            call.callWithBack(function (result) {
                if (callback) {
                    var response = JSON.parse(result);
                    callback(response.result);
                }
            }, "forbidMemberVoice:enable:inRoom:", memberID, enable, roomName);
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.voice.ApolloVoice");
            var result = call.call("forbidMemberVoice", memberID, enable, roomName);
            if (callback) {
                callback(result);
            }
        }
    };
    /**
     * 用户信息设置，登录时必须调用
     *
     * @author DB
     * @param {string} appID
     * @param {string} appKey
     * @param {string} userId
     * @memberof NativeHelper
     */
    NativeHelper.prototype.voiceSetUserInfo = function (userId) {
        userId += "";
        log("voiceSetUserInfo:" + userId);
        if (this.isIOS) {
            var call = Laya.PlatformClass.createClass("GVoiceMgr");
            call.call("setOpenID:", userId);
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.voice.ApolloVoice");
            call.call("setOpenID", userId);
        }
    };
    /**
     * 注册语音状态回调
     *
     * @author DB
     * @param {Function} callback
     * @memberof NativeHelper
     */
    NativeHelper.prototype.voiceMemberVoiceCallback = function (callback) {
        this.voiceStatusCb = callback;
    };
    /**
     * 玩家语音状态发生变化
     *
     * @author DB
     * @param {number} memberID 玩家 id
     * @param {number} status 0:停止说话 1:开始说话 2:继续说话
     * @param {string} roomName  所在房间名
     * @memberof NativeHelper
     */
    NativeHelper.prototype.onMemberVoice = function (memberID, status, roomName) {
        if (this.voiceStatusCb) {
            this.voiceStatusCb(memberID, status, roomName);
        }
    };
    NativeHelper.prototype.wxSetAppId = function (appid) {
        if (this.isIOS) {
            var call = Laya.PlatformClass.createClass("NativeHelper");
            call.call("setWeixinId:", appid);
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.social.Social");
            call.call("setWeixinId", appid);
        }
    };
    /**
     * 微信登录
     *
     * @author DB
     * @param {Function} callback 登录回调 function(code) 微信返回的code
     * @memberof NativeHelper
     */
    NativeHelper.prototype.wxLogin = function (callback) {
        if (!Laya.Browser.window.conchConfig) {
            return;
        }
        if (this.isIOS) {
            var call = Laya.PlatformClass.createClass("NativeHelper");
            call.callWithBack(function (json) {
                log("wxLogin callback:" + json);
                var result = JSON.parse(json);
                if (result.result == 0) {
                    callback(result.code);
                }
                else {
                    callback("");
                }
            }, "doWxAuth");
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.social.Social");
            call.callWithBack(function (json) {
                log("wxLogin callback:" + json);
                var result = JSON.parse(json);
                if (result.result == 0) {
                    callback(result.code);
                }
                else {
                    callback("");
                }
            }, "doWxAuth");
        }
    };
    NativeHelper.prototype.wxPay = function (callback, data) {
        if (!Laya.Browser.window.conchConfig) {
            return;
        }
        if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.social.Social");
            call.callWithBack(function (json) {
                log("wxLogin callback:" + json);
                var result = JSON.parse(json);
                if (result.result == 0) {
                    callback("0");
                }
                else if (result.result == 1) {
                    HintCtrl.instance.show("支付取消");
                }
                else {
                    callback("");
                }
            }, "doPay", data.appid, data.partnerId, data.prepayId, data.nonceStr, String(data.timeStamp), data.sign);
        }
    };
    /**
     * 微信分享图片
     *
     * @param scene 0好友  1朋友圈
     * @param imgPath 本地文件路径
     * @param callback 分享结果回调
     */
    NativeHelper.prototype.wxShareImg = function (scene, imgPath, callback) {
        if (!Laya.Browser.window.conchConfig) {
            return;
        }
        if (this.isIOS) {
            var call = Laya.PlatformClass.createClass("NativeHelper");
            call.callWithBack(function (json) {
                log("wxShareImg callback:" + json);
                if (callback) {
                    var result = JSON.parse(json);
                    callback(result);
                }
            }, "doWxShareImg:withScene:", imgPath, scene);
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.social.Social");
            call.callWithBack(function (json) {
                log("wxShareImg callback:" + json);
                if (callback) {
                    var result = JSON.parse(json);
                    callback(result);
                }
            }, "doWxShareImg", scene, imgPath);
        }
    };
    /**
     * 微信分享页面
     *
     * @author DB
     * @param {number} scene 0好友  1朋友圈
     * @param {string} url 点击跳转地址
     * @param {string} iconPath 分享图标
     * @param {string} title 分享标题
     * @param {string} description 分享内容
     * @param {Function} callback 分享结果回调
     * @returns {void}
     * @memberof NativeHelper
     */
    NativeHelper.prototype.wxShareWebPage = function (scene, url, iconPath, title, description, callback) {
        if (!Laya.Browser.window.conchConfig) {
            return;
        }
        if (this.isIOS) {
            log("wxShareWebPage scene:" + scene);
            var call = Laya.PlatformClass.createClass("NativeHelper");
            call.callWithBack(function (json) {
                log("wxShareWebPage callback:" + json);
                if (callback) {
                    var result = JSON.parse(json);
                    callback(result);
                }
            }, "doWxShareWebPage:IconPath:Title:Desc:withScene:", url, iconPath, title, description, scene);
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.social.Social");
            call.callWithBack(function (json) {
                log("wxShareWebPage callback:" + json);
                if (callback) {
                    var result = JSON.parse(json);
                    callback(result);
                }
            }, "doWxShareWebPage", scene, url, iconPath, title, description);
        }
    };
    /**
     * app 版本更新
     * @param newVer 新版本
     * @param url 版本下载地址
     */
    NativeHelper.prototype.appUpdate = function (newVer, url) {
        if (!Laya.Browser.window.conchConfig) {
            return;
        }
        log("appUpdate url:" + url);
        if (this.isIOS) {
            this.openURL(url);
        }
        else if (this.isAndroid) {
            this.openURL(url);
            // let call = Laya.PlatformClass.createClass("com.vendor.update.UpdateApkMgr");
            // call.call("startUpdateApk", "duoduo-update.apk", url);
        }
    };
    /**
     * 获取 app 版本号
     *
     * @author DB
     * @returns {string}
     * @memberof NativeHelper
     */
    NativeHelper.prototype.getAppVersion = function () {
        if (!Laya.Browser.window.conchConfig) {
            return "";
        }
        if (this.isIOS) {
            return Laya.Browser.window.conch.config.getAppVersion();
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.update.UpdateApkMgr");
            return call.call("getAppVersion");
        }
    };
    /**
     * 比较APP版本号
     * @param ver
     */
    NativeHelper.prototype.checkAppVersion = function (ver) {
        var appVer = this.getAppVersion();
        var appArr = appVer.split(".");
        var checkArr = ver.split(".");
        if (appArr.length == 3 && checkArr.length == 3) {
            var appNum = Number(appArr[0]) * 1000 * 1000 + Number(appArr[1]) * 1000 + Number(appArr[2]);
            var checkNum = Number(checkArr[0]) * 1000 * 1000 + Number(checkArr[1]) * 1000 + Number(checkArr[2]);
            return appNum >= checkNum;
        }
        return false;
    };
    /**
     * 获取 ios bundleId
     *
     * @author DB
     * @param {Function} callback
     * @returns {string}
     * @memberof NativeHelper
     */
    NativeHelper.prototype.getBundleID = function (callback) {
        if (!Laya.Browser.window.conchConfig) {
            return "";
        }
        if (this.isIOS) {
            var call = Laya.PlatformClass.createClass("NativeHelper");
            call.callWithBack(function (bundleId) {
                if (callback) {
                    callback(bundleId);
                }
            }, "getBundleID");
        }
        else if (this.isAndroid) {
        }
    };
    /**
     * 外部链接拉起 app 时传入的参数
     *
     * @author DB
     * @param {Function} callback 回调数据
     * @returns {void}
     * @memberof NativeHelper
     */
    NativeHelper.prototype.deepLinkCallback = function (callback) {
        if (!Laya.Browser.window.conchConfig)
            return;
        this.deeplinkCb = callback;
        if (this.isIOS) {
            var call = Laya.PlatformClass.createClass("NativeHelper");
            call.call("deepLinkCallback");
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.NativeHelper");
            call.call("deepLinkCallback");
        }
    };
    /**
     * 外部链接 native 层回调
     *
     * @author DB
     * @param {string} json
     * @memberof NativeHelper
     */
    NativeHelper.prototype.onDeepLink = function (json, url) {
        log("onDeepLink:" + json + " url:" + url);
        if (this.deeplinkCb) {
            this.deeplinkCb(json, url);
        }
    };
    /**
     * 设置电池信息回调
     *
     * @author DB
     * @param {Function} callback
     * @memberof NativeHelper
     */
    NativeHelper.prototype.setBatteryCallback = function (callback) {
        if (callback === void 0) { callback = null; }
        this.batteryChangedCb = callback;
        if (this.isIOS) {
            var call = Laya.PlatformClass.createClass("NativeHelper");
            call.call("startBatteryMonitor");
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.NativeHelper");
            call.call("startBatteryMonitor");
        }
    };
    /**
     * 电池电量变化
     *
     * @author DB
     * @param {number} state 0:未知状态 1:未充电 2:充电中 3:已充满
     * @param {number} level 电量 0-100
     * @memberof NativeHelper
     */
    NativeHelper.prototype.onBatteryChanged = function (state, level) {
        log("onBatteryChanged state:" + state + " level:" + level);
        if (this.batteryChangedCb) {
            this.batteryChangedCb(state, level);
        }
    };
    NativeHelper.prototype.openURL = function (url) {
        if (this.isIOS) {
            var call = Laya.PlatformClass.createClass("NativeHelper");
            call.call("openUrl:", url);
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.NativeHelper");
            call.call("openUrl", url);
        }
    };
    NativeHelper.prototype.towxpay = function (url) {
        if (this.isAndroid) {
            console.log("=============call wxpay==============");
            var call = Laya.PlatformClass.createClass("com.vendor.NativeHelper");
            call.call("toWXPay", url);
        }
    };
    NativeHelper.prototype.setGroundCallback = function (callback) {
        if (callback === void 0) { callback = null; }
        this.enterBackGround = callback;
    };
    NativeHelper.prototype.appWillEnterForeground = function () {
        log("appWillEnterForeground");
        if (this.enterBackGround)
            this.enterBackGround(false);
    };
    NativeHelper.prototype.appDidEnterBackground = function () {
        log("appDidEnterBackground");
        if (this.enterBackGround)
            this.enterBackGround(true);
    };
    NativeHelper.prototype.clipboardCopy = function (text) {
        if (this.isIOS) {
            var call = Laya.PlatformClass.createClass("NativeHelper");
            call.call("clipboardCopy:", text);
        }
        else if (this.isAndroid) {
            var call = Laya.PlatformClass.createClass("com.vendor.NativeHelper");
            call.call("clipboardCopy", text);
        }
    };
    /**
     *
     * @param cb 检查录音权限的回调
     */
    NativeHelper.prototype.checkRecordPermission = function (cb) {
        if (NativeHelper.recordPermissionCb) {
            //如果已经在等待回调就直接return
            return;
        }
        NativeHelper.recordPermissionCb = cb;
        if (this.isIOS) {
            if (this.checkAppVersion("1.0.3")) {
                var ocClass = Laya.PlatformClass.createClass("NativeHelper");
                ocClass.call("checkRecordPermission");
            }
            else {
                cb(1);
                NativeHelper.recordPermissionCb = null;
                log("checkRecordPermission low AppVersion:" + this.getAppVersion());
            }
        }
        else if (this.isAndroid) {
            if (this.checkAppVersion("1.0.1")) {
                var javaClass = Laya.PlatformClass.createClass("com.vendor.NativeHelper");
                javaClass.call("checkRecordPermission");
            }
            else {
                cb(1);
                NativeHelper.recordPermissionCb = null;
                log("checkRecordPermission low AppVersion:" + this.getAppVersion());
            }
        }
    };
    /**
     *
     * @param permission 0:没有权限 1:有权限
     */
    NativeHelper.onRequestRecordPermission = function (permission) {
        if (!NativeHelper.recordPermissionCb) {
            return;
        }
        console.log("onRequestRecordPermission: " + permission.toString());
        NativeHelper.recordPermissionCb(permission);
        NativeHelper.recordPermissionCb = null;
    };
    NativeHelper.prototype.openPermissionSetting = function () {
        if (this.isIOS) {
            var ocClass = Laya.PlatformClass.createClass("NativeHelper");
            ocClass.call("openSetting");
        }
        else if (this.isAndroid) {
            var javaClass = Laya.PlatformClass.createClass("com.vendor.NativeHelper");
            javaClass.call("openSetting");
        }
    };
    return NativeHelper;
}());
//# sourceMappingURL=NativeHelper.js.map
/**
 * @author seacole
 * 数学算法
 */
var MathUtils = /** @class */ (function () {
    function MathUtils() {
    }
    /**
     * 计算距离
     * @param p1
     * @param p2
     * @returns {number}
     */
    MathUtils.distancePoint = function (p1, p2) {
        return this.distance(p1.x, p1.y, p2.x, p2.y);
    };
    /**
     * 计算距离
     * @param x1
     * @param y1
     * @param x2
     * @param y2
     * @returns {number}
     */
    MathUtils.distance = function (x1, y1, x2, y2) {
        return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
    };
    /**
     * 计算两点直线的斜率
     * @param p1
     * @param p2
     * @returns {number}
     */
    MathUtils.angle = function (p1, p2) {
        return Math.atan2(p2.y - p1.y, p2.x - p1.x);
    };
    /**
     * 获取一个随机整数
     * @param max
     * @param min
     * @returns {number}
     */
    MathUtils.makeRandomInt = function (max, min) {
        if (min === void 0) { min = 0; }
        return Math.floor(Math.random() * (max - min)) + min;
    };
    /**
     * 获取一个随机浮点数
     * @param max
     * @param min
     * @returns {number}
     */
    MathUtils.makeRandomFloat = function (max, min) {
        if (min === void 0) { min = 0; }
        return Math.random() * (max - min) + min;
    };
    /**
     * 生成一个基于value的range偏移的随机数
     * @param value
     * @param range
     * @returns {number}
     */
    MathUtils.makeRandomByRange = function (value, range) {
        return value + (Math.random() * range * 2 - range);
    };
    /**
     * 生成一个随机整数数组
     * @param len
     * @returns {string}
     */
    MathUtils.makeRandomIntArr = function (len, max, min) {
        if (min === void 0) { min = 0; }
        var target = [];
        for (var i = 0; i < len; i++) {
            target.push(this.makeRandomInt(max));
        }
        return target;
    };
    /**
     * 生成一个范围数组
     * @param to
     * @param from
     * @param step
     * @returns {Array<number>}
     */
    MathUtils.makeOrderIntArray = function (to, from, step) {
        if (from === void 0) { from = 0; }
        if (step === void 0) { step = 1; }
        var result = [];
        for (var i = from; i <= to; i += step) {
            result.push(i);
        }
        return result;
    };
    /**
     * 打乱一个数组
     * @param arr
     * @returns {any}
     */
    MathUtils.mixArray = function (arr) {
        for (var i = 0, len = Math.round(arr.length / 2); i < len; i++) {
            var a = this.makeRandomInt(arr.length);
            var b = this.makeRandomInt(arr.length);
            var temp = arr[a];
            arr[a] = arr[b];
            arr[b] = temp;
        }
        return arr;
    };
    /**
     * 打乱一个二维数组
     * @param arr
     * @returns {Array<Array<any>>}
     */
    MathUtils.mixArray2 = function (arr) {
        var cH = arr[0].length;
        var cV = arr.length;
        var pos0;
        var pos1;
        for (var i = 0, len = Math.round(cH * cV / 2); i < len; i++) {
            pos0 = [this.makeRandomInt(cH), this.makeRandomInt(cV)];
            pos1 = [this.makeRandomInt(cH), this.makeRandomInt(cV)];
            var temp = arr[pos0[0]][pos0[1]];
            arr[pos0[0]][pos0[1]] = arr[pos1[0]][pos1[1]];
            arr[pos1[0]][pos1[1]] = temp;
        }
        return arr;
    };
    /**
     * 随机从一个数组中取出一项
     * @param arr
     * @returns {*}
     */
    MathUtils.getRandomFromArray = function (arr) {
        return arr[this.makeRandomInt(arr.length)];
    };
    /**
     * 根据范围阻隔
     * @param value
     * @param lower
     * @param upper
     * @returns {number}
     */
    MathUtils.fixRange = function (value, lower, upper) {
        if (value < lower) {
            value = lower;
        }
        else if (value > upper) {
            value = upper;
        }
        return value;
    };
    /**
     * 根据范围补足
     * @param value
     * @param max
     * @param min
     * @returns {number}
     */
    MathUtils.roundFix = function (value, max, min) {
        if (min === void 0) { min = 0; }
        if (value < min) {
            value += max - min;
        }
        else if (value >= max) {
            value -= max - min;
        }
        return value;
    };
    /**
     * 弧度转角度
     * @param radius
     * @returns {number}
     */
    MathUtils.radiusToAngle = function (radius) {
        return radius * 180 / Math.PI;
    };
    /**
     * 角度转弧度
     * @param angle
     * @returns {number}
     */
    MathUtils.angleToRadius = function (angle) {
        return angle * Math.PI / 180;
    };
    /**
     * 数组向右旋转
     * @param arr
     * @returns {Array}
     */
    MathUtils.turnRight = function (arr) {
        var temp = [];
        for (var t = 0, tl = arr.length; t < tl; t++) {
            temp.push([]);
        }
        for (var i = 0, il = arr.length; i < il; i++) {
            for (var j = 0, jl = arr[i].length; j < jl; j++) {
                temp[i][j] = arr[jl - j - 1][i];
            }
        }
        return temp;
    };
    /**
     * 数组向左旋转
     * @param arr
     * @returns {Array}
     */
    MathUtils.turnLeft = function (arr) {
        var temp = [];
        for (var t = 0, tl = arr.length; t < tl; t++) {
            temp.push([]);
        }
        for (var i = 0, il = arr.length; i < il; i++) {
            for (var j = 0, jl = arr[i].length; j < jl; j++) {
                temp[i][j] = arr[j][jl - i - 1];
            }
        }
        return temp;
    };
    /**
     * 根据两点计算量化方向,用于手势识别
     * @param x0
     * @param y0
     * @param x1
     * @param y1
     * @returns {number}
     */
    MathUtils.calDir = function (x0, y0, x1, y1) {
        if (x0 == x1 && y0 == y1) {
            return -1;
        }
        var r = Math.atan2(y1 - y0, x1 - x0);
        var d;
        if (Math.abs(r) < Math.PI / 4) {
            d = 0;
        }
        else if (Math.abs(r) > Math.PI / 4 * 3) {
            d = 2;
        }
        else if (r > 0) {
            d = 1;
        }
        else {
            d = 3;
        }
        return d;
    };
    /**
     * 数值正负计算
     * @param num
     * @returns {number}
     */
    MathUtils.sign = function (num) {
        return num == 0 ? 0 : (num > 0 ? 1 : -1);
    };
    return MathUtils;
}());
//# sourceMappingURL=MathUtils.js.map
/*
* @author seacole
* log;
*/
function log(value) {
    // if (GameConfig.language && GameConfig.language.showLog=="true")
    if (value instanceof Object) {
        try {
            value = JSON.stringify(value);
        }
        catch (error) {
            console.error(error);
        }
    }
    console.log(new Date().toLocaleTimeString() + "[GAME]" + value);
}
//# sourceMappingURL=Log.js.map
/*
* @author seacole
* 贝塞尔曲线;
*/
var BezierUtils = /** @class */ (function () {
    function BezierUtils() {
    }
    BezierUtils.createCurve = function (originPoint) {
        //控制点收缩系数 ，经调试0.6较好，CvPoint是opencv的，可自行定义结构体(x,y) 
        var scale = 0.6;
        var originCount = originPoint.length;
        var midpoints = [];
        //生成中点      
        for (var i = 0; i < originCount; i++) {
            var tmp = new Laya.Vector3();
            var nexti = (i + 1) % originCount;
            Laya.Vector3.add(originPoint[i], originPoint[nexti], tmp);
            Laya.Vector3.scale(tmp, 0.5, tmp);
            midpoints.push(tmp);
        }
        //平移中点 
        var extrapoints = [];
        for (var i = 0; i < originCount; i++) {
            var nexti = (i + 1) % originCount;
            var backi = (i + originCount - 1) % originCount;
            var midinmid = new Laya.Vector3();
            Laya.Vector3.add(midpoints[i], midpoints[backi], midinmid);
            Laya.Vector3.scale(midinmid, 0.5, midinmid);
            var offest = new Laya.Vector3();
            Laya.Vector3.subtract(originPoint[i], midinmid, offest);
            var tmp = new Laya.Vector3();
            Laya.Vector3.add(midpoints[backi], offest, tmp);
            var add = new Laya.Vector3();
            Laya.Vector3.subtract(tmp, originPoint[i], add);
            Laya.Vector3.scale(add, scale, add);
            Laya.Vector3.add(originPoint[i], add, tmp);
            extrapoints.push(tmp);
            var tmp = new Laya.Vector3();
            Laya.Vector3.add(midpoints[i], offest, tmp);
            var add = new Laya.Vector3();
            Laya.Vector3.subtract(tmp, originPoint[i], add);
            Laya.Vector3.scale(add, scale, add);
            Laya.Vector3.add(originPoint[i], add, tmp);
            extrapoints.push(tmp);
        }
        return extrapoints;
        // var controlPoint: Array<Laya.Vector3> = [];
        // var out:Array<Array<Laya.Vector3>>=[];
        // //生成4控制点，产生贝塞尔曲线 
        // for (var i: number = 0; i < originCount; i++) {
        //     controlPoint=[];
        //     controlPoint.push(originPoint[i]);
        //     var extraindex: number = 2 * i;
        //     controlPoint.push(extrapoints[extraindex + 1]);
        //     var extranexti: number = (extraindex + 2) % (2 * originCount);
        //     controlPoint.push(extrapoints[extranexti]);
        //     var nexti: number = (i + 1) % originCount;
        //     controlPoint.push(originPoint[nexti]);
        //     var u: number = 0;
        //     var curvePoint: Array<Laya.Vector3>=[];
        //     while (u <= 1 ) {
        //         //u的步长决定曲线的疏密 
        //         u += 0.005;
        //         var tempP: Laya.Vector3 = this.bezier3func(u, controlPoint);
        //         //存入曲线点  
        //         curvePoint.push(tempP);
        //     }
        //     out.push(curvePoint);
        // }
        // return out;
    };
    BezierUtils.bezier3func = function (uu, controlP) {
        var part0 = new Laya.Vector3();
        var part1 = new Laya.Vector3();
        var part2 = new Laya.Vector3();
        var part3 = new Laya.Vector3();
        var tmp = (1 - uu) * (1 - uu) * (1 - uu);
        Laya.Vector3.scale(controlP[0], tmp, part0);
        tmp = 3 * uu * (1 - uu) * (1 - uu);
        Laya.Vector3.scale(controlP[1], tmp, part1);
        tmp = 3 * uu * uu * (1 - uu);
        Laya.Vector3.scale(controlP[2], tmp, part2);
        tmp = uu * uu * uu;
        Laya.Vector3.scale(controlP[3], tmp, part3);
        var out = new Laya.Vector3();
        Laya.Vector3.add(part0, part1, out);
        Laya.Vector3.add(out, part2, out);
        Laya.Vector3.add(out, part3, out);
        return out;
    };
    return BezierUtils;
}());
//# sourceMappingURL=BezierUtils.js.map
/**
* @author seacole
*base64
 */
var _base64key = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
var Base64 = /** @class */ (function () {
    function Base64() {
    }
    Base64.encode = function (input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;
        input = this._utf8_encode(input);
        while (i < input.length) {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            }
            else if (isNaN(chr3)) {
                enc4 = 64;
            }
            output = output +
                _base64key.charAt(enc1) + _base64key.charAt(enc2) +
                _base64key.charAt(enc3) + _base64key.charAt(enc4);
        }
        return output;
    };
    Base64.decode = function (input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;
        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
        while (i < input.length) {
            enc1 = _base64key.indexOf(input.charAt(i++));
            enc2 = _base64key.indexOf(input.charAt(i++));
            enc3 = _base64key.indexOf(input.charAt(i++));
            enc4 = _base64key.indexOf(input.charAt(i++));
            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;
            output = output + String.fromCharCode(chr1);
            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }
        }
        output = this._utf8_decode(output);
        return output;
    };
    Base64._utf8_encode = function (string) {
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";
        for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);
            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
        }
        return utftext;
    };
    // private method for UTF-8 decoding
    Base64._utf8_decode = function (utftext) {
        var string = "";
        var i = 0;
        var c = 0, c1 = 0, c2 = 0, c3 = 0;
        while (i < utftext.length) {
            c = utftext.charCodeAt(i);
            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            }
            else if ((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i + 1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            }
            else {
                c2 = utftext.charCodeAt(i + 1);
                c3 = utftext.charCodeAt(i + 2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }
        }
        return string;
    };
    Base64.removePaddingChars = function (input) {
        var lkey = _base64key.indexOf(input.charAt(input.length - 1));
        if (lkey == 64) {
            return input.substring(0, input.length - 1);
        }
        return input;
    };
    Base64.decodeBuffer = function (input, arrayBuffer) {
        //get last chars to see if are valid
        input = this.removePaddingChars(input);
        input = this.removePaddingChars(input);
        var bytes = parseInt(String((input.length / 4) * 3), 10);
        var uarray;
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;
        var j = 0;
        if (arrayBuffer)
            uarray = new Uint8Array(arrayBuffer);
        else
            uarray = new Uint8Array(bytes);
        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
        for (i = 0; i < bytes; i += 3) {
            //get the 3 octects in 4 ascii chars
            enc1 = _base64key.indexOf(input.charAt(j++));
            enc2 = _base64key.indexOf(input.charAt(j++));
            enc3 = _base64key.indexOf(input.charAt(j++));
            enc4 = _base64key.indexOf(input.charAt(j++));
            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;
            uarray[i] = chr1;
            if (enc3 != 64)
                uarray[i + 1] = chr2;
            if (enc4 != 64)
                uarray[i + 2] = chr3;
        }
        return uarray;
    };
    Base64.decodeArrayBuffer = function (input) {
        var bytes = (input.length / 4) * 3;
        var ab = new ArrayBuffer(bytes);
        this.decodeBuffer(input, ab);
        return ab;
    };
    return Base64;
}());
//# sourceMappingURL=Base64.js.map
/**
 * @author seacole *
 * Ajax异步请求
 */
var Ajax = /** @class */ (function () {
    function Ajax() {
    }
    Ajax.callNet = function (url, params, method, header, onSuccess, onError, responseType) {
        if (params === void 0) { params = null; }
        if (method === void 0) { method = "get"; }
        if (header === void 0) { header = null; }
        if (onSuccess === void 0) { onSuccess = null; }
        if (onError === void 0) { onError = null; }
        if (responseType === void 0) { responseType = "text"; }
        var request = new Laya.HttpRequest();
        request.on(Laya.Event.COMPLETE, this, function (event) {
            if (onSuccess) {
                onSuccess(request.data);
            }
        });
        request.on(Laya.Event.ERROR, this, function (event) {
            if (onError) {
                onError(request.data);
            }
        });
        request.on(Laya.Event.PROGRESS, this, function (event) {
        });
        if (!header)
            header = [];
        var data;
        if (method == "get") {
            header.push("Content-Type", "application/x-www-form-urlencoded");
            data = Utils.obj2query(params);
            if (data)
                url += "?" + data;
            request.send(url, null, method, responseType, header);
            log(method + " " + url);
        }
        else {
            if (params)
                data = JSON.stringify(params);
            header.push("Content-Type", "application/json");
            request.send(url, data, method, responseType, header);
            log(method + " " + url + "?" + data);
        }
    };
    Ajax.callPHPNet = function (url, params, method, header, onSuccess, onError, responseType) {
        if (params === void 0) { params = null; }
        if (method === void 0) { method = "get"; }
        if (header === void 0) { header = null; }
        if (onSuccess === void 0) { onSuccess = null; }
        if (onError === void 0) { onError = null; }
        if (responseType === void 0) { responseType = "text"; }
        var request = new Laya.HttpRequest();
        request.on(Laya.Event.COMPLETE, this, function (event) {
            if (onSuccess) {
                onSuccess(request.data);
            }
        });
        request.on(Laya.Event.ERROR, this, function (event) {
            if (onError) {
                onError(request.data);
            }
        });
        request.on(Laya.Event.PROGRESS, this, function (event) {
        });
        if (!header)
            header = [];
        var data;
        if (method == "get") {
            header.push("Content-Type", "application/x-www-form-urlencoded");
            data = Utils.obj2query(params);
            url += "?" + data;
            request.send(url, null, method, responseType, header);
            log(method + " " + url);
        }
        else {
            var data2 = void 0;
            if (params) {
                data = Utils.obj2query(params);
                data2 = JSON.stringify(params);
            }
            //cid:GameConfig.CID,channel:GameConfig.CHANNEL
            var urldata = "?" + "cid=" + GameConfig.CID + "&channel=" + GameConfig.CHANNEL;
            header.push("Content-Type", "application/json");
            request.send(url + urldata, data2, method, responseType, header);
            log(method + " " + url + urldata);
            log(method + " data:" + data2);
        }
        //post请求
        // var xhr = new XMLHttpRequest();
        // var data = { name: "ccb", pass: "123" };
        // xhr.open("post", "example.php", true);
        // // 不支持FormData的浏览器的处理 
        // if (typeof FormData == "undefined") {
        // 	xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        // }
        // xhr.send(this.postDataFormat(data));
    };
    // post请求
    //格式化post 传递的数据
    Ajax.postDataFormat = function (obj) {
        if (typeof obj != "object") {
            alert("输入的参数必须是对象");
            return;
        }
        // 支持有FormData的浏览器（Firefox 4+ , Safari 5+, Chrome和Android 3+版的Webkit）
        if (typeof FormData == "function") {
            var data = new FormData();
            for (var attr in obj) {
                data.append(attr, obj[attr]);
            }
            return data;
        }
        else {
            // 不支持FormData的浏览器的处理 
            var arr = new Array();
            var i = 0;
            for (var attr in obj) {
                arr[i] = encodeURIComponent(attr) + "=" + encodeURIComponent(obj[attr]);
                i++;
            }
            return arr.join("&");
        }
    };
    Ajax.GET = function (url, params, onSuccess, onError, header) {
        if (params === void 0) { params = null; }
        if (onSuccess === void 0) { onSuccess = null; }
        if (onError === void 0) { onError = null; }
        if (header === void 0) { header = null; }
        this.callNet(url, params, 'get', header, onSuccess, onError);
    };
    Ajax.POST = function (url, params, onSuccess, onError, header) {
        if (params === void 0) { params = null; }
        if (onSuccess === void 0) { onSuccess = null; }
        if (onError === void 0) { onError = null; }
        if (header === void 0) { header = null; }
        this.callNet(url, params, 'post', header, onSuccess, onError);
    };
    //调用商城，充值等服务时
    Ajax.PHP_GET = function (url, params, onSuccess, onError, header) {
        if (params === void 0) { params = null; }
        if (onSuccess === void 0) { onSuccess = null; }
        if (onError === void 0) { onError = null; }
        if (header === void 0) { header = null; }
        this.callPHPNet(url, params, 'get', header, onSuccess, onError);
    };
    Ajax.PHP_POST = function (url, params, onSuccess, onError, header) {
        if (params === void 0) { params = null; }
        if (onSuccess === void 0) { onSuccess = null; }
        if (onError === void 0) { onError = null; }
        if (header === void 0) { header = null; }
        this.callPHPNet(url, params, 'post', header, onSuccess, onError);
    };
    return Ajax;
}());
//# sourceMappingURL=Ajax.js.map
/**
 * @author seacole
 * 对象池
 */
var ObjectPool = /** @class */ (function () {
    function ObjectPool(value) {
        this._maxLength = 100;
        this._template = value;
        this._list = new Array();
    }
    /**
     * 从对象池借出一个对象
     * @return
     *
     */
    ObjectPool.prototype.borrowObject = function () {
        var obj;
        while (this._list.length > 0 && !obj) {
            obj = this._list.shift();
        }
        if (!obj) {
            obj = new this._template();
        }
        if (!obj) {
            return this.borrowObject();
        }
        return obj;
    };
    /**
     * 对象池内对象数目
     * @return
     *
     */
    ObjectPool.prototype.getPoolLength = function () {
        return this._list.length;
    };
    Object.defineProperty(ObjectPool.prototype, "maxLength", {
        /**
         * 对象池容量，即最多能保存的对象的个数
         * @return
         *
         */
        get: function () {
            return this._maxLength;
        },
        /**
         * 设置对象池容量，即最多能保存的对象的个数
         * @param value
         *
         */
        set: function (value) {
            if (this._maxLength != value) {
                this._maxLength = value;
                while (this._list.length > value) {
                    this._list.shift();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 归还一个对象
     * @param value
     *
     */
    ObjectPool.prototype.returnObject = function (value) {
        if (value && this._list.length < this.maxLength) {
            if (value instanceof this._template && this._list.indexOf(value) == -1) //value is _template
             {
                this._list.push(value);
                return true;
            }
            else {
                return false;
            }
        }
        return false;
    };
    /**
     * 根据对象的类获得该类的对象池
     * @param name
     * @param value
     * @return
     *
     */
    ObjectPool.getInstance = function (name, value) {
        if (!value)
            value = name;
        if (!ObjectPool._pool[name])
            ObjectPool._pool[name] = new ObjectPool(value);
        return ObjectPool._pool[name];
    };
    /**
         * 用于存储具体对象的对象池
         */
    ObjectPool._pool = [];
    return ObjectPool;
}());
//# sourceMappingURL=ObjectPool.js.map
/**
* @author seacole
* 错误报告
*/
var Reportor = /** @class */ (function () {
    function Reportor() {
    }
    Object.defineProperty(Reportor, "instance", {
        get: function () {
            if (this._instance == undefined) {
                this._instance = new Reportor();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    Reportor.prototype.start = function () {
        window.onerror = this.onWindowError;
    };
    Reportor.prototype.stop = function () {
        window.onerror = null;
    };
    Reportor.prototype.onWindowError = function (error, url, row, col) {
        if (Reportor.instance._lastError && Reportor.instance._lastError == error)
            return;
        Reportor.instance._lastError = error;
        var PF = Reportor.instance.getPf();
        var OS = Native.instance.OS;
        var MSG = url + '[' + row + ',' + col + ']\n' + error;
        var UID = server.uid;
        var GID = BaseGameData.gameType;
        var params = { PF: PF, OS: OS, MSG: MSG };
        if (UID)
            params.UID = UID;
        if (GID)
            params.GID = GID;
        webService.reportor(params);
    };
    /**
     * return 微信WEB1 WEB2 APP3
     */
    Reportor.prototype.getPf = function () {
        if (Native.instance.isWeiXin)
            return 1;
        else if (!Native.instance.isNative)
            return 2;
        else
            return 3;
    };
    return Reportor;
}());
//# sourceMappingURL=Reportor.js.map
/**
 * @author seacole
 * 事件管理器
 */
var EventManager = /** @class */ (function () {
    function EventManager() {
        this._groups = {};
    }
    Object.defineProperty(EventManager, "instance", {
        get: function () {
            if (this._instance == undefined) {
                this._instance = new EventManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    EventManager.prototype.register = function (groupName, target, eventName, thisObj, callback, params) {
        if (params === void 0) { params = []; }
        var item = new RegisterItem();
        Utils.injectProp(item, { target: target, eventName: eventName, callback: callback, thisObj: thisObj, params: params }, null, false);
        var group = this._groups[groupName];
        if (!group) {
            group = this._groups[groupName] = { enable: false, items: [] };
        }
        group.items.push(item);
    };
    EventManager.prototype.registerOnObject = function (obj, target, eventName, thisObj, callback, params) {
        if (params === void 0) { params = []; }
        this.register(obj['name'], target, eventName, thisObj, callback, params);
    };
    EventManager.prototype.enable = function (groupName) {
        var group = this._groups[groupName];
        if (group && !group.enable) {
            group.enable = true;
            group.items.forEach(function (item) {
                item.target['on'](item.eventName, item.thisObj, item.callback, item.params);
            });
        }
    };
    EventManager.prototype.enableOnObject = function (obj) {
        this.enable(obj['name']);
    };
    EventManager.prototype.disable = function (groupName) {
        var group = this._groups[groupName];
        if (group && group.enable) {
            group.enable = false;
            group.items.forEach(function (item) {
                item.target['off'](item.eventName, item.thisObj, item.callback);
            });
        }
    };
    EventManager.prototype.disableOnObject = function (obj) {
        this.disable(obj['name']);
    };
    EventManager.prototype.dump = function (groupName) {
        if (groupName === void 0) { groupName = null; }
        for (var key in this._groups) {
            var group = this._groups[key];
            console.log(key + '[' + group.items.length + ']: ' + (group.enable ? '● enable' : '○ disable'));
            console.log(group.items.map(function (item) { return item.eventName; }).join(','));
        }
    };
    return EventManager;
}());
var RegisterItem = /** @class */ (function () {
    function RegisterItem() {
    }
    return RegisterItem;
}());
//# sourceMappingURL=EventManager.js.map
/**
 * @author seacole
 * 事件抛出器
 */
var Dispatcher = /** @class */ (function () {
    function Dispatcher() {
    }
    Dispatcher.init = function () {
        Dispatcher.eventDispatcher = new Laya.EventDispatcher();
    };
    Dispatcher.dispatch = function (eventName, params) {
        if (params === void 0) { params = null; }
        Dispatcher.eventDispatcher.event(eventName, params);
    };
    Dispatcher.on = function (eventName, thisObj, callback) {
        Dispatcher.eventDispatcher.on(eventName, thisObj, callback);
    };
    Dispatcher.off = function (eventName, thisObj, callback) {
        Dispatcher.eventDispatcher.off(eventName, thisObj, callback);
    };
    return Dispatcher;
}());
//# sourceMappingURL=Dispatcher.js.map
/**
 * @author seacole
 * 层级管理器
 */
var AppStage = /** @class */ (function () {
    function AppStage(main) {
        this.bgLevel = main.addChild(new Laya.Sprite());
        // this.threeDLevel = main.addChild(new Laya.Scene()) as Laya.Scene;
        this.mainLevel = main.addChild(new Laya.Sprite());
        this.guiLevel = main.addChild(new Laya.Sprite());
        this.popupLevel = main.addChild(new Laya.Sprite());
        this.toolTipLevel = main.addChild(new Laya.Sprite());
        this.systemLevel = main.addChild(new Laya.Sprite());
        this.loadingLevel = main.addChild(new Laya.Sprite());
        this.sprites = [this.bgLevel, this.mainLevel, this.guiLevel, this.popupLevel, this.toolTipLevel, this.systemLevel, this.loadingLevel];
        main.on(Laya.Event.RESIZE, this, this.onResize);
        // this.onResize(null);
    }
    AppStage.prototype.registUnauthorized = function () {
        Dispatcher.on(EventNames.UNAUTHORIZED, this, this.onUnauthorized);
    };
    AppStage.prototype.unregistUnauthorized = function () {
        Dispatcher.off(EventNames.UNAUTHORIZED, this, this.onUnauthorized);
    };
    AppStage.prototype.onUnauthorized = function (e) {
        server.code = "";
        if (!AppControl.getInstance().currentPage)
            AppControl.getInstance().showPage(LoginPage, LoginPage.PARAMS0_FIRST_ENTER);
        else
            AppControl.getInstance().showPage(LoginPage);
        this.unregistUnauthorized();
    };
    AppStage.prototype.onResize = function (e) {
        // log("onResize1. "+ Laya.stage.screenMode);
        // if (Laya.stage.screenMode == Laya.Stage.SCREEN_HORIZONTAL) {
        //     if (Laya.Browser.width < Laya.Browser.height)
        //         Laya.stage.screenMode = Laya.Stage.SCREEN_VERTICAL;
        //     else
        //         Laya.stage.screenMode = Laya.Stage.SCREEN_HORIZONTAL;
        // }
        // else if (Laya.stage.screenMode == Laya.Stage.SCREEN_VERTICAL) {
        //     if (Laya.Browser.width > Laya.Browser.height)
        //         Laya.stage.screenMode = Laya.Stage.SCREEN_VERTICAL;
        //     else
        //         Laya.stage.screenMode = Laya.Stage.SCREEN_HORIZONTAL;
        // }
        // log("onResize2. "+ Laya.stage.screenMode+" w:"+Laya.Browser.width +" h:" + Laya.Browser.height);
        var i;
        var l;
        for (i = 0, l = this.sprites.length; i < l; i++) {
            this.sprites[i].width = AppControl.getInstance().stage.width;
            this.sprites[i].height = AppControl.getInstance().stage.height;
            this.sprites[i].mouseEnabled = true;
            this.sprites[i].mouseThrough = true;
        }
        if (this.bgLevel.numChildren)
            this.bgLevel.getChildAt(0).x = AppControl.getInstance().stage.width - ResourceConfig.BG_WIDTH >> 1;
        for (i = 0, l = this.guiLevel.numChildren; i < l; i++) {
            var child = this.guiLevel.getChildAt(i);
            child.width = AppControl.getInstance().stage.width;
            child.height = AppControl.getInstance().stage.height;
        }
    };
    AppStage.prototype.clear = function () {
        // this.threeDLevel.removeChildren();
        this.mainLevel.removeChildren();
        this.guiLevel.removeChildren();
        this.popupLevel.removeChildren();
        this.toolTipLevel.removeChildren();
        // this.systemLevel.removeChildren();
    };
    Object.defineProperty(AppStage.prototype, "BGLevel", {
        get: function () { return this.bgLevel; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppStage.prototype, "MainLevel", {
        // public get ThreeDLevel(): Laya.Scene { return this.threeDLevel; }
        get: function () { return this.mainLevel; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppStage.prototype, "GUILevel", {
        get: function () { return this.guiLevel; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppStage.prototype, "PopupLevel", {
        get: function () { return this.popupLevel; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppStage.prototype, "ToolTipLevel", {
        get: function () { return this.toolTipLevel; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppStage.prototype, "SystemLevel", {
        get: function () { return this.systemLevel; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppStage.prototype, "LoadingLevel", {
        get: function () { return this.loadingLevel; },
        enumerable: true,
        configurable: true
    });
    return AppStage;
}());
//# sourceMappingURL=AppStage.js.map
/**
* @author seacole
 * 总控制
 */
var AppControl = /** @class */ (function () {
    function AppControl() {
    }
    AppControl.getInstance = function () {
        if (!this.instance) {
            this.instance = new AppControl();
        }
        return this.instance;
    };
    AppControl.prototype.start = function (mainStage) {
        this.mainStage = mainStage;
        this.pageCache = new Object();
        this.appStage = new AppStage(mainStage);
        AppControl.getInstance().stage.on(Laya.Event.RESIZE, this, this.onResize);
    };
    AppControl.prototype.onResize = function () {
        log("onResize:" + Laya.stage.scaleMode);
    };
    AppControl.prototype.showPage = function (page) {
        var _this = this;
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        if (this.curPage != null) {
            this.curPage.clear();
        }
        // this.appStage.clear();
        this.curPage = null;
        var key = Laya.ClassUtils.getClass(page);
        if (this.pageCache.hasOwnProperty(key)) {
            this.curPage = this.pageCache[key];
        }
        if (this.curPage == null) {
            this.curPage = new page();
            this.pageCache[key] = this.curPage;
            this.curPage.loadRes.apply(this.curPage, [key, params]);
        }
        else {
            this.appStage.clear();
            AppControl.getInstance().screenMode = this.curPage.screenMode;
            //苹果蛋疼的转屏瞬间画面会拉伸
            if (Native.instance.OS == OSConfig.IOS_WEB) {
                Laya.timer.frameOnce(3, this, function () {
                    _this.curPage.addToStage.apply(_this.curPage, params);
                    _this.curPage.updateDisplayObjectList();
                });
            }
            else {
                this.curPage.addToStage.apply(this.curPage, params);
                this.curPage.updateDisplayObjectList();
            }
        }
    };
    AppControl.prototype.addBg = function (url) {
        var child;
        if (this.appStage.BGLevel.numChildren)
            child = this.appStage.BGLevel.getChildAt(0);
        else {
            child = new Laya.Image();
            child.width = ResourceConfig.BG_WIDTH;
            child.height = ResourceConfig.BG_HEIGHT;
            // child.anchorX = 0.5;
            // child.anchorY = 0.5;
            // child.centerX = 0;
            // child.centerY = 0;
            child.x = AppControl.getInstance().stage.width - ResourceConfig.BG_WIDTH >> 1;
            this.appStage.BGLevel.addChild(child);
        }
        child.source = Laya.loader.getRes(url);
    };
    AppControl.prototype.addTo3D = function (child) {
        // this.appStage.ThreeDLevel.addChild(child);
    };
    AppControl.prototype.addToMain = function (child) {
        this.appStage.MainLevel.addChild(child);
    };
    AppControl.prototype.addToUI = function (child) {
        this.appStage.GUILevel.addChild(child);
    };
    AppControl.prototype.addToPopup = function (child) {
        this.appStage.PopupLevel.addChild(child);
    };
    AppControl.prototype.addToTooltip = function (child) {
        this.appStage.ToolTipLevel.addChild(child);
    };
    AppControl.prototype.addToSystem = function (child) {
        this.appStage.SystemLevel.addChild(child);
    };
    AppControl.prototype.addToLoading = function (child) {
        this.appStage.LoadingLevel.addChild(child);
    };
    Object.defineProperty(AppControl.prototype, "stage", {
        get: function () {
            return this.mainStage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppControl.prototype, "AppStage", {
        get: function () {
            return this.appStage;
        },
        enumerable: true,
        configurable: true
    });
    AppControl.prototype.isInStage = function (posX, posY, offsetX, offsetY) {
        if (offsetX === void 0) { offsetX = 0; }
        if (offsetY === void 0) { offsetY = 0; }
        if (posX > (this.stage.width - offsetX) || posX < offsetX || posY > (this.stage.height - offsetY) || posY < offsetY)
            return false;
        else
            return true;
    };
    Object.defineProperty(AppControl.prototype, "screenMode", {
        get: function () {
            return Laya.stage.screenMode;
        },
        set: function (value) {
            if (Laya.stage.screenMode != value) {
                if (value == Laya.Stage.SCREEN_HORIZONTAL) {
                    Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_HEIGHT;
                    AppControl.getInstance().stage.height = 720;
                    NativeHelper.instance.setOrientationLandscape();
                }
                else if (value == Laya.Stage.SCREEN_VERTICAL) {
                    Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_WIDTH;
                    AppControl.getInstance().stage.width = 720;
                    NativeHelper.instance.setOrientationPortrait();
                }
                Laya.stage.screenMode = value;
                Laya.stage.setScreenSize(Laya.Browser.clientWidth * Laya.Browser.pixelRatio, Laya.Browser.clientHeight * Laya.Browser.pixelRatio);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppControl.prototype, "currentPage", {
        get: function () {
            return this.curPage;
        },
        enumerable: true,
        configurable: true
    });
    AppControl.prototype.resetScreen = function () {
        var per;
        if (AppControl.getInstance().stage.width > AppControl.getInstance().stage.height)
            per = AppControl.getInstance().stage.width / AppControl.getInstance().stage.height;
        else
            per = AppControl.getInstance().stage.height / AppControl.getInstance().stage.width;
        if (per <= 1.15) {
            Laya.timer.once(200, this, function () {
                Laya.stage.setScreenSize(Laya.Browser.clientWidth * Laya.Browser.pixelRatio, Laya.Browser.clientHeight * Laya.Browser.pixelRatio);
            });
        }
    };
    return AppControl;
}());
//# sourceMappingURL=AppControl.js.map
/*
* @author seacole
 * 俱乐部数据管理
*/
var club;
(function (club_1) {
    var ClubManager = /** @class */ (function () {
        function ClubManager() {
        }
        Object.defineProperty(ClubManager, "myClubs", {
            get: function () {
                return ClubManager._myClubs;
            },
            enumerable: true,
            configurable: true
        });
        ClubManager.clearAll = function () {
            ClubManager._myClubs = [];
        };
        /**
         * cid
         * title
         * role 100创始人
         * currmem 当前人数
         * maxmem 总人数
         * gcnt 比赛数
         *
         * game_page
         * game_page_cnt
         * games
         *
         * result_page
         * result_page_cnt
         * results
         *
         * member_page
         * member_page_cnt
         * members
         *
         * diamond 俱乐部钻石
         * paytype 0成员自费 1俱乐部付费
         */
        ClubManager.getClubByCid = function (cid) {
            for (var i = 0; i < ClubManager._myClubs.length; i++) {
                if (cid == ClubManager._myClubs[i].cid)
                    return ClubManager._myClubs[i];
            }
            return null;
        };
        ClubManager.isInClub = function (cid) {
            if (ClubManager._myClubs) {
                for (var i = 0; i < ClubManager._myClubs.length; i++) {
                    if (ClubManager._myClubs[i].cid == cid)
                        return true;
                }
            }
            return false;
        };
        ClubManager.removeGames = function (cid) {
            var club = ClubManager.getClubByCid(cid);
            if (club) {
                club.games = null;
                club.game_page = 0;
                club.game_page_cnt = 0;
            }
        };
        ClubManager.removeGame = function (cid, code) {
            var club = ClubManager.getClubByCid(cid);
            if (club) {
                if (club.games && club.games.length) {
                    for (var i = 0; i < club.games.length; i++) {
                        if (club.games[i].code == code) {
                            club.games.splice(i, 1);
                            Dispatcher.dispatch(EventNames.UPDATE_MY_CLUB_GAMES_LIST, cid);
                            break;
                        }
                    }
                }
            }
        };
        ClubManager.removeResults = function (cid) {
            var club = ClubManager.getClubByCid(cid);
            if (club) {
                club.results = null;
                club.result_page = 0;
                club.result_page_cnt = 0;
            }
        };
        ClubManager.removeMembers = function (cid) {
            var club = ClubManager.getClubByCid(cid);
            if (club) {
                club.members = null;
                club.member_page = 0;
                club.member_page_cnt = 0;
            }
        };
        ClubManager.isCreator = function (role) {
            return role >= 100;
        };
        ClubManager.removeClub = function (cid) {
            for (var i = 0; i < ClubManager._myClubs.length; i++) {
                if (cid == ClubManager._myClubs[i].cid) {
                    ClubManager._myClubs.splice(i, 1);
                    break;
                }
            }
            Dispatcher.dispatch(EventNames.UPDATE_MY_CLUB_LIST);
        };
        ClubManager.onSortClub = function (a, b) {
            if (!a.hasOwnProperty("role"))
                a.role = 0;
            if (!b.hasOwnProperty("role"))
                b.role = 0;
            if (a.role >= 100 && b.role < 100)
                return -1;
            else if (a.role < 100 && b.role >= 100)
                return 1;
            else
                return 0;
        };
        ClubManager.onSortGames = function (a, b) {
            if (!a.hasOwnProperty("gid"))
                a.gid = 0;
            if (!b.hasOwnProperty("gid"))
                b.gid = 0;
            if (a.gid > b.gid)
                return -1;
            else if (a.gid < b.gid)
                return 1;
            else
                return 0;
        };
        ClubManager.onSortResults = function (a, b) {
            if (!a.hasOwnProperty("end_time"))
                a.end_time = 0;
            if (!b.hasOwnProperty("end_time"))
                b.end_time = 0;
            if (a.end_time > b.end_time)
                return -1;
            else if (a.end_time < b.end_time)
                return 1;
            else
                return 0;
        };
        ClubManager.getMyClubCount = function () {
            if (ClubManager._myClubs) {
                var count = 0;
                for (var i = 0; i < ClubManager._myClubs.length; i++) {
                    if (ClubManager.isCreator(ClubManager._myClubs[i].role)) {
                        count++;
                    }
                }
                return count;
            }
            return 0;
        };
        ClubManager.isClubFull = function () {
            return ClubManager.getMyClubCount() >= 3;
        };
        // ---------------------后面是web接口-----------------------------------
        /**
         * 获取我的俱乐部列表
         */
        ClubManager.getMyClub = function () {
            clubWebService.getMyClub(function (response) {
                if (response.code == 0) {
                    if (!ClubManager._myClubs)
                        ClubManager._myClubs = [];
                    //深度拷贝	
                    for (var i = 0; i < response.data.length; i++) {
                        var flag = true;
                        for (var j = 0; j < ClubManager._myClubs.length; j++) {
                            if (ClubManager._myClubs[j].cid == response.data[i].cid) {
                                flag = false;
                                Utils.deepCopy(response.data[i], ClubManager._myClubs[j]);
                                break;
                            }
                        }
                        if (flag)
                            ClubManager._myClubs.push(response.data[i]);
                    }
                    //删除没有的
                    for (var j = 0; j < ClubManager._myClubs.length;) {
                        var flag = true;
                        for (var i = 0; i < response.data.length; i++) {
                            if (ClubManager._myClubs[j].cid == response.data[i].cid) {
                                flag = false;
                            }
                        }
                        if (flag)
                            ClubManager._myClubs.splice(j, 1);
                        else
                            j++;
                    }
                    ClubManager._myClubs.sort(ClubManager.onSortClub);
                    Dispatcher.dispatch(EventNames.UPDATE_MY_CLUB_LIST);
                }
            });
        };
        ClubManager.createClub = function (title) {
            clubWebService.createClub(title, function (response) {
                if (response.code == 0) {
                    HintCtrl.instance.show(GameConfig.language.create_succ);
                    if (!ClubManager._myClubs)
                        ClubManager._myClubs = [];
                    Dispatcher.dispatch(EventNames.CLUB_CREATE_SUCC);
                    // ClubManager._myClubs.push(response.data);
                    ClubManager.getMyClub();
                }
                else {
                    if (!ClubManager.dealClubErrorCode(response.code))
                        AlertInGameCtrl.instance.show(StringUtils.format(GameConfig.language.create_fail, response.code), null, 0, false);
                }
            });
        };
        ClubManager.searchClub = function (cid) {
            clubWebService.searchClub(cid, function (response) {
                if (response.code == 0) {
                    response.cid = cid;
                    Dispatcher.dispatch(EventNames.CLUB_SEARCH_SUCC, response);
                }
                else {
                    if (!ClubManager.dealClubErrorCode(response.code))
                        AlertInGameCtrl.instance.show(StringUtils.format(GameConfig.language.search_fail, response.code), null, 0, false);
                }
            });
        };
        ClubManager.joinClub = function (cid) {
            clubWebService.joinClub(cid, function (response) {
                if (response.code == 0) {
                    HintCtrl.instance.show(GameConfig.language.join_club_succ);
                    if (!ClubManager._myClubs)
                        ClubManager._myClubs = [];
                    Dispatcher.dispatch(EventNames.CLUB_JOIN_SUCC);
                    // ClubManager._myClubs.push(response.data);
                    ClubManager.getMyClub();
                }
                else {
                    if (!ClubManager.dealClubErrorCode(response.code))
                        AlertInGameCtrl.instance.show(StringUtils.format(GameConfig.language.join_club_fail, response.code), null, 0, false);
                }
            });
        };
        // {"cnt":"1","grule":"{\"max_player\":3,\"max_hand_cnt\":8,\"gps\":1,\"black_call\":0,\"no_3_double\":0,\"has_boom\":0,\"boom_max\":3,\"charge_type\":0}","code":{"code":181959},"gid":"1404","status":"0","gtype":"2"}
        // status >0 表示开赛
        ClubManager.getGameList = function (cid, page, isDelete) {
            if (page === void 0) { page = 0; }
            if (isDelete === void 0) { isDelete = false; }
            var c = ClubManager.getClubByCid(cid);
            if (!c)
                return;
            var p = ClubManager.getPage(page, c.game_page, c.game_page_cnt);
            if (p != -1) {
                clubWebService.getGameList(cid, p, function (response) {
                    if (response.code == 0) {
                        var club = ClubManager.getClubByCid(response.cid ? response.cid : cid);
                        if (club) {
                            if (isDelete) {
                                club.game_page = 0;
                                club.games = [];
                            }
                            if (!club.games)
                                club.games = [];
                            if (response.data && response.data.length) {
                                for (var i = 0; i < response.data.length; i++) {
                                    var flag = true;
                                    for (var j = 0; j < club.games.length; j++) {
                                        if (club.games[j].gid == response.data[i].gid) {
                                            flag = false;
                                            Utils.deepCopy(response.data[i], club.games[j]);
                                            break;
                                        }
                                    }
                                    if (flag)
                                        club.games.push(response.data[i]);
                                }
                                club.games.sort(ClubManager.onSortGames);
                            }
                            if (!club.game_page || club.game_page < response.page)
                                club.game_page = response.page;
                            club.game_page_cnt = response.page_cnt;
                            Dispatcher.dispatch(EventNames.UPDATE_MY_CLUB_GAMES_LIST, cid);
                        }
                    }
                });
            }
        };
        ClubManager.getResultList = function (cid, page) {
            if (page === void 0) { page = 0; }
            var c = ClubManager.getClubByCid(cid);
            if (!c)
                return;
            var p = ClubManager.getPage(page, c.result_page, c.result_page_cnt);
            if (p != -1) {
                clubWebService.getResultList(cid, p, function (response) {
                    if (response.code == 0) {
                        var club = ClubManager.getClubByCid(response.cid ? response.cid : cid);
                        if (club) {
                            if (!club.results)
                                club.results = [];
                            if (response.data && response.data.length) {
                                for (var i = 0; i < response.data.length; i++) {
                                    var flag = true;
                                    for (var j = 0; j < club.results.length; j++) {
                                        if (club.results[j].gid == response.data[i].gid) {
                                            flag = false;
                                            Utils.deepCopy(response.data[i], club.results[j]);
                                            break;
                                        }
                                    }
                                    if (flag)
                                        club.results.push(response.data[i]);
                                }
                                club.results.sort(ClubManager.onSortResults);
                            }
                            if (!club.result_page || club.result_page < response.page)
                                club.result_page = response.page;
                            club.result_page_cnt = response.page_cnt;
                            Dispatcher.dispatch(EventNames.UPDATE_MY_CLUB_RESULTS_LIST, cid);
                        }
                    }
                });
            }
        };
        ClubManager.getInfo = function (cid) {
            clubWebService.getClubInfo(cid, function (response) {
                if (response.code == 0) {
                    var club = ClubManager.getClubByCid(response.cid ? response.cid : cid);
                    if (club) {
                        club.diamond = response.diamond;
                        club.paytype = response.paytype ? response.paytype : 0;
                        Dispatcher.dispatch(EventNames.UPDATE_MY_CLUB_DIAMOND, cid);
                    }
                }
                else {
                    ClubManager.dealClubErrorCode(response.code);
                    ClubManager.removeClub(cid);
                    Dispatcher.dispatch(EventNames.CLUB_DELETE_SUCC, cid);
                }
            });
        };
        ClubManager.getMemberList = function (cid, page) {
            if (page === void 0) { page = 0; }
            var c = ClubManager.getClubByCid(cid);
            if (!c)
                return;
            var p = ClubManager.getPage(page, c.member_page, c.member_page_cnt);
            if (p != -1) {
                clubWebService.getMembersList(cid, p, function (response) {
                    if (response.code == 0) {
                        var club = ClubManager.getClubByCid(response.cid ? response.cid : cid);
                        if (club) {
                            // 测试用
                            // response.data=response.data.concat(response.data);
                            // response.data=response.data.concat(response.data);
                            // response.data=response.data.concat(response.data);					
                            if (!club.member_page || club.member_page < response.page)
                                club.member_page = response.page;
                            club.member_page_cnt = response.page_cnt;
                            if (!club.members)
                                club.members = [];
                            if (response.data && response.data.length) {
                                var uids = [];
                                for (var i = 0; i < response.data.length; i++) {
                                    var role = RoleManager.getRole(response.data[i].uid);
                                    if (role) {
                                        Utils.deepCopy(role, response.data[i]);
                                    }
                                    else
                                        uids.push(response.data[i].uid);
                                }
                                for (var i = 0; i < response.data.length; i++) {
                                    var flag = true;
                                    for (var j = 0; j < club.members.length; j++) {
                                        if (club.members[j].uid == response.data[i].uid) {
                                            flag = false;
                                            Utils.deepCopy(response.data[i], club.members[j]);
                                            break;
                                        }
                                    }
                                    if (flag)
                                        club.members.push(response.data[i]);
                                }
                                ClubManager.getMemberInfos(club.cid, uids);
                            }
                            Dispatcher.dispatch(EventNames.UPDATE_MY_CLUB_MEMBERS_LIST, cid);
                        }
                    }
                });
            }
        };
        ClubManager.getMemberInfos = function (cid, uids) {
            if (uids && uids.length) {
                webService.getUserInfos(uids, function (response) {
                    if (response.code == 0) {
                        var club = ClubManager.getClubByCid(cid);
                        if (club) {
                            RoleManager.addRoleByInfos(response.data);
                            for (var i = 0; i < response.data.length; i++) {
                                for (var j = 0; j < club.members.length; j++) {
                                    if (club.members[j].uid == response.data[i].uid) {
                                        Utils.deepCopy(response.data[i], club.members[j]);
                                        break;
                                    }
                                }
                            }
                            Dispatcher.dispatch(EventNames.UPDATE_MY_CLUB_MEMBERS_LIST, cid);
                        }
                    }
                });
            }
        };
        ClubManager.renameClub = function (cid, title) {
            clubWebService.renameClub(cid, title, function (response) {
                if (response.code == 0) {
                    var club = ClubManager.getClubByCid(cid);
                    if (club) {
                        HintCtrl.instance.show(GameConfig.language.modify_succ);
                        club.title = title;
                        Dispatcher.dispatch(EventNames.CLUB_RENAME_SUCC, cid);
                        Dispatcher.dispatch(EventNames.UPDATE_MY_CLUB_LIST);
                    }
                }
                else {
                    if (!ClubManager.dealClubErrorCode(response.code))
                        AlertInGameCtrl.instance.show(StringUtils.format(GameConfig.language.modify_fail, response.code), null, 0, false);
                }
            });
        };
        ClubManager.quitClub = function (cid) {
            clubWebService.quitClub(cid, function (response) {
                if (response.code == 0) {
                    HintCtrl.instance.show(GameConfig.language.quit_succ);
                    Dispatcher.dispatch(EventNames.CLUB_QUIT_SUCC, cid);
                    ClubManager.removeClub(cid);
                }
                else {
                    if (!ClubManager.dealClubErrorCode(response.code))
                        AlertInGameCtrl.instance.show(StringUtils.format(GameConfig.language.quit_fail, response.code), null, 0, false);
                }
            });
        };
        ClubManager.setClubPaytype = function (cid, paytype) {
            clubWebService.setClubPaytype(cid, paytype, function (response) {
                if (response.code == 0) {
                    var club = ClubManager.getClubByCid(cid);
                    if (club) {
                        HintCtrl.instance.show(StringUtils.format(GameConfig.language.paytype_succ, GameConfig.language.paytype[paytype]));
                        club.paytype = paytype;
                        Dispatcher.dispatch(EventNames.CLUB_PAY_TYPE_CHANGE, cid);
                    }
                }
                else {
                    if (!ClubManager.dealClubErrorCode(response.code))
                        AlertInGameCtrl.instance.show(StringUtils.format(GameConfig.language.paytype_fail, response.code), null, 0, false);
                }
            });
        };
        ClubManager.deleteClub = function (cid) {
            clubWebService.deleteClub(cid, function (response) {
                if (response.code == 0) {
                    HintCtrl.instance.show(GameConfig.language.delete_succ);
                    Dispatcher.dispatch(EventNames.CLUB_DELETE_SUCC, cid);
                    ClubManager.removeClub(cid);
                }
                else {
                    if (!ClubManager.dealClubErrorCode(response.code))
                        AlertInGameCtrl.instance.show(StringUtils.format(GameConfig.language.delete_fail, response.code), null, 0, false);
                }
            });
        };
        ClubManager.kick = function (cid, uid) {
            clubWebService.kick(cid, uid, function (response) {
                if (response.code == 0) {
                    var club = ClubManager.getClubByCid(cid);
                    if (club) {
                        HintCtrl.instance.show(GameConfig.language.kick_succ);
                        if (club.members) {
                            for (var i = 0; i < club.members.length; i++) {
                                if (club.members[i].uid == uid) {
                                    club.members.splice(i, 1);
                                    break;
                                }
                            }
                        }
                        if (club.currmem)
                            club.currmem--;
                        Dispatcher.dispatch(EventNames.CLUB_KICK_OUT_SUCC, [cid, uid]);
                        Dispatcher.dispatch(EventNames.UPDATE_MY_CLUB_MEMBERS_LIST, cid);
                        Dispatcher.dispatch(EventNames.UPDATE_MY_CLUB_LIST);
                    }
                }
                else {
                    if (!ClubManager.dealClubErrorCode(response.code))
                        AlertInGameCtrl.instance.show(StringUtils.format(GameConfig.language.kick_fail, response.code), null, 0, false);
                }
            });
        };
        ClubManager.recharge = function (cid, cnt) {
            clubWebService.clubRecharge(cid, cnt, function (response) {
                if (response.code == 0) {
                    var club = ClubManager.getClubByCid(cid);
                    if (club) {
                        HintCtrl.instance.show(GameConfig.language.club_recharge_succ);
                        if (club.diamond)
                            club.diamond += cnt;
                        else
                            club.diamond = cnt;
                        Dispatcher.dispatch(EventNames.CLUB_RECHARGE_SUCC, cid);
                        GameLogic.selfData.diamond -= cnt;
                        Dispatcher.dispatch(EventNames.REFRESH_ROLE_INFO);
                    }
                }
                else {
                    if (!ClubManager.dealClubErrorCode(response.code))
                        AlertInGameCtrl.instance.show(StringUtils.format(GameConfig.language.club_recharge_fail, response.code), null, 0, false);
                }
            });
        };
        ClubManager.getPage = function (page, currPage, maxPage) {
            if (page) {
                return page;
            }
            else {
                if (currPage >= maxPage)
                    return -1;
                else
                    return currPage + 1;
            }
        };
        ClubManager.dealClubErrorCode = function (code) {
            var str = GameConfig.language.club_web_error_code[code];
            if (str) {
                AlertInGameCtrl.instance.show(str, null, 0, false);
                return true;
            }
            return false;
        };
        return ClubManager;
    }());
    club_1.ClubManager = ClubManager;
})(club || (club = {}));
//# sourceMappingURL=ClubManager.js.map
// TypeScript file
var PlaySheet = /** @class */ (function () {
    function PlaySheet() {
        this.first = true;
        this["name"] = "PlaySheet";
    }
    Object.defineProperty(PlaySheet, "instance", {
        get: function () {
            if (this._instance == undefined) {
                this._instance = new PlaySheet();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    // public loadData(){
    //     var testPath ="http://10.10.10.100:8888/history/video?vid=8ba9b6cdf26ffee97e74b62563234044";
    //     Laya.loader.load(testPath, Laya.Handler.create(this,this.init), null, Laya.Loader.BUFFER)
    // }
    PlaySheet.prototype.init = function (sheetData) {
        this.stop();
        this.netmsgs = [];
        //    var testPath ="res/t.bin";
        //     sheetData = Laya.Loader.getRes(testPath);
        //     console.log(sheetData)
        var bytes = new Laya.Byte();
        bytes.writeArrayBuffer(sheetData);
        bytes.pos = 0;
        bytes.endian = Laya.Socket.BIG_ENDIAN;
        console.log(bytes.getUint8Array(bytes.pos, 4));
        console.log(bytes.getUint8Array(bytes.pos, 4));
        console.log(bytes.getUint8Array(bytes.pos, 4)); //time
        // console.log(bytes.getUint8Array(bytes.pos,4))//uid
        this.packageDecode(bytes);
        // this.netmsgs = msg.data;
        // BaseGameData.selfSeatid = msg.uid
        //this.netmsgs = msginfo;
        if (!this.netmsgs) {
            return;
        }
        console.info(this.netmsgs);
        this.initSheetInfo();
        //  for (var k in msginfo) {
        //      this.netmsgs.push(msginfo[k]);
        //  }
        this.pauseTargets = null;
        this.updateHandler = null;
        var msg = this.netmsgs[1];
        if (!msg)
            return;
        this.startTime = msg.time;
        this.speed = 1;
        BaseGameData.maxPlayer = this.netmsgs[1].msg.players.length;
        var offsetTime = 0;
        // if (this.first) {
        //     for (var k in this.netmsgs) {
        //         var info = this.netmsgs[k]
        //         info.time += offsetTime;
        //         switch (info.name) {
        //             case "game.GameStartNtf":
        //                 // offsetTime += 0.09 * this.playerCount;
        //                 break;
        //             case "game.AddCardNtf":
        //                 offsetTime += 0.18 * this.playerCount;
        //                 break;
        //             case "game.PoolBetNtf":
        //                 offsetTime += 0.5;
        //                 break;
        //             case "game.PoolCardsNtf":
        //                 offsetTime += 0.5;
        //                 break;
        //             case "game.BetNtf":
        //                 offsetTime += 0.3;
        //                 break;
        //             case "game.FoldNtf":
        //                 offsetTime += 0.5;
        //                 break;
        //             case "game.PlayerOptNtf":
        //                 if (offsetTime >= 0 && (this.netmsgs[parseInt(k) + parseInt("1")].time - info.time) > 15) {
        //                     offsetTime = offsetTime - this.netmsgs[parseInt(k) + parseInt("1")].time + info.time + 15
        //                 };
        //                 break;
        //         }
        //     }
        // }
        this.first = false;
        EventManager.instance.registerOnObject(this, this, "nextStep", this, this.gotoNextStep);
        var len = this.netmsgs.length - 1;
        this.totalTime = Math.ceil(this.netmsgs[len].time - this.startTime + 5.5);
        var ruleMsg = this.netmsgs[0];
        var startMsg = this.netmsgs[1];
        this.nextMsgId = 2;
        // Dispatcher.dispatch(msg.name,msg.msg);
        DialogManager.instance.removeDialog("gameend");
        Laya.timer.frameOnce(1, this, function () {
            server.dispatchMessage(startMsg.name, startMsg.msg);
            server.dispatchMessage(ruleMsg.name, ruleMsg.msg);
        });
    };
    PlaySheet.prototype.packageDecode = function (data) {
        if (data.length - data.pos < 6) {
            return;
        }
        var time = data.getInt32();
        var len = data.getInt16();
        var cmd = data.getInt16();
        var netData = data.getUint8Array(data.pos, len - 2);
        var msg = server.onSheetData(cmd, netData);
        this.netmsgs.push({ time: time, name: msg.name, msg: msg.msg });
        this.packageDecode(data);
    };
    PlaySheet.prototype.initSheetInfo = function () {
        // var msg = this.netmsgs[0]
        // if (msg.name != "game.RecordInfo") return
        // var startMsg = this.netmsgs[1];
        // var table_index =  msg.msg.table_index || 0;
        // if (msg.msg.table_index) table_index = msg.msg.table_index;
        // var sheetNetMsg = {playerinfo : [], maxplayer : msg.msg.maxplayer || 9, tableIndex : table_index};
        // var sheetInfoMsg = {name : "game.SheetInfo", time : startMsg.time, msg : sheetNetMsg};
        // for (var k in startMsg.msg.playerinfo) {
        //     var p = startMsg.msg.playerinfo[k];
        //     var info = {};
        //     info["uid"] = p.uid;
        //     info["seatid"] = p.seatid;
        //     info["gold"] = p.gold;
        //     info["bet"] = p.bet;
        //     info["ranking"] = p.ranking;
        //     sheetNetMsg.playerinfo[k] = p;
        // }
        // this.netmsgs[0] = sheetInfoMsg;
        // this.sheetInfo = msg.msg;
        // this.sheetInfo.ante_mode = 0;
        // this.sheetInfo.sblinds = msg.msg.sblinds;
        // this.sheetInfo.game_mode = msg.msg.game_mode;
        // this.sheetInfo.titl_mode = msg.msg.insure_mode;
        // this.play();
    };
    PlaySheet.prototype.play = function () {
        this.timer = 0;
        // this.gotoNextStep();
        // this.unschedule(this.update);
        // this.schedule(this.update, 0.1);
        Laya.timer.loop(100, this, this.update);
    };
    PlaySheet.prototype.update = function () {
        this.timer = this.timer + 0.1;
        this.checkNextMsgTime();
        // this.gotoNextStep();
        if (this.updateCB) {
            this.updateCB(this.timer);
        }
    };
    PlaySheet.prototype.pause = function () {
        // var actionManager = cc.director.getActionManager();
        // this.pauseTargets = actionManager.pauseAllRunningActions();
        // this.unschedule(this.update)
        // Laya.stage.renderingEnabled = false
        Laya.timer.clearAll(this);
    };
    PlaySheet.prototype.restart = function () {
        // Laya.stage.renderingEnabled = true
        // if (this.pauseTargets) {
        //     var actionManager = cc.director.getActionManager();
        //     for (var k in this.pauseTargets) {
        //         var v = this.pauseTargets[k];
        //         actionManager.resumeTarget(v);
        //     }
        //     this.pauseTargets = null;
        // }
        // this.unschedule(this.update);
        // this.update();
        this.gotoNextStep();
        // this.schedule(this.update, 0.1);
        Laya.timer.loop(100, this, this.update);
    };
    PlaySheet.prototype.resume = function () {
        this.update();
        Laya.timer.loop(100, this, this.update);
    };
    PlaySheet.prototype.stop = function () {
        Laya.timer.clearAll(this);
    };
    PlaySheet.prototype.setSpeed = function (speed) {
        this.speed = speed;
    };
    PlaySheet.prototype.getTotalTime = function () {
        return this.totalTime;
    };
    PlaySheet.prototype.getRelativeTime = function (i) {
        var msg = this.netmsgs[i];
        if (!msg) {
            return;
        }
        return msg.time - this.startTime;
    };
    PlaySheet.prototype.gotoLast = function () {
        if (this.pauseTargets)
            return;
        this.nextMsgId = this.nextMsgId - 1 > 1 ? this.nextMsgId - 1 : 1;
        if (!this.nextMsgId || !this.netmsgs[this.nextMsgId]) {
            return;
        }
        this.stopAndGoToMsg(this.nextMsgId);
    };
    PlaySheet.prototype.gotoNext = function () {
        if (this.pauseTargets)
            return;
        this.nextMsgId = this.nextMsgId + 1 >= this.netmsgs.length ? this.nextMsgId : this.nextMsgId + 1;
        if (!this.nextMsgId || !this.netmsgs[this.nextMsgId]) {
            return;
        }
        this.stopAndGoToMsg(this.nextMsgId);
    };
    PlaySheet.prototype.gotoNextStep = function () {
        if (this.pauseTargets)
            return;
        if (!this.nextMsgId || !this.netmsgs[this.nextMsgId]) {
            return;
        }
        var time = this.getRelativeTime(this.nextMsgId);
        var msg = this.netmsgs[this.nextMsgId];
        var delay = 0;
        // if ((msg.name == "game.BetNtf" || msg.name == "game.FoldNtf" || msg.name == "game.InsureNtf" || msg.name == "game.PayInsuranceNtf" || msg.name == "game.GameEndNtf" || msg.name == "game.AskInsureNtf" || msg.name == "game.PoolCardsNtf") && (time - this.timer - 0.1) > 0){
        //     delay = time - this.timer - 0.1;
        // }
        this.nextMsgId = parseInt(this.nextMsgId) + parseInt("1");
        // this.scheduleOnce(function(){
        Laya.timer.once(delay * 1000, this, function () {
            server.dispatchMessage(msg.name, msg.msg);
            // Dispatcher.dispatch(msg.name, msg.msg);
        });
    };
    PlaySheet.prototype.stopAndGoToMsg = function (id) {
        var msg = this.netmsgs[id];
        //console.info(msg);
        if (!msg)
            return;
        Laya.timer.clearAll(this);
        BaseGameData.discards = [];
        for (var i = 0; i < id; i++) {
            var msg = this.netmsgs[i];
            msg.msg.noAni = true;
            // Dispatcher.dispatch(msg.name, msg.msg);
            if (msg.name == "game.TableInfoNtf" || msg.name == "game.ReconnectInfo" || msg.name == "game.OfflineNtf" || msg.name == "game.PlayerChatNtf") {
                continue;
            }
            server.dispatchMessage(msg.name, msg.msg);
        }
        Laya.timer.frameOnce(1, this, function () {
            server.dispatchMessage("game.updateTable", {});
            this.timer = this.getRelativeTime(id);
            this.nextMsgId = id;
        });
        // var msg = this.netmsgs[this.nextMsgId];
        // Laya.timer.once(100, this, function(){
        //     Dispatcher.dispatch(msg.name, {name: msg.name, netmsg: msg.msg, speed: this.speed});
        // });
    };
    PlaySheet.prototype.stopAndGoToTime = function (time) {
        if (time <= 0) {
            this.stopAndGoToMsg(0);
        }
        else if (time > this.getRelativeTime(this.netmsgs.length - 1)) {
            this.stopAndGoToMsg(this.netmsgs.length - 1);
        }
        else {
            var i;
            for (var k in this.netmsgs) {
                if (this.getRelativeTime(k) >= time) {
                    i = k;
                    break;
                }
            }
            var pre_time = this.getRelativeTime(i - 1);
            var after_time = this.getRelativeTime(i);
            if ((after_time - time) < (time - pre_time)) {
                this.stopAndGoToMsg(i);
            }
            else {
                this.stopAndGoToMsg(i - 1);
            }
        }
    };
    PlaySheet.prototype.checkNextMsgTime = function () {
        // console.info(this.netmsgs[this.nextMsgId]);
        if (!this.nextMsgId || !this.netmsgs[this.nextMsgId]) {
            return;
        }
        var msg = this.netmsgs[this.nextMsgId];
        if (msg.name == "game.TableInfoNtf" || msg.name == "game.ReconnectInfo" || msg.name == "game.OfflineNtf") {
            this.nextMsgId = parseInt(this.nextMsgId) + parseInt("1");
            return;
        }
        var deltaT = this.getRelativeTime(this.nextMsgId) - this.timer;
        if (deltaT <= 0) {
            console.info(msg);
            server.dispatchMessage(msg.name, msg.msg);
            this.nextMsgId = parseInt(this.nextMsgId) + parseInt("1");
            this.checkNextMsgTime();
        }
    };
    PlaySheet.prototype.onUpdateCallBack = function (callback) {
        this.updateCB = callback;
    };
    return PlaySheet;
}());
//# sourceMappingURL=PlaySheet.js.map
/*
* @author seacole
* 弱提示
*/
var HintCtrl = /** @class */ (function () {
    function HintCtrl() {
    }
    Object.defineProperty(HintCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new HintCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    HintCtrl.prototype.start = function (loadData) {
    };
    /**
     * show
     * @param msg 具体内容
     */
    HintCtrl.prototype.show = function (msg) {
        this.beforeShow({ msg: msg });
    };
    /**
    * show
    * @param msg 具体内容
    */
    // public showById(id: number, params: Array<any> = null): void {
    //     this.beforeShow(U3dPosiUtils.getInfoFromU3dHint(id, params));
    // }
    HintCtrl.prototype.beforeShow = function (data) {
        if (!this._ui) {
            this._ui = new ui.components.hint.HintUI();
        }
        this.onShow(data);
    };
    HintCtrl.prototype.onShow = function (data) {
        Laya.Tween.clearTween(this._ui);
        this._ui._lab.width = AppControl.getInstance().stage.width - 40;
        this._ui.width = this._ui._lab.width;
        this._ui._lab.style.align = "center";
        if (data.hasOwnProperty("size") && data.size)
            this._ui._lab.style.fontSize = data.size;
        else
            this._ui._lab.style.fontSize = 24;
        this._ui._lab.style.color = "#ffffff";
        this._ui._lab.innerHTML = data["msg"];
        if (!this._ui.parent)
            AppControl.getInstance().addToPopup(this._ui);
        this._ui._back.width = this._ui._lab.contextWidth + 40;
        this._ui._back.height = this._ui._lab.contextHeight + 30;
        this._ui.x = AppControl.getInstance().stage.width - this._ui.width >> 1;
        this._ui.y = AppControl.getInstance().stage.height - 500;
        this._ui.alpha = 0;
        // var idArr: Array<number> = GameConfig.getConfigIdByEffectId(EffectConfig.EFFECT_HINT);
        // EffectManager.instance.addEffect(this._hint, idArr[0],'','',this._hint.width * 0.5, this._hint._lab.y+  this._hint._lab.contextHeight* 0.5);
        Laya.Tween.to(this._ui, { alpha: 1 }, 500, Laya.Ease.linearNone, Laya.Handler.create(this, this.step1));
        AppControl.getInstance().stage.on(Laya.Event.RESIZE, this, this.onResize);
    };
    HintCtrl.prototype.onResize = function () {
        this._ui.x = AppControl.getInstance().stage.width - this._ui.width >> 1;
    };
    HintCtrl.prototype.step1 = function () {
        Laya.Tween.to(this._ui, { alpha: 0 }, 1000, Laya.Ease.linearNone, Laya.Handler.create(this, this.step2), 1500);
    };
    HintCtrl.prototype.step2 = function () {
        Laya.Tween.clearTween(this._ui);
        this._ui.removeSelf();
    };
    return HintCtrl;
}());
//# sourceMappingURL=HintCtrl.js.map
var WaKeng = /** @class */ (function () {
    function WaKeng() {
    }
    WaKeng.createInfo = [{ "key": "max_player", "value": 3 },
        { "name": "countSelect", "title": "局数", "key": "max_hand_cnt", "texts": "8局,16局", "values": [8, 16], "value": 8, "cost": 1, "des": ["8局", "16局"] },
        { "name": "gps", "key": "gps", "texts": "开启防作弊功能", "values": [0, 1], "value": 1, "des": ["", "防作弊"] },
        { "name": "chooseAndSelect", "title": "玩法", "info": [
                { "name": "select", "title": "玩法", "key": "black_call", "texts": "叫分,黑挖", "values": [0, 1], "value": 0, "des": ["叫分", "黑挖"] },
                { "name": "choose", "title": "玩法选择", "key": "no_3_double", "texts": "无3翻倍", "values": [0, 1], "value": 0, "des": ["", "无3翻倍"] },
            ], "space": 2, },
        { "name": "select", "title": "炸弹", "key": "has_boom", "texts": "不带炸弹,带炸弹", "values": [0, 1], "value": 0, "des": ["不带炸弹", "带炸弹"] },
        { "name": "countSelect", "title": "炸弹倍数", "key": "boom_max", "texts": "3炸,不限", "values": [3, 999], "value": 3, "des": ["3炸", "不限"] },
        { "name": "chargeSelect", "title": "收费方式", "key": "charge_type", "texts": ["房主支付", "AA支付"], "values": [0, 1], "value": 0, "des": ["房主支付", "AA支付"] },
    ];
    WaKeng.cost = 0;
    WaKeng.costDivide = 3;
    WaKeng.costs = [0, 48];
    return WaKeng;
}());
//# sourceMappingURL=WaKeng.js.map
var TongluMj = /** @class */ (function () {
    function TongluMj() {
    }
    TongluMj.createInfo = [
        { "name": "countSelect", "title": "局数", "key": "max_hand_cnt", "texts": "6局,12局,30片,50片", "values": [6, 12, 30, 50], "value": 6, "cost": 1, "des": ["6局", "12局", "30片", "50片"], "itemSpace": 120, "space": 2, "changeDispatch": true },
        { "name": "countSelect", "title": "人数", "key": "max_player", "texts": "2人,4人", "values": [2, 4], "value": 4, "costDivide": 1, "des": ["2人", "4人"], "matchvalue": 4, "itemSpace": 270 },
        //{ "name": "gps", "key": "gps", "texts": "开启防作弊功能", "values": [0, 1], "value": 1, "des": ["", "防作弊"], "matchvalue": 0 },
        { "key": "gps", "value": 1 },
        {
            "name": "chooseAndSelect", "line": 1, "title": "可选", "info": [
                { "name": "select", "title": "三牢起(硬自摸)", "key": "lao_3", "texts": "三牢起(硬自摸),一牢起(三牢点炮)", "values": [0, 1], "value": 0, "des": ["三牢起(硬自摸)", "一牢起(三牢点炮)"], "itemSpace": 90 },
                { "name": "select", "title": "不承包(限2吃2碰)", "key": "cheng_bao", "texts": "不承包(限2吃2碰),不承包(限两摊),承包/反承包", "values": [0, 1, 2], "value": 0, "des": ["不承包(限2吃2碰)", "不承包(限两摊)", "承包/反承包"], "itemSpace": 55 },
                { "name": "choose", "title": "玩法选择", "key": "shi_feng", "texts": "十风", "values": [0, 1], "value": 0, "des": ["", "十风"] },
                { "name": "choose", "title": "玩法选择", "key": "chao_bao", "texts": "超包", "values": [0, 1], "value": 0, "des": ["", "超包"], "changeOn": { "max_hand_cnt": { "visible": { 6: false, 12: false, 30: true, 50: true } }, "matchvalue": 1 } },
            ], "space": 3
        },
        //{ "name": "select", "title": "摆牌方式", "key": "fold_type", "texts": "独立摆放,合并摆放", "values": [0, 1], "value": 1, "des": ["独立摆放", "合并摆放"], "matchvalue": 1 },
        { "name": "chargeSelect", "title": "收费方式", "key": "charge_type", "texts": ["房主支付", "AA支付"], "values": [0, 1], "value": 1, "des": ["房主支付", "AA支付"], "matchvalue": 0, "discount": 1 },
    ];
    TongluMj.cost = 0;
    //public static costDivide = 4
    //public static costs = [2, 4, 2, 4]
    TongluMj.costDivide = [2, 4];
    //public static costs = [[4,8],[6,12],[2,4],[4,8]]
    TongluMj.costs = [2, 3, 1, 2];
    //public static costs = [[8,8],[12,12],[4,4],[8,8]]
    TongluMj.ruleKey = ["tableid", "totalHandCount", "gps", "lao_3", "cheng_bao", "shi_feng", "chao_bao" /*, "fold_type"*/];
    TongluMj.ruleValue = [[], [], ["", "防作弊"], ["三牢起(硬自摸)", "一牢起(三牢点炮)"], ["不承包(限2吃2碰)", "不承包(限两摊)", "承包/反承包"], ["", "十风"], ["", "超包"] /*, ["独立摆放", "合并摆放"]*/];
    return TongluMj;
}());
//# sourceMappingURL=TongluMj.js.map
var ShiSanShui = /** @class */ (function () {
    function ShiSanShui() {
    }
    ShiSanShui.createInfo = [
        { "name": "countSelect", "title": "局数", "key": "max_hand_cnt", "texts": "12局,24局,48局", "values": [12, 24, 48], "value": 12, "cost": 1, "des": ["12局", "24局", "48局"] },
        { "name": "countSelect", "title": "人数", "key": "max_player", "texts": "4人,3人,2人", "values": [4, 3, 2], "value": 4, "costDivide": 1, "des": ["4人", "3人", "2人"] },
        { "name": "gps", "key": "gps", "texts": "开启防作弊功能", "values": [0, 1], "value": 0, "des": ["", "防作弊"] },
        { "name": "select", "title": "玩法", "key": "game_type", "texts": "普通模式,大小王百变", "values": [0, 1], "value": 0, "des": ["普通模式", "大小王百变"] },
        { "name": "chargeSelect", "title": "收费方式", "key": "charge_type", "texts": ["房主支付", "AA支付"], "values": [0, 1], "value": 0, "des": ["房主支付", "AA支付"] },
    ];
    ShiSanShui.cost = 0;
    ShiSanShui.costDivide = 4;
    ShiSanShui.costs = [2, 4, 8];
    return ShiSanShui;
}());
//# sourceMappingURL=ShiSanShui.js.map
var ShanxiMJ = /** @class */ (function () {
    function ShanxiMJ() {
    }
    ShanxiMJ.createInfo = [{ "key": "max_player", "value": 4 },
        { "name": "countSelect", "title": "局数", "key": "max_hand_cnt", "texts": "8局,16局", "values": [8, 16], "value": 8, "cost": 1, "des": ["8局", "16局"] },
        { "name": "gps", "key": "gps", "texts": "开启防作弊功能", "values": [0, 1], "value": 0, "des": ["", "防作弊"] },
        { "name": "select", "title": "玩法", "key": "dian_pao", "texts": "只炸不胡,普通平胡", "values": [0, 1], "value": 0, "des": ["只炸不胡", "普通平胡"] },
        { "name": "chooseAndSelect", "title": "可选", "info": [
                { "name": "choose", "title": "玩法选择", "key": "has_wind", "texts": "带风牌", "values": [0, 1], "value": 0, "des": ["", "带风牌"] },
                { "name": "choose", "title": "玩法选择", "key": "red_joker", "texts": "红中赖子", "values": [0, 1], "value": 0, "des": ["", "红中赖子"] },
                { "name": "choose", "title": "玩法选择", "key": "eyes_258", "texts": "258硬将", "values": [0, 1], "value": 0, "des": ["", "258硬将"] },
                { "name": "choose", "title": "玩法选择", "key": "win_258_double", "texts": "胡258加番", "values": [0, 1], "value": 0, "des": ["", "胡258加番"] },
                { "name": "choose", "title": "玩法选择", "key": "eyes_258_double", "texts": "将258加番", "values": [0, 1], "value": 0, "des": ["", "将258加番"] },
                { "name": "choose", "title": "玩法选择", "key": "one_color", "texts": "清一色加番", "values": [0, 1], "value": 0, "des": ["", "清一色加番"] }
            ], "space": 3, },
        { "name": "switchAndSelect", "info": [
                { "name": "choose", "title": "玩法选择", "key": "seven_pairs", "texts": "可胡7对(不加番)", "values": [0, 1], "value": 0, "des": ["", "可胡7对(不加番)"] },
                { "name": "choose", "title": "玩法选择", "key": "seven_pairs_double", "texts": "可胡7对(加番)", "values": [0, 1], "value": 0, "des": ["", "可胡7对(加番)"] },
            ], "space": 2, },
        { "name": "hbuttons", "title": "炮子", "key": "pao", "texts": "0炮,1炮,2炮,3炮,4炮,自由炮", "values": [0, 1, 2, 3, 4, 5], "value": 0, "divide": 6, "des": ["0炮", "1炮", "2炮", "3炮", "4炮", "自由炮"] },
        { "name": "chargeSelect", "title": "收费方式", "key": "charge_type", "texts": ["房主支付", "AA支付"], "values": [0, 1], "value": 0, "des": ["房主支付", "AA支付"] },
    ];
    ShanxiMJ.cost = 0;
    ShanxiMJ.costDivide = 4;
    ShanxiMJ.costs = [0, 48];
    ShanxiMJ.ruleKey = ["tableid", "totalHandCount", "gps", "dian_pao", "has_wind", "red_joker", "eyes_258", "win_258_double", "eyes_258_double", "seven_pairs", "seven_pairs_double", "one_color", "pao"];
    ShanxiMJ.ruleValue = [[], [], ["", "防作弊"], ["只炸不胡", "普通平胡"], ["", "风牌"], ["", "红中赖子"], ["", "258硬将"], ["", "胡258加番"], ["", "将258加番"], ["", "7对"], ["", "7对加番"], ["", "清一色加番"], ["0炮", "1炮", "2炮", "3炮", "4炮", "自由炮"]];
    return ShanxiMJ;
}());
//# sourceMappingURL=ShanxiMJ.js.map
var ShangQiuMJ = /** @class */ (function () {
    function ShangQiuMJ() {
    }
    ShangQiuMJ.createInfo = [{ "key": "ting", "value": 1 },
        { "name": "countSelect", "title": "局数", "key": "max_hand_cnt", "texts": "8局,16局,24局", "values": [8, 16, 24], "value": 8, "cost": 1, "des": ["8局", "16局", "24局"], "matchvalue": 8 },
        { "name": "countSelect", "title": "人数", "key": "max_player", "texts": "4人,3人,2人", "values": [4, 3, 2], "value": 4, "costDivide": 1, "des": ["4人", "3人", "2人"], "changeDispatch": true, "matchvalue": 4 },
        { "name": "gps", "key": "gps", "texts": "开启防作弊功能", "values": [0, 1], "value": 0, "des": ["", "防作弊"], "matchvalue": 0 },
        //     {"name":"chooseSelect","key":"ting","texts":"报听","values":[0,1], "value":0, "des":["","报听"],"changeDispatch":true,
        //             "info":[ {"name":"select","key":"ting_hu","texts":"不听管胡,不听不胡","values":[0,1], "value":0, "des":["不听管胡","不听不胡"],"changeOn":{"ting":{"disabled":{0:false,1:true}}}}]},
        // {"name":"select","title": "报听","key":"ting_hu","texts":"不听管胡,不听不胡","values":[0,1], "value":0, "des":["不听管胡","不听不胡"]},        
        { "name": "chooseAndSelect", "line": 1, "title": "可选", "info": [
                { "name": "choose", "title": "玩法选择", "key": "ting_hu", "texts": "不听不胡", "values": [0, 1], "value": 0, "des": ["", "不听不胡"] },
                { "name": "choose", "title": "玩法选择", "key": "dian_pao", "texts": "可点炮胡", "values": [0, 1], "value": 0, "des": ["", "可点炮胡"] }
            ], "space": 2 },
        { "name": "chooseAndSelect", "line": 1, "title": "可选", "info": [
                { "name": "choose", "title": "玩法选择", "key": "que_men", "texts": "缺门", "values": [0, 1], "value": 0, "des": ["", "缺门"] },
                { "name": "choose", "title": "玩法选择", "key": "ankou", "texts": "杠卡", "values": [0, 1], "value": 0, "des": ["", "暗扣"] },
                { "name": "choose", "title": "玩法选择", "key": "qia_zhang", "texts": "掐张", "values": [0, 1], "value": 0, "des": ["", "掐张"] },
                { "name": "choose", "title": "玩法选择", "key": "bian_zhang", "texts": "边张", "values": [0, 1], "value": 0, "des": ["", "边张"] },
                { "name": "choose", "title": "玩法选择", "key": "men_qing", "texts": "门清", "values": [0, 1], "value": 0, "des": ["", "门清"] },
                { "name": "choose", "title": "玩法选择", "key": "seven_pairs", "texts": "胡七对", "values": [0, 1], "value": 0, "des": ["", "可胡七对"] }
            ], "space": 3 },
        { "name": "chargeSelect", "title": "收费方式", "key": "charge_type", "texts": ["房主支付", "AA支付"], "values": [0, 1], "value": 0, "des": ["房主支付", "AA支付"], "matchvalue": 0, "discount": 1 },
    ];
    ShangQiuMJ.cost = 0;
    ShangQiuMJ.costDivide = 4;
    ShangQiuMJ.costs = [2, 4, 6];
    ShangQiuMJ.ruleKey = ["tableid", "totalHandCount", "gps", "ting", "ting_hu", "que_men", "ankou", "qia_zhang", "men_qing", "seven_pairs", "dian_pao", "bian_zhang"];
    ShangQiuMJ.ruleValue = [[], [], ["", "防作弊"], ["", "报听"], ["不听管胡", "不听不胡"], ["", "缺门"], ["", "杠卡"], ["", "掐张"], ["", "门清"], ["", "可胡七对"], ["", "可点炮胡"], ["", "边张"]];
    return ShangQiuMJ;
}());
//# sourceMappingURL=ShangQiuMJ.js.map
var JinYunMJ = /** @class */ (function () {
    function JinYunMJ() {
    }
    JinYunMJ.createInfo = [
        { "name": "countSelect", "title": "局数", "key": "max_hand_cnt", "texts": "8局,16局,24局", "values": [8, 16, 24], "value": 8, "cost": 1, "des": ["8局", "16局", "24局"], "matchvalue": 8 },
        { "name": "countSelect", "title": "人数", "key": "max_player", "texts": "4人,3人,2人", "values": [4, 3, 2], "value": 4, "costDivide": 1, "des": ["4人", "3人", "2人"], "changeDispatch": true, "matchvalue": 4 },
        { "name": "gps", "key": "gps", "texts": "开启防作弊功能", "values": [0, 1], "value": 0, "des": ["", "防作弊"], "matchvalue": 0 },
        { "name": "chooseAndSelect", "line": 1, "title": "可选", "info": [
                { "name": "choose", "title": "玩法选择", "key": "qghu_bao", "texts": "抢杠胡包", "values": [0, 1], "value": 0, "des": ["", "抢杠胡包"] },
                { "name": "choose", "title": "玩法选择", "key": "zh4_bao", "texts": "最后四张包", "values": [0, 1], "value": 0, "des": ["", "最后四张包"] },
                { "name": "choose", "title": "玩法选择", "key": "ying_seven", "texts": "硬板七对", "values": [0, 1], "value": 0, "des": ["", "硬板七对"] },
                { "name": "choose", "title": "玩法选择", "key": "xia_zhuang", "texts": "50根下庄", "values": [0, 1], "value": 0, "des": ["", "50根下庄"], "matchvalue": 0 },
                { "name": "choose", "title": "玩法选择", "key": "qizi", "texts": "7字", "values": [0, 1], "value": 0, "des": ["", "7字"] },
                { "name": "choose", "title": "玩法选择", "key": "gen_pai", "texts": "跟牌", "values": [0, 1], "value": 0, "des": ["", "跟牌"], "changeOn": { "max_player": { "visible": { 4: true, 3: false, 2: false } } } }
            ], "space": 3 },
        { "name": "select", "title": "摆牌方式", "key": "fold_type", "texts": "独立摆放,合并摆放", "values": [0, 1], "value": 1, "des": ["独立摆放", "合并摆放"], "matchvalue": 1 },
        { "name": "chargeSelect", "title": "收费方式", "key": "charge_type", "texts": ["房主支付", "AA支付"], "values": [0, 1], "value": 0, "des": ["房主支付", "AA支付"], "matchvalue": 0, "discount": 1 },
    ];
    JinYunMJ.cost = 0;
    JinYunMJ.costDivide = 4;
    JinYunMJ.costs = [2, 4, 6];
    JinYunMJ.ruleKey = ["tableid", "totalHandCount", "gps", "qghu_bao", "zh4_bao", "ying_seven", "xia_zhuang", "qizi", "gen_pai", "fold_type"];
    JinYunMJ.ruleValue = [[], [], ["", "防作弊"], ["", "抢杠胡包"], ["", "最后四张包"], ["", "硬板七对"], ["", "50根下庄"], ["", "7字"], ["", "跟牌"], ["独立摆放", "合并摆放"]];
    return JinYunMJ;
}());
//# sourceMappingURL=JinYunMJ.js.map
var JinYunHzMJ = /** @class */ (function () {
    function JinYunHzMJ() {
    }
    JinYunHzMJ.createInfo = [
        { "name": "countSelect", "title": "局数", "key": "max_hand_cnt", "texts": "8局,16局,24局", "values": [8, 16, 24], "value": 8, "cost": 1, "des": ["8局", "16局", "24局"], "matchvalue": 8 },
        { "name": "countSelect", "title": "人数", "key": "max_player", "texts": "4人,3人,2人", "values": [4, 3, 2], "value": 4, "costDivide": 1, "des": ["4人", "3人", "2人"], "changeDispatch": true, "matchvalue": 4 },
        { "name": "gps", "key": "gps", "texts": "开启防作弊功能", "values": [0, 1], "value": 0, "des": ["", "防作弊"], "matchvalue": 0 },
        { "name": "chooseAndSelect", "line": 1, "title": "可选", "info": [
                { "name": "choose", "title": "玩法选择", "key": "qghu_bao", "texts": "抢杠胡包", "values": [0, 1], "value": 0, "des": ["", "抢杠胡包"] },
                { "name": "choose", "title": "玩法选择", "key": "zh4_bao", "texts": "最后四张包", "values": [0, 1], "value": 0, "des": ["", "最后四张包"] },
                { "name": "choose", "title": "玩法选择", "key": "ying_seven", "texts": "硬板七对", "values": [0, 1], "value": 0, "des": ["", "硬板七对"] },
                { "name": "choose", "title": "玩法选择", "key": "xia_zhuang", "texts": "50根下庄", "values": [0, 1], "value": 0, "des": ["", "50根下庄"], "matchvalue": 0 },
                { "name": "choose", "title": "玩法选择", "key": "qizi", "texts": "7字", "values": [0, 1], "value": 0, "des": ["", "7字"] },
                { "name": "choose", "title": "玩法选择", "key": "gen_pai", "texts": "跟牌", "values": [0, 1], "value": 0, "des": ["", "跟牌"], "changeOn": { "max_player": { "visible": { 4: true, 3: false, 2: false } } } }
            ], "space": 3 },
        { "name": "select", "title": "摆牌方式", "key": "fold_type", "texts": "独立摆放,合并摆放", "values": [0, 1], "value": 1, "des": ["独立摆放", "合并摆放"], "matchvalue": 1 },
        { "name": "chargeSelect", "title": "收费方式", "key": "charge_type", "texts": ["房主支付", "AA支付"], "values": [0, 1], "value": 0, "des": ["房主支付", "AA支付"], "matchvalue": 0, "discount": 1 },
    ];
    JinYunHzMJ.cost = 0;
    JinYunHzMJ.costDivide = 4;
    JinYunHzMJ.costs = [2, 4, 6];
    JinYunHzMJ.ruleKey = ["tableid", "totalHandCount", "gps", "qghu_bao", "zh4_bao", "ying_seven", "xia_zhuang", "qizi", "gen_pai", "fold_type"];
    JinYunHzMJ.ruleValue = [[], [], ["", "防作弊"], ["", "抢杠胡包"], ["", "最后四张包"], ["", "硬板七对"], ["", "50根下庄"], ["", "7字"], ["", "跟牌"], ["独立摆放", "合并摆放"]];
    return JinYunHzMJ;
}());
//# sourceMappingURL=JinYunHzMJ.js.map
var JinYunGsMJ = /** @class */ (function () {
    function JinYunGsMJ() {
    }
    JinYunGsMJ.createInfo = [
        { "name": "countSelect", "title": "局数", "key": "max_hand_cnt", "texts": "8局,16局,24局", "values": [8, 16, 24], "value": 8, "cost": 1, "des": ["8局", "16局", "24局"], "matchvalue": 8 },
        { "name": "countSelect", "title": "人数", "key": "max_player", "texts": "4人,3人,2人", "values": [4, 3, 2], "value": 4, "costDivide": 1, "des": ["4人", "3人", "2人"], "changeDispatch": true, "matchvalue": 4 },
        { "name": "gps", "key": "gps", "texts": "开启防作弊功能", "values": [0, 1], "value": 0, "des": ["", "防作弊"], "matchvalue": 0 },
        { "name": "chooseAndSelect", "line": 1, "title": "可选", "info": [
                { "name": "choose", "title": "玩法选择", "key": "special_double", "texts": "特殊牌型翻倍", "values": [0, 1], "value": 0, "des": ["", "特殊牌型翻倍"] },
                { "name": "choose", "title": "玩法选择", "key": "qgh_bg", "texts": "抢杠胡包杠", "values": [0, 1], "value": 0, "des": ["", "抢杠胡包杠"] },
                { "name": "choose", "title": "玩法选择", "key": "gangkai_bg", "texts": "杠上开花包杠", "values": [0, 1], "value": 0, "des": ["", "杠上开花包杠"] },
            ], "space": 2 },
        { "name": "chargeSelect", "title": "收费方式", "key": "charge_type", "texts": ["房主支付", "AA支付"], "values": [0, 1], "value": 0, "des": ["房主支付", "AA支付"], "matchvalue": 0, "discount": 1 },
    ];
    JinYunGsMJ.cost = 0;
    JinYunGsMJ.costDivide = 4;
    JinYunGsMJ.costs = [2, 4, 6];
    JinYunGsMJ.ruleKey = ["tableid", "totalHandCount", "gps", "special_double", "qgh_bg", "gangkai_bg"];
    JinYunGsMJ.ruleValue = [[], [], ["", "防作弊"], ["", "特殊牌型翻倍"], ["", "抢杠胡包杠"], ["", "杠上开花包杠"]];
    return JinYunGsMJ;
}());
//# sourceMappingURL=JinYunGsMJ.js.map
var GuanPai = /** @class */ (function () {
    function GuanPai() {
    }
    GuanPai.createInfo = [
        { "key": "must_do", "value": 1 },
        { "key": "enabled_aaa", "value": 0 },
        { "key": "call_score", "value": 0 },
        { "name": "countSelect", "title": "局数", "key": "max_hand_cnt", "texts": "6局,12局", "values": [6, 12], "value": 6, "cost": 1, "des": ["6局", "12局"], "itemSpace": 200 },
        { "name": "countSelect", "title": "人数", "key": "max_player", "texts": "3人,2人", "values": [3, 2], "value": 3, "costDivide": 1, "des": ["3人", "2人"], "changeDispatch": true, "itemSpace": 200 },
        { "key": "gps", "value": 0 },
        //{ "name": "gps", "key": "gps", "texts": "开启防作弊功能", "values": [0, 1], "value": 0, "des": ["", "防作弊"] },
        { "name": "countSelect", "title": "手牌数", "key": "card_cnt", "texts": "15张,16张", "values": [15, 16], "value": 16, "des": ["15张", "16张"], "itemSpace": 180 },
        {
            "name": "chooseAndSelect", "line": 1, "title": "可选", "info": [
                { "name": "choose", "title": "玩法选择", "key": "hide_ccnt", "texts": "牌数不显示", "values": [0, 1], "value": 0, "des": ["", "牌数不显示"] },
                // { "name": "choose", "title": "玩法选择", "key": "must_do", "texts": "必须管", "values": [0, 1], "value": 0, "des": ["", "必须管"] },
                { "name": "choose", "title": "玩法选择", "key": "boom_reward", "texts": "炸弹奖分", "values": [0, 1], "value": 1, "des": ["", "炸弹奖分"] },
                // { "name": "choose", "title": "玩法选择", "key": "enabled_aaa", "texts": "AAA算炸", "values": [0, 1], "value": 0, "des": ["", "AAA算炸"] },
                { "name": "choose", "title": "玩法选择", "key": "winner_first", "texts": "赢家先出", "values": [0, 1], "value": 1, "des": ["", "赢家先出"] },
            ], "space": 3
        },
        { "name": "chargeSelect", "title": "收费方式", "key": "charge_type", "texts": ["房主支付", "AA支付"], "values": [0, 1], "value": 1, "des": ["房主支付", "AA支付"] },
    ];
    GuanPai.cost = 0;
    //public static costDivide = 4
    //public static costs = [2,3]
    GuanPai.costDivide = [3, 2];
    //public static costs = [[6,4],[9,6]]
    GuanPai.costs = [2, 3];
    //public static costs = [[6,6],[9,9]]
    // public static ruleKey = ["tableid", "totalHandCount", "gps","card_cnt", "hide_ccnt", "must_do", "boom_reward", "enabled_aaa", "winner_first", "call_score"]
    // public static ruleValue = [[], [], ["", "防作弊"],["", "手牌数"], ["", "牌数不显示"], ["", "必须管"], ["", "炸弹奖分"], ["", "AAA算炸"], ["", "赢家先出"], ["", "抢关"]]
    GuanPai.ruleKey = ["tableid", "totalHandCount", "gps", "card_cnt", "hide_ccnt", "must_do", "boom_reward", "enabled_aaa", "winner_first", "call_score"];
    GuanPai.ruleValue = [[], [], ["", "防作弊"], ["", "手牌数"], ["", "牌数不显示"], ["", "必须管"], ["", "炸弹奖分"], ["", "AAA算炸"], ["", "赢家先出"], ["", "抢关"]];
    return GuanPai;
}());
//# sourceMappingURL=GuanPai.js.map
var BaZhang = /** @class */ (function () {
    function BaZhang() {
    }
    BaZhang.createInfo = [
        { "name": "countSelect", "title": "局数", "key": "max_hand_cnt", "texts": "10局,20局", "values": [10, 20], "value": 20, "cost": 1, "des": ["10局", "20局"], "itemSpace": 235 },
        { "name": "countSelect", "title": "人数", "key": "max_player", "texts": "2人,3人,4人,5人,6人", "values": [2, 3, 4, 5, 6], "value": 4, "costDivide": 1, "des": ["2人", "3人", "4人", "5人", "6人"], "itemSpace": 100, "changeDispatch": true },
        //{ "name": "gps", "key": "gps", "texts": "开启防作弊功能", "values": [0, 1], "value": 0, "des": ["", "防作弊"], "matchvalue": 0 },
        { "key": "gps", "value": 0 },
        { "name": "chooseAndSelect", "line": 1, "title": "玩法", "info": [
                { "name": "select", "title": "去不去牌", "key": "qp", "texts": "不去牌,去2-4,去2-6", "values": [0, 1, 2], "value": 2, "des": ["不去牌", "去2-4", "去2-6"],
                    "itemSpace": 200, "changeOn": { "max_player": { "labels": { 2: "不去牌,去2-4,去2-6", 3: "不去牌,去2-4,去2-6", 4: "不去牌,去2-4,去2-6", 5: "不去牌,去2-4", 6: "不去牌" },
                            "selectedIndex": { 2: 0, 3: 0, 4: 0, 5: 1, 6: 0 } } } },
                { "name": "choose", "title": "玩法选择", "key": "hbl", "texts": "红波浪", "values": [0, 1], "value": 1, "des": ["", "红波浪"] },
                { "name": "choose", "title": "玩法选择", "key": "wpp", "texts": "无抛牌", "values": [0, 1], "value": 1, "des": ["", "无抛牌"] },
                { "name": "choose", "title": "玩法选择", "key": "dxw", "texts": "大小王", "values": [0, 1], "value": 1, "des": ["", "大小王"] }
            ], "space": 3 },
        { "key": "tqkc", "value": 0 },
        { "name": "chargeSelect", "title": "收费方式", "key": "charge_type", "texts": ["房主支付", "AA支付"], "values": [0, 1], "value": 1, "des": ["房主支付", "AA支付"] },
    ];
    BaZhang.cost = 0;
    //public static costDivide = 4                                              
    //public static costs = [2,4,8]
    BaZhang.costDivide = [2, 3, 4, 5, 6];
    //public static costs = [[4,6,8,10,12],[8,12,16,20,24]]
    BaZhang.costs = [2, 4];
    //public static costs = [[10,10,10,10,10],[20,20,20,20,20]]
    BaZhang.ruleKey = ["tableid", "totalHandCount", "gps", "qp", "hbl", "wpp", "dxw", "tqkc"];
    BaZhang.ruleValue = [[], [], ["", ""], ["不去牌", "去2-4", "去2-6"], ["", "红波浪"], ["", "无抛牌"], ["", "大小王"], ["", "提前开车"]];
    return BaZhang;
}());
//# sourceMappingURL=BaZhang.js.map
/*
* @author seacole
* 比赛报名数据;
*/
var matchSign;
(function (matchSign) {
    var MatchSignData = /** @class */ (function () {
        function MatchSignData() {
        }
        /**
         * @param callback
         */
        MatchSignData.getMatchList = function (callback) {
            var _this = this;
            if (callback === void 0) { callback = null; }
            matchSignService.getMatchList(function (response) {
                if (response.code == 0) {
                    var list = [];
                    var showlist = [];
                    for (var i = 0; i < response.list.length; i++) {
                        if (response.list[i].hasOwnProperty("sys") && (!response.list[i].hasOwnProperty("start") || response.list[i].start == 0)) {
                            // response.list.splice(i, 1);
                            // i--;
                            // continue;
                            showlist.push(response.list[i]);
                        }
                        if (response.list[i].hasOwnProperty("mrule")) {
                            var mrule = JSON.parse(response.list[i].mrule);
                            response.list[i].mrule = mrule;
                            list.push(response.list[i]);
                            if (!response.list[i].hasOwnProperty("sys")) {
                                showlist.push(response.list[i]);
                            }
                        }
                        // else {
                        // 	response.list.splice(i, 1);
                        // 	i--;
                        // }
                    }
                    MatchSignData._matchList = list;
                    MatchSignData._matchShowList = showlist;
                    MatchSignData.getStatus();
                    MatchSignData.sortMatch();
                    Dispatcher.dispatch(EventNames.MATCH_LIST_CHANGE);
                    Dispatcher.dispatch(EventNames.MATCH_NEW_LIST);
                    MatchSignData.checkWillStart();
                    Laya.timer.loop(60 * 1000, _this, MatchSignData.checkWillStart);
                }
            });
        };
        MatchSignData.getStatus = function () {
            var _this = this;
            if (MatchSignData._matchList.length) {
                var list = [];
                for (var i = 0; i < MatchSignData._matchList.length; i++) {
                    list.push(MatchSignData._matchList[i].code);
                }
                matchSignService.getMatchStatus(list, function (response) {
                    if (response.code == 0) {
                        for (var i = 0; i < response.list.length; i++) {
                            for (var j = 0; j < MatchSignData._matchList.length; j++) {
                                if (response.list[i].code == MatchSignData._matchList[j].code) {
                                    MatchSignData._matchList[j].cnt = response.list[i].cnt;
                                    if (MatchConfig.isMatchStart(response.list[i].status)) {
                                        //之前未开始
                                        if (MatchSignData._matchList[j].hasOwnProperty("status") && !MatchConfig.isMatchStart(MatchSignData._matchList[j].status) && MatchSignData._matchList[j].mrule.matchmode == 161) {
                                            Laya.timer.once(5000, _this, function () {
                                                if (!matchSign.MatchSignInfoCtrl.instance.parent)
                                                    MatchSignData.getMatchList();
                                            });
                                        }
                                    }
                                    //如果比赛已经开始
                                    if (MatchConfig.isMatchStart(response.list[i].status) && MatchSignData._matchList[j].signin == 1) {
                                        //之前未开始
                                        if (MatchSignData._matchList[j].hasOwnProperty("status") && !MatchConfig.isMatchStart(MatchSignData._matchList[j].status)) {
                                            Dispatcher.dispatch(EventNames.MATCH_START_WARN, [MatchSignData._matchList[j], 3]); //"已经开赛,请尽快参赛"
                                        }
                                        //之前未拿到状态
                                        if (!MatchSignData._matchList[j].hasOwnProperty("status")) {
                                            Dispatcher.dispatch(EventNames.MATCH_START_WARN, [MatchSignData._matchList[j], 2]); //"请及时回到比赛"
                                        }
                                    }
                                    MatchSignData._matchList[j].status = response.list[i].status;
                                    break;
                                }
                            }
                        }
                        MatchSignData.sortMatch();
                        Dispatcher.dispatch(EventNames.MATCH_LIST_CHANGE);
                    }
                });
            }
        };
        /**
         *
         * @param code 加入桌子拿到比赛信息
         * @param grule
         * @param mrule
         */
        MatchSignData.setInfo = function (code, gamename, gamerule, matchrule, gamemode) {
            var item;
            if (!MatchSignData._matchList)
                MatchSignData._matchList = [];
            for (var i = 0; i < MatchSignData._matchList.length; i++) {
                if (MatchSignData._matchList[i].code == code) {
                    item = MatchSignData._matchList[i];
                    break;
                }
            }
            if (!item) {
                item = {};
                item.code = code;
                MatchSignData._matchList.push(item);
                this.getStatus();
            }
            item.code = code;
            item.gname = gamename;
            item.gtype = GameDef.getGameTypeByGameName(gamename);
            item.gamemode = gamemode;
            var mrule = JSON.parse(matchrule);
            item.mrule = mrule;
            MatchSignData.sortMatch();
            Dispatcher.dispatch(EventNames.MATCH_LIST_CHANGE);
        };
        MatchSignData.setSignin = function (code, value) {
            var item;
            if (MatchSignData._matchList) {
                for (var i = 0; i < MatchSignData._matchList.length; i++) {
                    if (MatchSignData._matchList[i].code == code) {
                        item = MatchSignData._matchList[i];
                        break;
                    }
                }
                if (item) {
                    item.signin = value;
                    if (value)
                        item.cnt++;
                    else
                        item.cnt--;
                    MatchSignData.sortMatch();
                    Dispatcher.dispatch(EventNames.MATCH_LIST_CHANGE);
                }
            }
        };
        MatchSignData.getInfoByCode = function (code) {
            for (var i = 0; i < MatchSignData._matchList.length; i++) {
                if (MatchSignData._matchList[i].code == code) {
                    return MatchSignData._matchList[i];
                }
            }
            return null;
        };
        MatchSignData.sortMatch = function () {
            MatchSignData._matchList.sort(MatchSignData.onSort);
        };
        // 比赛列表排序规则：
        // 1.个人创建的比赛排在前面，官方赛在后
        // 2.自己创建的比赛（人满开赛在前，定时开赛在后）
        // 3.官方赛（人满开赛在前，定时开赛在后）
        // 4.人满开赛按照创建比赛时间从最早创建的开始排序，定时开始按照开赛时间从最近的开始排序
        MatchSignData.onSort = function (a, b) {
            var asys = Number(a.sys) || 0;
            var bsys = Number(b.sys) || 0;
            var amode = Number(a.mrule.matchmode) || 0;
            var bmode = Number(b.mrule.matchmode) || 0;
            var agid = Number(a.gid) || 0;
            var bgid = Number(b.gid) || 0;
            var astarttime = Number(a.mrule.starttime) || 0;
            var bstarttime = Number(b.mrule.starttime) || 0;
            //个人赛在前，官方赛在后
            if (asys > bsys)
                return 1;
            else if (asys < bsys)
                return -1;
            else {
                //人满开赛在前，定时开赛在后
                if (MatchConfig.isModeTime(amode) && MatchConfig.isModeMember(bmode))
                    return 1;
                else if (MatchConfig.isModeMember(amode) && MatchConfig.isModeTime(bmode))
                    return -1;
                else {
                    //人满开赛按照创建比赛时间从最早创建的开始排序
                    if (MatchConfig.isModeMember(amode)) {
                        if (agid > bgid)
                            return 1;
                        else if (agid < bgid)
                            return -1;
                        else
                            return 0;
                    }
                    //定时开赛
                    else if (MatchConfig.isModeTime(amode)) {
                        if (astarttime > bstarttime)
                            return 1;
                        else if (astarttime < bstarttime)
                            return -1;
                        else
                            return 0;
                    }
                }
            }
        };
        Object.defineProperty(MatchSignData, "backCode", {
            get: function () {
                return this._backCode;
            },
            set: function (code) {
                this._backCode = code;
            },
            enumerable: true,
            configurable: true
        });
        MatchSignData.getMatchShareDesc = function (code) {
            var match = MatchSignData.getInfoByCode(code);
            var str = "";
            if (match) {
                if (MatchConfig.isModeMember(match.mrule.matchmode)) {
                    str += "满" + match.mrule.playercnt + "人开赛";
                }
                else {
                    var d = new Date(Number(match.mrule.starttime) * 1000);
                    var h = d.getHours();
                    var m = d.getMinutes();
                    str += StringUtils.format(GameConfig.language.format_m_d_h_m, "", d.getMonth() + 1, d.getDate(), h < 10 ? "0" + h : h, m < 10 ? "0" + m : m) + "开赛";
                }
                str += "  免费报名。赛事多多，惊喜多多！";
            }
            return str;
        };
        MatchSignData.getReward = function (code, callback) {
            var flag = true;
            // if (MatchSignData._matchList) {
            // for (var i: number = 0; i < MatchSignData._matchList.length; i++) {
            // if (MatchSignData._matchList[i].sys == code) {
            if (MatchSignData._matchRewardList[code]) {
                // flag = false;
                if (callback)
                    callback(MatchSignData._matchRewardList[code]);
                // break;
            }
            else {
                // if(MatchSignData._matchList[i].sys){
                matchSignService.getReward(code, function (response) {
                    if (response.code == 0) {
                        console.info(code);
                        MatchSignData._matchRewardList[code] = response.result;
                        if (callback)
                            callback(MatchSignData._matchRewardList[code]);
                    }
                }.bind(this));
            }
            // if (flag) {
            // 	server.MatchRewardListReq();
            // 	server.on(EventNames.GAME_MATCH_REWARD_LIST_REP, this, MatchSignData.setReward, [code, callback]);
            // }
        };
        MatchSignData.setReward = function (code, callback, msg) {
            var item;
            if (MatchSignData._matchList) {
                for (var i = 0; i < MatchSignData._matchList.length; i++) {
                    if (MatchSignData._matchList[i].code == code) {
                        item = MatchSignData._matchList[i];
                        break;
                    }
                }
                if (item) {
                    item.reward = msg.reward;
                    if (callback)
                        callback(MatchSignData._matchList[i].reward);
                    // Dispatcher.dispatch(EventNames.MATCH_LIST_CHANGE);
                }
            }
        };
        MatchSignData.checkWillStart = function () {
            for (var i = 0; i < MatchSignData._matchList.length; i++) {
                if (MatchSignData._matchList[i].mrule && MatchSignData._matchList[i].mrule.starttime && MatchSignData._matchList[i].signin == 1 && !MatchConfig.isMatchStart(MatchSignData._matchList[i].status)) {
                    var now = server.serverTime ? server.serverTime * 1000 : new Date().getTime();
                    var starttime = Number(MatchSignData._matchList[i].mrule.starttime) * 1000;
                    var leftTime = starttime - now;
                    // 距离开赛时间3分钟以内
                    if (leftTime < (3 * 60 * 1000)) {
                        Dispatcher.dispatch(EventNames.MATCH_START_WARN, [MatchSignData._matchList[i], 1]);
                    }
                }
            }
        };
        Object.defineProperty(MatchSignData, "currentMatchCode", {
            get: function () {
                return MatchSignData._currentMatchCode;
            },
            set: function (value) {
                MatchSignData._currentMatchCode = value;
            },
            enumerable: true,
            configurable: true
        });
        //  {
        //     "mrule": "{\"matchmode\":\"151\",\"title\":\"13\",\"cost\":\"1\",\"starttime\":\"1515175320\",\"playercnt\":\"12\"}",
        // 	   "grule":"{\"max_player\":4,\"qghu_bao\":1,\"zh4_bao\":1,\"ying_seven\":1,\"xia_zhuang\":1,\"qizi\":1,\"gen_pai\":1,\"gps\":0,\"charge_type\":0,\"max_hand_cnt\":8}",
        //     "code": "150685",
        //     "gid": "487",
        //     "signin": "0",0 未报名 1 已报名、 2淘汰
        //     "sys": "1", 1 官方赛 0个人赛
        //     "gtype": "3",
        //     "gname": "jinyun_mj"
        // 	   "cnt":1,		报名多少人
        // 	   "status":0,  //比赛状态 0为开赛 1已开赛 2已开赛，不能报名
        //     "userlist":[], 
        //     "leftcnt":10,  剩余多少人，
        //     "rank": 1 排名,
        //     "owner":uid,建局人
        // }
        MatchSignData._matchList = [];
        MatchSignData._matchShowList = [];
        MatchSignData._matchRewardList = {};
        // "","您报名的比赛\"{0}\"<br>即将开赛","您正在参加比赛\"{0}\"<br>请及时回到比赛","您报名的比赛\"{0}\"<br>已经开赛,请尽快参赛"
        MatchSignData._matchWarn = [{}, {}, {}, {}];
        return MatchSignData;
    }());
    matchSign.MatchSignData = MatchSignData;
})(matchSign || (matchSign = {}));
//# sourceMappingURL=MatchSignData.js.map
//# sourceMappingURL=TongluDef.js.map
var GuanPaiLayOut = /** @class */ (function () {
    function GuanPaiLayOut() {
    }
    GuanPaiLayOut.SEAT_LAYOUT = [[], [{ y: NaN, right: NaN, left: NaN, centerX: 0, bottom: 10 }, { bottom: NaN, right: 30, left: NaN, centerX: NaN, y: 220 }], [{ y: NaN, right: NaN, left: NaN, centerX: 0, bottom: 10 }, { centerX: NaN, left: NaN, bottom: NaN, right: 20, y: 220 }, { centerX: NaN, right: NaN, top: NaN, bottom: NaN, x: NaN, left: 10, y: 220 }], [{ centerX: 0, bottom: 10 }, { right: 20, y: 220 }, { centerX: 370, y: 50 }, { left: 10, y: 220 }]];
    GuanPaiLayOut.GAME_START_SEAT_LAYOUT = [[], [{ scaleX: 0.8, scaleY: 0.8, centerX: NaN, left: 10, bottom: 20 }, { scaleX: 0.8, scaleY: 0.8, right: 30, y: 220 }, { scaleX: 0.8, scaleY: 0.8, right: 20, y: 220 }], [{ scaleX: 0.8, scaleY: 0.8, centerX: NaN, left: 10, bottom: 20 }, { scaleX: 0.8, scaleY: 0.8, right: 20, y: 220 }, { scaleX: 0.8, scaleY: 0.8, left: 10, y: 220 }, { scaleX: 0.8, scaleY: 0.8, left: 10, y: 220 }], [{ scaleX: 0.8, scaleY: 0.8, centerX: NaN, left: 10, bottom: 20 }, { scaleX: 0.8, scaleY: 0.8, right: 20, y: 220 }, { scaleX: 0.8, scaleY: 0.8, centerX: 360, y: 50 }, { scaleX: 0.8, scaleY: 0.8, left: 10, y: 220 }]];
    // public static MENU_LAYOUT = { "top": 10,"right":20 }
    // public static HISTORY_LAYOUT = { "right": 0, "y": 20 }
    // public static CHAT_LAYOUT = { "right": 20, "top": 100 }
    // public static SSYY_LAYOUT = { "right": 20, "bottom": 60 }
    // public static PLAY_SOUND_LAYOUT = { "right": 15, "bottom": 190 }
    // public static SSYY_TIP_LAYOUT = { "right": 60, "bottom": 140 }
    // public static BG_LAYOUT = { "centerY": 0, "centerX": 0, "bottom": NaN }
    // public static LOGO_LAYOUT = { "centerY": -82, "centerX": 0 }
    // public static CHAT_CONTENT_LAYOUT = { "bottom": 100, "left": NaN, "right": 80 }
    // public static MATCH_RECORD_LAYOUT = { "y": 40, "left": NaN, "right": 20 }
    GuanPaiLayOut.MENU_LAYOUT = { "top": 10, "right": 20 }; //_btnMenu
    GuanPaiLayOut.MENU_CONTENT_LAYOUT = { "top": 0, "right": 0 };
    GuanPaiLayOut.HISTORY_LAYOUT = { "right": 0, "y": 20 };
    GuanPaiLayOut.CHAT_LAYOUT = { "right": 20, "top": 100 }; //_btnChat
    GuanPaiLayOut.SSYY_LAYOUT = { "right": 20, "bottom": 60 }; //_checkBox_huatong
    GuanPaiLayOut.PLAY_SOUND_LAYOUT = { "right": 20, "bottom": 150 }; //_checkBox_laba
    GuanPaiLayOut.SSYY_TIP_LAYOUT = { "right": 60, "bottom": 140 };
    GuanPaiLayOut.BG_LAYOUT = { "centerY": 0, "centerX": 0, "bottom": NaN };
    GuanPaiLayOut.LOGO_LAYOUT = { "centerY": -40, "centerX": 0 };
    GuanPaiLayOut.CHAT_CONTENT_LAYOUT = { "top": 10, "bottom": 0, "left": NaN, "right": -80 };
    GuanPaiLayOut.MATCH_RECORD_LAYOUT = { "y": 150, "left": NaN, "right": 20 };
    return GuanPaiLayOut;
}());
//# sourceMappingURL=GuanPaiLayout.js.map
/*
* @author seacole
* 关牌游戏基础数据
*/
var guanpai;
(function (guanpai) {
    var GuanPaiGameData = /** @class */ (function () {
        function GuanPaiGameData() {
        }
        // public static setGameRule(game_rule: any): void {
        // 	GuanPaiGameData.isHideCardCnt = game_rule.hasOwnProperty("hide_ccnt") && game_rule.hide_ccnt == 1;
        // 	GuanPaiGameData.isMustPress = game_rule.hasOwnProperty("must_do") && game_rule.must_do == 1;
        // 	GuanPaiGameData.isBoomReward = game_rule.hasOwnProperty("boom_reward") && game_rule.boom_reward == 1;
        // 	GuanPaiGameData.isBoomAAA = game_rule.hasOwnProperty("enabled_aaa") && game_rule.enabled_aaa == 1;
        // 	GuanPaiGameData.isWinerFirst = game_rule.hasOwnProperty("winner_first") && game_rule.winner_first == 1;
        // 	GuanPaiGameData.isCallScore = game_rule.hasOwnProperty("call_score") && game_rule.call_score == 1;
        // }
        GuanPaiGameData.getGameRule = function () {
            var str = GuanPaiGameData.maxCards + "张";
            if (GuanPaiGameData.isHideCardCnt)
                str += "/牌数不显示";
            if (GuanPaiGameData.isMustPress)
                str += "/必须管";
            if (GuanPaiGameData.isBoomReward)
                str += "/炸弹奖分";
            if (GuanPaiGameData.isBoomAAA)
                str += "/AAA算炸";
            if (GuanPaiGameData.isWinerFirst)
                str += "/赢家先出";
            if (GuanPaiGameData.isCallScore)
                str += "/抢关";
            return str;
        };
        return GuanPaiGameData;
    }());
    guanpai.GuanPaiGameData = GuanPaiGameData;
})(guanpai || (guanpai = {}));
//# sourceMappingURL=GuanPaiGameData.js.map
/*
* @author seacole
* 关牌牌型算法;
*/
var guanpai;
(function (guanpai) {
    var GuanPaiCardsType = /** @class */ (function () {
        function GuanPaiCardsType() {
        }
        /**
         * 获取牌型
         */
        GuanPaiCardsType.getType = function (cards, hasBoomAAA, handCardsCount) {
            if (hasBoomAAA === void 0) { hasBoomAAA = false; }
            if (handCardsCount === void 0) { handCardsCount = 0; }
            if (cards == null || cards.length < 1)
                return [0];
            var tmpArr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //卡牌出现的次数
            var i;
            var j;
            var flag;
            for (i = 0; i < cards.length; ++i) {
                var num = Math.floor(cards[i] / 10);
                tmpArr[num]++;
            }
            var tmp1Arr = [];
            var tmp2Arr = [];
            var tmp3Arr = [];
            var tmp4Arr = [];
            for (i = 0; i < tmpArr.length; ++i) {
                if (tmpArr[i] == 1)
                    tmp1Arr.push(i);
                else if (tmpArr[i] == 2)
                    tmp2Arr.push(i);
                else if (tmpArr[i] == 3)
                    tmp3Arr.push(i);
                else if (tmpArr[i] == 4)
                    tmp4Arr.push(i);
            }
            if (cards.length == 1) {
                return [GuanPaiCardsType.DAN, tmp1Arr[0]];
            }
            if (tmp2Arr.length == 1 && cards.length == 2) {
                return [GuanPaiCardsType.DUIZI, tmp2Arr[0]];
            }
            if (tmp4Arr.length == 1) {
                if (handCardsCount == 5 && cards.length == 5)
                    return [GuanPaiCardsType.SIDAIYI, tmp4Arr[0]];
                else if (handCardsCount >= 4 && cards.length == 4)
                    return [GuanPaiCardsType.ZHADAN, tmp4Arr[0]];
                // else if (!handCardsCount && cards.length == 5)
                // 	return [GuanPaiCardsType.ZHADAN, tmp4Arr[0]];
                // else if (!handCardsCount && cards.length == 4)
                // 	return [GuanPaiCardsType.ZHADAN, tmp4Arr[0]];
                if (handCardsCount >= 7 && cards.length == 7)
                    return [GuanPaiCardsType.SIDAISAN, tmp4Arr[0]];
                else if (handCardsCount == 6 && cards.length == 6)
                    return [GuanPaiCardsType.SIDAIER, tmp4Arr[0]];
                // else if (!handCardsCount && cards.length == 6)
                // 	return [GuanPaiCardsType.SIDAISAN, tmp4Arr[0]];
                // else if (!handCardsCount && cards.length == 7)
                // 	return [GuanPaiCardsType.SIDAISAN, tmp4Arr[0]];
            }
            if (tmp3Arr.length == 1) {
                if (hasBoomAAA) {
                    // 如果是AAA
                    if (tmp3Arr[0] == GuanPaiCardsType.A) {
                        if (handCardsCount >= 4 && cards.length == 4)
                            return [GuanPaiCardsType.ZHADAN, tmp3Arr[0]];
                        else if (handCardsCount == 3 && cards.length == 3)
                            return [GuanPaiCardsType.ZHADAN, tmp3Arr[0]];
                        // else if (!handCardsCount && cards.length == 4)
                        // 	return [GuanPaiCardsType.ZHADAN, tmp3Arr[0]];
                        // else if (!handCardsCount && cards.length == 3)
                        // 	return [GuanPaiCardsType.ZHADAN, tmp3Arr[0]];
                        if (handCardsCount >= 6 && cards.length == 6)
                            return [GuanPaiCardsType.SIDAISAN, tmp3Arr[0]];
                        else if (handCardsCount == 5 && cards.length == 5)
                            return [GuanPaiCardsType.SIDAISAN, tmp3Arr[0]];
                        // else if (!handCardsCount && cards.length == 5)
                        // 	return [GuanPaiCardsType.SIDAISAN, tmp3Arr[0]];
                        // else if (!handCardsCount && cards.length == 6)
                        // 	return [GuanPaiCardsType.SIDAISAN, tmp3Arr[0]];
                    }
                }
                if (handCardsCount >= 5 && cards.length == 5)
                    return [GuanPaiCardsType.SANDAIER, tmp3Arr[0]];
                else if (handCardsCount >= 3 && cards.length == 3)
                    return [GuanPaiCardsType.SANDAIER, tmp3Arr[0]];
                else if (handCardsCount == 4 && cards.length == 4)
                    return [GuanPaiCardsType.SANDAIYI, tmp3Arr[0]];
                else if (handCardsCount == 3 && cards.length == 3)
                    return [GuanPaiCardsType.SAN, tmp3Arr[0]];
                // else if (!handCardsCount && cards.length >= 3 && cards.length <= 5)
                // 	return [GuanPaiCardsType.SANDAIER, tmp3Arr[0]];
            }
            if (tmp1Arr.length > 4) {
                flag = true;
                for (i = 1; i < tmp1Arr.length; ++i) {
                    if (tmp1Arr[i - 1] + 1 != tmp1Arr[i]) {
                        flag = false;
                        break;
                    }
                }
                if (flag && tmp1Arr.length == cards.length) {
                    return [GuanPaiCardsType.DANSHUN, tmp1Arr[0]];
                }
            }
            if (tmp2Arr.length > 1) {
                flag = true;
                for (i = 1; i < tmp2Arr.length; ++i) {
                    if (tmp2Arr[i - 1] + 1 != tmp2Arr[i]) {
                        flag = false;
                        break;
                    }
                }
                if (flag && tmp2Arr.length * 2 == cards.length) {
                    return [GuanPaiCardsType.SHUANGSHUN, tmp2Arr[0]];
                }
            }
            if (tmp3Arr.length > 1) {
                flag = true;
                for (i = 1; i < tmp3Arr.length; ++i) {
                    if (tmp3Arr[i - 1] + 1 != tmp3Arr[i]) {
                        flag = false;
                        break;
                    }
                }
                if (flag && tmp3Arr.length * 3 == cards.length) {
                    return [GuanPaiCardsType.SANSHUN, tmp3Arr[0]];
                }
            }
            //后面判定蛋疼的飞机
            var feijiArr = [];
            for (i = 0; i < tmp3Arr.length; i++) {
                feijiArr.push(tmp3Arr[i]);
            }
            for (i = 0; i < tmp4Arr.length; i++) {
                feijiArr.push(tmp4Arr[i]);
            }
            feijiArr.sort(GuanPaiCardsType.onSort2);
            var feijiType = [0];
            var count = 0;
            var feijiTmpArr;
            while (feijiType[0] != -1) {
                feijiTmpArr = feijiArr.concat();
                if (count == 1) {
                    if (feijiTmpArr.length)
                        feijiTmpArr.shift();
                }
                else if (count == 2) {
                    if (feijiTmpArr.length)
                        feijiTmpArr.pop();
                }
                else if (count == 3) {
                    if (feijiTmpArr.length)
                        feijiTmpArr.shift();
                    if (feijiTmpArr.length)
                        feijiTmpArr.shift();
                }
                else if (count == 4) {
                    if (feijiTmpArr.length)
                        feijiTmpArr.shift();
                    if (feijiTmpArr.length)
                        feijiTmpArr.pop();
                }
                else if (count == 5) {
                    if (feijiTmpArr.length)
                        feijiTmpArr.pop();
                    if (feijiTmpArr.length)
                        feijiTmpArr.pop();
                }
                else if (count >= 6)
                    break;
                feijiType = GuanPaiCardsType.checkIsFeiji(feijiTmpArr, cards, handCardsCount);
                count++;
                if (feijiType[0] > 0)
                    return feijiType;
            }
            return [0];
        };
        GuanPaiCardsType.checkIsFeiji = function (checkArr, cards, handCardsCount) {
            if (handCardsCount === void 0) { handCardsCount = 0; }
            var flag;
            var i;
            var needCardsCount;
            if (checkArr && checkArr.length > 1) {
                flag = true;
                for (i = 1; i < checkArr.length; ++i) {
                    if (checkArr[i - 1] + 1 != checkArr[i]) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    needCardsCount = (checkArr.length * (3 + 2));
                    if (handCardsCount >= needCardsCount && cards.length == needCardsCount)
                        return [GuanPaiCardsType.FEIJI, checkArr.length, checkArr[0]];
                    else if (handCardsCount < needCardsCount && cards.length == handCardsCount)
                        return [GuanPaiCardsType.FEIJI, checkArr.length, checkArr[0]];
                }
            }
            else
                return [-1];
            return [0];
        };
        /**
         * 检测是否能压过上一手牌
         */
        GuanPaiCardsType.checkCanUse = function (lastPlayCards, selectCards, hasBoomAAA, handCardsCount, helpCards) {
            if (hasBoomAAA === void 0) { hasBoomAAA = false; }
            if (handCardsCount === void 0) { handCardsCount = 0; }
            if (helpCards === void 0) { helpCards = null; }
            var mTmp = GuanPaiCardsType.getType(selectCards, hasBoomAAA, handCardsCount);
            var lTmp = GuanPaiCardsType.getType(lastPlayCards, hasBoomAAA, lastPlayCards.length);
            var myCardType = mTmp[0];
            var lastCardType = lTmp[0];
            var canUse = false;
            var flag;
            //如果提示里面有,肯定能出
            if (helpCards && selectCards.length == handCardsCount) {
                for (var i = 0; i < helpCards.length; i++) {
                    flag = true;
                    for (var j = 0; j < helpCards[i].length; j++) {
                        if (helpCards[i][j] != selectCards[j]) {
                            flag = false;
                            break;
                        }
                    }
                    if (flag)
                        canUse = true;
                }
            }
            if (!canUse) {
                //如果上一首出的是炸弹，需要比他更大的炸弹才行
                if (lastCardType == GuanPaiCardsType.ZHADAN) {
                    if (myCardType == GuanPaiCardsType.ZHADAN && mTmp[1] > lTmp[1])
                        canUse = true;
                }
                else {
                    if (myCardType == GuanPaiCardsType.ZHADAN)
                        canUse = true;
                    else {
                        if (myCardType == lastCardType) {
                            if (myCardType == GuanPaiCardsType.FEIJI) {
                                if (mTmp[1] == lTmp[1] && mTmp[2] > lTmp[2])
                                    canUse = true;
                            }
                            else {
                                if (mTmp[1] > lTmp[1])
                                    canUse = true;
                            }
                        }
                    }
                }
            }
            return canUse;
        };
        /**
         * 返回所有大过的牌
         */
        GuanPaiCardsType.getHelper = function (lastPlayCards, handCards, hasBoomAAA) {
            if (hasBoomAAA === void 0) { hasBoomAAA = false; }
            var lTmp = GuanPaiCardsType.getType(lastPlayCards, hasBoomAAA, lastPlayCards.length);
            var lastCardType = lTmp[0];
            var tmpArr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //卡牌出现的次数
            var i;
            var j;
            var flag;
            for (i = 0; i < handCards.length; ++i) {
                var num = Math.floor(handCards[i] / 10);
                tmpArr[num]++;
            }
            var tmp1Arr = [];
            var tmp2Arr = [];
            var tmp3Arr = [];
            var tmp4Arr = [];
            for (i = 0; i < tmpArr.length; ++i) {
                if (tmpArr[i] == 1)
                    tmp1Arr.push(i);
                else if (tmpArr[i] == 2)
                    tmp2Arr.push(i);
                else if (tmpArr[i] == 3)
                    tmp3Arr.push(i);
                else if (tmpArr[i] == 4)
                    tmp4Arr.push(i);
            }
            if (lastCardType == GuanPaiCardsType.DAN)
                return GuanPaiCardsType.getHelperDan(lTmp[1], handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, hasBoomAAA);
            else if (lastCardType == GuanPaiCardsType.DUIZI)
                return GuanPaiCardsType.getHelperDuiZi(lTmp[1], handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, hasBoomAAA);
            else if (lastCardType == GuanPaiCardsType.ZHADAN)
                return GuanPaiCardsType.getHelperZhaDan(lTmp[1], handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, hasBoomAAA);
            else if (lastCardType == GuanPaiCardsType.SIDAISAN)
                return GuanPaiCardsType.getHelperSiDaiSan(lTmp[1], handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, hasBoomAAA);
            else if (lastCardType == GuanPaiCardsType.SANDAIER || lastCardType == GuanPaiCardsType.SANDAIYI || lastCardType == GuanPaiCardsType.SAN)
                return GuanPaiCardsType.getHelperSanDaiEr(lTmp[1], handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, hasBoomAAA);
            else if (lastCardType == GuanPaiCardsType.DANSHUN)
                return GuanPaiCardsType.getHelperDanShun(lastPlayCards, handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, hasBoomAAA);
            else if (lastCardType == GuanPaiCardsType.SHUANGSHUN)
                return GuanPaiCardsType.getHelperShuangShun(lastPlayCards, handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, hasBoomAAA);
            else if (lastCardType == GuanPaiCardsType.SANSHUN)
                return GuanPaiCardsType.getHelperSanShun(lastPlayCards, handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, hasBoomAAA);
            else if (lastCardType == GuanPaiCardsType.FEIJI)
                return GuanPaiCardsType.getHelperFeiJi(lTmp[1], lTmp[2], handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, hasBoomAAA);
            return null;
        };
        /**
         * 炸弹要4带1，添加后面那个1
         * @param handCards
         * @param tmp1Arr
         * @param tmp2Arr
         * @param tmp3Arr
         * @param tmp4Arr
         * @param tmp4Idx
         */
        GuanPaiCardsType.getZhaDanHelper = function (handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, tmp4Idx) {
            var tmpArr = GuanPaiCardsType.getCardByNum(handCards, tmp4Arr[tmp4Idx], 4);
            // var i: number;
            // if (tmp1Arr.length)
            // 	tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp1Arr[0], 1));
            // else if (tmp2Arr.length)
            // 	tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp2Arr[0], 1));
            // else if (tmp3Arr.length)
            // 	tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp3Arr[0], 1));
            // else if (tmp4Arr.length) {
            // 	for (i = 0; i < tmp4Arr.length; i++) {
            // 		if (i != tmp4Idx) {
            // 			tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp4Arr[i], 1));
            // 			break;
            // 		}
            // 	}
            // }
            return tmpArr;
        };
        /**
         * 炸弹AAA带1，添加后面那个1
         * @param handCards
         * @param tmp1Arr
         * @param tmp2Arr
         * @param tmp3Arr
         * @param tmp4Arr
         * @param tmp4Idx
         */
        GuanPaiCardsType.getAAAHelper = function (handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, tmp3Idx) {
            var tmpArr = GuanPaiCardsType.getCardByNum(handCards, tmp3Arr[tmp3Idx], 3);
            var i;
            if (tmp1Arr.length)
                tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp1Arr[0], 1));
            else if (tmp2Arr.length)
                tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp2Arr[0], 1));
            else if (tmp3Arr.length) {
                for (i = 0; i < tmp3Arr.length; i++) {
                    if (i != tmp3Idx) {
                        tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp3Arr[i], 1));
                        break;
                    }
                }
            }
            else if (tmp4Arr.length)
                tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp4Arr[0], 1));
            return tmpArr;
        };
        /**
         * 检测能压过单牌的牌
         */
        GuanPaiCardsType.getHelperDan = function (lastNum, handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, hasBoomAAA) {
            if (hasBoomAAA === void 0) { hasBoomAAA = false; }
            var outArr = [];
            var i;
            for (i = 0; i < tmp1Arr.length; i++) {
                if (tmp1Arr[i] > lastNum)
                    outArr.push(GuanPaiCardsType.getCardByNum(handCards, tmp1Arr[i], 1));
            }
            for (i = 0; i < tmp2Arr.length; i++) {
                if (tmp2Arr[i] > lastNum)
                    outArr.push(GuanPaiCardsType.getCardByNum(handCards, tmp2Arr[i], 1));
            }
            for (i = 0; i < tmp3Arr.length; i++) {
                if (tmp3Arr[i] == GuanPaiCardsType.A && hasBoomAAA)
                    continue;
                if (tmp3Arr[i] > lastNum)
                    outArr.push(GuanPaiCardsType.getCardByNum(handCards, tmp3Arr[i], 1));
            }
            for (i = 0; i < tmp4Arr.length; i++) {
                outArr.push(GuanPaiCardsType.getZhaDanHelper(handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, i));
            }
            //炸弹AAA
            if (hasBoomAAA) {
                for (i = 0; i < tmp3Arr.length; i++) {
                    if (tmp3Arr[i] == GuanPaiCardsType.A) {
                        outArr.push(GuanPaiCardsType.getAAAHelper(handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, i));
                        break;
                    }
                }
            }
            //拆炸弹
            for (i = 0; i < tmp4Arr.length; i++) {
                if (tmp4Arr[i] > lastNum)
                    outArr.push(GuanPaiCardsType.getCardByNum(handCards, tmp4Arr[i], 1));
            }
            //拆AAA
            if (hasBoomAAA) {
                for (i = 0; i < tmp3Arr.length; i++) {
                    if (tmp3Arr[i] == GuanPaiCardsType.A) {
                        outArr.push(GuanPaiCardsType.getCardByNum(handCards, tmp3Arr[i], 1));
                        break;
                    }
                }
            }
            for (i = 0; i < outArr.length; i++) {
                outArr[i].sort(GuanPaiCardsType.onSort);
            }
            return outArr;
        };
        /**
         * 检测能压过对子的牌
         */
        GuanPaiCardsType.getHelperDuiZi = function (lastNum, handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, hasBoomAAA) {
            if (hasBoomAAA === void 0) { hasBoomAAA = false; }
            var outArr = [];
            var i;
            for (i = 0; i < tmp2Arr.length; i++) {
                if (tmp2Arr[i] > lastNum)
                    outArr.push(GuanPaiCardsType.getCardByNum(handCards, tmp2Arr[i], 2));
            }
            for (i = 0; i < tmp3Arr.length; i++) {
                if (tmp3Arr[i] == GuanPaiCardsType.A && hasBoomAAA)
                    continue;
                if (tmp3Arr[i] > lastNum)
                    outArr.push(GuanPaiCardsType.getCardByNum(handCards, tmp3Arr[i], 2));
            }
            for (i = 0; i < tmp4Arr.length; i++) {
                outArr.push(GuanPaiCardsType.getZhaDanHelper(handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, i));
            }
            //炸弹AAA
            if (hasBoomAAA) {
                for (i = 0; i < tmp3Arr.length; i++) {
                    if (tmp3Arr[i] == GuanPaiCardsType.A) {
                        outArr.push(GuanPaiCardsType.getAAAHelper(handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, i));
                        break;
                    }
                }
            }
            //拆炸弹
            for (i = 0; i < tmp4Arr.length; i++) {
                if (tmp4Arr[i] > lastNum)
                    outArr.push(GuanPaiCardsType.getCardByNum(handCards, tmp4Arr[i], 2));
            }
            //拆AAA
            if (hasBoomAAA) {
                for (i = 0; i < tmp3Arr.length; i++) {
                    if (tmp3Arr[i] == GuanPaiCardsType.A) {
                        outArr.push(GuanPaiCardsType.getCardByNum(handCards, tmp3Arr[i], 2));
                        break;
                    }
                }
            }
            for (i = 0; i < outArr.length; i++) {
                outArr[i].sort(GuanPaiCardsType.onSort);
            }
            return outArr;
        };
        /**
         * 检测能压过炸弹的牌
         */
        GuanPaiCardsType.getHelperZhaDan = function (lastNum, handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, hasBoomAAA) {
            if (hasBoomAAA === void 0) { hasBoomAAA = false; }
            var outArr = [];
            var i;
            var j;
            var flag;
            var tmpArr;
            for (i = 0; i < tmp4Arr.length; i++) {
                if (tmp4Arr[i] > lastNum)
                    outArr.push(GuanPaiCardsType.getZhaDanHelper(handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, i));
            }
            //炸弹AAA
            if (hasBoomAAA) {
                for (i = 0; i < tmp3Arr.length; i++) {
                    if (tmp3Arr[i] == GuanPaiCardsType.A && tmp3Arr[i] > lastNum) {
                        outArr.push(GuanPaiCardsType.getAAAHelper(handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, i));
                        break;
                    }
                }
            }
            for (i = 0; i < outArr.length; i++) {
                outArr[i].sort(GuanPaiCardsType.onSort);
            }
            return outArr;
        };
        /**
         * 检测能压过四带三的牌
         */
        GuanPaiCardsType.getHelperSiDaiSan = function (lastNum, handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, hasBoomAAA) {
            if (hasBoomAAA === void 0) { hasBoomAAA = false; }
            var outArr = [];
            var i;
            var j;
            var flag;
            var tmpArr;
            for (i = 0; i < tmp4Arr.length; i++) {
                outArr.push(GuanPaiCardsType.getZhaDanHelper(handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, i));
            }
            if (hasBoomAAA) {
                for (i = 0; i < tmp3Arr.length; i++) {
                    if (tmp3Arr[i] == GuanPaiCardsType.A) {
                        outArr.push(GuanPaiCardsType.getAAAHelper(handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, i));
                        break;
                    }
                }
            }
            var maxCount = 7;
            //拆炸弹
            for (i = 0; i < tmp4Arr.length; i++) {
                if (tmp4Arr[i] > lastNum) {
                    var tmpArr = GuanPaiCardsType.getCardByNum(handCards, tmp4Arr[i], 4);
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp1Arr.length; j++) {
                            tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp1Arr[j], 1));
                            if (tmpArr.length >= maxCount)
                                break;
                        }
                    }
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp2Arr.length; j++) {
                            tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp2Arr[j], 2));
                            if (tmpArr.length >= maxCount)
                                break;
                        }
                    }
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp3Arr.length; j++) {
                            tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp3Arr[j], 3));
                            if (tmpArr.length >= maxCount)
                                break;
                        }
                    }
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp4Arr.length; j++) {
                            if (j != i) {
                                tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp4Arr[j], 4));
                                if (tmpArr.length >= maxCount)
                                    break;
                            }
                        }
                    }
                    while (tmpArr.length > maxCount) {
                        tmpArr.pop();
                    }
                    if (tmpArr.length >= 6)
                        outArr.push(tmpArr);
                }
            }
            //拆AAA
            if (hasBoomAAA) {
                maxCount = 6;
                for (i = 0; i < tmp3Arr.length; i++) {
                    if (tmp3Arr[i] == GuanPaiCardsType.A && tmp3Arr[i] > lastNum) {
                        var tmpArr = GuanPaiCardsType.getCardByNum(handCards, tmp3Arr[i], 3);
                        if (tmpArr.length < maxCount) {
                            for (j = 0; j < tmp1Arr.length; j++) {
                                tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp1Arr[j], 1));
                                if (tmpArr.length >= maxCount)
                                    break;
                            }
                        }
                        if (tmpArr.length < maxCount) {
                            for (j = 0; j < tmp2Arr.length; j++) {
                                tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp2Arr[j], 2));
                                if (tmpArr.length >= maxCount)
                                    break;
                            }
                        }
                        if (tmpArr.length < maxCount) {
                            for (j = 0; j < tmp3Arr.length; j++) {
                                if (j != i) {
                                    tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp3Arr[j], 3));
                                    if (tmpArr.length >= maxCount)
                                        break;
                                }
                            }
                        }
                        if (tmpArr.length < maxCount) {
                            for (j = 0; j < tmp4Arr.length; j++) {
                                tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp4Arr[j], 4));
                                if (tmpArr.length >= maxCount)
                                    break;
                            }
                        }
                        while (tmpArr.length > maxCount) {
                            tmpArr.pop();
                        }
                        if (tmpArr.length >= 5)
                            outArr.push(tmpArr);
                    }
                }
            }
            for (i = 0; i < outArr.length; i++) {
                outArr[i].sort(GuanPaiCardsType.onSort);
            }
            return outArr;
        };
        /**
         * 检测能压过三带二的牌
         */
        GuanPaiCardsType.getHelperSanDaiEr = function (lastNum, handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, hasBoomAAA) {
            if (hasBoomAAA === void 0) { hasBoomAAA = false; }
            var outArr = [];
            var i;
            var j;
            var flag;
            var tmpArr;
            var maxCount = 5;
            //三带二
            for (i = 0; i < tmp3Arr.length; i++) {
                if (tmp3Arr[i] == GuanPaiCardsType.A && hasBoomAAA)
                    continue;
                if (tmp3Arr[i] > lastNum) {
                    var tmpArr = GuanPaiCardsType.getCardByNum(handCards, tmp3Arr[i], 3);
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp1Arr.length; j++) {
                            tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp1Arr[j], 1));
                            if (tmpArr.length >= maxCount)
                                break;
                        }
                    }
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp2Arr.length; j++) {
                            tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp2Arr[j], 2));
                            if (tmpArr.length >= maxCount)
                                break;
                        }
                    }
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp3Arr.length; j++) {
                            if (j != i) {
                                tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp3Arr[j], 3));
                                if (tmpArr.length >= maxCount)
                                    break;
                            }
                        }
                    }
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp4Arr.length; j++) {
                            tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp4Arr[j], 4));
                            if (tmpArr.length >= maxCount)
                                break;
                        }
                    }
                    while (tmpArr.length > maxCount) {
                        tmpArr.pop();
                    }
                    outArr.push(tmpArr);
                }
            }
            //炸弹
            for (i = 0; i < tmp4Arr.length; i++) {
                outArr.push(GuanPaiCardsType.getZhaDanHelper(handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, i));
            }
            //炸弹AAA
            if (hasBoomAAA) {
                for (i = 0; i < tmp3Arr.length; i++) {
                    if (tmp3Arr[i] == GuanPaiCardsType.A) {
                        outArr.push(GuanPaiCardsType.getAAAHelper(handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, i));
                        break;
                    }
                }
            }
            //拆炸弹
            for (i = 0; i < tmp4Arr.length; i++) {
                if (tmp4Arr[i] > lastNum) {
                    var tmpArr = GuanPaiCardsType.getCardByNum(handCards, tmp4Arr[i], 3);
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp1Arr.length; j++) {
                            tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp1Arr[j], 1));
                            if (tmpArr.length >= maxCount)
                                break;
                        }
                    }
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp2Arr.length; j++) {
                            tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp2Arr[j], 2));
                            if (tmpArr.length >= maxCount)
                                break;
                        }
                    }
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp3Arr.length; j++) {
                            tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp3Arr[j], 3));
                            if (tmpArr.length >= maxCount)
                                break;
                        }
                    }
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp4Arr.length; j++) {
                            if (j != i)
                                tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp4Arr[j], 4));
                            if (tmpArr.length >= maxCount)
                                break;
                        }
                    }
                    while (tmpArr.length > maxCount) {
                        tmpArr.pop();
                    }
                    outArr.push(tmpArr);
                }
            }
            //拆AAA
            for (i = 0; i < tmp3Arr.length; i++) {
                if (tmp3Arr[i] == GuanPaiCardsType.A && hasBoomAAA && tmp3Arr[i] > lastNum) {
                    var tmpArr = GuanPaiCardsType.getCardByNum(handCards, tmp3Arr[i], 3);
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp1Arr.length; j++) {
                            tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp1Arr[j], 1));
                            if (tmpArr.length >= maxCount)
                                break;
                        }
                    }
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp2Arr.length; j++) {
                            tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp2Arr[j], 2));
                            if (tmpArr.length >= maxCount)
                                break;
                        }
                    }
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp3Arr.length; j++) {
                            if (j != i) {
                                tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp3Arr[j], 3));
                                if (tmpArr.length >= maxCount)
                                    break;
                            }
                        }
                    }
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp4Arr.length; j++) {
                            tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp4Arr[j], 4));
                            if (tmpArr.length >= maxCount)
                                break;
                        }
                    }
                    while (tmpArr.length > maxCount) {
                        tmpArr.pop();
                    }
                    if (tmpArr.length == 5)
                        outArr.push(tmpArr);
                }
            }
            for (i = 0; i < outArr.length; i++) {
                outArr[i].sort(GuanPaiCardsType.onSort);
            }
            return outArr;
        };
        /**
        * 检测能压过单顺的牌
        */
        GuanPaiCardsType.getHelperDanShun = function (lastPlayCards, handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, hasBoomAAA) {
            if (hasBoomAAA === void 0) { hasBoomAAA = false; }
            var outArr = [];
            var lastNum = GuanPaiCardsType.getCardNum(lastPlayCards[0]);
            var i;
            var j;
            var flag;
            var tmp;
            for (i = 1; i < 8; i++) {
                flag = true;
                for (j = 0; j < lastPlayCards.length; j++) {
                    if (tmp1Arr.indexOf(lastNum + i + j) == -1 && tmp2Arr.indexOf(lastNum + i + j) == -1 && tmp3Arr.indexOf(lastNum + i + j) == -1 && tmp4Arr.indexOf(lastNum + i + j) == -1) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    tmp = [];
                    for (j = 0; j < lastPlayCards.length; j++) {
                        tmp.push(GuanPaiCardsType.getCardByNum(handCards, lastNum + i + j, 1)[0]);
                    }
                    outArr.push(tmp);
                }
            }
            for (i = 0; i < tmp4Arr.length; i++) {
                outArr.push(GuanPaiCardsType.getZhaDanHelper(handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, i));
            }
            //炸弹AAA
            if (hasBoomAAA) {
                for (i = 0; i < tmp3Arr.length; i++) {
                    if (tmp3Arr[i] == GuanPaiCardsType.A) {
                        outArr.push(GuanPaiCardsType.getAAAHelper(handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, i));
                        break;
                    }
                }
            }
            for (i = 0; i < outArr.length; i++) {
                outArr[i].sort(GuanPaiCardsType.onSort);
            }
            return outArr;
        };
        /**
        * 检测能压过双顺的牌
        */
        GuanPaiCardsType.getHelperShuangShun = function (lastPlayCards, handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, hasBoomAAA) {
            if (hasBoomAAA === void 0) { hasBoomAAA = false; }
            var outArr = [];
            var lastNum = GuanPaiCardsType.getCardNum(lastPlayCards[0]);
            var i;
            var j;
            var flag;
            var tmp1;
            var tmp2;
            for (i = 1; i < 11; i++) {
                flag = true;
                for (j = 0; j < lastPlayCards.length / 2; j++) {
                    if (tmp2Arr.indexOf(lastNum + i + j) == -1 && tmp3Arr.indexOf(lastNum + i + j) == -1 && tmp4Arr.indexOf(lastNum + i + j) == -1) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    tmp1 = [];
                    for (j = 0; j < lastPlayCards.length / 2; j++) {
                        tmp2 = GuanPaiCardsType.getCardByNum(handCards, lastNum + i + j, 2);
                        tmp1.push(tmp2[0], tmp2[1]);
                    }
                    outArr.push(tmp1);
                }
            }
            for (i = 0; i < tmp4Arr.length; i++) {
                outArr.push(GuanPaiCardsType.getZhaDanHelper(handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, i));
            }
            //炸弹AAA
            if (hasBoomAAA) {
                for (i = 0; i < tmp3Arr.length; i++) {
                    if (tmp3Arr[i] == GuanPaiCardsType.A) {
                        outArr.push(GuanPaiCardsType.getAAAHelper(handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, i));
                        break;
                    }
                }
            }
            for (i = 0; i < outArr.length; i++) {
                outArr[i].sort(GuanPaiCardsType.onSort);
            }
            return outArr;
        };
        /**
        * 检测能压过三顺的牌
        */
        GuanPaiCardsType.getHelperSanShun = function (lastPlayCards, handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, hasBoomAAA) {
            if (hasBoomAAA === void 0) { hasBoomAAA = false; }
            var outArr = [];
            var lastNum = GuanPaiCardsType.getCardNum(lastPlayCards[0]);
            var i;
            var j;
            var flag;
            var tmp1;
            var tmp2;
            for (i = 1; i < 11; i++) {
                flag = true;
                for (j = 0; j < lastPlayCards.length / 2; j++) {
                    if (tmp3Arr.indexOf(lastNum + i + j) == -1 && tmp4Arr.indexOf(lastNum + i + j) == -1) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    tmp1 = [];
                    for (j = 0; j < lastPlayCards.length / 3; j++) {
                        tmp2 = GuanPaiCardsType.getCardByNum(handCards, lastNum + i + j, 2);
                        tmp1.push(tmp2[0], tmp2[1]);
                    }
                    outArr.push(tmp1);
                }
            }
            for (i = 0; i < tmp4Arr.length; i++) {
                outArr.push(GuanPaiCardsType.getZhaDanHelper(handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, i));
            }
            //炸弹AAA
            if (hasBoomAAA) {
                for (i = 0; i < tmp3Arr.length; i++) {
                    if (tmp3Arr[i] == GuanPaiCardsType.A) {
                        outArr.push(GuanPaiCardsType.getAAAHelper(handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, i));
                        break;
                    }
                }
            }
            for (i = 0; i < outArr.length; i++) {
                outArr[i].sort(GuanPaiCardsType.onSort);
            }
            return outArr;
        };
        /**
        * 检测能压过飞机的牌
        */
        GuanPaiCardsType.getHelperFeiJi = function (lastCount, lastNum, handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, hasBoomAAA) {
            if (hasBoomAAA === void 0) { hasBoomAAA = false; }
            var outArr = [];
            var i;
            var j;
            var flag;
            var tmpArr;
            var tmp2;
            var maxCount = lastCount * (3 + 2);
            for (i = 1; i < 12; i++) {
                flag = true;
                for (j = 0; j < lastCount; j++) {
                    if (tmp3Arr.indexOf(lastNum + i + j) == -1 && tmp4Arr.indexOf(lastNum + i + j) == -1) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    tmpArr = [];
                    for (j = 0; j < lastCount; j++) {
                        tmp2 = GuanPaiCardsType.getCardByNum(handCards, lastNum + i + j, 3);
                        tmpArr.push(tmp2[0], tmp2[1], tmp2[2]);
                    }
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp1Arr.length; j++) {
                            tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp1Arr[j], 1));
                            if (tmpArr.length >= maxCount)
                                break;
                        }
                    }
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp2Arr.length; j++) {
                            tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp2Arr[j], 2));
                            if (tmpArr.length >= maxCount)
                                break;
                        }
                    }
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp3Arr.length; j++) {
                            if (tmp3Arr[j] < (lastNum + i) || tmp3Arr[j] >= (lastNum + i + lastCount))
                                tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp3Arr[j], 3));
                            if (tmpArr.length >= maxCount)
                                break;
                        }
                    }
                    if (tmpArr.length < maxCount) {
                        for (j = 0; j < tmp4Arr.length; j++) {
                            if (tmp3Arr[j] < (lastNum + i) || tmp3Arr[j] >= (lastNum + i + lastCount))
                                tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp4Arr[j], 4));
                            else
                                tmpArr = tmpArr.concat(GuanPaiCardsType.getCardByNum(handCards, tmp4Arr[j], 1, 4));
                            if (tmpArr.length >= maxCount)
                                break;
                        }
                    }
                    while (tmpArr.length > maxCount) {
                        tmpArr.pop();
                    }
                    outArr.push(tmpArr);
                }
            }
            for (i = 0; i < tmp4Arr.length; i++) {
                outArr.push(GuanPaiCardsType.getZhaDanHelper(handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, i));
            }
            //炸弹AAA
            if (hasBoomAAA) {
                for (i = 0; i < tmp3Arr.length; i++) {
                    if (tmp3Arr[i] == GuanPaiCardsType.A) {
                        outArr.push(GuanPaiCardsType.getAAAHelper(handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr, i));
                        break;
                    }
                }
            }
            for (i = 0; i < outArr.length; i++) {
                outArr[i].sort(GuanPaiCardsType.onSort);
            }
            return outArr;
        };
        /**
         * 选中一张牌智能选牌
         */
        GuanPaiCardsType.getAutoSelectedCardsByOneCard = function (helpCards, handCards, card) {
            if (helpCards && helpCards.length) {
                var cardNum = Math.floor(card / 10);
                var i;
                var j;
                var helpNum;
                var flag;
                var outArr;
                var tTmp;
                var type;
                var tmp;
                //与该牌数值相等的牌是否在提示中
                for (i = 0; i < helpCards.length; i++) {
                    tTmp = GuanPaiCardsType.getType(helpCards[i], guanpai.GuanPaiGameData.isBoomAAA, handCards.length);
                    type = tTmp[0];
                    //单顺，双顺，飞机，需要选择当前选中牌开始的顺子
                    if (type == GuanPaiCardsType.DANSHUN || type == GuanPaiCardsType.SHUANGSHUN || type == GuanPaiCardsType.FEIJI) {
                        helpNum = Math.floor(helpCards[i][0] / 10);
                        if (helpNum == cardNum) {
                            //如果选中牌是炸弹，先起炸弹。如果后面还有该牌开始的提示牌，说明有炸弹
                            for (j = i + 1; j < helpCards.length; j++) {
                                tmp = Math.floor(helpCards[j][0] / 10);
                                if (tmp == cardNum) {
                                    i = j;
                                    break;
                                }
                            }
                            flag = true;
                            break;
                        }
                    }
                    else {
                        for (j = 0; j < helpCards[i].length; j++) {
                            helpNum = Math.floor(helpCards[i][j] / 10);
                            if (helpNum == cardNum) {
                                flag = true;
                                break;
                            }
                        }
                    }
                    if (flag)
                        break;
                }
                if (flag) {
                    outArr = helpCards[i].concat();
                    //如果提示中包含这张牌，选择提示的牌
                    if (helpCards[i].indexOf(card) != -1)
                        return outArr;
                    //如果提示中不包含这张牌，删除提示中与该牌数值相等的牌，把该牌与该牌临近的牌插入进去
                    else {
                        var count = 0;
                        for (i = 0; i < outArr.length;) {
                            helpNum = Math.floor(outArr[i] / 10);
                            if (helpNum == cardNum) {
                                outArr.splice(i, 1);
                                count++;
                            }
                            else
                                i++;
                        }
                        count -= 1;
                        outArr.push(card);
                        if (count > 0) {
                            for (i = 1; i < 4; i++) {
                                if (handCards.indexOf(card + i) != -1) {
                                    outArr.push(card + i);
                                    count--;
                                    if (count <= 0)
                                        break;
                                }
                            }
                        }
                        if (count > 0) {
                            for (i = -1; i > -4; i--) {
                                if (handCards.indexOf(card + i) != -1) {
                                    outArr.push(card + i);
                                    count--;
                                    if (count <= 0)
                                        break;
                                }
                            }
                        }
                        return outArr;
                    }
                }
                return null;
            }
            return null;
        };
        /**
         * 立两张牌选牌
         */
        GuanPaiCardsType.getAutoSelectedCardsByTwoCards = function (selectCards, handCards) {
            var i;
            var startCard = selectCards[1];
            var endCard = selectCards[0];
            var startNum = Math.floor(startCard / 10);
            var endNum = Math.floor(endCard / 10);
            var tmpArr = [];
            var outArr;
            var helpNum;
            for (i = 0; i < handCards.length; ++i) {
                var num = Math.floor(handCards[i] / 10);
                if (num >= startNum && num <= endNum)
                    tmpArr.push(handCards[i]);
            }
            // if (!outArr) {
            // 	outArr = GuanPaiCardsType.getSanShun(tmpArr);
            // 	if (outArr) {
            // 		if (GuanPaiCardsType.getCardNum(outArr[0]) != startNum || GuanPaiCardsType.getCardNum(outArr[outArr.length - 1]) != endNum)
            // 			outArr = null;
            // 	}
            // }
            if (!outArr) {
                outArr = GuanPaiCardsType.getShuangShun(tmpArr);
                if (outArr) {
                    if (GuanPaiCardsType.getCardNum(outArr[0]) != startNum || GuanPaiCardsType.getCardNum(outArr[outArr.length - 1]) != endNum)
                        outArr = null;
                }
            }
            if (!outArr) {
                outArr = GuanPaiCardsType.getDanShun(tmpArr);
                if (outArr) {
                    if (GuanPaiCardsType.getCardNum(outArr[0]) != startNum || GuanPaiCardsType.getCardNum(outArr[outArr.length - 1]) != endNum)
                        outArr = null;
                }
            }
            if (outArr) {
                //如果提示中包含这张牌，选择提示的牌
                if (outArr.indexOf(startCard) != -1) {
                }
                //如果提示中不包含这张牌，删除提示中与该牌数值相等的牌，把该牌与该牌临近的牌插入进去
                else {
                    var count = 0;
                    for (i = 0; i < outArr.length;) {
                        helpNum = Math.floor(outArr[i] / 10);
                        if (helpNum == startNum) {
                            outArr.splice(i, 1);
                            count++;
                        }
                        else
                            i++;
                    }
                    count -= 1;
                    outArr.push(startCard);
                    if (count > 0) {
                        for (i = 1; i < 4; i++) {
                            if (handCards.indexOf(startCard + i) != -1) {
                                outArr.push(startCard + i);
                                count--;
                                if (count <= 0)
                                    break;
                            }
                        }
                    }
                    if (count > 0) {
                        for (i = -1; i > -4; i--) {
                            if (handCards.indexOf(startCard + i) != -1) {
                                outArr.push(startCard + i);
                                count--;
                                if (count <= 0)
                                    break;
                            }
                        }
                    }
                }
                //如果提示中包含这张牌，选择提示的牌
                if (outArr.indexOf(endCard) != -1) {
                }
                //如果提示中不包含这张牌，删除提示中与该牌数值相等的牌，把该牌与该牌临近的牌插入进去
                else {
                    var count = 0;
                    for (i = 0; i < outArr.length;) {
                        helpNum = Math.floor(outArr[i] / 10);
                        if (helpNum == endNum) {
                            outArr.splice(i, 1);
                            count++;
                        }
                        else
                            i++;
                    }
                    count -= 1;
                    outArr.push(endCard);
                    if (count > 0) {
                        for (i = 1; i < 4; i++) {
                            if (handCards.indexOf(endCard + i) != -1) {
                                outArr.push(endCard + i);
                                count--;
                                if (count <= 0)
                                    break;
                            }
                        }
                    }
                    if (count > 0) {
                        for (i = -1; i > -4; i--) {
                            if (handCards.indexOf(endCard + i) != -1) {
                                outArr.push(endCard + i);
                                count--;
                                if (count <= 0)
                                    break;
                            }
                        }
                    }
                }
                return outArr;
            }
            return null;
        };
        /**
         * 检测选中牌中是否有单顺
         */
        GuanPaiCardsType.getDanShun = function (handCards) {
            var tmpArr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //卡牌出现的次数
            var i;
            var j;
            var flag;
            for (i = 0; i < handCards.length; ++i) {
                var num = Math.floor(handCards[i] / 10);
                tmpArr[num]++;
            }
            var outArr = [];
            var start;
            var end;
            var count = 0;
            for (i = 0; i < tmpArr.length; ++i) {
                if (tmpArr[i]) {
                    if (count == 0)
                        start = i;
                    count++;
                }
                else {
                    if (count >= 5) {
                        end = i;
                        break;
                    }
                    else
                        count = 0;
                }
            }
            //有顺子
            if (end) {
                for (i = start; i < end; ++i) {
                    for (j = 0; j < handCards.length; ++j) {
                        var num = Math.floor(handCards[j] / 10);
                        if (num == i && outArr.indexOf(handCards[j]) == -1) {
                            outArr.push(handCards[j]);
                            break;
                        }
                    }
                }
                return outArr;
            }
            else
                return null;
        };
        /**
         * 检测选中牌中是否有双顺
         */
        GuanPaiCardsType.getShuangShun = function (handCards) {
            var tmpArr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //卡牌出现的次数
            var i;
            var j;
            var flag;
            for (i = 0; i < handCards.length; ++i) {
                var num = Math.floor(handCards[i] / 10);
                tmpArr[num]++;
            }
            var outArr = [];
            var start;
            var end;
            var count = 0;
            for (i = 0; i < tmpArr.length; ++i) {
                if (tmpArr[i] > 1) {
                    if (count == 0)
                        start = i;
                    count++;
                }
                else {
                    if (count >= 2) {
                        end = i;
                        break;
                    }
                    else
                        count = 0;
                }
            }
            //有顺子
            if (end) {
                for (i = start; i < end; ++i) {
                    count = 0;
                    for (j = 0; j < handCards.length; ++j) {
                        var num = Math.floor(handCards[j] / 10);
                        if (num == i && outArr.indexOf(handCards[j]) == -1) {
                            outArr.push(handCards[j]);
                            count++;
                            if (count == 2)
                                break;
                        }
                    }
                }
                return outArr;
            }
            else
                return null;
        };
        /**
         * 检测选中牌中是否有三顺
         */
        // private static getSanShun(handCards: Array<number>): Array<number> {
        // 	var tmpArr: Array<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];//卡牌出现的次数
        // 	var i: number;
        // 	var j: number;
        // 	var flag: Boolean;
        // 	for (i = 0; i < handCards.length; ++i) {
        // 		var num: number = Math.floor(handCards[i] / 10);
        // 		tmpArr[num]++;
        // 	}
        // 	var outArr: Array<number> = [];
        // 	var start: number;
        // 	var end: number;
        // 	var count: number = 0;
        // 	for (i = 0; i < tmpArr.length; ++i) {
        // 		if (tmpArr[i] > 2) {
        // 			if (count == 0)
        // 				start = i;
        // 			count++;
        // 		}
        // 		else {
        // 			if (count >= 3) {
        // 				end = i;
        // 				break;
        // 			}
        // 			else
        // 				count = 0;
        // 		}
        // 	}
        // 	//有顺子
        // 	if (end) {
        // 		for (i = start; i < end; ++i) {
        // 			count = 0;
        // 			for (j = 0; j < handCards.length; ++j) {
        // 				var num: number = Math.floor(handCards[j] / 10);
        // 				if (num == i && outArr.indexOf(handCards[j]) == -1) {
        // 					outArr.push(handCards[j]);
        // 					count++;
        // 					if (count == 3)
        // 						break;
        // 				}
        // 			}
        // 		}
        // 		var maxCount: number = (end - start + 1) * (3 + 2);
        // 		if (outArr.length <= maxCount) {
        // 			for (i = 0; i < tmpArr.length; ++i) {
        // 				if (tmpArr[i] == 1)
        // 					outArr = outArr.concat(GuanPaiCardsType.getCardByNum(handCards, i, 1));
        // 				if (outArr.length > maxCount)
        // 					break;
        // 			}
        // 		}
        // 		if (outArr.length <= maxCount) {
        // 			for (i = 0; i < tmpArr.length; ++i) {
        // 				if (tmpArr[i] == 2)
        // 					outArr = outArr.concat(GuanPaiCardsType.getCardByNum(handCards, i, 2));
        // 				if (outArr.length > maxCount)
        // 					break;
        // 			}
        // 		}
        // 		if (outArr.length <= maxCount) {
        // 			for (i = 0; i < tmpArr.length; ++i) {
        // 				if (tmpArr[i] == 3 && i < start && i > end)
        // 					outArr = outArr.concat(GuanPaiCardsType.getCardByNum(handCards, i, 3));
        // 				if (outArr.length > maxCount)
        // 					break;
        // 			}
        // 		}
        // 		if (outArr.length <= maxCount) {
        // 			for (i = 0; i < tmpArr.length; ++i) {
        // 				if (tmpArr[i] == 4) {
        // 					if (i < start && i > end)
        // 						outArr = outArr.concat(GuanPaiCardsType.getCardByNum(handCards, i, 4));
        // 					else
        // 						outArr = outArr.concat(GuanPaiCardsType.getCardByNum(handCards, i, 1, 4));
        // 				}
        // 				if (outArr.length > maxCount)
        // 					break;
        // 			}
        // 		}
        // 		while (outArr.length>maxCount){
        // 			outArr.pop();
        // 		}
        // 		return outArr;
        // 	}
        // 	else
        // 		return null;
        // }
        /**
         * 拖拽选牌
         */
        GuanPaiCardsType.getDragHelp = function (handCards, handCardsCount) {
            if (handCardsCount === void 0) { handCardsCount = 0; }
            var type = GuanPaiCardsType.getType(handCards, guanpai.GuanPaiGameData.isBoomAAA, handCardsCount);
            //刚好是双顺则选中双顺
            if (type == GuanPaiCardsType.SHUANGSHUN)
                return handCards;
            //搜索单顺
            else
                return GuanPaiCardsType.getDanShun(handCards);
        };
        GuanPaiCardsType.getCardNum = function (card) {
            return Math.floor(card / 10);
        };
        GuanPaiCardsType.getCardByNum = function (cards, num, count, startNum) {
            if (startNum === void 0) { startNum = 1; }
            var i;
            var outArr = [];
            for (i = 0; i < cards.length; i++) {
                var card = cards[i];
                if (Math.floor(card / 10) == num && outArr.indexOf(card) == -1) {
                    if (startNum > 1)
                        startNum--;
                    else {
                        count--;
                        outArr.push(card);
                        if (count <= 0)
                            break;
                    }
                }
            }
            return outArr;
        };
        GuanPaiCardsType.onSort = function (a, b) {
            if (a < b)
                return 1;
            else
                return -1;
        };
        GuanPaiCardsType.onSort2 = function (a, b) {
            if (a < b)
                return -1;
            else
                return 1;
        };
        GuanPaiCardsType.cards = [30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140,
            31, 41, 51, 61, 71, 81, 91, 101, 111, 121, 131, 141,
            32, 42, 52, 62, 72, 82, 92, 102, 112, 122, 132, 142,
            33, 43, 53, 63, 73, 83, 93, 103, 113, 123, 133, 163];
        // 4.飞机：连续三带二，两组及以上三带二，三条必须相邻，最后一手牌，可以带0-4张任意牌
        GuanPaiCardsType.DAN = 1; //单牌
        GuanPaiCardsType.DUIZI = 2; //对子
        GuanPaiCardsType.ZHADAN = 3; //炸弹 必须带一张，最后一手可不带  AAA算炸：增加“三个A带三”和“三个A带一“这两个牌型
        GuanPaiCardsType.SIDAISAN = 4; //四带三 四张相同的牌带三张任意牌，在最后一手出牌时可以带0-3张任意牌，四带三不作为炸弹，可以被炸弹压 
        GuanPaiCardsType.SANDAIER = 5; //三带二 三张点数一样的牌+两张其他的牌，三张必须带两张，两张牌不一定要对子，如果是最后一手牌，可以带0-2张任意牌。	
        GuanPaiCardsType.DANSHUN = 6;
        GuanPaiCardsType.SHUANGSHUN = 7;
        GuanPaiCardsType.FEIJI = 8;
        GuanPaiCardsType.SANSHUN = 9;
        GuanPaiCardsType.SAN = 10;
        GuanPaiCardsType.SANDAIYI = 11;
        GuanPaiCardsType.SIDAIYI = 12;
        GuanPaiCardsType.SIDAIER = 13;
        GuanPaiCardsType.A = 14;
        return GuanPaiCardsType;
    }());
    guanpai.GuanPaiCardsType = GuanPaiCardsType;
})(guanpai || (guanpai = {}));
//# sourceMappingURL=GuanPaiCardsType.js.map
var bazhang;
(function (bazhang) {
    var GameDataLayOut = /** @class */ (function () {
        function GameDataLayOut() {
        }
        //默认座位位置
        GameDataLayOut.SEAT_LAYOUT = [[], [{ centerX: 0, centerY: 275 - 20 }, { centerX: 180, centerY: -275 + 20 }],
            [{ centerX: 0, centerY: 275 - 20 }, { centerX: 640, centerY: 0 }, { centerX: -520, centerY: 0 }],
            [{ centerX: 0, centerY: 275 - 20 }, { centerX: 640, centerY: 0 }, { centerX: 180, centerY: -275 + 20 }, { centerX: -520, centerY: 0 }],
            [{ centerX: 0, centerY: 275 - 20 }, { centerX: 640, centerY: 0 }, { centerX: 450, centerY: -275 + 20 }, { centerX: -245, centerY: -275 + 20 }, { centerX: -500, centerY: 0 }],
            [{ centerX: -250, centerY: 275 - 20 }, { centerX: 450, centerY: 275 - 20 }, { centerX: 620, centerY: 0 }, { centerX: 450, centerY: -275 + 20 }, { centerX: -250, centerY: -275 + 20 }, { centerX: -520, centerY: 0 }]];
        //     public static GAME_START_SEAT_LAYOUT = [[], [{ centerX: 60, centerY: 275 }, { },{ },{ },{ centerX: 60, centerY: -275 }], [{ centerX: 60, centerY: 275 }, { }, { centerX: 620, centerY: 0 },{ },{ }, { centerX: -500, centerY: 0 }], [{ centerX: 60,centerY: 275 },{ }, { centerX: 620, centerY: 0 },{ }, { centerX: 60, centerY: -275 }, { centerX: -500, centerY: 0 }],
        //    [{ centerX: 60, centerY: 275 },{ }, { centerX: 620, centerY: 0 }, { centerX: 450, centerY: 275 }, { centerX: -245, centerY: -275 }, { centerX: -500, centerY: 0 }],[{ centerX: -245, centerY: 275 },{ centerX: 450, centerY: 275 }, { centerX: 620, centerY: 0 }, { centerX: 450, centerY: 275 }, { centerX: -245, centerY: -275 }, { centerX: -500, centerY: 0 }]]
        //游戏开始时座位定位 
        GameDataLayOut.GAME_START_SEAT_LAYOUT = [[], [{ centerX: 0, centerY: 275 - 20 }, {}, { centerX: 180, centerY: -275 + 20 }],
            [{ centerX: 0, centerY: 275 - 20 }, { centerX: 640, centerY: 0 }, {}, { centerX: -520, centerY: 0 }],
            [{ centerX: 0, centerY: 275 - 20 }, { centerX: 640, centerY: 0 }, { centerX: 180, centerY: -275 + 20 }, { centerX: -520, centerY: 0 }],
            [{ centerX: 0, centerY: 275 - 20 }, {}, { centerX: 620, centerY: 0 }, { centerX: 450, centerY: -275 + 20 }, { centerX: -250, centerY: -275 + 20 }, { centerX: -520, centerY: 0 }],
            [{ centerX: -250, centerY: 275 - 20 }, { centerX: 450, centerY: 275 - 20 }, { centerX: 620, centerY: 0 }, { centerX: 450, centerY: -275 + 20 }, { centerX: -250, centerY: -275 + 20 }, { centerX: -520, centerY: 0 }]];
        //     public static HAND_VIEW_LAYOUT = [[], [{ centerX: 60+60, centerY: 275 }, { },{ },{ },{ centerX: 60-60, centerY: -275 }], [{ centerX: 60+60, centerY: 275 }, { }, { centerX: 620-60, centerY: 0 },{ },{ }, { centerX: -500+60, centerY: 0 }], [{ centerX: 60+60,centerY: 275 }, { },{ centerX: 620-60, centerY: 0 }, { }, { centerX: 60-60, centerY: -275 }, { centerX: -500+60, centerY: 0 }],
        //    [{ centerX: 60+60, centerY: 275 }, { },{ centerX: 620-60, centerY: 0 }, { centerX: 450-60, centerY: -275 }, { centerX: -245+60, centerY: -275 }, { centerX: -500+60, centerY: 0 }],[{ centerX: -245+60, centerY: 275 },{ centerX: 450-60, centerY: 275 }, { centerX: 620-60, centerY: 0 }, { centerX: 450-60, centerY: 275 }, { centerX: -245+60, centerY: -275 }, { centerX: -500+60, centerY: 0 }]]
        //手牌位置
        GameDataLayOut.HAND_VIEW_LAYOUT = [[], [{ centerX: 60, centerY: 225 - 20 }, {}, { centerX: -80, centerY: -275 + 10 + 20 }],
            [{ centerX: 60, centerY: 225 - 20 }, { centerX: 380, centerY: 0 }, {}, { centerX: -460, centerY: 0 }],
            [{ centerX: 60, centerY: 225 - 20 }, { centerX: 380, centerY: 0 }, { centerX: -80, centerY: -275 + 10 + 20 }, { centerX: -460, centerY: 0 }],
            [{ centerX: 60, centerY: 225 - 20 }, {}, { centerX: 380 - 60, centerY: 0 }, { centerX: 250 - 60, centerY: -275 + 30 }, { centerX: -245 + 60, centerY: -275 + 30 }, { centerX: -460, centerY: 0 }],
            [{ centerX: 60 - 250, centerY: 225 - 20 }, { centerX: 250 - 60, centerY: 225 - 20 }, { centerX: 380 - 60, centerY: 0 }, { centerX: 250 - 60, centerY: -275 + 30 }, { centerX: -250 + 60, centerY: -275 + 30 }, { centerX: -460, centerY: 0 }]];
        //[],[1,5],[1,3,6],[1,3,5,6],[1,3,4,5,6],[1,2,3,4,5,6]
        //发牌位置
        GameDataLayOut.DEAL_VIEW_LAYOUT = [[{}],
            [{ centerX: 60, centerY: 275 - 20 }, { centerX: -100, centerY: -260 + 10 + 20 }],
            [{ centerX: 60, centerY: 275 - 20 }, { centerX: 380 - 20, centerY: 20 }, { centerX: -460 - 20, centerY: 20 }],
            [{ centerX: 60, centerY: 275 - 20 }, { centerX: 380 - 20, centerY: 20 }, { centerX: -100, centerY: -260 + 10 + 20 }, { centerX: -460 - 20, centerY: 20 }],
            [{ centerX: 60, centerY: 275 - 20 }, { centerX: 380 - 20, centerY: 0 }, { centerX: 250 - 60, centerY: -230 }, { centerX: -245 + 60, centerY: -230 }, { centerX: -460 - 20, centerY: 0 }],
            [{ centerX: -250 + 60, centerY: 275 - 20 }, { centerX: 250 - 60, centerY: 275 - 20 }, { centerX: 380 - 20, centerY: 0 }, { centerX: 250 - 60, centerY: -230 }, { centerX: -250 + 60, centerY: -230 }, { centerX: -460 - 20, centerY: 0 }]];
        // [[{ x: 0, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: 0 }, { x: 0, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: 0 }, { x: 0, y: 0 }, { x: 0, y: 0 }]
        // , [{ x: 0, y: 0 }, { x: 0, y: 0 }, { x: 0, y: 0 }, { x: 0, y: 0 }, { x: 0, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: 0 }, { x: 0, y: 0 }, { x: 0, y: 0 }, { x: 0, y: 0 }, { x: 0, y: 0 }]]
        GameDataLayOut.WIN_SCORE_LAYOUT = [[],
            [{ centerX: -60, centerY: 150 }, {}, { centerX: 100, centerY: -110 }],
            [{ centerX: -60, centerY: 150 }, { centerX: 550, centerY: -100 }, {}, { centerX: -570, centerY: -100 }],
            [{ centerX: -60, centerY: 150 }, { centerX: 550, centerY: -100 }, { centerX: 100, centerY: -110 }, { centerX: -570, centerY: -100 }],
            [{ centerX: -60, centerY: 150 }, {}, { centerX: 550, centerY: -100 }, { centerX: 450 - 60, centerY: -110 }, { centerX: -250 - 60, centerY: -110 }, { centerX: -570, centerY: -100 }],
            [{ centerX: -250 - 60, centerY: 150 }, { centerX: 450 - 60, centerY: 150 }, { centerX: 550, centerY: -100 }, { centerX: 450 - 60, centerY: -110 }, { centerX: -250 - 60, centerY: -110 }, { centerX: -570, centerY: -100 }]];
        GameDataLayOut.typeList = {
            1: ["img_shoupai_cardType_1.png", "img_shoupai_cardType_1.png", "img_shoupai_cardType_1.png"],
            2: ["img_shoupai_cardType_2.png", "img_shoupai_cardType_2.png", "img_shoupai_cardType_2.png"],
            3: ["img_shoupai_cardType_3.png", "img_shoupai_cardType_3.png", "img_shoupai_cardType_3.png"],
            4: ["img_shoupai_cardType_4.png", "img_shoupai_cardType_4_1.png", "img_shoupai_cardType_4.png"],
            5: ["img_shoupai_cardType_5.png", "img_shoupai_cardType_5_1.png", "img_shoupai_cardType_5.png"],
            1000: "bazhang/img_special_0.png",
            1001: "bazhang/img_special_1.png",
            1002: "bazhang/img_special_2.png",
            1003: "bazhang/img_special_3.png",
            1004: "bazhang/img_special_4.png",
            1005: "bazhang/img_special_5.png",
            1006: "bazhang/img_special_6.png",
            1007: "bazhang/img_special_7.png",
            1008: "bazhang/img_special_8.png",
        };
        GameDataLayOut.typeName = {
            1000: "三顺子",
            1001: "金条抛牌",
            1002: "双金抛牌",
            1003: "三金抛牌",
            1004: "四对子",
            1005: "炸弹抛牌",
            1006: "双炸抛牌",
            1007: "一条龙",
            1008: "同花一条龙",
        };
        GameDataLayOut.typeScore = {
            1000: "3",
            1001: "5",
            1002: "15",
            1003: "30",
            1004: "8",
            1005: "8",
            1006: "80",
            1007: "14",
            1008: "108",
        };
        GameDataLayOut.MENU_LAYOUT = { "top": 20, "right": 25 }; //_btnMenu
        GameDataLayOut.MENU_CONTENT_LAYOUT = { "top": 0, "right": 0 };
        GameDataLayOut.HISTORY_LAYOUT = { "right": 20, "y": 40 };
        GameDataLayOut.CHAT_LAYOUT = { "right": 28, "top": 150 };
        GameDataLayOut.SSYY_LAYOUT = { "right": 25, "bottom": 52 };
        GameDataLayOut.PLAY_SOUND_LAYOUT = { "right": 25, "bottom": 152 };
        GameDataLayOut.SSYY_TIP_LAYOUT = { "right": 25, "bottom": 100 };
        GameDataLayOut.BG_LAYOUT = { "centerY": NaN, "centerX": 0, "bottom": 0 };
        GameDataLayOut.LOGO_LAYOUT = { "centerY": -150, "centerX": 0 };
        GameDataLayOut.CHAT_CONTENT_LAYOUT = { "bottom": 80, "left": NaN, "right": 40 };
        GameDataLayOut.MATCH_RECORD_LAYOUT = { "y": 80, "left": NaN, "right": 20 };
        GameDataLayOut.wanfa_LAYOUT = { "left": -70, "top": 110 };
        return GameDataLayOut;
    }());
    bazhang.GameDataLayOut = GameDataLayOut;
})(bazhang || (bazhang = {}));
//# sourceMappingURL=GameDataLayOut.js.map
var bazhang;
(function (bazhang) {
    var CardsType = /** @class */ (function () {
        function CardsType(isSpecial, types, cards) {
            this.isSpecial = isSpecial;
            this.types = types;
            this.cards = cards;
        }
        return CardsType;
    }());
    bazhang.CardsType = CardsType;
    var Card = /** @class */ (function () {
        function Card(rank, suit) {
            this.rank = rank;
            this.suit = suit;
        }
        Card.prototype.cardNumber = function (rank, suit) {
            return rank * 10 + suit;
        };
        Card.prototype.toNumber = function () {
            return this.cardNumber(this.rank, this.suit);
        };
        Card.newCard = function (c) {
            var rank = Math.floor(c / 10);
            var suit = Math.floor(c % 10);
            return new Card(rank, suit);
        };
        return Card;
    }());
    bazhang.Card = Card;
    var NormalTypesTree = /** @class */ (function () {
        function NormalTypesTree(type, cards, node) {
            this.type = type;
            this.cards = cards;
            this.nextRow = [];
            this.preRow = node;
            if (node) {
                node.nextRow.push(this);
            }
        }
        return NormalTypesTree;
    }());
    var shifter_rank = 0;
    var shifter_suit = -1;
    function getJokerPlace(rank) {
        return new Card(rank, shifter_suit);
    }
    function straightJokers(rankCnt, n, len) {
        var needCnt = 0;
        for (var i = n; i < n + len; i++) {
            if (i == 1 || i == 14) {
                if (rankCnt[14] <= 0) {
                    needCnt++;
                }
            }
            else {
                if (rankCnt[i] <= 0) {
                    needCnt++;
                }
            }
        }
        return needCnt;
    }
    var typeCates = {
        flush_long: 1008,
        long: 1007,
        bomb_two: 1006,
        bomb_one: 1005,
        four_pairs: 1004,
        gold_three: 1003,
        gold_two: 1002,
        gold_one: 1001,
        threeStraight: 1000,
        straightFlush: 5,
        three: 4,
        straight: 3,
        pair: 2,
        highCard: 1,
    };
    var typeCatesStr = {};
    for (var k in typeCates) {
        typeCatesStr[typeCates[k]] = k;
    }
    // const typeFuncs = {
    //     1012 : isRoyalLong,
    //     1011 : isLong,
    //     1010 : is12Royal,
    //     1009 : is3StraightFlush,
    //     1008 : is3Four,
    //     1007 : isAllBig,
    //     1006 : isAllSmall,
    //     1005 : isOneColor,
    //     1004 : is4Three,
    //     1003 : is5PairsThree,
    //     1002 : is6PairsSingle,
    //     1001 : is3Straight,
    //     1000 : is3Color,
    // }
    var AutoSeleCards = /** @class */ (function () {
        function AutoSeleCards() {
            // cards.forEach(c => {
            //     this.cards.push(Card.newCard(c));
            // });
            this.cards = [];
            this.jokerCnt = 0;
            this.rankCnt = [];
            this.suitCnt = [0, 0, 0, 0];
            this.cardCnt = [0, 0, 0, 0];
            this.cardStack = [];
            this.jokerStack = [];
            //A2345第二大 要放在AKQJ10后面比较
            this.straightOrder = [14, 5, 13, 12, 11, 10, 9, 8, 7, 6];
            // AutoSeleCards.sortCards(this.cards);
            // this.jokerCards = [];
            // this.jokerCnt = AutoSeleCards.removeJokerCards(this.cards, this.jokerCards);
        }
        AutoSeleCards.sortCardsPrior = function (cards, prior) {
            cards.sort(function (a, b) {
                var ap = prior[a.rank] || 0;
                var bp = prior[b.rank] || 0;
                if (ap == bp) {
                    return AutoSeleCards.compareCard(a, b);
                }
                else if (ap < bp) {
                    return 1;
                }
                else {
                    return -1;
                }
            });
        };
        AutoSeleCards.sort_Cards = function (cards, t_cards) {
            var j = t_cards.length;
            for (var i = 0; i < t_cards.length; i++) {
                if (t_cards[i].suit == -1) { //赖子
                    cards[i] = cards[j];
                    j = j - 1;
                }
                else {
                    cards[i] = t_cards[i].toNumber();
                }
            }
        };
        //炸弹数量
        AutoSeleCards.four_bomb_cout = function (cards_cnt, joker_cnt) {
            return cards_cnt[4];
        };
        //是否一条龙
        AutoSeleCards.isLong = function (rankCnt, jokerCnt) {
            if (jokerCnt > 0)
                return false;
            var com;
            for (var i = 0; i < rankCnt.length; i++) {
                if (rankCnt[i] == 0)
                    continue;
                if (!com) {
                    com = i;
                }
                else {
                    if ((i - com) > 1) {
                        return false;
                    }
                    com = i;
                }
                if (rankCnt[i] > 1) {
                    return false;
                }
            }
            return true;
        };
        //是否清一色
        AutoSeleCards.isOneSuit = function (t_cards) {
            var s = t_cards[1].suit;
            for (var i = 2; i < t_cards.length; i++) {
                if (t_cards[i].suit != s) {
                    return false;
                }
            }
            return true;
        };
        //是否n同花顺
        AutoSeleCards.prototype.isNStarightFlush = function (cards_rank, n, joker_cnt, length) {
            if (n == 0)
                return true;
            var color_cnt, color_len, max_suit, max_len, len;
            color_cnt = 0;
            max_len = 0;
            for (var i = 0; i < cards_rank.length; i++) {
                color_len = 0;
                cards_rank[i].forEach(function (c) {
                    if (c > 0) {
                        color_len = color_len + 1;
                    }
                });
                if (color_len > 0) {
                    color_cnt = color_cnt + 1;
                    if (color_len > max_len) {
                        max_len = color_len;
                        max_suit = i;
                    }
                }
            }
            if (color_cnt > n)
                return false;
            len = length[n];
            if ((max_len + joker_cnt) < len)
                return false;
            var rank_cnt = cards_rank[max_suit];
            var temp_rank, temp_rank1;
            for (var i = 15 - len; i > 1; i--) {
                var need_joker = this.straight_joker(rank_cnt, i, len);
                if (need_joker <= joker_cnt) {
                    this.pushJokers(need_joker);
                    joker_cnt = joker_cnt - need_joker;
                    for (var j = 1; j < len; j++) {
                        temp_rank = i + j - 1;
                        if (temp_rank == 1) {
                            temp_rank = 14;
                        }
                        if (rank_cnt[temp_rank] && rank_cnt[temp_rank] > 0) {
                            this.pushCards(temp_rank);
                            rank_cnt[temp_rank] = rank_cnt[temp_rank] - 1;
                        }
                    }
                    joker_cnt = joker_cnt + this.popJokers();
                    var r = this.isNStarightFlush(cards_rank, n - 1, joker_cnt, length);
                    if (r) {
                        return true;
                    }
                    else {
                        for (var i = 1; i < len - need_joker; i++) {
                            temp_rank = this.popCards();
                            rank_cnt[temp_rank]++;
                        }
                    }
                }
            }
            return false;
        };
        //是否三金抛牌
        AutoSeleCards.prototype.is3StarightFlush = function (t_cards, jokerCnt) {
            var length = [2, 3, 3];
            this.cardStack = [];
            //cards_stack = {}
            this.jokerStack = [];
            var cards_rank = [];
            for (var i = 0; i < 15; i++) {
                cards_rank[i] = 0;
            }
            t_cards.forEach(function (c) {
                cards_rank[c.suit] = cards_rank[c.suit] ? cards_rank[c.suit] : [];
                cards_rank[c.suit][c.rank] = cards_rank[c.suit][c.rank] ? cards_rank[c.suit][c.rank] : 0;
                cards_rank[c.suit][c.rank] = cards_rank[c.suit][c.rank] + 1;
            });
            return this.isNStarightFlush(cards_rank, 3, jokerCnt, length);
        };
        AutoSeleCards.prototype.straight_joker = function (rank_cnt, rank, n) {
            var need_joker = 0;
            var curr_rank;
            for (var i = 1; i < n; i++) {
                curr_rank = rank + i - 1;
                if (curr_rank == 1 || curr_rank == 14) {
                    if (!rank_cnt[14] || rank_cnt[14] <= 0) {
                        need_joker = need_joker + 1;
                    }
                }
                else {
                    if (!rank_cnt[curr_rank] || rank_cnt[curr_rank] <= 0) {
                        need_joker = need_joker + 1;
                    }
                }
            }
            return need_joker;
        };
        //是否四对子
        AutoSeleCards.prototype.isFourPairs = function (cards_cnt, joker_cnt) {
            if (cards_cnt[2] == 4) {
                return true;
            }
            else {
                return false;
            }
        };
        //是否N顺子
        AutoSeleCards.prototype.isNStaight = function (rank_cnt, cards_rank, n, joker_cnt, lengths) {
            if (n == 0)
                return true;
            var length = lengths[n];
            var need_joker, temp_rank, temp_rank1;
            for (var i = 15 - length; i > 1; i--) {
                need_joker = this.straight_joker(rank_cnt, i, length);
                if (need_joker <= joker_cnt) {
                    this.pushJokers(need_joker);
                    joker_cnt = joker_cnt - need_joker;
                    for (var j = 1; j < length; j++) {
                        temp_rank = i + j - 1;
                        if (temp_rank == 1) {
                            temp_rank = 14;
                        }
                        if (rank_cnt[temp_rank] && rank_cnt[temp_rank] > 0) {
                            this.pushCards(temp_rank);
                            rank_cnt[temp_rank] == rank_cnt[temp_rank] - 1;
                        }
                    }
                    var r = this.isNStaight(rank_cnt, cards_rank, n - 1, joker_cnt, lengths);
                    if (r) {
                        return true;
                    }
                    else {
                        for (var i = 1; i < length - need_joker; i++) {
                            temp_rank = this.popCards();
                            rank_cnt[temp_rank] = rank_cnt[temp_rank] + 1;
                        }
                    }
                }
            }
        };
        //是否三顺子
        AutoSeleCards.prototype.is3Staight = function (rank_cnt, jokerCnt, T_cards) {
            // let length = [0, 2, 3, 3]
            // this.cardStack = []
            // this.jokerStack = []
            // let cards_rank = []
            // for (let i = 0; i < 15; i++) {
            //     cards_rank[i] = 0;
            // }
            // T_cards.forEach(c => {
            //     cards_rank[c.rank] = cards_rank[c.rank] ? cards_rank[c.rank]:[]
            //     cards_rank[c.rank].push(c)
            // });
            //
            var shun_tou = false;
            var shun_zhong = false;
            var shun_wei = false;
            var is_A23 = false;
            if ((T_cards[1].rank + 1 == T_cards[0].rank)) {
                shun_tou = true;
            }
            if ((T_cards[4].rank == 14 && T_cards[3].rank == 2 && T_cards[2].rank == 3) ||
                (T_cards[7].rank == 14 && T_cards[6].rank == 2 && T_cards[5].rank == 3)) {
                is_A23 = true;
            }
            if ((T_cards[4].rank + 1 == T_cards[3].rank && T_cards[3].rank + 1 == T_cards[2].rank) || is_A23) {
                shun_zhong = true;
            }
            if ((T_cards[7].rank + 1 == T_cards[6].rank && T_cards[6].rank + 1 == T_cards[5].rank) || is_A23) {
                shun_wei = true;
            }
            if (shun_tou && shun_zhong && shun_wei) {
                return true;
            }
            else {
                return false;
            }
        };
        //获取所有对子
        AutoSeleCards.prototype.getAllDuiZi = function (cards) {
            var T_cards = [];
            var n_counts = [];
            var listCard = [];
            cards.forEach(function (c) {
                T_cards.push(Card.newCard(c));
            });
            AutoSeleCards.sortCards(T_cards);
            T_cards.forEach(function (a) {
                // rankCnt[c.rank]++;
                T_cards.forEach(function (b) {
                    var duiZiCard = [];
                    if ((a.rank == b.rank && a.suit != b.suit) || a.rank == 0) {
                        var isRepeat_1 = false;
                        var num_1 = a.rank + b.rank;
                        n_counts.forEach(function (d) {
                            if (d == num_1) {
                                isRepeat_1 = true;
                            }
                        });
                        n_counts.push(num_1);
                        if (isRepeat_1 == false) {
                            var duiZiCard_1 = [];
                            duiZiCard_1.push(a);
                            duiZiCard_1.push(b);
                            listCard.push(duiZiCard_1);
                        }
                    }
                });
            });
            // for (var i = 1; i < 15; i++) {
            return listCard;
        };
        //获取所有顺子
        AutoSeleCards.prototype.getAllShunzi = function (cards) {
            var T_cards = [];
            cards.forEach(function (c) {
                T_cards.push(Card.newCard(c));
            });
            AutoSeleCards.sortCards(T_cards);
            var listCard = [];
            var n_counts = [];
            T_cards.forEach(function (a) {
                // rankCnt[c.rank]++;
                T_cards.forEach(function (b) {
                    T_cards.forEach(function (c) {
                        if (a.toNumber() != b.toNumber() && b.toNumber() != c.toNumber() && a.toNumber() != c.toNumber()) {
                            // if ((a.rank + 1 == b.rank && b.rank + 1 == c.rank) || (a.rank + 1 == b.rank && c.rank == 0&&a.rank!=13)||
                            // //判断a23各种情况
                            //     (a.rank==14 &&b.rank ==2&&c.rank ==3)||(a.rank==14 &&b.rank ==0&&c.rank ==3)||(a.rank==14 &&b.rank ==2&&c.rank ==0)) {
                            var shunziCard = [];
                            var jokerCards = [];
                            shunziCard.push(a);
                            shunziCard.push(b);
                            shunziCard.push(c);
                            AutoSeleCards.sortCards(shunziCard);
                            var jokerCnt = AutoSeleCards.removeJokerCards(shunziCard, jokerCards);
                            if (AutoSeleCards.isStraight(shunziCard, jokerCnt)) {
                                var isRepeat_2 = false;
                                var num_2 = a.rank + b.rank + c.rank;
                                n_counts.forEach(function (d) {
                                    if (d == num_2) {
                                        isRepeat_2 = true;
                                    }
                                });
                                n_counts.push(num_2);
                                if (isRepeat_2 == false) {
                                    var shunziCard_1 = [];
                                    shunziCard_1.push(a);
                                    shunziCard_1.push(b);
                                    shunziCard_1.push(c);
                                    listCard.push(shunziCard_1);
                                }
                            }
                        }
                        //  }
                    });
                });
            });
            // for (var i = 1; i < 15; i++) {
            return listCard;
        };
        //获取所有同花顺
        AutoSeleCards.prototype.getAllTongHuaShun = function (cards) {
            var T_cards = [];
            cards.forEach(function (c) {
                T_cards.push(Card.newCard(c));
            });
            AutoSeleCards.sortCards(T_cards);
            var listCard = [];
            var n_counts = [];
            T_cards.forEach(function (a) {
                // rankCnt[c.rank]++;
                T_cards.forEach(function (b) {
                    T_cards.forEach(function (c) {
                        if (a.toNumber() != b.toNumber() && b.toNumber() != c.toNumber() && a.toNumber() != c.toNumber()) {
                            var tonghuashunCard = [];
                            var jokerCards = [];
                            tonghuashunCard.push(a);
                            tonghuashunCard.push(b);
                            tonghuashunCard.push(c);
                            AutoSeleCards.sortCards(tonghuashunCard);
                            var jokerCnt = AutoSeleCards.removeJokerCards(tonghuashunCard, jokerCards);
                            if (AutoSeleCards.isFlush(tonghuashunCard, jokerCnt)) {
                                // if ((a.rank + 1 == b.rank && b.rank + 1 == c.rank) || (a.rank + 1 == b.rank && c.rank == 0&&a.rank!=13)||
                                // (a.rank==14 &&b.rank ==2&&c.rank ==3)||(a.rank==14 &&b.rank ==0&&c.rank ==3)||(a.rank==14 &&b.rank ==2&&c.rank ==0)) {
                                if (AutoSeleCards.isStraight(tonghuashunCard, jokerCnt)) {
                                    var isRepeat_3 = false;
                                    var num_3 = a.rank + b.rank + c.rank;
                                    n_counts.forEach(function (d) {
                                        if (d == num_3) {
                                            isRepeat_3 = true;
                                        }
                                    });
                                    n_counts.push(num_3);
                                    if (isRepeat_3 == false) {
                                        tonghuashunCard = [];
                                        tonghuashunCard.push(a);
                                        tonghuashunCard.push(b);
                                        tonghuashunCard.push(c);
                                        listCard.push(tonghuashunCard);
                                    }
                                    // listCard.push(tonghuashunCard)
                                }
                            }
                        }
                    });
                });
            });
            return listCard;
        };
        //获取所有炸弹
        AutoSeleCards.prototype.getAllZhaDan = function (cards) {
            var T_cards = [];
            var n_counts = [];
            cards.forEach(function (c) {
                T_cards.push(Card.newCard(c));
            });
            AutoSeleCards.sortCards(T_cards);
            var listCard = [];
            T_cards.forEach(function (a) {
                // rankCnt[c.rank]++;
                T_cards.forEach(function (b) {
                    T_cards.forEach(function (c) {
                        if (a.toNumber() != b.toNumber() && b.toNumber() != c.toNumber() && a.toNumber() != c.toNumber()) {
                            if ((a.rank == b.rank && b.rank == c.rank) || (a.rank == 0 && b.rank == 0) || (a.rank == 0 && b.rank == c.rank)) {
                                var isRepeat_4 = false;
                                var num_4 = a.rank + b.rank + c.rank;
                                n_counts.forEach(function (d) {
                                    if (d == num_4) {
                                        isRepeat_4 = true;
                                    }
                                });
                                n_counts.push(num_4);
                                if (isRepeat_4 == false) {
                                    var zhadanCard = [];
                                    zhadanCard.push(a);
                                    zhadanCard.push(b);
                                    zhadanCard.push(c);
                                    listCard.push(zhadanCard);
                                }
                            }
                        }
                    });
                });
            });
            return listCard;
        };
        //获取是否特殊牌型
        AutoSeleCards.prototype.specialType = function (cards) {
            var jokerCards = [];
            var T_cards = [];
            cards.forEach(function (c) {
                T_cards.push(Card.newCard(c));
            });
            var cardsLen = T_cards.length;
            var jokerCnt;
            AutoSeleCards.sortCards(T_cards);
            jokerCnt = AutoSeleCards.removeJokerCards(T_cards, jokerCards);
            var rankCnt = [];
            for (var i_1 = 0; i_1 < 15; i_1++) {
                rankCnt[i_1] = 0;
            }
            T_cards.forEach(function (c) {
                rankCnt[c.rank]++;
            });
            var cardsCnt = [0, 0, 0, 0, 0]; //单张、对子、三条、四条的数量
            rankCnt.forEach(function (c) {
                cardsCnt[c]++;
            });
            if (jokerCnt > 0) {
                var bomb_count = AutoSeleCards.four_bomb_cout(cardsCnt, jokerCnt);
                if (bomb_count > 0) {
                    if (bomb_count == 1) {
                        //AutoSeleCards.sort_special_cards1()
                        return typeCates.bomb_one;
                    }
                    else if (bomb_count == 2) {
                        return typeCates.bomb_two;
                    }
                }
            }
            else {
                if (AutoSeleCards.isLong(rankCnt, jokerCnt)) {
                    //是一条龙
                    var result_1 = typeCates.long;
                    if (AutoSeleCards.isOneSuit(T_cards)) {
                        result_1 = typeCates.flush_long;
                    }
                    return result_1;
                }
                var result = [];
                // if (this.is3StarightFlush(T_cards, jokerCnt)) {
                //     return typeCates.gold_three
                // }
                if (this.isFourPairs(cardsCnt, jokerCards)) {
                    return typeCates.four_pairs;
                }
                if (this.is3Staight(rankCnt, jokerCnt, T_cards)) {
                    var card_tou = [];
                    var card_zhong = [];
                    var card_wei = [];
                    for (var i = 0; i < T_cards.length; i++) {
                        if (i < 2) {
                            card_wei.push(T_cards[i]);
                        }
                        else if (i < 5) {
                            card_zhong.push(T_cards[i]);
                        }
                        else {
                            card_tou.push(T_cards[i]);
                        }
                    }
                    var flush_tou = this.isflush(card_tou);
                    var flush_zhong = this.isflush(card_zhong);
                    var flush_wei = this.isflush(card_wei);
                    var isSuitAllSame = false;
                    //三道花色都一样的话，
                    var tempSuit = T_cards[0].suit;
                    if (tempSuit == T_cards[3].suit + T_cards[6].suit) {
                        isSuitAllSame = true;
                    }
                    if (flush_tou && flush_zhong && flush_wei && isSuitAllSame)
                        return typeCates.gold_three;
                    else if (flush_tou && flush_zhong)
                        return typeCates.gold_two;
                    else if (flush_tou || flush_zhong)
                        return typeCates.gold_one;
                    return typeCates.threeStraight;
                }
            }
            if (jokerCnt == 0) {
                var bomb_count = AutoSeleCards.four_bomb_cout(cardsCnt, jokerCnt);
                if (bomb_count > 0) {
                    if (bomb_count == 1) {
                        //AutoSeleCards.sort_special_cards1()
                        return typeCates.bomb_one;
                    }
                    else if (bomb_count == 2) {
                        return typeCates.bomb_two;
                    }
                }
            }
            return 0;
        };
        AutoSeleCards.prototype.isflush = function (cards) {
            var suit = cards[1].suit;
            for (var i = 0; i < cards.length; i++) {
                if (suit != cards[i].suit) {
                    return false;
                }
            }
            return true;
        };
        AutoSeleCards.prototype.normalType = function (cards) {
            var jokerCards = [];
            var T_cards = [];
            cards.forEach(function (c) {
                T_cards.push(Card.newCard(c));
            });
            var jokerCnt;
            AutoSeleCards.sortCards(T_cards);
            jokerCnt = AutoSeleCards.removeJokerCards(T_cards, jokerCards);
            var cardsLen = T_cards.length;
            if (cardsLen + jokerCnt == 3) {
                if (AutoSeleCards.isFlush(T_cards, jokerCnt)) {
                    if (AutoSeleCards.isStraight(T_cards, jokerCnt)) {
                        //同花顺
                        return { type: typeCates.straightFlush, cards: T_cards };
                    }
                }
                if (AutoSeleCards.isStraight(T_cards, jokerCnt)) {
                    //顺子
                    return { type: typeCates.straight, cards: T_cards };
                }
            }
            var rankCnt = [];
            for (var i_2 = 0; i_2 < 15; i_2++) {
                rankCnt[i_2] = 0;
            }
            T_cards.forEach(function (c) {
                rankCnt[c.rank]++;
            });
            //获取最多牌的数量 和 最多牌的值 
            var maxRank = 0;
            var maxLen = 0;
            for (var i_3 = 14; i_3 >= 2; i_3--) {
                if (rankCnt[i_3] > maxLen) {
                    maxLen = rankCnt[i_3];
                    maxRank = i_3;
                }
            }
            //炸弹
            if (maxLen + jokerCnt == 3) {
                AutoSeleCards.sortCardsPrior(T_cards, (_a = {}, _a[maxRank] = 1, _a));
                for (var i = 1; i < jokerCnt; i++) {
                    T_cards.splice(maxLen + 1, 1, getJokerPlace(maxRank));
                    //T_cards.push(getJokerPlace(maxRank))
                }
                AutoSeleCards.sort_Cards(cards, T_cards);
                return { type: typeCates.three, cards: T_cards };
            }
            //对子
            if (maxLen + jokerCnt == 2) {
                AutoSeleCards.sortCardsPrior(T_cards, (_b = {}, _b[maxRank] = 2, _b));
                for (var i = 0; i < jokerCnt; i++) {
                    //T_cards.splice(maxLen + 1, 1, getJokerPlace(maxRank));
                    T_cards.splice(-2, 0, getJokerPlace(maxRank));
                }
                //AutoSeleCards.sortCards(T_cards)
                return { type: typeCates.pair, cards: T_cards };
            }
            return { type: typeCates.highCard, cards: T_cards };
            var _a, _b;
        };
        /**
         *  0:a=b
            1:a<b
            2:a>b
         */
        AutoSeleCards.compareTypeCards = function (t1, c1, t2, c2) {
            if (t1 > t2) {
                return 2;
            }
            else if (t1 < t2) {
                return 1;
            }
            else {
                return AutoSeleCards.compareCards(c1, c2);
            }
        };
        //扑克排序
        AutoSeleCards.sortCards = function (cards) {
            cards.sort(AutoSeleCards.compareCard);
        };
        //按大小排序
        AutoSeleCards.sortCardByRank = function (cards) {
            //cards.sort(AutoSeleCards.compareCard);
            var T_cards = [];
            cards.forEach(function (c) {
                T_cards.push(Card.newCard(c));
            });
            AutoSeleCards.sortCards(T_cards);
            var jokerCards = [];
            var jokerCnt = AutoSeleCards.removeJokerCards(T_cards, jokerCards);
            cards = [];
            for (var i = T_cards.length - 1; i >= 0; i--) {
                cards.push(T_cards[i].toNumber());
            }
            jokerCards.forEach(function (c) {
                cards.push(c);
            });
            return cards;
        };
        //按花色排序
        AutoSeleCards.sortCardBySuit = function (cards) {
            //cards.sort(AutoSeleCards.compareCard);
        };
        AutoSeleCards.removeJokerCards = function (cards, jokers) {
            var jokerCnt = 0;
            for (var i = cards.length - 1; i >= 0; i--) {
                if (cards[i].rank == shifter_rank) {
                    jokers.push(cards.pop().toNumber());
                    jokerCnt++;
                }
                else {
                    break;
                }
            }
            return jokerCnt;
        };
        //是否顺子
        AutoSeleCards.isStraight = function (cards, jokerCnt) {
            var gap = 0;
            for (var i = 1; i < cards.length; i++) {
                if (cards[i].rank == cards[i - 1].rank) {
                    return false;
                }
                gap = gap + cards[i - 1].rank - cards[i].rank - 1;
            }
            if (gap <= jokerCnt) {
                return true;
            }
            else {
                return AutoSeleCards.isA23(cards, jokerCnt);
            }
        };
        //是否同花
        AutoSeleCards.isFlush = function (cards, jokerCnt) {
            var suit = cards[0].suit;
            for (var i = 1; i < cards.length; i++) {
                if (suit != cards[i].suit) {
                    return false;
                }
            }
            return true;
        };
        //是不是A23
        AutoSeleCards.isA23 = function (cards, jokerCnt) {
            if (cards[0].rank != 14 && cards[0].rank > 3) {
                return false;
            }
            for (var i = 1; i < cards.length; i++) {
                if (cards[i].rank == cards[i - 1].rank || cards[i].rank > 3) {
                    return false;
                }
            }
            return true;
        };
        //是不是QKA
        AutoSeleCards.isQKA = function (cards, jokerCnt) {
            if (cards.length == 3) {
                if (cards[0].rank == 14 && cards[1].rank == 13 && cards[1].rank == 12) {
                    return true;
                }
                else {
                    return false;
                }
            }
            if (jokerCnt == 1) {
                if ((cards[0].rank == 14 && cards[1].rank == 13) || (cards[0].rank == 13 && cards[1].rank == 12) || (cards[0].rank == 14 && cards[1].rank == 12)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        };
        AutoSeleCards.hasJokers = function (c) {
            c.forEach(function (e) {
                if (e.suit == shifter_suit) {
                    return true;
                }
            });
            return false;
        };
        AutoSeleCards.compareCards = function (c1, c2) {
            var len = Math.max(c1.length, c2.length);
            var tmep1 = AutoSeleCards.copyCards(c1);
            var tmep2 = AutoSeleCards.copyCards(c2);
            var jokerCard1 = [];
            var jokerCnt1 = AutoSeleCards.removeJokerCards(tmep1, jokerCard1);
            var jokerCard2 = [];
            var jokerCnt2 = AutoSeleCards.removeJokerCards(tmep2, jokerCard2);
            //特殊处理QKA大于a23
            if (this.isA23(tmep1, jokerCnt1) && this.isQKA(tmep2, jokerCnt2)) {
                return 1;
            }
            if (this.isQKA(tmep1, jokerCnt1) && this.isA23(tmep2, jokerCnt2)) {
                return 2;
            }
            //  AutoSeleCards.sortCards(c1)
            //  AutoSeleCards.sortCards(c2)
            var ca, cb;
            //先比较大小
            for (var i = 0; i < len; i++) {
                if (!c1[i]) {
                    return 1;
                }
                else if (!c2[i]) {
                    return 2;
                }
                else {
                    ca = c1[i];
                    cb = c2[i];
                    if (ca.rank < cb.rank) {
                        return 1;
                    }
                    else if (ca.rank > cb.rank) {
                        return 2;
                    }
                }
            }
            //大小一样有赖子的小
            if (this.hasJokers(c1) && !this.hasJokers(c2)) {
                return 1;
            }
            if (this.hasJokers(c2) && !this.hasJokers(c1)) {
                return 2;
            }
            //都有或者都没有赖子比花色
            for (var i = 0; i < c1.length; i++) {
                ca = c1[i];
                cb = c2[i];
                if (ca.suit < cb.suit) {
                    return 1;
                }
                else if (ca.suit > cb.suit) {
                    return 2;
                }
            }
            //都一样
            return 0;
        };
        AutoSeleCards.compareCard = function (a, b) {
            if (a.rank > b.rank) {
                return -1;
            }
            else if (a.rank == b.rank) {
                if (a.suit > b.suit) {
                    return -1;
                }
                else if (a.suit == b.suit) {
                    return 0;
                }
                else {
                    return 1;
                }
            }
            else {
                return 1;
            }
        };
        AutoSeleCards.prototype.cleanStacks = function () {
            if (this.cardStack.length > 0) {
                this.cardStack = [];
            }
            if (this.jokerStack.length > 0) {
                this.jokerStack = [];
            }
        };
        AutoSeleCards.prototype.pushJokers = function (cnt) {
            this.jokerStack.push(cnt);
            this.jokerCnt -= cnt;
        };
        AutoSeleCards.prototype.popJokers = function () {
            var cnt = this.jokerStack.pop();
            this.jokerCnt += cnt;
        };
        AutoSeleCards.prototype.pushCards = function (rank) {
            this.cardStack.push(rank);
            this.rankCnt[rank]--;
        };
        AutoSeleCards.prototype.popCards = function () {
            var rank = this.cardStack.pop();
            this.rankCnt[rank]++;
        };
        AutoSeleCards.copyCards = function (cards) {
            var c1 = [];
            for (var i = 0; i < cards.length; i++) {
                c1[i] = cards[i];
            }
            return c1;
        };
        AutoSeleCards.lengths = [2, 3, 3];
        return AutoSeleCards;
    }());
    bazhang.AutoSeleCards = AutoSeleCards;
})(bazhang || (bazhang = {}));
//# sourceMappingURL=AutoSeleCards.js.map
var BaseWinCardManager = /** @class */ (function () {
    function BaseWinCardManager() {
        this.winCardsViews = {};
    }
    Object.defineProperty(BaseWinCardManager, "instance", {
        get: function () {
            if (this._instance == undefined) {
                this._instance = new BaseWinCardManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    BaseWinCardManager.prototype.registerClass = function (winClass) {
        this._winClass = winClass;
    };
    BaseWinCardManager.prototype.addWinCardView = function (seatid, dir) {
        if (!this.winCardsViews[seatid]) {
            var view = new this._winClass(seatid, dir);
            this.winCardsViews[seatid] = view;
            return view;
        }
    };
    BaseWinCardManager.prototype.addWinCards = function (seatid, card) {
        this.winCardsViews[seatid].addCard(card);
        // HandCardManager:getInstance():updateHandCardSize(seatid,self.holdCardsViews[seatid].width,self.holdCardsViews[seatid].height)
    };
    BaseWinCardManager.prototype.updateWinCards = function (seatid, cards) {
        this.winCardsViews[seatid].updateView(cards);
        // HandCardManager:getInstance():updateHandCardSize(seatid,self.holdCardsViews[seatid].width,self.holdCardsViews[seatid].height)
    };
    BaseWinCardManager.prototype.clearAll = function () {
        for (var k in this.winCardsViews) {
            var view = this.winCardsViews[k];
            view.removeSelf();
            view = null;
        }
        this.winCardsViews = {};
    };
    return BaseWinCardManager;
}());
//# sourceMappingURL=BaseWinCardManager.js.map
var BaseTingCardManager = /** @class */ (function () {
    function BaseTingCardManager() {
    }
    Object.defineProperty(BaseTingCardManager, "instance", {
        get: function () {
            if (this._instance == undefined) {
                this._instance = new BaseTingCardManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    BaseTingCardManager.prototype.registerClass = function (tingClass) {
        this._tingClass = tingClass;
    };
    BaseTingCardManager.prototype.initBaseView = function (view) {
        this._bg = view;
    };
    BaseTingCardManager.prototype.tingCard = function (cardid) {
        var info = BaseGameData.tingInfo[cardid % 100];
        if (!info)
            return;
        this.clearAll();
        if (!this.tingCardsView) {
            this.tingCardsView = new this._tingClass(info);
        }
        this._bg.addChild(this.tingCardsView);
        this.tingCardsView.zOrder = GameZorder.ChooseView;
        this.tingCardsView.centerX = 0;
        this.tingCardsView.bottom = 120;
    };
    BaseTingCardManager.prototype.clearAll = function () {
        if (this.tingCardsView) {
            this.tingCardsView.clearUI();
            this.tingCardsView.removeSelf();
            this.tingCardsView = null;
        }
    };
    return BaseTingCardManager;
}());
//# sourceMappingURL=BaseTingCardManager.js.map
var BaseHoldCardManager = /** @class */ (function () {
    function BaseHoldCardManager() {
        this.holdCardsViews = {};
    }
    Object.defineProperty(BaseHoldCardManager, "instance", {
        get: function () {
            if (this._instance == undefined) {
                this._instance = new BaseHoldCardManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    BaseHoldCardManager.prototype.registerClass = function (holdClass) {
        this._holdClass = holdClass;
    };
    BaseHoldCardManager.prototype.addHoldCardView = function (seatid, dir) {
        if (!this.holdCardsViews[seatid]) {
            var view = new this._holdClass(seatid, dir);
            this.holdCardsViews[seatid] = view;
            return view;
        }
    };
    BaseHoldCardManager.prototype.addHoldCards = function (seatid, cardInfo) {
        this.holdCardsViews[seatid].addHoldCard(cardInfo);
        // HandCardManager:getInstance():updateHandCardSize(seatid,self.holdCardsViews[seatid].width,self.holdCardsViews[seatid].height)
    };
    BaseHoldCardManager.prototype.updateHoldCards = function (seatid, cardInfo) {
        this.holdCardsViews[seatid].updateView(cardInfo);
        // HandCardManager:getInstance():updateHandCardSize(seatid,self.holdCardsViews[seatid].width,self.holdCardsViews[seatid].height)
    };
    BaseHoldCardManager.prototype.clearAll = function () {
        for (var k in this.holdCardsViews) {
            var view = this.holdCardsViews[k];
            view.removeSelf();
            view = null;
        }
        this.holdCardsViews = {};
    };
    BaseHoldCardManager.prototype.getHoldPos = function (seatid) {
        return this.holdCardsViews[seatid].getHoldPos();
    };
    BaseHoldCardManager.prototype.pengGang = function (seatid, cards) {
        this.holdCardsViews[seatid].pengGang(cards[cards.length - 1]);
    };
    BaseHoldCardManager.prototype.removePengGang = function (seatid, card) {
        if (this.holdCardsViews[seatid]) {
            this.holdCardsViews[seatid].removePengGang(card);
        }
    };
    return BaseHoldCardManager;
}());
//# sourceMappingURL=BaseHoldCardManager.js.map
// import HandCardView = require("./shanxi_mj")
var BaseHandCardManager = /** @class */ (function () {
    function BaseHandCardManager() {
        this.handCardsViews = [];
    }
    Object.defineProperty(BaseHandCardManager, "instance", {
        get: function () {
            if (this._instance == undefined) {
                this._instance = new BaseHandCardManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    BaseHandCardManager.prototype.registerClass = function (handClass) {
        this._handClass = handClass;
    };
    BaseHandCardManager.prototype.addHandCardView = function (seatid, dir, callback) {
        if (!this.handCardsViews[seatid]) {
            var view = new this._handClass(seatid, dir, callback);
            this.handCardsViews[seatid] = view;
            return view;
        }
        // if not this.handCardsViews[seatid] then
        //     var view = HandCardsView.new(seatid, dir,callback)
        //     this.handCardsViews[seatid] = view
        //     return view
        // end
    };
    BaseHandCardManager.prototype.addCard = function (seatid, cardid, callback) {
        this.handCardsViews[seatid].addCard(cardid, callback);
    };
    BaseHandCardManager.prototype.removeCard = function (seatid, cardid) {
        var card = cardid || 0;
        this.handCardsViews[seatid].removeCard(card);
    };
    BaseHandCardManager.prototype.setCatchCard = function (seatid, catchCard) {
        if (this.handCardsViews[seatid]) {
            this.handCardsViews[seatid].setCatchCard(catchCard);
        }
    };
    BaseHandCardManager.prototype.updatePos = function (seatid) {
        if (!Utils.checkSeatid(seatid))
            return;
        this.handCardsViews[seatid].updatePos();
    };
    BaseHandCardManager.prototype.shuffleCards = function (seatid, callback) {
        if (this.handCardsViews[seatid].dir == 1) {
            this.handCardsViews[seatid].shuffleCards(callback);
        }
    };
    BaseHandCardManager.prototype.getHandCardViews = function (seatid) {
        if (this.handCardsViews[seatid]) {
            return this.handCardsViews[seatid].cardsViews.length;
        }
    };
    BaseHandCardManager.prototype.showHandCards = function (seatid, cards) {
        var view = this.handCardsViews[seatid];
        if (view) {
            // var cards = view.setCardsFront(cards,wincard)
            view.showAllCards(cards);
        }
    };
    BaseHandCardManager.prototype.getHandCardPosition = function (seatid, card) {
        var views = this.handCardsViews[seatid].cardsViews;
        if (!Utils.checkSeatid(BaseGameData.selfSeatid) || this.handCardsViews[seatid].dir != 1) {
            var x_1 = views[0].x;
            var y_1 = views[0].y;
            var pos_1 = this.handCardsViews[seatid].localToGlobal(new laya.maths.Point(x_1, y_1));
            return pos_1;
        }
        else {
            for (var k in views) {
                var v = views[k];
                if (v.card == card) {
                    var x = v.x;
                    var y = v.y;
                    var pos = this.handCardsViews[seatid].localToGlobal(new laya.maths.Point(x, y));
                    return pos;
                }
            }
        }
    };
    BaseHandCardManager.prototype.updateHandCards = function (seatid, cards, count) {
        if (this.handCardsViews[seatid]) {
            // if(count > 1){
            this.handCardsViews[seatid].updateHandCards(cards, count);
            // }else{
            // 	this.setCatchCard(seatid, cards[0])
            // }
        }
    };
    BaseHandCardManager.prototype.updateFlower = function (seatid, cards, count) {
        if (this.handCardsViews[seatid]) {
            // if(count > 1){
            this.handCardsViews[seatid].updateFlower(cards, count);
            // }else{
            // 	this.setCatchCard(seatid, cards[0])
            // }
        }
    };
    // public addFlowerCards(seatid,cards,count)
    BaseHandCardManager.prototype.updateHandCardSize = function (seatid, width, height) {
        this.handCardsViews[seatid].wOffset = width;
        this.handCardsViews[seatid].hOffset = height;
    };
    BaseHandCardManager.prototype.clearCurrentOpt = function () {
        if (Utils.checkSeatid(BaseGameData.selfSeatid)) {
            this.handCardsViews[BaseGameData.selfSeatid].clearCurrentOpt();
        }
    };
    BaseHandCardManager.prototype.removeCards = function (seatid, cards, noAni) {
        this.handCardsViews[seatid].removeCards(cards, noAni);
    };
    BaseHandCardManager.prototype.updateHoldPos = function (seatid) {
        if (this.handCardsViews[seatid]) {
            var cardsViews = this.handCardsViews[seatid].cardsViews;
            var x, y, width, height = this.handCardsViews[seatid].getCardSizeAndPos();
            var pos = this.handCardsViews[seatid].convertToWorldSpace(x, y);
            // _holdCardManager:updatePos(seatid,pos.x,pos.y,width,height)
        }
    };
    BaseHandCardManager.prototype.clearAll = function () {
        for (var k in this.handCardsViews) {
            var view = this.handCardsViews[k];
            view.clearUI();
            view.removeSelf();
            view = null;
        }
        this.handCardsViews = null;
        this.handCardsViews = [];
    };
    BaseHandCardManager.prototype.tingCard = function () {
        // if (!_gameController.optSeatid || _gameController.optSeatid != BaseGameData.self_seatid) return
        if (Utils.checkSeatid(BaseGameData.selfSeatid)) {
            this.handCardsViews[BaseGameData.selfSeatid].tingCard();
        }
    };
    BaseHandCardManager.prototype.clearArrow = function () {
        if (Utils.checkSeatid(BaseGameData.selfSeatid) && this.handCardsViews[BaseGameData.selfSeatid].clearArrow) {
            this.handCardsViews[BaseGameData.selfSeatid].clearArrow();
        }
    };
    BaseHandCardManager.prototype.unSelectCards = function () {
        if (Utils.checkSeatid(BaseGameData.selfSeatid) && this.handCardsViews[BaseGameData.selfSeatid]) {
            this.handCardsViews[BaseGameData.selfSeatid].unSelectCards();
        }
    };
    BaseHandCardManager.prototype.removeFlowerCards = function (seatid, cards) {
        this.handCardsViews[seatid].removeFlowerCards(cards);
    };
    BaseHandCardManager.prototype.addFlowerCards = function (seatid, cards) {
        if (Utils.checkSeatid(seatid) && seatid == BaseGameData.selfSeatid) {
            for (var k in cards) {
                var v = cards[k];
                if (v == 99)
                    return;
            }
        }
        this.handCardsViews[seatid].addFlowerCards(cards);
    };
    BaseHandCardManager.prototype.darkTingTiles = function (seatid, ting) {
        if (Utils.checkSeatid(seatid) && seatid == BaseGameData.selfSeatid) {
            this.handCardsViews[seatid].darkTingTiles(ting);
        }
    };
    BaseHandCardManager.prototype.normalTingTiles = function () {
        if (Utils.checkSeatid(BaseGameData.selfSeatid)) {
            this.handCardsViews[BaseGameData.selfSeatid].normalTingTiles();
        }
    };
    // public setTouchable(seatid, touchable)
    // 	if checkSeatid(seatid) and seatid == BaseGameData.self_seatid then
    // 		this.handCardsViews[seatid]:setTouchable(touchable)
    // 	end	
    // end
    BaseHandCardManager.prototype.updateFrame = function () {
        if (Utils.checkSeatid(BaseGameData.selfSeatid) && this.handCardsViews[BaseGameData.selfSeatid]) {
            // this.handCardsViews[BaseGameData.self_seatid].updateHandCardFrame(_gameDataMgr.selfInfo.handCards)
        }
    };
    BaseHandCardManager.prototype.showGodCards = function () {
        for (var k in this.handCardsViews) {
            var view = this.handCardsViews[k];
            view.showGods();
        }
    };
    BaseHandCardManager.prototype.initTouch = function (seatid) {
        if (this.handCardsViews[seatid]) {
            this.handCardsViews[seatid].initTouch();
        }
    };
    BaseHandCardManager.prototype.showArror = function (seatid) {
        if (this.handCardsViews[seatid]) {
            this.handCardsViews[seatid].showArror();
        }
    };
    BaseHandCardManager.prototype.clearArror = function (seatid) {
        if (this.handCardsViews[seatid]) {
            this.handCardsViews[seatid].clearArror();
        }
    };
    BaseHandCardManager.prototype.clearTouch = function (seatid) {
        if (this.handCardsViews[seatid]) {
            this.handCardsViews[seatid].clearTouch();
        }
    };
    return BaseHandCardManager;
}());
//# sourceMappingURL=BaseHandCardManager.js.map
var BaseFoldCardManager = /** @class */ (function () {
    function BaseFoldCardManager() {
        this._foldType = 0;
        this.foldCardsViews = {};
    }
    Object.defineProperty(BaseFoldCardManager, "instance", {
        get: function () {
            if (this._instance == undefined) {
                this._instance = new BaseFoldCardManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    BaseFoldCardManager.prototype.registerClass = function (foldClass) {
        this._foldClass = foldClass;
    };
    BaseFoldCardManager.prototype.addFoldCardView = function (seatid, dir) {
        if (this._foldType > 0) {
            this.foldCardsViews[0] = new this._foldClass(seatid, dir);
            return this.foldCardsViews[0];
        }
        else if (!this.foldCardsViews[seatid]) {
            var view = new this._foldClass(seatid, dir);
            this.foldCardsViews[seatid] = view;
            return view;
        }
    };
    BaseFoldCardManager.prototype.addFoldCard = function (seatid, cardid) {
        if (this._foldType > 0) {
            this.foldCardsViews[0].addFoldCard(cardid);
        }
        else {
            if (this.foldCardsViews[seatid])
                this.foldCardsViews[seatid].addFoldCard(cardid);
        }
        // HandCardManager:getInstance():updateHandCardSize(seatid,self.holdCardsViews[seatid].width,self.holdCardsViews[seatid].height)
    };
    BaseFoldCardManager.prototype.updateFoldCards = function (seatid, cards) {
        this.foldCardsViews[seatid].updateFoldCards(cards);
        // HandCardManager:getInstance():updateHandCardSize(seatid,self.holdCardsViews[seatid].width,self.holdCardsViews[seatid].height)
    };
    BaseFoldCardManager.prototype.clearAll = function () {
        for (var k in this.foldCardsViews) {
            var view = this.foldCardsViews[k];
            view.removeSelf();
            view = null;
        }
        this.foldCardsViews = {};
    };
    BaseFoldCardManager.prototype.getFoldCardPos = function (seatid) {
        if (this._foldType > 0) {
            return this.foldCardsViews[0].getLastFlagPos();
        }
        else {
            if (this.foldCardsViews[seatid])
                return this.foldCardsViews[seatid].getLastFlagPos();
        }
    };
    BaseFoldCardManager.prototype.getFoldPosition = function (seatid) {
        if (this._foldType > 0) {
            return this.foldCardsViews[0].getFoldCardPos();
        }
        else {
            return this.foldCardsViews[seatid].getFoldCardPos();
        }
    };
    BaseFoldCardManager.prototype.removeFoldCard = function (seatid) {
        if (this._foldType > 0) {
            this.foldCardsViews[0].removeFoldCard();
        }
        else {
            this.foldCardsViews[seatid].removeFoldCard();
        }
    };
    BaseFoldCardManager.prototype.removeCard = function (seatid, card) {
        if (this._foldType > 0) {
            this.foldCardsViews[0].removeCard(card);
        }
        else {
            if (this.foldCardsViews[seatid]) {
                this.foldCardsViews[seatid].removeCard(card);
            }
        }
    };
    // public updatePos(seatid,x,y,width,height)
    // 	if self.holdCardsViews[seatid] then
    // 		self.holdCardsViews[seatid]:updatePos(x,y,width,height)
    // 	end
    // end
    // public markSameCard(card)
    // 	for k,v in pairs(self.holdCardsViews) do
    // 		v:markSameCard(card)
    // 	end
    // end
    // public clearMarkCard()
    // 	for k,v in pairs(self.holdCardsViews) do
    // 		v:clearMarkCard()
    // 	end
    // end
    BaseFoldCardManager.prototype.hideLastFlag = function (seatid) {
        if (this.foldCardsViews[seatid]) {
            this.foldCardsViews[seatid].hideLastFlag();
        }
    };
    BaseFoldCardManager.prototype.showLastFlag = function (seatid) {
        if (this.foldCardsViews[seatid]) {
            return this.foldCardsViews[seatid].getLastFlagPos();
        }
    };
    return BaseFoldCardManager;
}());
//# sourceMappingURL=BaseFoldCardManager.js.map
/*
* @author seacole
* 序列帧特效配置;
*/
var TableLayout = /** @class */ (function () {
    function TableLayout() {
    }
    TableLayout.handCardLayouts = [];
    TableLayout.foldCardLayouts = [];
    TableLayout.holdCardLayouts = [];
    TableLayout.winCardLayouts = [];
    TableLayout.HAND_CARD = [
        { width: 936, height: 103 },
        { width: 49, height: 349 },
        { width: 573, height: 74 },
        { width: 29, height: 338 }
    ];
    TableLayout.FOLD_BIG_CARD = [];
    TableLayout.OTHER_OPT_POS = [];
    TableLayout.STAGE = {
        width: 1280,
        height: 720
    };
    return TableLayout;
}());
//# sourceMappingURL=TableLayout.js.map
var GameZorder = /** @class */ (function () {
    function GameZorder() {
    }
    GameZorder.HandCardView1 = 7;
    GameZorder.ChooseView = 11;
    GameZorder.Player = 20;
    GameZorder.Ani = 30;
    return GameZorder;
}());
//# sourceMappingURL=GameZorder.js.map
var GameDef = /** @class */ (function () {
    function GameDef() {
    }
    GameDef.getGameTypeByGameName = function (name) {
        var idx = GameDef.GAME_NAME.indexOf(name);
        return idx + 1;
    };
    Object.defineProperty(GameDef, "currentGames", {
        get: function () {
            if (!GameDef._currentGames) {
                GameDef._currentGames = [];
                for (var i = 0; i < GameConfig.GAMES.length; i++) {
                    var type = GameDef.getGameTypeByGameName(GameConfig.GAMES[i]);
                    if (type)
                        GameDef._currentGames.push(type);
                }
                GameDef._currentGames.sort();
            }
            return GameDef._currentGames;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GameDef, "currentMatchs", {
        get: function () {
            if (!GameDef._currentMatchs) {
                GameDef._currentMatchs = [];
                for (var i = 0; i < GameConfig.MATCHS.length; i++) {
                    var type = GameDef.getGameTypeByGameName(GameConfig.MATCHS[i]);
                    if (type)
                        GameDef._currentMatchs.push(type);
                }
                GameDef._currentMatchs.sort();
            }
            return GameDef._currentMatchs;
        },
        enumerable: true,
        configurable: true
    });
    GameDef.isMaJiang = function (gameType) {
        if (gameType == GameDef.GAME_TYPE.JINYUN_GS_MJ || gameType == GameDef.GAME_TYPE.JINYUN_MJ || gameType == GameDef.GAME_TYPE.JINYUN_HZ_MJ || gameType == GameDef.GAME_TYPE.SHANGQIU_MJ || gameType == GameDef.GAME_TYPE.SHANXI_MJ)
            return true;
        else
            return false;
    };
    Object.defineProperty(GameDef, "showGames", {
        get: function () {
            if (!GameDef._showGames) {
                GameDef._showGames = {};
                GameDef._showDes = {};
                var i = 1;
                for (var k in GameConfig.SHOW_GAME) {
                    var type = GameDef.getGameTypeByGameName(k);
                    GameDef._showDes[type] = i;
                    if (type) {
                        if (!GameDef._showGames[type])
                            GameDef._showGames[type] = [];
                    }
                    var v = GameConfig.SHOW_GAME[k];
                    for (var j in v) {
                        var t = GameDef.getGameTypeByGameName(v[j]);
                        if (t) {
                            GameDef._showGames[type].push(t);
                        }
                    }
                    i++;
                }
                // GameDef._currentGames.sort();
            }
            return GameDef._showGames;
        },
        enumerable: true,
        configurable: true
    });
    GameDef.OptType = {
        MJ_DISCARD: 0,
        MJ_DRAW: 1,
        MJ_CHI: 2,
        MJ_PENG: 3,
        MJ_MNGANG: 4,
        MJ_ANGANG: 5,
        MJ_PENGGANG: 6,
        MJ_TING: 7,
        MJ_HU: 8,
        MJ_QI: 9,
        MJ_MISS_HU: 10,
        MJ_FLOWER: 11,
        MJ_CHOICE: 12,
        MJ_PIAO: 15,
        MJ_ANKOU: 16,
        MJ_DEAL: 17,
        CALL_SCORE: 18,
        CALL_SCORE2: 19,
        SHOW_CARDS: 20,
        RECONNECT: 21,
        PA_MAKE_S: 22,
        PA_MAKE_N: 23,
        POINT_OUT: 24,
        MISS_PENG: 25,
        MISS_CHI: 26,
        PIAO: 27
    };
    GameDef.ShowInfoType = {
        SHOW_DICE: 1,
        DEAL_CARDS: 2,
        SHUFFLE_CARD: 3,
        WIN_DEATIL: 4,
        WIN_TYPE: 5,
        CALL_SCORE: 6,
        DRAW_SHIFTER: 7,
        SHOW_OPT_END: 8,
        QUAN_LEI_DA: 9,
        GEN_PAI: 10,
        ZUIHOU4: 11,
        MNGANG: 12,
        ANGANG: 13,
        PENGGANG: 14,
        CANCELGANG: 15,
        START_TIME: 16,
        START_GAME: 17,
        BAO_TING: 18
    };
    GameDef.DETAIL_TYPE = {
        WIN_DEATIL: 1,
        SHOW_RULE: 2,
        WIN_SPECIAL: 3,
        GUN_DETAIL: 4,
        LOSE_DETAIL: 5,
        HISTORY_DETAIL: 6
    };
    GameDef.AREA_TYPE = {
        HAND_CARD: 1,
        FOLD_CARD: 2,
        HOLD_CARD: 3,
        FLOWER_CARD: 4,
        TING_CARD: 5,
        WIN_CARD: 6
    };
    GameDef.MJ_WIN_TYPE = {
        NO_WIN: 0,
        WIN_ALL: 1,
        WIN_ONE: 2,
        WIN_KONG: 3,
        DISBAND: 4,
    };
    GameDef.WIN_TYPE = {
        MJ_DIANPAO: 1,
        MJ_HUAPAI: 2,
        MJ_ANKA: 3,
        MJ_ZIMO: 4,
        MJ_QIAZHANG: 5,
        MJ_MENQING: 6,
        MJ_QUEMEN: 7,
        MJ_BAOTING: 8,
        MJ_GANG: 9,
        WIN_258: 10,
        EYES_258: 11,
        SEVEN_PAIRS: 12,
        PURE_COLOR: 13,
        PAO: 14,
        DANDIAO: 15,
        YING_SEVEN_PAIRS: 16,
        DUIDUIHU: 17,
        SANCAI: 18,
        GANGKAI: 19,
        HAIDILAOYUE: 20,
        QUANZI: 21,
        QIANGGANG: 22,
        SHISANBUKAO: 23,
        QIZI: 24,
        TIANHU: 25,
        DIHU: 26,
        GEN_PAI: 27,
        XIAZHUANG: 28,
        HAOQI: 29,
        HAO_DUIDUIHU: 30,
        BIANZHANG: 31,
        SHUANG_HAOQI: 32,
        SAN_HAOQI: 33,
        CAI_PIAO: 34,
        GANG_PIAO: 35,
        PIAO_GANG: 36,
        SHI_FENG: 37,
        BAOTOU: 38,
    };
    GameDef.WIN_TYPE_SYMBOL = {
        1: "+",
        2: "+",
        3: "*",
        4: "*",
        5: "*",
        6: "*",
        7: "*",
        8: "*",
        9: "+",
        10: "*",
        11: "*",
        12: "*",
        13: "*",
        14: "+"
    };
    GameDef.WIN_TYPE_STRING = {
        1: '点炮',
        2: '花牌',
        3: '暗扣',
        4: '自摸',
        5: '掐张',
        6: '门清',
        7: '缺门',
        8: '报听',
        9: '杠分'
    };
    GameDef.CHAT_MESSAGE = {
        1: ["不要木讷了，克里马擦些",
            "你咋回事呢？出牌这么慢",
            "还让不让我摸牌了，一个劲碰",
            "打张让我碰下啊",
            "没将没将，打两一样",
            "炸得忒色，廖咋咧",
            "来来来，我看你还能打个啥",
            " 臭水平，打的啥牌嘛",
            "都不要点炮，我要扣炸弹",
            "伙计，不要碰了，上碰下炸，你小心点",
            "哎呀，手气真是好"
        ],
        2: ["你太牛啦！",
            "手气真好！",
            "快点出牌啊",
            "今天真高兴",
            "你放炮，我不胡",
            "你家里是开银行的吧",
            "不好意思，我有事要先走一步啦",
            "你的牌打得太好啦"
        ],
        3: ["跟你们玩真有意思",
            "哥哥姐姐你们哪里人啊",
            "打快点啊，睡去了",
            "还给不给人摸牌了",
            "想要什么牌就来什么牌",
            "全部都是卡牌怎么打打哦",
            "都是些不搭牌",
            "你的麻将打的缙云第一名",
            "暗杠都被你碰没了",
            "别吵别吵，吵什么",
            "赢的人今天晚上请吃夜宵",
            "一直输，短裤都输没了"
        ],
        4: ["很高兴见到各位",
            "这把牌真好，要全垒打了",
            "今天手气真差",
            "给我来点好牌吧",
            "快点啊，等好久了",
            "为什么总是我中枪",
            "我要打枪了",
            "特殊牌，来个特殊牌",
            "别急，先让我想想",
            "哈喽，快摊牌了",
            "大家快穿好防弹衣",
            "这把牌输惨了"
        ],
        5: ["跟你们玩真有意思",
            "哥哥姐姐你们哪里人啊",
            "打快点啊，睡去了",
            "还给不给人摸牌了",
            "想要什么牌就来什么牌",
            "全部都是卡牌怎么打打哦",
            "都是些不搭牌",
            "你的麻将打的缙云第一名",
            "暗杠都被你碰没了",
            "别吵别吵，吵什么",
            "赢的人今天晚上请吃夜宵",
            "一直输，短裤都输没了"
        ],
        6: ["跟你们玩真有意思",
            "哥哥姐姐你们哪里人啊",
            "打快点啊，睡去了",
            "还给不给人摸牌了",
            "想要什么牌就来什么牌",
            "全部都是卡牌怎么打打哦",
            "都是些不搭牌",
            "你的麻将打的缙云第一名",
            "暗杠都被你碰没了",
            "别吵别吵，吵什么",
            "赢的人今天晚上请吃夜宵",
            "一直输，短裤都输没了"
        ],
        7: ["你太牛了",
            "哈哈，手气真好",
            "快点出牌啊",
            "今天真高兴",
            "你放炮，我不胡",
            "你家里是开银行的吧",
            "不好意思，我有事要先走一步了",
            "你的牌打得太好了",
            "大家好，很高兴见到各位",
            "怎么又断线了，网络怎么这么差呀"
        ],
        8: ["打牌不怕炸，说明胆子大",
            "我说你能快点嘛",
            "投降输一半，骚年们，放下武器吧",
            "要快要快，不能像个老太太",
            "我到底跟你有什么仇，什么怨",
            "啊呀妈呀，太刺激了",
            "哇，你的牌打得不错啊",
            "我炸你个桃花朵朵",
            "一手臭牌，只能留着下蛋啦"
        ],
        9: ["你的牌打的也太好了",
            "快点吧我等到花都谢了",
            "和你合作真是太愉快了",
            "吐了个槽的整个一个悲剧啊",
            "怎么炸弹这么多，我都被炸晕了",
            "投降输一半，速度投降吧",
            "不要吵了有什么好吵的，专心玩牌吧",
            "大清早的，鸡都还没叫慌什么嘛",
        ],
        10: ["不要木讷了，克里马擦些",
            "你咋回事呢？出牌这么慢",
            "还让不让我摸牌了，一个劲碰",
            "打张让我碰下啊",
            "没将没将，打两一样",
            "炸得忒色，廖咋咧",
            "来来来，我看你还能打个啥",
            " 臭水平，打的啥牌嘛",
            "都不要点炮，我要扣炸弹",
            "伙计，不要碰了，上碰下炸，你小心点",
            "哎呀，手气真是好"
        ],
    };
    GameDef.CHAT_EMOJI = ["chat/1/wll_00.png,chat/1/wll_01.png,chat/1/wll_02.png,chat/1/wll_03.png,chat/1/wll_04.png,chat/1/wll_05.png,chat/1/wll_06.png,chat/1/wll_07.png,chat/1/wll_08.png,chat/1/wll_09.png,chat/1/wll_10.png,chat/1/wll_11.png,chat/1/wll_12.png,chat/1/wll_13.png,chat/1/wll_14.png,chat/1/wll_15.png,chat/1/wll_16.png,chat/1/wll_17.png,chat/1/wll_18.png,chat/1/wll_19.png",
        "chat/2/wdlh_00.png,chat/2/wdlh_01.png,chat/2/wdlh_02.png,chat/2/wdlh_03.png,chat/2/wdlh_04.png,chat/2/wdlh_05.png,chat/2/wdlh_06.png,chat/2/wdlh_07.png,chat/2/wdlh_08.png,chat/2/wdlh_09.png,chat/2/wdlh_10.png,chat/2/wdlh_11.png,chat/2/wdlh_12.png,chat/2/wdlh_13.png,chat/2/wdlh_14.png,chat/2/wdlh_15.png,chat/2/wdlh_16.png,chat/2/wdlh_17.png,chat/2/wdlh_18.png,chat/2/wdlh_19.png,chat/2/wdlh_20.png,chat/2/wdlh_21.png,chat/2/wdlh_22.png,chat/2/wdlh_23.png",
        "chat/3/yyl_00.png,chat/3/yyl_01.png,chat/3/yyl_02.png,chat/3/yyl_03.png,chat/3/yyl_04.png,chat/3/yyl_05.png,chat/3/yyl_06.png,chat/3/yyl_07.png,chat/3/yyl_08.png,chat/3/yyl_09.png,chat/3/yyl_10.png,chat/3/yyl_11.png,chat/3/yyl_12.png,chat/3/yyl_13.png,chat/3/yyl_14.png,chat/3/yyl_15.png,chat/3/yyl_16.png,chat/3/yyl_17.png,chat/3/yyl_18.png,chat/3/yyl_19.png",
        "chat/4/kdcp_00.png,chat/4/kdcp_01.png,chat/4/kdcp_02.png,chat/4/kdcp_03.png,chat/4/kdcp_04.png,chat/4/kdcp_05.png,chat/4/kdcp_06.png,chat/4/kdcp_07.png,chat/4/kdcp_08.png,chat/4/kdcp_09.png,chat/4/kdcp_10.png,chat/4/kdcp_11.png,chat/4/kdcp_12.png,chat/4/kdcp_13.png,chat/4/kdcp_14.png,chat/4/kdcp_15.png,chat/4/kdcp_16.png,chat/4/kdcp_17.png,chat/4/kdcp_18.png",
        "chat/5/rrw_00.png,chat/5/rrw_01.png,chat/5/rrw_02.png,chat/5/rrw_03.png,chat/5/rrw_04.png,chat/5/rrw_05.png,chat/5/rrw_06.png,chat/5/rrw_07.png,chat/5/rrw_08.png,chat/5/rrw_09.png,chat/5/rrw_10.png,chat/5/rrw_11.png,chat/5/rrw_12.png,chat/5/rrw_13.png,chat/5/rrw_14.png,chat/5/rrw_15.png,chat/5/rrw_16.png,chat/5/rrw_17.png,chat/5/rrw_18.png,chat/5/rrw_19.png",
        "chat/6/ty_00.png,chat/6/ty_01.png,chat/6/ty_02.png,chat/6/ty_03.png,chat/6/ty_04.png,chat/6/ty_05.png,chat/6/ty_06.png,chat/6/ty_07.png,chat/6/ty_08.png,chat/6/ty_09.png,chat/6/ty_10.png,chat/6/ty_11.png,chat/6/ty_12.png,chat/6/ty_13.png,chat/6/ty_14.png,chat/6/ty_15.png,chat/6/ty_16.png,chat/6/ty_17.png,chat/6/ty_18.png,chat/6/ty_19.png,chat/6/ty_20.png,chat/6/ty_21.png,chat/6/ty_22.png,chat/6/ty_23.png",
        "chat/7/zmlh_00.png,chat/7/zmlh_01.png,chat/7/zmlh_02.png,chat/7/zmlh_03.png,chat/7/zmlh_04.png,chat/7/zmlh_05.png,chat/7/zmlh_06.png,chat/7/zmlh_07.png,chat/7/zmlh_08.png,chat/7/zmlh_09.png,chat/7/zmlh_10.png,chat/7/zmlh_11.png,chat/7/zmlh_12.png,chat/7/zmlh_13.png,chat/7/zmlh_14.png,chat/7/zmlh_15.png,chat/7/zmlh_16.png",
        "chat/8/zlp_00.png,chat/8/zlp_01.png,chat/8/zlp_02.png,chat/8/zlp_03.png,chat/8/zlp_04.png,chat/8/zlp_05.png,chat/8/zlp_06.png,chat/8/zlp_07.png,chat/8/zlp_08.png,chat/8/zlp_09.png,chat/8/zlp_10.png,chat/8/zlp_11.png,chat/8/zlp_12.png,chat/8/zlp_13.png,chat/8/zlp_14.png,chat/8/zlp_15.png,chat/8/zlp_16.png,chat/8/zlp_17.png,chat/8/zlp_18.png,chat/8/zlp_19.png"];
    GameDef.CHAT_TYPE = {
        QUICK_MESSAGE: 1,
        EMOJI: 2,
        RECORD: 3
    };
    GameDef.GAME_NAME = [
        "shanxi_mj",
        "wakeng",
        "jinyun_mj",
        "shisanshui",
        "jinyun_gs_mj",
        "jinyun_hz_mj",
        "shangqiu_mj",
        "guanpai",
        "bazhang",
        "tonglu_mj"
    ];
    GameDef.GAME_NAME_CH = [
        "陕西麻将",
        "挖坑",
        "缙云玩法",
        "十三水",
        "广式玩法",
        "壶镇玩法",
        "商丘麻將",
        "跑得快",
        "扑克八张",
        "杭州麻将"
    ];
    GameDef.GAME_TYPE = {
        SHANXI_MJ: "1",
        WAKENG: "2",
        JINYUN_MJ: "3",
        SHISANSHUI: "4",
        JINYUN_GS_MJ: "5",
        JINYUN_HZ_MJ: "6",
        SHANGQIU_MJ: "7",
        GUANPAI: "8",
        BAZHANG: "9",
        TONGLU_MJ: "10",
    };
    GameDef.CHAT_POS = [
        [],
        [2, 2],
        [2, 1, 2],
        [2, 1, 2, 2],
    ];
    GameDef.RESULT_POS = [
        [],
        [2, 1, 1, 2],
        [2, 1, 1, 2],
        [2, 1, 1, 2],
        [2, 1, 1, 1, 2, 2],
        [2, 1, 1, 1, 2, 2]
    ];
    GameDef.ruleKey = ["tableid", "totalHandCount", "gps", "qghu_bao", "zh4_bao", "ying_seven", "xia_zhuang", "qizi", "gen_pai"];
    GameDef.ruleValue = [[], [], ["GPS关", "GPS开"], ["", "抢杠胡包"], ["", "最后四张包"], ["", "硬板七对"], ["", "50根下庄"], ["", "7字"], ["", "跟牌"]];
    GameDef.SHARE_DESC = {
        "shangqiu_mj": {
            "max_hand_cnt": { 8: "8局", 16: "16局", 24: "24局" },
            "max_player": { 4: "4人局", 3: "3人局", 2: "2人局" },
            "gps": ["", "防作弊"],
            "ting": ["", "报听"],
            "ting_hu": ["不听管胡", "不听不胡"],
            "que_men": ["", "缺门"],
            "ankou": ["", "杠卡"],
            "qia_zhang": ["", "掐张"],
            "men_qing": ["", "门清"],
            "seven_pairs": ["", "可胡七对"],
            "dian_pao": ["", "可点炮胡"],
            "charge_type": ["房主支付", "AA支付"],
            "bian_zhang": ["", "边张"]
        },
        "jinyun_hz_mj": {
            "max_hand_cnt": { 8: "8局", 16: "16局", 24: "24局" },
            "max_player": { 4: "4人局", 3: "3人局", 2: "2人局" },
            "gps": ["", "防作弊"],
            "qghu_bao": ["", "抢杠胡包"],
            "zh4_bao": ["", "最后四张包"],
            "ying_seven": ["", "硬板七对"],
            "xia_zhuang": ["", "50根下庄"],
            "qizi": ["", "7字"],
            "gen_pai": ["", "跟牌"],
            "fold_type": ["独立摆放", "合并摆放"],
            "charge_type": ["房主支付", "AA支付"]
        },
        "jinyun_gs_mj": {
            "max_hand_cnt": { 8: "8局", 16: "16局", 24: "24局" },
            "max_player": { 4: "4人局", 3: "3人局", 2: "2人局" },
            "gps": ["", "防作弊"],
            "special_double": ["", "特殊牌型翻倍"],
            "qgh_bg": ["", "抢杠胡包杠"],
            "gangkai_bg": ["", "杠上开花包杠"],
            "charge_type": ["房主支付", "AA支付"]
        },
        "jinyun_mj": {
            "max_hand_cnt": { 8: "8局", 16: "16局", 24: "24局" },
            "max_player": { 4: "4人局", 3: "3人局", 2: "2人局" },
            "gps": ["", "防作弊"],
            "qghu_bao": ["", "抢杠胡包"],
            "zh4_bao": ["", "最后四张包"],
            "ying_seven": ["", "硬板七对"],
            "xia_zhuang": ["", "50根下庄"],
            "qizi": ["", "7字"],
            "gen_pai": ["", "跟牌"],
            "fold_type": ["独立摆放", "合并摆放"],
            "charge_type": ["房主支付", "AA支付", "俱乐部支付"]
        },
        "shisanshui": {
            "max_hand_cnt": { 12: "12局", 24: "24局", 36: "36局" },
            "max_player": { 4: "4人局", 3: "3人局", 2: "2人局" },
            "gps": ["", "防作弊"],
            "game_type": ["普通模式", "大小王百变"],
            "charge_type": ["房主支付", "AA支付", "俱乐部支付"]
        },
        "shanxi_mj": {
            "max_hand_cnt": { 12: "12局", 24: "24局", 36: "36局" },
            "max_player": { 4: "4人局", 3: "3人局", 2: "2人局" },
            "gps": ["", "防作弊"],
            "dian_pao": ["只炸不胡", "普通平胡"],
            "has_wind": ["", "风牌"],
            "red_joker": ["", "红中赖子"],
            "eyes_258": ["", "258硬将"],
            "win_258_double": ["", "胡258加番"],
            "eyes_258_double": ["", "将258加番"],
            "seven_pairs": ["", "7对"],
            "seven_pairs_double": ["", "7对加番"],
            "one_color": ["", "清一色加番"],
            "pao": ["0炮", "1炮", "2炮", "3炮", "4炮", "自由炮"],
            "charge_type": ["房主支付", "AA支付", "俱乐部支付"]
        },
        "wakeng": {
            "max_hand_cnt": { 12: "12局", 24: "24局", 36: "36局" },
            "max_player": { 4: "4人局", 3: "3人局", 2: "2人局" },
            "gps": ["", "防作弊"],
            "no_3_double": ["", "无3翻倍"],
            "black_call": ["叫分", "黑挖"],
            "has_boom": ["不带炸弹", "带炸弹"],
            "boom_max": ["3炸", "不限"],
            "charge_type": ["房主支付", "AA支付", "俱乐部支付"]
        },
        "guanpai": {
            "max_hand_cnt": { 12: "12局", 24: "24局", 36: "36局" },
            "max_player": { 3: "3人局", 2: "2人局" },
            "gps": ["", "防作弊"],
            "card_cnt": { 15: "15张", 16: "16张" },
            "hide_ccnt": ["", "牌数不显示"],
            "must_do": ["", "必须管"],
            "boom_reward": ["", "炸弹奖分"],
            "enabled_aaa": ["", "AAA算炸"],
            "winner_first": ["", "赢家先出"],
            "call_score": ["", "抢关"],
            "charge_type": ["房主支付", "AA支付", "俱乐部支付"]
        },
        "tonglu_mj": {
            "max_hand_cnt": { 6: "6局", 12: "16局", 30: "30片", 50: "50片" },
            "chao_bao": { 0: "", 1: "超包" },
            "lao_3": { 0: "三牢起(硬自摸)", 1: "一牢起(三牢点炮)" },
            "cheng_bao": { 0: "不承包(限2吃2碰)", 1: "不承包(限两摊)", 2: "承包/反承包" },
            "shi_feng": { 0: "", 1: "十风" },
            "max_player": { 2: "2人局", 4: "4人局" },
            "gps": ["", "防作弊"],
            "charge_type": ["房主支付", "AA支付", "俱乐部支付"]
        },
        "bazhang": {
            "max_hand_cnt": { 10: "10局", 20: "20局" },
            "max_player": { 2: "2人局", 3: "3人局", 4: "4人局", 5: "5人局", 6: "6人局" },
            "gps": ["", "防作弊"],
            "qp": { 0: "不去牌", 1: "去2-4", 2: "去2-6" },
            "hbl": ["", "红波浪"],
            "wpp": ["", "无抛牌"],
            "dxw": ["", "大小王"],
            "tqkc": ["", "提前开车 "],
            "charge_type": ["房主支付", "AA支付", "俱乐部支付"]
        }
    };
    GameDef.RULE_TITLE_MJ = {
        "1": "玩法",
        "3": "缙云玩法",
        "5": "广式玩法",
        "6": "壶镇玩法",
        "7": "商丘玩法",
        "9": "扑克八张",
    };
    GameDef.GAME_LOGO = {
        "1": "1",
        "2": "2",
        "3": "3",
        "4": "4",
        "5": "3",
        "6": "3",
        "7": "7",
        "8": "8",
        "9": "9",
        "10": "10",
        "11": "11",
    };
    /**
     * 游戏背景
     */
    GameDef.GAME_BG = {
        "1": [],
        "2": [],
        "3": [
            "res/bg/mj1.png",
            "res/bg/mj2.png",
            "res/bg/mj3.png",
            "res/bg/mj4.png",
        ],
        "4": [],
        "5": [],
        "6": [],
        "7": [],
        "8": [],
        "9": [],
        "10": [
            "res/bg/mj1.png",
            "res/bg/mj2.png",
            "res/bg/mj3.png",
            "res/bg/mj4.png",
        ]
    };
    GameDef.SCORE_BG = {
        "1": "menu/item_bg_0.png",
        "2": "menu/item_bg_2.png",
        "3": "menu/item_bg_0.png",
        "4": "menu/item_bg_1.png",
        "5": "menu/item_bg_0.png",
        "6": "menu/item_bg_0.png",
        "7": "menu/item_bg_0.png",
        "8": "menu/item_bg_2.png",
    };
    return GameDef;
}());
//# sourceMappingURL=GameDef.js.map
/*
* @author seacole
* 跑马灯
*/
var MarqueeText = /** @class */ (function () {
    function MarqueeText() {
        this.step = 3;
    }
    Object.defineProperty(MarqueeText, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new MarqueeText();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    MarqueeText.prototype.start = function (loadData) {
    };
    Object.defineProperty(MarqueeText.prototype, "selfParent", {
        set: function (p) {
            this._selfParent = p;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * show
     * @param msg 具体内容
     */
    MarqueeText.prototype.show = function (msg) {
        if (!this._ui) {
            this._ui = new ui.components.marqueeText.MarqueeTextUI();
            this._msgs = [];
            this._ui.y = 112;
            this._ui._lab.style.color = "#fcecd3";
            this._ui._lab.style.valign = "middle";
            this._ui._lab.style.fontSize = 22;
            AppControl.getInstance().stage.on(Laya.Event.RESIZE, this, this.onResize);
        }
        this._msgs.push(msg);
        if (!this._ui.parent) {
            this._selfParent.addChild(this._ui);
            this.onResize();
            this.checkNext();
        }
    };
    MarqueeText.prototype.onResize = function () {
        this._ui.width = AppControl.getInstance().stage.width;
        // this._ui.x = AppControl.getInstance().stage.width - this._ui.width >> 1;
        this._ui._imgBg.width = this._ui.width;
        // this._ui._mask.width = this._ui.width;
        // this._ui._mask.visible=false;
        // this._ui._mask._renderType=256;
        //  this._ui._imgBg.mask=this._ui._mask;
    };
    MarqueeText.prototype.showOne = function (str) {
        this._ui._lab.innerHTML = str;
        this._ui._lab.width = 9999;
        this._ui._lab.x = this._ui.width;
        var endX = -this._ui._lab.contextWidth;
        var time = Math.floor((this._ui._lab.x - endX) / this.step) * 50;
        Laya.Tween.to(this._ui._lab, { x: endX }, time, null, Laya.Handler.create(this, this.checkNext));
    };
    MarqueeText.prototype.checkNext = function () {
        var str = this.getNextText();
        if (str == "") {
            this.hide();
        }
        else {
            this.showOne(str);
        }
    };
    MarqueeText.prototype.getNextText = function () {
        if (this._msgs && this._msgs.length)
            return this._msgs.shift();
        else
            return "";
    };
    MarqueeText.prototype.stop = function () {
        Laya.Tween.clearTween(this._ui._lab);
    };
    MarqueeText.prototype.clear = function () {
        this._msgs = [];
    };
    MarqueeText.prototype.hide = function () {
        this._ui.removeSelf();
    };
    return MarqueeText;
}());
//# sourceMappingURL=MarqueeText.js.map
/*
* @author seacole
* 3D场景;
*/
var ThreeDScene = /** @class */ (function () {
    function ThreeDScene() {
        // FishManager.instance.init();
        // var scene = AppControl.getInstance().AppStage.ThreeDLevel;
        // this._camera = (new Laya.Camera(0, 50, ThreeDConfig.CAMERA_Z - ThreeDConfig.SCREEN_Z));
        // this._camera.transform.translate(new Laya.Vector3(0, 0.0, ThreeDConfig.CAMERA_Z));
        this._camera.transform.rotate(new Laya.Vector3(0, 0, 0), true, false);
        this._camera.clearColor = null;
        this._camera.fieldOfView = 45;
        // this._camera.addComponent(CameraMoveScript);       
        // ThreeDHelper._camera=this._camera;
        // Laya.Matrix4x4.multiply(this._camera.projectionMatrix, this._camera.viewMatrix, ThreeDHelper._projectViewMat);
        // var directionLight = scene.addChild(new Laya.DirectionLight()) as Laya.DirectionLight;
        // directionLight.direction = new Laya.Vector3(0, -0.8, -1);
        // directionLight.ambientColor = new Laya.Vector3(0.7, 0.6, 0.6);
        // directionLight.specularColor = new Laya.Vector3(2.0, 2.0, 1.6);
        // directionLight.diffuseColor = new Laya.Vector3(1, 1, 1);
        // var pointLight = scene.addChild(new Laya.PointLight()) as Laya.PointLight;
        // pointLight.ambientColor = new Laya.Vector3(0.8, 0.5, 0.5);
        // pointLight.specularColor = new Laya.Vector3(1.0, 1.0, 0.9);
        // pointLight.diffuseColor = new Laya.Vector3(1, 1, 1);
        // pointLight.transform.position = new Laya.Vector3(0, 0, -500);
        // pointLight.attenuation = new Laya.Vector3(0.0, 0.0, 3.0);
        // pointLight.range = 800.0;
        // this.effectSprite = scene.addChild(Laya.Sprite3D.load("../../res/threeDimen/skinModel/xcy/Xiaochouyu@Move.lh")) as Laya.Sprite3D;
        // this.effectSprite.once(Laya.Event.HIERARCHY_LOADED, this, (sprite3D) => {
        //     var rootAnimations:Laya.RigidAnimations = sprite3D.addComponent(Laya.RigidAnimations);
        //     this.effectSprite.transform.localScale = new Laya.Vector3(0.0001, 0.0001, 0.0001);
        //     rootAnimations.url = "../../res/threeDimen/skinModel/xcy/Xiaochouyu@Move.lrani";
        //     rootAnimations.player.play(0);
        // });
    }
    ThreeDScene.prototype.addToStage = function () {
        AppControl.getInstance().addTo3D(this._camera);
    };
    ThreeDScene.prototype.removeFromStage = function () {
    };
    /**
     *获取摄像机到屏幕点的射线
     */
    ThreeDScene.prototype.getViewportPointToRay = function (point) {
        if (!this._ray)
            this._ray = new Laya.Ray(new Laya.Vector3(), new Laya.Vector3());
        this._camera.viewportPointToRay(point, this._ray);
        return this._ray;
    };
    return ThreeDScene;
}());
//# sourceMappingURL=ThreeDScene.js.map
/*
* name;
*/
var ProtoIDs = /** @class */ (function () {
    function ProtoIDs() {
    }
    ProtoIDs.init = function () {
        var _ID_GAME = 500;
        var _ID_MATCH = 2000;
        var protoIDs = {};
        protoIDs["game.HeartbeatNtf"] = 100;
        protoIDs["game.JoinTableReq"] = 101;
        protoIDs["game.JoinTableRep"] = 102;
        protoIDs["game.SitdownReq"] = _ID_GAME + 1;
        protoIDs["game.SitdownRep"] = _ID_GAME + 2;
        protoIDs["game.SitdownNtf"] = _ID_GAME + 3;
        protoIDs["game.StandupReq"] = _ID_GAME + 4;
        protoIDs["game.StandupRep"] = _ID_GAME + 5;
        protoIDs["game.StandupNtf"] = _ID_GAME + 6;
        protoIDs["game.StartTableReq"] = _ID_GAME + 7;
        protoIDs["game.StartTableRep"] = _ID_GAME + 8;
        protoIDs["game.StartTableNtf"] = _ID_GAME + 9;
        protoIDs["game.TableEndReq"] = _ID_GAME + 10;
        protoIDs["game.TableWillEndNtf"] = _ID_GAME + 11;
        protoIDs["game.PlayerReadyReq"] = _ID_GAME + 12;
        protoIDs["game.PlayerReadyRep"] = _ID_GAME + 13;
        protoIDs["game.PlayerReadyNtf"] = _ID_GAME + 14;
        protoIDs["game.EmoticonReq"] = _ID_GAME + 15;
        protoIDs["game.EmoticonNtf"] = _ID_GAME + 16;
        protoIDs["game.UseGoodsReq"] = _ID_GAME + 17;
        protoIDs["game.UseGoodsRep"] = _ID_GAME + 18;
        protoIDs["game.UseGoodsNtf"] = _ID_GAME + 19;
        protoIDs["game.TableInfoNtf"] = _ID_GAME + 20;
        protoIDs["game.PlayerOptNtf"] = _ID_GAME + 21;
        protoIDs["game.PlayerOptReq"] = _ID_GAME + 22;
        protoIDs["game.PlayerOptRep"] = _ID_GAME + 23;
        protoIDs["game.CardMoveNtf"] = _ID_GAME + 24;
        protoIDs["game.ReconnectInfo"] = _ID_GAME + 25;
        protoIDs["game.GameStartNtf"] = _ID_GAME + 26;
        protoIDs["game.GameEndNtf"] = _ID_GAME + 27;
        protoIDs["game.ShowCardsNtf"] = _ID_GAME + 28;
        protoIDs["game.RealTimeRecordReq"] = _ID_GAME + 29;
        protoIDs["game.RealTimeRecordRep"] = _ID_GAME + 30;
        protoIDs["game.TableEndNtf"] = _ID_GAME + 31;
        protoIDs["game.PlayerTableStatusReq"] = _ID_GAME + 32;
        protoIDs["game.PlayerTableStatusNtf"] = _ID_GAME + 33;
        protoIDs["game.ShowInfoNtf"] = _ID_GAME + 34;
        protoIDs["game.PlayerChatReq"] = _ID_GAME + 35;
        protoIDs["game.PlayerChatNtf"] = _ID_GAME + 36;
        protoIDs["game.SetDeckCards"] = _ID_GAME + 37;
        protoIDs["game.DetailNtf"] = _ID_GAME + 38;
        protoIDs["game.UploadInfoReq"] = _ID_GAME + 39;
        protoIDs["game.UserInfoReq"] = _ID_GAME + 40;
        protoIDs["game.UserInfoRep"] = _ID_GAME + 41;
        protoIDs["game.VoteReq"] = _ID_GAME + 42;
        protoIDs["game.VoteRep"] = _ID_GAME + 43;
        protoIDs["game.VoteNtf"] = _ID_GAME + 44;
        protoIDs["game.HistoryReq"] = _ID_GAME + 45;
        protoIDs["game.TableDataReq"] = _ID_GAME + 46;
        protoIDs["game.TableDataNtf"] = _ID_GAME + 47;
        protoIDs["game.PlayerBackReq"] = _ID_GAME + 48,
            //===========================MATCH
            protoIDs["game.MatchSignupReq"] = _ID_MATCH + 1;
        protoIDs["game.MatchSignupRep"] = _ID_MATCH + 2;
        protoIDs["game.MatchSignoutReq"] = _ID_MATCH + 3;
        protoIDs["game.MatchSignoutRep"] = _ID_MATCH + 4;
        protoIDs["game.MatchStartNtf"] = _ID_MATCH + 5;
        protoIDs["game.MatchInfoNtf"] = _ID_MATCH + 6;
        protoIDs["game.MatchUpdateRankNtf"] = _ID_MATCH + 7;
        protoIDs["game.MatchKickOutNtf"] = _ID_MATCH + 8;
        protoIDs["game.MatchOverNtf"] = _ID_MATCH + 9;
        protoIDs["game.MatchRecordReq"] = _ID_MATCH + 10;
        protoIDs["game.MatchRecordRep"] = _ID_MATCH + 11;
        protoIDs["game.MsgMatchInfoNtf"] = _ID_MATCH + 12;
        protoIDs["game.MatchBaseScoreNtf"] = _ID_MATCH + 13;
        protoIDs["game.MatchJoinReq"] = _ID_MATCH + 14;
        protoIDs["game.MatchHallStatusReq"] = _ID_MATCH + 15;
        protoIDs["game.MatchHallStatusRep"] = _ID_MATCH + 16;
        protoIDs["game.MatchHallStartNtf"] = _ID_MATCH + 17;
        protoIDs["game.MatchHallWillStartNtf"] = _ID_MATCH + 18;
        protoIDs["game.MatchHallUserListReq"] = _ID_MATCH + 19;
        protoIDs["game.MatchHallUserListRep"] = _ID_MATCH + 20;
        protoIDs["game.MatchHallSigninNtf"] = _ID_MATCH + 21;
        protoIDs["game.MatchHallStatusNtf"] = _ID_MATCH + 22;
        protoIDs["game.MatchRewardListReq"] = _ID_MATCH + 23;
        protoIDs["game.MatchRewardListRep"] = _ID_MATCH + 24;
        for (var key in protoIDs) {
            ProtoIDs._protoIDs[key] = protoIDs[key];
            ProtoIDs._protoIDs[protoIDs[key]] = key;
        }
        // for (var key in ProtoIDs._protoIDs) {
        //     log(key + " = " + ProtoIDs._protoIDs[key])
        // }
    };
    ProtoIDs._protoIDs = {};
    return ProtoIDs;
}());
//# sourceMappingURL=ProtoIDs.js.map
/*
* @author seacole
* 游戏中玩家信息;
*/
var PlayerData = /** @class */ (function () {
    function PlayerData() {
        this.uid = 0;
        this.seatid = 0;
        this.status = 0; //0 不在游戏  1已准备 2游戏中
        this.timeout = 0; //倒计时
        this.score = 0;
        this.offline = 0;
        this.winScore = 0;
        this.info = [];
        this.handCards = [];
        this.foldCards = [];
        this.holdCards = [];
        this.flowerCards = [];
        this.dir = 0;
        this.pao = 0;
        this.handCardCount = 0; //扑克数据，手牌数
        this.boomCount = 0; //扑克数据，炸弹数量
        this._status = {
            "offline": 1 << 0,
            "leave": 1 << 1,
        };
    }
    Object.defineProperty(PlayerData.prototype, "isReady", {
        get: function () {
            return this.status == 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlayerData.prototype, "isOffline", {
        get: function () {
            return this.has_status("offline");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlayerData.prototype, "isLeave", {
        get: function () {
            return this.has_status("leave");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlayerData.prototype, "flowerCout", {
        get: function () {
            return this.flowerCards.length;
        },
        enumerable: true,
        configurable: true
    });
    PlayerData.prototype.clear = function () {
        this.uid = 0;
        this.seatid = 0;
        this.status = 0;
        this.timeout = 0;
        this.score = 0;
        this.offline = 0;
        this.winScore = 0;
        this.info = [];
        this.nickname = "";
        this.showname = "";
        this.avatar = "";
        this.sex = 1;
        this.ip = "";
        this.gps = "";
        this.pao = 0;
        this.handCards = [];
        this.foldCards = [];
        this.holdCards = [];
        this.flowerCards = [];
        this.handCardCount = 0;
        this.boomCount = 0;
        this.tableStatus = 0;
        this.voiceMemberID = 0;
        this.isVoiceForbidden = false;
    };
    PlayerData.prototype.clearCards = function () {
        this.handCards = [];
        this.foldCards = [];
        this.holdCards = [];
        this.flowerCards = [];
        this.handCardCount = 0;
    };
    PlayerData.prototype.sortHandCards = function () {
        if (this.handCards)
            this.handCards.sort(WaKengCardsType.onSort);
    };
    PlayerData.prototype.reset = function () {
        this.status = 0;
        this.boomCount = 0;
    };
    PlayerData.prototype.set_status = function (name) {
        if (!this._status[name])
            return;
        this.tableStatus = this.tableStatus | this._status[name];
    };
    PlayerData.prototype.remove_status = function (name) {
        if (!this._status[name])
            return;
        this.tableStatus = this.tableStatus ^ this._status[name];
    };
    PlayerData.prototype.has_status = function (name) {
        if (!this._status[name])
            return false;
        return (this.tableStatus & this._status[name]) > 0;
    };
    return PlayerData;
}());
//# sourceMappingURL=PlayerData.js.map
/*
* @author seacole
* 美术字;
*/
var FontData = /** @class */ (function () {
    function FontData() {
        this.posType = "left";
        this.type = 1;
    }
    FontData.prototype.init = function (id, jsonData, textureData, width, posType, type, needRemove) {
        if (posType === void 0) { posType = "left"; }
        if (type === void 0) { type = 1; }
        if (needRemove === void 0) { needRemove = false; }
        this.id = id;
        this.jsonData = jsonData;
        this.textureData = textureData;
        this.width = width;
        this.posType = posType;
        this.type = type;
        this.needRemove = needRemove;
    };
    FontData.prototype.setInfo = function (posX, posY, text) {
        this.posX = posX;
        this.posY = posY;
        this._text = text;
    };
    FontData.prototype.setPos = function (posX, posY) {
        this.posX = posX;
        this.posY = posY;
    };
    Object.defineProperty(FontData.prototype, "text", {
        get: function () {
            return this._text;
        },
        set: function (value) {
            this._text = value;
        },
        enumerable: true,
        configurable: true
    });
    FontData.TYPE_NORMAL = 1;
    FontData.TYPE_TIME = 2;
    return FontData;
}());
//# sourceMappingURL=FontData.js.map
/*
* hwp;
*/
var FontBitmapData = /** @class */ (function () {
    function FontBitmapData() {
        //字体样式库(样式的名称就是样式图片的名字)(使用该样式时使用)
        this._fontStyle = new Laya.Dictionary();
    }
    Object.defineProperty(FontBitmapData, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new FontBitmapData();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FontBitmapData.prototype, "arrFont", {
        get: function () {
            return this._arrFont;
        },
        //需要加载的所有位图字资源
        set: function (arr) {
            this._arrFont = arr;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FontBitmapData.prototype, "fontStyle", {
        //获取字体样式库
        get: function () {
            return this._fontStyle;
        },
        enumerable: true,
        configurable: true
    });
    FontBitmapData.prototype.addFontStyle = function (name) {
        this._fontStyle[name] = name;
    };
    return FontBitmapData;
}());
//# sourceMappingURL=FontBitmapData.js.map
/*
* @author seacole
* 动画数据类;
*/
var EffectData = /** @class */ (function () {
    function EffectData() {
        this.id = 0;
        this.type = 0;
        this.start = 0;
        this.loop = false;
        this.url = "";
        this.length = 0;
        this.scaleX = 1;
        this.scaleY = 1;
        this.posX = -1;
        this.posY = -1;
        this.toPosX = -1;
        this.toPosY = -1;
        this.duation = 0;
        this.needTween = false;
        this.blendMode = "";
        this.index = 0;
        this.delay = 0;
        this.delayShow = false; //延迟播放特效，在特效播放之前，是否自身执行play
        this.tweenType = 0;
    }
    EffectData.prototype.setInfo = function (id, text, fontStyle, posX, posY, toPosX, toPosY) {
        if (posX === void 0) { posX = -1; }
        if (posY === void 0) { posY = -1; }
        if (toPosX === void 0) { toPosX = -1; }
        if (toPosY === void 0) { toPosY = -1; }
        // var cfg:any=GameConfig.cfgH5Effect[id];
        // this.tween = [];
        // for (var item in cfg)
        // {            
        //     if (this.hasOwnProperty(item))
        //         this[item]=cfg[item];
        // }
        this.posX = posX == -1 ? this.posX : posX;
        this.posY = posY == -1 ? this.posY : posY;
        this.toPosX = toPosX == -1 ? this.toPosX : toPosX;
        this.toPosY = toPosY == -1 ? this.toPosY : toPosY;
        this.text = text;
        this.fontStyle = fontStyle;
        if (this.toPosX == -1 && this.toPosY == -1)
            this.needTween = false;
    };
    return EffectData;
}());
//# sourceMappingURL=EffectData.js.map
/*
* @author seacole
* 游戏基础数据
*/
var BaseGameData = /** @class */ (function () {
    function BaseGameData() {
    }
    BaseGameData.init = function () {
        if (!BaseGameData.playerDataPool)
            BaseGameData.playerDataPool = ObjectPool.getInstance("PlayerData", Laya.ClassUtils.getClass(PlayerData));
        BaseGameData.tableid = 0;
        BaseGameData.startTime = 0;
        BaseGameData.maxPlayer = 4;
        BaseGameData.owner = 0;
        BaseGameData.btnSeatid = 0; //庄
        BaseGameData.leftCard = 0; //剩余牌数
        BaseGameData.dices = []; //骰子
        BaseGameData.lastSeatid = 0; //操作的上家
        BaseGameData.lastCard = 0; //操作的上家的牌
        BaseGameData.currHandCount = 1;
        BaseGameData.totalHandCount = 0; //总局数
        BaseGameData.duration = 0; //总时间
        BaseGameData.baseScore = 0;
        BaseGameData.divide = 0;
        BaseGameData.isRecord = 0;
        BaseGameData.selfSeatid = 0;
        BaseGameData.selfNickname = "";
        BaseGameData.offset = 0;
        BaseGameData.winCard = 0;
        BaseGameData.tableEndInfo = [];
        BaseGameData.matchInfo = {};
        BaseGameData.isGameing = false;
        BaseGameData.isTableStart = false;
        BaseGameData.discards = [];
        while (BaseGameData.players.length) {
            console.log("return BaseGameData.players");
            BaseGameData.playerDataPool.returnObject(BaseGameData.players.shift());
        }
    };
    BaseGameData.resetData = function () {
    };
    /**
    * 通过玩家seatid获取玩家数据
    */
    BaseGameData.getPlayerDataBySeatid = function (seatid) {
        for (var i = 0; i < BaseGameData.players.length; i++) {
            if (BaseGameData.players[i].seatid == seatid)
                return BaseGameData.players[i];
        }
        return null;
    };
    /**
     * 通过玩家uid获取玩家数据
     */
    BaseGameData.getPlayerDataByUid = function (uid) {
        for (var i = 0; i < BaseGameData.players.length; i++) {
            if (BaseGameData.players[i].uid == uid) {
                return BaseGameData.players[i];
            }
        }
        return null;
    };
    /**
    * 通过玩家voiceMemberid获取玩家数据
    */
    BaseGameData.getPlayerDataByVoiceMemberid = function (memberid) {
        for (var i = 0; i < BaseGameData.players.length; i++) {
            if (BaseGameData.players[i].voiceMemberID == memberid)
                return BaseGameData.players[i];
        }
        return null;
    };
    BaseGameData.onTableDataNtfHandler = function (msg) {
        if (msg.dataType == 1) {
            for (var i = 0; i < msg.tableData.length; i++) {
                var player = BaseGameData.getPlayerDataByUid(msg.tableData[i].uid);
                if (player)
                    player.voiceMemberID = msg.tableData[i].data1;
            }
        }
    };
    /**
   * 桌子信息
   */
    BaseGameData.onTableInfoNtfHandler = function (msg) {
        while (BaseGameData.players.length) {
            console.log("return BaseGameData.players");
            BaseGameData.playerDataPool.returnObject(BaseGameData.players.shift());
        }
        Utils.injectProp(this, msg);
        if (BaseGameData.startTime > 0)
            BaseGameData.isTableStart = true;
    };
    /**
     * 玩家信息
     */
    BaseGameData.onPlayerInfoNtfHandler = function (msg) {
        var player = BaseGameData.getPlayerDataByUid(msg.uid);
        if (!player) {
            player = BaseGameData.playerDataPool.borrowObject();
            player.clear();
            BaseGameData.players.push(player);
            var response = RoleManager.getRole(msg.uid);
            if (!response) {
                BaseGameData.getPlayerInfo(msg.uid);
            }
            else {
                Utils.injectProp(player, response);
                if (response.nickname) {
                    player.showname = Utils.getFitNickName(response.nickname, 10);
                }
                if (GameLogic.selfData.uid == player.uid) {
                    GameLogic.selfData.diamond = response.diamond;
                }
                Dispatcher.dispatch(EventNames.PLAYER_DATA_CHANGED, player.uid);
            }
        }
        Utils.injectProp(player, msg);
        if (player.uid == server.uid) {
            BaseGameData.selfSeatid = player.seatid;
            if (BaseGameData.isVoiceJoined && BaseGameData.isRecord != 1)
                RealTimeSpeechManager.instance.setMic();
            // server.tableDataReq(1,BaseGameData.voiceMemberID);
            BaseGameData.resetPos();
            BaseGameData.offset = player.seatid - 1;
        }
        player.dir = Utils.getDir(player.seatid);
        // //发送玩家信息加载完成
        // if(BaseGameData.players.length == BaseGameData.maxPlayer){
        //     log("maxPlayer")
        //     log(BaseGameData.maxPlayer)
        //      Dispatcher.dispatch(EventNames.PLAYER_DATA_COMPLETED);
        // }
    };
    /**
     * 玩家坐下
     */
    BaseGameData.onSitdownNtfHandler = function (msg) {
        var player = BaseGameData.getPlayerDataByUid(msg.uid);
        if (!player) {
            player = BaseGameData.playerDataPool.borrowObject();
            player.clear();
            BaseGameData.players.push(player);
            var response = RoleManager.getRole(msg.uid);
            if (!response) {
                BaseGameData.getPlayerInfo(msg.uid);
            }
            else {
                Utils.injectProp(player, response);
                if (response.nickname) {
                    player.showname = Utils.getFitNickName(response.nickname, 10);
                }
                if (GameLogic.selfData.uid == player.uid) {
                    GameLogic.selfData.diamond = response.diamond;
                }
                Dispatcher.dispatch(EventNames.PLAYER_DATA_CHANGED, player.uid);
            }
        }
        Utils.injectProp(player, msg);
        if (player.uid == server.uid) {
            BaseGameData.selfSeatid = player.seatid;
            if (BaseGameData.voiceMemberID)
                server.tableDataReq(1, BaseGameData.voiceMemberID);
            if (BaseGameData.isVoiceJoined && BaseGameData.isRecord != 1)
                RealTimeSpeechManager.instance.setMic();
            BaseGameData.resetPos();
            BaseGameData.offset = player.seatid - 1;
        }
        player.dir = Utils.getDir(player.seatid);
        // //发送玩家信息加载完成
        // if(BaseGameData.players.length == BaseGameData.maxPlayer){
        //     log("maxPlayer")
        //     log(BaseGameData.maxPlayer)
        //      Dispatcher.dispatch(EventNames.PLAYER_DATA_COMPLETED);
        // }
    };
    BaseGameData.getPlayerInfo = function (uid) {
        webService.getUserInfo(uid, function (response) {
            if (response.code == 0) {
                var player = BaseGameData.getPlayerDataByUid(response.uid);
                if (player) {
                    Utils.injectProp(player, response);
                    if (response.nickname) {
                        player.showname = Utils.getFitNickName(response.nickname, 10);
                    }
                    if (GameLogic.selfData.uid == player.uid) {
                        GameLogic.selfData.diamond = response.diamond;
                    }
                    Dispatcher.dispatch(EventNames.PLAYER_DATA_CHANGED, player.uid);
                    //  //发送玩家信息加载完成
                    if (BaseGameData.players.length == BaseGameData.maxPlayer) {
                        log("maxPlayer");
                        log(BaseGameData.maxPlayer);
                        Dispatcher.dispatch(EventNames.PLAYER_DATA_COMPLETED);
                    }
                }
            }
        });
    };
    /**
     * 玩家站起
     */
    BaseGameData.onStandupNtfHandler = function (msg) {
        var player = BaseGameData.getPlayerDataByUid(msg.uid);
        if (player) {
            player.seatid = 0;
            if (player.uid == server.uid) {
                BaseGameData.selfSeatid = 0;
                if (BaseGameData.isVoiceJoined && BaseGameData.isRecord != 1)
                    RealTimeSpeechManager.instance.passiveCloseMic();
            }
        }
    };
    /**
     * 玩家准备
     */
    BaseGameData.onPlayerReadyNtfHandler = function (msg) {
        var player = BaseGameData.getPlayerDataBySeatid(msg.seatid);
        if (player) {
            player.status = 1;
            Dispatcher.dispatch(EventNames.PLAYER_DATA_CHANGED, player.uid);
        }
    };
    /**
     * 游戏开始
     */
    BaseGameData.onGameStartNtfHandler = function (msg) {
        BaseGameData.currHandCount = msg.currHandCount;
        BaseGameData.btnSeatid = msg.btnSeatid;
        BaseGameData.leftCard = msg.leftCard;
        BaseGameData.baseScore = msg.baseScore;
        for (var i = 0; i < msg.players.length; i++) {
            BaseGameData.onSitdownNtfHandler(msg.players[i]);
            var player = BaseGameData.getPlayerDataBySeatid(msg.players[i].seatid);
            if (player)
                player.status = 2;
            Dispatcher.dispatch(EventNames.PLAYER_DATA_CHANGED, msg.players[i].uid);
        }
        BaseGameData.isGameing = true;
        BaseGameData.isTableStart = true;
        BaseGameData.clearPlayData();
    };
    /**
     * 结算 积分结算这里处理,下面两项游戏自己处理逻辑
     */
    BaseGameData.onGameEndNtfHandler = function (msg) {
        BaseGameData.isGameing = false;
        for (var i = 0; i < msg.scores.length; i++) {
            var player = BaseGameData.getPlayerDataBySeatid(msg.scores[i].seatid);
            if (player) {
                player.reset();
                Utils.injectProp(player, msg.scores[i]);
                Dispatcher.dispatch(EventNames.PLAYER_DATA_CHANGED, player.uid);
            }
        }
    };
    /**
     * 实时战绩，已将info保存到每个玩家
     */
    BaseGameData.onRealTimeRecordRepHandler = function (msg) {
        for (var i = 0; i < msg.playerInfo.length; i++) {
            var player = BaseGameData.getPlayerDataByUid(msg.playerInfo[i].uid);
            if (player)
                Utils.injectProp(player, msg.playerInfo[i]);
        }
    };
    BaseGameData.onOfflineNtfHandler = function (msg) {
        var player = BaseGameData.getPlayerDataByUid(msg.uid);
        if (player) {
            player.offline = msg.offline;
            Dispatcher.dispatch(EventNames.PLAYER_DATA_CHANGED, player.uid);
        }
    };
    BaseGameData.onPlayerTableStatusNtfHandler = function (msg) {
        var player = BaseGameData.getPlayerDataByUid(msg.uid);
        if (player) {
            player.tableStatus = msg.status;
            Dispatcher.dispatch(EventNames.PLAYER_DATA_CHANGED, player.uid);
        }
    };
    /**
     * 桌子结束
     */
    BaseGameData.onTableEndNtfHandler = function (msg) {
        BaseGameData.isGameing = false;
        BaseGameData.isTableStart = false;
        BaseGameData.tableEndInfo = msg.playerInfo;
        BaseGameData.currHandCount = msg.totalHandCount;
        for (var i = 0; i < msg.playerInfo.length; i++) {
            var player = BaseGameData.getPlayerDataByUid(msg.playerInfo[i].uid);
            if (player)
                Utils.injectProp(player, msg.playerInfo[i]);
        }
    };
    BaseGameData.setMaster = function (seatid) {
        BaseGameData.btnSeatid = seatid;
        for (var i = 0; i < BaseGameData.players.length; i++) {
            var player = BaseGameData.players[i];
            Dispatcher.dispatch(EventNames.PLAYER_DATA_CHANGED, player.uid);
        }
    };
    BaseGameData.onReconnectInfoHandler = function (msg) {
        var i;
        Utils.injectProp(this, msg);
        BaseGameData.lastSeatid = msg.lastSeatid;
        BaseGameData.btnSeatid = msg.btnSeatid;
        BaseGameData.leftCard = msg.leftCard;
        BaseGameData.isGameing = true;
        BaseGameData.discards = msg.cards;
        //如果有人已准备 表示刚好一局结束的状态
        for (i = 0; i < BaseGameData.players.length; i++) {
            if (BaseGameData.players[i].status == 1) {
                BaseGameData.isGameing = false;
                break;
            }
        }
        BaseGameData.isTableStart = true;
        BaseGameData.currHandCount = msg.currHandCount;
        for (var k in msg.gameplayer) {
            var info = msg.gameplayer[k];
            var player = BaseGameData.getPlayerDataByUid(info.uid);
            if (player.uid == server.uid) {
                BaseGameData.selfSeatid = player.seatid;
                if (BaseGameData.isVoiceJoined && BaseGameData.isRecord != 1)
                    RealTimeSpeechManager.instance.setMic();
                // server.tableDataReq(1,BaseGameData.voiceMemberID);
                BaseGameData.resetPos();
                BaseGameData.offset = player.seatid - 1;
            }
            for (var j in info.cards) {
                var cardSet = info.cards[j];
                cardSet.opttype = cardSet.opttype || 0;
                cardSet.cards = cardSet.cards || [];
                if (cardSet.opttype == GameDef.OptType.MJ_DISCARD) {
                    player.foldCards = player.foldCards.concat(cardSet.cards);
                }
                else if (cardSet.opttype == GameDef.OptType.MJ_DRAW) {
                    if (cardSet.cards.length > 0) {
                        player.handCards = player.handCards.concat(cardSet.cards);
                    }
                    else {
                        for (var i = 0; i < cardSet.count; i++) {
                            player.handCards.push(0);
                        }
                        player.handCardCount = cardSet.count;
                    }
                }
                else if (cardSet.opttype == GameDef.OptType.MJ_FLOWER) {
                    player.flowerCards = player.flowerCards.concat(cardSet.cards);
                }
                else if (cardSet.opttype > GameDef.OptType.MJ_DRAW) {
                    player.holdCards.push(cardSet);
                }
            }
            // PlayerManager.instance.changeSeatToPlayer(player.uid, player.seatid)
            Dispatcher.dispatch(EventNames.PLAYER_DATA_CHANGED, player.uid);
        }
    };
    BaseGameData.setHandCardCount = function (msg) {
        for (var i = 1; i <= BaseGameData.maxPlayer; i++) {
            var seatinfo = BaseGameData.getPlayerDataBySeatid(i);
            seatinfo.handCardCount = msg.info[i - 1];
            Dispatcher.dispatch(EventNames.PLAYER_DATA_CHANGED, seatinfo.uid);
        }
    };
    BaseGameData.cardMove = function (msg) {
        var info = msg;
        var seatinfo = BaseGameData.getPlayerDataBySeatid(info.toSeatid);
        if (info.areaid == GameDef.AREA_TYPE.HAND_CARD) {
            // if (seatinfo.handCards.length > 0){
            //      return 
            // }
            seatinfo.handCards = seatinfo.handCards.concat(msg.cards);
            BaseGameData.leftCard = BaseGameData.leftCard - msg.count;
            //---------------------挖坑用到--------------------
            if (seatinfo.uid != server.uid && msg.cards && msg.opttype == GameDef.OptType.SHOW_CARDS) {
                seatinfo.handCardCount += msg.cards.length;
            }
            //---------------------挖坑用到--------------------
            Dispatcher.dispatch(EventNames.PLAYER_DATA_CHANGED, seatinfo.uid);
            // for (var k in info.cards){
            //     let v = info.cards[k]
            //     seatinfo.handCards.push(v)
            //     // if (BaseGameData.isRecord == 1){
            //         BaseGameData.leftCard = BaseGameData.leftCard - 1
            //     // }
            // }
        }
        else if (info.areaid == GameDef.AREA_TYPE.FOLD_CARD && info.opttype != GameDef.OptType.RECONNECT) {
            BaseGameData.removeHandCard(info);
            seatinfo.foldCards.push(info.cards[0]);
            BaseGameData.discards.push(info.cards[0]);
        }
        else if (info.areaid == GameDef.AREA_TYPE.HOLD_CARD) {
            var opt = {
                opttype: info.opttype,
                cards: info.cards,
                fromSeatid: info.fromSeatid
            };
            var count = 2;
            if (info.opttype == GameDef.OptType.MJ_CHI || info.opttype == GameDef.OptType.MJ_PENG) {
                count = 2;
                BaseGameData.discards.pop();
            }
            else if (info.opttype == GameDef.OptType.MJ_MNGANG) {
                BaseGameData.discards.pop();
                count = 3;
            }
            else if (info.opttype == GameDef.OptType.MJ_ANGANG) {
                count = 4;
            }
            else if (info.opttype == GameDef.OptType.MJ_PENGGANG) {
                count = 1;
            }
            for (var i = 0; i < count; i++) {
                var index = seatinfo.handCards.indexOf(info.cards[i]);
                if (index >= 0) {
                    seatinfo.handCards.splice(index, 1);
                }
            }
            if (info.opttype < GameDef.OptType.MJ_ANGANG) {
                var fromSeatInfo = BaseGameData.getPlayerDataBySeatid(info.fromSeatid);
                var foldIndex = fromSeatInfo.foldCards.pop();
            }
            if (info.opttype != GameDef.OptType.MJ_PENGGANG) {
                seatinfo.holdCards.push(opt);
            }
            else {
                for (var k in seatinfo.holdCards) {
                    var v = seatinfo.holdCards[k];
                    if (v.opttype == GameDef.OptType.MJ_PENG && v.cards.indexOf(opt.cards[0])) {
                        var isPengGnag = false;
                        for (var j in opt.cards) {
                            if (opt.cards[j] % 100 == v.cards[0] % 100) {
                                isPengGnag = true;
                                break;
                            }
                        }
                        if (isPengGnag) {
                            v = opt;
                            // table.remove(self.seatsInfo[info.to_seatid].holdCards,k)
                            // table.insert(self.seatsInfo[info.to_seatid].holdCards,k,opt)
                            break;
                        }
                    }
                }
            }
        }
        else if (info.areaid == GameDef.AREA_TYPE.FLOWER_CARD) {
            for (var k in info.cards) {
                var v = info.cards[k];
                if (seatinfo.seatid == BaseGameData.selfSeatid || BaseGameData.isRecord == 1) {
                    var index = seatinfo.handCards.indexOf(v);
                    if (index >= 0) {
                        seatinfo.handCards.splice(index, 1);
                    }
                }
                else {
                    seatinfo.handCards.pop();
                }
            }
            seatinfo.flowerCards = seatinfo.flowerCards.concat(info.cards);
            console.log("补花=========================================");
            console.info(seatinfo.flowerCards);
            Dispatcher.dispatch(EventNames.PLAYER_DATA_CHANGED, seatinfo.uid);
        }
        else if (info.areaid == GameDef.AREA_TYPE.TING_CARD) {
            var length_1 = 0;
            var i_1 = 0;
            var tingKey = void 0;
            var count = 0;
            var winIndex = void 0;
            for (var k in info.cards) {
                var v = info.cards.info[k];
                if (k == "0" || parseInt(k) == count + length_1 + 1) {
                    length_1 = v;
                    i_1 = 0;
                    count = parseInt(k);
                }
                else if (parseInt(k) < count + length_1 + 1) {
                    if (i_1 == 0) {
                        tingKey = v % 100;
                        BaseGameData.tingCards.push(tingKey);
                        BaseGameData.tingInfo[tingKey] = [];
                    }
                    else {
                        BaseGameData.tingInfo[tingKey].push(v);
                    }
                    i_1++;
                }
            }
        }
        else if (info.areaid == GameDef.AREA_TYPE.WIN_CARD) {
            BaseGameData.winCard = info.cards[0];
            BaseGameData.winSeatid = info.toSeatid;
            // if(info.toSeatid == BaseGameData.selfSeatid){
            //     let player = BaseGameData.getPlayerDataBySeatid(info.toSeatid)
            //     let index = player.handCards.indexOf(BaseGameData.winCard)
            //     if (index >= 0){
            //         player.handCards.splice(index,1)
            //     }
            // }
            console.log("BaseGameData.winCard==========" + BaseGameData.winCard + "BaseGameData.winSeatid" + BaseGameData.winSeatid);
        }
    };
    BaseGameData.removeHandCard = function (info) {
        var seatInfo = BaseGameData.getPlayerDataBySeatid(info.toSeatid);
        seatInfo.handCardCount -= info.cards.length;
        for (var i = 0; i < info.cards.length; i++) {
            var index = seatInfo.handCards.indexOf(info.cards[i]);
            if (index >= 0) {
                seatInfo.handCards.splice(index, 1);
            }
        }
        Dispatcher.dispatch(EventNames.PLAYER_DATA_CHANGED, seatInfo.uid);
    };
    BaseGameData.resetPos = function () {
        for (var k in BaseGameData.players) {
            var player = BaseGameData.players[k];
            player.dir = Utils.getDir(player.seatid);
            PlayerManager.instance._players[player.seatid].dir = player.dir;
        }
    };
    BaseGameData.onShowCardsNtfHandler = function (msg) {
        for (var k in msg.showncards) {
            var cardInfo = msg.showncards[k];
            var player = BaseGameData.getPlayerDataBySeatid(cardInfo.seatid);
            player.handCards = cardInfo.handcards;
            player.holdCards = cardInfo.holdCards;
            // if (player.seatid == BaseGameData.winSeatid && player.seatid != BaseGameData.selfSeatid){
            //     player.handCards = [BaseGameData.winCard].concat(player.handCards)
            //     // player.handCards.push(BaseGameData.winCard)
            // }
        }
    };
    BaseGameData.saveWinDetail = function (data) {
        for (var k in data) {
            var info = data[k];
            BaseGameData.winDetailObj[info.seatid] = info.info;
        }
    };
    BaseGameData.saveLoseDetail = function (data) {
        for (var k in data) {
            var info = data[k];
            BaseGameData.loseDetailObj[info.seatid] = info.info;
        }
    };
    BaseGameData.clearPlayData = function () {
        for (var k in BaseGameData.players) {
            var player = BaseGameData.players[k];
            player.clearCards();
            Dispatcher.dispatch(EventNames.PLAYER_DATA_CHANGED, player.uid);
        }
        BaseGameData.tingInfo = {};
    };
    BaseGameData.getLeftCardCount = function (cardid) {
        var count = 4;
        if (BaseGameData.gameType == GameDef.GAME_TYPE.JINYUN_MJ || BaseGameData.gameType == GameDef.GAME_TYPE.JINYUN_HZ_MJ) {
            if (cardid % 100 == 78) {
                count = 3;
            }
        }
        for (var k in BaseGameData.players) {
            var player = BaseGameData.players[k];
            for (var j in player.handCards) {
                var card = player.handCards[j];
                // if(BaseGameData.gameType == GameDef.GAME_TYPE.JINYUN_MJ || BaseGameData.gameType == GameDef.GAME_TYPE.JINYUN_HZ_MJ){
                //     if( cardid%100 == 78){
                //         if(card%100 == BaseGameData.SHIFTER_NUM%1000)
                //             count--
                //     }else if(cardid%100 == BaseGameData.SHIFTER_NUM%100){
                //         if(card%100 == 78)
                //         count--
                //     }else if (card % 100 == cardid % 100) {
                //         count--
                //     }
                // }else{
                if (card % 100 == cardid % 100) {
                    count--;
                }
                // }
            }
            for (var j in player.foldCards) {
                var card = player.foldCards[j];
                // if(BaseGameData.gameType == GameDef.GAME_TYPE.JINYUN_MJ || BaseGameData.gameType == GameDef.GAME_TYPE.JINYUN_HZ_MJ){
                //     if( cardid%100 == 78){
                //         if(card%100 == BaseGameData.SHIFTER_NUM%1000)
                //             count--
                //     }else if(cardid%100 == BaseGameData.SHIFTER_NUM%100){
                //         if(card%100 == 78)
                //         count--
                //     }else if (card % 100 == cardid % 100) {
                //         count--
                //     }
                // }else{
                if (card % 100 == cardid % 100) {
                    count--;
                }
                // }
            }
            for (var j in player.holdCards) {
                var cards = player.holdCards[j].cards;
                if (player.holdCards[j].opttype == GameDef.OptType.MJ_ANGANG && player.seatid != BaseGameData.selfSeatid) {
                    continue;
                }
                for (var m in cards) {
                    var card = cards[m];
                    //  if(BaseGameData.gameType == GameDef.GAME_TYPE.JINYUN_MJ || BaseGameData.gameType == GameDef.GAME_TYPE.JINYUN_HZ_MJ){
                    //     if( cardid%100 == 78){
                    //         if(card%100 == BaseGameData.SHIFTER_NUM%1000)
                    //             count--
                    //     }else if(cardid%100 == BaseGameData.SHIFTER_NUM%100){
                    //         if(card%100 == 78)
                    //         count--
                    //     }else if (card % 100 == cardid % 100) {
                    //         count--
                    //     }
                    // }else{
                    if (card % 100 == cardid % 100) {
                        count--;
                    }
                    // }
                }
            }
        }
        return count;
    };
    BaseGameData.updatePao = function (info) {
        for (var k in BaseGameData.players) {
            var player = BaseGameData.players[k];
            player.pao = info[k];
            Dispatcher.dispatch(EventNames.PLAYER_DATA_CHANGED, player.uid);
        }
    };
    Object.defineProperty(BaseGameData, "nextSeatId", {
        get: function () {
            if (BaseGameData.selfSeatid) {
                var seatid = BaseGameData.selfSeatid + 1;
                if (seatid > BaseGameData.maxPlayer)
                    seatid -= BaseGameData.maxPlayer;
                return seatid;
            }
            else
                return 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseGameData, "preSeatId", {
        get: function () {
            if (BaseGameData.selfSeatid) {
                var seatid = BaseGameData.selfSeatid - 1;
                if (seatid < 1)
                    seatid += BaseGameData.maxPlayer;
                return seatid;
            }
            else
                return BaseGameData.maxPlayer;
        },
        enumerable: true,
        configurable: true
    });
    BaseGameData.getPlayerSexBySeatid = function (seatid) {
        var player = BaseGameData.getPlayerDataBySeatid(seatid);
        if (player)
            return player.sex;
        return 1;
    };
    BaseGameData.set_status = function (name) {
        if (!this._status[name])
            return;
        this.table_status = this.table_status | this._status[name];
    };
    BaseGameData.remove_status = function (name) {
        if (!this._status[name])
            return;
        this.table_status = this.table_status ^ this._status[name];
    };
    BaseGameData.has_status = function (name) {
        if (!this._status[name])
            return false;
        return (this.table_status & this._status[name]) > 0;
    };
    BaseGameData.onMatchInfo = function (info) {
        this.matchInfo.waiting = info.waiting || 0;
        if (info.stage)
            this.matchInfo.matchStage = info.stage;
        if (info.ranking)
            this.matchInfo.matchRank = info.ranking;
        if (info.handsCnt)
            this.matchInfo.matchHandCnt = info.handsCnt;
        if (info.rounds)
            this.matchInfo.matchRounds = info.rounds;
        if (info.leftTable)
            this.matchInfo.matchLeftTable = info.leftTable;
        if (info.playerCnt)
            this.matchInfo.matchPlayer = info.playerCnt;
        if (info.swissPlayer && info.swissPlayer.length > 0)
            this.matchInfo.matchSwissPlayer = info.swissPlayer;
        if (info.totalPlayer)
            this.matchInfo.totalPlayer = info.totalPlayer;
        if (info.matchScore)
            this.matchInfo.matchScore = info.matchScore;
    };
    BaseGameData.tablelayout = {
        "PLAY_SOUND_LAYOUT": {},
        "SSYY_LAYOUT": {},
        "CHAT_LAYOUT": {},
        "MENU_LAYOUT": {},
        "MENU_CONTENT_LAYOUT": {},
        "LOGO_LAYOUT": {},
        "BG_LAYOUT": {},
        "CHAT_CONTENT_LAYOUT": {},
        "MATCH_RECORD_LAYOUT": {},
        "SSYY_TIP_LAYOUT": {},
        "SEAT_LAYOUT": {},
        "GAME_START_SEAT_LAYOUT": {}
    };
    BaseGameData.winDetailArr = [];
    BaseGameData.winDetailObj = {};
    BaseGameData.loseDetailArr = [];
    BaseGameData.loseDetailObj = {};
    BaseGameData.tingInfo = {};
    BaseGameData.tingCards = [];
    BaseGameData.tableEndInfo = [];
    BaseGameData.SHIFTER_NUM = -1;
    // public static waKengCallScore: number;//协议外数据 挖坑叫分
    // public static waKengHasBoom: boolean;//协议外数据 挖坑是否有炸弹
    // public static waKengHasBlackDug: boolean;//协议外数据 挖坑是否有黑挖
    // public static waKengBoomMultiply: boolean;//协议外数据 挖坑炸弹倍数
    BaseGameData.matchInfo = {};
    BaseGameData.players = [];
    BaseGameData._status = {
        "offline": 1 << 1,
        "leave": 2 << 2,
    };
    return BaseGameData;
}());
//# sourceMappingURL=BaseGameData.js.map
/*
* hwp;(音频名称跟id对应配置表)
*/
var SoundConfig = /** @class */ (function () {
    function SoundConfig() {
    }
    //音效
    //普通按钮点击音效
    SoundConfig.SOUND_BTN_NORMAL = 1;
    /* public static FishHuJing:number = 1;
     public static FishDuDuYu:number = 1;
     public static FishJinGui:number =101;
     public static FishPangXie:number = 101;
     public static FishXiaoChouYu:number = 101;
     public static FishBianFuSha:number = 101;
     public static SOUND_FISH_BOSS:number = 1002;
     */
    //发射子弹
    SoundConfig.SOUND_ADD_BUTTLE = 10;
    //切换炮台
    SoundConfig.SOUND_QIEHUAN_PAOTAI = 14;
    //音乐
    //主界面背景音乐
    SoundConfig.MUSIC_MIAN = 42;
    //战斗
    SoundConfig.MUSIC_FIGHT = 39;
    //高级场
    SoundConfig.MUSIC_HIGH = 40;
    //鱼阵（海潮)
    SoundConfig.MUSIC_FISH_ARRAY = 41;
    return SoundConfig;
}());
//# sourceMappingURL=SoundConfig.js.map
/*
* @author seacole
* 资源目录配置;
*/
var ResourceConfig = /** @class */ (function () {
    function ResourceConfig() {
    }
    ResourceConfig.BG_WIDTH = 1920;
    ResourceConfig.BG_HEIGHT = 1080;
    ResourceConfig.LANG = "res/lang.json";
    ResourceConfig.URL_CONFIG = "res/config.json";
    ResourceConfig.PROTO_USER = "res/proto/user.proto";
    ResourceConfig.PROTO_GAME = "res/proto/game.proto";
    ResourceConfig.BG_LOADING = "res/bg/bg_loading_h.jpg";
    ResourceConfig.BG_MENU = "res/bg/bg_menu.jpg";
    ResourceConfig.BG_HALL = "res/bg/bg_hall.png";
    ResourceConfig.BG_TABLE = "res/bg/bg_table.jpg";
    ResourceConfig.BG_GUANPAI = "res/bg/bg_8.jpg";
    ResourceConfig.BG_MATCH_SHARE = "res/match/share_bg.jpg";
    ResourceConfig.BITMAP_FONT_JSON1 = "res/bitmapFont/font_num_1.fnt";
    ResourceConfig.BITMAP_FONT_PNG1 = "res/bitmapFont/font_num_1.png";
    ResourceConfig.BITMAP_FONT_JSON2 = "res/bitmapFont/font_num_2.fnt";
    ResourceConfig.BITMAP_FONT_PNG2 = "res/bitmapFont/font_num_2.png";
    ResourceConfig.BITMAP_FONT_JSON3 = "res/bitmapFont/font_num_3.fnt";
    ResourceConfig.BITMAP_FONT_PNG3 = "res/bitmapFont/font_num_3.png";
    ResourceConfig.BITMAP_FONT_WAKENG1_JSON = "res/bitmapFont/font_num_wakeng_1.fnt";
    ResourceConfig.BITMAP_FONT_WAKENG1_PNG = "res/bitmapFont/font_num_wakeng_1.png";
    ResourceConfig.BITMAP_FONT_WAKENG2_JSON = "res/bitmapFont/font_num_wakeng_2.fnt";
    ResourceConfig.BITMAP_FONT_WAKENG2_PNG = "res/bitmapFont/font_num_wakeng_2.png";
    ResourceConfig.BITMAP_FONT_WAKENG3_JSON = "res/bitmapFont/font_num_wakeng_3.fnt";
    ResourceConfig.BITMAP_FONT_WAKENG3_PNG = "res/bitmapFont/font_num_wakeng_3.png";
    ResourceConfig.BITMAP_FONT_MENU1_JSON = "res/bitmapFont/font_num_menu_1.fnt";
    ResourceConfig.BITMAP_FONT_MENU1_PNG = "res/bitmapFont/font_num_menu_1.png";
    ResourceConfig.BITMAP_FONT_MENU2_JSON = "res/bitmapFont/font_num_menu_2.fnt";
    ResourceConfig.BITMAP_FONT_MENU2_PNG = "res/bitmapFont/font_num_menu_2.png";
    ResourceConfig.BITMAP_FONT_SHOP1_JSON = "res/bitmapFont/font_num_shop_1.fnt";
    ResourceConfig.BITMAP_FONT_SHOP_PNG = "res/bitmapFont/font_num_shop_1.png";
    ResourceConfig.BITMAP_FONT_MATCHSIGN1_JSON = "res/bitmapFont/font_num_matchsign_1.fnt";
    ResourceConfig.BITMAP_FONT_MATCHSIGN1_PNG = "res/bitmapFont/font_num_matchsign_1.png";
    ResourceConfig.BITMAP_FONT_GUANPAI1_JSON = "res/bitmapFont/font_num_guanpai_1.fnt";
    ResourceConfig.BITMAP_FONT_GUANPAI1_PNG = "res/bitmapFont/font_num_guanpai_1.png";
    ResourceConfig.BITMAP_FONT_JOINTABLE1_JSON = "res/bitmapFont/font_num_jointable_1.fnt";
    ResourceConfig.BITMAP_FONT_JOINTABLE1_PNG = "res/bitmapFont/font_num_jointable_1.png";
    ResourceConfig.BITMAP_FONT_JOINTABLE2_JSON = "res/bitmapFont/font_num_jointable_2.fnt";
    ResourceConfig.BITMAP_FONT_JOINTABLE2_PNG = "res/bitmapFont/font_num_jointable_2.png";
    ResourceConfig.BITMAP_FONT_TOTAL = ["font_num_1", "font_num_2", "font_num_3", "font_num_4",
        "font_num_5", "font_num_6", "font_num_7", "font_num_8",
        "font_num_9", "font_num_10", "font_num_11", "font_num_12",
        "font_num_13", "font_num_14", "font_num_15", "font_num_16",
        "font_num_17", "font_num_18", "font_num_19", "font_num_20"];
    ResourceConfig.SHEET_PRELOAD = "res/atlas/preload.json";
    ResourceConfig.SHEET_LOADING = "res/atlas/loading.json";
    ResourceConfig.SHEET_UI = "res/atlas/ui.json";
    ResourceConfig.SHEET_LOGIN = "res/atlas/login.json";
    ResourceConfig.SHEET_TONGYONG = "res/atlas/tongyong.json";
    ResourceConfig.SHEET_CREATE_TABLE = "res/atlas/createTable.json";
    ResourceConfig.SHEET_TABLE = "res/atlas/table.json";
    ResourceConfig.SHEET_MENU = "res/atlas/menu.json";
    ResourceConfig.SHEET_PARTICLE = "res/atlas/particles.json";
    ResourceConfig.SHEET_OPT = "res/atlas/opt.json";
    ResourceConfig.SHEET_TIME_LIMIT = "res/atlas/timelimit.json";
    ResourceConfig.SHEET_REAL_TIME = "res/atlas/realtime.json";
    ResourceConfig.SHEET_CARD = "res/atlas/card.json";
    ResourceConfig.SHEET_DICE = "res/atlas/dice.json";
    ResourceConfig.SHEET_GAME_END = "res/atlas/gameEnd.json";
    ResourceConfig.SHEET_TING = "res/atlas/ting.json";
    ResourceConfig.SHEET_PLAY_SHEET = "res/atlas/sheet.json";
    ResourceConfig.SHEET_ICON = "res/atlas/icon.json";
    ResourceConfig.SHEET_POKER_CARD_BIG = "res/atlas/pokerCardBig.json";
    ResourceConfig.SHEET_POKER_CARD_SMALL = "res/atlas/pokerCardSmall.json";
    ResourceConfig.SHEET_WAKENG = "res/atlas/wakeng.json";
    ResourceConfig.SHEET_POKER = "res/atlas/poker.json";
    ResourceConfig.SHEET_CHAT = "res/atlas/chat.json";
    ResourceConfig.SHEET_CARD_1 = "res/atlas/card/1.json";
    ResourceConfig.SHEET_CARD_2 = "res/atlas/card/2.json";
    ResourceConfig.SHEET_CARD_3 = "res/atlas/card/3.json";
    ResourceConfig.SHEET_CARD_4 = "res/atlas/card/4.json";
    ResourceConfig.SHEET_CARD_5 = "res/atlas/card/5.json";
    ResourceConfig.SHEET_SETUP = "res/atlas/setup.json";
    ResourceConfig.SHEET_DIALOG = "res/atlas/dialog.json";
    ResourceConfig.SHEET_GAME_NAME = "res/atlas/gamename.json";
    ResourceConfig.SHEET_EFFECT_BOOM = "res/atlas/poker/boom.json";
    ResourceConfig.SHEET_EFFECT_SHUANGSHUN = "res/atlas/poker/liandui.json";
    ResourceConfig.SHEET_JOIN_TABLE = "res/atlas/joinRoom.json";
    ResourceConfig.SHEET_GAME_LOGO = "res/atlas/gameLogo.json";
    ResourceConfig.SHEET_SHANXI_MJ_CHAT = "res/atlas/shanxi_mj/chat.json";
    ResourceConfig.SHEET_WAKENG_CHAT = "res/atlas/wakeng/chat.json";
    ResourceConfig.SHEET_JINYUN_MJ_CHAT = "res/atlas/jinyun_mj/chat.json";
    ResourceConfig.SHEET_HELP = "res/atlas/help.json";
    ResourceConfig.SHEET_SHOP = "res/atlas/shop.json";
    ResourceConfig.SHEET_MATCHSIGN = "res/atlas/matchSign.json";
    ResourceConfig.SHEET_MATCHSIGN_ANI = "res/atlas/matchSign/ani.json";
    ResourceConfig.SHEET_GAMEICON = "res/atlas/gameIcon.json";
    ResourceConfig.SHEET_BANSHU = "res/atlas/banshu.json";
    ResourceConfig.SHEET_MATCH = "res/atlas/match.json";
    ResourceConfig.SHEET_CLUB = "res/atlas/club.json";
    ResourceConfig.SHEET_GUANPAI = "res/atlas/guanpai.json";
    ResourceConfig.SHEET_GUANPAI_CHAT = "res/atlas/guanpai/chat.json";
    //桐江大厅
    ResourceConfig.SHEET_HALL = "res/atlas/dating.json";
    ResourceConfig.SHEET_CREATEROOM = "res/atlas/createRoom.json";
    ResourceConfig.SHEET_COMMON = "res/atlas/common.json";
    //扑克八张游戏
    ResourceConfig.SHEET_BAZHANG = "res/atlas/bazhang.json";
    ResourceConfig.SHEET_BAZHANG_ANI = "res/atlas/bazhang/ani.json";
    ResourceConfig.SHEET_BAZHANG_S = "res/atlas/bazhang/special.json";
    ResourceConfig.SHEET_BAZHANG_N = "res/atlas/bazhang/normal.json";
    ResourceConfig.SHEET_BAZHANG_CHAT = "res/atlas/bazhang/chat.json";
    ResourceConfig.SHEET_BZ_BTWORD = "res/atlas/bazhang/selectCardLayer/btnWord1.json";
    ResourceConfig.SHEET_BZ_SHOUPAI = "res/atlas/bazhang/selectCardLayer/shoubai.json";
    ResourceConfig.SHEET_BZ_SYSTEM = "res/atlas/bazhang/selectCardLayer/system.json";
    ResourceConfig.SHEET_BZ_SELECTCARD = "res/atlas/bazhang/selectCardLayer.json";
    ResourceConfig.DUG_URL = "wakeng/waKeng_score_1";
    ResourceConfig.ALERT_BACK_TO_MENU = "tongyong/tongyong_back_to_menu.png";
    ResourceConfig.KEYBOARD_URL = "keyBoard/keyBoard_";
    ResourceConfig.ALERT_TISHI = "common/title_sysytemTip.png";
    //十三水
    ResourceConfig.SHEET_SHISANSHUI = "res/atlas/shisanshui.json";
    ResourceConfig.SHEET_SHISANSHUI_ANI = "res/atlas/shisanshui/ani.json";
    ResourceConfig.SHEET_SHISANSHUI_S = "res/atlas/shisanshui/special.json";
    ResourceConfig.SHEET_SHISANSHUI_N = "res/atlas/shisanshui/normal.json";
    ResourceConfig.SHEET_SHISANSHUI_CHAT = "res/atlas/shisanshui/chat.json";
    ResourceConfig.ANI_ARROW = "res/mj/Arror.ani";
    ResourceConfig.ANI_CHI = "res/mj/Chi.ani";
    ResourceConfig.ANI_GANG = "res/mj/Gang.ani";
    ResourceConfig.ANI_HU = "res/mj/Hu.ani";
    ResourceConfig.ANI_PENG = "res/mj/Peng.ani";
    ResourceConfig.ANI_TING = "res/mj/Ting.ani";
    //十三水动画
    ResourceConfig.ANI_FAN_PAI = "res/shisanshui/fanpai.ani";
    ResourceConfig.ANI_SHOW_CARD_TYPE = "res/shisanshui/showcardtype.ani";
    ResourceConfig.ANI_PLAY_GUN = "res/shisanshui/qiang.ani";
    ResourceConfig.ANI_PLAY_BULLET = "res/shisanshui/dankong.ani";
    ResourceConfig.ANI_WIN_ALL = "res/shisanshui/allwin.ani";
    ResourceConfig.ANI_START_GAME = "res/shisanshui/start.ani";
    ResourceConfig.ANI_START_TIME = "res/shisanshui/startgame.ani";
    ResourceConfig.ANI_START_COMPARE = "res/shisanshui/bipai.ani";
    //八张动画
    ResourceConfig.ANI_BZ_FAN_PAI = "res/bazhang/fanpai.ani";
    ResourceConfig.ANI_BZ_SHOW_CARD_TYPE = "res/bazhang/showcardtype.ani";
    ResourceConfig.ANI_BZ_PLAY_GUN = "res/bazhang/qiang.ani";
    ResourceConfig.ANI_BZ_PLAY_BULLET = "res/bazhang/dankong.ani";
    ResourceConfig.ANI_BZ_WIN_ALL = "res/bazhang/allwin.ani";
    ResourceConfig.ANI_BZ_START_GAME = "res/bazhang/start.ani";
    ResourceConfig.ANI_BZ_START_TIME = "res/bazhang/startgame.ani";
    ResourceConfig.ANI_BZ_START_COMPARE = "res/bazhang/bipai.ani";
    ResourceConfig.ANI_GEN_PAI = "res/mj/genpai.ani";
    ResourceConfig.ANI_GEN_CAI_SHEN = "res/mj/gencaishen.ani";
    ResourceConfig.ANI_START_STAGE_1 = "res/matchSign/Matchstart.ani";
    ResourceConfig.ANI_START_STAGE_3 = "res/matchSign/Matchstart1.ani";
    ResourceConfig.ANI_START_STAGE_4 = "res/matchSign/Matchstart2.ani";
    ResourceConfig.PART_MENU_BG = "res/particle/MenuBG.part";
    ResourceConfig.PART_MENU_BG2 = "res/menu/part_yezi.png";
    ResourceConfig.CONFIG_AUDIO = "res/config/audio.json";
    ResourceConfig.CONFIG_GAME_LIST = "res/config/game_list.json";
    //场景对应特效资源的ID
    ResourceConfig.LoginPage_SCEEN = 1;
    ResourceConfig.MenuPage_SCEEN = 2;
    ResourceConfig.GamePage_SCEEN = 3;
    //创建房间
    ResourceConfig.CREATE_ROOM_BG = "res/bg/bg_createRoom.png";
    //麻将小结算资源
    ResourceConfig.SHEET_SMALLEND = "res/atlas/smallEnd.json";
    ResourceConfig.SMALLEND_LINE = "res/smallEnd/player_xjs_dlg_line.png";
    ResourceConfig.SMALLEND_BG = "res/smallEnd/player_xjs_bg.png";
    //gps 资源
    ResourceConfig.SHEET_GPS = "res/atlas/gps.json";
    ResourceConfig.GPS_BG = "res/gps/gpsBg.png";
    //小结算字体
    ResourceConfig.SHEET_FENSHU = "res/atlas/fenshu_fnt.png";
    ResourceConfig.SHEET_FENSHU_FNT = "res/fenshu_fnt/fenshu_fnt.fnt";
    //战绩记录
    ResourceConfig.HISTORY_BG = "res/menu/bg.png";
    ResourceConfig.HISTORY_LIST_ITEM_BG = "res/menu/list_item_bg.png";
    ResourceConfig.HISTORY_LIST_DETAIL_BG = "res/menu/list_detail_bg.png";
    ResourceConfig.HISTORY_END_BG = "res/menu/end_bg.png";
    ResourceConfig.SHEET_HISTORY_JSON = "res/atlas/menu.json";
    ResourceConfig.SHEET_HISTORY_PNG = "res/atlas/menu.png";
    //聊天 表情
    ResourceConfig.SHEET_EMOJI_1 = "res/atlas/chat/1.json";
    ResourceConfig.SHEET_EMOJI_2 = "res/atlas/chat/2.json";
    ResourceConfig.SHEET_EMOJI_3 = "res/atlas/chat/3.json";
    ResourceConfig.SHEET_EMOJI_4 = "res/atlas/chat/4.json";
    ResourceConfig.SHEET_EMOJI_5 = "res/atlas/chat/5.json";
    ResourceConfig.SHEET_EMOJI_6 = "res/atlas/chat/6.json";
    ResourceConfig.SHEET_EMOJI_7 = "res/atlas/chat/7.json";
    ResourceConfig.SHEET_EMOJI_8 = "res/atlas/chat/8.json";
    ResourceConfig.SHEET_EMOJI = "res/atlas/emoji.json";
    //分享
    ResourceConfig.SHEET_SHARE_JSON = "res/atlas/share.json";
    return ResourceConfig;
}());
//# sourceMappingURL=ResourceConfig.js.map
/*
* @author seacole
* 获取不同游戏类型的位置
*/
var PlayerInGamePosiConfig = /** @class */ (function () {
    function PlayerInGamePosiConfig() {
    }
    /**
     * 获取不同游戏类型，对应玩家位置的posi
     */
    PlayerInGamePosiConfig.getPosi = function (gameType, index) {
        switch (gameType) {
            case GameDef.GAME_TYPE.SHANGQIU_MJ:
            case GameDef.GAME_TYPE.JINYUN_HZ_MJ:
            case GameDef.GAME_TYPE.JINYUN_GS_MJ:
            case GameDef.GAME_TYPE.JINYUN_MJ:
            case GameDef.GAME_TYPE.SHANXI_MJ:
                return PlayerInGamePosiConfig.getMJPosi(index);
            case GameDef.GAME_TYPE.WAKENG:
            case GameDef.GAME_TYPE.GUANPAI:
                return PlayerInGamePosiConfig.getWaKengPosi(index);
            case GameDef.GAME_TYPE.SHISANSHUI:
                return PlayerInGamePosiConfig.getShiSanShuiPosi(index);
        }
    };
    PlayerInGamePosiConfig.getShiSanShuiPosi = function (index) {
        if (BaseGameData.isTableStart) {
            return ShiSanShuiLayOut.GAME_START_SEAT_LAYOUT[BaseGameData.maxPlayer - 1][index - 1];
        }
        else {
            return ShiSanShuiLayOut.SEAT_LAYOUT[BaseGameData.maxPlayer - 1][index - 1];
        }
    };
    PlayerInGamePosiConfig.getMJPosi = function (index) {
        if (BaseGameData.isTableStart) {
            // return MaJiangLayOut.GAME_START_SEAT_LAYOUT[index-1]
            return MaJiangLayOut.GAME_START_SEAT_LAYOUT[BaseGameData.maxPlayer - 1][index - 1];
        }
        else {
            return MaJiangLayOut.SEAT_LAYOUT[BaseGameData.maxPlayer - 1][index - 1];
            //    return MaJiangLayOut.SEAT_LAYOUT[index-1]
        }
    };
    PlayerInGamePosiConfig.getWaKengPosi = function (index) {
        if (BaseGameData.isTableStart) {
            return WaKengLayOut.GAME_START_SEAT_LAYOUT[index - 1];
        }
        else {
            return WaKengLayOut.SEAT_LAYOUT[index - 1];
        }
    };
    return PlayerInGamePosiConfig;
}());
//# sourceMappingURL=PlayerInGamePosiConfig.js.map
/*
* @author seacole
* 平台配置;
*/
var OSConfig = /** @class */ (function () {
    function OSConfig() {
    }
    OSConfig.IOS_NATIVE_STORE = 1001; //APPSTORE
    OSConfig.IOS_NATIVE_INHOUSE = 1002; //企业包
    OSConfig.ANDROID_NATIVE = 2001;
    OSConfig.IOS_WEB = 3001;
    OSConfig.ANDROID_WEB = 3002;
    OSConfig.OTHERS_WEB = 3003;
    OSConfig.UNKNOWN = 4001;
    OSConfig.WEIXIN = 5001;
    return OSConfig;
}());
//# sourceMappingURL=OSConfig.js.map
/*
* @author seacole
* 比赛配置;
*/
var MatchConfig = /** @class */ (function () {
    function MatchConfig() {
    }
    /**
     * 是否定时赛
     */
    MatchConfig.isModeTime = function (value) {
        return value % 10 == 1;
    };
    /**
     * 是否人满即开赛
     */
    MatchConfig.isModeMember = function (value) {
        return value % 10 == 2;
    };
    /**
     *
     * @param status 比赛是否已经开始
     */
    MatchConfig.isMatchStart = function (status) {
        if (status && status > 0)
            return true;
        else
            return false;
    };
    MatchConfig.isMatch = function (value) {
        return Number(value) > 100;
    };
    /**
     * 最小开赛人数
     */
    MatchConfig.MIN_MEMBER = 8;
    /**
     * 定时赛
     */
    MatchConfig.MATCH_MODE_TIME = 101;
    /**
     * 人满即开
     */
    MatchConfig.MATCH_MODE_MEMBER = 102;
    // /**
    // * 官方赛  100-150个人赛 >150官方赛
    // */
    // public static MATCH_MODE_OFFICAL: number = 1;
    // /**
    //  * 个人赛
    //  */
    // public static MATCH_MODE_PERSONAL: number = 2;
    MatchConfig.MATCH_STATUS_NOT_BEGIN = 0;
    MatchConfig.MATCH_STATUS_BEGIN_CAN_SIGNIN = 1;
    MatchConfig.MATCH_STATUS_BEGIN_CAN_NOT_SIGNIN = 2;
    return MatchConfig;
}());
//# sourceMappingURL=MatchConfig.js.map
var MaJiangLayOut = /** @class */ (function () {
    function MaJiangLayOut() {
    }
    MaJiangLayOut.SEAT_LAYOUT = [[], [{ y: NaN, right: NaN, left: NaN, centerX: 60, bottom: 10 }, { bottom: NaN, right: NaN, left: NaN, centerX: 370, y: 50 }], [{ y: NaN, right: NaN, left: NaN, centerX: 60, bottom: 10 }, { centerX: NaN, left: NaN, bottom: NaN, right: -100, y: 186 }, { centerX: NaN, right: NaN, top: NaN, bottom: NaN, x: NaN, left: 10, y: 186 }], [{ centerX: 60, bottom: 10 }, { right: -100, y: 186 }, { centerX: 370, y: 50 }, { left: 10, y: 186 }]];
    MaJiangLayOut.GAME_START_SEAT_LAYOUT = [[], [{ scaleX: 0.8, scaleY: 0.8, centerX: NaN, left: 10, bottom: 150 }, { scaleX: 0.8, scaleY: 0.8, centerX: 370, y: 50 }, { scaleX: 0.8, scaleY: 0.8, centerX: 370, y: 10 }], [{ scaleX: 0.8, scaleY: 0.8, centerX: NaN, left: 10, bottom: 150 }, { scaleX: 0.8, scaleY: 0.8, right: -100, y: 186 }, { scaleX: 0.8, scaleY: 0.8, left: 10, y: 186 }, { scaleX: 0.8, scaleY: 0.8, left: 10, y: 186 }], [{ scaleX: 0.8, scaleY: 0.8, centerX: NaN, left: 10, bottom: 150 }, { scaleX: 0.8, scaleY: 0.8, right: -100, y: 186 }, { scaleX: 0.8, scaleY: 0.8, centerX: 370, y: 10 }, { scaleX: 0.8, scaleY: 0.8, left: 10, y: 186 }]];
    MaJiangLayOut.MENU_LAYOUT = { "top": 10, "right": 10 }; //_btnMenu
    MaJiangLayOut.MENU_CONTENT_LAYOUT = { "top": 0, "right": 0 };
    MaJiangLayOut.HISTORY_LAYOUT = { "right": 0, "y": 20 };
    MaJiangLayOut.CHAT_LAYOUT = { "right": 10, "top": 100 }; //_btnChat
    MaJiangLayOut.SSYY_LAYOUT = { "right": 10, "bottom": 60 }; //_checkBox_huatong
    MaJiangLayOut.PLAY_SOUND_LAYOUT = { "right": 10, "bottom": 150 }; //_checkBox_laba
    MaJiangLayOut.SSYY_TIP_LAYOUT = { "right": 60, "bottom": 140 };
    MaJiangLayOut.BG_LAYOUT = { "centerY": 0, "centerX": 0, "bottom": NaN };
    MaJiangLayOut.LOGO_LAYOUT = { "centerY": -40, "centerX": 0 };
    MaJiangLayOut.CHAT_CONTENT_LAYOUT = { "top": 10, "bottom": 0, "left": NaN, "right": -80 };
    MaJiangLayOut.MATCH_RECORD_LAYOUT = { "y": 150, "left": NaN, "right": 20 };
    return MaJiangLayOut;
}());
//# sourceMappingURL=MaJiangLayOut.js.map
/*
* @author seacole
* 游戏配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    /**
    * 初始化
    */
    GameConfig.init = function () {
        this.language = Laya.loader.getRes(ResourceConfig.LANG);
        this.cfgAudio = Laya.loader.getRes(ResourceConfig.CONFIG_AUDIO);
        this.cfgGameList = Laya.loader.getRes(ResourceConfig.CONFIG_GAME_LIST);
        this.DESC = {};
    };
    /**
     * 读取配置URL
     */
    GameConfig.getGamePage = function (name) {
        switch (name) {
            case "shanxi_mj":
                BaseGameData.gameType = GameDef.GAME_TYPE.SHANXI_MJ;
                WxWeb.instance.onShare();
                return ShanXiMjPage;
            case "wakeng":
                BaseGameData.gameType = GameDef.GAME_TYPE.WAKENG;
                WxWeb.instance.onShare();
                return WaKengPage;
            case "shisanshui":
                BaseGameData.gameType = GameDef.GAME_TYPE.SHISANSHUI;
                WxWeb.instance.onShare();
                return ShiSanShuiPage;
            //return BaZhangPage
            case "jinyun_mj":
                BaseGameData.gameType = GameDef.GAME_TYPE.JINYUN_MJ;
                WxWeb.instance.onShare();
                return TongluMjPage;
            case "jinyun_gs_mj":
                BaseGameData.gameType = GameDef.GAME_TYPE.JINYUN_GS_MJ;
                WxWeb.instance.onShare();
                return JinYunGsMjPage; //zhc测试代码 JinYunGsMjPage
            case "jinyun_hz_mj":
                BaseGameData.gameType = GameDef.GAME_TYPE.JINYUN_HZ_MJ;
                WxWeb.instance.onShare();
                return JinYunHzMjPage; //zhc测试代码 JinYunHzMjPage
            case "shangqiu_mj":
                BaseGameData.gameType = GameDef.GAME_TYPE.SHANGQIU_MJ;
                WxWeb.instance.onShare();
                return ShangQiuMjPage; //zhc测试代码 ShangQiuMjPage
            case "guanpai":
                BaseGameData.gameType = GameDef.GAME_TYPE.GUANPAI;
                WxWeb.instance.onShare();
                return GuanPaiPage;
            case "tonglu_mj":
                BaseGameData.gameType = GameDef.GAME_TYPE.TONGLU_MJ;
                WxWeb.instance.onShare();
                return TongluMjPage;
            case "bazhang":
                BaseGameData.gameType = GameDef.GAME_TYPE.BAZHANG;
                WxWeb.instance.onShare();
                return BaZhangPage;
        }
    };
    Object.defineProperty(GameConfig, "bigcard", {
        get: function () {
            var mm = localStorage.getItem('bigcard');
            return mm ? Number(mm) : 1;
        },
        set: function (value) {
            localStorage.setItem('bigcard', value + "");
        },
        enumerable: true,
        configurable: true
    });
    // static getUrl(callback: Function): void {
    //     log("try to get geturl.php");
    //     Ajax.GET(GameConfig.language.CONFIG_URLS + 'getfishurl.php', null, (response: any) => {
    //         log("get geturl.php successful");
    //         var data: any = JSON.parse(response);
    //         if (GameConfig.language.debug != "true") {
    //             GameConfig.WEB_SERVICE_URL = data.WEB_SERVICE_URL;
    //         }
    //         log('WEB_SERVICE_URL:' + GameConfig.WEB_SERVICE_URL);
    //         log('RESOURCE_URL:' + GameConfig.RESOURCE_URL);
    //         callback(data);
    //     }, () => {
    //         log('delay 5s to geturl');
    //         setTimeout(() => {
    //             GameConfig.getUrl(callback);
    //         }, 5000);
    //     });
    // }
    GameConfig.setServerUrl = function (url) {
        url = "10.0.0.12:21002";
        GameConfig.SERVER_URL = url.split(";");
        if (GameConfig.SERVER_URL.length) {
            if (GameConfig.SERVER_URL[GameConfig.SERVER_URL.length - 1] == "")
                GameConfig.SERVER_URL.pop();
            GameConfig.currentServerIdx = Math.floor(Math.random() * GameConfig.SERVER_URL.length);
            log('SERVER_URL:' + url);
        }
        else
            console.warn("setServerUrl error: " + url);
    };
    GameConfig.nextServerUrlIdx = function () {
        log("nextServerUrlIdx");
        GameConfig.currentServerIdx++;
        if (GameConfig.currentServerIdx >= GameConfig.SERVER_URL.length)
            GameConfig.currentServerIdx = 0;
    };
    Object.defineProperty(GameConfig, "currentServerUrl", {
        get: function () {
            return "ws://" + GameConfig.SERVER_URL[GameConfig.currentServerIdx] + "/ws";
        },
        enumerable: true,
        configurable: true
    });
    GameConfig.getGameCfgByGameType = function (gameType) {
        for (var idx in GameConfig.cfgGameList) {
            if (GameConfig.cfgGameList[idx].game_id == gameType)
                return GameConfig.cfgGameList[idx];
        }
        return null;
    };
    GameConfig.joinTable = function (response, showMenu) {
        if (showMenu === void 0) { showMenu = false; }
        if (MatchConfig.isMatch(response.game_mode)) {
            matchSign.MatchSignData.setInfo(response.game_code, response.game_name, response.game_rule, response.match_rule, response.game_mode);
            if (!AppControl.getInstance().currentPage || AppControl.getInstance().currentPage instanceof LoginPage)
                AppControl.getInstance().showPage(HallPage, { match_code: response.game_code });
            else
                matchSign.MatchSignInfoCtrl.instance.show(response.game_code);
        }
        else {
            BaseGameData.voiceRoomName = response.voice_roomid;
            if (response.is_sitdown && response.is_sitdown == 1) {
                if (!AppControl.getInstance().currentPage || AppControl.getInstance().currentPage instanceof LoginPage)
                    AppControl.getInstance().showPage(HallPage, { room_code: response.game_code });
                else {
                    AlertInGameCtrl.instance.show(StringUtils.format(GameConfig.language.alreadySeat, response.game_code), function (code) {
                        if (code == AlertCtrl.CONFIRM) {
                            server.code = response.game_code;
                            GameConfig.IS_MATCH = false;
                            AppControl.getInstance().showPage(GameConfig.getGamePage(response.game_name));
                        }
                        else {
                            if (showMenu) {
                                AppControl.getInstance().showPage(HallPage);
                            }
                        }
                    });
                }
            }
            else {
                server.code = response.game_code;
                // response.game_name = "shisanshui"
                GameConfig.IS_MATCH = false;
                AppControl.getInstance().showPage(GameConfig.getGamePage(response.game_name));
            }
        }
    };
    GameConfig.getCfg = function () {
        var urls = Laya.loader.getRes(ResourceConfig.URL_CONFIG); //+"?v="+GameConfig.randomNum
        GameConfig.WEB_SERVICE_URL = urls.WEB_SERVICE_URL;
        GameConfig.WEB_SERVICE_RECHARGE_URL = urls.WEB_SERVICE_RECHARGE_URL;
        GameConfig.GAME_URL = urls.GAME_URL;
        GameConfig.WX_URL = urls.WX_URL;
        GameConfig.VERSION = urls.version;
        GameConfig.CID = urls.CID;
        GameConfig.CHANNEL = urls.CHANNEL;
        if (Native.instance.isNative) {
            GameConfig.WX_APPID = urls.WX_OPEN_APPID;
            GameConfig.APP_VER = NativeHelper.instance.getAppVersion();
        }
        else {
            GameConfig.WX_APPID = urls.WX_APPID;
            GameConfig.APP_VER = "";
        }
        if (urls.hasOwnProperty("RES_VER"))
            GameConfig.RES_VER = urls.RES_VER || "";
        if (urls.hasOwnProperty("IS_TEST"))
            GameConfig.IS_TEST = urls.IS_TEST == "true";
        if (urls.hasOwnProperty("IS_BANSHU"))
            GameConfig.IS_BANSHU = urls.IS_BANSHU == "true";
        GameConfig.APPNAME = urls.APPNAME;
        GameConfig.APPDESC = urls.APPDESC;
        GameConfig.SHOW_GAME = urls.SHOW_GAME;
        GameConfig.APPAREA = urls.APPAREA;
        GameConfig.GAMES = [];
        GameConfig.MATCHS = [];
        for (var item in GameConfig.SHOW_GAME) {
            if (item == "jinyun_mj")
                GameConfig.MATCHS.push(item);
            else if (item == "shangqiu_mj")
                GameConfig.MATCHS.push(item);
            else if (item == "tonglu_mj")
                GameConfig.MATCHS.push(item);
            GameConfig.GAMES.push(item);
        }
        GameConfig.checkIsIosExamine();
        if (GameConfig.IS_TEST) {
            var labVer = new Laya.Label(urls.version);
            labVer.mouseEnabled = false;
            labVer.mouseThrough = true;
            labVer.color = "#00ff00";
            labVer.fontSize = 20;
            labVer.x = 20;
            labVer.top = 20;
            AppControl.getInstance().addToLoading(labVer);
        }
    };
    GameConfig.checkIsIosExamine = function () {
        if (Native.instance.isIOS) {
            var appVersion = NativeHelper.instance.getAppVersion();
            // appVersion="1.0.1";
            var appArr = appVersion.split(".");
            var localArr = GameConfig.VERSION.split(".");
            if (appArr.length == 3 && localArr.length == 3) {
                var appNum = Number(appArr[0]) * 1000 * 1000 + Number(appArr[1]) * 1000 + Number(appArr[2]);
                var localNum = Number(localArr[0]) * 1000 * 1000 + Number(localArr[1]) * 1000 + Number(localArr[2]);
                if (appNum > localNum)
                    GameConfig.IS_IOS_EXAMINE = true;
            }
        }
    };
    GameConfig.getShopCfg = function () {
        webService.getShopCfg(function (response) {
            if (response.code == 0) {
                GameConfig.cfgShop = response.data;
                Dispatcher.dispatch(EventNames.SHOP_CFG_GET);
            }
        });
    };
    GameConfig.getGameRule = function (game_name, game_rule, isMatch, diamond, paytype) {
        if (diamond === void 0) { diamond = -1; }
        if (paytype === void 0) { paytype = 0; }
        if (game_rule) {
            var desc = "";
            var rule = JSON.parse(game_rule);
            for (var k in rule) {
                var v = rule[k];
                if ((k == "max_hand_cnt" || k == "charge_type" || k == "max_player") && isMatch)
                    continue;
                var splitDes = void 0;
                if (k == "charge_type" && diamond != -1) {
                    if (diamond == 0)
                        splitDes = "免费";
                    else {
                        if (paytype)
                            splitDes = GameDef.SHARE_DESC[game_name][k][paytype];
                        else
                            GameDef.SHARE_DESC[game_name][k][v];
                    }
                }
                else
                    splitDes = GameDef.SHARE_DESC[game_name][k][v];
                if (splitDes && splitDes != "") {
                    desc = desc + splitDes + ",";
                }
            }
            if (desc.length)
                desc = desc.substr(0, desc.length - 1);
            return desc;
        }
    };
    GameConfig.RES_VER = "";
    GameConfig.GAME_TYPE_MJ = "1";
    GameConfig.GAME_TYPE_POKER = "2";
    GameConfig.GAME_TYPE_CONFIG = [GameConfig.GAME_TYPE_MJ, GameConfig.GAME_TYPE_POKER];
    GameConfig.CP_TRAN_NO = "cpTranNo";
    GameConfig.DESC = {};
    return GameConfig;
}());
//# sourceMappingURL=GameConfig.js.map
/*
* @author seacole
* 美术字配置;
*/
var FontConfig = /** @class */ (function () {
    function FontConfig() {
    }
    FontConfig.FONT_WAKENG_1 = 1;
    FontConfig.FONT_WAKENG_2 = 2;
    FontConfig.FONT_WAKENG_3 = 3;
    FontConfig.MENU_1 = 4;
    FontConfig.MENU_2 = 5;
    FontConfig.FONT_JOIN_TABLE_1 = 6;
    FontConfig.FONT_JOIN_TABLE_2 = 7;
    FontConfig.FONT_SHOP_1 = 8;
    FontConfig.FONT_MATCHSIGN_1 = 9;
    FontConfig.FONT_GUANPAI_1 = 10;
    return FontConfig;
}());
//# sourceMappingURL=FontConfig.js.map
/*
* @author seacole
* 事件表;
*/
var EventNames = /** @class */ (function () {
    function EventNames() {
    }
    EventNames.REMOVE_EFFECT = "REMOVE_EFFECT";
    EventNames.REMOVE_EFFECT_BY_ID = "REMOVE_EFFECT_BY_ID";
    EventNames.REMOVE_EFFECT_BY_INDEX = "REMOVE_EFFECT_BY_INDEX";
    EventNames.REMOVE_FONT = "REMOVE_FONT";
    EventNames.REMOVE_MASK = "REMOVE_MASK";
    EventNames.REMOVE_LINE_RENDERER = "REMOVE_LINE_RENDERER";
    EventNames.UNAUTHORIZED = "unauthorized";
    EventNames.CONNECT_SERVER = "CONNECT_SERVER";
    EventNames.SERVER_ERROR = "SERVER_ERROR";
    EventNames.SHOW_DISCONNECT = "SHOW_DISCONNECT";
    EventNames.UPDATE_GOLD = "REFRESH_GOLD"; //同步玩家金币
    EventNames.REFRESH_GOLD = "REFRESH_GOLD"; //游戏中的同步金币
    EventNames.ALERT_CHECK = "ALERT_CHECK";
    EventNames.ENTER_GAME = "ENTER_GAME";
    EventNames.PLAYER_DATA_CHANGED = "PLAYER_DATA_CHANGED";
    EventNames.REFRESH_ROLE_INFO = "REFRESH_ROLE_INFO";
    EventNames.PLAYER_DATA_COMPLETED = "PLAYER_DATA_COMPLETED"; //玩家信息添加完成
    EventNames.BACK_TO_LOGIN = "BACK_TO_LOGIN";
    EventNames.POKER_SELECTED_CHANGE = "POKER_SELECTED_CHANGE";
    EventNames.POKER_OVER_CHANGE = "POKER_OVER_CHANGE";
    EventNames.TIME_CHANGE = "TIME_CHANGE";
    EventNames.PING_CHANGE = "PING_CHANGE";
    EventNames.PLAY_RECORD = "PLAY_RECORD";
    EventNames.PLAY_RECORD_END = "PLAY_RECORD_END";
    EventNames.KEYBOARD_NUM = "KEYBOARD_NUM";
    EventNames.CHECK_READY = "CHECK_READY";
    EventNames.HIDE_RULE = "HIDE_RULE";
    EventNames.MENU_CHECK = "MENU_CHECK";
    EventNames.MENU_TOUCH = "MENU_TOUCH";
    EventNames.REALTIME_MIC = "REALTIME_MIC_ON";
    EventNames.REALTIME_SPEAKER = "REALTIME_SPEAKER";
    EventNames.BATTERY_CHANGE = "BATTERY_CHANGE";
    EventNames.VOICE_CHANGE = "VOICE_CHANGE";
    EventNames.SHOP_CFG_GET = "SHOP_CFG_GET";
    EventNames.MATCH_LIST_CHANGE = "MATCH_LIST_CHANGE";
    EventNames.MATCH_RULE_CHANGE = "MATCH_RULE_CHANGE";
    EventNames.MATCH_CREATE_TIME_CHANGE = "MATCH_CREATE_TIME_CHANGE";
    EventNames.MATCH_NEW_LIST = "MATCH_NEW_LIST";
    EventNames.MATCH_START_WARN = "MATCH_START_WARN";
    EventNames.UPDATE_MY_CLUB_LIST = "UPDATE_MY_CLUB_LIST";
    EventNames.CLUB_CREATE_SUCC = "CLUB_CREATE_SUCC";
    EventNames.CLUB_JOIN_SUCC = "CLUB_JOIN_SUCC";
    EventNames.CLUB_SEARCH_SUCC = "CLUB_SEARCH_SUCC";
    EventNames.UPDATE_MY_CLUB_GAMES_LIST = "UPDATE_MY_CLUB_GAMES_LIST";
    EventNames.UPDATE_MY_CLUB_RESULTS_LIST = "UPDATE_MY_CLUB_RESULTS_LIST";
    EventNames.UPDATE_MY_CLUB_MEMBERS_LIST = "UPDATE_MY_CLUB_MEMBERS_LIST";
    EventNames.UPDATE_MY_CLUB_DIAMOND = "UPDATE_MY_CLUB_DIAMOND";
    EventNames.CLUB_RENAME_SUCC = "CLUB_RENAME_SUCC";
    EventNames.CLUB_QUIT_SUCC = "CLUB_QUIT_SUCC";
    EventNames.CLUB_DELETE_SUCC = "CLUB_DELETE_SUCC";
    EventNames.CLUB_PAY_TYPE_CHANGE = "CLUB_PAY_TYPE_CHANGE";
    EventNames.CLUB_KICK_OUT_SUCC = "CLUB_KICK_OUT_SUCC";
    EventNames.CLUB_RECHARGE_SUCC = "CLUB_RECHARGE_SUCC";
    EventNames.CREATE_MATCH_SUCC = "CREATE_MATCH_SUCC";
    EventNames.CREATE_ROOM_SUCC = "CREATE_ROOM_SUCC";
    EventNames.PRELOADING_FINISH = "PRELOADING_FINISH";
    EventNames.GAME_HEARTBEAT_NTF = 'game.HeartbeatNtf';
    EventNames.GAME_JOIN_TABLE_REQ = 'game.JoinTableReq';
    EventNames.GAME_JOIN_TABLE_REP = 'game.JoinTableRep';
    EventNames.GAME_SITDOWN_REQ = 'game.SitdownReq';
    EventNames.GAME_SITDOWN_REP = 'game.SitdownRep';
    EventNames.GAME_SITDOWN_NTF = 'game.SitdownNtf';
    EventNames.GAME_STANDUP_REQ = 'game.StandupReq';
    EventNames.GAME_STANDUP_REP = 'game.StandupRep';
    EventNames.GAME_STANDUP_NTF = 'game.StandupNtf';
    EventNames.GAME_START_TABLE_REQ = 'game.StartTableReq';
    EventNames.GAME_START_TABLE_REP = 'game.StartTableRep';
    EventNames.GAME_START_TABLE_NTF = 'game.StartTableNtf';
    EventNames.GAME_TABLE_END_REQ = 'game.TableEndReq';
    EventNames.GAME_TABLE_WILL_END_NTF = 'game.TableWillEndNtf';
    EventNames.GAME_PLAYER_READY_REQ = 'game.PlayerReadyReq';
    EventNames.GAME_PLAYER_READY_REP = 'game.PlayerReadyRep';
    EventNames.GAME_PLAYER_READY_NTF = 'game.PlayerReadyNtf';
    EventNames.GAME_EMOTICON_REQ = 'game.EmoticonReq';
    EventNames.GAME_EMOTICON_NTF = 'game.EmoticonNtf';
    EventNames.GAME_USE_GOODS_REQ = 'game.UseGoodsReq';
    EventNames.GAME_USE_GOODS_REP = 'game.UseGoodsRep';
    EventNames.GAME_USE_GOODS_NTF = 'game.UseGoodsNtf';
    EventNames.GAME_TABLE_INFO_NTF = 'game.TableInfoNtf';
    EventNames.GAME_PLAYER_OPT_NTF = 'game.PlayerOptNtf';
    EventNames.GAME_PLAYER_OPT_REQ = 'game.PlayerOptReq';
    EventNames.GAME_PLAYER_OPT_REP = 'game.PlayerOptRep';
    EventNames.GAME_CARD_MOVE_NTF = 'game.CardMoveNtf';
    EventNames.GAME_GAME_START_NTF = 'game.GameStartNtf';
    EventNames.GAME_GAME_END_NTF = 'game.GameEndNtf';
    EventNames.GAME_SHOW_CARDS_NTF = 'game.ShowCardsNtf';
    EventNames.GAME_REAL_TIME_RECORD_REQ = 'game.RealTimeRecordReq';
    EventNames.GAME_REAL_TIME_RECORD_REP = 'game.RealTimeRecordRep';
    EventNames.GAME_TABLE_END_NTF = 'game.TableEndNtf';
    EventNames.GAME_PLAYER_TABLE_STATUS_REQ = 'game.PlayerTableStatusReq';
    EventNames.GAME_PlAYER_TABLE_STATUS_NTF = 'game.PlayerTableStatusNtf';
    EventNames.GAME_OFFLINE_NTF = 'game.OfflineNtf';
    EventNames.GAME_RECONNECT_INFO = 'game.ReconnectInfo';
    EventNames.GAME_SHOW_INFO_NTF = 'game.ShowInfoNtf';
    EventNames.GAME_PLAYER_CHAT_REQ = 'game.PlayerChatReq';
    EventNames.GAME_PLAYER_CHAT_NTF = 'game.PlayerChatNtf';
    EventNames.GAME_SET_DECK_CARDS = 'game.SetDeckCards';
    EventNames.GAME_UPLOAD_INFO_REQ = 'game.UploadInfoReq';
    EventNames.GAME_DETAIL_NTF = 'game.DetailNtf';
    EventNames.GAME_USER_INFO_REQ = 'game.UserInfoReq';
    EventNames.GAME_USER_INFO_REP = 'game.UserInfoRep';
    EventNames.GAME_VOTE_REQ = 'game.VoteReq';
    EventNames.GAME_VOTE_REP = 'game.VoteRep';
    EventNames.GAME_VOTE_NTF = 'game.VoteNtf';
    EventNames.GAME_HISTORY_REQ = 'game.HistoryReq';
    EventNames.GAME_TABLE_DATA_REQ = 'game.TableDataReq';
    EventNames.GAME_TABLE_DATA_NTF = 'game.TableDataNtf';
    EventNames.GAME_MATCH_HALL_STATUS_REQ = 'game.MatchHallStatusReq';
    EventNames.GAME_MATCH_HALL_STATUS_REP = 'game.MatchHallStatusRep';
    EventNames.GAME_MATCH_HALL_WILL_START_NTF = 'game.MatchHallWillStartNtf';
    EventNames.GAME_MATCH_HALL_START_NTF = 'game.MatchHallStartNtf';
    EventNames.GAME_MATCH_HALL_USER_LIST_REQ = 'game.MatchHallUserListReq';
    EventNames.GAME_MATCH_HALL_USER_LIST_REP = 'game.MatchHallUserListRep';
    EventNames.GAME_MATCH_HALL_SIGNIN_NTF = 'game.MatchHallSigninNtf';
    EventNames.GAME_MATCH_HALL_STATUS_NTF = 'game.MatchHallStatusNtf';
    EventNames.GAME_MATCH_SIGNUP_REQ = 'game.MatchSignupReq';
    EventNames.GAME_MATCH_SIGNUP_REP = 'game.MatchSignupRep';
    EventNames.GAME_MATCH_SIGNOUT_REQ = 'game.MatchSignoutReq';
    EventNames.GAME_MATCH_SIGNOUT_REP = 'game.MatchSignoutRep';
    EventNames.GAME_MATCH_REWARD_LIST_REQ = 'game.MatchRewardListReq';
    EventNames.GAME_MATCH_REWARD_LIST_REP = 'game.MatchRewardListRep';
    EventNames.MATCH_JOIN = 'game.MatchJoinReq';
    EventNames.MATCH_START = 'game.MatchStartNtf';
    EventNames.MATCH_INFO = 'game.MatchInfoNtf';
    EventNames.MATCH_RANK = 'game.MatchUpdateRankNtf';
    EventNames.MATCH_KICK_OUT = 'game.MatchKickOutNtf';
    EventNames.MATCH_OVER = 'game.MatchOverNtf';
    EventNames.MATCH_RECORD_REQ = 'game.MatchRecordReq';
    EventNames.PLAYER_BACK_REQ = "game.PlayerBackReq";
    EventNames.MATCH_RECORD_REP = 'game.MatchRecordRep';
    EventNames.MATCH_MSG_INFO = 'game.MsgMatchInfoNtf';
    EventNames.MATCH_SCORE_NTF = "game.MatchBaseScoreNtf";
    EventNames.FONT_BITMMAP = 'font.Bitmap';
    return EventNames;
}());
//# sourceMappingURL=EventNames.js.map
/*
* @author seacole
* 序列帧特效配置;
*/
var EffectConfig = /** @class */ (function () {
    function EffectConfig() {
    }
    /**
     * 序列帧类型
     */
    EffectConfig.EFFECT_TYPE_SEQUENCE = 1;
    /**
     * 粒子类型
     */
    EffectConfig.EFFECT_TYPE_PARTICLE = 2;
    /**
     * 帧动画类型
     */
    EffectConfig.EFFECT_TYPE_ANIMATION = 3;
    return EffectConfig;
}());
//# sourceMappingURL=EffectConfig.js.map
/*
 * @author seacole
 * 按钮音效配置
*/
var ButtonSoundEffect = /** @class */ (function () {
    function ButtonSoundEffect() {
    }
    ButtonSoundEffect.types = {
        1: "normal.ogg",
        2: "normal.ogg"
    };
    return ButtonSoundEffect;
}());
//# sourceMappingURL=ButtonSoundEffect.js.map
/*
* @author seacole
* 挖坑牌型算法;
*/
var WaKengCardsType = /** @class */ (function () {
    function WaKengCardsType() {
    }
    /**
     * 获取牌型
     */
    WaKengCardsType.getType = function (cards) {
        if (cards == null || cards.length < 1)
            return 0;
        var tmpArr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //卡牌出现的次数
        var i;
        var j;
        var flag;
        for (i = 0; i < cards.length; ++i) {
            var num = Math.floor(cards[i] / 10);
            tmpArr[num]++;
        }
        var tmp1Arr = [];
        var tmp2Arr = [];
        var tmp3Arr = [];
        var tmp4Arr = [];
        for (i = 0; i < tmpArr.length; ++i) {
            if (tmpArr[i] == 1)
                tmp1Arr.push(i);
            else if (tmpArr[i] == 2)
                tmp2Arr.push(i);
            else if (tmpArr[i] == 3)
                tmp3Arr.push(i);
            else if (tmpArr[i] == 4)
                tmp4Arr.push(i);
        }
        if (cards.length == 1) {
            return WaKengCardsType.DAN;
        }
        if (tmp2Arr.length == 1 && cards.length == 2) {
            return WaKengCardsType.DUIZI;
        }
        if (tmp3Arr.length == 1 && cards.length == 3) {
            return WaKengCardsType.SANZHANG;
        }
        if (tmp4Arr.length == 1 && cards.length == 4) {
            return WaKengCardsType.ZHADAN;
        }
        if (tmp1Arr.length > 2) {
            flag = true;
            for (i = 1; i < tmp1Arr.length; ++i) {
                if (tmp1Arr[i - 1] + 1 != tmp1Arr[i]) {
                    flag = false;
                    break;
                }
            }
            if (flag && tmp1Arr.length == cards.length) {
                return WaKengCardsType.DANSHUN;
            }
        }
        if (tmp2Arr.length > 2) {
            flag = true;
            for (i = 1; i < tmp2Arr.length; ++i) {
                if (tmp2Arr[i - 1] + 1 != tmp2Arr[i]) {
                    flag = false;
                    break;
                }
            }
            if (flag && tmp2Arr.length * 2 == cards.length) {
                return WaKengCardsType.SHUANGSHUN;
            }
        }
        if (tmp3Arr.length > 2) {
            flag = true;
            for (i = 1; i < tmp3Arr.length; ++i) {
                if (tmp3Arr[i - 1] + 1 != tmp3Arr[i]) {
                    flag = false;
                    break;
                }
            }
            if (flag && tmp3Arr.length * 3 == cards.length) {
                return WaKengCardsType.SANSHUN;
            }
        }
        return 0;
    };
    /**
     * 检测是否能压过上一手牌
     */
    WaKengCardsType.checkCanUse = function (lastPlayCards, selectCards) {
        var myCardType = WaKengCardsType.getType(selectCards);
        var lastCardType = WaKengCardsType.getType(lastPlayCards);
        var canUse;
        //如果上一首出的是炸弹，需要比他更大的炸弹才行
        if (lastCardType == WaKengCardsType.ZHADAN) {
            if (myCardType == WaKengCardsType.ZHADAN && WaKengCardsType.getCardNum(selectCards[selectCards.length - 1]) > WaKengCardsType.getCardNum(lastPlayCards[0]))
                canUse = true;
            else
                canUse = false;
        }
        else {
            if (WaKengGameData.waKengHasBoom && myCardType == WaKengCardsType.ZHADAN)
                canUse = true;
            else {
                if (myCardType == lastCardType && lastPlayCards.length == selectCards.length && WaKengCardsType.getCardNum(selectCards[selectCards.length - 1]) > WaKengCardsType.getCardNum(lastPlayCards[0]))
                    canUse = true;
                else
                    canUse = false;
            }
        }
        return canUse;
    };
    /**
     * 返回所有大过的牌
     */
    WaKengCardsType.getHelper = function (lastPlayCards, handCards) {
        var lastCardType = WaKengCardsType.getType(lastPlayCards);
        var tmpArr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //卡牌出现的次数
        var i;
        var j;
        var flag;
        for (i = 0; i < handCards.length; ++i) {
            var num = Math.floor(handCards[i] / 10);
            tmpArr[num]++;
        }
        var tmp1Arr = [];
        var tmp2Arr = [];
        var tmp3Arr = [];
        var tmp4Arr = [];
        for (i = 0; i < tmpArr.length; ++i) {
            if (tmpArr[i] == 1)
                tmp1Arr.push(i);
            else if (tmpArr[i] == 2)
                tmp2Arr.push(i);
            else if (tmpArr[i] == 3)
                tmp3Arr.push(i);
            else if (tmpArr[i] == 4)
                tmp4Arr.push(i);
        }
        if (lastCardType == WaKengCardsType.DAN)
            return WaKengCardsType.getHelperDan(lastPlayCards, handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr);
        else if (lastCardType == WaKengCardsType.DUIZI)
            return WaKengCardsType.getHelperDuiZi(lastPlayCards, handCards, tmp2Arr, tmp3Arr, tmp4Arr);
        else if (lastCardType == WaKengCardsType.SANZHANG)
            return WaKengCardsType.getHelperSanZhang(lastPlayCards, handCards, tmp3Arr, tmp4Arr);
        else if (lastCardType == WaKengCardsType.ZHADAN)
            return WaKengCardsType.getHelperZhaDan(lastPlayCards, handCards, tmp4Arr);
        else if (lastCardType == WaKengCardsType.DANSHUN)
            return WaKengCardsType.getHelperDanShun(lastPlayCards, handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr);
        else if (lastCardType == WaKengCardsType.SHUANGSHUN)
            return WaKengCardsType.getHelperShuangShun(lastPlayCards, handCards, tmp2Arr, tmp3Arr, tmp4Arr);
        else if (lastCardType == WaKengCardsType.SANSHUN)
            return WaKengCardsType.getHelperSanShun(lastPlayCards, handCards, tmp3Arr, tmp4Arr);
        return null;
    };
    /**
     * 检测能压过单牌的牌
     */
    WaKengCardsType.getHelperDan = function (lastPlayCards, handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr) {
        var outArr = [];
        var lastNum = WaKengCardsType.getCardNum(lastPlayCards[0]);
        var i;
        for (i = 0; i < tmp1Arr.length; i++) {
            if (tmp1Arr[i] > lastNum)
                outArr.push(WaKengCardsType.getCardByNum(handCards, tmp1Arr[i], 1));
        }
        for (i = 0; i < tmp2Arr.length; i++) {
            if (tmp2Arr[i] > lastNum)
                outArr.push(WaKengCardsType.getCardByNum(handCards, tmp2Arr[i], 1));
        }
        for (i = 0; i < tmp3Arr.length; i++) {
            if (tmp3Arr[i] > lastNum)
                outArr.push(WaKengCardsType.getCardByNum(handCards, tmp3Arr[i], 1));
        }
        if (WaKengGameData.waKengHasBoom) {
            for (i = 0; i < tmp4Arr.length; i++) {
                outArr.push(WaKengCardsType.getCardByNum(handCards, tmp4Arr[i], 4));
            }
        }
        for (i = 0; i < tmp4Arr.length; i++) {
            if (tmp4Arr[i] > lastNum)
                outArr.push(WaKengCardsType.getCardByNum(handCards, tmp4Arr[i], 1));
        }
        return outArr;
    };
    /**
     * 检测能压过对子的牌
     */
    WaKengCardsType.getHelperDuiZi = function (lastPlayCards, handCards, tmp2Arr, tmp3Arr, tmp4Arr) {
        var outArr = [];
        var lastNum = WaKengCardsType.getCardNum(lastPlayCards[0]);
        var i;
        for (i = 0; i < tmp2Arr.length; i++) {
            if (tmp2Arr[i] > lastNum)
                outArr.push(WaKengCardsType.getCardByNum(handCards, tmp2Arr[i], 2));
        }
        for (i = 0; i < tmp3Arr.length; i++) {
            if (tmp3Arr[i] > lastNum)
                outArr.push(WaKengCardsType.getCardByNum(handCards, tmp3Arr[i], 2));
        }
        if (WaKengGameData.waKengHasBoom) {
            for (i = 0; i < tmp4Arr.length; i++) {
                outArr.push(WaKengCardsType.getCardByNum(handCards, tmp4Arr[i], 4));
            }
        }
        for (i = 0; i < tmp4Arr.length; i++) {
            if (tmp4Arr[i] > lastNum)
                outArr.push(WaKengCardsType.getCardByNum(handCards, tmp4Arr[i], 2));
        }
        return outArr;
    };
    /**
     * 检测能压过三张的牌
     */
    WaKengCardsType.getHelperSanZhang = function (lastPlayCards, handCards, tmp3Arr, tmp4Arr) {
        var outArr = [];
        var lastNum = WaKengCardsType.getCardNum(lastPlayCards[0]);
        var i;
        for (i = 0; i < tmp3Arr.length; i++) {
            if (tmp3Arr[i] > lastNum)
                outArr.push(WaKengCardsType.getCardByNum(handCards, tmp3Arr[i], 3));
        }
        if (WaKengGameData.waKengHasBoom) {
            for (i = 0; i < tmp4Arr.length; i++) {
                outArr.push(WaKengCardsType.getCardByNum(handCards, tmp4Arr[i], 4));
            }
        }
        for (i = 0; i < tmp4Arr.length; i++) {
            if (tmp4Arr[i] > lastNum)
                outArr.push(WaKengCardsType.getCardByNum(handCards, tmp4Arr[i], 3));
        }
        return outArr;
    };
    /**
     * 检测能压过炸弹的牌
     */
    WaKengCardsType.getHelperZhaDan = function (lastPlayCards, handCards, tmp4Arr) {
        var outArr = [];
        var lastNum = WaKengCardsType.getCardNum(lastPlayCards[0]);
        var i;
        for (i = 0; i < tmp4Arr.length; i++) {
            if (tmp4Arr[i] > lastNum)
                outArr.push(WaKengCardsType.getCardByNum(handCards, tmp4Arr[i], 4));
        }
        return outArr;
    };
    /**
    * 检测能压过单顺的牌
    */
    WaKengCardsType.getHelperDanShun = function (lastPlayCards, handCards, tmp1Arr, tmp2Arr, tmp3Arr, tmp4Arr) {
        var outArr = [];
        var lastNum = WaKengCardsType.getCardNum(lastPlayCards[0]);
        var i;
        var j;
        var flag;
        var tmp;
        for (i = 1; i < 11; i++) {
            flag = true;
            for (j = 0; j < lastPlayCards.length; j++) {
                if (tmp1Arr.indexOf(lastNum + i + j) == -1 && tmp2Arr.indexOf(lastNum + i + j) == -1 && tmp3Arr.indexOf(lastNum + i + j) == -1 && tmp4Arr.indexOf(lastNum + i + j) == -1) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                tmp = [];
                for (j = 0; j < lastPlayCards.length; j++) {
                    tmp.push(WaKengCardsType.getCardByNum(handCards, lastNum + i + j, 1)[0]);
                }
                outArr.push(tmp);
            }
        }
        if (WaKengGameData.waKengHasBoom) {
            for (i = 0; i < tmp4Arr.length; i++) {
                outArr.push(WaKengCardsType.getCardByNum(handCards, tmp4Arr[i], 4));
            }
        }
        return outArr;
    };
    /**
    * 检测能压过双顺的牌
    */
    WaKengCardsType.getHelperShuangShun = function (lastPlayCards, handCards, tmp2Arr, tmp3Arr, tmp4Arr) {
        var outArr = [];
        var lastNum = WaKengCardsType.getCardNum(lastPlayCards[0]);
        var i;
        var j;
        var flag;
        var tmp1;
        var tmp2;
        for (i = 1; i < 11; i++) {
            flag = true;
            for (j = 0; j < lastPlayCards.length / 2; j++) {
                if (tmp2Arr.indexOf(lastNum + i + j) == -1 && tmp3Arr.indexOf(lastNum + i + j) == -1 && tmp4Arr.indexOf(lastNum + i + j) == -1) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                tmp1 = [];
                for (j = 0; j < lastPlayCards.length / 2; j++) {
                    tmp2 = WaKengCardsType.getCardByNum(handCards, lastNum + i + j, 2);
                    tmp1.push(tmp2[0], tmp2[1]);
                }
                outArr.push(tmp1);
            }
        }
        if (WaKengGameData.waKengHasBoom) {
            for (i = 0; i < tmp4Arr.length; i++) {
                outArr.push(WaKengCardsType.getCardByNum(handCards, tmp4Arr[i], 4));
            }
        }
        return outArr;
    };
    /**
    * 检测能压过三顺的牌
    */
    WaKengCardsType.getHelperSanShun = function (lastPlayCards, handCards, tmp3Arr, tmp4Arr) {
        var outArr = [];
        var lastNum = WaKengCardsType.getCardNum(lastPlayCards[0]);
        var i;
        var j;
        var flag;
        var tmp1;
        var tmp2;
        for (i = 1; i < 11; i++) {
            flag = true;
            for (j = 0; j < lastPlayCards.length / 3; j++) {
                if (tmp3Arr.indexOf(lastNum + i + j) == -1 && tmp4Arr.indexOf(lastNum + i + j) == -1) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                tmp1 = [];
                for (j = 0; j < lastPlayCards.length / 3; j++) {
                    tmp2 = WaKengCardsType.getCardByNum(handCards, lastNum + i + j, 3);
                    tmp1.push(tmp2[0], tmp2[1], tmp2[2]);
                }
                outArr.push(tmp1);
            }
        }
        if (WaKengGameData.waKengHasBoom) {
            for (i = 0; i < tmp4Arr.length; i++) {
                outArr.push(WaKengCardsType.getCardByNum(handCards, tmp4Arr[i], 4));
            }
        }
        return outArr;
    };
    /**
     * 选中一张牌智能选牌
     */
    WaKengCardsType.getAutoSelectedCardsByOneCard = function (helpCards, handCards, card) {
        if (helpCards && helpCards.length) {
            var cardNum = Math.floor(card / 10);
            var i;
            var j;
            var helpNum;
            var flag;
            var outArr;
            var type;
            var tmp;
            //与该牌数值相等的牌是否在提示中
            for (i = 0; i < helpCards.length; i++) {
                type = WaKengCardsType.getType(helpCards[i]);
                //单顺，双顺，三顺，需要选择当前选中牌开始的顺子
                if (type == WaKengCardsType.DANSHUN || type == WaKengCardsType.SHUANGSHUN || type == WaKengCardsType.SANSHUN) {
                    helpNum = Math.floor(helpCards[i][0] / 10);
                    if (helpNum == cardNum) {
                        //如果选中牌是炸弹，先起炸弹。如果后面还有该牌开始的提示牌，说明有炸弹
                        for (j = i + 1; j < helpCards.length; j++) {
                            tmp = Math.floor(helpCards[j][0] / 10);
                            if (tmp == cardNum) {
                                i = j;
                                break;
                            }
                        }
                        flag = true;
                        break;
                    }
                }
                else {
                    for (j = 0; j < helpCards[i].length; j++) {
                        helpNum = Math.floor(helpCards[i][j] / 10);
                        if (helpNum == cardNum) {
                            flag = true;
                            break;
                        }
                    }
                }
                if (flag)
                    break;
            }
            if (flag) {
                outArr = helpCards[i].concat();
                //如果提示中包含这张牌，选择提示的牌
                if (helpCards[i].indexOf(card) != -1)
                    return outArr;
                //如果提示中不包含这张牌，删除提示中与该牌数值相等的牌，把该牌与该牌临近的牌插入进去
                else {
                    var count = 0;
                    for (i = 0; i < outArr.length;) {
                        helpNum = Math.floor(outArr[i] / 10);
                        if (helpNum == cardNum) {
                            outArr.splice(i, 1);
                            count++;
                        }
                        else
                            i++;
                    }
                    count -= 1;
                    outArr.push(card);
                    if (count > 0) {
                        for (i = 1; i < 4; i++) {
                            if (handCards.indexOf(card + i) != -1) {
                                outArr.push(card + i);
                                count--;
                                if (count <= 0)
                                    break;
                            }
                        }
                    }
                    if (count > 0) {
                        for (i = -1; i > -4; i--) {
                            if (handCards.indexOf(card + i) != -1) {
                                outArr.push(card + i);
                                count--;
                                if (count <= 0)
                                    break;
                            }
                        }
                    }
                    return outArr;
                }
            }
            return null;
        }
        return null;
    };
    /**
     * 立两张牌选牌
     */
    WaKengCardsType.getAutoSelectedCardsByTwoCards = function (selectCards, handCards) {
        var i;
        var startCard = selectCards[1];
        var endCard = selectCards[0];
        var startNum = Math.floor(startCard / 10);
        var endNum = Math.floor(endCard / 10);
        var tmpArr = [];
        var outArr;
        var helpNum;
        for (i = 0; i < handCards.length; ++i) {
            var num = Math.floor(handCards[i] / 10);
            if (num >= startNum && num <= endNum)
                tmpArr.push(handCards[i]);
        }
        if (!outArr) {
            outArr = WaKengCardsType.getSanShun(tmpArr);
            if (outArr) {
                if (WaKengCardsType.getCardNum(outArr[0]) != startNum || WaKengCardsType.getCardNum(outArr[outArr.length - 1]) != endNum)
                    outArr = null;
            }
        }
        if (!outArr) {
            outArr = WaKengCardsType.getShuangShun(tmpArr);
            if (outArr) {
                if (WaKengCardsType.getCardNum(outArr[0]) != startNum || WaKengCardsType.getCardNum(outArr[outArr.length - 1]) != endNum)
                    outArr = null;
            }
        }
        if (!outArr) {
            outArr = WaKengCardsType.getDanShun(tmpArr);
            if (outArr) {
                if (WaKengCardsType.getCardNum(outArr[0]) != startNum || WaKengCardsType.getCardNum(outArr[outArr.length - 1]) != endNum)
                    outArr = null;
            }
        }
        if (outArr) {
            //如果提示中包含这张牌，选择提示的牌
            if (outArr.indexOf(startCard) != -1) {
            }
            //如果提示中不包含这张牌，删除提示中与该牌数值相等的牌，把该牌与该牌临近的牌插入进去
            else {
                var count = 0;
                for (i = 0; i < outArr.length;) {
                    helpNum = Math.floor(outArr[i] / 10);
                    if (helpNum == startNum) {
                        outArr.splice(i, 1);
                        count++;
                    }
                    else
                        i++;
                }
                count -= 1;
                outArr.push(startCard);
                if (count > 0) {
                    for (i = 1; i < 4; i++) {
                        if (handCards.indexOf(startCard + i) != -1) {
                            outArr.push(startCard + i);
                            count--;
                            if (count <= 0)
                                break;
                        }
                    }
                }
                if (count > 0) {
                    for (i = -1; i > -4; i--) {
                        if (handCards.indexOf(startCard + i) != -1) {
                            outArr.push(startCard + i);
                            count--;
                            if (count <= 0)
                                break;
                        }
                    }
                }
            }
            //如果提示中包含这张牌，选择提示的牌
            if (outArr.indexOf(endCard) != -1) {
            }
            //如果提示中不包含这张牌，删除提示中与该牌数值相等的牌，把该牌与该牌临近的牌插入进去
            else {
                var count = 0;
                for (i = 0; i < outArr.length;) {
                    helpNum = Math.floor(outArr[i] / 10);
                    if (helpNum == endNum) {
                        outArr.splice(i, 1);
                        count++;
                    }
                    else
                        i++;
                }
                count -= 1;
                outArr.push(endCard);
                if (count > 0) {
                    for (i = 1; i < 4; i++) {
                        if (handCards.indexOf(endCard + i) != -1) {
                            outArr.push(endCard + i);
                            count--;
                            if (count <= 0)
                                break;
                        }
                    }
                }
                if (count > 0) {
                    for (i = -1; i > -4; i--) {
                        if (handCards.indexOf(endCard + i) != -1) {
                            outArr.push(endCard + i);
                            count--;
                            if (count <= 0)
                                break;
                        }
                    }
                }
            }
            return outArr;
        }
        return null;
    };
    /**
     * 检测选中牌中是否有单顺
     */
    WaKengCardsType.getDanShun = function (handCards) {
        var tmpArr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //卡牌出现的次数
        var i;
        var j;
        var flag;
        for (i = 0; i < handCards.length; ++i) {
            var num = Math.floor(handCards[i] / 10);
            tmpArr[num]++;
        }
        var outArr = [];
        var start;
        var end;
        var count = 0;
        for (i = 0; i < tmpArr.length; ++i) {
            if (tmpArr[i]) {
                if (count == 0)
                    start = i;
                count++;
            }
            else {
                if (count >= 3) {
                    end = i;
                    break;
                }
                else
                    count = 0;
            }
        }
        //有顺子
        if (end) {
            for (i = start; i < end; ++i) {
                for (j = 0; j < handCards.length; ++j) {
                    var num = Math.floor(handCards[j] / 10);
                    if (num == i && outArr.indexOf(handCards[j]) == -1) {
                        outArr.push(handCards[j]);
                        break;
                    }
                }
            }
            return outArr;
        }
        else
            return null;
    };
    /**
     * 检测选中牌中是否有双顺
     */
    WaKengCardsType.getShuangShun = function (handCards) {
        var tmpArr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //卡牌出现的次数
        var i;
        var j;
        var flag;
        for (i = 0; i < handCards.length; ++i) {
            var num = Math.floor(handCards[i] / 10);
            tmpArr[num]++;
        }
        var outArr = [];
        var start;
        var end;
        var count = 0;
        for (i = 0; i < tmpArr.length; ++i) {
            if (tmpArr[i] > 1) {
                if (count == 0)
                    start = i;
                count++;
            }
            else {
                if (count >= 3) {
                    end = i;
                    break;
                }
                else
                    count = 0;
            }
        }
        //有顺子
        if (end) {
            for (i = start; i < end; ++i) {
                count = 0;
                for (j = 0; j < handCards.length; ++j) {
                    var num = Math.floor(handCards[j] / 10);
                    if (num == i && outArr.indexOf(handCards[j]) == -1) {
                        outArr.push(handCards[j]);
                        count++;
                        if (count == 2)
                            break;
                    }
                }
            }
            return outArr;
        }
        else
            return null;
    };
    /**
     * 检测选中牌中是否有三顺
     */
    WaKengCardsType.getSanShun = function (handCards) {
        var tmpArr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //卡牌出现的次数
        var i;
        var j;
        var flag;
        for (i = 0; i < handCards.length; ++i) {
            var num = Math.floor(handCards[i] / 10);
            tmpArr[num]++;
        }
        var outArr = [];
        var start;
        var end;
        var count = 0;
        for (i = 0; i < tmpArr.length; ++i) {
            if (tmpArr[i] > 2) {
                if (count == 0)
                    start = i;
                count++;
            }
            else {
                if (count >= 3) {
                    end = i;
                    break;
                }
                else
                    count = 0;
            }
        }
        //有顺子
        if (end) {
            for (i = start; i < end; ++i) {
                count = 0;
                for (j = 0; j < handCards.length; ++j) {
                    var num = Math.floor(handCards[j] / 10);
                    if (num == i && outArr.indexOf(handCards[j]) == -1) {
                        outArr.push(handCards[j]);
                        count++;
                        if (count == 3)
                            break;
                    }
                }
            }
            return outArr;
        }
        else
            return null;
    };
    /**
     * 拖拽选牌
     */
    WaKengCardsType.getDragHelp = function (handCards) {
        var type = WaKengCardsType.getType(handCards);
        //刚好是双顺三顺 则选中双顺 三顺
        if (type == WaKengCardsType.SHUANGSHUN || type == WaKengCardsType.SANSHUN)
            return handCards;
        //搜索单顺
        else
            return WaKengCardsType.getDanShun(handCards);
    };
    WaKengCardsType.getCardNum = function (card) {
        return Math.floor(card / 10);
    };
    WaKengCardsType.getCardByNum = function (cards, num, count) {
        var i;
        var outArr = [];
        for (i = 0; i < cards.length; i++) {
            var card = cards[i];
            if (Math.floor(card / 10) == num && outArr.indexOf(card) == -1) {
                count--;
                outArr.push(card);
                if (count <= 0)
                    break;
            }
        }
        return outArr;
    };
    WaKengCardsType.onSort = function (a, b) {
        if (a < b)
            return 1;
        else
            return -1;
    };
    WaKengCardsType.cards = [40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 150, 170, 190,
        41, 51, 61, 71, 81, 91, 101, 111, 121, 131, 151, 171, 191,
        42, 52, 62, 72, 82, 92, 102, 112, 122, 132, 152, 172, 192,
        43, 53, 63, 73, 83, 93, 103, 113, 123, 133, 153, 173, 193];
    WaKengCardsType.DAN = 1;
    WaKengCardsType.DUIZI = 2;
    WaKengCardsType.SANZHANG = 3;
    WaKengCardsType.ZHADAN = 4;
    WaKengCardsType.DANSHUN = 5;
    WaKengCardsType.SHUANGSHUN = 6;
    WaKengCardsType.SANSHUN = 7;
    return WaKengCardsType;
}());
//# sourceMappingURL=WaKengCardsType.js.map
/*
* @author seacole
* 游戏主逻辑;
*/
var GameLogic = /** @class */ (function () {
    function GameLogic() {
    }
    GameLogic.init = function () {
        this.selfData = new RoleData();
        this.userData = new UserData();
        this.userData.loadData();
    };
    return GameLogic;
}());
//# sourceMappingURL=GameLogic.js.map
/**
 * @author seacole
 * 数据存储类
 */
var DataStorage = /** @class */ (function () {
    function DataStorage() {
        this.name = 'save';
    }
    /**
     * 加载存储数据
     */
    DataStorage.prototype.loadData = function () {
        this.save = localStorage.getItem(this.name);
        try {
            this.save = JSON.parse(this.save);
        }
        catch (error) {
        }
        if (!this.save)
            this.save = {};
    };
    /**
     * 清空存储数据
     */
    DataStorage.prototype.clearData = function (exclude) {
        if (exclude === void 0) { exclude = null; }
        if (exclude) {
            for (var key in this.save) {
                if (exclude.indexOf(key) < 0) {
                    delete this.save[key];
                }
            }
        }
        else {
            this.save = {};
        }
        this.saveData();
    };
    /**
     * 保存存储数据
     */
    DataStorage.prototype.saveData = function () {
        try {
            var str = JSON.stringify(this.save);
            localStorage.setItem(this.name, str);
        }
        catch (error) {
        }
    };
    /**
     * 获取数据项
     * @param key
     * @param defaultValue  默认数据
     * @returns {*}
     */
    DataStorage.prototype.getItem = function (key, defaultValue) {
        if (defaultValue === void 0) { defaultValue = null; }
        var item = this.save[key];
        if (item === null) {
            item = defaultValue;
        }
        return item;
    };
    /**
     * 设置数据项
     * @param key
     * @param value
     * @param autoSave  是否自动保存(false)
     * @returns {*}     旧的数据
     */
    DataStorage.prototype.setItem = function (key, value, autoSave) {
        if (autoSave === void 0) { autoSave = false; }
        var oldValue = this.save[key];
        this.save[key] = value;
        if (autoSave) {
            this.saveData();
        }
        return oldValue;
    };
    /**
     * 改变数值
     * @param key
     * @param value
     * @param autoSave
     * @returns {*}
     */
    DataStorage.prototype.changeItem = function (key, value, autoSave) {
        if (autoSave === void 0) { autoSave = false; }
        var oldValue = this.save[key];
        this.save[key] = oldValue + value;
        if (autoSave) {
            this.saveData();
        }
        return oldValue;
    };
    return DataStorage;
}());
//# sourceMappingURL=DataStorage.js.map
/*
* 缓动管理类;
*/
var TweenManger = /** @class */ (function () {
    function TweenManger() {
    }
    /**
     * 对一堆要进行缓动的数组进行操作[{target:*,data:{scaleX:*.....},duraTion:1000,ease:*,call:{caller:this,handler:**},delay}]
     */
    TweenManger.TweenTO = function (arr) {
        var i = 0;
        var len = arr.length;
        for (; i < len; i++) {
            var ob = arr[i];
            if (!ob.hasOwnProperty('ease')) {
                ob.ease = null;
            }
            if (!ob.hasOwnProperty('delay')) {
                ob.delay = 0;
            }
            if (ob.hasOwnProperty('call')) {
                Laya.Tween.to(ob.target, ob.data, ob.duraTion, ob.ease, new Laya.Handler(ob.call.caller, ob.handler), ob.delay, true);
            }
            else {
                Laya.Tween.to(ob.target, ob.data, ob.duraTion, ob.ease, null, ob.delay, true);
            }
        }
    };
    return TweenManger;
}());
//# sourceMappingURL=TweenManger.js.map
/*
* @author seacole
*音效管理
*/
var SoundManager = /** @class */ (function () {
    function SoundManager() {
        //哪几个音乐是不循环的
        this._noLoop = [SoundConfig.MUSIC_FISH_ARRAY];
        this._language = 0;
    }
    Object.defineProperty(SoundManager, "instance", {
        get: function () {
            if (this._instance == undefined) {
                this._instance = new SoundManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SoundManager.prototype, "language", {
        set: function (type) {
            this._language = type;
        },
        enumerable: true,
        configurable: true
    });
    SoundManager.prototype.play = function (id, isSelf) {
        //  var cfg: any = GameConfig.cfgSound[id];
        // if (cfg) {
        //     //if (cfg.type == 1)
        //     //是否区分自己跟他人
        //     if(!cfg.bPlayWhenOtherPlayerPlay && !isSelf)
        //     {
        //        return;
        //     }
        //     if (cfg.type == "music")
        //     {
        if (isSelf === void 0) { isSelf = true; }
        //        //判断该背景音乐是否循环
        //        var loop = this._noLoop.indexOf(id) == -1?0:1;
        //         this.playMusic("res/"+cfg.path+".mp3",false,loop);
        //          Laya.SoundManager.setMusicVolume(cfg.volume);
        //     }
        //     else
        //         this.playEffect("res/"+cfg.path+".mp3",1,false,cfg.volume);
        // }
    };
    SoundManager.prototype.playBg = function (name, goon, loopNum) {
        if (name === void 0) { name = null; }
        if (goon === void 0) { goon = false; }
        if (loopNum === void 0) { loopNum = 0; }
        if (name) {
            var res;
            if (Native.instance.isNative)
                res = "res/audio/";
            else
                res = "res/audioweb/";
            if (BaseGameData.gameType == GameDef.GAME_TYPE.JINYUN_HZ_MJ || BaseGameData.gameType == GameDef.GAME_TYPE.JINYUN_GS_MJ || BaseGameData.gameType == GameDef.GAME_TYPE.JINYUN_MJ || BaseGameData.gameType == GameDef.GAME_TYPE.SHANGQIU_MJ || BaseGameData.gameType == GameDef.GAME_TYPE.SHANXI_MJ)
                res += "mj/";
            else if (BaseGameData.gameType == GameDef.GAME_TYPE.WAKENG)
                res += "poker/";
            else if (BaseGameData.gameType == GameDef.GAME_TYPE.GUANPAI)
                res += "guanpai/";
            else if (BaseGameData.gameType == GameDef.GAME_TYPE.SHISANSHUI)
                res += "shisanshui/";
            else if (BaseGameData.gameType == GameDef.GAME_TYPE.BAZHANG)
                res += "bazhang/";
            else if (!BaseGameData.gameType)
                res += "menu/";
            res += "bg/" + GameConfig.cfgAudio[name];
            if (!Native.instance.isNative)
                res = res.replace(".ogg", ".mp3");
            this.playMusic(res, goon, loopNum);
        }
        else
            this.playMusic(null, goon, loopNum);
        Laya.SoundManager.setMusicVolume(SoundManager.instance.musicVolume);
    };
    /**
     * 播放音乐
     */
    SoundManager.prototype.playMusic = function (res, goon, loopNum) {
        if (res === void 0) { res = null; }
        if (goon === void 0) { goon = false; }
        if (loopNum === void 0) { loopNum = 0; }
        if (this._musicRes == res)
            return;
        this._oldMusicRes = this._musicRes;
        if (!goon)
            this._musicRes = res;
        this._musicPlaying = true;
        if (this.musicMute)
            return;
        this.stopMusic(true);
        if (!this._musicRes)
            return;
        log("playMusic");
        if (loopNum == 0) {
            Laya.SoundManager.playMusic(this._musicRes, loopNum);
        }
        else {
            Laya.SoundManager.playMusic(this._musicRes, loopNum, new laya.utils.Handler(this, this.playMusic, [this._oldMusicRes, false, 0]));
        }
        Laya.timer.clear(this, this.tweenMusicVolume);
        Laya.SoundManager.setMusicVolume(SoundManager.instance.musicVolume);
    };
    /**
     * 关闭音乐
     */
    SoundManager.prototype.stopMusic = function (mute) {
        if (mute === void 0) { mute = false; }
        log("stopMusic");
        Laya.SoundManager.setMusicVolume(0);
        if (!mute) {
            this._musicRes = null;
            this._musicPlaying = false;
        }
        Laya.SoundManager.stopMusic();
    };
    /**
     * 切换音乐开关
     */
    SoundManager.prototype.switchMusic = function () {
        this.musicMute = !this.musicMute;
        if (this._musicRes) {
            if (this.musicMute) {
                this.stopMusic(true);
            }
            else {
                if (this._musicPlaying)
                    this.playMusic(null, true);
            }
        }
    };
    Object.defineProperty(SoundManager.prototype, "musicMute", {
        /**
         * 获取音乐开关状态 true表示关
         */
        get: function () {
            var mm = localStorage.getItem('musicMute_2');
            return mm ? mm == '1' : false;
        },
        /**
         * 设置音乐开关状态 true表示关
         */
        set: function (value) {
            localStorage.setItem('musicMute_2', value ? '1' : '0');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 播放音效
     */
    // private playEffect(res: string = null, loop: number = 1, musicConflict: boolean = false,volume:number = 1): void {
    //     if (res) {
    //         this._effectRes = res;
    //     }
    //     if (this.effectMute) {
    //         return;
    //     }
    //     if (musicConflict) {
    //         Laya.SoundManager.setMusicVolume(0);
    //         Laya.timer.clear(this,this.tweenMusicVolume);
    //         this._effectChannel = Laya.SoundManager.playSound(this._effectRes, loop, Laya.Handler.create(this, () => {
    //             Laya.timer.loop(50,this,this.tweenMusicVolume);
    //         }));
    //     }
    //     else
    //     {
    //         this._effectChannel = Laya.SoundManager.playSound(this._effectRes, loop);
    //         if(this._effectChannel)
    //             this._effectChannel.volume = volume;
    //     }            
    // }
    /**
     * 播放音效
     * @param name 配置中的name
     * @param sex 性别 默认男性
     * @param loop 播放次数 默认1次
     * @param musicConflict 是否和音乐冲突 默认false
     * @param volume 音量 默认1
     * @param isPublic 是否是公用资源 默认false
     */
    SoundManager.prototype.playEffect = function (name, sex, loop, musicConflict, volume, isPublic) {
        if (name === void 0) { name = null; }
        if (sex === void 0) { sex = 3; }
        if (loop === void 0) { loop = 1; }
        if (musicConflict === void 0) { musicConflict = false; }
        if (volume === void 0) { volume = 1; }
        if (isPublic === void 0) { isPublic = false; }
        if (!GameConfig.cfgAudio[name])
            return;
        var sexUrl = "";
        // if (sex != 3)
        sexUrl = sex != 2 ? "male/" : "female/";
        if (Native.instance.isNative)
            this._effectRes = "res/audio/";
        else
            this._effectRes = "res/audioweb/";
        if (isPublic) {
            this._effectRes += "public/";
            this._effectRes += GameConfig.cfgAudio[name];
        }
        else {
            // if (BaseGameData.gameType == GameDef.GAME_TYPE.JINYUN_MJ)
            //     this._effectRes += "jinyun_mj/";
            // else if (BaseGameData.gameType == GameDef.GAME_TYPE.SHANXI_MJ)
            //     this._effectRes += "shanxi_mj/";
            // else if (BaseGameData.gameType == GameDef.GAME_TYPE.WAKENG)
            //     this._effectRes += "wakeng/";
            this._effectRes += GameDef.GAME_NAME[parseInt(BaseGameData.gameType) - 1] + "/" + this._language + "/" + sexUrl + GameConfig.cfgAudio[name];
        }
        if (!Native.instance.isNative)
            this._effectRes = this._effectRes.replace(".ogg", ".mp3");
        if (this.effectMute) {
            return;
        }
        this.playEffectNow(loop, musicConflict, volume);
    };
    SoundManager.prototype.playBtnEffect = function (type) {
        var url = ButtonSoundEffect.types[type];
        if (url) {
            if (Native.instance.isNative)
                this._effectRes = "res/audio/button/";
            else
                this._effectRes = "res/audioweb/button/";
            this._effectRes += url;
            if (!Native.instance.isNative)
                this._effectRes = this._effectRes.replace(".ogg", ".mp3");
            if (this.effectMute) {
                return;
            }
            this.playEffectNow();
        }
    };
    SoundManager.prototype.playEffectNow = function (loop, musicConflict, volume) {
        var _this = this;
        if (loop === void 0) { loop = 1; }
        if (musicConflict === void 0) { musicConflict = false; }
        if (volume === void 0) { volume = 1; }
        Laya.SoundManager.setSoundVolume(SoundManager.instance.soundVolume);
        if (musicConflict) {
            Laya.SoundManager.setMusicVolume(0);
            Laya.timer.clear(this, this.tweenMusicVolume);
            this._effectChannel = Laya.SoundManager.playSound(this._effectRes, loop, Laya.Handler.create(this, function () {
                Laya.timer.loop(50, _this, _this.tweenMusicVolume);
            }));
        }
        else {
            this._effectChannel = Laya.SoundManager.playSound(this._effectRes, loop);
            // if (this._effectChannel)
            //     this._effectChannel.volume = volume;
        }
    };
    SoundManager.prototype.tweenMusicVolume = function () {
        var volume = Laya.SoundManager.musicVolume;
        volume += 0.05;
        Laya.SoundManager.setMusicVolume(volume);
        if (volume >= SoundManager.instance.musicVolume) {
            Laya.SoundManager.setMusicVolume(SoundManager.instance.musicVolume);
            Laya.timer.clear(this, this.tweenMusicVolume);
        }
    };
    Object.defineProperty(SoundManager.prototype, "musicVolume", {
        get: function () {
            var mm = localStorage.getItem('musicVolume');
            return mm ? Number(mm) : 1;
        },
        set: function (value) {
            if (value <= 0) {
                SoundManager.instance.musicMute = true;
                SoundManager.instance.stopMusic(true);
            }
            else {
                SoundManager.instance.musicMute = false;
                if (Laya.SoundManager.musicVolume <= 0)
                    SoundManager.instance.playMusic(null, true);
            }
            Laya.SoundManager.setMusicVolume(value);
            localStorage.setItem('musicVolume', value + "");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SoundManager.prototype, "soundVolume", {
        get: function () {
            var mm = localStorage.getItem('soundVolume');
            return mm ? Number(mm) : 1;
        },
        set: function (value) {
            Laya.SoundManager.setSoundVolume(value);
            localStorage.setItem('soundVolume', value + "");
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 暂停音效
     */
    SoundManager.prototype.stopEffect = function () {
        Laya.SoundManager.stopAllSound();
        /*if (this._effectChannel) {
            this._effectChannel.stop();
        }
        */
    };
    /**
     * 设置音效开关状态 true表示关
     */
    SoundManager.prototype.switchEffect = function () {
        this.effectMute = !this.effectMute;
    };
    Object.defineProperty(SoundManager.prototype, "effectMute", {
        /**
        * 获取音效开关状态 true表示关
        */
        get: function () {
            var mm = localStorage.getItem('effectMute_2');
            return mm ? mm == '1' : false;
        },
        /**
        * 获取音效开关状态 true表示关
        */
        set: function (value) {
            localStorage.setItem('effectMute_2', value ? '1' : '0');
        },
        enumerable: true,
        configurable: true
    });
    return SoundManager;
}());
//# sourceMappingURL=SoundManager.js.map
//骨骼动画管理类  
var SkeletonAniManager = /** @class */ (function () {
    function SkeletonAniManager() {
        this.skeletonAniList = [];
        this.skeletonAniList = [];
    }
    Object.defineProperty(SkeletonAniManager, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new SkeletonAniManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * @param target        //添加动画的父类
     * @param res           //资源路径
     * @param loop          //是否循环
     * @param delay         //延迟时间
     * @param pos           //位置
     * @param callback      //回调
     * @param nameOrIndex   //动画名字或者索引
     */
    SkeletonAniManager.prototype.playSkeletonAni = function (target, res, loop, delay, pos, callback, nameOrIndex) {
        var templet = new Laya.Templet();
        var paramarray = [templet, target, loop, delay, pos, callback, nameOrIndex];
        templet.on(Laya.Event.COMPLETE, this, this.parseComplete, paramarray);
        templet.on(Laya.Event.ERROR, this, this.onError);
        templet.loadAni(res);
    };
    SkeletonAniManager.prototype.onError = function () {
        console.log("parse error");
    };
    SkeletonAniManager.prototype.parseComplete = function (templet, target, loop, delay, pos, callback, nameOrIndex) {
        // let paramarray = [templet,target,loop,delay,pos,callback,nameOrIndex]
        // //创建第一个动画
        var skeleton0;
        //从动画模板创建动画播放对象
        skeleton0 = templet.buildArmature(0);
        skeleton0.x = pos.x;
        skeleton0.y = pos.y;
        if (nameOrIndex) {
            skeleton0.play(nameOrIndex, loop);
        }
        else {
            skeleton0.play(0, loop);
        }
        target.addChild(skeleton0);
        //let index = this.skeletonAniList.length
        if (delay > 0) {
            Laya.timer.once(delay * 1000, this, this.delayCallBack, [skeleton0, callback], false);
        }
        else {
            //骨骼动画只播放一次时的结束回调
            skeleton0.player.on(Laya.Event.STOPPED, this, this.delayCallBack, [skeleton0, callback]);
        }
        //骨骼动画重复播放每次都回调
        //skeleton0.player.on(Laya.Event.COMPLETE,this,this.onComplete);
    };
    SkeletonAniManager.prototype.delayCallBack = function (skeleton, callback) {
        var index = this.skeletonAniList.length;
        skeleton.removeSelf();
        skeleton.destroy();
        this.skeletonAniList.splice(index, 1);
        if (callback)
            callback();
    };
    SkeletonAniManager.prototype.clearAll = function () {
        Laya.timer.clearAll(this);
        for (var k in this.skeletonAniList) {
            var v = this.skeletonAniList[k];
            v.stop();
            if (v.parent) {
                v.removeSelf();
                v.destroy();
            }
        }
        this.skeletonAniList = [];
    };
    return SkeletonAniManager;
}());
//# sourceMappingURL=SkeletonAniManager.js.map
/*
* @author seacole
 * 玩家集
*/
var RoleManager = /** @class */ (function () {
    function RoleManager() {
    }
    RoleManager.addRoleByInfos = function (data) {
        if (data) {
            for (var i = 0; i < data.length; i++) {
                RoleManager.dic[data[i].uid] = data[i];
                RoleManager.dic[data[i].uid].nickname = data[i].nk || data[i].nickname;
            }
        }
    };
    RoleManager.getRole = function (uid) {
        if (RoleManager.dic[uid])
            return RoleManager.dic[uid];
        return null;
    };
    // "sex":"1","avatar":"","uid":363686,"nk":"zhc134"
    RoleManager.dic = {};
    return RoleManager;
}());
//# sourceMappingURL=RoleManager.js.map
/*
* @author seacole
* 非实时录音管理
*/
var RecordManager = /** @class */ (function () {
    function RecordManager() {
    }
    Object.defineProperty(RecordManager, "instance", {
        get: function () {
            if (this._instance == undefined) {
                this._instance = new RecordManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 开始录音
     * @param callback
     */
    RecordManager.prototype.startRecord = function (callback) {
        if (Native.instance.isNative) {
        }
        else {
            if (Native.instance.isWeiXin)
                WxWeb.instance.startRecord(callback);
        }
    };
    /**
     * 停止录音
     * @param needSend
     * @param seatid
     * @param nickname
     * @param time
     */
    RecordManager.prototype.stopRecord = function (needSend, seatid, nickname, time) {
        if (time === void 0) { time = 0; }
        if (Native.instance.isNative) {
        }
        else {
            if (Native.instance.isWeiXin)
                WxWeb.instance.stopRecord(needSend, seatid, nickname, time);
        }
    };
    /**
     * 下载录音
     * @param serverId
     * @param seatid
     * @param nickname
     * @param time
     */
    RecordManager.prototype.downloadVoice = function (serverId, seatid, nickname, time) {
        if (seatid === void 0) { seatid = 0; }
        if (nickname === void 0) { nickname = ""; }
        if (time === void 0) { time = 0; }
        if (Native.instance.isNative) {
        }
        else {
            if (Native.instance.isWeiXin)
                WxWeb.instance.downloadVoice(serverId, seatid, nickname, time);
        }
    };
    /**
     * 清除录音
     */
    RecordManager.prototype.clearRecord = function () {
        if (Native.instance.isNative) {
        }
        else {
            if (Native.instance.isWeiXin)
                WxWeb.instance.clearRecord();
        }
    };
    return RecordManager;
}());
//# sourceMappingURL=RecordManager.js.map
var PlayerManager = /** @class */ (function () {
    function PlayerManager() {
        this._players = {};
    }
    Object.defineProperty(PlayerManager, "instance", {
        get: function () {
            if (this._instance == undefined) {
                this._instance = new PlayerManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    PlayerManager.prototype.registerClass = function (playerClass) {
        this._playerClass = playerClass;
    };
    PlayerManager.prototype.addPlayerView = function (seatid, playerInfo) {
        if (!this._players) {
            this._players = {};
        }
        if (this._players[seatid]) {
            return this._players[seatid];
        }
        this._players[seatid] = new this._playerClass(playerInfo);
        return this._players[seatid];
    };
    PlayerManager.prototype.changeSeatToPlayer = function (uid, seatid, callback) {
        if (!Utils.checkSeatid(seatid))
            return;
        var playerInfo = BaseGameData.getPlayerDataByUid(uid);
        playerInfo.dir = Utils.getDir(seatid);
        this._players[seatid].status = PlayerInGameUI.STATUS_ALREADY_SIT;
        this._players[seatid].data = playerInfo;
        // this._players[seatid].changeToPlayer()
    };
    PlayerManager.prototype.changeToSeat = function (seatid) {
        if (this._players && this._players[seatid]) {
            this._players[seatid].status = PlayerInGameUI.STATUS_CAN_SIT;
        }
    };
    PlayerManager.prototype.changeToEmpty = function (seatid) {
        if (this._players && this._players[seatid]) {
            this._players[seatid].status = PlayerInGameUI.STATUS_EMPTY;
        }
    };
    PlayerManager.prototype.changeToReady = function (seatid) {
        if (this._players && this._players[seatid]) {
            this._players[seatid].changeToReady();
        }
    };
    PlayerManager.prototype.movePlayer = function (ani) {
        for (var i = 1; i <= BaseGameData.maxPlayer; i++) {
            var p = this._players[i];
            if (!!p) {
            }
            else {
                return;
            }
            var pos = Utils.currentPos(i);
            Utils.injectProp(this._players[i], { left: NaN, right: NaN, top: NaN, bottom: NaN, x: NaN, y: NaN, centerX: NaN, centerY: NaN });
            if (ani) {
                console.info(BaseGameData.tablelayout.SEAT_LAYOUT[BaseGameData.maxPlayer - 1][pos - 1]);
                Laya.Tween.to(this._players[i], BaseGameData.tablelayout.SEAT_LAYOUT[BaseGameData.maxPlayer - 1][pos - 1], 500);
            }
            else {
                console.info(BaseGameData.tablelayout.SEAT_LAYOUT[BaseGameData.maxPlayer - 1][pos - 1]);
                Utils.injectProp(this._players[i], BaseGameData.tablelayout.SEAT_LAYOUT[BaseGameData.maxPlayer - 1][pos - 1]);
            }
            // this._players[i].pos(BaseGameData.tablelayout.SEAT_LAYOUT[BaseGameData.maxPlayer-1][pos-1].x,BaseGameData.tablelayout.SEAT_LAYOUT[BaseGameData.maxPlayer-1][pos-1].y)
            if (Utils.checkSeatid(BaseGameData.selfSeatid) && !BaseGameData.getPlayerDataBySeatid(i)) {
                this._players[i].status = PlayerInGameUI.STATUS_EMPTY;
            }
        }
        // self:setBankPos()
    };
    PlayerManager.prototype.moveToGameStart = function (ani) {
        for (var k in this._players) {
            var v = this._players[k];
            Utils.injectProp(v, { left: NaN, right: NaN, top: NaN, bottom: NaN, x: NaN, y: NaN, centerX: NaN, centerY: NaN });
            Utils.injectProp(v, BaseGameData.tablelayout.GAME_START_SEAT_LAYOUT[BaseGameData.maxPlayer - 1][v._dir - 1]);
        }
    };
    PlayerManager.prototype.removeAllPlayer = function () {
        for (var k in this._players) {
            var v = this._players[k];
            v.removeListener();
            v.removeSelf();
            v = null;
        }
        this._players = {};
    };
    PlayerManager.prototype.playChat = function (seatid, msg) {
        this._players[seatid].playChat(msg);
    };
    //设置庄的图片
    PlayerManager.prototype.setMasterSkin = function (seatid, masterCount) {
        var skin = "table/master" + masterCount + ".png";
        this._players[seatid]._imgMaster.skin = skin;
    };
    PlayerManager.prototype.getPlayerByDir = function (dir) {
        for (var k in this._players) {
            var v = this._players[k];
            if (dir == v._dir)
                return v;
        }
        return null;
    };
    return PlayerManager;
}());
//# sourceMappingURL=PlayerManager.js.map
/*
* @author seacole
*遮罩管理
*/
var MaskManager = /** @class */ (function () {
    function MaskManager() {
    }
    MaskManager.prototype.init = function () {
        this._maskPool = ObjectPool.getInstance("PanelMask", Laya.ClassUtils.getClass(PanelMask));
        this._masks = [];
        Dispatcher.on(EventNames.REMOVE_MASK, this, this.onRemoveMask);
    };
    Object.defineProperty(MaskManager, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new MaskManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 添加遮罩
     */
    MaskManager.prototype.addMask = function () {
        var panelMask = this._maskPool.borrowObject();
        panelMask.reset();
        this._masks.push(panelMask);
        return panelMask;
    };
    /**
     * 移除遮罩
     */
    MaskManager.prototype.onRemoveMask = function (panelMask) {
        this._maskPool.returnObject(panelMask);
        if (panelMask.parent)
            panelMask.parent.removeChild(panelMask);
        var idx = this._masks.indexOf(panelMask);
        if (idx != -1)
            this._masks.splice(idx, 1);
    };
    /**
     *移除所有遮罩
     */
    MaskManager.prototype.clearAll = function () {
        if (!this._masks)
            this._masks = [];
        while (this._masks.length) {
            this.onRemoveMask(this._masks[0]);
        }
    };
    return MaskManager;
}());
//# sourceMappingURL=MaskManager.js.map
/*
* @author seacole
*登录管理
*/
var LoginManager = /** @class */ (function () {
    function LoginManager() {
        this._loginData = { uid: 0, token: '' };
    }
    Object.defineProperty(LoginManager, "instance", {
        get: function () {
            if (this._instance == undefined) {
                this._instance = new LoginManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    LoginManager.prototype.appWxLogin = function () {
        NativeHelper.instance.wxLogin(function (code) {
            if (code.length > 0) {
                LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY);
                webService.loginByWxFromWechat(code, this.onVerifyResponse.bind(this));
            }
            else {
                HintCtrl.instance.show("微信登录失败");
            }
        }.bind(this));
    };
    //有序执行登录
    LoginManager.prototype.orderedLogin = function (isFirstEnter) {
        if (isFirstEnter === void 0) { isFirstEnter = false; }
        var isAutoLogin = true;
        var params = Native.instance.getUrlParams();
        if (params.hasOwnProperty("pid"))
            GameConfig.pid = params.pid;
        //if中为测试代码
        if (isFirstEnter && params.id && params.password) {
            if (params.hasOwnProperty("roomcode"))
                this._roomcode = params.roomcode;
            this.passportLogin(params.id, params.password);
        }
        else {
            var flag;
            if (isFirstEnter) {
                if (params.hasOwnProperty("roomcode"))
                    this._roomcode = params.roomcode;
                flag = this.checkToken();
                if (!flag)
                    flag = this.checkIsWxLoginFromWechat();
                if (!flag) {
                    if (Native.instance.isWeiXin)
                        Laya.Browser.window.location.href = webService.getWxLoginUrl();
                    else
                        isAutoLogin = false;
                }
            }
            else {
                if (Native.instance.isWeiXin)
                    Laya.Browser.window.location.href = webService.getWxLoginUrl();
                else
                    isAutoLogin = false;
            }
        }
        if (isFirstEnter)
            this.getWxConfig();
        else
            GameLogic.userData.clearData();
        return isAutoLogin;
    };
    /**
     * 注册
     */
    LoginManager.prototype.regist = function (uname, upwd, nickname) {
        var _this = this;
        webService.regist(uname, upwd, nickname, function (response) {
            if (response.code == 0) {
                response.nickname = nickname;
                _this.onVerifyResponse(response);
            }
            else
                HintCtrl.instance.show("regist error. code:" + response.code);
        });
    };
    /**
    * 通行证登录
    */
    LoginManager.prototype.passportLogin = function (uname, upwd) {
        var _this = this;
        webService.passportLogin(uname, upwd, function (response) {
            if (response.code == 0) {
                _this.onVerifyResponse(response);
            }
            else
                AlertInGameCtrl.instance.show(GameConfig.language.account_login_fail, null, 0, false);
            log("passport login error. code:" + response.code);
        });
    };
    /**
    * 游客登录
    */
    LoginManager.prototype.touristLogin = function () {
        var _this = this;
        webService.touristLogin(webService.uuid, function (response) {
            if (response.code == 0) {
                _this.onVerifyResponse(response);
            }
            else
                AlertInGameCtrl.instance.show(GameConfig.language.guest_fail, null, 0, false);
            log("passport login error. code:" + response.code);
        });
    };
    /**
    * 检查是否有token 暂时没用
    */
    LoginManager.prototype.checkToken = function () {
        var data = this._loginData;
        console.log('checkToken: ' + JSON.stringify(GameLogic.userData));
        data.uid = GameLogic.userData.getItem('uid');
        data.token = GameLogic.userData.getItem('token');
        data.nickname = GameLogic.userData.getItem('nickname');
        data.sex = GameLogic.userData.getItem('sex');
        data.avatar = GameLogic.userData.getItem('avatar');
        data.openid = GameLogic.userData.getItem('openid');
        if (data.token && data.uid) {
            Laya.timer.callLater(this, this.loginSucc); //避免连续跳转不同场景会出现加载短暂黑屏
            // server.setInfo(this._loginData.uid, this._loginData.token);
            // GameConfig.setServerUrl("10.10.10.100:51002;");
            // server.code = "90001";
            // AppControl.getInstance().showPage(WaKengPage);
            return true;
        }
        return false;
    };
    LoginManager.prototype.checkIsWxLoginFromWechat = function () {
        var params = Native.instance.getUrlParams();
        var code;
        if (params.hasOwnProperty("code") && params.hasOwnProperty("state") && params.state == "wx") {
            code = params.code;
            if (params.hasOwnProperty("roomcode"))
                this._roomcode = params.roomcode;
        }
        if (code && code != "null") {
            log("try to login by wechat.code:" + code);
            webService.loginByWxFromWechat(code, this.onVerifyResponse.bind(this));
            return true;
        }
        else {
            return false;
        }
    };
    LoginManager.prototype.getWxConfig = function () {
        webService.getWxConfig(WxWeb.instance.wxConfig);
    };
    /**
     * web返回
     */
    LoginManager.prototype.onVerifyResponse = function (response) {
        // AlertCtrl.instance.show(JSON.stringify(response));
        LoadingUI.instance.hide();
        if (response.code == 0) {
            this._loginData = response;
            GameLogic.userData.setItem('uid', this._loginData.uid);
            GameLogic.userData.setItem('nickname', this._loginData.nickname);
            GameLogic.userData.setItem('sex', this._loginData.sex);
            GameLogic.userData.setItem('avatar', this._loginData.avatar);
            GameLogic.userData.setItem('token', this._loginData.token);
            GameLogic.userData.setItem('openid', this._loginData.openid, true);
            this.loginSucc();
        }
        else {
            HintCtrl.instance.show("login error. code:" + response.code);
            if (!AppControl.getInstance().currentPage)
                AppControl.getInstance().showPage(LoginPage);
        }
    };
    /**
     * 设置登录信息后跳转
     */
    LoginManager.prototype.loginSucc = function () {
        //测试代码
        // var params: any = Native.instance.getUrlParams();
        // if (params.hasOwnProperty("roomcode"))
        //     this.roomcode = params.roomcode;
        //-------
        NativeHelper.instance.voiceSetUserInfo(this._loginData.uid + "");
        this.checkJoinTable();
    };
    Object.defineProperty(LoginManager.prototype, "roomcode", {
        set: function (value) {
            this._roomcode = value;
        },
        enumerable: true,
        configurable: true
    });
    LoginManager.prototype.checkJoinTable = function () {
        server.setInfo(this._loginData.uid, this._loginData.token, this._loginData.openid);
        // this.roomcode = "931362";
        if (this._roomcode) {
            webService.joinTable(this._roomcode, function (response) {
                if (response.code == 0) {
                    GameConfig.setServerUrl(response.ip);
                    GameConfig.joinTable(response, true);
                }
                else {
                    if (!AppControl.getInstance().currentPage || AppControl.getInstance().currentPage instanceof LoginPage)
                        AppControl.getInstance().showPage(HallPage, { room_code: LoginManager.instance._roomcode });
                    else
                        AlertInGameCtrl.instance.show(GameConfig.language.join_table_fail, null, 0, false); // + " code:" + response.code
                }
            });
        }
        else
            //旧版大厅
            // AppControl.getInstance().showPage(MenuPage);
            // 新版大厅
            AppControl.getInstance().showPage(HallPage);
        // Ajax.callNet("http://localhost/test.php", {"cid":1,"channel":"tongjiang","os":"64"}, "POST", null, function (data) {
        //         console.info(data)
        //     })
    };
    return LoginManager;
}());
//# sourceMappingURL=LoginManager.js.map
/*
* @author seacole
* LineRenderer管理类;
*/
var LineRendererManager = /** @class */ (function () {
    function LineRendererManager() {
    }
    LineRendererManager.prototype.init = function () {
        this._lineRendersPools = new Object();
        this._lineRenderers = [];
        Dispatcher.on(EventNames.REMOVE_LINE_RENDERER, this, this.onRemoveLineRenderer);
    };
    Object.defineProperty(LineRendererManager, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new LineRendererManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 添加LineRenderer
     */
    LineRendererManager.prototype.addLineRenderer = function (effectData) {
        if (!this._lineRendersPools[effectData.index]) {
            var pool = ObjectPool.getInstance("LineRenderer" + effectData.index, Laya.ClassUtils.getClass(LineRenderer));
            this._lineRendersPools[effectData.index] = pool;
        }
        var lineRenderer = this._lineRendersPools[effectData.index].borrowObject();
        lineRenderer.init(effectData);
        this._lineRenderers.push(lineRenderer);
        return lineRenderer;
    };
    /**
     * 移除LineRenderer
     */
    LineRendererManager.prototype.onRemoveLineRenderer = function (lineRenderer) {
        this._lineRendersPools[lineRenderer.index].returnObject(lineRenderer);
        if (lineRenderer.parent)
            lineRenderer.parent.removeChild(lineRenderer);
        var idx = this._lineRenderers.indexOf(lineRenderer);
        if (idx != -1)
            this._lineRenderers.splice(idx, 1);
    };
    /**
     *移除所有LineRenderer
     */
    LineRendererManager.prototype.clearAll = function () {
        if (!this._lineRenderers)
            this._lineRenderers = [];
        while (this._lineRenderers.length) {
            this.onRemoveLineRenderer(this._lineRenderers[0]);
        }
    };
    return LineRendererManager;
}());
//# sourceMappingURL=LineRendererManager.js.map
/*
* @author seacole
* name;
*/
var FontManager = /** @class */ (function () {
    function FontManager() {
    }
    Object.defineProperty(FontManager, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new FontManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    FontManager.prototype.init = function () {
        this._fontPools = new Object();
        this._fonts = [];
        Dispatcher.on(EventNames.REMOVE_FONT, this, this.onRemoveFont);
    };
    /**
    *添加美术字
    */
    FontManager.prototype.addFont = function (fontData) {
        if (!this._fontPools[fontData.id]) {
            var pool;
            if (fontData.type == FontData.TYPE_NORMAL)
                pool = ObjectPool.getInstance("BPFont" + fontData.id, Laya.ClassUtils.getClass(Font1));
            else
                pool = ObjectPool.getInstance("BPFont" + fontData.id, Laya.ClassUtils.getClass(TimerFont));
            this._fontPools[fontData.id] = pool;
        }
        var bpFont = this._fontPools[fontData.id].borrowObject();
        bpFont.setInfo(fontData);
        this._fonts.push(bpFont);
        return bpFont;
    };
    /**
     *移除美术字
     */
    FontManager.prototype.onRemoveFont = function (bpFont) {
        this._fontPools[bpFont.id].returnObject(bpFont);
        bpFont.removeSelf();
        var idx = this._fonts.indexOf(bpFont);
        if (idx != -1)
            this._fonts.splice(idx, 1);
    };
    /**
    *移除所有美术字
    */
    FontManager.prototype.clearAll = function () {
        if (!this._fonts)
            this._fonts = [];
        while (this._fonts.length) {
            this.onRemoveFont(this._fonts[0]);
        }
    };
    return FontManager;
}());
//# sourceMappingURL=FontManager.js.map
/*
* hwp;
*/
var FontBitmapManger = /** @class */ (function () {
    function FontBitmapManger() {
    }
    Object.defineProperty(FontBitmapManger, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new FontBitmapManger();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    //需要加载的所有位图字资源
    FontBitmapManger.prototype.loadFontArr = function () {
        //FontBitmapData.instance.arrFont = arr;
        FontBitmapData.instance.arrFont = ResourceConfig.BITMAP_FONT_TOTAL;
        this.loadAction();
    };
    //逐个加载
    FontBitmapManger.prototype.loadAction = function () {
        var len = FontBitmapData.instance.arrFont.length;
        if (len == 0) {
            log('FontBitmapManer------位图字注册完成');
            Dispatcher.dispatch(EventNames.FONT_BITMMAP);
            return;
        }
        var fontName = FontBitmapData.instance.arrFont.pop();
        if (fontName == '') {
            this.loadAction();
            return;
        }
        var mBitmapFont = new Laya.BitmapFont();
        //外部保证fnt与png文件同名
        mBitmapFont.loadFont("res/bitmapFont/" + fontName + ".fnt", new Laya.Handler(this, this.onLoaded, [fontName, mBitmapFont]));
    };
    //注册字体样式
    FontBitmapManger.prototype.onLoaded = function (fontName, mBitmapFont) {
        //注册样式
        // mBitmapFont.autoScaleSize = true;
        Laya.Text.registerBitmapFont(fontName, mBitmapFont);
        //保存样式名称
        FontBitmapData.instance.addFontStyle(fontName);
        //继续加载样式
        this.loadAction();
    };
    return FontBitmapManger;
}());
//# sourceMappingURL=FontBitmapManger.js.map
/*
* @author seacole
* 特效管理类;
*/
var EffectManager = /** @class */ (function () {
    function EffectManager() {
    }
    Object.defineProperty(EffectManager, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new EffectManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    EffectManager.prototype.init = function () {
        this._effectPools = new Object();
        this._effects = [];
        Dispatcher.on(EventNames.REMOVE_EFFECT, this, this.onRemoveEffect);
    };
    /**
    *添加特效
    */
    EffectManager.prototype.setEfect = function (effectData, isReturnEffect) {
        if (isReturnEffect === void 0) { isReturnEffect = false; }
        if (!this._effectPools[effectData.index]) {
            var pool;
            if (effectData.type == EffectConfig.EFFECT_TYPE_SEQUENCE)
                pool = ObjectPool.getInstance("SequenceEffect" + effectData.index, Laya.ClassUtils.getClass(SequenceEffect));
            else if (effectData.type == EffectConfig.EFFECT_TYPE_PARTICLE)
                pool = ObjectPool.getInstance("ParticleEffect" + effectData.index, Laya.ClassUtils.getClass(ParticleEffect));
            else if (effectData.type == EffectConfig.EFFECT_TYPE_ANIMATION)
                // if (effectData.id == EffectConfig.EFFECT_NORMAL_UPGRADE) {
                //     pool = ObjectPool.getInstance("VipUpgradeEffect" + effectData.index, Laya.ClassUtils.getClass(VipUpgradeEffect));
                // }
                // else {
                pool = ObjectPool.getInstance("AnimationEffect" + effectData.index, Laya.ClassUtils.getClass(AnimationEffect));
            // }
            else {
                console.warn("特效配置不对，id:" + effectData.index + "type:" + effectData.type);
                return new Laya.Sprite();
            }
            this._effectPools[effectData.index] = pool;
        }
        var effect = this._effectPools[effectData.index].borrowObject();
        this._effects.push(effect);
        if (isReturnEffect)
            return effect;
        else
            return effect.show(effectData);
    };
    /**
     *移除特效
     */
    EffectManager.prototype.onRemoveEffect = function (effect) {
        this._effectPools[effect.index].returnObject(effect);
        effect.removeSelf();
        var idx = this._effects.indexOf(effect);
        if (idx != -1)
            this._effects.splice(idx, 1);
    };
    /**
    *移除所有特效
    */
    EffectManager.prototype.clearAll = function () {
        if (!this._effects)
            this._effects = [];
        while (this._effects.length) {
            this.onRemoveEffect(this._effects[0]);
        }
    };
    /**
     * 增加特效
     * @param container 父容器
     * @param id 特效id
     * @param text 特效要添加的文字内容
     * @param fontStyle 文字的样式
     */
    EffectManager.prototype.addEffect = function (container, id, text, fontStyle, posX, posY, toPosX, toPosY, isReturnEffect) {
        if (text === void 0) { text = ''; }
        if (fontStyle === void 0) { fontStyle = ''; }
        if (posX === void 0) { posX = -1; }
        if (posY === void 0) { posY = -1; }
        if (toPosX === void 0) { toPosX = -1; }
        if (toPosY === void 0) { toPosY = -1; }
        if (isReturnEffect === void 0) { isReturnEffect = false; }
        var effectData = new EffectData();
        effectData.setInfo(id, text, fontStyle, posX, posY, toPosX, toPosY);
        var sp = this.setEfect(effectData, isReturnEffect);
        if (isReturnEffect)
            return [sp, effectData];
        else {
            container.addChild(sp);
            return sp;
        }
    };
    return EffectManager;
}());
//# sourceMappingURL=EffectManager.js.map
/*
* @author seacole
*公告管理
*/
var AnnounceManager = /** @class */ (function () {
    function AnnounceManager() {
    }
    Object.defineProperty(AnnounceManager, "instance", {
        get: function () {
            if (this._instance == undefined) {
                this._instance = new AnnounceManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    AnnounceManager.prototype.start = function () {
        if (!GameConfig.IS_BANSHU) {
            Laya.timer.loop(60 * 1000 * 5, this, this.onTimer);
            this.onTimer();
        }
    };
    AnnounceManager.prototype.stop = function () {
        MarqueeText.instance.clear();
        Laya.timer.clear(this, this.onTimer);
    };
    AnnounceManager.prototype.onTimer = function () {
        webService.getAnnounce(function (response) {
            if (response.code == 0) {
                for (var i = 0; i < response.times; i++) {
                    MarqueeText.instance.show(response.tips);
                }
            }
        });
    };
    return AnnounceManager;
}());
//# sourceMappingURL=AnnounceManager.js.map
var AnimationManager = /** @class */ (function () {
    function AnimationManager() {
        this.animation_queue_ = [];
        this.animation_queue_ = [];
        this.state = AnimationManager.STATE_IDLE;
    }
    Object.defineProperty(AnimationManager, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new AnimationManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    AnimationManager.prototype.animationOver = function () {
        var animation = this.animation_queue_[0];
        if (!animation) {
            this.state = AnimationManager.STATE_IDLE;
            return;
        }
        this.animation_queue_.shift();
        this.checkQueue();
    };
    AnimationManager.prototype.clearQueue = function () {
        for (var k in this.animation_queue_) {
            var animation = this.animation_queue_[k];
            animation = null;
        }
        this.animation_queue_ = [];
    };
    AnimationManager.prototype.endAnimations = function () {
        if (this.state == AnimationManager.STATE_IDLE) {
            return;
        }
        var animation = this.animation_queue_[0];
        if (!animation) {
            this.state = AnimationManager.STATE_IDLE;
            return;
        }
        if (animation.clearFunc) {
            animation.clearFunc();
        }
        this.clearQueue();
        this.state = AnimationManager.STATE_IDLE;
    };
    //动画的方法和清除方法
    AnimationManager.prototype.addAnimation = function (animFunc, clearFunc) {
        var animation = { animFunc: animFunc, clearFunc: clearFunc };
        this.animation_queue_.push(animation);
        if (this.state == AnimationManager.STATE_BUSY) {
            return;
        }
        this.checkQueue();
    };
    AnimationManager.prototype.checkQueue = function () {
        var animation = this.animation_queue_[0];
        if (!animation) {
            this.state = AnimationManager.STATE_IDLE;
            return;
        }
        this.state = AnimationManager.STATE_BUSY;
        animation.animFunc();
    };
    AnimationManager.STATE_IDLE = 1;
    AnimationManager.STATE_BUSY = 2;
    return AnimationManager;
}());
//# sourceMappingURL=AnimationManager.js.map
var AniEffectManager = /** @class */ (function () {
    function AniEffectManager() {
        this.aniList = [];
        this.aniList = [];
    }
    Object.defineProperty(AniEffectManager, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new AniEffectManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    AniEffectManager.prototype.playEffectOnce = function (target, res, delay, pos, callback) {
        var ani = new Laya.Animation();
        ani.loadAnimation(res);
        ani.play(1, false);
        ani.zOrder = GameZorder.Ani + 2;
        var index = this.aniList.length;
        Utils.injectProp(ani, pos);
        target.addChild(ani);
        this.aniList.push(ani);
        Laya.timer.once(delay, this, function () {
            ani.stop();
            ani.removeSelf();
            this.aniList.splice(index, 1);
            if (callback)
                callback();
        });
    };
    AniEffectManager.prototype.clearAll = function () {
        Laya.timer.clearAll(this);
        for (var k in this.aniList) {
            var v = this.aniList[k];
            v.stop();
            if (v.parent) {
                v.removeSelf();
            }
        }
        this.aniList = [];
    };
    return AniEffectManager;
}());
//# sourceMappingURL=AniEffectManager.js.map
//# sourceMappingURL=ICtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var component;
(function (component) {
    /**
     * 基础按钮控件，实现click监听事件
     */
    var Button = laya.ui.Button;
    var BaseButton = /** @class */ (function (_super) {
        __extends(BaseButton, _super);
        function BaseButton(skin, label) {
            if (skin === void 0) { skin = null; }
            if (label === void 0) { label = ""; }
            var _this = _super.call(this, skin, label) || this;
            /**
            * 音效类型
            */
            _this.soundType = 1;
            _this.on(Laya.Event.CLICK, _this, _this.onTouch);
            _this.on(Laya.Event.DOUBLE_CLICK, _this, _this.onTouch);
            return _this;
        }
        BaseButton.prototype.onTouch = function (e) {
            if (e) {
                switch (e.type) {
                    case Laya.Event.CLICK:
                    case Laya.Event.DOUBLE_CLICK:
                        SoundManager.instance.playBtnEffect(this.soundType);
                        break;
                }
            }
        };
        return BaseButton;
    }(Button));
    component.BaseButton = BaseButton;
})(component || (component = {}));
//# sourceMappingURL=BaseButton.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var component;
(function (component) {
    var BasePlayer = /** @class */ (function (_super) {
        __extends(BasePlayer, _super);
        function BasePlayer(p) {
            var _this = _super.call(this) || this;
            _this.init(p);
            return _this;
        }
        BasePlayer.prototype.init = function (p) {
            this._seatid = p.seatid;
            this._dir = p.dir || 1;
            this.name = "PlayerInGameUI" + this._seatid;
            this.view = new ui.components.table.PlayerViewUI();
            this.addChild(this.view);
            this.view._btnSit.on(Laya.Event.CLICK, this, this.onSitTouch);
            this._head = new HeadUI();
            this._head.setLabName({ visible: false });
            this._head.setImageBounds(86, 86);
            this._head.x = 8;
            this._head.y = 2;
            this._head._labName.fontSize = 20;
            this.view._box.addChildAt(this._head, 1);
            this._chatContent = new ChatContent();
            this._chatContent.visible = false;
            this.view._box.addChild(this._chatContent);
            this._chatContent.pos(-70, -7);
            this.view._box.on(Laya.Event.CLICK, this, this.onPlayerInfo);
            if (Native.instance.isNative) {
                this._chatRecord = new ui.components.chat.ChatRecordUI();
                this._chatRecord.y = 73;
                this._chatRecord.visible = false;
                this.view._box.addChild(this._chatRecord);
                this._chatRecordCh = new Laya.Image("table/table_chat_record.png");
                this._chatRecordCh.y = 73;
                this.view._box.addChild(this._chatRecordCh);
            }
            // Dispatcher.on(EventNames.PLAYER_DATA_CHANGED, this.view, this.test)
            EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.PLAYER_DATA_CHANGED, this, this.onDataChange);
            this.initView(p);
        };
        BasePlayer.prototype.initView = function (p) {
        };
        Object.defineProperty(BasePlayer.prototype, "dir", {
            set: function (value) {
                this._dir = value;
                if (BaseGameData.maxPlayer > 4) {
                    switch (this._dir) {
                        case 1:
                            this.setChildPos(1, 2);
                            break;
                        case 2:
                            this.setChildPos(1, 1);
                            break;
                        case 3:
                            this.setChildPos(1, 1);
                            break;
                        case 4:
                            this.setChildPos(1, 1);
                            break;
                        case 5:
                            this.setChildPos(1, 2);
                            break;
                        case 6:
                            this.setChildPos(1, 2);
                            break;
                    }
                }
                else {
                    switch (this._dir) {
                        case 1:
                            this.setChildPos(1, 2);
                            break;
                        case 2:
                            this.setChildPos(2, 1);
                            break;
                        case 3:
                            this.setChildPos(1, 2);
                            break;
                        case 4:
                            this.setChildPos(1, 2);
                            break;
                    }
                }
                log(BaseGameData.maxPlayer);
                if (this._chatContent) {
                    log(GameDef.CHAT_POS);
                    this._chatContent.popleft = GameDef.CHAT_POS[BaseGameData.maxPlayer - 1][this._dir - 1];
                    if (this._chatRecord)
                        this._chatRecord.visible = this._chatRecordCh.visible = false;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 1左2右
         */
        BasePlayer.prototype.setChildPos = function (master, ready) {
            if (master == 1)
                this.view._imgMaster.x = -13;
            else if (master == 2)
                this.view._imgMaster.x = 77;
            if (ready == 1) {
                this.view._imgReady.x = -122;
                if (this._chatRecord)
                    this._chatRecord.x = this._chatRecordCh.x = -7;
            }
            else if (ready == 2) {
                this.view._imgReady.x = 122;
                if (this._chatRecord)
                    this._chatRecord.x = this._chatRecordCh.x = 72;
            }
        };
        BasePlayer.prototype.addListener = function () {
            EventManager.instance.enableOnObject(this);
        };
        BasePlayer.prototype.removeListener = function () {
            EventManager.instance.disableOnObject(this);
        };
        Object.defineProperty(BasePlayer.prototype, "status", {
            get: function () {
                return this._status;
            },
            set: function (value) {
                if (this._status != value) {
                    this._status = value;
                    this.view._imgEmpty.visible = this._status == PlayerInGameUI.STATUS_EMPTY;
                    this.view._btnSit.visible = this._status == PlayerInGameUI.STATUS_CAN_SIT;
                    this.view._box.visible = this._status == PlayerInGameUI.STATUS_ALREADY_SIT;
                    if (this._status == PlayerInGameUI.STATUS_ALREADY_SIT)
                        this.addListener();
                    else {
                        this.removeListener();
                        this._data = null;
                        this._head.data = null;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        // public checkIsGameing(isFirstLayout: boolean = false): void {
        //     this.checkAll();
        //     if (!isFirstLayout && this._isCurrentLayoutInGame == BaseGameData.isGameing)
        //         return;
        //     this._isCurrentLayoutInGame = BaseGameData.isGameing;
        //     var posi: any = PlayerInGamePosiConfig.getPosi(BaseGameData.gameType, this._seatid);
        //     this.setPosi(isFirstLayout, posi);
        // }
        BasePlayer.prototype.getMjGameType = function () {
        };
        BasePlayer.prototype.setPosi = function (isFirstLayout, posi) {
            Utils.injectProp(this, posi);
        };
        BasePlayer.prototype.clear = function (needCheckIsGameing) {
            if (needCheckIsGameing === void 0) { needCheckIsGameing = true; }
            this.status = PlayerInGameUI.STATUS_CAN_SIT;
            this._isCurrentLayoutInGame = false;
            this._data = null;
            this._head.data = null;
            this.view._labScore.text = "";
            // if (needCheckIsGameing)
            //     this.checkIsGameing(true);
        };
        BasePlayer.prototype.onSitTouch = function () {
            var _this = this;
            if (BaseGameData.divide) {
                var text = StringUtils.format(GameConfig.language.sit_down_tip, BaseGameData.divide);
                AlertInGameCtrl.instance.show(text, function (type) {
                    if (type == AlertCtrl.CONFIRM) {
                        server.sitdownReq(_this._seatid);
                    }
                }, 0, true, ResourceConfig.ALERT_TISHI);
            }
            else {
                server.sitdownReq(this._seatid);
            }
            // server.sitdownReq(this._index);
        };
        BasePlayer.prototype.changeToPlayer = function () {
            if (this._data)
                this._head.getInfo(this._data.uid);
        };
        Object.defineProperty(BasePlayer.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.onDataChange(this._data.uid);
            },
            enumerable: true,
            configurable: true
        });
        BasePlayer.prototype.checkMaster = function () {
            if (this._data)
                this.view._imgMaster.visible = this._data.seatid == BaseGameData.btnSeatid;
            else
                this.view._imgMaster.visible = false;
        };
        BasePlayer.prototype.checkAll = function () {
            this.setReady();
        };
        BasePlayer.prototype.onDataChange = function (uid) {
            this.checkAll();
            if (this._data) {
                if (this._data.uid == uid) {
                    this.view._imgDisconnect.visible = this._data.isOffline;
                    this.view._imgLeave.visible = this._data.isLeave;
                    if (this._data.isOffline)
                        this.voiceChanged(0);
                    this.view._labScore.text = this._data.score + "";
                    // if (this._data.score >= 0) {
                    //     this.view._labScore.color = "#ffdd65"
                    // } else
                    //     this.view._labScore.color = "#65ffa3"
                    this.view._labName.text = this._data.showname + "";
                    this._head.data = this._data;
                    this.checkMaster();
                }
            }
            else {
                this.view._imgDisconnect.visible = false;
                if (this.view._imgMaster)
                    this.view._imgMaster.visible = false;
                this._head.data = null;
            }
        };
        BasePlayer.prototype.setReady = function () {
            if (this._data && !GameConfig.IS_MATCH)
                this.view._imgReady.visible = this._data.isReady;
            else
                this.view._imgReady.visible = false;
        };
        BasePlayer.prototype.onPlayerInfo = function () {
            if (!GameConfig.IS_BANSHU) {
                // PlayerInfoCtrl.instance.show(this._data);
                SoundManager.instance.playBtnEffect(SoundConfig.SOUND_BTN_NORMAL);
                var dialog = DialogManager.instance.callDialog("PLAYER_INFO");
                dialog.show(this._data);
            }
        };
        BasePlayer.prototype.playChat = function (info) {
            if (this._chatContent) {
                // let player = BaseGameData.getPlayerDataBySeatid(this._index)
                this._chatContent.init(info, this._dir, this._data.seatid);
                this._chatContent.visible = true;
            }
        };
        //status 0:停止说话 1:开始说话 2:继续说话 98取消禁言 99禁言
        BasePlayer.prototype.voiceChanged = function (status) {
            var player = BaseGameData.getPlayerDataByUid(this._data.uid);
            if (this._chatRecord) {
                if (status == 0) {
                    this._chatRecord.visible = false;
                    this._chatRecord.ani1.stop();
                }
                else if (status == 1 || status == 2) {
                    if (player && !player.isVoiceForbidden && player.uid != server.uid && !player.isOffline) {
                        this._chatRecordCh.visible = false;
                        if (!this._chatRecord.visible) {
                            this._chatRecord.ani1.play(1, true);
                            this._chatRecord.visible = true;
                        }
                    }
                }
                else if (status == 99) {
                    this._chatRecordCh.visible = true;
                    this._chatRecord.visible = false;
                    this._chatRecord.ani1.stop();
                }
                else if (status == 98) {
                    this._chatRecordCh.visible = false;
                }
            }
        };
        Object.defineProperty(BasePlayer.prototype, "viewUI", {
            get: function () {
                return this.view;
            },
            enumerable: true,
            configurable: true
        });
        BasePlayer.STATUS_EMPTY = 1; //空位
        BasePlayer.STATUS_CAN_SIT = 2; //可以坐下
        BasePlayer.STATUS_ALREADY_SIT = 3; //已经坐下
        return BasePlayer;
    }(laya.ui.View));
    component.BasePlayer = BasePlayer;
})(component || (component = {}));
//# sourceMappingURL=BasePlayer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var component;
(function (component) {
    /**
     * 缩放时间，单位为毫秒
     */
    var scaleTime = 100;
    /**
     * 缩放程度
     */
    var scaleValue = 1;
    //继承editorUI.Button
    var ScaleButton = /** @class */ (function (_super) {
        __extends(ScaleButton, _super);
        function ScaleButton(skin, label) {
            if (skin === void 0) { skin = null; }
            if (label === void 0) { label = ""; }
            var _this = _super.call(this, skin, label) || this;
            /**
             * 缩放时间，单位为毫秒
             */
            _this.scaleTime = 100;
            /**
             * 缩放程度
             */
            _this.scaleValue = 1;
            /* 设置按钮为单态按钮
            ** 取值：
            ** 1：单态。图片不做切割，按钮的皮肤状态只有一种。
            ** 2：两态。图片将以竖直方向被等比切割为2部分，从上向下，依次为弹起状态皮肤、按下和经过及选中状态皮肤。
            ** 3：三态。图片将以竖直方向被等比切割为2部分，从上向下，依次为弹起状态皮肤、经过状态皮肤、按下和选中状态皮肤
            */
            _this.stateNum = 1;
            _this.anchorX = 0.5;
            _this.anchorY = 0.5;
            //添加鼠标按下事件侦听。按时时缩小按钮。
            _this.on(Laya.Event.MOUSE_DOWN, _this, _this.scaleSmall);
            //添加鼠标抬起事件侦听。抬起时还原按钮。
            _this.on(Laya.Event.MOUSE_UP, _this, _this.scaleBig);
            //添加鼠标离开事件侦听。离开时还原按钮。
            _this.on(Laya.Event.MOUSE_OUT, _this, _this.scaleBig);
            return _this;
        }
        ScaleButton.prototype.scaleSmall = function () {
            //缩小至n的缓动效果 
            Laya.Tween.to(this, { scaleX: this.scaleValue, scaleY: this.scaleValue }, this.scaleTime);
            //播放按鈕音效
            //SoundManager.instance.playBtnEffect(SoundConfig.SOUND_BTN_NORMAL);
        };
        ScaleButton.prototype.scaleBig = function () {
            //变大还原的缓动效果
            Laya.Tween.to(this, { scaleX: 1, scaleY: 1 }, scaleTime);
        };
        return ScaleButton;
    }(component.BaseButton));
    component.ScaleButton = ScaleButton;
})(component || (component = {}));
//# sourceMappingURL=ScaleButton.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var component;
(function (component) {
    //继承editorUI.Button 增加disabled下新纹理状态
    //disabled单独一图，命名为 "原文件名$.png"
    var State4Button = /** @class */ (function (_super) {
        __extends(State4Button, _super);
        function State4Button(skin, label) {
            if (skin === void 0) { skin = null; }
            if (label === void 0) { label = ""; }
            return _super.call(this, skin, label) || this;
            /* 设置按钮为单态按钮
            ** 取值：
            ** 1：单态。图片不做切割，按钮的皮肤状态只有一种。
            ** 2：两态。图片将以竖直方向被等比切割为2部分，从上向下，依次为弹起状态皮肤、按下和经过及选中状态皮肤。
            ** 3：三态。图片将以竖直方向被等比切割为2部分，从上向下，依次为弹起状态皮肤、经过状态皮肤、按下和选中状态皮肤
            */
        }
        Object.defineProperty(State4Button.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            set: function (value) {
                if (value != this._disabled) {
                    if (value) {
                        if (!this._normalStateNum)
                            this._normalStateNum = this.stateNum;
                        this.skin = this._skin.replace(".png", "$.png");
                        this.stateNum = 1;
                    }
                    else {
                        this.skin = this._skin.replace("$.png", ".png");
                        this.stateNum = this._normalStateNum;
                    }
                    this._disabled = value;
                    this.mouseEnabled = !value;
                }
            },
            enumerable: true,
            configurable: true
        });
        return State4Button;
    }(component.BaseButton));
    component.State4Button = State4Button;
})(component || (component = {}));
//# sourceMappingURL=State4Button.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var DialogManager = /** @class */ (function (_super) {
    __extends(DialogManager, _super);
    function DialogManager() {
        var _this = _super.call(this) || this;
        _this.DIALOG_NAME = {};
        _this["name"] = "DialogManager";
        _this._dialogList = {};
        _this.width = Laya.stage.width;
        _this.height = Laya.stage.height;
        Laya.stage.on(Laya.Event.RESIZE, _this, _this.onResize);
        EventManager.instance.registerOnObject(_this, AppControl.getInstance().stage, Laya.Event.RESIZE, _this, _this.onResize);
        return _this;
    }
    Object.defineProperty(DialogManager, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new DialogManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    DialogManager.prototype.onResize = function () {
        this.width = AppControl.getInstance().stage.width;
        this.height = AppControl.getInstance().stage.height;
        for (var k in this._dialogList) {
            var v = this._dialogList[k];
            v.width = this.width;
            v.height = this.height;
            if (v._mask) {
                v._mask.width = this.width;
                v._mask.height = this.height;
            }
        }
    };
    DialogManager.prototype.addDialog = function (name, className, loadData) {
        this.DIALOG_NAME[name] = className;
        if (loadData) {
            Laya.loader.load(loadData);
        }
    };
    DialogManager.prototype.callDialog = function (name) {
        var agrs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            agrs[_i - 1] = arguments[_i];
        }
        if (this._dialogList[name]) {
            return this._dialogList[name];
        }
        else {
            var dialog = new ((_a = this.DIALOG_NAME[name]).bind.apply(_a, [void 0].concat(agrs)))();
            this.addChild(dialog);
            dialog.width = AppControl.getInstance().stage.width;
            dialog.height = AppControl.getInstance().stage.height;
            if (dialog._mask) {
                dialog._mask.width = AppControl.getInstance().stage.width;
                dialog._mask.height = AppControl.getInstance().stage.height;
                if (!dialog._autoHide) {
                    dialog._mask.on(Laya.Event.CLICK, dialog, dialog.hide);
                }
            }
            this._dialogList[name] = dialog;
            this.tweenSelf(dialog._box);
            return dialog;
            // this._dialogList[name].show(...agrs)
        }
        var _a;
    };
    DialogManager.prototype.tweenSelf = function (target) {
        target.pos(AppControl.getInstance().stage.width * 0.5, AppControl.getInstance().stage.height * 0.5);
        target.scale(0, 0);
        Laya.Tween.clearTween(target);
        Laya.Tween.to(target, { scaleX: 1, scaleY: 1, x: (AppControl.getInstance().stage.width - target.width) / 2, y: (AppControl.getInstance().stage.height - target.height) / 2 }, 200, Laya.Ease.backOut);
    };
    DialogManager.prototype.removeDialog = function (name) {
        if (this._dialogList[name]) {
            this._dialogList[name].removeSelf();
            delete this._dialogList[name];
        }
    };
    DialogManager.prototype.hasDialog = function (name) {
        if (this._dialogList[name])
            return true;
        return false;
    };
    DialogManager.prototype.clearAll = function () {
        for (var k in this._dialogList) {
            this.removeDialog(k);
        }
        this._dialogList = {};
    };
    DialogManager.prototype.clearAllBut = function (key) {
        for (var k in this._dialogList) {
            if (k != k)
                this.removeDialog(k);
        }
        var dialog = this._dialogList[key];
        this._dialogList = {};
        if (dialog)
            this._dialogList[key] = dialog;
    };
    return DialogManager;
}(Laya.View));
//# sourceMappingURL=DialogManager.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
*实时语音管理
*/
var RealTimeSpeechManager = /** @class */ (function (_super) {
    __extends(RealTimeSpeechManager, _super);
    function RealTimeSpeechManager() {
        return _super.call(this) || this;
    }
    Object.defineProperty(RealTimeSpeechManager, "instance", {
        get: function () {
            if (this._instance == undefined) {
                this._instance = new RealTimeSpeechManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    RealTimeSpeechManager.prototype.setMic = function () {
        var isOpen = localStorage.getItem(RealTimeSpeechManager.CONST_MIC);
        if (isOpen == "on")
            this.openMic();
        else
            this.closeMic();
    };
    RealTimeSpeechManager.prototype.openMic = function () {
        var _this = this;
        NativeHelper.instance.checkRecordPermission(function (permission) {
            if (permission) {
                NativeHelper.instance.voiceOpenMic(function (code) {
                    if (code == 0) {
                        localStorage.setItem(RealTimeSpeechManager.CONST_MIC, "on");
                        Laya.SoundManager.setMusicVolume(SoundManager.instance.musicVolume * 0.7);
                    }
                    _this.event(EventNames.REALTIME_MIC, ["on", code]);
                });
            }
            else {
                AlertInGameCtrl.instance.show("未获取麦克风权限，无法进行实时语音，<br>请在设置中开启权限", function (type) {
                    if (type == AlertCtrl.CONFIRM) {
                        NativeHelper.instance.openPermissionSetting();
                    }
                });
                _this.event(EventNames.REALTIME_MIC, ["off", 1000]);
            }
        });
    };
    RealTimeSpeechManager.prototype.closeMic = function () {
        var _this = this;
        NativeHelper.instance.voiceCloseMic(function (code) {
            if (code == 0) {
                localStorage.setItem(RealTimeSpeechManager.CONST_MIC, "off");
                Laya.SoundManager.setMusicVolume(SoundManager.instance.musicVolume);
            }
            _this.event(EventNames.REALTIME_MIC, ["off", code]);
        });
    };
    RealTimeSpeechManager.prototype.passiveCloseMic = function () {
        var _this = this;
        NativeHelper.instance.voiceCloseMic(function (code) {
            _this.event(EventNames.REALTIME_MIC, ["off", code]);
        });
    };
    RealTimeSpeechManager.prototype.switchMic = function () {
        var isOpen = localStorage.getItem(RealTimeSpeechManager.CONST_MIC);
        if (isOpen == "on")
            this.closeMic();
        else {
            this.openMic();
        }
    };
    RealTimeSpeechManager.prototype.setSpeaker = function () {
        var isOpen = localStorage.getItem("r_speaker");
        if (!isOpen || isOpen == "on")
            this.openSpeaker();
        else
            this.closeSpeaker();
    };
    RealTimeSpeechManager.prototype.openSpeaker = function () {
        var _this = this;
        NativeHelper.instance.voiceOpenSpeaker(function (code) {
            if (code == 0) {
                localStorage.setItem("r_speaker", "on");
            }
            _this.event(EventNames.REALTIME_SPEAKER, ["on", code]);
        });
    };
    RealTimeSpeechManager.prototype.closeSpeaker = function () {
        var _this = this;
        NativeHelper.instance.voiceCloseSpeaker(function (code) {
            if (code == 0) {
                localStorage.setItem("r_speaker", "off");
            }
            _this.event(EventNames.REALTIME_SPEAKER, ["off", code]);
        });
    };
    RealTimeSpeechManager.prototype.switchSpeaker = function () {
        var isOpen = localStorage.getItem("r_speaker");
        if (!isOpen || isOpen == "on")
            this.closeSpeaker();
        else
            this.openSpeaker();
    };
    RealTimeSpeechManager.CONST_MIC = "r_ssyy_2";
    return RealTimeSpeechManager;
}(Laya.EventDispatcher));
//# sourceMappingURL=RealTimeSpeechManager.js.map
/**
 * @author seacole
 * 赋值
 */
var Model = /** @class */ (function () {
    function Model() {
    }
    Object.defineProperty(Model.prototype, "data", {
        /**
         * 属性赋值
         */
        set: function (value) {
            value["__proto__"] = null;
            for (var item in value) {
                if (this.hasOwnProperty("_" + item)) {
                    if (item == "gold")
                        this["_" + item] = Number(value[item]);
                    else if (item == "nickname")
                        this["_" + item] = Base64.decode(value[item]);
                    else
                        this["_" + item] = value[item];
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    return Model;
}());
//# sourceMappingURL=Model.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 角色信息;
*/
var RoleData = /** @class */ (function (_super) {
    __extends(RoleData, _super);
    function RoleData() {
        var _this = _super.call(this) || this;
        _this.uid = 0;
        _this.nickname = "";
        _this.gold = 0;
        _this.avatar = 0;
        _this.sex = "";
        _this.diamond = 0;
        _this.game_code = 0;
        _this.permit = 0;
        _this._queryCount = 0;
        return _this;
    }
    /**
     * 清理属性
     */
    RoleData.prototype.clear = function () {
        this.uid = 0;
        this.nickname = "";
        this.gold = 0;
        this.avatar = 0;
        this.sex = "";
        this.diamond = 0;
        this.game_code = 0;
        this._queryCount = 0;
    };
    RoleData.prototype.getInfo = function (isRefresh) {
        var _this = this;
        if (isRefresh === void 0) { isRefresh = false; }
        if (!this.uid || isRefresh) {
            webService.getUserInfo(server.uid, function (response) {
                if (response.code == 0) {
                    Utils.injectProp(_this, response);
                    Dispatcher.dispatch(EventNames.REFRESH_ROLE_INFO);
                }
            });
        }
    };
    /**
     * 定时查询充值订单是否完成
     */
    RoleData.prototype.startQuery = function () {
        var _this = this;
        var cpTranNo = localStorage.getItem(GameLogic.selfData.uid + GameConfig.CP_TRAN_NO);
        console.log("查询订单============================" + cpTranNo);
        if (cpTranNo) {
            if (this._queryCount > 10) {
                localStorage.setItem(GameLogic.selfData.uid + GameConfig.CP_TRAN_NO, "");
                this._queryCount = 0;
                LoadingUI.instance.hide();
            }
            else {
                this._queryCount++;
                webService.query(cpTranNo, function (response) {
                    if (response.code == 0) {
                        localStorage.setItem(GameLogic.selfData.uid + GameConfig.CP_TRAN_NO, "");
                        _this._queryCount = 0;
                        _this.getInfo(true);
                        LoadingUI.instance.hide();
                    }
                    else {
                        Laya.timer.once(10000, _this, _this.startQuery);
                    }
                });
            }
        }
    };
    RoleData.prototype.query = function () {
        var _this = this;
        var cpTranNo = localStorage.getItem(GameLogic.selfData.uid + GameConfig.CP_TRAN_NO);
        if (cpTranNo) {
            webService.query(cpTranNo, function (response) {
                if (response.code == 0) {
                    localStorage.setItem(GameLogic.selfData.uid + GameConfig.CP_TRAN_NO, "");
                    _this._queryCount = 0;
                    _this.getInfo(true);
                }
            });
        }
    };
    return RoleData;
}(Model));
//# sourceMappingURL=RoleData.js.map
/**
* @author seacole
 * 用户数据
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var UserData = /** @class */ (function (_super) {
    __extends(UserData, _super);
    function UserData() {
        var _this = _super.call(this) || this;
        _this.name = 'user';
        return _this;
    }
    return UserData;
}(DataStorage));
//# sourceMappingURL=UserData.js.map
/*
 * @author seacole
* WebService;
*/
var WebService = /** @class */ (function () {
    function WebService() {
    }
    /**
     * 调用API
     * @param module
     * @param action
     * @param callback
     * @param params
     * @param method
     * @param type          //0普通接口 1充值接口
     */
    WebService.prototype.callApi = function (module, action, callback, params, method, header, type) {
        if (callback === void 0) { callback = null; }
        if (params === void 0) { params = null; }
        if (method === void 0) { method = 'post'; }
        if (header === void 0) { header = []; }
        if (type === void 0) { type = 0; }
        if (!params) {
            params = {};
        }
        var baseUril = GameConfig.WEB_SERVICE_URL;
        var m = method == 'post' ? Ajax.POST : Ajax.GET;
        if (type == 1) {
            //调用充值接口
            // baseUril = GameConfig.WEB_SERVICE_RECHARGE_URL
            m = method == 'post' ? Ajax.PHP_POST : Ajax.PHP_GET;
        }
        // params.pf = 4;
        var url = baseUril + '/' + module + '/' + action;
        var uid = GameLogic.userData.getItem('uid');
        var token = GameLogic.userData.getItem('token');
        if (uid)
            header.push("uid", uid);
        if (token)
            header.push("tk", token);
        header.push("os", Native.instance.OS);
        m.call(Ajax, url, params, function (content) {
            log('get:' + content);
            if (callback) {
                var response = JSON.parse(content);
                if (response && response.hasOwnProperty("code") && response.code == 401) {
                    console.warn("401");
                    Dispatcher.dispatch(EventNames.UNAUTHORIZED);
                }
                else
                    callback(response);
            }
        }, null, header);
    };
    WebService.prototype.regist = function (uname, upwd, nickname, callback) {
        this.callApi('user', 'reg', function (response) {
            callback(response);
        }, { uname: uname, upwd: upwd, nickname: nickname });
    };
    /**
     * 游客登录
     */
    WebService.prototype.touristLogin = function (uuid, callback) {
        var _this = this;
        this.startDelayCall(1);
        this.callApi('user', 'tourist_login', function (response) {
            _this.clearDelayCall();
            callback(response);
        }, { uuid: uuid });
    };
    /**
     * 通行证登录
     */
    WebService.prototype.passportLogin = function (uname, upwd, callback) {
        var _this = this;
        this.startDelayCall(1);
        this.callApi('user', 'login', function (response) {
            _this.clearDelayCall();
            callback(response);
        }, { uname: uname, upwd: upwd });
    };
    /**
     * 微信登录
     */
    WebService.prototype.loginByWxFromWechat = function (code, callback) {
        this.callApi('user', 'wxlogin', function (response) {
            callback(response);
        }, { wxid: GameConfig.WX_APPID, code: code });
    };
    /**
     * 开房
     */
    WebService.prototype.createTable = function (cid, type, name, hand_cnt, max_player, info, callback) {
        var _this = this;
        this.startDelayCall();
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.callApi('game', 'create', function (response) {
            _this.clearDelayCall();
            LoadingUI.instance.hide();
            callback(response);
        }, { cid: cid, type: type, name: name, hand_cnt: hand_cnt, max_player: max_player, info: info, callback: callback });
    };
    WebService.prototype.test = function (cid, callback) {
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.callApi('game', 'create', function (response) {
            LoadingUI.instance.hide();
            callback(response);
        }, { cid: cid, "type": "3", "name": "jinyun_mj", "hand_cnt": 8, "max_player": 4, "info": "{\"max_hand_cnt\":8,\"max_player\":4,\"gps\":0,\"qghu_bao\":0,\"zh4_bao\":0,\"ying_seven\":0,\"xia_zhuang\":0,\"qizi\":0,\"gen_pai\":0,\"charge_type\":0}" });
    };
    WebService.prototype.test2 = function (cid, callback) {
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.callApi('match', 'create', function (response) {
            LoadingUI.instance.hide();
            callback(response);
        }, { cid: cid, "type": "3", "name": "jinyun_mj", "hand_cnt": "0", "max_player": 4, "info": "{\"max_player\":4,\"qghu_bao\":0,\"zh4_bao\":0,\"ying_seven\":0,\"qizi\":0,\"gen_pai\":0,\"xia_zhuang\":0,\"gps\":0,\"charge_type\":0,\"max_hand_cnt\":8}", "matchrule": "{\"matchmode\":101,\"title\":\"zhc137的比赛\",\"cost\":\"0\",\"starttime\":\"1516083360\"}}" });
    };
    /**
     * 开房
     */
    WebService.prototype.joinTable = function (code, callback) {
        var _this = this;
        this.startDelayCall();
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.callApi('game', 'join', function (response) {
            _this.clearDelayCall();
            LoadingUI.instance.hide();
            if (response.game_rule) {
                var desc = "";
                var rule = JSON.parse(response.game_rule);
                for (var k in rule) {
                    var v = rule[k];
                    if ((k == "max_hand_cnt" || k == "charge_type" || k == "max_player") && MatchConfig.isMatch(response.game_mode))
                        continue;
                    var splitDes = GameDef.SHARE_DESC[response.game_name][k][v];
                    if (splitDes && splitDes != "") {
                        desc = desc + splitDes + ",";
                    }
                }
                if (desc.length)
                    desc = desc.substr(0, desc.length - 1);
                GameConfig.DESC[response.game_code] = desc;
            }
            callback(response);
        }, { code: code });
    };
    /**
     * 获取人物信息
     */
    WebService.prototype.getUserInfo = function (uid, callback) {
        var params;
        if (GameConfig.pid)
            params = { uid: uid, pid: GameConfig.pid };
        else
            params = { uid: uid };
        this.callApi('user', 'info', function (response) {
            GameConfig.pid = 0;
            if (response.code == 0) {
                RoleManager.addRoleByInfos([response]);
            }
            callback(response);
        }, params);
    };
    /**
     * 获取人物信息
     */
    WebService.prototype.getUserInfos = function (uids, callback) {
        var params;
        this.callApi('user', 'infos', function (response) {
            if (callback)
                if (response.code == 0) {
                    RoleManager.addRoleByInfos(response);
                }
            callback(response);
        }, { uids: uids });
    };
    WebService.prototype.getHistoryList = function (page, limit_day, callback) {
        if (limit_day === void 0) { limit_day = 3; }
        this.callApi('history', 'list', function (response) {
            callback(response);
        }, { page: page, limit_day: limit_day });
    };
    WebService.prototype.getMatchHistoryList = function (page, limit_day, callback) {
        if (limit_day === void 0) { limit_day = 3; }
        this.callApi('history', 'match_list', function (response) {
            callback(response);
        }, { page: page, limit_day: limit_day });
    };
    WebService.prototype.getHistoryProfit = function (callback) {
        this.callApi("history", 'profit', function (response) {
            callback(response);
        });
    };
    WebService.prototype.getHistoryMatch = function (gid, page, gtype, title, player, time, rank, callback) {
        this.callApi("history", 'item', function (response) {
            callback(response, gid, gtype, title, player, time, rank);
        }, { gid: gid, page: page, gtype: 1 });
    };
    WebService.prototype.getHistoryNoraml = function (gid, gtype, callback) {
        this.callApi('history', 'item', function (response) {
            callback(response, gid, gtype);
        }, { gid: gid, gtype: 0 });
    };
    WebService.prototype.getVideoDetail = function (vid, gtype, callback) {
        this.callApi('history', 'video', function (response) {
            callback(response, gtype);
        }, { vid: vid }, "get");
    };
    WebService.prototype.getWxLoginUrl = function () {
        var redirect_uri = GameConfig.GAME_URL + "index.html" + Laya.Browser.window.location.search;
        redirect_uri = encodeURIComponent(redirect_uri);
        return "https://open.weixin.qq.com/connect/oauth2/authorize?appid=" + GameConfig.WX_APPID + "&redirect_uri=" + redirect_uri + "&response_type=code&scope=snsapi_userinfo&state=wx#wechat_redirect";
    };
    WebService.prototype.getWxConfig = function (callback) {
        if (!Native.instance.isNative && Native.instance.isWeiXin) {
            this.callApi('config', 'wx-jssdk', function (response) {
                callback(response);
            }, { wxid: GameConfig.WX_APPID, url: encodeURIComponent(Laya.Browser.window.location.href.split('#')[0]) });
        }
    };
    WebService.prototype.reportor = function (params) {
        this.callApi('config', 'log', function (response) {
            // callback(response);
        }, params);
    };
    // $uid = $this ->_request ->getPost('uid');
    // $os_id = $this ->_request ->getPost('os_id'); //     1android,2ios,,3other
    // $goods_id = $this ->_request ->getPost('goods_id'); //道具ID
    //platform_id    1 应用内支付 ，2 h5支付 。 3 微信SDK支付
    //pid  道具id
    //openid
    WebService.prototype.rechagre = function (id, cburl, callback) {
        var os_id = 3;
        if (Native.instance.isIOS) {
            os_id = 2;
        }
        if (Native.instance.isAndroid) {
            os_id = 3;
        }
        var platform_id;
        var _OS = Native.instance.OS;
        if (Native.instance.isWeiXin)
            _OS = OSConfig.WEIXIN;
        switch (_OS) {
            case OSConfig.IOS_NATIVE_STORE:
            case OSConfig.ANDROID_NATIVE:
                platform_id = 1;
                break;
            case OSConfig.WEIXIN:
                platform_id = 3;
                break;
            case OSConfig.IOS_NATIVE_INHOUSE:
            case OSConfig.IOS_WEB:
            case OSConfig.ANDROID_WEB:
            case OSConfig.OTHERS_WEB:
            case OSConfig.UNKNOWN:
                platform_id = 2;
                break;
            default:
                platform_id = 2;
                break;
        }
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_ATONCE, null, null, null, 5000);
        this.callApi('agent/public', 'create_order', function (response) {
            LoadingUI.instance.hide();
            callback(response);
        }, { uid: server.uid, pid: id, openid: server.openid, os_id: os_id, platform_id: platform_id }, 'post', [], 1
        //server.uid
        //1336916
        );
    };
    WebService.prototype.query = function (order, callback) {
        this.callApi('agent/public/notify', 'query', function (response) {
            callback(response);
        }, { uid: server.uid, order: order }, 'post', [], 1);
    };
    WebService.prototype.getShopCfg = function (callback) {
        var _os = "64";
        if (Native.instance.isIOS) {
            _os = "ios";
        }
        if (Native.instance.isAndroid) {
            _os = "android";
        }
        this.callApi('agent/active/shop', 'list', function (response) {
            callback(response);
        }, { os: _os }, 'post', [], 1);
    };
    WebService.prototype.checkUpdata = function (callback) {
        var flag;
        var appver = NativeHelper.instance.getAppVersion();
        var tmp = appver.split(".");
        if (tmp.length == 3) {
            if (!isNaN(Number(tmp[0])) && !isNaN(Number(tmp[1])) && !isNaN(Number(tmp[2])))
                flag = true;
        }
        if (flag) {
            this.callApi('config', 'update', function (response) {
                callback(response);
            }, { "appver": appver });
        }
        else
            callback({ code: -1 });
    };
    WebService.prototype.getAnnounce = function (callback) {
        this.callApi('config', 'marquee', function (response) {
            callback(response);
        }, {});
    };
    /**
     * 苹果内购下单
     * @param id
     * @param group_id
     * @param callback
     */
    WebService.prototype.iapOrder = function (id, group_id, callback) {
        this.callApi('pay/iap', 'order', function (response) {
            callback(response);
        }, { uid: server.uid, group_id: group_id, goods_id: id });
    };
    WebService.prototype.clearDelayCall = function () {
        Laya.timer.clear(this, this.delayCall);
    };
    WebService.prototype.startDelayCall = function (type) {
        if (type === void 0) { type = 2; }
        this.clearDelayCall();
        Laya.timer.once(5000, this, this.delayCall, [type]);
    };
    WebService.prototype.delayCall = function (type) {
        var str = "";
        if (type == 1)
            str = "登录失败,请检查网络连接";
        else
            str = "网络连接失败，请重试";
        AlertInGameCtrl.instance.show(str, null, 0, false);
    };
    //领奖
    WebService.prototype.getMatchReward = function (uid, gid, callback) {
        // let  _os = "64"
        // if(GameConfig.IS_IOS_EXAMINE){
        //     _os = "ios"
        // }
        this.callApi('agent/active/sys', 'prize', function (response) {
            callback(response);
        }, { uid: uid, gid: gid }, 'post', [], 1);
    };
    return WebService;
}());
var webService = new WebService();
//# sourceMappingURL=WebService.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* ClubWebService;
*/
var ClubWebService = /** @class */ (function (_super) {
    __extends(ClubWebService, _super);
    function ClubWebService() {
        return _super.call(this) || this;
    }
    // match_router: post("/create", club_create)
    // match_router: post("/delete", club_delete)
    // match_router: post("/join", club_join)
    // match_router: post("/quit", club_quit)
    // match_router: post("/kick", club_kick)
    // match_router: post("/members", club_members)
    // match_router: post("/list", club_clublist)
    // match_router: post("/gamelist", club_gamelist)
    // match_router: post("/resultlist", club_resultlist)
    // match_router: post("/search", club_search)
    // match_router: post("/setpaytype", club_paytype)
    // match_router: post("/info", club_info)
    // match_router: post("/rename", club_rename)
    /**
     * 创建俱乐部
     */
    ClubWebService.prototype.createClub = function (title, callback) {
        var _this = this;
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.startDelayCall();
        this.callApi('club', 'create', function (response) {
            LoadingUI.instance.hide();
            _this.clearDelayCall();
            callback(response);
        }, { title: title });
    };
    /**
     * 搜索俱乐部
     */
    ClubWebService.prototype.searchClub = function (cid, callback) {
        var _this = this;
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.startDelayCall();
        this.callApi('club', 'search', function (response) {
            LoadingUI.instance.hide();
            _this.clearDelayCall();
            callback(response);
        }, { cid: cid });
    };
    /**
     * 加入俱乐部
     */
    ClubWebService.prototype.joinClub = function (cid, callback) {
        var _this = this;
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.startDelayCall();
        this.callApi('club', 'join', function (response) {
            LoadingUI.instance.hide();
            _this.clearDelayCall();
            callback(response);
        }, { cid: cid });
    };
    /**
     * 加入俱乐部
     */
    ClubWebService.prototype.getMyClub = function (callback) {
        var _this = this;
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.startDelayCall();
        this.callApi('club', 'list', function (response) {
            LoadingUI.instance.hide();
            _this.clearDelayCall();
            callback(response);
        }, {});
    };
    /**
     * 获取游戏列表
     */
    ClubWebService.prototype.getGameList = function (cid, page, callback) {
        var _this = this;
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.startDelayCall();
        this.callApi('club', 'gamelist', function (response) {
            LoadingUI.instance.hide();
            _this.clearDelayCall();
            callback(response);
        }, { cid: cid, page: page });
    };
    /**
     * 获取战绩列表
     */
    ClubWebService.prototype.getResultList = function (cid, page, callback) {
        this.callApi('club', 'resultlist', function (response) {
            callback(response);
        }, { cid: cid, page: page });
    };
    /**
     * 获取俱乐部信息 钻石数量，开房支付方式
     */
    ClubWebService.prototype.getClubInfo = function (cid, callback) {
        this.callApi('club', 'info', function (response) {
            callback(response);
        }, { cid: cid });
    };
    /**
     * 获取成员列表
     */
    ClubWebService.prototype.getMembersList = function (cid, page, callback) {
        this.callApi('club', 'members', function (response) {
            callback(response);
        }, { cid: cid, page: page });
    };
    /**
     * 修改俱乐部名字
     */
    ClubWebService.prototype.renameClub = function (cid, title, callback) {
        var _this = this;
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.startDelayCall();
        this.callApi('club', 'rename', function (response) {
            LoadingUI.instance.hide();
            _this.clearDelayCall();
            callback(response);
        }, { cid: cid, title: title });
    };
    /**
     * 退出俱乐部
     */
    ClubWebService.prototype.quitClub = function (cid, callback) {
        var _this = this;
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.startDelayCall();
        this.callApi('club', 'quit', function (response) {
            LoadingUI.instance.hide();
            _this.clearDelayCall();
            callback(response);
        }, { cid: cid });
    };
    /**
     * 修改俱乐部支付方式
     */
    ClubWebService.prototype.setClubPaytype = function (cid, paytype, callback) {
        this.callApi('club', 'setpaytype', function (response) {
            callback(response);
        }, { cid: cid, paytype: paytype });
    };
    /**
     * 解散俱乐部
     */
    ClubWebService.prototype.deleteClub = function (cid, callback) {
        var _this = this;
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.startDelayCall();
        this.callApi('club', 'delete', function (response) {
            LoadingUI.instance.hide();
            _this.clearDelayCall();
            callback(response);
        }, { cid: cid });
    };
    /**
     * 俱乐部踢人
     */
    ClubWebService.prototype.kick = function (cid, uid, callback) {
        var _this = this;
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.startDelayCall();
        this.callApi('club', 'kick', function (response) {
            LoadingUI.instance.hide();
            _this.clearDelayCall();
            callback(response);
        }, { cid: cid, uid: uid });
    };
    /**
     * 俱乐部充值
     */
    ClubWebService.prototype.clubRecharge = function (cid, cnt, callback) {
        var _this = this;
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.startDelayCall();
        this.callApi('club', 'recharge', function (response) {
            LoadingUI.instance.hide();
            _this.clearDelayCall();
            callback(response);
        }, { cid: cid, cnt: cnt });
    };
    return ClubWebService;
}(WebService));
var clubWebService = new ClubWebService();
//# sourceMappingURL=ClubWebService.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* MatchSignService;
*/
var MatchSignService = /** @class */ (function (_super) {
    __extends(MatchSignService, _super);
    function MatchSignService() {
        return _super.call(this) || this;
    }
    /**
     * 创建比赛
     */
    MatchSignService.prototype.createMatch = function (cid, type, name, hand_cnt, max_player, info, matchrule, callback) {
        var _this = this;
        this.startDelayCall();
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.callApi('match', 'create', function (response) {
            _this.clearDelayCall();
            LoadingUI.instance.hide();
            if (callback)
                callback(response);
        }, { cid: cid, type: type, name: name, hand_cnt: hand_cnt, max_player: max_player, info: info, matchrule: matchrule });
    };
    /**
     *
     * @param gid
     * @param matchtype 1官方赛 2个人赛
     * @param callback
     */
    MatchSignService.prototype.getMatchList = function (callback) {
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.callApi('match', 'list', function (response) {
            LoadingUI.instance.hide();
            if (callback)
                callback(response);
        }, {});
    };
    MatchSignService.prototype.getMatchStatus = function (list, callback) {
        // LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.callApi('match', 'status', function (response) {
            // LoadingUI.instance.hide();
            if (callback)
                callback(response);
        }, { list: list });
    };
    MatchSignService.prototype.getReward = function (sysid, callback) {
        // LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.callApi('match', 'config', function (response) {
            // LoadingUI.instance.hide();
            if (callback)
                callback(response);
        }, { sysid: sysid });
    };
    MatchSignService.prototype.matchSignin = function (code, callback) {
        var _this = this;
        this.startDelayCall();
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.callApi('match', 'signin', function (response) {
            _this.clearDelayCall();
            LoadingUI.instance.hide();
            if (callback)
                callback(response);
        }, { code: code });
    };
    MatchSignService.prototype.matchSignout = function (code, callback) {
        var _this = this;
        this.startDelayCall();
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
        this.callApi('match', 'signout', function (response) {
            _this.clearDelayCall();
            LoadingUI.instance.hide();
            if (callback)
                callback(response);
        }, { code: code });
    };
    return MatchSignService;
}(WebService));
var matchSignService = new MatchSignService();
//# sourceMappingURL=MatchSignService.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 非游戏服务器交互逻辑;
*/
var MenuServer = /** @class */ (function (_super) {
    __extends(MenuServer, _super);
    function MenuServer() {
        var _this = _super.call(this) || this;
        _this._cacheList = [];
        _this._ping = 0;
        _this._connectCount = 0;
        _this._notLogList = [EventNames.GAME_HEARTBEAT_NTF];
        return _this;
    }
    MenuServer.prototype.initData = function (root) {
        this._protoRoot = root;
        this._protoIDs = ProtoIDs._protoIDs;
    };
    /**
     * 连接服务器
     */
    MenuServer.prototype.connect = function () {
        if (this._socket) {
            this._socket.off(Laya.Event.OPEN, this, this.onConnect);
            this._socket.off(Laya.Event.CLOSE, this, this.onDisconnect);
            this._socket.off(Laya.Event.MESSAGE, this, this.onSocketData);
            this._socket.off(Laya.Event.ERROR, this, this.onError);
            this._socket.close();
        }
        this._socket = new Laya.Socket();
        this._socket.on(Laya.Event.OPEN, this, this.onConnect);
        this._socket.on(Laya.Event.ERROR, this, this.onError);
        var url = GameConfig.currentServerUrl + "?uid=" + this._uid + "&c=" + this._code + "&t=" + md5(this._token + this._uid + this.code + "OhFei6SieB0e");
        this._socket.connectByUrl(url);
        log('connecting... ' + url);
        Laya.timer.once(5000, this, this.connect);
    };
    /**
     *关闭服务器
     */
    MenuServer.prototype.close = function () {
        log('close Server');
        this._socket.close();
        this.onDisconnect(null);
    };
    /**
     * 连接成功
     */
    MenuServer.prototype.onConnect = function (event) {
        this._connectCount = 0;
        Laya.timer.clear(this, this.connect);
        this._socket.off(Laya.Event.OPEN, this, this.onConnect);
        this._socket.on(Laya.Event.CLOSE, this, this.onDisconnect);
        this._socket.on(Laya.Event.MESSAGE, this, this.onSocketData);
        log('connect on:' + GameConfig.currentServerUrl);
        this.event(EventNames.CONNECT_SERVER);
        this.startHeart();
    };
    /**
     * 连接错误
     */
    MenuServer.prototype.onError = function (event) {
        log('server error');
        GameConfig.nextServerUrlIdx();
        Laya.timer.clear(this, this.connect);
        this.event(EventNames.SERVER_ERROR);
        this.close();
        //连接失败后 每3秒尝试自动重连
        // Laya.timer.once(3000, this, this.connect);
    };
    /**
     * 断开连接
     */
    MenuServer.prototype.onDisconnect = function (event) {
        log("disconnect");
        Laya.timer.clear(this, this.connect);
        this._socket.off(Laya.Event.OPEN, this, this.onConnect);
        this._socket.off(Laya.Event.CLOSE, this, this.onDisconnect);
        this._socket.off(Laya.Event.MESSAGE, this, this.onSocketData);
        this._socket.off(Laya.Event.ERROR, this, this.onError);
        if (event && event.code && Number(event.code) == 555) {
            this.event(EventNames.SHOW_DISCONNECT, 1);
        }
        else {
            this.event(EventNames.SHOW_DISCONNECT);
            //断开连接需要区分是进入房间信息错误还是玩了一半游戏断线
            if (this._code) {
                this._connectCount++;
                if (this._connectCount <= 5) {
                    log("正在进行第" + this._connectCount + "次重连...");
                    Laya.timer.once(100, this, this.connect);
                }
                else {
                    log("重连失败");
                    this.event(EventNames.SHOW_DISCONNECT, 2);
                }
            }
        }
    };
    /**
     * 启动心跳
     */
    MenuServer.prototype.startHeart = function () {
        Laya.timer.loop(2000, this, this.onHeartTimer);
    };
    /**
     * 单位时间心跳
     */
    MenuServer.prototype.onHeartTimer = function () {
        if (this._socket.connected) {
            this.send(EventNames.GAME_HEARTBEAT_NTF);
            this._heartBeatBegin = Laya.Browser.now();
            this._socket.flush();
            Laya.timer.loop(5000, this, this.onHeartTimerEnd);
        }
    };
    /**
    * 收到心跳
    */
    MenuServer.prototype.onRecvHeart = function (message) {
        this._serverTime = message.time;
        this._clientTime = Laya.Browser.now();
        this._ping = (this._clientTime - this._heartBeatBegin) * 0.5;
        Dispatcher.dispatch(EventNames.PING_CHANGE);
        //log("onRecvHeart ping=" + ping + " stime=" + message.time);        
        Laya.timer.clear(this, this.onHeartTimerEnd);
    };
    /**
     * 心跳超时
     */
    MenuServer.prototype.onHeartTimerEnd = function () {
        log('心跳接收超时,主动关闭连接.');
        this.close();
    };
    Object.defineProperty(MenuServer.prototype, "serverTime", {
        /**
         * 获取当前服务器时间 单位：毫秒
         */
        get: function () {
            var now = Laya.Browser.now();
            return this._serverTime + now - this._clientTime;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 服务器回包
     */
    MenuServer.prototype.onSocketData = function (message) {
        var bytes = new Laya.Byte(message);
        bytes.endian = Laya.Socket.BIG_ENDIAN;
        var nameId = bytes.getInt16();
        var body = bytes.getUint8Array(bytes.pos, bytes.length - bytes.pos);
        var name = this._protoIDs[nameId];
        if (name) {
            // var msgname: string = name.substring(name.indexOf('.') + 1, name.length);
            var awesomeMessage = this._protoRoot.lookup(name);
            var message = awesomeMessage.decode(body);
            this.dispatchMessage(name, message);
        }
    };
    MenuServer.prototype.onSheetData = function (nameId, body) {
        var name = this._protoIDs[nameId];
        if (name) {
            var awesomeMessage = this._protoRoot.lookup(name);
            var message = awesomeMessage.decode(body);
            return { name: name, msg: message };
        }
    };
    /**
     * 派发服务器消息
     */
    MenuServer.prototype.dispatchMessage = function (name, message) {
        //优先特殊处理的协议
        switch (name) {
            case EventNames.GAME_HEARTBEAT_NTF:
                this.onRecvHeart(message);
                return;
            default:
                break;
        }
        if (this._needCache) {
            if (this._exception && this._exception.indexOf(name) > -1) {
            }
            else {
                this._cacheList.push([name, message]);
                return;
            }
        }
        if (this._notLogList.indexOf(name) == -1)
            log("recv:" + name + " " + JSON.stringify(message));
        if (message)
            this.event(name, message);
    };
    /**
     * 发送消息
     * @param name
     * @param data
     */
    MenuServer.prototype.send = function (name, data) {
        if (data === void 0) { data = null; }
        if (!this._socket)
            return;
        if (!data)
            data = {};
        var awesomeMessage = this._protoRoot.lookup(name);
        // Create a new message
        var message = awesomeMessage.create(data);
        // Verify the message if necessary (i.e. when possibly incomplete or invalid)
        var errMsg = awesomeMessage.verify(message);
        if (errMsg)
            throw Error(errMsg);
        // Encode a message to an Uint8Array (browser) or Buffer (node)
        var buffer = awesomeMessage.encode(message).finish();
        if (this._notLogList.indexOf(name) == -1)
            log("send:" + name + " " + JSON.stringify(message));
        this._socket.output.clear();
        // (this._socket.output as Laya.Byte).writeInt16(buffer.length + 2);
        this._socket.output.writeInt16(this._protoIDs[name]);
        this._socket.output.writeArrayBuffer(buffer, 0, buffer.length);
        this._socket.flush();
    };
    /**
     * 开始缓存协议
     */
    MenuServer.prototype.startCache = function (exception, cTime) {
        if (exception === void 0) { exception = null; }
        if (cTime === void 0) { cTime = -1; }
        log("开始缓存");
        if (exception) {
            this._exception = exception.concat();
        }
        else {
            this._exception = [];
        }
        this._needCache = true;
    };
    /**
     * 缓存结束
     */
    MenuServer.prototype.stopCache = function () {
        log("缓存结束");
        this._needCache = false;
        while (this._cacheList.length > 0) {
            var arr = this._cacheList.shift();
            this.dispatchMessage(arr[0], arr[1]);
            if (this._needCache) {
                break;
            }
        }
    };
    /**
     * 登录后相关属性赋值
     * @param uid
     * @param token
     * @param code 房间号
     */
    MenuServer.prototype.setInfo = function (uid, token, openid) {
        this._token = token;
        this._uid = parseInt(uid);
        this._openid = openid;
    };
    Object.defineProperty(MenuServer.prototype, "code", {
        get: function () {
            return this._code;
        },
        set: function (code) {
            if (!code)
                this._connectCount = 0;
            this._code = code;
            // this._code="16973";
            WxWeb.instance.onShare();
        },
        enumerable: true,
        configurable: true
    });
    return MenuServer;
}(Laya.EventDispatcher));
//# sourceMappingURL=MenuServer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 与游戏服务器交互逻辑;
*/
var Server = /** @class */ (function (_super) {
    __extends(Server, _super);
    function Server() {
        var _this = _super.call(this) || this;
        _this._cacheList = [];
        _this._ping = 0;
        _this._connectCount = 0;
        _this._notLogList = [EventNames.GAME_HEARTBEAT_NTF];
        _this._connectTime = [100, 100, 500, 1000, 5000, 10000];
        return _this;
    }
    Server.prototype.initData = function (root) {
        this._protoRoot = root;
        this._protoIDs = ProtoIDs._protoIDs;
    };
    /**
     * 连接服务器
     */
    Server.prototype.connect = function () {
        if (this._socket) {
            this._socket.off(Laya.Event.OPEN, this, this.onConnect);
            this._socket.off(Laya.Event.CLOSE, this, this.onDisconnect);
            this._socket.off(Laya.Event.MESSAGE, this, this.onSocketData);
            this._socket.off(Laya.Event.ERROR, this, this.onError);
            this._socket.close();
        }
        // this._code = "111111";
        this._socket = new Laya.Socket();
        this._socket.on(Laya.Event.OPEN, this, this.onConnect);
        this._socket.on(Laya.Event.ERROR, this, this.onError);
        var url = GameConfig.currentServerUrl + "?uid=" + this._uid + "&c=" + this._code + "&t=" + md5(this._token + this._uid + this.code + "OhFei6SieB0e");
        this._socket.connectByUrl(url);
        log('connecting... ' + url);
        Laya.timer.once(5000, this, this.connect);
    };
    /**
     *关闭服务器
     */
    Server.prototype.close = function (event) {
        if (event === void 0) { event = null; }
        log('close Server');
        if (this._socket) {
            this._socket.close();
            this.onDisconnect(event);
        }
    };
    Server.prototype.reconnect = function () {
        if (this._socket) {
            this._socket.close();
            this._connectCount = 0;
            this.onDisconnect(null);
        }
    };
    /**
     * 连接成功
     */
    Server.prototype.onConnect = function (event) {
        this._connectCount = 0;
        Laya.timer.clear(this, this.connect);
        this._socket.off(Laya.Event.OPEN, this, this.onConnect);
        this._socket.on(Laya.Event.CLOSE, this, this.onDisconnect);
        this._socket.on(Laya.Event.MESSAGE, this, this.onSocketData);
        log('connect on:' + GameConfig.currentServerUrl);
        this.event(EventNames.CONNECT_SERVER);
        this.startHeart();
    };
    /**
     * 连接错误
     */
    Server.prototype.onError = function (event, a) {
        log('server error');
        GameConfig.nextServerUrlIdx();
        Laya.timer.clear(this, this.connect);
        this.event(EventNames.SERVER_ERROR);
        this.close();
        //连接失败后 每3秒尝试自动重连
        // Laya.timer.once(3000, this, this.connect);
    };
    /**
     * 断开连接
     */
    Server.prototype.onDisconnect = function (event) {
        log("disconnect");
        this.stopHeart();
        Laya.timer.clear(this, this.connect);
        this._socket.off(Laya.Event.OPEN, this, this.onConnect);
        this._socket.off(Laya.Event.CLOSE, this, this.onDisconnect);
        this._socket.off(Laya.Event.MESSAGE, this, this.onSocketData);
        this._socket.off(Laya.Event.ERROR, this, this.onError);
        if (event && event.code && Number(event.code) == 555) {
            console.warn("账号在别处登录:" + event.code);
            this.event(EventNames.SHOW_DISCONNECT, 1);
        }
        else if (event && event.code && Number(event.code) == 556) {
            console.warn("房间已结束:" + event.code);
            this.event(EventNames.SHOW_DISCONNECT, 3);
        }
        else {
            // this.event(EventNames.SHOW_DISCONNECT);
            //断开连接需要区分是进入房间信息错误还是玩了一半游戏断线
            if (!TableEndCtrl.instance.parent && !TableEndShuCtrl.instance.parent && !DialogManager.instance.hasDialog("MATCH_OVER") &&
                !DialogManager.instance.hasDialog("MATCH_OUT_WIN") && !DialogManager.instance.hasDialog("MATCH_OUT_LOSE")) {
                if (this._code) {
                    this.event(EventNames.SHOW_DISCONNECT);
                    this._connectCount++;
                    if (this._connectCount <= 5) {
                        log("正在进行第" + this._connectCount + "次重连...");
                        Laya.timer.once(this._connectTime[this._connectCount], this, this.connect);
                    }
                    else {
                        log("重连失败");
                        this.event(EventNames.SHOW_DISCONNECT, 2);
                    }
                }
            }
        }
    };
    /**
     * 启动心跳
     */
    Server.prototype.startHeart = function () {
        Laya.timer.loop(5000, this, this.onHeartTimer);
    };
    /**
     * 停止心跳
     */
    Server.prototype.stopHeart = function () {
        Laya.timer.clear(this, this.onHeartTimer);
        Laya.timer.clear(this, this.onHeartTimerEnd);
    };
    /**
     * 单位时间心跳
     */
    Server.prototype.onHeartTimer = function () {
        if (this._socket.connected) {
            this.send(EventNames.GAME_HEARTBEAT_NTF);
            this._heartBeatBegin = Laya.Browser.now();
            this._socket.flush();
            Laya.timer.loop(5000, this, this.onHeartTimerEnd);
        }
    };
    /**
    * 收到心跳
    */
    Server.prototype.onRecvHeart = function (message) {
        this._serverTime = message.time;
        this._clientTime = Laya.Browser.now();
        this._ping = (this._clientTime - this._heartBeatBegin);
        Dispatcher.dispatch(EventNames.PING_CHANGE);
        // log("onRecvHeart ping=" + this._ping + " stime=" + message.time);
        Laya.timer.clear(this, this.onHeartTimerEnd);
    };
    /**
     * 心跳超时
     */
    Server.prototype.onHeartTimerEnd = function () {
        log('心跳接收超时,主动关闭连接.');
        this.close();
    };
    Object.defineProperty(Server.prototype, "serverTime", {
        /**
         * 获取当前服务器时间 单位：毫秒
         */
        get: function () {
            var now = Laya.Browser.now();
            return this._serverTime + Math.abs(now / 1000) - Math.abs(this._clientTime / 1000);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 服务器回包
     */
    Server.prototype.onSocketData = function (message) {
        var bytes = new Laya.Byte(message);
        bytes.endian = Laya.Socket.BIG_ENDIAN;
        var nameId = bytes.getInt16();
        if (nameId == 10) {
            var errorcode = bytes.getInt32();
            // if (errorcode == 555) {
            //     console.warn("账号在别处登录:" + errorcode);
            //     this.event(EventNames.SHOW_DISCONNECT, 1);               
            // }
            // else if (errorcode == 556) {
            //     console.warn("房间已结束:" + errorcode);
            //     this.event(EventNames.SHOW_DISCONNECT, 3);
            // }
            this.close({ code: errorcode });
        }
        else {
            var body = bytes.getUint8Array(bytes.pos, bytes.length - bytes.pos);
            var name = this._protoIDs[nameId];
            if (name) {
                // var msgname: string = name.substring(name.indexOf('.') + 1, name.length);
                var awesomeMessage = this._protoRoot.lookup(name);
                var message = awesomeMessage.decode(body);
                this.dispatchMessage(name, message);
            }
        }
    };
    Server.prototype.onSheetData = function (nameId, body) {
        var name = this._protoIDs[nameId];
        if (name) {
            var awesomeMessage = this._protoRoot.lookup(name);
            var message = awesomeMessage.decode(body);
            return { name: name, msg: message };
        }
    };
    /**
     * 派发服务器消息
     */
    Server.prototype.dispatchMessage = function (name, message) {
        //优先特殊处理的协议
        switch (name) {
            case EventNames.GAME_HEARTBEAT_NTF:
                this.onRecvHeart(message);
                return;
            default:
                break;
        }
        if (this._needCache) {
            if (this._exception && this._exception.indexOf(name) > -1) {
            }
            else {
                this._cacheList.push([name, message]);
                return;
            }
        }
        if (this._notLogList.indexOf(name) == -1)
            log("recv:" + name + " " + JSON.stringify(message));
        if (message)
            this.event(name, message);
    };
    /**
     * 发送消息
     * @param name
     * @param data
     */
    Server.prototype.send = function (name, data) {
        if (data === void 0) { data = null; }
        if (!this._socket)
            return;
        if (!data)
            data = {};
        var awesomeMessage = this._protoRoot.lookup(name);
        // Create a new message
        var message = awesomeMessage.create(data);
        // Verify the message if necessary (i.e. when possibly incomplete or invalid)
        var errMsg = awesomeMessage.verify(message);
        if (errMsg)
            throw Error(errMsg);
        // Encode a message to an Uint8Array (browser) or Buffer (node)
        var buffer = awesomeMessage.encode(message).finish();
        if (this._notLogList.indexOf(name) == -1)
            log("send:" + name + " " + JSON.stringify(message));
        this._socket.output.clear();
        // (this._socket.output as Laya.Byte).writeInt16(buffer.length + 2);
        this._socket.output.writeInt16(this._protoIDs[name]);
        this._socket.output.writeArrayBuffer(buffer, 0, buffer.length);
        this._socket.flush();
    };
    /**
     * 开始缓存协议
     */
    Server.prototype.startCache = function (exception, cTime) {
        if (exception === void 0) { exception = null; }
        if (cTime === void 0) { cTime = -1; }
        log("开始缓存");
        if (exception) {
            this._exception = exception.concat();
        }
        else {
            this._exception = [];
        }
        this._needCache = true;
    };
    /**
     * 缓存结束
     */
    Server.prototype.stopCache = function () {
        log("缓存结束");
        this._needCache = false;
        while (this._cacheList.length > 0) {
            var arr = this._cacheList.shift();
            this.dispatchMessage(arr[0], arr[1]);
            if (this._needCache) {
                break;
            }
        }
    };
    /**
     * 登录后相关属性赋值
     * @param uid
     * @param token
     * @param code 房间号
     */
    Server.prototype.setInfo = function (uid, token, openid) {
        this._token = token;
        this._uid = parseInt(uid);
        this._openid = openid;
        WxWeb.instance.onShare();
    };
    Object.defineProperty(Server.prototype, "code", {
        get: function () {
            return this._code;
        },
        set: function (code) {
            // log("code置零")
            if (!code)
                this._connectCount = 0;
            this._code = code;
            // this._code="16973";
            // WxWeb.instance.onShare();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Server.prototype, "uid", {
        get: function () {
            return this._uid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Server.prototype, "openid", {
        get: function () {
            return this._openid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Server.prototype, "ping", {
        get: function () {
            return this._ping;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Server.prototype, "longitude", {
        get: function () {
            return this._longitude;
        },
        set: function (value) {
            this._longitude = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Server.prototype, "latitude", {
        get: function () {
            return this._latitude;
        },
        set: function (value) {
            this._latitude = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Server.prototype, "address", {
        get: function () {
            return this._address;
        },
        set: function (value) {
            this._address = value;
        },
        enumerable: true,
        configurable: true
    });
    // --------------------后面是具体协议收发-------------------------------
    /**
     * 请求加入桌子  暂时不用
     */
    Server.prototype.joinTableReq = function (tableid, version) {
        if (version === void 0) { version = ""; }
        this.send(EventNames.GAME_JOIN_TABLE_REQ, { tableid: tableid, version: version });
    };
    /**
     * 请求加入桌子  暂时不用
     */
    Server.prototype.joinMatchReq = function () {
        this.send(EventNames.MATCH_JOIN, {});
    };
    /**
     * name
     */
    Server.prototype.matchRecordReq = function () {
        this.send(EventNames.MATCH_RECORD_REQ, {});
    };
    Server.prototype.matchBackReq = function () {
        this.send(EventNames.PLAYER_BACK_REQ, {});
    };
    /**
     * 主动请求坐下
     * @param seatid
     * @param longitude 经度
     * @param latitude 纬度
     */
    Server.prototype.sitdownReq = function (seatid, longitude, latitude) {
        if (longitude === void 0) { longitude = 0; }
        if (latitude === void 0) { latitude = 0; }
        if (GameConfig.IS_MATCH)
            return;
        longitude = longitude ? longitude : 0;
        latitude = latitude ? latitude : 0;
        this.send(EventNames.GAME_SITDOWN_REQ, { seatid: seatid, longitude: longitude, latitude: latitude });
    };
    /**
     * 主动请求站起
     */
    Server.prototype.standupReq = function () {
        this.send(EventNames.GAME_STANDUP_REQ, {});
    };
    /**
     * 请求开始桌子
     */
    Server.prototype.startTableReq = function () {
        this.send(EventNames.GAME_START_TABLE_REQ, {});
    };
    /**
     * 房主请求结算桌子
     */
    Server.prototype.tableEndReq = function () {
        this.send(EventNames.GAME_TABLE_END_REQ, {});
    };
    /**
     * 玩家准备
     */
    Server.prototype.playerReadyReq = function () {
        this.send(EventNames.GAME_PLAYER_READY_REQ, {});
    };
    /**
     * 发表情
     */
    Server.prototype.emoticonReq = function () {
        this.send(EventNames.GAME_EMOTICON_REQ, {});
    };
    /**
     * 聊天
     */
    Server.prototype.playerChatReq = function (chattype, chatcontent) {
        this.send(EventNames.GAME_PLAYER_CHAT_REQ, { chattype: chattype, chatcontent: chatcontent });
    };
    /**
     * 使用道具
     */
    Server.prototype.useGoodsRep = function () {
        this.send(EventNames.GAME_USE_GOODS_REQ, {});
    };
    /**
     * 玩家操作
     */
    Server.prototype.playerOptReq = function (opts) {
        this.send(EventNames.GAME_PLAYER_OPT_REQ, { opts: opts });
    };
    Server.prototype.playerVoteReq = function (voteType, reqType, result) {
        this.send(EventNames.GAME_VOTE_REQ, { voteType: voteType, reqType: reqType, result: result });
    };
    /**
     * 请求实时战绩
     */
    Server.prototype.realTimeRecordReq = function () {
        this.send(EventNames.GAME_REAL_TIME_RECORD_REQ, {});
    };
    Server.prototype.userInfoReq = function (uids) {
        this.send(EventNames.GAME_USER_INFO_REQ, { uids: uids });
    };
    Server.prototype.setDeckCrads = function () {
        var str = localStorage.getItem('cards');
        if (str) {
            var arr1 = str.split(",");
            var arr2 = [];
            for (var i = 0; i < arr1.length; i++) {
                arr2.push(Number(arr1[i]));
            }
            this.send(EventNames.GAME_SET_DECK_CARDS, { cards: arr2 });
        }
    };
    Server.prototype.uploadInfoReq = function () {
        this.send(EventNames.GAME_UPLOAD_INFO_REQ, { addr: server.address, longitude: server.longitude ? server.longitude : 0, latitude: server.latitude ? server.latitude : 0 });
    };
    Server.prototype.historyReq = function (hand) {
        this.send(EventNames.GAME_HISTORY_REQ, { hand: hand });
    };
    /**
     *
     * @param data_type //1 语音id
     * @param data1 //memberID
     * @param data2
     */
    Server.prototype.tableDataReq = function (dataType, data1, data2) {
        if (dataType === void 0) { dataType = 1; }
        if (data2 === void 0) { data2 = ""; }
        this.send(EventNames.GAME_TABLE_DATA_REQ, { dataType: dataType, data1: data1, data2: data2 });
    };
    Server.prototype.matchHallStatusReq = function () {
        this.send(EventNames.GAME_MATCH_HALL_STATUS_REQ, {});
    };
    Server.prototype.matchHallUserListReq = function (sequence) {
        this.send(EventNames.GAME_MATCH_HALL_USER_LIST_REQ, { sequence: sequence });
    };
    Server.prototype.matchSignupReq = function () {
        this.send(EventNames.GAME_MATCH_SIGNUP_REQ, {});
    };
    Server.prototype.matchSignoutReq = function () {
        this.send(EventNames.GAME_MATCH_SIGNOUT_REQ, {});
    };
    Server.prototype.MatchRewardListReq = function () {
        this.send(EventNames.GAME_MATCH_REWARD_LIST_REQ, {});
    };
    return Server;
}(Laya.EventDispatcher));
var server = new Server();
//# sourceMappingURL=Server.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var View = laya.ui.View;
var Dialog = laya.ui.Dialog;
var ui;
(function (ui) {
    var bazhang;
    (function (bazhang) {
        var CardViewUI = /** @class */ (function (_super) {
            __extends(CardViewUI, _super);
            function CardViewUI() {
                return _super.call(this) || this;
            }
            CardViewUI.prototype.createChildren = function () {
                View.regComponent("ui.poker.CardBigUI", ui.poker.CardBigUI);
                _super.prototype.createChildren.call(this);
                this.createView(ui.bazhang.CardViewUI.uiView);
            };
            CardViewUI.uiView = { "type": "View", "props": { "width": 1280, "visible": true, "height": 720, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 471, "x": 312, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.87 } }, { "type": "Box", "props": { "var": "_opt", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Panel", "props": { "width": 319, "var": "_typeList", "height": 169, "hScrollBarSkin": "tongyong/jindutiaodi.png", "centerX": 475.5, "bottom": 479 } }, { "type": "Box", "props": { "width": 331, "visible": false, "var": "_typeList1", "height": 180, "centerX": 474.5, "bottom": 474 } }, { "type": "Box", "props": { "var": "_showBox", "centerX": 18, "bottom": 75 }, "child": [{ "type": "Image", "props": { "y": 60, "x": 270, "width": 607, "var": "_showBoxImg", "skin": "bazhang/selectCardLayer/img_bg1.png", "height": 415 }, "child": [{ "type": "Image", "props": { "visible": false, "top": 21, "skin": "bazhang/selectCardLayer/img_nz.png", "right": 19 }, "child": [{ "type": "Label", "props": { "y": 34, "x": 11, "visible": false, "var": "_time", "text": 0, "font": "font_num_11" } }] }, { "type": "Image", "props": { "y": 12, "x": 157, "skin": "bazhang/selectCardLayer/img_tou.png" } }, { "type": "Image", "props": { "y": 142, "x": 157, "skin": "bazhang/selectCardLayer/img_leftItemBg.png" } }, { "type": "Image", "props": { "y": 270, "x": 157, "skin": "bazhang/selectCardLayer/img_leftItemBg.png" } }] }, { "type": "CardBig", "props": { "y": 212, "x": 642, "var": "_card_5", "scaleY": 0.67, "scaleX": 0.67, "name": 5, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 80, "x": 444, "var": "_card_6", "scaleY": 0.67, "scaleX": 0.67, "name": 6, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 80, "x": 543, "var": "_card_7", "scaleY": 0.67, "scaleX": 0.67, "name": 7, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 338, "x": 444, "var": "_card_0", "scaleY": 0.67, "scaleX": 0.67, "name": 0, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 338, "x": 543, "var": "_card_1", "scaleY": 0.67, "scaleX": 0.67, "name": 1, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 338, "x": 642, "var": "_card_2", "scaleY": 0.67, "scaleX": 0.67, "name": 2, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 212, "x": 444, "var": "_card_3", "scaleY": 0.67, "scaleX": 0.67, "name": 3, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 212, "x": 543, "var": "_card_4", "scaleY": 0.67, "scaleX": 0.67, "name": 4, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 495, "x": -41, "var": "hand_card_0", "scaleY": 1.3, "scaleX": 1.3, "name": 0, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 495, "x": 107, "var": "hand_card_1", "scaleY": 1.3, "scaleX": 1.3, "name": 1, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 495, "x": 255, "var": "hand_card_2", "scaleY": 1.3, "scaleX": 1.3, "name": 2, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 495, "x": 403, "var": "hand_card_3", "scaleY": 1.3, "scaleX": 1.3, "name": 3, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 495, "x": 551, "var": "hand_card_4", "scaleY": 1.3, "scaleX": 1.3, "name": 4, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 495, "x": 699, "var": "hand_card_5", "scaleY": 1.3, "scaleX": 1.3, "name": 5, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 495, "x": 847, "var": "hand_card_6", "scaleY": 1.3, "scaleX": 1.3, "name": 6, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 495, "x": 995, "var": "hand_card_7", "scaleY": 1.3, "scaleX": 1.3, "name": 7, "runtime": "ui.poker.CardBigUI" } }, { "type": "Box", "props": { "y": 314, "x": 402, "width": 239, "visible": false, "var": "_touchpanel", "height": 386, "centerY": -81, "centerX": -61.5 }, "child": [{ "type": "Image", "props": { "y": 15, "x": 0, "width": 259, "var": "_touch_tou", "height": 123 } }, { "type": "Image", "props": { "y": 142, "x": -5, "width": 361, "var": "_touch_zhong", "height": 123 } }, { "type": "Image", "props": { "y": 272, "x": -7, "width": 361, "var": "_touch_wei", "height": 123 } }] }, { "type": "Image", "props": { "y": 500, "x": -37, "width": 1200, "var": "_sliderTouchLayer", "height": 209 } }, { "type": "Image", "props": { "y": 214, "x": 352, "var": "_des_1", "skin": "bazhang/selectCardLayer/shoubai/img_shoupai_cardType_1.png", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 334, "x": 352, "var": "_des_2", "skin": "bazhang/selectCardLayer/shoubai/img_shoupai_cardType_1.png", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 431, "x": 352, "var": "_des_3", "skin": "bazhang/selectCardLayer/shoubai/img_shoupai_cardType_1.png", "anchorY": 0.5, "anchorX": 0.5 } }] }, { "type": "Image", "props": { "width": 425, "var": "_baopai", "skin": "menu/menu_brown.png", "sizeGrid": "15,11,11,13", "height": 46, "centerX": 0.5, "bottom": 398, "alpha": 0 }, "child": [{ "type": "Label", "props": { "text": "相公啦,尾道必须大于中道大于头道", "fontSize": 24, "color": "#FCECD3", "centerY": 0, "centerX": 0 } }] }, { "type": "Box", "props": { "width": 700, "visible": true, "var": "_btnBox", "height": 100, "centerX": 9, "bottom": 135 }, "child": [{ "type": "ScaleButton", "props": { "var": "_confirm", "stateNum": 1, "skin": "bazhang/selectCardLayer/btn_blue_complete.png", "scaleValue": 0.9, "scaleTime": 100, "centerY": 10, "centerX": 189 } }, { "type": "ScaleButton", "props": { "var": "_btnCancel", "stateNum": 1, "skin": "bazhang/selectCardLayer/btn_allCancel.png", "scaleValue": 0.9, "scaleTime": 100, "centerY": 7, "centerX": -195 } }] }, { "type": "Box", "props": { "width": 1150, "var": "_btnTypeBox", "height": 100, "centerX": 0, "bottom": 0 }, "child": [{ "type": "ScaleButton", "props": { "y": 64, "x": 170, "var": "_btnduizi", "stateNum": 1, "skin": "bazhang/selectCardLayer/btn_canSelect.png", "scaleValue": 0.9, "scaleTime": 100 }, "child": [{ "type": "Image", "props": { "y": 12, "x": 55, "var": "_img_duizi", "skin": "bazhang/selectCardLayer/btnWord1/img_duizi_green.png" } }] }, { "type": "ScaleButton", "props": { "y": 64, "x": 369, "var": "_btnshunzi", "stateNum": 1, "skin": "bazhang/selectCardLayer/btn_canSelect.png", "scaleValue": 0.9, "scaleTime": 100 }, "child": [{ "type": "Image", "props": { "y": 12, "x": 55, "var": "_img_shunzi", "skin": "bazhang/selectCardLayer/btnWord1/img_shunzi_green.png" } }] }, { "type": "ScaleButton", "props": { "y": 64, "x": 568, "var": "_btnzhadan", "stateNum": 1, "skin": "bazhang/selectCardLayer/btn_canSelect.png", "scaleValue": 0.9, "scaleTime": 100 }, "child": [{ "type": "Image", "props": { "y": 13, "x": 50, "var": "_img_zhadan", "skin": "bazhang/selectCardLayer/btnWord1/img_zhadan_green.png" } }] }, { "type": "ScaleButton", "props": { "y": 64, "x": 767, "var": "_btntonghuashun", "stateNum": 1, "skin": "bazhang/selectCardLayer/btn_canSelect.png", "scaleValue": 0.9, "scaleTime": 100 }, "child": [{ "type": "Image", "props": { "y": 13, "x": 37, "var": "_img_tonghuashun", "skin": "bazhang/selectCardLayer/btnWord1/img_tonghuashun_green.png" } }] }, { "type": "ScaleButton", "props": { "y": 64, "x": 966, "var": "_btnpaopai", "stateNum": 1, "skin": "bazhang/selectCardLayer/btn_paopai_di.png", "scaleValue": 0.9, "scaleTime": 100 }, "child": [{ "type": "Image", "props": { "y": 13, "x": 46, "var": "_img_paopai", "skin": "bazhang/selectCardLayer/btnWord1/img_paopai_yellow.png" } }] }] }, { "type": "Box", "props": { "width": 26, "visible": true, "height": 341, "centerX": 293, "bottom": 311 }, "child": [{ "type": "ScaleButton", "props": { "var": "_btnCancel1", "stateNum": 1, "skin": "bazhang/selectCardLayer/btn_cancel.png", "scaleValue": 0.9, "scaleTime": 100, "centerY": -139.5, "centerX": -154 } }, { "type": "ScaleButton", "props": { "var": "_btnCancel2", "stateNum": 1, "skin": "bazhang/selectCardLayer/btn_cancel.png", "scaleValue": 0.9, "scaleTime": 100, "centerY": -10.50000000000001, "centerX": -51 } }, { "type": "ScaleButton", "props": { "var": "_btnCancel3", "stateNum": 1, "skin": "bazhang/selectCardLayer/btn_cancel.png", "scaleValue": 0.9, "scaleTime": 100, "centerY": 112.50000000000001, "centerX": -49 } }] }] }] };
            return CardViewUI;
        }(View));
        bazhang.CardViewUI = CardViewUI;
    })(bazhang = ui.bazhang || (ui.bazhang = {}));
})(ui || (ui = {}));
(function (ui) {
    var bazhang;
    (function (bazhang) {
        var HistoryItemUI = /** @class */ (function (_super) {
            __extends(HistoryItemUI, _super);
            function HistoryItemUI() {
                return _super.call(this) || this;
            }
            HistoryItemUI.prototype.createChildren = function () {
                View.regComponent("ui.poker.CardBigUI", ui.poker.CardBigUI);
                _super.prototype.createChildren.call(this);
                this.createView(ui.bazhang.HistoryItemUI.uiView);
            };
            HistoryItemUI.uiView = { "type": "View", "props": { "width": 490, "height": 270 }, "child": [{ "type": "Label", "props": { "y": 6, "x": 13, "var": "_name", "text": "label", "fontSize": 28, "color": "#b77a5c" } }, { "type": "CardBig", "props": { "y": 37, "x": 6, "var": "_card_10", "scaleY": 0.39, "scaleX": 0.39, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 37, "x": 58, "var": "_card_11", "scaleY": 0.39, "scaleX": 0.39, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 37, "x": 110, "var": "_card_12", "scaleY": 0.39, "scaleX": 0.39, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 103, "x": 6, "var": "_card_5", "scaleY": 0.39, "scaleX": 0.39, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 103, "x": 58, "var": "_card_6", "scaleY": 0.39, "scaleX": 0.39, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 103, "x": 110, "var": "_card_7", "scaleY": 0.39, "scaleX": 0.39, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 103, "x": 162, "var": "_card_8", "scaleY": 0.39, "scaleX": 0.39, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 103, "x": 214, "var": "_card_9", "scaleY": 0.39, "scaleX": 0.39, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 169, "x": 6, "var": "_card_0", "scaleY": 0.39, "scaleX": 0.39, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 169, "x": 58, "var": "_card_1", "scaleY": 0.39, "scaleX": 0.39, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 169, "x": 110, "var": "_card_2", "scaleY": 0.39, "scaleX": 0.39, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 169, "x": 162, "var": "_card_3", "scaleY": 0.39, "scaleX": 0.39, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 169, "x": 214, "var": "_card_4", "scaleY": 0.39, "scaleX": 0.39, "runtime": "ui.poker.CardBigUI" } }, { "type": "Box", "props": { "y": 0, "width": 407, "var": "_normal", "right": 3, "height": 270 }, "child": [{ "type": "Label", "props": { "y": 195, "var": "score_1", "text": "label", "right": 99.29296875, "fontSize": 24, "color": "#f8f4f4" } }, { "type": "Label", "props": { "y": 195, "var": "score_2", "text": "label", "right": 20.29296875, "fontSize": 24, "color": "#f8f4f4" } }, { "type": "Label", "props": { "y": 131, "var": "score_3", "text": "label", "right": 99.29296875, "fontSize": 24, "color": "#f8f4f4" } }, { "type": "Label", "props": { "y": 131, "var": "score_4", "text": "label", "right": 20.29296875, "fontSize": 24, "color": "#f8f4f4" } }, { "type": "Label", "props": { "y": 68, "var": "score_5", "text": "label", "right": 99.29296875, "fontSize": 24, "color": "#f8f4f4" } }, { "type": "Label", "props": { "y": 68, "var": "score_6", "text": "label", "right": 20.29296875, "fontSize": 24, "color": "#f8f4f4" } }, { "type": "Label", "props": { "y": 39, "x": 87, "visible": false, "var": "score_8", "text": "label", "fontSize": 24, "color": "#f77400" } }, { "type": "Label", "props": { "y": 39, "x": 194, "visible": false, "var": "score_7", "text": "label", "fontSize": 24, "color": "#f77400" } }] }, { "type": "Box", "props": { "y": 42, "x": 356, "visible": false, "var": "_spe" }, "child": [{ "type": "Image", "props": { "y": 20, "x": -8, "var": "score_9", "skin": "bazhang/special/1000_1.png" } }] }, { "type": "Label", "props": { "y": 12, "var": "score_10", "text": "label", "right": 18, "fontSize": 30, "color": "#fdfbfb" } }, { "type": "Image", "props": { "var": "_line", "skin": "tongyong/tongyong_line.png", "centerX": 0, "bottom": 1 } }] };
            return HistoryItemUI;
        }(View));
        bazhang.HistoryItemUI = HistoryItemUI;
    })(bazhang = ui.bazhang || (ui.bazhang = {}));
})(ui || (ui = {}));
(function (ui) {
    var bazhang;
    (function (bazhang) {
        var HistoryViewUI = /** @class */ (function (_super) {
            __extends(HistoryViewUI, _super);
            function HistoryViewUI() {
                return _super.call(this) || this;
            }
            HistoryViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.bazhang.HistoryViewUI.uiView);
            };
            HistoryViewUI.uiView = { "type": "View", "props": { "width": 640, "height": 960 }, "child": [{ "type": "Image", "props": { "y": 491, "x": 332, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "width": 640, "var": "_box", "height": 960 }, "child": [{ "type": "Image", "props": { "y": 79, "x": 10, "width": 620, "top": 79, "skin": "tongyong/tongyong_bg.png", "sizeGrid": "52,50,50,50", "centerX": 0, "bottom": 62 }, "child": [{ "type": "Image", "props": { "y": -10, "width": 319, "skin": "tongyong/tongyong_bg_title.png", "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 10, "skin": "bazhang/sjhg.png", "centerX": 0.5 } }] }, { "type": "BaseButton", "props": { "y": -43, "x": 552, "var": "_btnClose", "stateNum": 2, "skin": "tongyong/close.png" } }, { "type": "Image", "props": { "top": 67, "skin": "tongyong/tongyong_top_border_1.png", "sizeGrid": "20,20,20,20", "right": 15, "left": 15, "bottom": 20 }, "child": [{ "type": "List", "props": { "width": 490, "var": "_list", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 17, "spaceY": 20, "spaceX": 0, "repeatY": 3, "repeatX": 1, "centerX": 0, "bottom": 123 } }, { "type": "Image", "props": { "width": 570, "skin": "createTable/dibian.png", "sizeGrid": "0,18,0,20", "right": 10, "left": 10, "height": 102, "bottom": 10 } }, { "type": "BaseButton", "props": { "var": "_last", "stateNum": 2, "skin": "bazhang/last_round.png", "left": 50, "bottom": 28 } }, { "type": "BaseButton", "props": { "var": "_next", "stateNum": 2, "skin": "bazhang/next_round.png", "right": 50, "bottom": 28 } }, { "type": "Label", "props": { "width": 96, "var": "_hand", "text": "10/10", "fontSize": 30, "color": "#6b01e", "centerX": 0, "bottom": 43, "align": "center" } }] }] }] }] };
            return HistoryViewUI;
        }(View));
        bazhang.HistoryViewUI = HistoryViewUI;
    })(bazhang = ui.bazhang || (ui.bazhang = {}));
})(ui || (ui = {}));
(function (ui) {
    var bazhang;
    (function (bazhang) {
        var RuleViewUI = /** @class */ (function (_super) {
            __extends(RuleViewUI, _super);
            function RuleViewUI() {
                return _super.call(this) || this;
            }
            RuleViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.bazhang.RuleViewUI.uiView);
            };
            RuleViewUI.uiView = { "type": "View", "props": { "width": 104, "height": 130 }, "child": [{ "type": "Label", "props": { "y": 18, "var": "_handCount", "text": "label", "fontSize": 28, "color": "#16706e", "centerX": 0 } }, { "type": "Label", "props": { "y": 53, "var": "_code", "text": "label", "fontSize": 22, "color": "#16706e", "centerX": 0.24072265625 } }, { "type": "Label", "props": { "y": 79, "var": "_rule", "text": "label", "fontSize": 22, "color": "#16706e", "centerX": 0.24072265625 } }, { "type": "Label", "props": { "y": 105, "var": "_divide", "text": "label", "fontSize": 22, "color": "#16706e", "centerX": 0.24072265625 } }] };
            return RuleViewUI;
        }(View));
        bazhang.RuleViewUI = RuleViewUI;
    })(bazhang = ui.bazhang || (ui.bazhang = {}));
})(ui || (ui = {}));
(function (ui) {
    var bazhang;
    (function (bazhang) {
        var TimeCircleUI = /** @class */ (function (_super) {
            __extends(TimeCircleUI, _super);
            function TimeCircleUI() {
                return _super.call(this) || this;
            }
            TimeCircleUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.bazhang.TimeCircleUI.uiView);
            };
            TimeCircleUI.uiView = { "type": "View", "props": { "width": 118, "height": 118 }, "child": [{ "type": "Image", "props": { "skin": "bazhang/selectCardLayer/img_nz.png", "centerY": 0, "centerX": 0 } }, { "type": "Image", "props": { "y": 17, "x": 22, "visible": false, "var": "_circle", "skin": "bazhang/selectCardLayer/img_nz.png" } }, { "type": "Label", "props": { "var": "_time", "text": "0", "font": "font_num_11", "centerY": 0, "centerX": 0 } }] };
            return TimeCircleUI;
        }(View));
        bazhang.TimeCircleUI = TimeCircleUI;
    })(bazhang = ui.bazhang || (ui.bazhang = {}));
})(ui || (ui = {}));
(function (ui) {
    var bazhang;
    (function (bazhang) {
        var fanpaiUI = /** @class */ (function (_super) {
            __extends(fanpaiUI, _super);
            function fanpaiUI() {
                return _super.call(this) || this;
            }
            fanpaiUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.bazhang.fanpaiUI.uiView);
            };
            fanpaiUI.uiView = { "type": "View", "props": { "y": 0, "x": -1, "width": 69, "height": 118 }, "child": [{ "type": "Image", "props": { "y": 84, "x": 67, "visible": true, "skin": "pokerCardBig/pokerCardBig_front.png", "anchorY": 0.5, "anchorX": 0.5, "alpha": 1 }, "compId": 3, "child": [{ "type": "Image", "props": { "var": "_imgFlowerSmall", "skin": "pokerCardBig/pokerCardBig_flower_small_0.png" } }, { "type": "Image", "props": { "var": "_imgFlowerBig", "skin": "pokerCardBig/pokerCardBig_flower_big_2.png" } }, { "type": "Image", "props": { "var": "_imgNum", "skin": "pokerCardBig/pokerCardBig_black_11.png" } }] }, { "type": "Image", "props": { "y": 84, "x": 67, "visible": false, "skin": "pokerCardBig/pokerCardBig_back.png", "skewY": 180, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 2 }], "animations": [{ "nodes": [{ "target": 2, "keyframes": { "visible": [{ "value": true, "tweenMethod": "linearNone", "tween": false, "target": 2, "key": "visible", "index": 0 }, { "value": false, "tweenMethod": "linearNone", "tween": false, "target": 2, "key": "visible", "index": 6 }], "var": [{ "value": "_imgBack", "tweenMethod": "linearNone", "tween": false, "target": 2, "key": "var", "index": 6 }], "skewY": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "skewY", "index": 0 }, { "value": 180, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "skewY", "index": 6 }] } }, { "target": 3, "keyframes": { "visible": [{ "value": false, "tweenMethod": "linearNone", "tween": false, "target": 3, "key": "visible", "index": 0 }, { "value": true, "tweenMethod": "linearNone", "tween": false, "target": 3, "key": "visible", "index": 5 }, { "value": true, "tweenMethod": "linearNone", "tween": false, "target": 3, "key": "visible", "index": 6 }], "var": [{ "value": "_imgFont", "tweenMethod": "linearNone", "tween": false, "target": 3, "key": "var", "index": 6 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 5 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 6 }] } }], "name": "ani1", "id": 1, "frameRate": 60, "action": 0 }] };
            return fanpaiUI;
        }(View));
        bazhang.fanpaiUI = fanpaiUI;
    })(bazhang = ui.bazhang || (ui.bazhang = {}));
})(ui || (ui = {}));
(function (ui) {
    var bazhang;
    (function (bazhang) {
        var qiangUI = /** @class */ (function (_super) {
            __extends(qiangUI, _super);
            function qiangUI() {
                return _super.call(this) || this;
            }
            qiangUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.bazhang.qiangUI.uiView);
            };
            qiangUI.uiView = { "type": "View", "props": { "width": 69, "height": 118 }, "child": [{ "type": "Animation", "props": { "var": "_ani", "source": "res/bazhang/qiang.ani" } }] };
            return qiangUI;
        }(View));
        bazhang.qiangUI = qiangUI;
    })(bazhang = ui.bazhang || (ui.bazhang = {}));
})(ui || (ui = {}));
(function (ui) {
    var bazhang;
    (function (bazhang) {
        var showcardanimationUI = /** @class */ (function (_super) {
            __extends(showcardanimationUI, _super);
            function showcardanimationUI() {
                return _super.call(this) || this;
            }
            showcardanimationUI.prototype.createChildren = function () {
                View.regComponent("ui.bazhang.fanpaiUI", ui.bazhang.fanpaiUI);
                _super.prototype.createChildren.call(this);
                this.createView(ui.bazhang.showcardanimationUI.uiView);
            };
            showcardanimationUI.uiView = { "type": "View", "props": { "width": 323, "height": 338 }, "child": [{ "type": "Image", "props": { "y": 4, "x": 95, "width": 121, "visible": false, "var": "_toudao", "skin": "bazhang/score_bg.png" }, "compId": 18, "child": [{ "type": "Label", "props": { "y": 12, "text": "头道", "fontSize": 20, "color": "#d6a282", "centerX": 0 } }, { "type": "Label", "props": { "y": 35, "var": "_score_5", "text": "0", "font": "font_num_9", "centerX": 0 } }, { "type": "Label", "props": { "y": 35, "visible": false, "var": "_score_6", "text": "0", "font": "font_num_9", "centerX": 27 } }] }, { "type": "Image", "props": { "y": 81, "x": 95, "width": 121, "visible": false, "var": "_zhongdao", "skin": "bazhang/score_bg.png" }, "compId": 21, "child": [{ "type": "Label", "props": { "y": 12, "text": "中道", "fontSize": 20, "color": "#d6a282", "centerX": 0 } }, { "type": "Label", "props": { "y": 35, "var": "_score_3", "text": "0", "font": "font_num_9", "centerX": 0 } }, { "type": "Label", "props": { "y": 35, "visible": false, "var": "_score_4", "text": "0", "font": "font_num_9", "centerX": 27 } }] }, { "type": "Image", "props": { "y": 168, "x": 95, "width": 121, "visible": false, "var": "_weidao", "skin": "bazhang/score_bg.png" }, "compId": 24, "child": [{ "type": "Label", "props": { "y": 12, "text": "尾道", "fontSize": 20, "color": "#d6a282", "centerX": 0 } }, { "type": "Label", "props": { "y": 35, "var": "_score_1", "text": "0", "font": "font_num_9", "centerX": 0 } }, { "type": "Label", "props": { "y": 35, "visible": false, "var": "_score_2", "text": "0", "font": "font_num_9", "centerX": 27 } }] }, { "type": "Box", "props": { "y": 0, "x": 31, "width": 325, "scaleY": 0.88, "scaleX": 0.88, "height": 338 }, "child": [{ "type": "fanpai", "props": { "y": 84, "x": 95, "width": 133, "var": "card_6", "scaleY": 1, "scaleX": 1, "rotation": -8, "height": 168, "anchorY": 0.5, "anchorX": 0.5, "runtime": "ui.bazhang.fanpaiUI" }, "compId": 9 }, { "type": "fanpai", "props": { "y": 86, "x": 185, "width": 133, "var": "card_7", "scaleY": 1, "scaleX": 1, "rotation": 8, "height": 168, "anchorY": 0.5, "anchorX": 0.5, "runtime": "ui.bazhang.fanpaiUI" }, "compId": 10 }, { "type": "fanpai", "props": { "y": 255, "x": 192, "width": 133, "var": "card_3", "scaleY": 1, "scaleX": 1, "rotation": 8, "height": 168, "anchorY": 0.5, "anchorX": 0.5, "runtime": "ui.bazhang.fanpaiUI" }, "compId": 16 }, { "type": "fanpai", "props": { "y": 255, "x": 234, "width": 133, "var": "card_4", "scaleY": 1, "scaleX": 1, "rotation": 16, "height": 168, "anchorY": 0.5, "anchorX": 0.5, "runtime": "ui.bazhang.fanpaiUI" }, "compId": 17 }, { "type": "fanpai", "props": { "y": 169, "x": 66, "width": 133, "var": "card_5", "scaleY": 1, "scaleX": 1, "rotation": -14, "height": 168, "anchorY": 0.5, "anchorX": 0.5, "runtime": "ui.bazhang.fanpaiUI" }, "compId": 8 }, { "type": "fanpai", "props": { "y": 255, "x": 66, "width": 133, "var": "card_0", "scaleY": 1, "scaleX": 1, "rotation": -16, "height": 168, "anchorY": 0.5, "anchorX": 0.5, "runtime": "ui.bazhang.fanpaiUI" }, "compId": 13 }, { "type": "fanpai", "props": { "y": 255, "x": 108, "width": 133, "var": "card_1", "scaleY": 1, "scaleX": 1, "rotation": -8, "height": 168, "anchorY": 0.5, "anchorX": 0.5, "runtime": "ui.bazhang.fanpaiUI" }, "compId": 14 }, { "type": "fanpai", "props": { "y": 255, "x": 150, "width": 133, "var": "card_2", "scaleY": 1, "scaleX": 1, "rotation": 0, "height": 168, "anchorY": 0.5, "anchorX": 0.5, "runtime": "ui.bazhang.fanpaiUI" }, "compId": 15 }] }, { "type": "Image", "props": { "y": 249, "x": 300, "visible": false, "var": "_gun", "skin": "bazhang/daqiang.png" }, "child": [{ "type": "Label", "props": { "y": 9, "x": 78, "var": "_daqiang", "font": "font_num_12" } }] }, { "type": "Image", "props": { "y": 165, "x": 50, "visible": false, "var": "_special", "skin": "bazhang/special.png" } }], "animations": [{ "nodes": [{ "target": 8, "keyframes": { "y": [{ "value": 169, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "y", "index": 0 }, { "value": 151, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "y", "index": 7 }], "x": [{ "value": 169, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "x", "index": 0 }, { "value": 231, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "x", "index": 7 }], "rotation": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "rotation", "index": 0 }, { "value": 14, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "rotation", "index": 7 }] } }, { "target": 9, "keyframes": { "y": [{ "value": 169, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "y", "index": 0 }, { "value": 38, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "y", "index": 7 }], "x": [{ "value": 64, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "x", "index": 0 }, { "value": 92, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "x", "index": 7 }], "rotation": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "rotation", "index": 0 }, { "value": -8, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "rotation", "index": 7 }] } }, { "target": 10, "keyframes": { "y": [{ "value": 169, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "y", "index": 0 }, { "value": 37, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "y", "index": 7 }], "x": [{ "value": 90, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "x", "index": 0 }, { "value": 179, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "x", "index": 7 }], "rotation": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "rotation", "index": 0 }, { "value": 8, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "rotation", "index": 7 }] } }, { "target": 13, "keyframes": { "y": [{ "value": 169, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 0 }, { "value": 275, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 7 }], "x": [{ "value": 195, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "x", "index": 0 }, { "value": 49, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "x", "index": 7 }], "rotation": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "rotation", "index": 0 }, { "value": -16, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "rotation", "index": 7 }] } }, { "target": 14, "keyframes": { "y": [{ "value": 169, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 0 }, { "value": 260, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 7 }], "x": [{ "value": 222, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "x", "index": 0 }, { "value": 137, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "x", "index": 7 }], "rotation": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "rotation", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "rotation", "index": 7 }] } }, { "target": 15, "keyframes": { "y": [{ "value": 169, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "y", "index": 0 }, { "value": 274, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "y", "index": 7 }], "x": [{ "value": 248, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "x", "index": 0 }, { "value": 229, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "x", "index": 7 }], "rotation": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "rotation", "index": 0 }, { "value": 16, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "rotation", "index": 7 }] } }, { "target": 16, "keyframes": { "y": [{ "value": 169, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "y", "index": 0 }, { "value": 149, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "y", "index": 7 }], "x": [{ "value": 117, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "x", "index": 0 }, { "value": 52, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "x", "index": 7 }], "rotation": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "rotation", "index": 0 }, { "value": -14, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "rotation", "index": 7 }] } }, { "target": 17, "keyframes": { "y": [{ "value": 169, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "y", "index": 0 }, { "value": 139, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "y", "index": 7 }], "x": [{ "value": 143, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "x", "index": 0 }, { "value": 140, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "x", "index": 7 }], "rotation": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "rotation", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "rotation", "index": 7 }] } }], "name": "ani1_1", "id": 1, "frameRate": 60, "action": 0 }, { "nodes": [{ "target": 24, "keyframes": { "x": [{ "value": 95, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "x", "index": 0 }, { "value": 300, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "x", "index": 15 }], "visible": [{ "value": true, "tweenMethod": "linearNone", "tween": false, "target": 24, "key": "visible", "index": 0 }, { "value": true, "tweenMethod": "linearNone", "tween": false, "target": 24, "key": "visible", "index": 15 }] } }], "name": "ani2", "id": 2, "frameRate": 60, "action": 0 }, { "nodes": [{ "target": 21, "keyframes": { "x": [{ "value": 95, "tweenMethod": "linearNone", "tween": true, "target": 21, "key": "x", "index": 0 }, { "value": 300, "tweenMethod": "linearNone", "tween": true, "target": 21, "key": "x", "index": 15 }], "visible": [{ "value": true, "tweenMethod": "linearNone", "tween": false, "target": 21, "key": "visible", "index": 0 }] } }], "name": "ani3", "id": 3, "frameRate": 60, "action": 0 }, { "nodes": [{ "target": 18, "keyframes": { "x": [{ "value": 95, "tweenMethod": "linearNone", "tween": true, "target": 18, "key": "x", "index": 0 }, { "value": 300, "tweenMethod": "linearNone", "tween": true, "target": 18, "key": "x", "index": 15 }], "visible": [{ "value": true, "tweenMethod": "linearNone", "tween": false, "target": 18, "key": "visible", "index": 0 }, { "value": true, "tweenMethod": "linearNone", "tween": false, "target": 18, "key": "visible", "index": 15 }] } }], "name": "ani4", "id": 4, "frameRate": 60, "action": 0 }, { "nodes": [{ "target": 24, "keyframes": { "x": [{ "value": 95, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "x", "index": 0 }, { "value": -110, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "x", "index": 15 }], "visible": [{ "value": true, "tweenMethod": "linearNone", "tween": false, "target": 24, "key": "visible", "index": 0 }, { "value": true, "tweenMethod": "linearNone", "tween": false, "target": 24, "key": "visible", "index": 15 }] } }], "name": "ani2_0", "id": 2, "frameRate": 60, "action": 0 }, { "nodes": [{ "target": 21, "keyframes": { "x": [{ "value": 95, "tweenMethod": "linearNone", "tween": true, "target": 21, "key": "x", "index": 0 }, { "value": -110, "tweenMethod": "linearNone", "tween": true, "target": 21, "key": "x", "index": 15 }], "visible": [{ "value": true, "tweenMethod": "linearNone", "tween": false, "target": 21, "key": "visible", "index": 0 }, { "value": true, "tweenMethod": "linearNone", "tween": false, "target": 21, "key": "visible", "index": 15 }] } }], "name": "ani3_0", "id": 3, "frameRate": 60, "action": 0 }, { "nodes": [{ "target": 18, "keyframes": { "x": [{ "value": 95, "tweenMethod": "linearNone", "tween": true, "target": 18, "key": "x", "index": 0 }, { "value": -110, "tweenMethod": "linearNone", "tween": true, "target": 18, "key": "x", "index": 15 }], "visible": [{ "value": true, "tweenMethod": "linearNone", "tween": false, "target": 18, "key": "visible", "index": 0 }, { "value": true, "tweenMethod": "linearNone", "tween": false, "target": 18, "key": "visible", "index": 15 }] } }], "name": "ani4_0", "id": 4, "frameRate": 60, "action": 0 }, { "nodes": [{ "target": 8, "keyframes": { "y": [{ "value": 151, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "y", "index": 0 }], "x": [{ "value": 231, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "x", "index": 0 }], "rotation": [{ "value": 14, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "rotation", "index": 0 }] } }, { "target": 9, "keyframes": { "y": [{ "value": 38, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "y", "index": 0 }], "x": [{ "value": 92, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "x", "index": 0 }], "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "scaleY", "index": 0 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "scaleY", "index": 6 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "scaleY", "index": 25 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "scaleY", "index": 30 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "scaleX", "index": 0 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "scaleX", "index": 6 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "scaleX", "index": 25 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "scaleX", "index": 30 }], "rotation": [{ "value": -8, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "rotation", "index": 0 }] } }, { "target": 10, "keyframes": { "y": [{ "value": 37, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "y", "index": 0 }], "x": [{ "value": 179, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "x", "index": 0 }], "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleY", "index": 0 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleY", "index": 6 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleY", "index": 25 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleY", "index": 30 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleX", "index": 0 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleX", "index": 6 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleX", "index": 25 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleX", "index": 30 }], "rotation": [{ "value": 8, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "rotation", "index": 0 }] } }, { "target": 13, "keyframes": { "y": [{ "value": 275, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 0 }], "x": [{ "value": 49, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "x", "index": 0 }], "rotation": [{ "value": -16, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "rotation", "index": 0 }] } }, { "target": 14, "keyframes": { "y": [{ "value": 260, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 0 }], "x": [{ "value": 137, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "x", "index": 0 }], "rotation": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "rotation", "index": 0 }] } }, { "target": 15, "keyframes": { "y": [{ "value": 274, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "y", "index": 0 }], "x": [{ "value": 229, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "x", "index": 0 }], "rotation": [{ "value": 16, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "rotation", "index": 0 }] } }, { "target": 16, "keyframes": { "y": [{ "value": 149, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "y", "index": 0 }], "x": [{ "value": 52, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "x", "index": 0 }], "rotation": [{ "value": -14, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "rotation", "index": 0 }] } }, { "target": 17, "keyframes": { "y": [{ "value": 139, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "y", "index": 0 }], "x": [{ "value": 140, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "x", "index": 0 }], "rotation": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "rotation", "index": 0 }] } }], "name": "ani1_tou", "id": 1, "frameRate": 60, "action": 0 }, { "nodes": [{ "target": 8, "keyframes": { "y": [{ "value": 151, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "y", "index": 0 }], "x": [{ "value": 231, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "x", "index": 0 }], "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "scaleY", "index": 0 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 8, "label": null, "key": "scaleY", "index": 6 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "scaleY", "index": 25 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "scaleY", "index": 30 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "scaleX", "index": 0 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 8, "label": null, "key": "scaleX", "index": 6 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "scaleX", "index": 25 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "scaleX", "index": 30 }], "rotation": [{ "value": 14, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "rotation", "index": 0 }] } }, { "target": 9, "keyframes": { "y": [{ "value": 38, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "y", "index": 0 }], "x": [{ "value": 92, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "x", "index": 0 }], "rotation": [{ "value": -8, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "rotation", "index": 0 }] } }, { "target": 10, "keyframes": { "y": [{ "value": 37, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "y", "index": 0 }], "x": [{ "value": 179, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "x", "index": 0 }], "rotation": [{ "value": 8, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "rotation", "index": 0 }] } }, { "target": 13, "keyframes": { "y": [{ "value": 275, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 0 }], "x": [{ "value": 49, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "x", "index": 0 }], "rotation": [{ "value": -16, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "rotation", "index": 0 }] } }, { "target": 14, "keyframes": { "y": [{ "value": 260, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 0 }], "x": [{ "value": 137, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "x", "index": 0 }], "rotation": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "rotation", "index": 0 }] } }, { "target": 15, "keyframes": { "y": [{ "value": 274, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "y", "index": 0 }], "x": [{ "value": 229, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "x", "index": 0 }], "rotation": [{ "value": 16, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "rotation", "index": 0 }] } }, { "target": 16, "keyframes": { "y": [{ "value": 149, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "y", "index": 0 }], "x": [{ "value": 52, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "x", "index": 0 }], "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleY", "index": 0 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleY", "index": 6 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleY", "index": 25 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleY", "index": 30 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleX", "index": 0 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleX", "index": 6 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleX", "index": 25 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleX", "index": 30 }], "rotation": [{ "value": -14, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "rotation", "index": 0 }] } }, { "target": 17, "keyframes": { "y": [{ "value": 139, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "y", "index": 0 }], "x": [{ "value": 140, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "x", "index": 0 }], "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleY", "index": 0 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleY", "index": 6 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleY", "index": 25 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleY", "index": 30 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleX", "index": 0 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleX", "index": 6 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleX", "index": 25 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleX", "index": 30 }], "rotation": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "rotation", "index": 0 }] } }], "name": "ani1_zhong", "id": 1, "frameRate": 60, "action": 0 }, { "nodes": [{ "target": 8, "keyframes": { "y": [{ "value": 151, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "y", "index": 0 }], "x": [{ "value": 231, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "x", "index": 0 }], "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "scaleY", "index": 0 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "scaleX", "index": 0 }], "rotation": [{ "value": 14, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "rotation", "index": 0 }] } }, { "target": 9, "keyframes": { "y": [{ "value": 38, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "y", "index": 0 }], "x": [{ "value": 92, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "x", "index": 0 }], "rotation": [{ "value": -8, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "rotation", "index": 0 }] } }, { "target": 10, "keyframes": { "y": [{ "value": 37, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "y", "index": 0 }], "x": [{ "value": 179, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "x", "index": 0 }], "rotation": [{ "value": 8, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "rotation", "index": 0 }] } }, { "target": 13, "keyframes": { "y": [{ "value": 275, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 0 }], "x": [{ "value": 48, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "x", "index": 0 }], "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "scaleY", "index": 0 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "scaleY", "index": 6 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "scaleY", "index": 25 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "scaleY", "index": 30 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "scaleX", "index": 0 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "scaleX", "index": 6 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "scaleX", "index": 25 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "scaleX", "index": 30 }], "rotation": [{ "value": -16, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "rotation", "index": 0 }] } }, { "target": 14, "keyframes": { "y": [{ "value": 260, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 0 }], "x": [{ "value": 137, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "x", "index": 0 }], "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleY", "index": 0 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleY", "index": 6 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleY", "index": 25 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleY", "index": 30 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleX", "index": 0 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleX", "index": 6 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleX", "index": 25 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleX", "index": 30 }], "rotation": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "rotation", "index": 0 }] } }, { "target": 15, "keyframes": { "y": [{ "value": 274, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "y", "index": 0 }], "x": [{ "value": 229, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "x", "index": 0 }], "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleY", "index": 0 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleY", "index": 6 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleY", "index": 25 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleY", "index": 30 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleX", "index": 0 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleX", "index": 6 }, { "value": 1.4, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleX", "index": 25 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleX", "index": 30 }], "rotation": [{ "value": 16, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "rotation", "index": 0 }] } }, { "target": 16, "keyframes": { "y": [{ "value": 149, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "y", "index": 0 }], "x": [{ "value": 52, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "x", "index": 0 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleX", "index": 0 }], "rotation": [{ "value": -14, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "rotation", "index": 0 }] } }, { "target": 17, "keyframes": { "y": [{ "value": 139, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "y", "index": 0 }], "x": [{ "value": 140, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "x", "index": 0 }], "rotation": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "rotation", "index": 0 }] } }], "name": "ani1_wei", "id": 1, "frameRate": 60, "action": 0 }] };
            return showcardanimationUI;
        }(View));
        bazhang.showcardanimationUI = showcardanimationUI;
    })(bazhang = ui.bazhang || (ui.bazhang = {}));
})(ui || (ui = {}));
(function (ui) {
    var bazhang;
    (function (bazhang) {
        var showcradtypeUI = /** @class */ (function (_super) {
            __extends(showcradtypeUI, _super);
            function showcradtypeUI() {
                return _super.call(this) || this;
            }
            showcradtypeUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.bazhang.showcradtypeUI.uiView);
            };
            showcradtypeUI.uiView = { "type": "View", "props": { "width": 210, "height": 60 }, "child": [{ "type": "Image", "props": { "var": "_bg", "skin": "bazhang/showcard_bg_2.png", "centerY": 0, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 22 }, { "type": "Image", "props": { "var": "_type", "skin": "bazhang/selectCardLayer/shoubai/img_shoupai_cardType_1.png", "centerY": 0, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 23 }], "animations": [{ "nodes": [{ "target": 22, "keyframes": { "var": [{ "value": "_bg", "tweenMethod": "linearNone", "tween": false, "target": 22, "key": "var", "index": 0 }, { "value": "_bg", "tweenMethod": "linearNone", "tween": false, "target": 22, "key": "var", "index": 4 }], "scaleX": [{ "value": 0.6, "tweenMethod": "linearNone", "tween": true, "target": 22, "key": "scaleX", "index": 0 }, { "value": 1.05, "tweenMethod": "linearNone", "tween": true, "target": 22, "key": "scaleX", "index": 3 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 22, "key": "scaleX", "index": 4 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 22, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 22, "key": "alpha", "index": 3 }] } }, { "target": 23, "keyframes": { "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "scaleY", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "scaleY", "index": 4 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "scaleX", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "scaleX", "index": 4 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return showcradtypeUI;
        }(View));
        bazhang.showcradtypeUI = showcradtypeUI;
    })(bazhang = ui.bazhang || (ui.bazhang = {}));
})(ui || (ui = {}));
(function (ui) {
    var bazhang;
    (function (bazhang) {
        var showspecialUI = /** @class */ (function (_super) {
            __extends(showspecialUI, _super);
            function showspecialUI() {
                return _super.call(this) || this;
            }
            showspecialUI.prototype.createChildren = function () {
                View.regComponent("ui.poker.CardBigUI", ui.poker.CardBigUI);
                _super.prototype.createChildren.call(this);
                this.createView(ui.bazhang.showspecialUI.uiView);
            };
            showspecialUI.uiView = { "type": "View", "props": { "width": 640, "height": 960 }, "child": [{ "type": "Image", "props": { "y": 471, "x": 312, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "y": 189, "x": 0, "width": 640, "height": 422, "centerY": -80, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": -9, "x": 169, "width": 37, "skin": "bazhang/ani/xing6.png", "height": 38, "alpha": 0 }, "compId": 35 }, { "type": "Image", "props": { "y": 0, "x": 383, "skin": "bazhang/ani/xing6.png", "alpha": 0 }, "compId": 32 }, { "type": "Image", "props": { "y": -13, "x": 344, "width": 30, "skin": "bazhang/ani/xing6.png", "height": 31, "alpha": 0 }, "compId": 33 }, { "type": "Image", "props": { "y": -15, "x": 211, "width": 30, "skin": "bazhang/ani/xing6.png", "height": 31, "alpha": 0 }, "compId": 34 }, { "type": "Image", "props": { "y": 1, "x": 307, "width": 24, "skin": "bazhang/ani/xing6.png", "height": 25, "alpha": 0 }, "compId": 37 }, { "type": "Image", "props": { "y": 0, "x": 419, "width": 33, "skin": "bazhang/ani/xing6.png", "height": 34, "alpha": 0 }, "compId": 38 }, { "type": "Image", "props": { "y": 4, "x": 183, "width": 29, "skin": "bazhang/ani/xing6.png", "height": 30, "alpha": 0 }, "compId": 39 }, { "type": "Image", "props": { "y": 180, "x": 320, "skin": "bazhang/ani/guang1.png", "scaleY": 1.2, "scaleX": 1.2, "rotation": 100, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5, "alpha": 1 }, "compId": 31 }, { "type": "Image", "props": { "y": -13, "x": 313, "width": 24, "skin": "bazhang/ani/xing6.png", "height": 25, "alpha": 0 }, "compId": 36 }, { "type": "Image", "props": { "y": 138, "width": 538, "var": "_cardBox", "skin": "bazhang/specialcard_bg.png", "height": 271, "centerX": 0, "anchorY": 0, "anchorX": 0.5, "alpha": 1 }, "child": [{ "type": "Box", "props": { "y": 35, "x": 45, "var": "_avatar" } }, { "type": "CardBig", "props": { "y": 140, "x": 46, "var": "_card_0", "scaleY": 0.67, "scaleX": 0.67, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 140, "x": 98, "var": "_card_1", "scaleY": 0.67, "scaleX": 0.67, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 140, "x": 150, "var": "_card_2", "scaleY": 0.67, "scaleX": 0.67, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 140, "x": 202, "var": "_card_3", "scaleY": 0.67, "scaleX": 0.67, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 140, "x": 255, "var": "_card_4", "scaleY": 0.67, "scaleX": 0.67, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 140, "x": 307, "var": "_card_5", "scaleY": 0.67, "scaleX": 0.67, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 140, "x": 359, "var": "_card_6", "scaleY": 0.67, "scaleX": 0.67, "runtime": "ui.poker.CardBigUI" } }, { "type": "CardBig", "props": { "y": 140, "x": 411, "var": "_card_7", "scaleY": 0.67, "scaleX": 0.67, "runtime": "ui.poker.CardBigUI" } }, { "type": "Image", "props": { "y": 26, "x": 41, "skin": "tongyong/kuang.png" } }] }, { "type": "Image", "props": { "y": 119, "skin": "bazhang/ani/specialcard_title.png", "scaleX": 1, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5, "alpha": 1 }, "compId": 2 }, { "type": "Image", "props": { "y": 196, "x": 318, "skin": "bazhang/ani/xing1.png", "scaleY": 1, "scaleX": 1, "anchorY": 1, "anchorX": 0, "alpha": 1 }, "compId": 26 }, { "type": "Image", "props": { "y": 196, "x": 318, "skin": "bazhang/ani/xing2.png", "scaleY": 1, "scaleX": 1, "anchorY": 1, "anchorX": 0, "alpha": 1 }, "compId": 27 }, { "type": "Image", "props": { "y": 196, "x": 318, "skin": "bazhang/ani/xing3.png", "scaleY": 1, "scaleX": 1, "anchorY": 1, "anchorX": 1, "alpha": 1 }, "compId": 28 }, { "type": "Image", "props": { "y": 196, "x": 318, "skin": "bazhang/ani/xing4.png", "scaleY": 1, "scaleX": 1, "anchorY": 1, "anchorX": 1, "alpha": 1 }, "compId": 29 }, { "type": "Image", "props": { "y": 196, "x": 320, "skin": "bazhang/ani/xing5.png", "scaleY": 1, "scaleX": 1, "centerX": 0, "anchorY": 1, "anchorX": 0.5, "alpha": 1 }, "compId": 30 }, { "type": "Image", "props": { "var": "_type", "skin": "bazhang/img_special_0.png", "scaleY": 1, "scaleX": 1, "centerY": -89.5, "centerX": 0, "anchorY": 2, "anchorX": 0.5, "alpha": 1 }, "compId": 7 }, { "type": "Label", "props": { "y": 196, "x": 424, "width": 65, "var": "_score", "text": "+1000", "font": "font_num_12" } }, { "type": "Image", "props": { "y": 197, "x": 332, "skin": "bazhang/special_title.png" } }] }], "animations": [{ "nodes": [{ "target": 2, "keyframes": { "scaleX": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 7 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 8 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 7 }] } }, { "target": 7, "keyframes": { "scaleY": [{ "value": 2, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "scaleY", "index": 7 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "scaleY", "index": 34 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "scaleY", "index": 59 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "scaleY", "index": 84 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "scaleY", "index": 109 }], "scaleX": [{ "value": 2, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "scaleX", "index": 7 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "scaleX", "index": 34 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "scaleX", "index": 59 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "scaleX", "index": 84 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "scaleX", "index": 109 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 7 }] } }, { "target": 30, "keyframes": { "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 30, "key": "scaleY", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 30, "key": "scaleY", "index": 12 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 30, "key": "scaleY", "index": 21 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 30, "key": "scaleX", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 30, "key": "scaleX", "index": 12 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 30, "key": "scaleX", "index": 21 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 30, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 30, "key": "alpha", "index": 12 }] } }, { "target": 26, "keyframes": { "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 26, "key": "scaleY", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 26, "key": "scaleY", "index": 12 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 26, "key": "scaleY", "index": 21 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 26, "key": "scaleX", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 26, "key": "scaleX", "index": 12 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 26, "key": "scaleX", "index": 21 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 26, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 26, "key": "alpha", "index": 12 }] } }, { "target": 28, "keyframes": { "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 28, "key": "scaleY", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 28, "key": "scaleY", "index": 12 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 28, "key": "scaleY", "index": 21 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 28, "key": "scaleX", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 28, "key": "scaleX", "index": 12 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 28, "key": "scaleX", "index": 21 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 28, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 28, "key": "alpha", "index": 12 }] } }, { "target": 29, "keyframes": { "x": [{ "value": 318, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "x", "index": 0 }], "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "scaleY", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "scaleY", "index": 12 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "scaleY", "index": 21 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "scaleX", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "scaleX", "index": 12 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "scaleX", "index": 21 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "alpha", "index": 12 }] } }, { "target": 27, "keyframes": { "x": [{ "value": 318, "tweenMethod": "linearNone", "tween": true, "target": 27, "key": "x", "index": 0 }], "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 27, "key": "scaleY", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 27, "key": "scaleY", "index": 12 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 27, "key": "scaleY", "index": 21 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 27, "key": "scaleX", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 27, "key": "scaleX", "index": 12 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 27, "key": "scaleX", "index": 21 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 27, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 27, "key": "alpha", "index": 12 }] } }, { "target": 31, "keyframes": { "y": [{ "value": 200, "tweenMethod": "linearNone", "tween": true, "target": 31, "key": "y", "index": 0 }, { "value": 170, "tweenMethod": "linearNone", "tween": true, "target": 31, "key": "y", "index": 8 }, { "value": 180, "tweenMethod": "linearNone", "tween": true, "target": 31, "key": "y", "index": 18 }], "x": [{ "value": 320, "tweenMethod": "linearNone", "tween": true, "target": 31, "key": "x", "index": 0 }], "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 31, "key": "scaleY", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 31, "key": "scaleY", "index": 8 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 31, "key": "scaleX", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 31, "key": "scaleX", "index": 8 }], "rotation": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 31, "key": "rotation", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 31, "key": "rotation", "index": 18 }, { "value": 100, "tweenMethod": "linearNone", "tween": true, "target": 31, "key": "rotation", "index": 90 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 31, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 31, "key": "alpha", "index": 8 }] } }, { "target": 35, "keyframes": { "y": [{ "value": 74, "tweenMethod": "linearNone", "tween": true, "target": 35, "key": "y", "index": 0 }, { "value": 85, "tweenMethod": "linearNone", "tween": true, "target": 35, "key": "y", "index": 21 }, { "value": -9, "tweenMethod": "linearNone", "tween": true, "target": 35, "key": "y", "index": 60 }], "x": [{ "value": 206, "tweenMethod": "linearNone", "tween": true, "target": 35, "key": "x", "index": 0 }, { "value": 223, "tweenMethod": "linearNone", "tween": true, "target": 35, "key": "x", "index": 21 }, { "value": 169, "tweenMethod": "linearNone", "tween": true, "target": 35, "key": "x", "index": 60 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 35, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 35, "key": "alpha", "index": 21 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 35, "key": "alpha", "index": 60 }] } }, { "target": 32, "keyframes": { "y": [{ "value": 83, "tweenMethod": "linearNone", "tween": true, "target": 32, "key": "y", "index": 0 }, { "value": 83, "tweenMethod": "linearNone", "tween": true, "target": 32, "key": "y", "index": 21 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 32, "key": "y", "index": 60 }], "x": [{ "value": 343, "tweenMethod": "linearNone", "tween": true, "target": 32, "key": "x", "index": 0 }, { "value": 343, "tweenMethod": "linearNone", "tween": true, "target": 32, "key": "x", "index": 21 }, { "value": 383, "tweenMethod": "linearNone", "tween": true, "target": 32, "key": "x", "index": 60 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 32, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 32, "key": "alpha", "index": 21 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 32, "key": "alpha", "index": 60 }] } }, { "target": 33, "keyframes": { "y": [{ "value": 78, "tweenMethod": "linearNone", "tween": true, "target": 33, "key": "y", "index": 0 }, { "value": 78, "tweenMethod": "linearNone", "tween": true, "target": 33, "key": "y", "index": 21 }, { "value": -13, "tweenMethod": "linearNone", "tween": true, "target": 33, "key": "y", "index": 60 }], "x": [{ "value": 333, "tweenMethod": "linearNone", "tween": true, "target": 33, "key": "x", "index": 0 }, { "value": 333, "tweenMethod": "linearNone", "tween": true, "target": 33, "key": "x", "index": 21 }, { "value": 344, "tweenMethod": "linearNone", "tween": true, "target": 33, "key": "x", "index": 60 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 33, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 33, "key": "alpha", "index": 21 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 33, "key": "alpha", "index": 60 }] } }, { "target": 36, "keyframes": { "y": [{ "value": 97, "tweenMethod": "linearNone", "tween": true, "target": 36, "key": "y", "index": 0 }, { "value": 97, "tweenMethod": "linearNone", "tween": true, "target": 36, "key": "y", "index": 21 }, { "value": -13, "tweenMethod": "linearNone", "tween": true, "target": 36, "key": "y", "index": 60 }], "x": [{ "value": 297, "tweenMethod": "linearNone", "tween": true, "target": 36, "key": "x", "index": 0 }, { "value": 297, "tweenMethod": "linearNone", "tween": true, "target": 36, "key": "x", "index": 21 }, { "value": 313, "tweenMethod": "linearNone", "tween": true, "target": 36, "key": "x", "index": 60 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 36, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 36, "key": "alpha", "index": 21 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 36, "key": "alpha", "index": 60 }] } }, { "target": 34, "keyframes": { "y": [{ "value": 87, "tweenMethod": "linearNone", "tween": true, "target": 34, "key": "y", "index": 0 }, { "value": 87, "tweenMethod": "linearNone", "tween": true, "target": 34, "key": "y", "index": 21 }, { "value": -15, "tweenMethod": "linearNone", "tween": true, "target": 34, "key": "y", "index": 60 }], "x": [{ "value": 248, "tweenMethod": "linearNone", "tween": true, "target": 34, "key": "x", "index": 0 }, { "value": 248, "tweenMethod": "linearNone", "tween": true, "target": 34, "key": "x", "index": 21 }, { "value": 211, "tweenMethod": "linearNone", "tween": true, "target": 34, "key": "x", "index": 60 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 34, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 34, "key": "alpha", "index": 21 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 34, "key": "alpha", "index": 60 }] } }, { "target": 39, "keyframes": { "y": [{ "value": 100, "tweenMethod": "linearNone", "tween": true, "target": 39, "key": "y", "index": 0 }, { "value": 100, "tweenMethod": "linearNone", "tween": true, "target": 39, "key": "y", "index": 40 }, { "value": 4, "tweenMethod": "linearNone", "tween": true, "target": 39, "key": "y", "index": 75 }], "x": [{ "value": 233, "tweenMethod": "linearNone", "tween": true, "target": 39, "key": "x", "index": 0 }, { "value": 233, "tweenMethod": "linearNone", "tween": true, "target": 39, "key": "x", "index": 40 }, { "value": 183, "tweenMethod": "linearNone", "tween": true, "target": 39, "key": "x", "index": 75 }], "width": [{ "value": 29, "tweenMethod": "linearNone", "tween": true, "target": 39, "key": "width", "index": 0 }], "height": [{ "value": 30, "tweenMethod": "linearNone", "tween": true, "target": 39, "key": "height", "index": 0 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 39, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 39, "key": "alpha", "index": 40 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 39, "key": "alpha", "index": 75 }] } }, { "target": 38, "keyframes": { "y": [{ "value": 101, "tweenMethod": "linearNone", "tween": true, "target": 38, "key": "y", "index": 0 }, { "value": 101, "tweenMethod": "linearNone", "tween": true, "target": 38, "key": "y", "index": 40 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 38, "key": "y", "index": 75 }], "x": [{ "value": 368, "tweenMethod": "linearNone", "tween": true, "target": 38, "key": "x", "index": 0 }, { "value": 368, "tweenMethod": "linearNone", "tween": true, "target": 38, "key": "x", "index": 40 }, { "value": 419, "tweenMethod": "linearNone", "tween": true, "target": 38, "key": "x", "index": 75 }], "width": [{ "value": 33, "tweenMethod": "linearNone", "tween": true, "target": 38, "key": "width", "index": 0 }], "height": [{ "value": 34, "tweenMethod": "linearNone", "tween": true, "target": 38, "key": "height", "index": 0 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 38, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 38, "key": "alpha", "index": 40 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 38, "key": "alpha", "index": 75 }] } }, { "target": 37, "keyframes": { "y": [{ "value": 97, "tweenMethod": "linearNone", "tween": true, "target": 37, "key": "y", "index": 0 }, { "value": 97, "tweenMethod": "linearNone", "tween": true, "target": 37, "key": "y", "index": 40 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 37, "key": "y", "index": 75 }], "x": [{ "value": 303, "tweenMethod": "linearNone", "tween": true, "target": 37, "key": "x", "index": 0 }, { "value": 303, "tweenMethod": "linearNone", "tween": true, "target": 37, "key": "x", "index": 40 }, { "value": 307, "tweenMethod": "linearNone", "tween": true, "target": 37, "key": "x", "index": 75 }], "width": [{ "value": 24, "tweenMethod": "linearNone", "tween": true, "target": 37, "key": "width", "index": 0 }], "height": [{ "value": 25, "tweenMethod": "linearNone", "tween": true, "target": 37, "key": "height", "index": 0 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 37, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 37, "key": "alpha", "index": 40 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 37, "key": "alpha", "index": 75 }] } }], "name": "ani1", "id": 1, "frameRate": 60, "action": 0 }] };
            return showspecialUI;
        }(View));
        bazhang.showspecialUI = showspecialUI;
    })(bazhang = ui.bazhang || (ui.bazhang = {}));
})(ui || (ui = {}));
(function (ui) {
    var club;
    (function (club) {
        var ClubUI = /** @class */ (function (_super) {
            __extends(ClubUI, _super);
            function ClubUI() {
                return _super.call(this) || this;
            }
            ClubUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.club.ClubUI.uiView);
            };
            ClubUI.uiView = { "type": "View", "props": { "width": 640, "height": 1030 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_bg", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.01 } }, { "type": "Image", "props": { "y": 0, "skin": "tongyong/tongyong_top.png", "right": 0, "left": 0 } }, { "type": "Image", "props": { "y": 28, "skin": "club/img_1.png", "centerX": 0.5 } }, { "type": "BaseButton", "props": { "y": 13, "var": "_btnAdd", "stateNum": 2, "skin": "club/btn_add.png", "right": 13, "label": "" } }, { "type": "BaseButton", "props": { "y": 174, "var": "_btnCreate", "stateNum": 2, "skin": "club/btn_create.png", "label": "", "centerX": 0.5 } }, { "type": "BaseButton", "props": { "y": 402, "var": "_btnJoin", "stateNum": 2, "skin": "club/btn_join.png", "label": "", "centerX": 0.5 } }, { "type": "List", "props": { "y": 100, "x": 21, "width": 598, "var": "_list", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 100, "spaceY": 10, "repeatX": 1, "centerX": 0, "bottom": 150 } }, { "type": "Image", "props": { "y": 0, "x": 0, "var": "_boxMask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "y": 78, "width": 298, "var": "_boxAdd", "right": 17, "height": 172 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "club/img_2.png" } }, { "type": "BaseButton", "props": { "y": 13, "x": 0, "var": "_btnCreate2", "stateNum": 2, "skin": "club/btn_create_2.png", "label": "" } }, { "type": "BaseButton", "props": { "y": 90, "x": 0, "var": "_btnJoin2", "stateNum": 2, "skin": "club/btn_join_2.png", "label": "" } }] }] };
            return ClubUI;
        }(View));
        club.ClubUI = ClubUI;
    })(club = ui.club || (ui.club = {}));
})(ui || (ui = {}));
(function (ui) {
    var club;
    (function (club) {
        var ClubAlertUI = /** @class */ (function (_super) {
            __extends(ClubAlertUI, _super);
            function ClubAlertUI() {
                return _super.call(this) || this;
            }
            ClubAlertUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.club.ClubAlertUI.uiView);
            };
            ClubAlertUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 600, "height": 400 }, "child": [{ "type": "Image", "props": { "y": 10, "x": 10, "var": "_mask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "y": 10, "x": 10, "width": 524, "height": 294, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "tongyong/tongyong_tip.png", "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 5, "skin": "tongyong/tongyong_tishi.png", "centerX": 0 } }] }, { "type": "HTMLDivElement", "props": { "y": 71, "x": 40, "width": 444, "var": "_labMsg", "innerHTML": "htmlText", "height": 115 } }, { "type": "BaseButton", "props": { "y": 200, "var": "_btnCancel", "stateNum": 2, "skin": "tongyong/tongyong_btn_quxiao.png", "labelSize": 30, "centerX": -115 } }, { "type": "BaseButton", "props": { "y": 200, "var": "_btnConfirm", "stateNum": 2, "skin": "tongyong/tongyong_btn_queding.png", "labelSize": 30, "centerX": 115 } }] }] };
            return ClubAlertUI;
        }(View));
        club.ClubAlertUI = ClubAlertUI;
    })(club = ui.club || (ui.club = {}));
})(ui || (ui = {}));
(function (ui) {
    var club;
    (function (club) {
        var ClubCreateUI = /** @class */ (function (_super) {
            __extends(ClubCreateUI, _super);
            function ClubCreateUI() {
                return _super.call(this) || this;
            }
            ClubCreateUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.club.ClubCreateUI.uiView);
            };
            ClubCreateUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 640, "height": 960 }, "child": [{ "type": "Image", "props": { "var": "_mask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "y": 271, "width": 524, "height": 294, "centerX": 0 }, "child": [{ "type": "Image", "props": { "width": 620, "top": 0, "skin": "tongyong/tongyong_tip.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "height": 940, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 5, "skin": "club/img_3.png", "centerX": 0 } }] }, { "type": "BaseButton", "props": { "y": -30, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "right": -30 } }, { "type": "TextInput", "props": { "y": 99, "var": "_input", "type": "text", "text": "从上海将冻成狗", "skin": "club/img_4.png", "sizeGrid": "14,24,21,21", "right": 40, "promptColor": "#847568", "prompt": "请输入俱乐部昵称", "padding": "1,1,1,20", "left": 40, "height": 60, "fontSize": 26, "color": "#9b5036", "align": "left" } }, { "type": "BaseButton", "props": { "y": 203, "var": "_btnCreate", "stateNum": 2, "skin": "club/btn_create_3.png", "labelSize": 30, "centerX": 0 } }] }] };
            return ClubCreateUI;
        }(View));
        club.ClubCreateUI = ClubCreateUI;
    })(club = ui.club || (ui.club = {}));
})(ui || (ui = {}));
(function (ui) {
    var club;
    (function (club) {
        var ClubInUI = /** @class */ (function (_super) {
            __extends(ClubInUI, _super);
            function ClubInUI() {
                return _super.call(this) || this;
            }
            ClubInUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.club.ClubInUI.uiView);
            };
            ClubInUI.uiView = { "type": "View", "props": { "width": 640, "height": 960 }, "child": [{ "type": "BaseButton", "props": { "y": 70, "var": "_btnJoin", "stateNum": 2, "skin": "tongyong/tongyong_btn_1.png", "sizeGrid": "15,32,20,32", "labelSize": 30, "label": "加入", "centerX": 193.5 } }, { "type": "List", "props": { "y": 141, "width": 600, "var": "_list", "height": 764, "centerX": 0 } }] };
            return ClubInUI;
        }(View));
        club.ClubInUI = ClubInUI;
    })(club = ui.club || (ui.club = {}));
})(ui || (ui = {}));
(function (ui) {
    var club;
    (function (club) {
        var ClubInfoUI = /** @class */ (function (_super) {
            __extends(ClubInfoUI, _super);
            function ClubInfoUI() {
                return _super.call(this) || this;
            }
            ClubInfoUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.club.ClubInfoUI.uiView);
            };
            ClubInfoUI.uiView = { "type": "View", "props": { "width": 640, "height": 1028 }, "child": [{ "type": "Image", "props": { "var": "_mask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "right": 10, "left": 10, "height": 847, "centerY": 0 }, "child": [{ "type": "Image", "props": { "width": 620, "top": 0, "skin": "tongyong/tongyong_bg.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "height": 978, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "width": 319, "skin": "tongyong/tongyong_bg_title.png", "centerX": 0 }, "child": [{ "type": "Image", "props": { "var": "_gamename", "skin": "club/img_18.png", "centerY": -7, "centerX": 0 } }] }, { "type": "Image", "props": { "top": 80, "skin": "tongyong/tongyong_top_border_1.png", "sizeGrid": "18,23,21,21", "right": 15, "left": 15, "height": 700, "bottom": 21 } }] }, { "type": "BaseButton", "props": { "y": -30, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "right": -27 } }, { "type": "Image", "props": { "y": 285, "x": 40, "width": 540, "skin": "club/img_4.png", "sizeGrid": "16,11,16,16", "height": 434, "centerX": 0 } }, { "type": "Image", "props": { "y": 119, "x": 54, "skin": "club/img_10.png" } }, { "type": "Label", "props": { "y": 129, "x": 150, "var": "_labTitle", "text": "王者俱乐部", "height": 24, "fontSize": 24, "color": "#9b5036" } }, { "type": "Label", "props": { "y": 169, "x": 150, "var": "_labId", "text": "ID:123456", "fontSize": 20, "color": "#9b5036" } }, { "type": "BaseButton", "props": { "y": 122, "x": 312, "var": "_btnModify", "stateNum": 2, "skin": "club/btn_modify.png", "label": "" } }, { "type": "Label", "props": { "y": 294, "text": "俱乐部成员", "fontSize": 28, "color": "#9b5036", "centerX": 0.3671875, "bold": true } }, { "type": "Image", "props": { "y": 336, "skin": "tongyong/tongyong_line.png", "centerX": 0.5 } }, { "type": "BaseButton", "props": { "var": "_btnDispose", "stateNum": 2, "skin": "club/btn_dispose.png", "label": "", "centerX": -150, "bottom": 45 } }, { "type": "BaseButton", "props": { "var": "_btnManager", "stateNum": 2, "skin": "club/btn_manager.png", "label": "", "centerX": 150, "bottom": 45 } }, { "type": "BaseButton", "props": { "var": "_btnExit", "stateNum": 2, "skin": "club/btn_exit.png", "label": "", "centerX": 0, "bottom": 45 } }, { "type": "List", "props": { "y": 348, "x": 65, "width": 490, "var": "_list", "vScrollBarSkin": "tongyong/jindutiaodi.png", "spaceY": 10, "spaceX": 25, "repeatX": 5, "height": 357, "centerX": 0 } }, { "type": "Box", "props": { "y": 213, "x": 52, "var": "_boxDiamond" }, "child": [{ "type": "Image", "props": { "y": 9, "skin": "club/img_19.png" } }, { "type": "Image", "props": { "y": 11, "x": 55, "skin": "club/img_17.png" } }, { "type": "Label", "props": { "y": 19, "x": 87, "var": "_labDiamond", "text": "90", "fontSize": 24, "color": "#9b5036" } }, { "type": "BaseButton", "props": { "x": 156, "var": "_btnBuy", "stateNum": 2, "skin": "club/btn_buy.png", "label": "" } }] }] }] };
            return ClubInfoUI;
        }(View));
        club.ClubInfoUI = ClubInfoUI;
    })(club = ui.club || (ui.club = {}));
})(ui || (ui = {}));
(function (ui) {
    var club;
    (function (club) {
        var ClubInfoRendererUI = /** @class */ (function (_super) {
            __extends(ClubInfoRendererUI, _super);
            function ClubInfoRendererUI() {
                return _super.call(this) || this;
            }
            ClubInfoRendererUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.club.ClubInfoRendererUI.uiView);
            };
            ClubInfoRendererUI.uiView = { "type": "View", "props": { "width": 600, "height": 155 }, "child": [{ "type": "Image", "props": { "y": 5, "x": 2, "width": 600, "skin": "tongyong/tongyong_tishikuang_1.png", "sizeGrid": "100,60,60,60", "height": 155 } }, { "type": "Label", "props": { "y": 26, "var": "_labNickname", "text": "大大的俱乐部", "fontSize": 32, "color": "#000000", "centerX": 0 } }, { "type": "Label", "props": { "y": 84, "x": 126, "var": "_labId", "text": "id：xxxx", "fontSize": 20 } }, { "type": "Image", "props": { "y": 83, "x": 49, "width": 50, "var": "_img", "height": 50 } }, { "type": "Label", "props": { "y": 111, "x": 126, "var": "_labMember", "text": "成员：55/99", "fontSize": 20 } }, { "type": "BaseButton", "props": { "y": 83, "var": "_btnMj", "stateNum": 2, "skin": "tongyong/tongyong_btn_1.png", "sizeGrid": "15,32,20,32", "labelSize": 20, "labelPadding": "-10", "label": "麻将局", "centerX": 57.5 } }, { "type": "BaseButton", "props": { "y": 83, "var": "_btnPoker", "stateNum": 2, "skin": "tongyong/tongyong_btn_1.png", "sizeGrid": "15,32,20,32", "labelSize": 20, "labelPadding": "-10", "label": "扑克局", "centerX": 201.5 } }, { "type": "Label", "props": { "y": 107, "x": 354, "var": "_labMjCount", "text": 3, "fontSize": 16 } }, { "type": "Label", "props": { "y": 107, "x": 498, "var": "_labPokerCount", "text": 3, "fontSize": 16 } }] };
            return ClubInfoRendererUI;
        }(View));
        club.ClubInfoRendererUI = ClubInfoRendererUI;
    })(club = ui.club || (ui.club = {}));
})(ui || (ui = {}));
(function (ui) {
    var club;
    (function (club) {
        var ClubJoinUI = /** @class */ (function (_super) {
            __extends(ClubJoinUI, _super);
            function ClubJoinUI() {
                return _super.call(this) || this;
            }
            ClubJoinUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.club.ClubJoinUI.uiView);
            };
            ClubJoinUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 640, "height": 960 }, "child": [{ "type": "Image", "props": { "y": 10, "x": 10, "var": "_mask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "var": "_box", "right": 10, "left": 10, "height": 510, "centerY": 0 }, "child": [{ "type": "Image", "props": { "width": 620, "top": 0, "skin": "tongyong/tongyong_tip.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "height": 940, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 5, "skin": "club/img_5.png", "centerX": 0 } }] }, { "type": "BaseButton", "props": { "y": -30, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "right": -30 } }, { "type": "TextInput", "props": { "y": 99, "var": "_input", "type": "text", "skin": "club/img_4.png", "sizeGrid": "14,24,21,21", "right": 40, "promptColor": "#847568", "prompt": "请输入俱乐部ID", "padding": "1,1,1,20", "left": 40, "height": 60, "fontSize": 26, "color": "#9b5036", "align": "left" } }] }] };
            return ClubJoinUI;
        }(View));
        club.ClubJoinUI = ClubJoinUI;
    })(club = ui.club || (ui.club = {}));
})(ui || (ui = {}));
(function (ui) {
    var club;
    (function (club) {
        var ClubListRendererUI = /** @class */ (function (_super) {
            __extends(ClubListRendererUI, _super);
            function ClubListRendererUI() {
                return _super.call(this) || this;
            }
            ClubListRendererUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.club.ClubListRendererUI.uiView);
            };
            ClubListRendererUI.uiView = { "type": "View", "props": { "width": 542, "height": 100 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "club/img_7.png" } }, { "type": "Label", "props": { "y": 15, "x": 24, "var": "_labTitle", "text": "大大大俱乐部", "fontSize": 24, "color": "#9b5036" } }, { "type": "BaseButton", "props": { "var": "_btnLook", "stateNum": 2, "skin": "club/btn_look.png", "right": 20, "labelSize": 30, "centerY": 0 } }, { "type": "Label", "props": { "y": 56, "x": 24, "var": "_labId", "text": "ID：2354", "fontSize": 20, "color": "#9b5036" } }, { "type": "Label", "props": { "y": 56, "x": 215, "var": "_labMember", "text": "人数：250", "fontSize": 20, "color": "#9b5036" } }, { "type": "BaseButton", "props": { "var": "_btnJoin", "stateNum": 2, "skin": "club/btn_join_3.png", "right": 20, "labelSize": 30, "centerY": 0 } }] };
            return ClubListRendererUI;
        }(View));
        club.ClubListRendererUI = ClubListRendererUI;
    })(club = ui.club || (ui.club = {}));
})(ui || (ui = {}));
(function (ui) {
    var club;
    (function (club) {
        var ClubMemberUI = /** @class */ (function (_super) {
            __extends(ClubMemberUI, _super);
            function ClubMemberUI() {
                return _super.call(this) || this;
            }
            ClubMemberUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.club.ClubMemberUI.uiView);
            };
            ClubMemberUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 640, "height": 960 }, "child": [{ "type": "Image", "props": { "y": 40, "x": 40, "var": "_mask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "y": 20, "x": 40, "width": 524, "height": 294, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "width": 620, "top": -5, "skin": "tongyong/tongyong_tip.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "height": 940, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 5, "skin": "club/img_22.png", "centerX": 0 } }] }, { "type": "BaseButton", "props": { "y": -30, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "right": -30 } }, { "type": "BaseButton", "props": { "y": 185, "var": "_btnKick", "stateNum": 2, "skin": "club/btn_kick.png", "labelSize": 30, "centerX": 0 } }, { "type": "Image", "props": { "y": 78, "x": 39, "width": 78, "visible": false, "var": "_imgFemale", "skin": "tongyong/tongyong_avatar_female.png", "height": 78 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 78, "var": "_femaleMask", "skin": "tongyong/tongyong_avatar_mask.png", "renderType": "mask", "height": 78 } }] }, { "type": "Image", "props": { "y": 78, "x": 39, "width": 78, "visible": false, "var": "_imgMale", "skin": "tongyong/tongyong_avatar_male.png", "height": 78 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 78, "var": "_maleMask", "skin": "tongyong/tongyong_avatar_mask.png", "renderType": "mask", "height": 78 } }] }, { "type": "Image", "props": { "y": 78, "x": 39, "width": 78, "var": "_imgHead", "height": 78 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 78, "var": "_headMask", "skin": "tongyong/tongyong_avatar_mask.png", "sizeGrid": "29,31,32,29", "renderType": "mask", "height": 78 } }] }, { "type": "Label", "props": { "y": 85, "x": 140, "var": "_labNickname", "text": "label", "fontSize": 24, "color": "#9b5036" } }, { "type": "Label", "props": { "y": 128, "x": 140, "var": "_labId", "text": "label", "fontSize": 20, "color": "#9b5036" } }] }] };
            return ClubMemberUI;
        }(View));
        club.ClubMemberUI = ClubMemberUI;
    })(club = ui.club || (ui.club = {}));
})(ui || (ui = {}));
(function (ui) {
    var club;
    (function (club) {
        var ClubPayTypeUI = /** @class */ (function (_super) {
            __extends(ClubPayTypeUI, _super);
            function ClubPayTypeUI() {
                return _super.call(this) || this;
            }
            ClubPayTypeUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.club.ClubPayTypeUI.uiView);
            };
            ClubPayTypeUI.uiView = { "type": "View", "props": { "width": 640, "top": 0, "right": 0, "left": 0, "height": 960, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 30, "x": 30, "var": "_mask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "y": 10, "x": 30, "width": 524, "height": 294, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "width": 620, "top": 0, "skin": "tongyong/tongyong_tip.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "height": 940, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 5, "skin": "club/img_21.png", "centerX": 0 } }] }, { "type": "BaseButton", "props": { "y": -30, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "right": -30 } }, { "type": "BaseButton", "props": { "y": 200, "var": "_btnConfirm", "stateNum": 2, "skin": "tongyong/tongyong_btn_queding.png", "labelSize": 30, "centerX": 0 } }, { "type": "RadioGroup", "props": { "y": 124, "var": "_rad", "stateNum": 2, "space": 24, "skin": "createTable/createTable_radio_btn_1.png", "selectedIndex": 0, "labels": "俱乐部支付,开房者支付/AA支付", "labelSize": 24, "labelPadding": "12", "labelColors": "#9b5036,#9b5036,#9b5036,#9b5036", "direction": "horizontal", "centerX": 0 } }, { "type": "Label", "props": { "y": 77, "x": 39, "text": "开局支付方式", "fontSize": 28, "color": "#9b5036" } }] }] };
            return ClubPayTypeUI;
        }(View));
        club.ClubPayTypeUI = ClubPayTypeUI;
    })(club = ui.club || (ui.club = {}));
})(ui || (ui = {}));
(function (ui) {
    var club;
    (function (club) {
        var ClubPlayerRenderUI = /** @class */ (function (_super) {
            __extends(ClubPlayerRenderUI, _super);
            function ClubPlayerRenderUI() {
                return _super.call(this) || this;
            }
            ClubPlayerRenderUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.club.ClubPlayerRenderUI.uiView);
            };
            ClubPlayerRenderUI.uiView = { "type": "View", "props": { "width": 78, "height": 112 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 78, "visible": false, "var": "_imgFemale", "skin": "tongyong/tongyong_avatar_female.png", "height": 78 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 78, "var": "_femaleMask", "skin": "tongyong/tongyong_avatar_mask.png", "sizeGrid": "36,34,46,33", "renderType": "mask", "height": 78 } }] }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 78, "visible": false, "var": "_imgMale", "skin": "tongyong/tongyong_avatar_male.png", "height": 78 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 78, "var": "_maleMask", "skin": "tongyong/tongyong_avatar_mask.png", "sizeGrid": "36,34,46,33", "renderType": "mask", "height": 78 } }] }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 78, "var": "_imgHead", "height": 78 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 78, "var": "_headMask", "skin": "tongyong/tongyong_avatar_mask.png", "sizeGrid": "36,34,46,33", "renderType": "mask", "height": 78 } }] }, { "type": "Panel", "props": { "y": 88, "width": 78, "var": "_pan", "height": 22, "centerX": 0 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "var": "_labNickname", "text": "label", "fontSize": 20, "color": "#9b5036" } }] }] };
            return ClubPlayerRenderUI;
        }(View));
        club.ClubPlayerRenderUI = ClubPlayerRenderUI;
    })(club = ui.club || (ui.club = {}));
})(ui || (ui = {}));
(function (ui) {
    var club;
    (function (club) {
        var ClubRechargeUI = /** @class */ (function (_super) {
            __extends(ClubRechargeUI, _super);
            function ClubRechargeUI() {
                return _super.call(this) || this;
            }
            ClubRechargeUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.club.ClubRechargeUI.uiView);
            };
            ClubRechargeUI.uiView = { "type": "View", "props": { "width": 640, "height": 960 }, "child": [{ "type": "Image", "props": { "y": 20, "x": 20, "var": "_mask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "y": 281, "x": 20, "width": 524, "height": 368, "centerX": 0 }, "child": [{ "type": "Image", "props": { "width": 620, "top": 0, "skin": "tongyong/tongyong_tip.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "height": 940, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 5, "skin": "club/img_23.png", "centerX": 0 } }] }, { "type": "BaseButton", "props": { "y": -30, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "right": -30 } }, { "type": "TextInput", "props": { "y": 133, "var": "_input", "type": "text", "skin": "club/img_4.png", "sizeGrid": "14,24,21,21", "right": 40, "restrict": "0-9", "promptColor": "#847568", "prompt": "请输入转账钻石数量", "padding": "1,1,1,20", "maxChars": 5, "left": 40, "height": 60, "fontSize": 26, "color": "#9b5036", "align": "left" } }, { "type": "BaseButton", "props": { "var": "_btnConfirm", "stateNum": 2, "skin": "tongyong/tongyong_btn_queding.png", "labelSize": 30, "centerX": 120, "bottom": 30 } }, { "type": "BaseButton", "props": { "var": "_btnCancel", "stateNum": 2, "skin": "tongyong/tongyong_btn_quxiao.png", "labelSize": 30, "centerX": -120, "bottom": 30 } }, { "type": "Label", "props": { "y": 87, "x": 46, "var": "_labDiamond", "text": "我的钻石：111", "fontSize": 28, "color": "#9b5036" } }, { "type": "Label", "props": { "y": 213, "text": "将从我的钻石账户转入到俱乐部钻石账户", "fontSize": 18, "color": "#9b5036", "centerX": 0, "alpha": 0.6 } }, { "type": "Label", "props": { "y": 242, "x": 155, "text": "此操作不可撤销和回退", "fontSize": 18, "color": "#9b5036", "alpha": 0.6 } }] }] };
            return ClubRechargeUI;
        }(View));
        club.ClubRechargeUI = ClubRechargeUI;
    })(club = ui.club || (ui.club = {}));
})(ui || (ui = {}));
(function (ui) {
    var club;
    (function (club) {
        var ClubRenameUI = /** @class */ (function (_super) {
            __extends(ClubRenameUI, _super);
            function ClubRenameUI() {
                return _super.call(this) || this;
            }
            ClubRenameUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.club.ClubRenameUI.uiView);
            };
            ClubRenameUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 640, "height": 960 }, "child": [{ "type": "Image", "props": { "y": 10, "x": 10, "var": "_mask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "y": 281, "x": 10, "width": 524, "height": 294, "centerX": 0 }, "child": [{ "type": "Image", "props": { "width": 620, "top": 0, "skin": "tongyong/tongyong_tip.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "height": 940, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 5, "skin": "club/img_20.png", "centerX": 0 } }] }, { "type": "BaseButton", "props": { "y": -30, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "right": -30 } }, { "type": "TextInput", "props": { "y": 99, "var": "_input", "type": "text", "skin": "club/img_4.png", "sizeGrid": "14,24,21,21", "right": 40, "promptColor": "#847568", "prompt": "请输入俱乐部昵称", "padding": "1,1,1,20", "left": 40, "height": 60, "fontSize": 26, "color": "#9b5036", "align": "left" } }, { "type": "BaseButton", "props": { "y": 203, "var": "_btnConfirm", "stateNum": 2, "skin": "tongyong/tongyong_btn_queding.png", "labelSize": 30, "centerX": 120 } }, { "type": "BaseButton", "props": { "y": 203, "var": "_btnCancel", "stateNum": 2, "skin": "tongyong/tongyong_btn_quxiao.png", "labelSize": 30, "centerX": -120 } }] }] };
            return ClubRenameUI;
        }(View));
        club.ClubRenameUI = ClubRenameUI;
    })(club = ui.club || (ui.club = {}));
})(ui || (ui = {}));
(function (ui) {
    var club;
    (function (club) {
        var ClubSearchListUI = /** @class */ (function (_super) {
            __extends(ClubSearchListUI, _super);
            function ClubSearchListUI() {
                return _super.call(this) || this;
            }
            ClubSearchListUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.club.ClubSearchListUI.uiView);
            };
            ClubSearchListUI.uiView = { "type": "View", "props": { "width": 640, "height": 960 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_mask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "right": 10, "left": 10, "height": 400, "centerY": 0 }, "child": [{ "type": "Image", "props": { "y": -91, "x": -45, "top": 0, "skin": "tongyong/tongyong_bg.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "height": 940, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "width": 319, "skin": "tongyong/tongyong_bg_title.png", "centerX": 0 }, "child": [{ "type": "Image", "props": { "width": 160, "skin": "club/img_6.png", "centerY": -7, "centerX": 0 } }] }, { "type": "Image", "props": { "top": 80, "skin": "tongyong/tongyong_top_border_1.png", "sizeGrid": "18,23,21,21", "right": 15, "left": 15, "bottom": 20 } }] }, { "type": "BaseButton", "props": { "y": -31, "x": 522, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "right": -27 } }, { "type": "List", "props": { "y": 120, "width": 542, "var": "_list", "vScrollBarSkin": "tongyong/jindutiaodi.png", "height": 100, "centerX": 0 } }] }] };
            return ClubSearchListUI;
        }(View));
        club.ClubSearchListUI = ClubSearchListUI;
    })(club = ui.club || (ui.club = {}));
})(ui || (ui = {}));
(function (ui) {
    var club;
    (function (club) {
        var GameListRendererUI = /** @class */ (function (_super) {
            __extends(GameListRendererUI, _super);
            function GameListRendererUI() {
                return _super.call(this) || this;
            }
            GameListRendererUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.club.GameListRendererUI.uiView);
            };
            GameListRendererUI.uiView = { "type": "View", "props": { "width": 610, "height": 100 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 610, "skin": "club/img_7.png", "sizeGrid": "0,50,0,50" } }, { "type": "Image", "props": { "x": 7, "var": "_imgIcon", "scaleY": 0.74, "scaleX": 0.74, "centerY": 0.060000000000002274 } }, { "type": "Box", "props": { "width": 610, "var": "_boxMatch", "height": 100 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "menu/tag.png", "scaleY": 0.8, "scaleX": 0.8 } }, { "type": "Image", "props": { "y": 55, "x": 166, "skin": "club/img_13.png" } }, { "type": "Label", "props": { "y": 18, "x": 162, "var": "_labMatchTitle", "text": "激活激活大奖赛", "fontSize": 24, "color": "#9b5036" } }, { "type": "Label", "props": { "y": 54, "x": 196, "var": "_labMatchMember", "text": "234", "fontSize": 20, "color": "#bc7850" } }, { "type": "Label", "props": { "y": 55, "var": "_labMatchRule", "text": "满3000人开赛", "right": 122, "fontSize": 20, "color": "#bc7850" } }] }, { "type": "Box", "props": { "width": 610, "var": "_boxNormal", "height": 100 }, "child": [{ "type": "Image", "props": { "y": 19, "x": 163, "skin": "club/img_12.png" } }, { "type": "Label", "props": { "y": 18, "x": 204, "var": "_labMember", "text": "2/5", "fontSize": 24, "color": "#9b5036" } }, { "type": "Label", "props": { "y": 54, "x": 162, "width": 327, "var": "_labGameRule", "text": "激活激活大奖赛", "height": 22, "fontSize": 20, "color": "#bc7850" }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 327, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,7,8,5", "renderType": "mask", "height": 22 } }] }] }, { "type": "Image", "props": { "y": 0, "x": 415, "var": "_imgSignin", "skin": "club/img_14.png", "right": 0, "centerY": 0 } }, { "type": "Image", "props": { "y": 0, "x": 415, "var": "_imgIng", "skin": "club/img_15.png", "right": 0, "centerY": 0 } }, { "type": "Image", "props": { "y": 0, "x": 415, "var": "_imgReadying", "skin": "club/img_16.png", "right": 0, "centerY": 0 } }] };
            return GameListRendererUI;
        }(View));
        club.GameListRendererUI = GameListRendererUI;
    })(club = ui.club || (ui.club = {}));
})(ui || (ui = {}));
(function (ui) {
    var club;
    (function (club) {
        var MyClubUI = /** @class */ (function (_super) {
            __extends(MyClubUI, _super);
            function MyClubUI() {
                return _super.call(this) || this;
            }
            MyClubUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.club.MyClubUI.uiView);
            };
            MyClubUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 640, "height": 1028 }, "child": [{ "type": "Image", "props": { "var": "_bg", "top": 0, "skin": "res/bg/bg_menu.jpg", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Box", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "tongyong/tongyong_top.png", "right": 0, "left": 0 } }, { "type": "BaseButton", "props": { "y": 20, "x": 20, "var": "_close", "stateNum": 2, "skin": "tongyong/btn_back.png", "label": "" } }, { "type": "BaseButton", "props": { "y": 21, "x": 559, "var": "_btnSetup", "stateNum": 1, "skin": "tongyong/btn_setup.png", "label": "" } }, { "type": "Label", "props": { "y": 34, "x": 230, "var": "_labTitle", "text": "麻将娱乐群", "fontSize": 36, "color": "#e3fefc", "centerX": 0 } }, { "type": "Box", "props": { "y": 102, "x": 0, "width": 640, "height": 148, "centerX": 0 }, "child": [{ "type": "Image", "props": { "skin": "club/img_11.png" } }, { "type": "Label", "props": { "y": 34, "x": 117, "var": "_labClubTitle", "text": "麻将娱乐群", "fontSize": 24, "color": "#9b5036" } }, { "type": "Label", "props": { "y": 80, "x": 118, "var": "_labMember", "text": "成员：26/200", "fontSize": 22, "color": "#9b5036" } }, { "type": "Image", "props": { "y": 30, "x": 20, "var": "_imgIcon", "skin": "club/img_10.png" } }, { "type": "BaseButton", "props": { "y": 29, "x": 403, "var": "_btnRecharge", "stateNum": 1, "skin": "menu/jiahao.png", "label": "" } }, { "type": "Label", "props": { "y": 61, "x": 477, "width": 100, "var": "_labDiamond", "text": "12345", "height": 24, "fontSize": 24, "color": "#ffdb4b", "align": "center" } }] }, { "type": "BaseButton", "props": { "y": 252, "x": 63, "var": "_btnTab1", "stateNum": 2, "skin": "club/btn_tab_1.png", "labelSize": 26, "labelColors": "#997a4b,#997a4b,#ffecd0", "centerX": 0 } }, { "type": "BaseButton", "props": { "y": 252, "x": 63, "var": "_btnTab2", "stateNum": 2, "skin": "club/btn_tab_2.png", "labelSize": 26, "labelColors": "#997a4b,#997a4b,#ffecd0", "centerX": 0 } }, { "type": "BaseButton", "props": { "y": 900, "x": 131, "var": "_btnCreateTable", "stateNum": 2, "skin": "club/btn_create_table.png", "labelSize": 26, "labelColors": "#997a4b,#997a4b,#ffecd0", "centerX": 0, "bottom": 8 } }, { "type": "List", "props": { "y": 340, "x": 15, "width": 610, "var": "_listGames", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 340, "centerX": 0, "bottom": 140 } }, { "type": "List", "props": { "y": 340, "x": 0, "width": 640, "var": "_listResults", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 340, "spaceY": 5, "repeatX": 1, "centerX": 0, "bottom": 140 } }, { "type": "Label", "props": { "y": 531, "x": 116, "var": "_labNoResults", "text": "您最近3日还没有战绩喔~", "fontSize": 26, "color": "#9b5036", "centerX": 0, "bold": true } }, { "type": "Label", "props": { "y": 531, "x": 247, "var": "_labNoGames", "text": "暂无牌局", "fontSize": 26, "color": "#9b5036", "centerX": 0.40625, "bold": true } }, { "type": "Box", "props": { "y": 0, "x": 0, "var": "_boxDetail", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.7 } }, { "type": "Image", "props": { "top": 44, "skin": "tongyong/tongyong_bg.png", "sizeGrid": "25,34,30,24", "right": 10, "left": 10, "bottom": 33 } }, { "type": "Image", "props": { "top": 112, "skin": "tongyong/tongyong_top_border.png", "sizeGrid": "22,23,25,43", "right": 25, "left": 25, "bottom": 54 } }, { "type": "List", "props": { "var": "_listDetail", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 233, "spaceY": 5, "right": 35, "repeatX": 1, "left": 35, "bottom": 59 } }, { "type": "Box", "props": { "y": 125, "right": 35, "left": 35, "height": 95 }, "child": [{ "type": "Image", "props": { "y": -80, "x": 1, "var": "_profit", "top": 0, "skin": "menu/bbt.png", "sizeGrid": "25,14,23,16", "right": 1, "left": 1, "bottom": 0 } }] }, { "type": "Image", "props": { "y": 30, "width": 319, "skin": "tongyong/tongyong_bg_title.png", "centerX": 0.5 }, "child": [{ "type": "Image", "props": { "width": 160, "var": "_luxiangname", "skin": "createTable/3.png", "scaleY": 0.8, "scaleX": 0.8, "centerY": -7.399999999999999, "centerX": 0 } }] }] }, { "type": "BaseButton", "props": { "y": 1, "x": 558, "var": "_btnBack", "stateNum": 2, "skin": "tongyong/close.png", "right": -18 } }, { "type": "Image", "props": { "y": 0, "x": 0, "var": "_boxMask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "y": 750, "x": 0, "var": "_boxCreate", "right": 0, "left": 0, "height": 278, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 58, "x": 0, "skin": "tongyong/tongyong_share.png", "sizeGrid": "14,13,14,9", "right": 0, "left": 0, "height": 220, "bottom": 0 } }, { "type": "BaseButton", "props": { "y": 0, "x": 0, "var": "_btnCreateTab1", "stateNum": 2, "skin": "club/btn_create_tab_1.png", "labelSize": 26, "labelColors": "#997a4b,#997a4b,#ffecd0", "centerX": 0, "bottom": 203 } }, { "type": "BaseButton", "props": { "y": 0, "x": 0, "var": "_btnCreateTab2", "stateNum": 2, "skin": "club/btn_create_tab_2.png", "labelSize": 26, "labelColors": "#997a4b,#997a4b,#ffecd0", "centerX": 0, "bottom": 203 } }] }] }] };
            return MyClubUI;
        }(View));
        club.MyClubUI = MyClubUI;
    })(club = ui.club || (ui.club = {}));
})(ui || (ui = {}));
(function (ui) {
    var club;
    (function (club) {
        var MyClubListRendererUI = /** @class */ (function (_super) {
            __extends(MyClubListRendererUI, _super);
            function MyClubListRendererUI() {
                return _super.call(this) || this;
            }
            MyClubListRendererUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.club.MyClubListRendererUI.uiView);
            };
            MyClubListRendererUI.uiView = { "type": "View", "props": { "width": 598, "height": 141 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "club/img_8.png" } }, { "type": "Image", "props": { "y": 0, "x": 0, "var": "_imgOwner", "skin": "club/img_9.png" } }, { "type": "Label", "props": { "y": 7, "var": "_labTitle", "text": "label", "fontSize": 24, "color": "#9b5036", "centerX": 0 } }, { "type": "Image", "props": { "y": 46, "x": 15, "var": "_labImg", "skin": "club/img_10.png" } }, { "type": "Label", "props": { "y": 51, "x": 115, "var": "_labId", "text": "label", "fontSize": 24, "color": "#9b5036" } }, { "type": "Label", "props": { "y": 70, "var": "_labCount", "text": "label", "right": 25, "fontSize": 22, "color": "#9b5036" } }, { "type": "Label", "props": { "y": 90, "x": 115, "var": "_labMember", "text": "label", "fontSize": 22, "color": "#9b5036" } }] };
            return MyClubListRendererUI;
        }(View));
        club.MyClubListRendererUI = MyClubListRendererUI;
    })(club = ui.club || (ui.club = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var DiamondInfoUI = /** @class */ (function (_super) {
            __extends(DiamondInfoUI, _super);
            function DiamondInfoUI() {
                return _super.call(this) || this;
            }
            DiamondInfoUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.components.DiamondInfoUI.uiView);
            };
            DiamondInfoUI.uiView = { "type": "View", "props": { "width": 403, "height": 93 }, "child": [{ "type": "Image", "props": { "x": 34, "top": 10, "skin": "tongyong/Mobile_jinbidi.png" } }, { "type": "Image", "props": { "y": 5, "x": 0, "skin": "menu/Mobile_baoshi.png" } }, { "type": "ScaleButton", "props": { "y": 12, "x": 328, "stateNum": 1, "skin": "menu/Mobile_jiahaoanniu.png" } }, { "type": "Label", "props": { "y": 30, "x": 129, "width": 180, "var": "_labelDiamond", "text": 88888, "height": 43, "fontSize": 38, "color": "#fefefe", "align": "center" } }] };
            return DiamondInfoUI;
        }(View));
        components.DiamondInfoUI = DiamondInfoUI;
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var GamePlayerInfoUI = /** @class */ (function (_super) {
            __extends(GamePlayerInfoUI, _super);
            function GamePlayerInfoUI() {
                return _super.call(this) || this;
            }
            GamePlayerInfoUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.components.GamePlayerInfoUI.uiView);
            };
            GamePlayerInfoUI.uiView = { "type": "View", "props": { "width": 283, "height": 141 }, "child": [{ "type": "Panel", "props": { "y": 0, "x": 0, "width": 283, "var": "_panelGold", "height": 69 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "game/Mobile_zhujiemian_jinbidi1.png" } }, { "type": "Label", "props": { "y": 35, "x": 185, "width": 116, "var": "_labGold", "text": "1111", "height": 26, "fontSize": 26, "color": "#ffffff", "centerY": 0, "anchorY": 0.5, "anchorX": 0.5, "align": "center" } }, { "type": "Image", "props": { "y": 34, "x": 41, "width": 38, "var": "_imgGlod", "skin": "game/Mobile_choujiang_jinbi.png", "height": 43, "anchorY": 0.5, "anchorX": 0.5 } }] }, { "type": "Panel", "props": { "y": 72, "x": 0, "width": 283, "var": "_panelMoney", "height": 69 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "game/Mobile_zhujiemian_jinbidi1.png" } }, { "type": "Label", "props": { "y": 35, "x": 185, "width": 116, "var": "_labMoney", "text": "1111", "height": 26, "fontSize": 26, "color": "#ffffff", "centerY": 0, "anchorY": 0.5, "anchorX": 0.5, "align": "center" } }, { "type": "Image", "props": { "x": 28, "skin": "game/Mobile_choujiang_baoshi.png", "centerY": 0.5 } }] }, { "type": "Label", "props": { "y": -35, "x": 0, "width": 283, "var": "_labName", "text": "label", "fontSize": 26, "color": "#39c2db", "align": "center" } }] };
            return GamePlayerInfoUI;
        }(View));
        components.GamePlayerInfoUI = GamePlayerInfoUI;
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var GoldInfoUI = /** @class */ (function (_super) {
            __extends(GoldInfoUI, _super);
            function GoldInfoUI() {
                return _super.call(this) || this;
            }
            GoldInfoUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.components.GoldInfoUI.uiView);
            };
            GoldInfoUI.uiView = { "type": "View", "props": { "width": 410, "height": 98 }, "child": [{ "type": "Image", "props": { "x": 41, "top": 10, "skin": "tongyong/Mobile_jinbidi.png" } }, { "type": "Image", "props": { "y": 5, "x": 0, "skin": "menu/Mobile_jinbi.png" } }, { "type": "ScaleButton", "props": { "x": 335, "top": 12, "stateNum": 1, "skin": "menu/Mobile_jiahaoanniu.png" } }, { "type": "Label", "props": { "y": 29, "x": 119, "width": 180, "var": "_labelGold", "text": 88888, "height": 43, "fontSize": 38, "color": "#fefefe", "align": "center" } }] };
            return GoldInfoUI;
        }(View));
        components.GoldInfoUI = GoldInfoUI;
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var Hall;
        (function (Hall) {
            var HallTopUI = /** @class */ (function (_super) {
                __extends(HallTopUI, _super);
                function HallTopUI() {
                    return _super.call(this) || this;
                }
                HallTopUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.Hall.HallTopUI.uiView);
                };
                HallTopUI.uiView = { "type": "View", "props": { "width": 1100, "height": 110 }, "child": [{ "type": "Image", "props": { "y": 0, "skin": "res/img/img_topdi.png" }, "child": [{ "type": "Image", "props": { "y": 44, "x": 98, "width": 70, "var": "_headinfo", "height": 70, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "ScaleButton", "props": { "y": 47, "x": 439, "var": "_btn_buydiamond", "skin": "dating/sBtn_buyDiamond.png", "scaleValue": 0.9, "scaleTime": 100, "label": "" } }, { "type": "ScaleButton", "props": { "y": 45, "x": 726, "var": "_btn_exchange", "skin": "dating/sBtn_exchangge.png", "scaleValue": 0.9, "scaleTime": 100, "label": "" } }, { "type": "Label", "props": { "y": 16, "x": 149, "var": "_name", "text": "名字六个字啊", "fontSize": 24, "font": "Microsoft YaHei", "color": "#fffffe" } }, { "type": "Label", "props": { "y": 47, "x": 152, "var": "_id", "text": "ID:888888", "fontSize": 24, "font": "Microsoft YaHei", "color": "#ffffff" } }, { "type": "Label", "props": { "y": 44, "x": 729, "var": "_ticketNum", "text": "0000", "fontSize": 24, "font": "Microsoft YaHei", "color": "#ffffff", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 46, "x": 440, "var": "_diamondNum", "text": "0000", "fontSize": 24, "font": "Microsoft YaHei", "color": "#ffffff", "anchorY": 0.5, "anchorX": 0.5 } }] }] };
                return HallTopUI;
            }(View));
            Hall.HallTopUI = HallTopUI;
        })(Hall = components.Hall || (components.Hall = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var LoadContextUI = /** @class */ (function (_super) {
            __extends(LoadContextUI, _super);
            function LoadContextUI() {
                return _super.call(this) || this;
            }
            LoadContextUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.components.LoadContextUI.uiView);
            };
            LoadContextUI.uiView = { "type": "View", "props": { "width": 210, "height": 24 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "text": "资源加载中...", "fontSize": 24, "color": "#fffbe2" } }, { "type": "Label", "props": { "y": 0, "x": 150, "width": 60, "var": "_labelProcess", "text": "010%", "fontSize": 24, "color": "#fffbe2" } }] };
            return LoadContextUI;
        }(View));
        components.LoadContextUI = LoadContextUI;
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var MaskUI = /** @class */ (function (_super) {
            __extends(MaskUI, _super);
            function MaskUI() {
                return _super.call(this) || this;
            }
            MaskUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.components.MaskUI.uiView);
            };
            MaskUI.uiView = { "type": "View", "props": { "width": 600, "height": 400 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "left": 0, "bottom": 0, "alpha": 0.7 } }] };
            return MaskUI;
        }(View));
        components.MaskUI = MaskUI;
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var PlayerInfoUI = /** @class */ (function (_super) {
            __extends(PlayerInfoUI, _super);
            function PlayerInfoUI() {
                return _super.call(this) || this;
            }
            PlayerInfoUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.components.PlayerInfoUI.uiView);
            };
            PlayerInfoUI.uiView = { "type": "View", "props": { "width": 960, "height": 640 }, "child": [{ "type": "Image", "props": { "y": 50, "x": 26, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "width": 548, "var": "_box", "height": 315, "centerY": 0.5, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "tongyong/tongyong_tip.png" } }, { "type": "Label", "props": { "y": 177, "x": 54, "text": "IP:", "fontSize": 22, "color": "#9b5036" } }, { "type": "Label", "props": { "y": 92, "x": 148, "var": "_name", "text": 0, "fontSize": 28, "color": "#9b5036" } }, { "type": "Label", "props": { "y": 177, "x": 91, "var": "_ip", "text": "label", "fontSize": 22, "color": "#9b5036" } }, { "type": "Label", "props": { "y": 213, "x": 54, "text": "地址:", "fontSize": 22, "color": "#9b5036" } }, { "type": "Box", "props": { "y": 90, "x": 54, "width": 70, "var": "_avatar", "height": 70 } }, { "type": "Image", "props": { "y": 6, "skin": "dialog/player_title.png", "centerX": 0 } }, { "type": "BaseButton", "props": { "y": -36, "x": 459, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png" } }, { "type": "Label", "props": { "y": 134, "x": 148, "var": "_ID", "text": "label", "fontSize": 22, "color": "#9b5036" } }, { "type": "TextArea", "props": { "y": 212, "x": 112, "wordWrap": true, "width": 397, "var": "_gps", "text": "该玩家定位未开启", "mouseEnabled": true, "hitTestPrior": false, "height": 93, "fontSize": 22, "editable": false, "disabled": true, "color": "#9b5036" } }, { "type": "BaseButton", "props": { "y": 156, "x": 414, "var": "_btnVoice", "stateNum": 2, "skin": "table/table_btn_voice.png" } }] }] };
            return PlayerInfoUI;
        }(View));
        components.PlayerInfoUI = PlayerInfoUI;
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var RuleInfoUI = /** @class */ (function (_super) {
            __extends(RuleInfoUI, _super);
            function RuleInfoUI() {
                return _super.call(this) || this;
            }
            RuleInfoUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.components.RuleInfoUI.uiView);
            };
            RuleInfoUI.uiView = { "type": "View", "props": { "width": 960, "height": 640 }, "child": [{ "type": "Image", "props": { "y": 10, "width": 178, "var": "_info", "skin": "table/ruler_bg_1.png", "sizeGrid": "0,100,0,100", "height": 90, "centerX": -380 }, "child": [{ "type": "Label", "props": { "y": 10, "x": 30, "var": "_code", "text": "房间:123456", "fontSize": 20, "color": "#f8f4f4" } }, { "type": "Label", "props": { "y": 51, "x": 100, "var": "_round", "text": "1/8局", "fontSize": 20, "color": "#f8f4f4" } }, { "type": "Label", "props": { "y": 51, "x": 30, "var": "_time", "text": "21;25", "fontSize": 20, "color": "#f8f4f4" } }] }, { "type": "Image", "props": { "y": 15, "visible": false, "var": "_leftCard", "skin": "timelimit/left_card_bg.png", "centerX": 248, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 25, "skin": "card/bg_3.png", "skewY": 90, "skewX": -90, "scaleY": 0.1, "scaleX": 0.1 } }, { "type": "Label", "props": { "y": 5, "x": 29, "var": "_leftLabel", "text": "118", "fontSize": 16, "color": "#f8f3f3", "align": "center" } }] }, { "type": "Box", "props": { "y": 62, "width": 229, "visible": false, "var": "_rule", "height": 397, "centerX": -256.5 }, "child": [{ "type": "Image", "props": { "width": 230, "var": "_ruleBg", "skin": "table/ruler_bg.png", "sizeGrid": "61,28,67,28" }, "child": [{ "type": "Label", "props": { "width": 107, "var": "_divide", "text": "房主支付", "fontSize": 20, "font": "Microsoft YaHei", "color": "#f4e9e9", "centerX": 0, "bottom": 17, "align": "center" } }, { "type": "Label", "props": { "y": 13, "var": "_wanfa", "text": "玩法", "strokeColor": "#b5450b", "stroke": 2, "fontSize": 24, "color": "#fff3c1", "centerX": 0 } }] }, { "type": "List", "props": { "y": 54, "x": 12, "width": 207, "var": "_list", "vScrollBarSkin": "tongyong/jindutiaodi.png", "spaceY": 2, "repeatY": 3, "repeatX": 1, "height": 55 } }] }, { "type": "ScaleButton", "props": { "y": 145, "width": 58, "var": "_ruleBtn", "stateNum": 1, "skin": "table/ruler_btn.png", "scaleValue": 0.9, "scaleTime": 100, "pivotY": 32, "pivotX": 29, "name": "ruleBtn", "height": 63, "centerX": -436 } }, { "type": "Image", "props": { "y": 112, "x": 16, "width": 186, "visible": false, "var": "_wanfaInfo", "skin": "common/img_wanfadi.png", "height": 92 }, "child": [{ "type": "HTMLDivElement", "props": { "y": 6, "x": 6, "width": 175, "var": "_wanfa_label", "innerHTML": "htmlText", "height": 76 } }] }] };
            return RuleInfoUI;
        }(View));
        components.RuleInfoUI = RuleInfoUI;
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var TableEndUI = /** @class */ (function (_super) {
            __extends(TableEndUI, _super);
            function TableEndUI() {
                return _super.call(this) || this;
            }
            TableEndUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.components.TableEndUI.uiView);
            };
            TableEndUI.uiView = { "type": "View", "props": { "width": 1280, "height": 720 }, "child": [{ "type": "Image", "props": { "var": "_mask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "top": 10, "right": 10, "left": 10, "bottom": 10 }, "child": [{ "type": "Image", "props": { "var": "_bg", "top": 0, "skin": "res/bg/bg_endBg.png", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Image", "props": { "top": 25, "skin": "common/title_paiju.png", "centerX": 0 } }, { "type": "Label", "props": { "y": 36, "x": 1139, "var": "_round", "text": "局数:8/8", "fontSize": 22, "font": "Microsoft YaHei", "color": "#feeecd", "anchorX": 1, "align": "right" } }, { "type": "Label", "props": { "y": 61, "x": 1143, "var": "_time", "text": "2017-11-12 12:22", "fontSize": 22, "font": "Microsoft YaHei", "color": "#feeecd", "anchorX": 1, "align": "right" } }, { "type": "Image", "props": { "y": 33, "x": 39, "var": "_gamename", "skin": "common/title_gameType_10.png", "scaleY": 0.86, "scaleX": 0.86 } }, { "type": "ScaleButton", "props": { "var": "_back", "stateNum": 1, "skin": "common/sBtn_backToPlatform.png", "scaleValue": 0.9, "scaleTime": 100, "centerX": -240, "bottom": 20 } }, { "type": "ScaleButton", "props": { "var": "_btnShare", "stateNum": 1, "skin": "common/sBtn_shareRecord.png", "scaleValue": 0.9, "scaleTime": 100, "centerX": 0, "bottom": 20, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "ScaleButton", "props": { "visible": false, "var": "_btnDownload", "stateNum": 1, "skin": "common/sBtn_downAPP.png", "scaleValue": 0.9, "scaleTime": 100, "centerX": 240, "bottom": 20 } }, { "type": "Animation", "props": { "y": 530, "x": 730, "width": 0, "visible": false, "var": "_ani", "source": "res/components/ad.ani", "height": 0 } }, { "type": "Box", "props": { "var": "_box", "top": 100, "right": 0, "left": 0, "bottom": 120 } }, { "type": "ScaleButton", "props": { "y": 58, "x": 1214, "var": "_close", "skin": "common/sBtn_close2.png", "label": "" } }] }] };
            return TableEndUI;
        }(View));
        components.TableEndUI = TableEndUI;
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var TableEndItemUI = /** @class */ (function (_super) {
            __extends(TableEndItemUI, _super);
            function TableEndItemUI() {
                return _super.call(this) || this;
            }
            TableEndItemUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.components.TableEndItemUI.uiView);
            };
            TableEndItemUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 219, "height": 370, "anchorY": 0, "anchorX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_bg", "top": 0, "skin": "common/img_kuang.png", "right": 0, "left": 0, "bottom": 0, "sizeGrid": "20,17,28,16" }, "child": [{ "type": "Image", "props": { "var": "_headBg", "skin": "common/img_touxiangdi.png", "centerY": -111, "centerX": -37.5, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Box", "props": { "width": 85, "var": "_avatar", "height": 85, "centerY": -115, "centerX": -38.5, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "var": "_name", "text": "label", "fontSize": 24, "font": "Microsoft YaHei", "color": "#6f5821", "centerY": -69, "centerX": 2.8203125, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "var": "_userid", "text": "label", "fontSize": 24, "font": "Microsoft YaHei", "color": "#6f5821", "centerY": -98, "centerX": 44.8203125, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Box", "props": { "var": "_info", "top": 180, "right": 0, "left": 0, "bottom": 0, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "List", "props": { "var": "_list", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 0, "spaceY": 1, "right": 0, "repeatY": 3, "repeatX": 1, "left": 0, "bottom": 5 } }] }] }] };
            return TableEndItemUI;
        }(View));
        components.TableEndItemUI = TableEndItemUI;
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var TableEndItemChildUI = /** @class */ (function (_super) {
            __extends(TableEndItemChildUI, _super);
            function TableEndItemChildUI() {
                return _super.call(this) || this;
            }
            TableEndItemChildUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.components.TableEndItemChildUI.uiView);
            };
            TableEndItemChildUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 200, "right": 0, "left": 0, "height": 68, "anchorY": 0, "anchorX": 0 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "common/di.png", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Label", "props": { "var": "_des", "text": "胡牌次数:0", "fontSize": 24, "color": "#6f5821", "centerY": 0, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Box", "props": { "width": 200, "var": "_total", "height": 60, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "skin": "common/img_total.png", "scaleY": 0.9, "scaleX": 0.9, "centerY": 0, "centerX": -34.25 } }, { "type": "Label", "props": { "var": "_score", "text": "0", "scaleY": 1.1, "scaleX": 1.1, "font": "font_num_12", "centerY": 1.0000000000000009, "centerX": 40.3, "anchorY": 0.5, "anchorX": 0, "align": "left" } }] }] };
            return TableEndItemChildUI;
        }(View));
        components.TableEndItemChildUI = TableEndItemChildUI;
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var TableEndShuViewUI = /** @class */ (function (_super) {
            __extends(TableEndShuViewUI, _super);
            function TableEndShuViewUI() {
                return _super.call(this) || this;
            }
            TableEndShuViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.components.TableEndShuViewUI.uiView);
            };
            TableEndShuViewUI.uiView = { "type": "View", "props": { "width": 69, "height": 118 }, "child": [{ "type": "Image", "props": { "y": 10, "x": 10, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "width": 620, "height": 825, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 620, "var": "_bg", "skin": "gameEnd/bg.png", "sizeGrid": "50,50,60,50", "height": 730 } }, { "type": "Image", "props": { "y": 35, "skin": "gameEnd/end.png", "centerX": 0 } }, { "type": "BaseButton", "props": { "var": "_back", "stateNum": 2, "skin": "gameEnd/back.png", "centerX": -138, "bottom": 100 } }, { "type": "Label", "props": { "y": 38, "var": "_round", "text": "局数:8/8", "right": 33, "fontSize": 22, "color": "#562000", "anchorX": 1, "align": "right" } }, { "type": "Label", "props": { "y": 63, "var": "_time", "text": "2017-11-12 12:22", "right": 33, "fontSize": 22, "color": "#652000", "anchorX": 1, "align": "right" } }, { "type": "Image", "props": { "y": 40, "x": 50, "var": "_gamename", "skin": "createTable/3.png", "scaleY": 0.86, "scaleX": 0.86 } }, { "type": "BaseButton", "props": { "var": "_btnShare", "stateNum": 2, "skin": "tongyong/btn_share.png", "centerX": 138, "bottom": 100 } }, { "type": "Box", "props": { "y": 780, "var": "_download", "right": 18.60000000000001 }, "child": [{ "type": "Animation", "props": { "var": "_ani", "source": "res/components/ad.ani" } }, { "type": "Image", "props": { "y": 38, "x": -5, "var": "_area", "skin": "gameLogo/lishui.png", "scaleY": 0.6, "scaleX": 0.6 } }] }] }] };
            return TableEndShuViewUI;
        }(View));
        components.TableEndShuViewUI = TableEndShuViewUI;
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var chat;
        (function (chat) {
            var ChatRecordUI = /** @class */ (function (_super) {
                __extends(ChatRecordUI, _super);
                function ChatRecordUI() {
                    return _super.call(this) || this;
                }
                ChatRecordUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.chat.ChatRecordUI.uiView);
                };
                ChatRecordUI.uiView = { "type": "View", "props": { "width": 92, "height": 75 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "chat/chat_record_0.png" } }, { "type": "Image", "props": { "y": 0, "x": 0, "skin": "chat/chat_record_1.png", "alpha": 1 }, "compId": 3 }, { "type": "Image", "props": { "y": 0, "x": 0, "skin": "chat/chat_record_2.png", "alpha": 0 }, "compId": 4 }, { "type": "Image", "props": { "y": -1, "x": 0, "skin": "chat/chat_record_3.png", "alpha": 0 }, "compId": 5 }], "animations": [{ "nodes": [{ "target": 3, "keyframes": { "x": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "x", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "x", "index": 8 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "x", "index": 28 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "x", "index": 31 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 8 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 28 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 31 }] } }, { "target": 4, "keyframes": { "x": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "x", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "x", "index": 7 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "x", "index": 16 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "x", "index": 28 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "x", "index": 31 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 7 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 16 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 28 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 31 }] } }, { "target": 5, "keyframes": { "y": [{ "value": -1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "y", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "y", "index": 31 }], "x": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "x", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "x", "index": 15 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "x", "index": 24 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "x", "index": 28 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "x", "index": 31 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 15 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 24 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 28 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 31 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
                return ChatRecordUI;
            }(View));
            chat.ChatRecordUI = ChatRecordUI;
        })(chat = components.chat || (components.chat = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var chat;
        (function (chat) {
            var ChatRecord1UI = /** @class */ (function (_super) {
                __extends(ChatRecord1UI, _super);
                function ChatRecord1UI() {
                    return _super.call(this) || this;
                }
                ChatRecord1UI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.chat.ChatRecord1UI.uiView);
                };
                ChatRecord1UI.uiView = { "type": "View", "props": { "width": 210, "height": 45 }, "compId": 1, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "chat/message_others.png" } }, { "type": "Image", "props": { "y": 3, "x": 20, "skin": "chat/chat_record1_0.png" }, "compId": 2 }, { "type": "Image", "props": { "y": 3, "x": 20, "skin": "chat/chat_record1_1.png", "alpha": 1 }, "compId": 3 }, { "type": "Image", "props": { "y": 3, "x": 20, "skin": "chat/chat_record1_2.png", "alpha": 1 }, "compId": 4 }, { "type": "Image", "props": { "y": 3, "x": 20, "skin": "chat/chat_record1_3.png", "alpha": 0.3 }, "compId": 5 }, { "type": "Label", "props": { "y": 8, "x": 72, "width": 119, "var": "_labNickname", "text": "label", "height": 20, "fontSize": 20, "color": "#ffffff", "align": "center" } }], "animations": [{ "nodes": [{ "target": 5, "keyframes": { "y": [{ "value": 3, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "y", "index": 0 }, { "value": 3, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "y", "index": 20 }, { "value": 3, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "y", "index": 30 }], "x": [{ "value": 20, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "x", "index": 0 }, { "value": 20, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "x", "index": 20 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 20 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 30 }] } }, { "target": 2, "keyframes": { "y": [{ "value": 3, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "y", "index": 0 }, { "value": 3, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "y", "index": 30 }], "x": [{ "value": 20, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 0 }, { "value": 20, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 30 }] } }, { "target": 3, "keyframes": { "y": [{ "value": 3, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "y", "index": 0 }, { "value": 3, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "y", "index": 10 }], "x": [{ "value": 20, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "x", "index": 0 }, { "value": 20, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "x", "index": 10 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 10 }] } }, { "target": 4, "keyframes": { "y": [{ "value": 3, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "y", "index": 0 }, { "value": 3, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "y", "index": 10 }, { "value": 3, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "y", "index": 20 }], "x": [{ "value": 20, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "x", "index": 0 }, { "value": 20, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "x", "index": 10 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 10 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 20 }] } }, { "target": 1, "keyframes": { "width": [{ "value": 210, "tweenMethod": "linearNone", "tween": true, "target": 1, "key": "width", "index": 0 }, { "value": 210, "tweenMethod": "linearNone", "tween": true, "target": 1, "key": "width", "index": 30 }, { "value": 210, "tweenMethod": "linearNone", "tween": true, "target": 1, "key": "width", "index": 51 }], "height": [{ "value": 45, "tweenMethod": "linearNone", "tween": true, "target": 1, "key": "height", "index": 0 }, { "value": 45, "tweenMethod": "linearNone", "tween": true, "target": 1, "key": "height", "index": 30 }, { "value": 45, "tweenMethod": "linearNone", "tween": true, "target": 1, "key": "height", "index": 51 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
                return ChatRecord1UI;
            }(View));
            chat.ChatRecord1UI = ChatRecord1UI;
        })(chat = components.chat || (components.chat = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var game;
        (function (game) {
            var ProgressBar1UI = /** @class */ (function (_super) {
                __extends(ProgressBar1UI, _super);
                function ProgressBar1UI() {
                    return _super.call(this) || this;
                }
                ProgressBar1UI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.game.ProgressBar1UI.uiView);
                };
                ProgressBar1UI.uiView = { "type": "View", "props": { "width": 23, "height": 32 }, "child": [{ "type": "ProgressBar", "props": { "y": 0, "var": "_pro", "skin": "game/Mobile_choujiang_jindutiaodi.png", "right": 0, "left": 0 } }, { "type": "Label", "props": { "y": 5, "var": "_labProgress", "text": "10/100", "right": 0, "left": 0, "fontSize": 22, "color": "#ffffff", "centerY": 0, "align": "center" } }] };
                return ProgressBar1UI;
            }(View));
            game.ProgressBar1UI = ProgressBar1UI;
        })(game = components.game || (components.game = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var gps;
        (function (gps) {
            var GpsDisUI = /** @class */ (function (_super) {
                __extends(GpsDisUI, _super);
                function GpsDisUI() {
                    return _super.call(this) || this;
                }
                GpsDisUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.gps.GpsDisUI.uiView);
                };
                GpsDisUI.uiView = { "type": "View", "props": { "width": 142, "height": 34 }, "child": [{ "type": "Image", "props": { "var": "_bg", "skin": "gps/unKnown.png" }, "child": [{ "type": "Label", "props": { "y": 4, "x": 43, "var": "_dis", "text": "未知", "fontSize": 25, "color": "#f4ecec" } }] }] };
                return GpsDisUI;
            }(View));
            gps.GpsDisUI = GpsDisUI;
        })(gps = components.gps || (components.gps = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var gps;
        (function (gps) {
            var GpsTipUI = /** @class */ (function (_super) {
                __extends(GpsTipUI, _super);
                function GpsTipUI() {
                    return _super.call(this) || this;
                }
                GpsTipUI.prototype.createChildren = function () {
                    View.regComponent("ui.components.gps.GpsDisUI", ui.components.gps.GpsDisUI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.gps.GpsTipUI.uiView);
                };
                GpsTipUI.uiView = { "type": "View", "props": { "width": 804, "height": 475, "centerX": 0.5 }, "child": [{ "type": "Image", "props": { "y": -1922, "x": -2414, "width": 5817, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "height": 4003, "alpha": 0.5 } }, { "type": "Box", "props": { "width": 804, "var": "_box", "height": 475, "centerY": 0.5, "centerX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 3, "x": 0, "var": "_bg", "skin": "res/gps/gpsBg.png" } }, { "type": "Image", "props": { "y": 9, "x": 16, "skin": "gps/gpsIco.png" } }, { "type": "Label", "props": { "y": 8, "x": 49, "text": "玩家GPS定位图", "fontSize": 30, "color": "#f6f3f3" } }, { "type": "Button", "props": { "y": 2, "x": 740, "var": "_btn_close", "stateNum": 1, "skin": "gps/btnClose.png" } }, { "type": "Image", "props": { "y": 247, "x": 140, "var": "_g14", "skin": "gps/whiteLine.png", "rotation": 30 } }, { "type": "Image", "props": { "y": 240, "x": 135, "var": "_g34", "skin": "gps/whiteLine.png", "rotation": -30 } }, { "type": "Image", "props": { "y": 97, "x": 401, "var": "_g23", "skin": "gps/whiteLine.png", "rotation": 30 } }, { "type": "Image", "props": { "y": 391, "x": 403, "var": "_g12", "skin": "gps/whiteLine.png", "rotation": -30 } }, { "type": "Image", "props": { "y": 248, "x": 140, "width": 500, "var": "_g24", "skin": "gps/whiteLine.png" } }, { "type": "Image", "props": { "y": 110, "x": 394, "var": "_g13", "skin": "gps/whiteLine.png", "rotation": 90 } }, { "type": "GpsDis", "props": { "y": 302, "x": 196, "var": "_d14", "runtime": "ui.components.gps.GpsDisUI" } }, { "type": "GpsDis", "props": { "y": 302, "x": 477, "var": "_d12", "runtime": "ui.components.gps.GpsDisUI" } }, { "type": "GpsDis", "props": { "y": 160, "x": 188, "var": "_d34", "runtime": "ui.components.gps.GpsDisUI" } }, { "type": "GpsDis", "props": { "y": 160, "x": 477, "var": "_d23", "runtime": "ui.components.gps.GpsDisUI" } }, { "type": "GpsDis", "props": { "y": 259, "x": 322, "var": "_d13", "runtime": "ui.components.gps.GpsDisUI" } }, { "type": "GpsDis", "props": { "y": 229, "x": 477, "var": "_d24", "runtime": "ui.components.gps.GpsDisUI" } }, { "type": "View", "props": { "y": 250, "x": 120, "var": "_head4" } }, { "type": "View", "props": { "y": 400, "x": 400, "var": "_head1" } }, { "type": "View", "props": { "y": 250, "x": 650, "var": "_head2" } }, { "type": "View", "props": { "y": 100, "x": 400, "var": "_head3" } }] }] };
                return GpsTipUI;
            }(View));
            gps.GpsTipUI = GpsTipUI;
        })(gps = components.gps || (components.gps = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var head;
        (function (head) {
            var HeadUI = /** @class */ (function (_super) {
                __extends(HeadUI, _super);
                function HeadUI() {
                    return _super.call(this) || this;
                }
                HeadUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.head.HeadUI.uiView);
                };
                HeadUI.uiView = { "type": "View", "props": { "width": 86, "height": 86 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 88, "visible": false, "var": "_imgFemale", "skin": "tongyong/tongyong_avatar_female.png", "height": 88 }, "child": [{ "type": "Image", "props": { "var": "_femaleMask", "top": 0, "skin": "tongyong/tongyong_avatar_mask.png", "right": 0, "renderType": "mask", "left": 0, "bottom": 0 } }] }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 88, "visible": false, "var": "_imgMale", "skin": "tongyong/tongyong_avatar_male.png", "height": 88 }, "child": [{ "type": "Image", "props": { "var": "_maleMask", "top": 0, "skin": "tongyong/tongyong_avatar_mask.png", "right": 0, "renderType": "mask", "left": 0, "bottom": 0 } }] }, { "type": "Image", "props": { "visible": true, "var": "_headkuang", "skin": "dating/img_kuang.png", "centerY": 0, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 90, "x": -10, "width": 110, "var": "_labName", "text": "label", "height": 20, "fontSize": 20, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "y": 115, "x": -10, "width": 110, "visible": false, "var": "_labInfo", "text": "label", "height": 20, "fontSize": 20, "color": "#ffffff", "align": "center" } }] };
                return HeadUI;
            }(View));
            head.HeadUI = HeadUI;
        })(head = components.head || (components.head = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var head;
        (function (head) {
            var HeadImgUI = /** @class */ (function (_super) {
                __extends(HeadImgUI, _super);
                function HeadImgUI() {
                    return _super.call(this) || this;
                }
                HeadImgUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.head.HeadImgUI.uiView);
                };
                HeadImgUI.uiView = { "type": "View", "props": { "width": 88, "height": 88 }, "child": [{ "type": "Image", "props": { "var": "_img", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 10, "var": "_headMask", "skin": "tongyong/tongyong_avatar_mask.png", "sizeGrid": "30,39,45,33", "renderType": "mask", "height": 10 } }] }] };
                return HeadImgUI;
            }(View));
            head.HeadImgUI = HeadImgUI;
        })(head = components.head || (components.head = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var hint;
        (function (hint) {
            var HintUI = /** @class */ (function (_super) {
                __extends(HintUI, _super);
                function HintUI() {
                    return _super.call(this) || this;
                }
                HintUI.prototype.createChildren = function () {
                    View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.hint.HintUI.uiView);
                };
                HintUI.uiView = { "type": "View", "props": { "width": 917, "height": 66 }, "child": [{ "type": "Image", "props": { "y": 0, "var": "_back", "skin": "tongyong/tips_di.png", "sizeGrid": "8,8,8,8", "centerX": 0 } }, { "type": "HTMLDivElement", "props": { "y": 15, "x": 0, "width": 600, "var": "_lab", "innerHTML": "<font size='50' color='#DDFBFF'>您可以再玩一会吗</font>" } }] };
                return HintUI;
            }(View));
            hint.HintUI = HintUI;
        })(hint = components.hint || (components.hint = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var keyboard;
        (function (keyboard) {
            var KeyBoardNumUI = /** @class */ (function (_super) {
                __extends(KeyBoardNumUI, _super);
                function KeyBoardNumUI() {
                    return _super.call(this) || this;
                }
                KeyBoardNumUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.keyboard.KeyBoardNumUI.uiView);
                };
                KeyBoardNumUI.uiView = { "type": "View", "props": { "width": 545, "height": 290 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_back", "skin": "joinTable/joinTable_keyboard_bg.png", "sizeGrid": "30,30,30,30" } }] };
                return KeyBoardNumUI;
            }(View));
            keyboard.KeyBoardNumUI = KeyBoardNumUI;
        })(keyboard = components.keyboard || (components.keyboard = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var keyboard;
        (function (keyboard) {
            var KeyBoardRendererUI = /** @class */ (function (_super) {
                __extends(KeyBoardRendererUI, _super);
                function KeyBoardRendererUI() {
                    return _super.call(this) || this;
                }
                KeyBoardRendererUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.keyboard.KeyBoardRendererUI.uiView);
                };
                KeyBoardRendererUI.uiView = { "type": "View", "props": { "width": 179, "height": 70 }, "child": [{ "type": "BaseButton", "props": { "y": 0, "x": 0, "var": "_btn", "stateNum": 2, "skin": "joinTable/joinTable_keyBoard_btn.png" } }] };
                return KeyBoardRendererUI;
            }(View));
            keyboard.KeyBoardRendererUI = KeyBoardRendererUI;
        })(keyboard = components.keyboard || (components.keyboard = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var marqueeText;
        (function (marqueeText) {
            var MarqueeTextUI = /** @class */ (function (_super) {
                __extends(MarqueeTextUI, _super);
                function MarqueeTextUI() {
                    return _super.call(this) || this;
                }
                MarqueeTextUI.prototype.createChildren = function () {
                    View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.marqueeText.MarqueeTextUI.uiView);
                };
                MarqueeTextUI.uiView = { "type": "View", "props": { "x": 0, "width": 600, "height": 35 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 300, "var": "_imgBg", "skin": "tongyong/tongyong_marquee.png", "sizeGrid": "11,11,13,8" }, "child": [{ "type": "HTMLDivElement", "props": { "y": 6, "x": 10, "var": "_lab", "innerHTML": "<font size='50' color='#DDFBFF'>您可以再玩一会吗</font>", "height": 20 } }] }] };
                return MarqueeTextUI;
            }(View));
            marqueeText.MarqueeTextUI = MarqueeTextUI;
        })(marqueeText = components.marqueeText || (components.marqueeText = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var menu;
        (function (menu) {
            var MatchHistoryUI = /** @class */ (function (_super) {
                __extends(MatchHistoryUI, _super);
                function MatchHistoryUI() {
                    return _super.call(this) || this;
                }
                MatchHistoryUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.menu.MatchHistoryUI.uiView);
                };
                MatchHistoryUI.uiView = { "type": "View", "props": { "width": 640, "height": 1024 }, "child": [{ "type": "Image", "props": { "y": 10, "x": 10, "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.6 } }, { "type": "Box", "props": { "top": 59, "right": 10, "left": 12, "bottom": 63 }, "child": [{ "type": "Image", "props": { "y": 0, "x": -10, "top": 0, "skin": "tongyong/tongyong_bg.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "height": 940, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "width": 319, "skin": "tongyong/tongyong_bg_title.png", "centerX": 0 }, "child": [{ "type": "Image", "props": { "skin": "matchSign/matchSign_detail.png", "centerY": -7, "centerX": 0 } }] }, { "type": "Image", "props": { "top": 80, "skin": "tongyong/tongyong_top_border_1.png", "sizeGrid": "18,23,21,21", "right": 15, "left": 15, "height": 700, "bottom": 21 } }] }, { "type": "Image", "props": { "y": 84, "skin": "matchSign/matchSign_img_16.png", "centerX": 0 } }, { "type": "Image", "props": { "y": 148, "x": 25, "var": "_imgName" } }, { "type": "Label", "props": { "y": 132, "text": "比赛时长", "fontSize": 24, "color": "#9b5036", "centerX": 212, "cacheAsBitmap": true } }, { "type": "List", "props": { "width": 567, "var": "_list", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 356, "spaceY": 20, "repeatX": 1, "centerX": 0, "bottom": 60 } }, { "type": "Label", "props": { "y": 199, "var": "_labMember", "text": "110人", "fontSize": 30, "color": "#d24800", "centerX": -0.08642578125, "cacheAsBitmap": true } }, { "type": "BaseButton", "props": { "y": -29, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "right": -29, "label": "" } }, { "type": "Image", "props": { "y": 162, "x": 258, "var": "_imgMember", "skin": "matchSign/matchSign_img_24.png" } }, { "type": "Label", "props": { "y": 110, "var": "_labTitle", "text": "xxx的比赛", "fontSize": 28, "color": "#d24800", "centerX": 0.5, "cacheAsBitmap": true } }, { "type": "Label", "props": { "y": 170, "width": 132, "var": "_labDua", "text": "比赛时长", "height": 24, "fontSize": 24, "color": "#9b5036", "centerX": 212, "cacheAsBitmap": true, "align": "center" } }, { "type": "Image", "props": { "y": 262, "x": 212, "skin": "matchSign/matchSign_img_26.png" } }, { "type": "Image", "props": { "y": 262, "x": 328, "var": "_imgNoRank", "skin": "matchSign/matchSign_img_25.png" } }, { "type": "Label", "props": { "y": 320, "text": "排名", "height": 24, "fontSize": 22, "color": "#b77a5c", "centerX": -166.5703125, "cacheAsBitmap": true, "bold": true } }, { "type": "Label", "props": { "y": 320, "var": "_labNickname", "text": "昵称", "height": 24, "fontSize": 22, "color": "#b77a5c", "centerX": 108.46875, "cacheAsBitmap": true, "bold": true } }, { "type": "Label", "props": { "y": 262, "var": "_labRank", "text": "10", "height": 24, "fontSize": 24, "font": "font_num_10", "color": "#b77a5c", "centerX": 55, "cacheAsBitmap": true, "bold": true } }, { "type": "Label", "props": { "y": 320, "var": "_labReward", "text": "奖励", "right": 106, "height": 24, "fontSize": 22, "color": "#b77a5c", "cacheAsBitmap": true, "bold": true } }] }] };
                return MatchHistoryUI;
            }(View));
            menu.MatchHistoryUI = MatchHistoryUI;
        })(menu = components.menu || (components.menu = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var menu;
        (function (menu) {
            var MenuFindUI = /** @class */ (function (_super) {
                __extends(MenuFindUI, _super);
                function MenuFindUI() {
                    return _super.call(this) || this;
                }
                MenuFindUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.menu.MenuFindUI.uiView);
                };
                MenuFindUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 640, "height": 960 }, "child": [{ "type": "Image", "props": { "var": "_headInfo", "skin": "menu/tingkuang.png" }, "child": [{ "type": "BaseButton", "props": { "y": -4, "x": 396, "var": "_btnRecharge", "stateNum": 1, "skin": "menu/jiahao.png" } }, { "type": "Label", "props": { "y": 26, "x": 477, "width": 86, "var": "_diamond", "text": 0, "height": 30, "fontSize": 24, "color": "#ffdb4b", "align": "center" } }, { "type": "Image", "props": { "y": 55, "x": 111, "skin": "menu/yldk.png" } }] }, { "type": "Panel", "props": { "width": 640, "var": "_panel", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 160, "right": 0, "mouseThrough": true, "left": 0, "height": 389 } }, { "type": "List", "props": { "y": 160, "x": 28, "width": 600, "var": "_list", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 160, "spaceY": 200, "spaceX": 300, "repeatY": 3, "repeatX": 2, "height": 389, "centerX": 8 } }, { "type": "Animation", "props": { "y": 699, "x": 576, "var": "_ani", "source": "res/components/menu/ad1.ani", "mouseThrough": false, "mouseEnabled": true } }, { "type": "BaseButton", "props": { "var": "_btnJoinMatch", "top": 724, "stateNum": 2, "skin": "menu/jrmatch.png", "centerX": 0 } }, { "type": "BaseButton", "props": { "y": 577, "x": 111, "var": "_btnJoin", "top": 577, "stateNum": 2, "skin": "menu/jrfj.png", "centerX": 0.5 } }] };
                return MenuFindUI;
            }(View));
            menu.MenuFindUI = MenuFindUI;
        })(menu = components.menu || (components.menu = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var menu;
        (function (menu) {
            var MenuGameRendererUI = /** @class */ (function (_super) {
                __extends(MenuGameRendererUI, _super);
                function MenuGameRendererUI() {
                    return _super.call(this) || this;
                }
                MenuGameRendererUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.menu.MenuGameRendererUI.uiView);
                };
                MenuGameRendererUI.uiView = { "type": "View", "props": { "height": 110 }, "child": [{ "type": "Image", "props": { "y": 12, "x": 30, "width": 86, "var": "_imgGame", "skin": "icon/icon_game_1.png", "height": 86 } }, { "type": "Image", "props": { "y": 0, "var": "_imgLine", "skin": "tongyong/tongyong_gray.png", "right": 0, "left": 0, "height": 1 } }, { "type": "Label", "props": { "y": 20, "x": 135, "var": "_labName", "text": "label", "fontSize": 26, "color": "#000000" } }, { "type": "Label", "props": { "y": 65, "x": 135, "var": "_labDesc", "text": "label", "fontSize": 26, "color": "#787272" } }, { "type": "Label", "props": { "y": 10, "x": 714, "var": "_score", "text": "0", "font": "font_num_4", "centerY": 0 } }] };
                return MenuGameRendererUI;
            }(View));
            menu.MenuGameRendererUI = MenuGameRendererUI;
        })(menu = components.menu || (components.menu = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var menu;
        (function (menu) {
            var MenuHistoryDetailRenderUI = /** @class */ (function (_super) {
                __extends(MenuHistoryDetailRenderUI, _super);
                function MenuHistoryDetailRenderUI() {
                    return _super.call(this) || this;
                }
                MenuHistoryDetailRenderUI.prototype.createChildren = function () {
                    View.regComponent("Text", laya.display.Text);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.menu.MenuHistoryDetailRenderUI.uiView);
                };
                MenuHistoryDetailRenderUI.uiView = { "type": "View", "props": { "x": 0, "width": 1250, "height": 91, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "width": 1250, "skin": "res/menu/list_detail_bg.png", "sizeGrid": "0,23,0,19", "left": 0, "height": 91 } }, { "type": "Label", "props": { "y": 10, "var": "_time", "text": "label", "right": 21.0673828125, "height": 26, "fontSize": 18, "color": "#947368", "alpha": 0 } }, { "type": "BaseButton", "props": { "var": "_video", "stateNum": 1, "skin": "menu/replay.png", "right": 6, "name": "video", "labelSize": 24, "labelPadding": "-2", "labelColors": "#fdfdd2,#fdfdd2,", "centerY": 0 } }, { "type": "Box", "props": { "y": 7, "x": 17, "var": "_box", "alpha": 0 } }, { "type": "Label", "props": { "text": "label", "alpha": 0 } }, { "type": "Label", "props": { "var": "_hand_count", "text": "29/30局", "left": 20, "fontSize": 24, "font": "Microsoft YaHei", "color": "#995d3b", "centerY": 0 } }, { "type": "Text", "props": { "y": 26, "x": 127, "wordWrap": true, "width": 100, "var": "_txtTime", "text": "2017-09-30 22:40", "fontSize": 20, "font": "Microsoft YaHei", "color": "#995d3b", "align": "center" } }, { "type": "BaseButton", "props": { "var": "_share", "stateNum": 1, "skin": "menu/share.png", "right": 144, "labelSize": 24, "labelPadding": "-2", "labelColors": "#fdfdd2,#fdfdd2,", "centerY": 0, "alpha": 0 } }, { "type": "List", "props": { "x": 263, "width": 860, "var": "_scores", "spaceX": 1, "repeatY": 1, "repeatX": 6, "renderType": "render", "height": 66, "centerY": 0 } }] };
                return MenuHistoryDetailRenderUI;
            }(View));
            menu.MenuHistoryDetailRenderUI = MenuHistoryDetailRenderUI;
        })(menu = components.menu || (components.menu = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var menu;
        (function (menu) {
            var MenuHistoryScoreRendererUI = /** @class */ (function (_super) {
                __extends(MenuHistoryScoreRendererUI, _super);
                function MenuHistoryScoreRendererUI() {
                    return _super.call(this) || this;
                }
                MenuHistoryScoreRendererUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.menu.MenuHistoryScoreRendererUI.uiView);
                };
                MenuHistoryScoreRendererUI.uiView = { "type": "View", "props": { "width": 1215, "mouseThrough": false, "height": 172, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_imgTile", "skin": "menu/item_bg_0.png", "alpha": 0 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 1215, "skin": "res/menu/list_item_bg.png", "sizeGrid": "0,23,0,27", "left": 0, "height": 172 } }, { "type": "Image", "props": { "var": "_result", "top": 55, "skin": "menu/win.png", "left": 20 } }, { "type": "Image", "props": { "width": 200, "var": "_imgGame", "top": 0, "skin": "menu/game_title.png", "left": 0, "height": 68 }, "child": [{ "type": "Label", "props": { "var": "_gameName", "text": "桐庐麻将", "fontSize": 24, "font": "Microsoft YaHei", "color": "#c85200", "centerY": 0, "centerX": 0 } }] }, { "type": "Image", "props": { "y": 15, "x": 1026, "var": "_time_bg", "top": 15, "skin": "menu/time_bg.png", "right": 15 }, "child": [{ "type": "Label", "props": { "var": "_labInfo", "text": "label", "fontSize": 24, "color": "#995d3b", "centerY": 0, "centerX": 0 } }] }, { "type": "BaseButton", "props": { "y": 68, "x": 522, "visible": false, "var": "_share", "stateNum": 1, "skin": "menu/share.png", "right": 156, "name": "share", "labelSize": 24, "labelPadding": "-2", "labelColors": "#fdfdd2,#fdfdd2,", "alpha": 0 } }, { "type": "ScaleButton", "props": { "y": 104, "var": "_video", "stateNum": 1, "skin": "menu/cat.png", "right": 12.5, "name": "video", "labelSize": 24, "labelPadding": "-2", "labelColors": "#fdfdd2,#fdfdd2" } }, { "type": "Image", "props": { "y": 74, "var": "_imgScore", "skin": "menu/score_bg_0.png", "right": 628, "alpha": 1 } }, { "type": "Label", "props": { "y": 93, "x": 510, "var": "_score", "text": "5", "font": "font_num_10", "anchorX": 0.5, "alpha": 1 } }, { "type": "Image", "props": { "y": 84, "x": 32, "skin": "menu/time_icon.png", "alpha": 0 } }, { "type": "Image", "props": { "y": 93, "var": "_imgDi", "skin": "menu/di.png", "right": 763 } }, { "type": "Image", "props": { "y": 93, "var": "_imgMing", "skin": "menu/ming.png", "right": 601 } }, { "type": "Image", "props": { "y": 94, "var": "_imgNoRank", "skin": "menu/no_rank.png", "right": 652 } }, { "type": "Image", "props": { "y": -1, "x": 0, "var": "_imgMatch", "skin": "menu/tag.png" } }, { "type": "Label", "props": { "y": 21, "x": 249, "var": "_labMatchTitle", "text": "label", "fontSize": 24, "color": "#b77a5c" } }, { "type": "Label", "props": { "var": "_game_msg", "top": 20, "text": "房间号:999999   局数:6局    玩法:去掉2-6", "left": 220, "fontSize": 24, "font": "Microsoft YaHei", "color": "#995d3b" } }, { "type": "Label", "props": { "var": "_players", "top": 110, "text": "张三    Ggig    孤独的贱    Virtus.Pro    ", "left": 220, "fontSize": 24, "font": "Microsoft YaHei", "color": "#995d3b" } }] };
                return MenuHistoryScoreRendererUI;
            }(View));
            menu.MenuHistoryScoreRendererUI = MenuHistoryScoreRendererUI;
        })(menu = components.menu || (components.menu = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var menu;
        (function (menu) {
            var MenuLobbyUI = /** @class */ (function (_super) {
                __extends(MenuLobbyUI, _super);
                function MenuLobbyUI() {
                    return _super.call(this) || this;
                }
                MenuLobbyUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.menu.MenuLobbyUI.uiView);
                };
                MenuLobbyUI.uiView = { "type": "View", "props": { "width": 640, "height": 960 }, "child": [{ "type": "Image", "props": { "y": 10, "x": 10, "skin": "tongyong/tongyong_gray.png", "right": 0, "left": 0, "height": 100, "bottom": 70 } }, { "type": "Image", "props": { "y": 108, "x": 0, "top": 108, "skin": "tongyong/tongyong_gray.png", "right": 0, "left": 0, "height": 1 } }, { "type": "Image", "props": { "top": 154, "skin": "tongyong/tongyong_gray.png", "right": 0, "left": 0, "height": 20 } }, { "type": "Label", "props": { "y": 183, "x": 30, "text": "我的游戏", "fontSize": 26, "cacheAsBitmap": true } }, { "type": "Label", "props": { "y": 120, "x": 30, "var": "_labBoard", "text": "公告", "fontSize": 26 } }, { "type": "List", "props": { "y": 222, "x": 0, "var": "_list", "vScrollBarSkin": "tongyong/jindutiaodi.png", "right": 0, "repeatY": 5, "repeatX": 1, "left": 0, "height": 550 } }] };
                return MenuLobbyUI;
            }(View));
            menu.MenuLobbyUI = MenuLobbyUI;
        })(menu = components.menu || (components.menu = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var menu;
        (function (menu) {
            var MenuPersonUI = /** @class */ (function (_super) {
                __extends(MenuPersonUI, _super);
                function MenuPersonUI() {
                    return _super.call(this) || this;
                }
                MenuPersonUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.menu.MenuPersonUI.uiView);
                };
                MenuPersonUI.uiView = { "type": "View", "props": { "y": 0, "width": 640, "height": 960 }, "child": [{ "type": "ScaleButton", "props": { "y": 195, "visible": false, "var": "_btnBack", "skin": "tongyong/Mobile_anniu_lvse.png", "scaleValue": 0.8, "labelSize": 30, "label": "重新登录", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "BaseButton", "props": { "y": 536, "visible": false, "var": "_btnClub", "stateNum": 1, "skin": "tongyong/Mobile_anniu_lvse.png", "labelSize": 30, "label": "俱乐部", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "skin": "menu/menu_person_bg.png" } }, { "type": "BaseButton", "props": { "y": 387, "x": 183, "var": "_btnHelp", "stateNum": 2, "skin": "menu/help.png", "label": "" } }, { "type": "BaseButton", "props": { "y": 387, "x": 33, "var": "_btnShop", "stateNum": 2, "skin": "menu/shop.png", "label": "" } }, { "type": "BaseButton", "props": { "y": 387, "x": 338, "var": "_btnShare", "stateNum": 2, "skin": "menu/fenxiang.png", "label": "" } }, { "type": "BaseButton", "props": { "y": 387, "x": 486, "var": "_btnSet", "stateNum": 2, "skin": "menu/set.png", "label": "" } }, { "type": "BaseButton", "props": { "y": 555, "x": 33, "var": "_btnKefu", "stateNum": 2, "skin": "menu/kefu.png", "label": "" } }, { "type": "BaseButton", "props": { "y": 228, "var": "_btnRecharge", "stateNum": 1, "skin": "menu/jiahao.png", "centerX": 20 } }, { "type": "Image", "props": { "y": 202, "x": 255, "skin": "menu/yldk.png" } }, { "type": "Label", "props": { "y": 259, "x": 315, "width": 65, "var": "_diamond", "text": "label", "fontSize": 24, "color": "#ffdb4b", "align": "center" } }, { "type": "Image", "props": { "y": 391, "x": 115, "skin": "menu/tehui.png", "mouseThrough": true, "mouseEnabled": false } }] };
                return MenuPersonUI;
            }(View));
            menu.MenuPersonUI = MenuPersonUI;
        })(menu = components.menu || (components.menu = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var menu;
        (function (menu) {
            var MenuScoreUI = /** @class */ (function (_super) {
                __extends(MenuScoreUI, _super);
                function MenuScoreUI() {
                    return _super.call(this) || this;
                }
                MenuScoreUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.menu.MenuScoreUI.uiView);
                };
                MenuScoreUI.uiView = { "type": "View", "props": { "width": 1280, "height": 720 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_bg", "skin": "res/menu/bg.png" } }, { "type": "Box", "props": { "width": 1215, "var": "_listHistoryBox", "top": 92, "centerX": 0, "bottom": 15 }, "child": [{ "type": "Label", "props": { "y": 254, "var": "_labNoHistory", "text": "您最近3日还没有战绩喔~", "fontSize": 30, "color": "#9b5036", "centerX": -2.89794921875, "cacheAsBitmap": true } }, { "type": "Image", "props": { "y": 0, "skin": "menu/title_bg.png", "centerX": 0, "alpha": 0 }, "child": [{ "type": "Box", "props": { "y": 13, "x": 376 }, "child": [{ "type": "Image", "props": { "y": 41, "skin": "menu/yldk.png", "centerX": 0 } }, { "type": "Image", "props": { "y": 0, "x": 0, "skin": "menu/jqryl.png" } }, { "type": "Label", "props": { "y": 47, "x": 24, "width": 149, "var": "profit_1", "text": 0, "scaleY": 0.8, "scaleX": 0.8, "height": 32, "fontSize": 36, "color": "#ffe932", "align": "center" } }] }, { "type": "Box", "props": { "y": 13, "x": 99 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "menu/jryl.png" } }, { "type": "Image", "props": { "y": 41, "x": 0, "skin": "menu/yldk.png" } }, { "type": "Label", "props": { "y": 47, "x": 24, "width": 149, "var": "profit_0", "text": 0, "scaleY": 0.8, "scaleX": 0.8, "height": 32, "fontSize": 36, "color": "#ffe932", "align": "center" } }] }] }, { "type": "List", "props": { "width": 1215, "var": "_list", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 15, "spaceY": 5, "repeatX": 1, "centerX": 0, "bottom": 47 } }, { "type": "Image", "props": { "y": 20, "width": 185, "visible": false, "skin": "menu/tt.png", "centerX": 207.5, "alpha": 0 }, "child": [{ "type": "Image", "props": { "y": 14, "skin": "menu/jyyyl.png", "centerX": 0 } }, { "type": "Label", "props": { "y": 64, "var": "profit_2", "text": 0, "scaleY": 0.8, "scaleX": 0.8, "font": "font_num_6", "centerX": 0 } }] }] }, { "type": "Box", "props": { "width": 1215, "var": "_listDeatilBox", "top": 100, "height": 600, "centerX": 0, "bottom": -150 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseThrough": false, "mouseEnabled": false, "left": 0, "bottom": 0, "alpha": 0 } }, { "type": "Image", "props": { "top": 44, "skin": "tongyong/tongyong_bg.png", "sizeGrid": "25,34,30,24", "right": 10, "left": 10, "bottom": 147, "alpha": 0 } }, { "type": "Image", "props": { "top": 112, "skin": "tongyong/tongyong_top_border.png", "sizeGrid": "22,23,25,43", "right": 25, "left": 25, "bottom": 169, "alpha": 0 } }, { "type": "List", "props": { "width": 1215, "var": "_listDetail", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 106, "spaceY": 5, "repeatX": 1, "centerX": 0, "bottom": 183 } }, { "type": "Box", "props": { "y": 125, "right": 35, "left": 35, "height": 95, "alpha": 0 }, "child": [{ "type": "Image", "props": { "y": -80, "x": 1, "var": "_profit", "top": 0, "skin": "menu/bbt.png", "sizeGrid": "25,14,23,16", "right": 1, "left": 1, "bottom": 0 } }] }, { "type": "Image", "props": { "y": 30, "width": 319, "skin": "tongyong/tongyong_bg_title.png", "centerX": 0.5, "alpha": 0 }, "child": [{ "type": "Image", "props": { "width": 160, "var": "_luxiangname", "skin": "createTable/3.png", "scaleY": 0.8, "scaleX": 0.8, "centerY": -7.399999999999999, "centerX": 0, "alpha": 0 } }] }, { "type": "Image", "props": { "y": 19, "width": 1215, "skin": "res/menu/end_bg.png", "height": 64, "centerX": 0 }, "child": [{ "type": "Label", "props": { "var": "_titles", "text": "   局数            时间 ", "fontSize": 24, "font": "Microsoft YaHei", "color": "#995d3b", "centerY": 0, "centerX": -482.5 } }, { "type": "List", "props": { "y": 0, "x": 263, "width": 860, "var": "_players", "rotation": 0, "repeatY": 1, "repeatX": 6, "renderType": "render", "height": 66 } }] }] }, { "type": "ScaleButton", "props": { "width": 70, "var": "_btn_close", "top": 10, "stateNum": 1, "skin": "menu/btnClose.png", "right": 10, "height": 59 } }, { "type": "ScaleButton", "props": { "var": "_other_replay", "top": 15, "stateNum": 1, "skin": "menu/other_replay.png", "left": 10, "alpha": 0 } }, { "type": "Image", "props": { "top": 10, "skin": "menu/title.png", "centerX": 0 } }, { "type": "Image", "props": { "top": 20, "skin": "menu/zhanji.png", "centerX": 0 } }] };
                return MenuScoreUI;
            }(View));
            menu.MenuScoreUI = MenuScoreUI;
        })(menu = components.menu || (components.menu = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var menu;
        (function (menu) {
            var creatdaboluoUI = /** @class */ (function (_super) {
                __extends(creatdaboluoUI, _super);
                function creatdaboluoUI() {
                    return _super.call(this) || this;
                }
                creatdaboluoUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.menu.creatdaboluoUI.uiView);
                };
                creatdaboluoUI.uiView = { "type": "View", "props": { "width": 960, "height": 640 }, "child": [{ "type": "Image", "props": { "y": 324, "x": 148, "skin": "menu/daboluo_create_1.png" } }, { "type": "Image", "props": { "y": 453, "x": 324, "width": 74, "skin": "menu/daboluo_create_6.png", "skewY": 0, "skewX": 0, "scaleY": 1, "rotation": 19, "pivotY": 123, "pivotX": 21, "height": 114 }, "compId": 7 }, { "type": "Image", "props": { "y": 456, "x": 315, "width": 75, "skin": "menu/daboluo_create_5.png", "rotation": 19, "pivotY": 128, "pivotX": 18, "height": 114 }, "compId": 9 }, { "type": "Image", "props": { "y": 453, "x": 318, "width": 75, "skin": "menu/daboluo_create_8.png", "rotation": 19, "pivotY": 126, "pivotX": 24, "height": 114 }, "compId": 10 }, { "type": "Image", "props": { "y": 478, "x": 317, "width": 76, "skin": "menu/daboluo_create_7.png", "rotation": 19, "pivotY": 148, "pivotX": 39, "height": 114 }, "compId": 11 }, { "type": "Image", "props": { "y": 368, "x": 238, "skin": "menu/daboluo_create_2.png" } }, { "type": "Image", "props": { "y": 351, "x": 406, "skin": "menu/daboluo_create_3.png" }, "compId": 13 }, { "type": "Image", "props": { "y": 421, "x": 213, "skin": "menu/daboluo_create_4.png" }, "compId": 14 }], "animations": [{ "nodes": [{ "target": 7, "keyframes": { "x": [{ "value": 324, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 0 }, { "value": 324, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 30 }, { "value": 324, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 180 }], "rotation": [{ "value": 32, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "rotation", "index": 0 }, { "value": 19, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "rotation", "index": 10 }, { "value": 19, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "rotation", "index": 30 }, { "value": 32, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "rotation", "index": 40 }] } }, { "target": 9, "keyframes": { "x": [{ "value": 315, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "x", "index": 0 }, { "value": 315, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "x", "index": 30 }, { "value": 315, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "x", "index": 180 }], "rotation": [{ "value": 5, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "rotation", "index": 0 }, { "value": 19, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "rotation", "index": 10 }, { "value": 19, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "rotation", "index": 30 }, { "value": 5, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "rotation", "index": 40 }] } }, { "target": 10, "keyframes": { "x": [{ "value": 318, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "x", "index": 0 }, { "value": 318, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "x", "index": 30 }, { "value": 318, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "x", "index": 180 }], "rotation": [{ "value": -17, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "rotation", "index": 0 }, { "value": 19, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "rotation", "index": 10 }, { "value": 19, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "rotation", "index": 30 }, { "value": -17, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "rotation", "index": 40 }] } }, { "target": 11, "keyframes": { "x": [{ "value": 317, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "x", "index": 0 }, { "value": 317, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "x", "index": 30 }, { "value": 317, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "x", "index": 180 }], "rotation": [{ "value": -32, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "rotation", "index": 0 }, { "value": 19, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "rotation", "index": 10 }, { "value": 19, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "rotation", "index": 30 }, { "value": -32, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "rotation", "index": 40 }] } }, { "target": 14, "keyframes": { "y": [{ "value": 421, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 0 }, { "value": 441, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 30 }, { "value": 421, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 60 }, { "value": 441, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 90 }, { "value": 421, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 120 }, { "value": 441, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 150 }, { "value": 421, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 180 }] } }, { "target": 13, "keyframes": { "y": [{ "value": 351, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 0 }, { "value": 371, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 31 }, { "value": 351, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 60 }, { "value": 371, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 90 }, { "value": 351, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 120 }, { "value": 371, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 150 }, { "value": 351, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 180 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }, { "nodes": [{ "target": 7, "keyframes": { "x": [{ "value": 324, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 0 }], "rotation": [{ "value": 32, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "rotation", "index": 0 }] } }, { "target": 9, "keyframes": { "x": [{ "value": 315, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "x", "index": 0 }], "rotation": [{ "value": 5, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "rotation", "index": 0 }] } }, { "target": 10, "keyframes": { "x": [{ "value": 318, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "x", "index": 0 }], "rotation": [{ "value": -17, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "rotation", "index": 0 }] } }, { "target": 11, "keyframes": { "x": [{ "value": 317, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "x", "index": 0 }], "rotation": [{ "value": -32, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "rotation", "index": 0 }] } }, { "target": 14, "keyframes": { "y": [{ "value": 421, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 0 }, { "value": 429, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 20 }, { "value": 421, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 45 }] } }, { "target": 13, "keyframes": { "y": [{ "value": 351, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 0 }, { "value": 359, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 20 }, { "value": 351, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 45 }] } }], "name": "ani1_0", "id": 1, "frameRate": 24, "action": 0 }] };
                return creatdaboluoUI;
            }(View));
            menu.creatdaboluoUI = creatdaboluoUI;
        })(menu = components.menu || (components.menu = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var report;
        (function (report) {
            var ReportDescRendererUI = /** @class */ (function (_super) {
                __extends(ReportDescRendererUI, _super);
                function ReportDescRendererUI() {
                    return _super.call(this) || this;
                }
                ReportDescRendererUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.report.ReportDescRendererUI.uiView);
                };
                ReportDescRendererUI.uiView = { "type": "View", "props": { "width": 172, "height": 20 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "var": "_labKey", "text": "label", "fontSize": 20, "color": "#244E54", "align": "left" } }, { "type": "Label", "props": { "y": 0, "var": "_labValue", "text": "label", "right": 0, "fontSize": 20, "color": "#244E54", "align": "right" } }] };
                return ReportDescRendererUI;
            }(View));
            report.ReportDescRendererUI = ReportDescRendererUI;
        })(report = components.report || (components.report = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var report;
        (function (report) {
            var ReportRenderUI = /** @class */ (function (_super) {
                __extends(ReportRenderUI, _super);
                function ReportRenderUI() {
                    return _super.call(this) || this;
                }
                ReportRenderUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.report.ReportRenderUI.uiView);
                };
                ReportRenderUI.uiView = { "type": "View", "props": { "width": 212, "height": 362 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 212, "skin": "realtime/realtime_bg_record_player.png", "sizeGrid": "150,50,50,50", "height": 362 } }, { "type": "List", "props": { "y": 164, "width": 172, "var": "_list", "vScrollBarSkin": "tongyong/jindutiaodi.png", "spaceY": 15, "repeatY": 5, "repeatX": 1, "renderType": "render", "centerX": 0 } }, { "type": "Label", "props": { "y": 120, "var": "_labScore", "text": "label", "fontSize": 30, "centerX": 0 } }] };
                return ReportRenderUI;
            }(View));
            report.ReportRenderUI = ReportRenderUI;
        })(report = components.report || (components.report = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var shop;
        (function (shop) {
            var GoodsRendererUI = /** @class */ (function (_super) {
                __extends(GoodsRendererUI, _super);
                function GoodsRendererUI() {
                    return _super.call(this) || this;
                }
                GoodsRendererUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.shop.GoodsRendererUI.uiView);
                };
                GoodsRendererUI.uiView = { "type": "View", "props": { "width": 276, "height": 201 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 9, "skin": "shop/sBtn_Itembg.png", "centerX": 0, "anchorY": 0 } }, { "type": "Label", "props": { "y": 127, "var": "_labName", "text": "12颗钻石", "fontSize": 23, "color": "#c82d0e", "centerX": -4.702880859375 } }, { "type": "Image", "props": { "var": "_imgIcon", "skin": "shop/img_goods_0.png", "centerY": -16.5, "centerX": 0, "anchorY": 1, "anchorX": 0.5 } }, { "type": "Box", "props": { "y": 155, "width": 100, "var": "_box", "height": 50, "centerX": 1 }, "child": [{ "type": "Image", "props": { "y": 24, "x": 18, "skin": "shop/shop_num.png", "centerY": -1, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 23, "x": 54, "var": "_label_rmb", "underlineColor": "#ffffff", "underline": false, "text": "6", "strokeColor": "#6c3b3b", "stroke": 5, "fontSize": 23, "color": "#ffffff", "anchorY": 0.5, "anchorX": 0.5 } }] }, { "type": "Image", "props": { "y": 0, "x": -1, "var": "_imgExtra", "skin": "shop/img_flag.png" } }, { "type": "Label", "props": { "y": 48, "x": 43, "var": "_labExtra", "text": "送20颗", "stroke": 1, "rotation": -45, "fontSize": 26, "font": "Microsoft YaHei", "color": "#e9ff00", "anchorY": 0.5, "anchorX": 0.5, "align": "center" } }] };
                return GoodsRendererUI;
            }(View));
            shop.GoodsRendererUI = GoodsRendererUI;
        })(shop = components.shop || (components.shop = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var table;
        (function (table) {
            var BatteryUI = /** @class */ (function (_super) {
                __extends(BatteryUI, _super);
                function BatteryUI() {
                    return _super.call(this) || this;
                }
                BatteryUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.table.BatteryUI.uiView);
                };
                BatteryUI.uiView = { "type": "View", "props": { "width": 48, "height": 19 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "table/battery_frame.png" } }, { "type": "Image", "props": { "x": 3, "var": "_imgProcess", "skin": "table/battery_bg1.png", "centerY": 0 } }, { "type": "Image", "props": { "var": "_imgCharge", "skin": "table/battery_charge.png", "centerY": 0, "centerX": 0 } }] };
                return BatteryUI;
            }(View));
            table.BatteryUI = BatteryUI;
        })(table = components.table || (components.table = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var table;
        (function (table) {
            var InviteUI = /** @class */ (function (_super) {
                __extends(InviteUI, _super);
                function InviteUI() {
                    return _super.call(this) || this;
                }
                InviteUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.table.InviteUI.uiView);
                };
                InviteUI.uiView = { "type": "View", "props": { "width": 284, "height": 140 }, "child": [{ "type": "Image", "props": { "y": 99, "x": 18, "visible": false, "skin": "table/table_roomid.png" } }, { "type": "ScaleButton", "props": { "var": "_btnInvite", "stateNum": 1, "skin": "table/table_share.png", "scaleValue": 0.9, "scaleTime": 100, "centerY": 0, "centerX": 0 } }] };
                return InviteUI;
            }(View));
            table.InviteUI = InviteUI;
        })(table = components.table || (components.table = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var table;
        (function (table) {
            var MenuUI = /** @class */ (function (_super) {
                __extends(MenuUI, _super);
                function MenuUI() {
                    return _super.call(this) || this;
                }
                MenuUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.table.MenuUI.uiView);
                };
                MenuUI.uiView = { "type": "View", "props": { "width": 372, "top": 0, "right": 0, "height": 720, "bottom": 0 }, "child": [{ "type": "ScaleButton", "props": { "x": 308, "var": "_btnMenu", "top": 20, "skin": "table/table_btn_menu.png", "scaleValue": 0.9, "scaleTime": 100, "right": 25, "label": "" } }, { "type": "ScaleButton", "props": { "visible": true, "var": "_btnChat", "top": 120, "stateNum": 1, "skin": "table/table_btn_chat.png", "scaleValue": 1, "scaleTime": 100, "right": 25, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "ScaleButton", "props": { "visible": false, "var": "_btnMatchRecord", "top": 120, "stateNum": 1, "skin": "match/matchRecord.png", "scaleValue": 0.9, "scaleTime": 100, "right": 25, "label": "" } }, { "type": "ScaleButton", "props": { "visible": false, "var": "_btnMicrophone", "stateNum": 1, "skin": "table/table_btn_record.png", "scaleValue": 0.9, "scaleTime": 100, "right": 29, "bottom": 50 } }, { "type": "CheckBox", "props": { "var": "_checkBox_laba", "stateNum": 2, "skin": "table/cb_laba.png", "right": 26, "bottom": 152 } }, { "type": "CheckBox", "props": { "var": "_checkBox_huatong", "stateNum": 2, "skin": "table/cb_huatong.png", "right": 25, "bottom": 52 } }, { "type": "Box", "props": { "y": 80, "x": 0, "width": 219, "var": "_box", "height": 290 }, "child": [{ "type": "Image", "props": { "y": -81, "x": 61, "var": "_imgBack", "skin": "table/table_bg_more.png" } }, { "type": "ScaleButton", "props": { "y": 67, "x": 314, "var": "_btnBack", "skin": "table/table_btn_back.png", "scaleValue": 0.9, "scaleTime": 100, "label": "" } }, { "type": "ScaleButton", "props": { "y": 278, "x": 312, "var": "_btnSetup", "skin": "table/table_btn_setup.png", "scaleValue": 0.9, "scaleTime": 100, "label": "" } }, { "type": "ScaleButton", "props": { "y": 378, "x": 314, "var": "_btnEnd", "skin": "table/table_btn_end.png", "scaleValue": 0.9, "scaleTime": 100, "label": "" } }, { "type": "ScaleButton", "props": { "y": 173, "x": 314, "var": "_btnRestart", "skin": "table/table_btn_restart.png", "scaleValue": 0.9, "scaleTime": 100, "label": "" } }, { "type": "ScaleButton", "props": { "y": 484, "x": 310, "var": "_btnExit", "skin": "common/sBtn_exit2.png", "scaleValue": 0.9, "scaleTime": 100, "label": "" } }] }] };
                return MenuUI;
            }(View));
            table.MenuUI = MenuUI;
        })(table = components.table || (components.table = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var table;
        (function (table) {
            var NetSignalUI = /** @class */ (function (_super) {
                __extends(NetSignalUI, _super);
                function NetSignalUI() {
                    return _super.call(this) || this;
                }
                NetSignalUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.table.NetSignalUI.uiView);
                };
                NetSignalUI.uiView = { "type": "View", "props": { "width": 33, "height": 24 }, "child": [{ "type": "Image", "props": { "var": "_4g1", "skin": "table/table_net_3g_1.png", "centerY": 0, "centerX": 0 } }, { "type": "Image", "props": { "var": "_4g2", "skin": "table/table_net_3g_2.png", "centerY": 0, "centerX": 0 } }, { "type": "Image", "props": { "var": "_4g3", "skin": "table/table_net_3g_3.png", "centerY": 0, "centerX": 0 } }, { "type": "Image", "props": { "var": "_wifi3", "skin": "table/table_net_wifi_3.png", "centerY": 0, "centerX": 0 } }, { "type": "Image", "props": { "var": "_wifi2", "skin": "table/table_net_wifi_2.png", "centerY": 0, "centerX": 0 } }, { "type": "Image", "props": { "var": "_wifi1", "skin": "table/table_net_wifi_1.png", "centerY": 0, "centerX": 0 } }] };
                return NetSignalUI;
            }(View));
            table.NetSignalUI = NetSignalUI;
        })(table = components.table || (components.table = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var table;
        (function (table) {
            var PlayerInGameUI = /** @class */ (function (_super) {
                __extends(PlayerInGameUI, _super);
                function PlayerInGameUI() {
                    return _super.call(this) || this;
                }
                PlayerInGameUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.table.PlayerInGameUI.uiView);
                };
                PlayerInGameUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 232, "height": 145 }, "child": [{ "type": "BaseButton", "props": { "y": 4, "x": 4, "var": "_btnSit", "stateNum": 2, "skin": "table/table_btn_sit.png" } }, { "type": "Image", "props": { "y": 4, "x": 4, "var": "_imgEmpty", "skin": "table/table_seat_empty.png" } }, { "type": "Box", "props": { "y": 0, "x": 0, "var": "_box" }, "child": [{ "type": "Image", "props": { "y": -20, "x": -1, "skin": "table/table_kuang.png" } }, { "type": "Image", "props": { "y": 99, "x": 3, "skin": "table/table_bg_name.png" } }, { "type": "Image", "props": { "y": 11, "x": 11, "var": "_imgDisconnect", "skin": "table/table_offline.png" } }, { "type": "Image", "props": { "y": 11, "x": 11, "visible": false, "var": "_imgLeave", "skin": "table/robot_ing.png" } }, { "type": "Image", "props": { "y": 67, "x": 6, "visible": false, "var": "_imgFlower", "skin": "table/table_buhua.png" } }, { "type": "Label", "props": { "y": 101, "x": 6, "width": 86, "var": "_labScore", "text": "label", "height": 22, "fontSize": 20, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "y": 70, "x": 51, "width": 37, "visible": false, "var": "_labFlower", "text": 5, "height": 20, "fontSize": 20, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "y": -13, "x": -6, "width": 110, "var": "_labName", "text": "label", "height": 20, "fontSize": 20, "color": "#ffffff", "align": "center" } }, { "type": "Image", "props": { "y": -16, "x": 70, "var": "_imgMaster", "skin": "table/table_icon_zhuang.png" } }, { "type": "Image", "props": { "y": 60, "x": 57, "visible": false, "var": "_imgPao", "skin": "card/tag_0.png" } }, { "type": "Image", "props": { "y": -74, "x": 4, "var": "_imgKengzhu", "skin": "table/table_kengzhu.png" } }, { "type": "Image", "props": { "y": 37, "x": -116, "var": "_imgReady", "skin": "table/table_ready.png" } }] }] };
                return PlayerInGameUI;
            }(View));
            table.PlayerInGameUI = PlayerInGameUI;
        })(table = components.table || (components.table = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var table;
        (function (table) {
            var PlayerViewUI = /** @class */ (function (_super) {
                __extends(PlayerViewUI, _super);
                function PlayerViewUI() {
                    return _super.call(this) || this;
                }
                PlayerViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.table.PlayerViewUI.uiView);
                };
                PlayerViewUI.uiView = { "type": "View", "props": { "width": 232, "height": 145 }, "child": [{ "type": "ScaleButton", "props": { "y": 46, "x": 52, "var": "_btnSit", "stateNum": 1, "skin": "table/table_btn_sit.png", "scaleValue": 0.9, "scaleTime": 100 } }, { "type": "Image", "props": { "y": -1, "x": 6, "var": "_imgEmpty", "skin": "table/table_seat_empty.png" } }, { "type": "Box", "props": { "y": 0, "x": 0, "width": 236, "var": "_box", "height": 145 }, "child": [{ "type": "Image", "props": { "y": -9, "x": -1, "skin": "tongyong/head_bg.png" } }, { "type": "Image", "props": { "y": 2, "x": 9, "width": 86, "var": "_imgDisconnect", "skin": "table/table_offline.png", "height": 86 } }, { "type": "Image", "props": { "y": 2, "x": 9, "width": 86, "visible": false, "var": "_imgLeave", "skin": "table/robot_ing.png", "height": 86 } }, { "type": "Image", "props": { "x": -6, "width": 116, "skin": "tongyong/img_jifendi.png", "height": 32, "bottom": -5 } }, { "type": "Label", "props": { "x": 54, "width": 110, "var": "_labName", "height": 20, "fontSize": 20, "font": "Microsoft YaHei", "color": "#bfc7c7", "bottom": 30, "bold": false, "anchorY": 0.5, "anchorX": 0.5, "align": "center" } }, { "type": "Label", "props": { "x": 71, "var": "_labScore", "text": "000", "fontSize": 25, "font": "Microsoft YaHei", "color": "#f7eac8", "bottom": 0, "bold": false, "anchorY": 0.5, "anchorX": 0.5, "align": "center" } }, { "type": "Image", "props": { "y": -8, "x": -13, "var": "_imgMaster", "skin": "table/table_icon_zhuang.png" } }, { "type": "Image", "props": { "y": 37, "x": -126, "var": "_imgReady", "skin": "table/table_ready.png" } }] }] };
                return PlayerViewUI;
            }(View));
            table.PlayerViewUI = PlayerViewUI;
        })(table = components.table || (components.table = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var table;
        (function (table) {
            var RecordUI = /** @class */ (function (_super) {
                __extends(RecordUI, _super);
                function RecordUI() {
                    return _super.call(this) || this;
                }
                RecordUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.table.RecordUI.uiView);
                };
                RecordUI.uiView = { "type": "View", "props": { "width": 182, "height": 182 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 182, "skin": "table/table_record_1.png", "height": 182, "centerY": 0, "centerX": 0, "alpha": 0 }, "compId": 9 }, { "type": "Image", "props": { "x": 0, "width": 182, "var": "_img2", "skin": "table/table_record_1.png", "height": 182, "centerY": 0, "centerX": 0, "alpha": 0 }, "compId": 2 }, { "type": "Image", "props": { "skin": "table/table_record_3.png", "centerY": 0, "centerX": 0 } }, { "type": "Image", "props": { "var": "_circle", "skin": "table/table_record_4.png", "centerY": 0, "centerX": 0 } }, { "type": "Image", "props": { "y": 200, "var": "_imgUp", "skin": "table/table_record_5.png", "centerX": 0 } }, { "type": "Image", "props": { "y": 200, "var": "_imgCancel", "skin": "table/table_record_6.png", "centerX": 0 } }], "animations": [{ "nodes": [{ "target": 9, "keyframes": { "x": [{ "value": 39, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "x", "index": 0 }, { "value": 16.9, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "x", "index": 17 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "x", "index": 28 }], "width": [{ "value": 104, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "width", "index": 0 }, { "value": 182, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "width", "index": 28 }], "height": [{ "value": 104, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "height", "index": 0 }, { "value": 182, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "height", "index": 28 }], "alpha": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "alpha", "index": 17 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "alpha", "index": 28 }] } }, { "target": 2, "keyframes": { "x": [{ "value": 39, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 0 }, { "value": 39, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 22 }, { "value": 17.727272727272727, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 34 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 44 }], "width": [{ "value": 104, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "width", "index": 0 }, { "value": 104, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "width", "index": 22 }, { "value": 182, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "width", "index": 44 }], "height": [{ "value": 104, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "height", "index": 0 }, { "value": 104, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "height", "index": 22 }, { "value": 182, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "height", "index": 44 }], "alpha": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 34 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 44 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
                return RecordUI;
            }(View));
            table.RecordUI = RecordUI;
        })(table = components.table || (components.table = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var table;
        (function (table) {
            var TablePopUI = /** @class */ (function (_super) {
                __extends(TablePopUI, _super);
                function TablePopUI() {
                    return _super.call(this) || this;
                }
                TablePopUI.prototype.createChildren = function () {
                    View.regComponent("ui.components.table.InviteUI", ui.components.table.InviteUI);
                    View.regComponent("ui.components.chat.ChatRecord1UI", ui.components.chat.ChatRecord1UI);
                    View.regComponent("ui.components.table.tipsUI", ui.components.table.tipsUI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.table.TablePopUI.uiView);
                };
                TablePopUI.uiView = { "type": "View", "props": { "width": 1280, "height": 720, "centerX": 0 }, "child": [{ "type": "Image", "props": { "visible": false, "var": "_tuoguan", "skin": "match/tuoguan.png", "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "BaseButton", "props": { "var": "_btnTuoGuan", "stateNum": 2, "skin": "match/btn_tuoguan.png", "label": "", "centerX": 0, "bottom": 57 } }] }, { "type": "Invite", "props": { "visible": false, "var": "_inviteUI", "centerY": 81, "centerX": -3, "runtime": "ui.components.table.InviteUI" } }, { "type": "ScaleButton", "props": { "visible": false, "var": "_btnBack", "stateNum": 2, "skin": "table/table_btn_back_2.png", "scaleValue": 0.9, "scaleTime": 100, "centerY": 180, "centerX": 300 } }, { "type": "ScaleButton", "props": { "visible": false, "var": "_btnEnd", "stateNum": 2, "skin": "table/table_btn_end_2.png", "scaleValue": 0.9, "scaleTime": 100, "centerY": 180, "centerX": -300 } }, { "type": "Box", "props": { "y": 0, "var": "_box", "mouseThrough": true } }, { "type": "ScaleButton", "props": { "y": 122, "visible": false, "var": "_btnRealTime", "stateNum": 2, "skin": "tongyong/tongyong_btn_realtime.png", "scaleY": 0.8, "scaleX": 0.8, "scaleValue": 0.9, "scaleTime": 100, "centerX": 400.00000000000006 } }, { "type": "ScaleButton", "props": { "x": 561, "visible": false, "var": "_btnTest", "stateNum": 1, "skin": "table/table_btn_chat.png", "scaleValue": 0.9, "scaleTime": 100, "labelSize": 20, "labelColors": "#00ff00", "label": "test", "bottom": 88 } }, { "type": "ChatRecord1", "props": { "y": 0, "var": "_chatVisiter", "centerX": 0, "runtime": "ui.components.chat.ChatRecord1UI" } }, { "type": "ScaleButton", "props": { "y": 442, "visible": false, "var": "_next", "stateNum": 1, "skin": "common/sBtn_retry.png", "scaleValue": 0.9, "scaleTime": 100, "centerX": -2.9999999999999574 } }, { "type": "Image", "props": { "visible": false, "var": "_wait", "skin": "table/wait_others.png", "centerY": 54, "centerX": -5.5 } }, { "type": "ScaleButton", "props": { "width": 60, "visible": false, "var": "_btnSsyy", "stateNum": 2, "skin": "table/ssyy.png", "scaleValue": 0.9, "scaleTime": 100, "right": 0, "pivotY": 30, "pivotX": 30, "height": 60, "bottom": 0 } }, { "type": "ScaleButton", "props": { "visible": false, "var": "_btnSound", "stateNum": 1, "skin": "table/playSound.png", "scaleValue": 0.9, "scaleTime": 100, "right": 5, "bottom": 154 } }, { "type": "ScaleButton", "props": { "y": 189, "visible": false, "var": "_btnMatchRecord", "stateNum": 1, "skin": "match/matchRecord.png", "scaleValue": 0.9, "scaleTime": 100, "right": -0.5, "label": "" } }, { "type": "tips", "props": { "y": 306, "x": 402, "var": "_aniTip", "mouseThrough": true, "mouseEnabled": false, "runtime": "ui.components.table.tipsUI" } }, { "type": "ScaleButton", "props": { "visible": false, "var": "_btnCheckResult", "stateNum": 1, "skin": "common/sBtn_checkReslut.png", "scaleValue": 0.9, "scaleTime": 100, "centerY": 0, "centerX": 0 } }] };
                return TablePopUI;
            }(View));
            table.TablePopUI = TablePopUI;
        })(table = components.table || (components.table = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var table;
        (function (table) {
            var tipsUI = /** @class */ (function (_super) {
                __extends(tipsUI, _super);
                function tipsUI() {
                    return _super.call(this) || this;
                }
                tipsUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.table.tipsUI.uiView);
                };
                tipsUI.uiView = { "type": "View", "props": { "width": 255, "height": 63 }, "child": [{ "type": "Image", "props": { "y": 1, "x": 0, "width": 255, "skin": "table/tips_new.png", "height": 58 }, "compId": 2 }], "animations": [{ "nodes": [{ "target": 2, "keyframes": { "y": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "y", "index": 0 }, { "value": 5, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "y", "index": 10 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "y", "index": 25 }], "width": [{ "value": 255, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "width", "index": 0 }], "height": [{ "value": 58, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "height", "index": 0 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
                return tipsUI;
            }(View));
            table.tipsUI = tipsUI;
        })(table = components.table || (components.table = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var components;
    (function (components) {
        var table;
        (function (table) {
            var tips1UI = /** @class */ (function (_super) {
                __extends(tips1UI, _super);
                function tips1UI() {
                    return _super.call(this) || this;
                }
                tips1UI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.components.table.tips1UI.uiView);
                };
                tips1UI.uiView = { "type": "View", "props": { "width": 260, "height": 58 }, "child": [{ "type": "Image", "props": { "y": 1, "x": 0, "width": 255, "skin": "table/tips_new_1.png", "height": 58 }, "compId": 2 }], "animations": [{ "nodes": [{ "target": 2, "keyframes": { "y": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "y", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "y", "index": 10 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "y", "index": 25 }], "x": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 0 }, { "value": 5, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 10 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 25 }], "width": [{ "value": 255, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "width", "index": 0 }], "height": [{ "value": 58, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "height", "index": 0 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
                return tips1UI;
            }(View));
            table.tips1UI = tips1UI;
        })(table = components.table || (components.table = {}));
    })(components = ui.components || (ui.components = {}));
})(ui || (ui = {}));
(function (ui) {
    var dialog;
    (function (dialog) {
        var BaseDialogUI = /** @class */ (function (_super) {
            __extends(BaseDialogUI, _super);
            function BaseDialogUI() {
                return _super.call(this) || this;
            }
            BaseDialogUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.dialog.BaseDialogUI.uiView);
            };
            BaseDialogUI.uiView = { "type": "View", "props": { "width": 69, "height": 118 }, "child": [{ "type": "Image", "props": { "var": "_mask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.7 } }] };
            return BaseDialogUI;
        }(View));
        dialog.BaseDialogUI = BaseDialogUI;
    })(dialog = ui.dialog || (ui.dialog = {}));
})(ui || (ui = {}));
(function (ui) {
    var dialog;
    (function (dialog) {
        var ShareDlgUI = /** @class */ (function (_super) {
            __extends(ShareDlgUI, _super);
            function ShareDlgUI() {
                return _super.call(this) || this;
            }
            ShareDlgUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.dialog.ShareDlgUI.uiView);
            };
            ShareDlgUI.uiView = { "type": "View", "props": { "width": 581, "height": 356, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": -1912, "x": -2404, "width": 5817, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "height": 4003, "alpha": 0.5 } }, { "type": "Box", "props": { "width": 581, "var": "_box", "height": 356, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "width": 581, "var": "_bg", "skin": "share/img_shareBg.png", "height": 356, "centerY": 0, "centerX": 0 }, "child": [{ "type": "BaseButton", "props": { "var": "_wechat", "top": 90, "stateNum": 1, "skin": "share/btn_pengyou.png", "label": "", "centerX": -130 } }, { "type": "BaseButton", "props": { "width": 179, "var": "_pyq", "top": 90, "stateNum": 1, "skin": "share/btn_pengyouquan.png", "label": "", "height": 220, "centerX": 130 }, "child": [{ "type": "Image", "props": { "var": "_tag", "top": 0, "skin": "share/img_songzuanshi.png", "centerX": 0 } }] }, { "type": "Image", "props": { "var": "_title", "top": 14, "skin": "share/img_title_fenxiang.png", "centerX": 0 } }] }] }] };
            return ShareDlgUI;
        }(View));
        dialog.ShareDlgUI = ShareDlgUI;
    })(dialog = ui.dialog || (ui.dialog = {}));
})(ui || (ui = {}));
(function (ui) {
    var guanpai;
    (function (guanpai) {
        var GuanPaiUI = /** @class */ (function (_super) {
            __extends(GuanPaiUI, _super);
            function GuanPaiUI() {
                return _super.call(this) || this;
            }
            GuanPaiUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.guanpai.GuanPaiUI.uiView);
            };
            GuanPaiUI.uiView = { "type": "View", "props": { "width": 1280, "top": 0, "mouseThrough": true, "bottom": 0 }, "child": [{ "type": "BaseButton", "props": { "visible": false, "var": "_btnPass", "stateNum": 1, "skin": "guanpai/guanpai_btn_buchu.png", "labelSize": 30, "centerX": -256, "bottom": 195 } }, { "type": "BaseButton", "props": { "var": "_btnTips", "stateNum": 1, "skin": "guanpai/guanpai_btn_tishi.png", "labelSize": 30, "centerX": 58, "bottom": 195 } }, { "type": "BaseButton", "props": { "var": "_btnDiscard", "stateNum": 1, "skin": "guanpai/guanpai_btn_chupai.png", "labelSize": 30, "centerX": 254, "bottom": 195 } }, { "type": "BaseButton", "props": { "var": "_btnNotCall", "stateNum": 2, "skin": "guanpai/guanpai_btn_buqiang.png", "labelSize": 30, "centerX": -160, "bottom": 195 } }, { "type": "BaseButton", "props": { "var": "_btnCall", "stateNum": 2, "skin": "guanpai/guanpai_btn_qiang.png", "labelSize": 30, "centerX": 160, "bottom": 195 } }, { "type": "Box", "props": { "y": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "skin": "poker/poker_title.png", "centerX": 0 } }, { "type": "Label", "props": { "y": 8, "x": 58, "var": "_labRoom", "text": "房间号：11234", "fontSize": 18, "color": "#a1d2d0" } }, { "type": "Label", "props": { "y": 8, "x": 269, "var": "_labCount", "text": "第3/5局", "fontSize": 18, "color": "#a1d2d0" } }, { "type": "Label", "props": { "y": 8, "x": 374, "var": "_labTime", "text": "23:45", "fontSize": 18, "color": "#a1d2d0" } }] }, { "type": "Image", "props": { "var": "_imgNoCard", "skin": "poker/poker_nocard.png", "centerX": 0, "bottom": 93 } }, { "type": "Image", "props": { "y": 50, "width": 406, "skin": "poker/poker_title_2.png", "height": 33, "centerX": 1 }, "child": [{ "type": "Label", "props": { "var": "_labRule", "text": "label", "fontSize": 18, "color": "#2a7b78", "centerY": 0, "centerX": 0 } }] }, { "type": "Image", "props": { "var": "_imgCall", "skin": "guanpai/guanpai_img_14.png", "centerX": 0.5, "bottom": 280 } }, { "type": "Image", "props": { "var": "_imgWaitCall", "skin": "guanpai/guanpai_img_5.png", "centerX": 0.5, "bottom": 218 } }, { "type": "Box", "props": { "y": 0, "centerX": -300 }, "child": [{ "type": "Image", "props": { "skin": "poker/poker_beishu.png" } }, { "type": "Label", "props": { "y": 9, "x": 52, "var": "_labMultiple", "text": "×2", "height": 26, "fontSize": 26, "color": "#ffff14", "align": "left" } }] }] };
            return GuanPaiUI;
        }(View));
        guanpai.GuanPaiUI = GuanPaiUI;
    })(guanpai = ui.guanpai || (ui.guanpai = {}));
})(ui || (ui = {}));
(function (ui) {
    var guanpai;
    (function (guanpai) {
        var GuanPaiGameEndUI = /** @class */ (function (_super) {
            __extends(GuanPaiGameEndUI, _super);
            function GuanPaiGameEndUI() {
                return _super.call(this) || this;
            }
            GuanPaiGameEndUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.guanpai.GuanPaiGameEndUI.uiView);
            };
            GuanPaiGameEndUI.uiView = { "type": "View", "props": { "width": 537, "height": 392 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 106, "text": "昵称", "height": 20, "fontSize": 20, "color": "#FFEEB5" } }, { "type": "Label", "props": { "y": 0, "x": 245, "width": 60, "text": "剩余牌", "fontSize": 20, "color": "#FFEEB5" } }, { "type": "Label", "props": { "y": 0, "text": "分数", "right": 100, "height": 20, "fontSize": 20, "color": "#FFEEB5" } }, { "type": "List", "props": { "y": 37, "width": 537, "var": "_list", "spaceY": 12, "repeatY": 3, "repeatX": 1, "height": 186, "centerX": 0 } }, { "type": "BaseButton", "props": { "y": 293, "var": "_btnNext", "stateNum": 2, "skin": "poker/poker_next_btn.png", "centerX": 0.5 } }, { "type": "BaseButton", "props": { "y": 293, "var": "_btnScore", "stateNum": 2, "skin": "poker/poker_score_btn.png", "centerX": 0 } }] };
            return GuanPaiGameEndUI;
        }(View));
        guanpai.GuanPaiGameEndUI = GuanPaiGameEndUI;
    })(guanpai = ui.guanpai || (ui.guanpai = {}));
})(ui || (ui = {}));
(function (ui) {
    var guanpai;
    (function (guanpai) {
        var GuanPaiGameEndInfoRendererUI = /** @class */ (function (_super) {
            __extends(GuanPaiGameEndInfoRendererUI, _super);
            function GuanPaiGameEndInfoRendererUI() {
                return _super.call(this) || this;
            }
            GuanPaiGameEndInfoRendererUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.guanpai.GuanPaiGameEndInfoRendererUI.uiView);
            };
            GuanPaiGameEndInfoRendererUI.uiView = { "type": "View", "props": { "width": 537, "height": 54 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 33, "skin": "poker/poker_gameend.png", "centerY": 0, "centerX": 0 } }, { "type": "Image", "props": { "x": 445, "var": "_imgBomb", "skin": "poker/poker_boom.png", "centerY": 0 } }, { "type": "Image", "props": { "y": 0, "x": 0, "var": "_imgGrab", "skin": "guanpai/guanpai_img_19.png" } }, { "type": "Image", "props": { "y": 0, "x": 21, "var": "_imgQuan", "skin": "guanpai/guanpai_img_20.png" } }, { "type": "Image", "props": { "y": 0, "x": 21, "var": "_imgPo", "skin": "guanpai/guanpai_img_22.png" } }, { "type": "Label", "props": { "x": 262, "var": "_labLeftCount", "text": "10", "fontSize": 20, "color": "#ffe00d", "centerY": 0 } }, { "type": "Label", "props": { "x": 106, "var": "_labNickname", "text": "玩家名六个字", "fontSize": 20, "color": "#ffe00d", "centerY": 0 } }, { "type": "Label", "props": { "x": 493, "var": "_labBomb", "text": "*1", "fontSize": 20, "color": "#ffe00d", "centerY": 0 } }, { "type": "Label", "props": { "var": "_labScore", "text": "+100", "right": 100, "fontSize": 20, "font": "font_num_14", "color": "#ffe00d", "centerY": 0 } }] };
            return GuanPaiGameEndInfoRendererUI;
        }(View));
        guanpai.GuanPaiGameEndInfoRendererUI = GuanPaiGameEndInfoRendererUI;
    })(guanpai = ui.guanpai || (ui.guanpai = {}));
})(ui || (ui = {}));
(function (ui) {
    var guanpai;
    (function (guanpai) {
        var GuanPaiPlayerViewUI = /** @class */ (function (_super) {
            __extends(GuanPaiPlayerViewUI, _super);
            function GuanPaiPlayerViewUI() {
                return _super.call(this) || this;
            }
            GuanPaiPlayerViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.guanpai.GuanPaiPlayerViewUI.uiView);
            };
            GuanPaiPlayerViewUI.uiView = { "type": "View", "props": { "width": 100, "height": 161 }, "child": [{ "type": "BaseButton", "props": { "y": 24, "x": 14, "var": "_btnSit", "stateNum": 2, "skin": "table/table_btn_sit.png" } }, { "type": "Image", "props": { "y": 24, "x": 14, "var": "_imgEmpty", "skin": "table/table_seat_empty.png" } }, { "type": "Box", "props": { "y": 20, "x": 10, "var": "_box" }, "child": [{ "type": "Image", "props": { "y": -9, "x": -11, "skin": "tongyong/head_bg.png" } }, { "type": "Image", "props": { "y": 117, "x": -20, "skin": "tongyong/img_jifendi.png" } }, { "type": "Image", "props": { "y": 7, "x": 4, "var": "_imgDisconnect", "skin": "table/table_offline.png" } }, { "type": "Image", "props": { "y": 7, "x": 4, "visible": false, "var": "_imgLeave", "skin": "table/robot_ing.png" } }, { "type": "Label", "props": { "y": 120, "x": 18, "width": 86, "var": "_labScore", "text": "label", "height": 22, "fontSize": 25, "font": "Microsoft YaHei", "color": "#f7eac8", "bold": true, "align": "center" } }, { "type": "Label", "props": { "y": 94, "x": -1, "width": 86, "var": "_labName", "text": "label", "height": 20, "fontSize": 20, "font": "Microsoft YaHei", "color": "#bfc7c7", "bold": false, "align": "center" } }, { "type": "Image", "props": { "y": -16, "x": 60, "var": "_imgMaster", "skin": "guanpai/guanpai_img_12.png" } }, { "type": "Image", "props": { "y": 37, "x": 99, "var": "_imgReady", "skin": "table/table_ready.png" } }, { "type": "Box", "props": { "x": 97, "var": "_boxCard", "bottom": 4 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_imgCard", "skin": "poker/poker_card.png" } }, { "type": "Label", "props": { "var": "_labCard", "text": "16", "fontSize": 24, "color": "#ffffff", "centerY": 2, "centerX": 1.34765625 } }] }, { "type": "Animation", "props": { "y": 29, "x": 96, "var": "_imgWarn", "source": "res/guanpai/alarm.ani" }, "compId": 23 }, { "type": "Box", "props": { "y": -67, "x": -11, "var": "_boxMultiple" }, "child": [{ "type": "Image", "props": { "skin": "poker/poker_beishu.png" } }, { "type": "Label", "props": { "y": 9, "x": 52, "var": "_labMultiple", "text": "×2", "height": 26, "fontSize": 26, "color": "#ffff14", "align": "left" } }] }, { "type": "Image", "props": { "y": 32, "x": 143, "var": "_imgNotGrab", "skin": "guanpai/guanpai_img_3.png" } }, { "type": "Image", "props": { "y": 32, "x": -134, "var": "_imgPass", "skin": "guanpai/guanpai_img_2.png" } }] }], "animations": [{ "nodes": [{ "target": 23, "keyframes": { "var": [{ "value": "_imgWarn", "tweenMethod": "linearNone", "tween": false, "target": 23, "key": "var", "index": 0 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return GuanPaiPlayerViewUI;
        }(View));
        guanpai.GuanPaiPlayerViewUI = GuanPaiPlayerViewUI;
    })(guanpai = ui.guanpai || (ui.guanpai = {}));
})(ui || (ui = {}));
(function (ui) {
    var guanpai;
    (function (guanpai) {
        var GuanPaiPokerCountUI = /** @class */ (function (_super) {
            __extends(GuanPaiPokerCountUI, _super);
            function GuanPaiPokerCountUI() {
                return _super.call(this) || this;
            }
            GuanPaiPokerCountUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.guanpai.GuanPaiPokerCountUI.uiView);
            };
            GuanPaiPokerCountUI.uiView = { "type": "View", "props": { "width": 38, "height": 48 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "guanpai/guanpai_img_15.png" } }, { "type": "Label", "props": { "var": "_labCount", "text": "16", "fontSize": 24, "color": "#ffffff", "centerY": 0, "centerX": 1 } }] };
            return GuanPaiPokerCountUI;
        }(View));
        guanpai.GuanPaiPokerCountUI = GuanPaiPokerCountUI;
    })(guanpai = ui.guanpai || (ui.guanpai = {}));
})(ui || (ui = {}));
(function (ui) {
    var match;
    (function (match) {
        var MatchOverUI = /** @class */ (function (_super) {
            __extends(MatchOverUI, _super);
            function MatchOverUI() {
                return _super.call(this) || this;
            }
            MatchOverUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.match.MatchOverUI.uiView);
            };
            MatchOverUI.uiView = { "type": "View", "props": { "width": 69, "height": 118 }, "child": [{ "type": "Image", "props": { "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "alpha": 0.7 } }, { "type": "Box", "props": { "width": 620, "var": "_box", "height": 560, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Sprite", "props": { "y": 0, "x": 0, "width": 620, "var": "_content", "height": 560 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 620, "skin": "tongyong/tongyong_tishikuang_1.png", "sizeGrid": "100,31,20,24", "height": 480 }, "child": [{ "type": "Image", "props": { "y": 54, "x": 13, "width": 592, "skin": "res/match/share_bg.jpg", "height": 161 } }, { "type": "Image", "props": { "y": 71, "visible": false, "var": "_tab", "skin": "match/paiming.png", "centerX": 0 } }, { "type": "Image", "props": { "y": 9, "skin": "match/match_over.png", "centerX": 0 } }, { "type": "Box", "props": { "y": 217, "x": 23, "width": 572, "var": "_rank", "height": 237 }, "child": [{ "type": "List", "props": { "y": 41, "x": 5, "width": 564, "var": "_rankList", "vScrollBarSkin": "tongyong/tongyong_marquee.png", "spaceY": 5, "repeatX": 1, "height": 200 } }, { "type": "Label", "props": { "y": 0, "x": 50, "text": "名次", "fontSize": 24, "color": "#9b5036" } }, { "type": "Label", "props": { "y": 0, "x": 260, "var": "_labelName", "text": "昵称", "fontSize": 24, "color": "#9b5036" } }, { "type": "Label", "props": { "y": 0, "x": 480, "visible": true, "var": "_labelReward", "text": "奖励", "fontSize": 24, "color": "#9b5036" } }, { "type": "Image", "props": { "y": 35, "x": 0, "skin": "tongyong/tongyong_line.png" } }] }, { "type": "Image", "props": { "y": 52, "visible": false, "var": "_rankSmall", "skin": "match/over_1.png", "centerX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 37, "x": 60, "skin": "match/di.png" } }, { "type": "Image", "props": { "y": 37, "x": 190, "skin": "match/ming.png" } }, { "type": "Image", "props": { "y": 115, "x": 63, "skin": "matchSign/ani/tips.png" } }, { "type": "Label", "props": { "y": 40, "x": 120, "width": 66, "var": "_rank2", "text": "7", "height": 32, "font": "font_num_16", "align": "center" } }] }, { "type": "Image", "props": { "y": 60, "visible": false, "var": "_ranklBig", "skin": "match/over_2.png", "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 52, "x": 55, "skin": "match/di.png" } }, { "type": "Image", "props": { "y": 52, "x": 175, "skin": "match/ming.png" } }, { "type": "Label", "props": { "y": 50, "x": 124, "var": "_rank1", "text": "9", "font": "font_num_16" } }, { "type": "Box", "props": { "var": "_showReward" }, "child": [{ "type": "Image", "props": { "y": 126, "x": 48, "skin": "match/reward.png" } }, { "type": "Label", "props": { "y": 128, "x": 172, "var": "_reward", "text": "30", "fontSize": 24, "color": "#fff448" } }, { "type": "Image", "props": { "y": 132, "x": 212, "var": "_diamond", "skin": "tongyong/tongyong_diamond.png" } }] }] }, { "type": "Label", "props": { "y": 65, "x": 23, "var": "_title", "text": "label", "fontSize": 20, "color": "#ffebb6" } }, { "type": "Label", "props": { "y": 68, "x": 453, "var": "_time", "text": "2018-02-02 12:11", "fontSize": 18, "color": "#f9f8f6" } }, { "type": "Box", "props": { "y": 141, "x": 453, "var": "_avatar" } }] }] }, { "type": "BaseButton", "props": { "y": -36, "x": 559, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "label": "" } }, { "type": "BaseButton", "props": { "y": 484, "x": 92, "var": "_btnConfirm", "stateNum": 1, "skin": "tongyong/btn_confirm.png", "label": "", "centerX": -120 } }, { "type": "BaseButton", "props": { "y": 484, "x": 338, "var": "_btnShare", "stateNum": 1, "skin": "tongyong/btn_share.png", "label": "", "centerX": 126 } }, { "type": "BaseButton", "props": { "y": 484, "x": 328, "visible": false, "var": "_share2", "stateNum": 1, "skin": "tongyong/tongyong_share_2.png", "label": "" } }, { "type": "BaseButton", "props": { "y": 484, "x": 65, "visible": false, "var": "_share1", "stateNum": 1, "skin": "tongyong/tongyong_share_1.png", "label": "" } }, { "type": "BaseButton", "props": { "y": -14, "x": -113, "visible": false, "var": "_back", "stateNum": 2, "skin": "tongyong/btn_back.png", "label": "" } }] }] };
            return MatchOverUI;
        }(View));
        match.MatchOverUI = MatchOverUI;
    })(match = ui.match || (ui.match = {}));
})(ui || (ui = {}));
(function (ui) {
    var match;
    (function (match) {
        var MatchOverRenderUI = /** @class */ (function (_super) {
            __extends(MatchOverRenderUI, _super);
            function MatchOverRenderUI() {
                return _super.call(this) || this;
            }
            MatchOverRenderUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.match.MatchOverRenderUI.uiView);
            };
            MatchOverRenderUI.uiView = { "type": "View", "props": { "width": 564, "height": 47 }, "child": [{ "type": "Label", "props": { "x": 50, "width": 42, "var": "_rank", "text": "label", "fontSize": 20, "color": "#9b5036", "centerY": 0, "align": "center" } }, { "type": "Label", "props": { "x": 225, "width": 112, "var": "_name", "text": "label", "height": 20, "fontSize": 20, "color": "#9b5036", "centerY": 0.5, "align": "center" } }, { "type": "Image", "props": { "y": 0, "x": 55, "var": "_img", "skin": "match/rank_1.png" } }, { "type": "Label", "props": { "x": 408, "width": 83, "var": "_reward", "text": "label", "fontSize": 20, "color": "#9b5036", "centerY": 0.5, "align": "right" } }, { "type": "Image", "props": { "x": 495, "var": "_diamond", "skin": "tongyong/tongyong_diamond.png", "centerY": 0.5 } }] };
            return MatchOverRenderUI;
        }(View));
        match.MatchOverRenderUI = MatchOverRenderUI;
    })(match = ui.match || (ui.match = {}));
})(ui || (ui = {}));
(function (ui) {
    var match;
    (function (match) {
        var MatchRankRenderUI = /** @class */ (function (_super) {
            __extends(MatchRankRenderUI, _super);
            function MatchRankRenderUI() {
                return _super.call(this) || this;
            }
            MatchRankRenderUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.match.MatchRankRenderUI.uiView);
            };
            MatchRankRenderUI.uiView = { "type": "View", "props": { "width": 564, "height": 47 }, "child": [{ "type": "Label", "props": { "x": 50, "width": 42, "var": "_rank", "text": "label", "fontSize": 20, "color": "#9b5036", "centerY": 0, "align": "center" } }, { "type": "Label", "props": { "x": 175, "width": 112, "var": "_name", "text": "label", "height": 20, "fontSize": 20, "color": "#9b5036", "centerY": 0, "align": "center" } }, { "type": "Label", "props": { "x": 448, "var": "_score", "text": "label", "fontSize": 20, "color": "#9b5036", "centerY": 0 } }, { "type": "Image", "props": { "y": 0, "x": 55, "var": "_img", "skin": "match/rank_1.png" } }] };
            return MatchRankRenderUI;
        }(View));
        match.MatchRankRenderUI = MatchRankRenderUI;
    })(match = ui.match || (ui.match = {}));
})(ui || (ui = {}));
(function (ui) {
    var match;
    (function (match) {
        var MatchRankShareUI = /** @class */ (function (_super) {
            __extends(MatchRankShareUI, _super);
            function MatchRankShareUI() {
                return _super.call(this) || this;
            }
            MatchRankShareUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.match.MatchRankShareUI.uiView);
            };
            MatchRankShareUI.uiView = { "type": "View", "props": { "width": 600, "height": 400 }, "child": [{ "type": "Image", "props": { "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "alpha": 0.7 } }, { "type": "Box", "props": { "width": 739, "var": "_box", "height": 552, "centerY": 0, "centerX": 0 }, "child": [{ "type": "BaseButton", "props": { "y": 429, "x": 423, "var": "_share2", "stateNum": 1, "skin": "tongyong/tongyong_share_2.png", "label": "" } }, { "type": "BaseButton", "props": { "y": 430, "x": 8, "var": "_share1", "stateNum": 1, "skin": "tongyong/tongyong_share_1.png", "label": "" } }, { "type": "BaseButton", "props": { "y": -40, "x": -120, "var": "_back", "stateNum": 2, "skin": "tongyong/btn_back.png", "label": "" } }, { "type": "Sprite", "props": { "y": 0, "x": 0, "width": 739, "var": "_content", "height": 552 }, "child": [{ "type": "Box", "props": { "width": 739, "var": "_avatar", "height": 552 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 739, "skin": "res/match/share_bg.jpg", "height": 421 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 739, "skin": "match/avatar.png", "sizeGrid": "18,21,17,27", "height": 421 } }, { "type": "Label", "props": { "y": 25, "x": 220, "width": 300, "var": "_title", "text": "比赛", "fontSize": 24, "color": "#fff8a9", "centerX": 0.5, "align": "center" } }, { "type": "Box", "props": { "width": 640, "var": "_lose", "scaleY": 0.8, "scaleX": 0.8, "height": 640, "centerY": -50, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 248, "skin": "matchSign/ani/lose_bg_1.png", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 244, "skin": "matchSign/ani/lose_bg_6.png", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "skin": "matchSign/ani/lose_bg_2.png", "centerY": -78.5, "centerX": 0, "anchorY": 1, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 302, "skin": "matchSign/ani/lose_bg_5.png", "centerX": -110, "anchorY": 1, "anchorX": 1 } }, { "type": "Image", "props": { "y": 302, "skin": "matchSign/ani/lose_bg_5.png", "skewY": 180, "centerX": 12, "anchorY": 1, "anchorX": 1 } }, { "type": "Image", "props": { "skin": "matchSign/ani/lose_bg_3.png", "centerY": -17, "centerX": 0, "anchorY": 0, "anchorX": 0.5 } }, { "type": "Image", "props": { "skin": "matchSign/ani/lose_bg_4.png", "centerY": -5, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 382, "width": 382, "var": "_text", "text": "请在比赛结束后查看您的排名", "fontSize": 24, "color": "#fcecd3", "centerX": 0, "align": "center" } }] }, { "type": "Box", "props": { "y": -106, "x": 45, "width": 640, "var": "_win", "scaleY": 0.8, "scaleX": 0.8, "height": 640, "centerY": -50, "centerX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 297, "x": 320, "skin": "poker/light_quan.png", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 307, "x": 320, "skin": "poker/light_quan.png", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "skin": "matchSign/ani/win_bg_1.png", "scaleY": 1, "scaleX": 1, "rotation": 0, "centerY": -39, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5, "alpha": 1 } }, { "type": "Image", "props": { "y": 346, "skin": "matchSign/ani/win_bg_2.png", "centerY": -69, "centerX": 0, "anchorY": 1, "anchorX": 0.5, "alpha": 1 } }, { "type": "Image", "props": { "y": 308, "x": 259, "skin": "matchSign/ani/win_bg_6.png", "centerX": -110, "anchorY": 1, "anchorX": 1 } }, { "type": "Image", "props": { "y": 312, "x": 381, "skin": "matchSign/ani/win_bg_6.png", "skewY": 180, "centerX": 12, "anchorY": 1, "anchorX": 1 } }, { "type": "Image", "props": { "y": 314, "skin": "matchSign/ani/win_bg_5.png", "scaleX": 1, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5, "alpha": 1 } }, { "type": "Image", "props": { "y": 208, "skin": "matchSign/ani/win_bg_3.png", "scaleY": 1, "scaleX": 1, "centerX": -98.5, "anchorY": -1, "anchorX": 2, "alpha": 1 } }, { "type": "Image", "props": { "y": 208, "skin": "matchSign/ani/win_bg_4.png", "scaleY": 1, "scaleX": 1, "centerX": 101.5, "anchorY": -1, "anchorX": -1, "alpha": 1 } }, { "type": "Image", "props": { "y": 334, "visible": false, "skin": "matchSign/ani/win_1.png", "scaleY": 1, "scaleX": 1, "centerX": -1, "anchorY": 0.5, "anchorX": 0.5, "alpha": 1 } }, { "type": "Image", "props": { "y": 401, "var": "_winText", "skin": "matchSign/ani/win_tips_1.png", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Label", "props": { "y": 296, "x": 258, "width": 127, "var": "_winNum", "text": "1", "font": "font_num_20", "align": "center" } }, { "type": "Box", "props": { "y": 420, "x": 221, "var": "_showReward" }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "match/reward.png" } }, { "type": "Label", "props": { "y": 0, "x": 138, "var": "_reward", "text": "label", "fontSize": 24, "color": "#fff448" } }, { "type": "Image", "props": { "y": 6, "x": 199, "var": "_diamond", "skin": "tongyong/tongyong_diamond.png" } }] }] }] }] }] }] };
            return MatchRankShareUI;
        }(View));
        match.MatchRankShareUI = MatchRankShareUI;
    })(match = ui.match || (ui.match = {}));
})(ui || (ui = {}));
(function (ui) {
    var match;
    (function (match) {
        var MatchRecordUI = /** @class */ (function (_super) {
            __extends(MatchRecordUI, _super);
            function MatchRecordUI() {
                return _super.call(this) || this;
            }
            MatchRecordUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.match.MatchRecordUI.uiView);
            };
            MatchRecordUI.uiView = { "type": "View", "props": { "width": 69, "height": 118 }, "child": [{ "type": "Image", "props": { "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "alpha": 0.7 } }, { "type": "Box", "props": { "width": 620, "var": "_box", "height": 520, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 620, "skin": "common/bg_common_di.png", "sizeGrid": "100,31,20,24", "height": 520 }, "child": [{ "type": "Image", "props": { "y": 104, "var": "_tab", "skin": "match/paiming.png", "centerX": 0 } }, { "type": "Image", "props": { "y": 28, "skin": "match/title.png", "centerX": 0 } }, { "type": "BaseButton", "props": { "y": -5, "x": 574, "var": "_close", "stateNum": 1, "skin": "common/sBtn_close2.png", "label": "" } }, { "type": "Box", "props": { "y": 180, "x": 23, "width": 572, "var": "_rank", "height": 320 }, "child": [{ "type": "List", "props": { "y": 41, "x": 5, "width": 564, "var": "_rankList", "vScrollBarSkin": "tongyong/tongyong_marquee.png", "spaceY": 5, "repeatX": 1, "height": 220 } }, { "type": "Label", "props": { "y": 0, "x": 50, "text": "名次", "fontSize": 24, "color": "#9b5036" } }, { "type": "Label", "props": { "y": 0, "x": 213, "text": "昵称", "fontSize": 24, "color": "#9b5036" } }, { "type": "Label", "props": { "y": 0, "x": 450, "text": "分数", "fontSize": 24, "color": "#9b5036" } }, { "type": "Image", "props": { "y": 35, "x": 0, "skin": "tongyong/tongyong_line.png" } }] }, { "type": "Image", "props": { "x": 44, "width": 529, "skin": "table/border.png", "sizeGrid": "14,15,12,13", "height": 52, "bottom": 19 }, "child": [{ "type": "Label", "props": { "x": 32, "var": "_selfRank", "text": "我的排名", "fontSize": 24, "color": "#9b5036", "centerY": 0 } }, { "type": "Label", "props": { "x": 388, "var": "_score", "text": "分数", "fontSize": 24, "color": "#9b5036", "centerY": 0 } }, { "type": "Label", "props": { "x": 216, "var": "_round", "text": "局数", "fontSize": 24, "color": "#9b5036", "centerY": 0 } }, { "type": "Box", "props": { "y": -268, "x": -21, "width": 572, "var": "_reward", "height": 320 }, "child": [{ "type": "List", "props": { "y": 41, "x": 5, "width": 564, "var": "_rewardList", "vScrollBarSkin": "tongyong/tongyong_marquee.png", "spaceY": 5, "repeatX": 1, "height": 220 } }, { "type": "Label", "props": { "y": 0, "x": 50, "text": "名次", "fontSize": 24, "color": "#9b5036" } }, { "type": "Label", "props": { "y": 0, "x": 450, "text": "奖励", "fontSize": 24, "color": "#9b5036" } }, { "type": "Image", "props": { "y": 268, "x": 21, "width": 529, "visible": false, "skin": "table/border.png", "sizeGrid": "14,15,12,13", "height": 52 }, "child": [{ "type": "Label", "props": { "x": 32, "var": "_totalReward", "text": "总奖池", "fontSize": 24, "color": "#9b5036", "centerY": 0 } }, { "type": "Label", "props": { "x": 358, "width": 155, "var": "_player", "text": "参赛人数", "height": 24, "fontSize": 24, "color": "#9b5036", "centerY": 0, "align": "right" } }, { "type": "Image", "props": { "x": 176, "var": "_diamond", "skin": "createTable/diamond.png", "centerY": 0 } }] }, { "type": "Image", "props": { "y": 35, "x": 0, "skin": "tongyong/tongyong_line.png" } }] }] }] }] }] };
            return MatchRecordUI;
        }(View));
        match.MatchRecordUI = MatchRecordUI;
    })(match = ui.match || (ui.match = {}));
})(ui || (ui = {}));
(function (ui) {
    var match;
    (function (match) {
        var MatchRewardRenderUI = /** @class */ (function (_super) {
            __extends(MatchRewardRenderUI, _super);
            function MatchRewardRenderUI() {
                return _super.call(this) || this;
            }
            MatchRewardRenderUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.match.MatchRewardRenderUI.uiView);
            };
            MatchRewardRenderUI.uiView = { "type": "View", "props": { "width": 564, "height": 47 }, "child": [{ "type": "Label", "props": { "x": 46, "width": 48, "var": "_rank", "text": "1", "fontSize": 20, "color": "#9b5036", "centerY": 0.5, "align": "center" } }, { "type": "Label", "props": { "x": 418, "width": 57, "var": "_score", "text": "label", "height": 20, "fontSize": 20, "color": "#9b5036", "centerY": 0.5, "align": "right" } }, { "type": "Image", "props": { "y": 0, "x": 55, "var": "_img", "skin": "match/rank_1.png" } }, { "type": "Image", "props": { "x": 483, "var": "_diamond", "skin": "createTable/diamond.png", "centerY": 0.5 } }] };
            return MatchRewardRenderUI;
        }(View));
        match.MatchRewardRenderUI = MatchRewardRenderUI;
    })(match = ui.match || (ui.match = {}));
})(ui || (ui = {}));
(function (ui) {
    var match;
    (function (match) {
        var MatchStage1UI = /** @class */ (function (_super) {
            __extends(MatchStage1UI, _super);
            function MatchStage1UI() {
                return _super.call(this) || this;
            }
            MatchStage1UI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.match.MatchStage1UI.uiView);
            };
            MatchStage1UI.uiView = { "type": "View", "props": { "width": 69, "height": 118 }, "child": [{ "type": "Image", "props": { "y": 91, "x": 123, "width": 246, "skin": "match/stage_1.png", "height": 183, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 17 }, { "type": "Image", "props": { "y": 91, "x": 123, "width": 246, "skin": "match/stage_1.png", "height": 183, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 10 }, { "type": "Image", "props": { "width": 246, "var": "_bg", "skin": "match/stage_1.png", "height": 183 }, "child": [{ "type": "Image", "props": { "var": "_stage", "skin": "match/stage_1_1.png", "centerX": 0, "bottom": 15 } }, { "type": "Label", "props": { "y": 55, "width": 82, "visible": false, "var": "_jinjiEnd", "text": "23", "fontSize": 24, "font": "font_num_17", "color": "#874322", "centerX": 64, "align": "center" } }, { "type": "Label", "props": { "y": 94, "var": "_jinji", "text": "等待晋级", "fontSize": 18, "color": "#a1532d", "centerX": 0 } }, { "type": "Label", "props": { "y": 140, "var": "_round", "text": "第3轮", "strokeColor": "#b5450b", "stroke": 2, "fontSize": 18, "color": "#fff4d9", "centerX": 60.00537109375 } }, { "type": "Image", "props": { "y": 54, "var": "_ing", "skin": "match/jin_1.png", "centerX": 0 } }, { "type": "Label", "props": { "y": 55, "width": 82, "visible": false, "var": "_jinjiBegin", "text": "23", "fontSize": 24, "font": "font_num_17", "color": "#874322", "centerX": -65, "align": "center" } }] }], "animations": [{ "nodes": [{ "target": 10, "keyframes": { "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleY", "index": 0 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleY", "index": 24 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleX", "index": 0 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleX", "index": 24 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "alpha", "index": 0 }, { "value": 0.6, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "alpha", "index": 12 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "alpha", "index": 24 }] } }, { "target": 17, "keyframes": { "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleY", "index": 21 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleY", "index": 45 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleX", "index": 21 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleX", "index": 45 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "alpha", "index": 21 }, { "value": 0.6, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "alpha", "index": 34 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "alpha", "index": 45 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return MatchStage1UI;
        }(View));
        match.MatchStage1UI = MatchStage1UI;
    })(match = ui.match || (ui.match = {}));
})(ui || (ui = {}));
(function (ui) {
    var match;
    (function (match) {
        var MatchStage3UI = /** @class */ (function (_super) {
            __extends(MatchStage3UI, _super);
            function MatchStage3UI() {
                return _super.call(this) || this;
            }
            MatchStage3UI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.match.MatchStage3UI.uiView);
            };
            MatchStage3UI.uiView = { "type": "View", "props": { "y": 0, "width": 69, "height": 118 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 246, "skin": "match/stage_1.png", "height": 183 }, "compId": 11 }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 246, "skin": "match/stage_1.png", "height": 183 }, "compId": 19 }, { "type": "Image", "props": { "width": 246, "var": "_bg", "skin": "match/stage_1.png", "height": 183 }, "child": [{ "type": "Image", "props": { "var": "_stage", "skin": "match/stage_3_1.png", "centerX": 0.5, "bottom": 14 } }, { "type": "Label", "props": { "y": 54, "width": 100, "visible": false, "var": "_jinjiEnd", "text": "23人晋级", "fontSize": 24, "font": "font_num_17", "color": "#874322", "centerX": 71, "align": "center" } }, { "type": "Label", "props": { "y": 95, "var": "_jinji", "text": "等待晋级", "fontSize": 18, "color": "#a1532d", "centerX": 0 } }, { "type": "Label", "props": { "y": 140, "var": "_round", "text": "第3轮", "strokeColor": "#b5450b", "stroke": 2, "fontSize": 18, "color": "#fff4d9", "centerX": 60.00537109375 } }, { "type": "Image", "props": { "y": 66, "visible": false, "var": "_begin", "skin": "match/begin.png", "centerX": 0 } }, { "type": "Label", "props": { "y": 55, "width": 82, "visible": false, "var": "_jinjiBegin", "text": "23", "fontSize": 24, "font": "font_num_17", "color": "#874322", "centerX": -65, "align": "center" } }, { "type": "Image", "props": { "y": 54, "var": "_jin", "skin": "match/jin_1.png", "centerX": 0.5 } }] }], "animations": [{ "nodes": [{ "target": 19, "keyframes": { "y": [{ "value": 91, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "y", "index": 0 }], "x": [{ "value": 123, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "x", "index": 0 }], "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "scaleY", "index": 0 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "scaleY", "index": 24 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "scaleX", "index": 0 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "scaleX", "index": 24 }], "anchorY": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "anchorY", "index": 0 }], "anchorX": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "anchorX", "index": 0 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "alpha", "index": 0 }, { "value": 0.6, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "alpha", "index": 12 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "alpha", "index": 24 }] } }, { "target": 11, "keyframes": { "y": [{ "value": 91, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "y", "index": 0 }], "x": [{ "value": 123, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "x", "index": 0 }], "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "scaleY", "index": 21 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "scaleY", "index": 45 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "scaleX", "index": 21 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "scaleX", "index": 45 }], "anchorY": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "anchorY", "index": 0 }], "anchorX": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "anchorX", "index": 0 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "alpha", "index": 21 }, { "value": 0.6, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "alpha", "index": 34 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "alpha", "index": 45 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return MatchStage3UI;
        }(View));
        match.MatchStage3UI = MatchStage3UI;
    })(match = ui.match || (ui.match = {}));
})(ui || (ui = {}));
(function (ui) {
    var match;
    (function (match) {
        var MatchStage4UI = /** @class */ (function (_super) {
            __extends(MatchStage4UI, _super);
            function MatchStage4UI() {
                return _super.call(this) || this;
            }
            MatchStage4UI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.match.MatchStage4UI.uiView);
            };
            MatchStage4UI.uiView = { "type": "View", "props": { "y": 0, "width": 69, "height": 118 }, "child": [{ "type": "Image", "props": { "y": 92, "x": 123, "width": 246, "skin": "match/stage_1.png", "height": 185, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 10 }, { "type": "Image", "props": { "y": 92, "x": 123, "width": 246, "skin": "match/stage_1.png", "height": 185, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 14 }, { "type": "Image", "props": { "width": 246, "var": "_bg", "skin": "match/stage_1.png", "height": 185 }, "child": [{ "type": "Image", "props": { "var": "_stage", "skin": "match/stage_4_1.png", "centerX": 0, "bottom": 15 } }, { "type": "Image", "props": { "y": 60, "var": "_begin", "skin": "match/begin.png", "centerX": 0 } }, { "type": "Image", "props": { "y": 59, "var": "_ing", "skin": "match/ing.png", "centerX": 0.5 } }] }], "animations": [{ "nodes": [{ "target": 10, "keyframes": { "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleY", "index": 0 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleY", "index": 24 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleX", "index": 0 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleX", "index": 24 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "alpha", "index": 0 }, { "value": 0.6, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "alpha", "index": 12 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "alpha", "index": 24 }] } }, { "target": 14, "keyframes": { "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleY", "index": 21 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleY", "index": 45 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleX", "index": 21 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleX", "index": 45 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "alpha", "index": 21 }, { "value": 0.6, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "alpha", "index": 34 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "alpha", "index": 45 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return MatchStage4UI;
        }(View));
        match.MatchStage4UI = MatchStage4UI;
    })(match = ui.match || (ui.match = {}));
})(ui || (ui = {}));
(function (ui) {
    var match;
    (function (match) {
        var MatchTopUI = /** @class */ (function (_super) {
            __extends(MatchTopUI, _super);
            function MatchTopUI() {
                return _super.call(this) || this;
            }
            MatchTopUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.match.MatchTopUI.uiView);
            };
            MatchTopUI.uiView = { "type": "View", "props": { "width": 561, "height": 37 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 564, "skin": "table/ruler_bg_1.png", "sizeGrid": "12,100,19,100", "height": 39 }, "child": [{ "type": "Label", "props": { "y": 7, "x": 30, "var": "_score", "text": "当前底分", "fontSize": 20, "color": "#fdf8f8" } }, { "type": "Label", "props": { "y": 7, "x": 197, "var": "_rank", "text": "排名25/100", "fontSize": 20, "color": "#fdf8f8" } }, { "type": "Label", "props": { "y": 7, "x": 355, "width": 184, "var": "_taotai", "text": "低于2550分将被淘汰", "fontSize": 20, "color": "#fdf8f8", "align": "right" } }] }] };
            return MatchTopUI;
        }(View));
        match.MatchTopUI = MatchTopUI;
    })(match = ui.match || (ui.match = {}));
})(ui || (ui = {}));
(function (ui) {
    var match;
    (function (match) {
        var MatchWaitUI = /** @class */ (function (_super) {
            __extends(MatchWaitUI, _super);
            function MatchWaitUI() {
                return _super.call(this) || this;
            }
            MatchWaitUI.prototype.createChildren = function () {
                View.regComponent("ui.match.MatchStage1UI", ui.match.MatchStage1UI);
                View.regComponent("ui.match.MatchStage4UI", ui.match.MatchStage4UI);
                View.regComponent("ui.match.MatchStage3UI", ui.match.MatchStage3UI);
                _super.prototype.createChildren.call(this);
                this.createView(ui.match.MatchWaitUI.uiView);
            };
            MatchWaitUI.uiView = { "type": "View", "props": { "width": 69, "height": 118 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "alpha": 0.5 } }, { "type": "Box", "props": { "width": 960, "var": "_box", "height": 640, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "width": 900, "skin": "match/border.png", "sizeGrid": "26,0,43,0", "height": 600, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Box", "props": { "y": 269, "width": 900, "var": "_view1", "height": 304, "centerX": 0 }, "child": [{ "type": "MatchStage1", "props": { "y": 70, "x": 20, "var": "_stage_1_3", "runtime": "ui.match.MatchStage1UI" } }, { "type": "MatchStage4", "props": { "y": 70, "x": 626, "var": "_stage_4_3", "runtime": "ui.match.MatchStage4UI" } }, { "type": "MatchStage3", "props": { "y": 72, "x": 323, "var": "_stage_3_3", "runtime": "ui.match.MatchStage3UI" } }, { "type": "Image", "props": { "y": 121, "x": 259, "skin": "match/jiantou.png" } }, { "type": "Image", "props": { "y": 121, "x": 563, "skin": "match/jiantou.png" } }] }, { "type": "Box", "props": { "y": 328, "width": 600, "var": "_view2", "height": 170, "centerX": 0 }, "child": [{ "type": "MatchStage1", "props": { "y": 12, "x": -20, "var": "_stage_3_2", "runtime": "ui.match.MatchStage1UI" } }, { "type": "MatchStage4", "props": { "y": 10, "x": 376, "var": "_stage_4_2", "runtime": "ui.match.MatchStage4UI" } }, { "type": "Image", "props": { "y": 71, "x": 273, "skin": "match/jiantou.png" } }] }, { "type": "Label", "props": { "var": "_waittext", "text": "等待其他桌结束", "fontSize": 34, "color": "#ffecb8", "centerX": -1, "bottom": 354 } }, { "type": "Image", "props": { "y": 54, "var": "_rank", "skin": "match/rank_bg.png", "centerX": -80 } }, { "type": "Image", "props": { "y": 140, "x": 198, "visible": false, "var": "_wait", "skin": "match/wait_text_1.png" } }, { "type": "Label", "props": { "y": 282, "var": "_left", "text": "当前还有5桌", "fontSize": 24, "color": "#8a694f", "centerX": 0 } }, { "type": "Label", "props": { "y": 90, "x": 234, "width": 155, "visible": false, "var": "_jinji", "text": "前54名紧急", "fontSize": 24, "color": "#ffe116", "centerX": 0, "align": "center" } }, { "type": "Image", "props": { "y": 54, "var": "_ming", "skin": "match/wait_ming.png", "centerX": 222 } }, { "type": "Label", "props": { "y": 53, "x": 546, "width": 97, "var": "_rankNum", "text": "100", "font": "font_num_19", "align": "center" } }] }] }] };
            return MatchWaitUI;
        }(View));
        match.MatchWaitUI = MatchWaitUI;
    })(match = ui.match || (ui.match = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var Box1UI = /** @class */ (function (_super) {
            __extends(Box1UI, _super);
            function Box1UI() {
                var _this = _super.call(this) || this;
                _this.createUI(ui.matchSign.Box1UI.uiView);
                return _this;
            }
            Box1UI.prototype.createUI = function (uiData) {
                laya.utils.ClassUtils.createByJson(uiData, this, this);
            };
            Box1UI.uiView = { "type": "Box", "props": { "x": 0, "y": 0, "width": 324, "height": 68 }, "child": [{ "type": "BaseButton", "props": { "y": 0, "stateNum": 1, "skin": "setup/setup_btn_on.png", "x": 121, "var": "_btnCardBigClose" } }, { "type": "BaseButton", "props": { "y": 0, "stateNum": 1, "skin": "setup/setup_btn_off.png", "x": 121, "var": "_btnCardBigOpen" } }, { "type": "Label", "props": { "y": 15, "x": 0, "text": "出牌放大", "fontSize": 30, "color": "#9b5036", "bold": true } }] };
            return Box1UI;
        }(Laya.Box));
        matchSign.Box1UI = Box1UI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchHistoryRendererUI = /** @class */ (function (_super) {
            __extends(MatchHistoryRendererUI, _super);
            function MatchHistoryRendererUI() {
                return _super.call(this) || this;
            }
            MatchHistoryRendererUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchHistoryRendererUI.uiView);
            };
            MatchHistoryRendererUI.uiView = { "type": "View", "props": { "width": 850, "height": 111 }, "child": [{ "type": "Image", "props": { "skin": "menu/time_bg.png", "centerX": 0 }, "child": [{ "type": "Label", "props": { "y": 6, "x": 17, "var": "_time", "text": "label", "fontSize": 20, "color": "#8a695b" } }] }, { "type": "Image", "props": { "y": 50, "x": 0, "width": 695, "skin": "matchSign/his_bg.png", "height": 56 } }, { "type": "Label", "props": { "y": 66, "x": 28, "var": "_labRank", "text": "1", "fontSize": 24, "color": "#b56949", "align": "center" } }, { "type": "BaseButton", "props": { "y": 50, "x": 720, "var": "_award", "stateNum": 1, "skin": "matchSign/award_1.png", "name": "award" } }] };
            return MatchHistoryRendererUI;
        }(View));
        matchSign.MatchHistoryRendererUI = MatchHistoryRendererUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchJinjiUI = /** @class */ (function (_super) {
            __extends(MatchJinjiUI, _super);
            function MatchJinjiUI() {
                return _super.call(this) || this;
            }
            MatchJinjiUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchJinjiUI.uiView);
            };
            MatchJinjiUI.uiView = { "type": "View", "props": { "width": 1280, "height": 720 }, "child": [{ "type": "Image", "props": { "skin": "res/bg/match_bg.png" } }, { "type": "Image", "props": { "skin": "match/jinji.png", "centerY": -81, "centerX": 0 } }, { "type": "FontClip", "props": { "x": 426, "var": "_rank", "value": "122/", "skin": "match/rank2.png", "sheet": "0123456789/", "centerY": 98 } }, { "type": "FontClip", "props": { "x": 671, "var": "_total", "value": "122", "skin": "match/rank1.png", "sheet": "0123456789", "scaleY": 0.7, "scaleX": 0.7, "centerY": 108 } }, { "type": "Box", "props": { "x": 494, "var": "_swiss", "centerY": 186 } }] };
            return MatchJinjiUI;
        }(View));
        matchSign.MatchJinjiUI = MatchJinjiUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchKindUI = /** @class */ (function (_super) {
            __extends(MatchKindUI, _super);
            function MatchKindUI() {
                return _super.call(this) || this;
            }
            MatchKindUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchKindUI.uiView);
            };
            MatchKindUI.uiView = { "type": "View", "props": { "width": 250, "height": 261 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 250, "var": "_bg", "skin": "matchSign/matchSign_img_2.png", "sizeGrid": "20,20,50,20", "height": 168 } }] };
            return MatchKindUI;
        }(View));
        matchSign.MatchKindUI = MatchKindUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchLoseUI = /** @class */ (function (_super) {
            __extends(MatchLoseUI, _super);
            function MatchLoseUI() {
                return _super.call(this) || this;
            }
            MatchLoseUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchLoseUI.uiView);
            };
            MatchLoseUI.uiView = { "type": "View", "props": { "width": 640, "height": 640 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "alpha": 0.7 } }, { "type": "Box", "props": { "y": 0, "x": 0, "width": 640, "var": "_box", "height": 640, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 248, "skin": "matchSign/ani/lose_bg_1.png", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 2 }, { "type": "Image", "props": { "y": 244, "skin": "matchSign/ani/lose_bg_6.png", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 14 }, { "type": "Image", "props": { "skin": "matchSign/ani/lose_bg_2.png", "centerY": -78.5, "centerX": 0, "anchorY": 1, "anchorX": 0.5 }, "compId": 3 }, { "type": "Image", "props": { "y": 302, "skin": "matchSign/ani/lose_bg_5.png", "centerX": -110, "anchorY": 1, "anchorX": 1 }, "compId": 15 }, { "type": "Image", "props": { "y": 302, "skin": "matchSign/ani/lose_bg_5.png", "skewY": 180, "centerX": 12, "anchorY": 1, "anchorX": 1 }, "compId": 16 }, { "type": "Image", "props": { "skin": "matchSign/ani/lose_bg_3.png", "centerY": -17, "centerX": 0, "anchorY": 0, "anchorX": 0.5 }, "compId": 4 }, { "type": "Image", "props": { "skin": "matchSign/ani/lose_bg_4.png", "centerY": -5, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 5 }, { "type": "BaseButton", "props": { "y": 494, "var": "_btnConfirm", "stateNum": 1, "skin": "tongyong/btn_confirm.png", "label": "", "centerX": -124 } }, { "type": "BaseButton", "props": { "y": 494, "var": "_btnShare", "stateNum": 1, "skin": "tongyong/btn_share.png", "label": "", "centerX": 145 } }, { "type": "Label", "props": { "y": 442, "width": 382, "var": "_text", "text": "label", "fontSize": 24, "color": "#f9f3f3", "centerX": 0, "align": "center" } }, { "type": "Label", "props": { "y": 70, "width": 300, "var": "_title", "text": "比赛", "fontSize": 24, "color": "#fff8a9", "centerX": 0, "align": "center" } }, { "type": "Box", "props": { "y": 506, "x": 710, "visible": false, "var": "_download", "centerX": 436.7 }, "child": [{ "type": "Animation", "props": { "var": "_ani1", "source": "res/components/ad.ani" } }, { "type": "Image", "props": { "y": 38, "x": -5, "var": "_area", "skin": "gameLogo/lishui.png", "scaleY": 0.6, "scaleX": 0.6 } }] }] }], "animations": [{ "nodes": [{ "target": 4, "keyframes": { "scaleY": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleY", "index": 7 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleY", "index": 9 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleY", "index": 11 }], "scaleX": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleX", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleX", "index": 7 }, { "value": 0.9, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleX", "index": 9 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleX", "index": 11 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 7 }] } }, { "target": 14, "keyframes": { "scaleY": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleY", "index": 4 }], "scaleX": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleX", "index": 4 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleX", "index": 9 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleX", "index": 28 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "alpha", "index": 4 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "alpha", "index": 9 }, { "value": 0.6, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "alpha", "index": 28 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "alpha", "index": 52 }] } }, { "target": 2, "keyframes": { "skewY": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "skewY", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "skewY", "index": 4 }], "skewX": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "skewX", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "skewX", "index": 4 }], "centerX": [{ "value": 0, "tweenMethod": "linearNone", "tween": false, "target": 2, "key": "centerX", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "centerX", "index": 4 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "centerX", "index": 11 }, { "value": 10, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "centerX", "index": 32 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "centerX", "index": 60 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 4 }] } }, { "target": 3, "keyframes": { "y": [{ "value": 356, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "y", "index": 0 }, { "value": 346, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "y", "index": 8 }, { "value": 356, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "y", "index": 10 }, { "value": 346, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "y", "index": 20 }], "scaleY": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleY", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleY", "index": 8 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleY", "index": 10 }], "scaleX": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleX", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleX", "index": 8 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleX", "index": 10 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 8 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 10 }] } }, { "target": 15, "keyframes": { "scaleY": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleY", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleY", "index": 10 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleY", "index": 12 }], "scaleX": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleX", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleX", "index": 10 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleX", "index": 12 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "alpha", "index": 10 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "alpha", "index": 12 }] } }, { "target": 16, "keyframes": { "scaleY": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleY", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleY", "index": 10 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleY", "index": 12 }], "scaleX": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleX", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleX", "index": 10 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleX", "index": 12 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "alpha", "index": 10 }] } }, { "target": 5, "keyframes": { "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 5 }, { "value": 0.9, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 8 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 12 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 15 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 5 }, { "value": 0.9, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 8 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 12 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 15 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 5 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return MatchLoseUI;
        }(View));
        matchSign.MatchLoseUI = MatchLoseUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchPlayerInfoUI = /** @class */ (function (_super) {
            __extends(MatchPlayerInfoUI, _super);
            function MatchPlayerInfoUI() {
                return _super.call(this) || this;
            }
            MatchPlayerInfoUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchPlayerInfoUI.uiView);
            };
            MatchPlayerInfoUI.uiView = { "type": "View", "props": { "width": 640, "height": 960 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 640, "skin": "matchSign/微信图片_20171214103011.jpg", "height": 960 } }, { "type": "List", "props": { "y": 397, "width": 583, "height": 530, "centerX": 0.5 } }] };
            return MatchPlayerInfoUI;
        }(View));
        matchSign.MatchPlayerInfoUI = MatchPlayerInfoUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchRewardRendererUI = /** @class */ (function (_super) {
            __extends(MatchRewardRendererUI, _super);
            function MatchRewardRendererUI() {
                return _super.call(this) || this;
            }
            MatchRewardRendererUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchRewardRendererUI.uiView);
            };
            MatchRewardRendererUI.uiView = { "type": "View", "props": { "width": 445, "height": 57 }, "child": [{ "type": "Label", "props": { "y": 18, "x": 30, "width": 42, "var": "_labRank", "text": "1", "fontSize": 22, "color": "#b77a5c", "align": "center" } }, { "type": "Label", "props": { "y": 18, "var": "_labReward", "text": "label", "right": 74.5185546875, "fontSize": 22, "color": "#b77a5c" } }, { "type": "Image", "props": { "y": 10, "x": 36, "var": "_imgRank", "skin": "matchSign/matchSign_rank_1.png" } }, { "type": "Image", "props": { "y": 21, "x": 382, "skin": "tongyong/tongyong_diamond.png" } }, { "type": "Image", "props": { "var": "_imgLine", "skin": "tongyong/tongyong_line.png", "right": 0, "left": 0, "bottom": 0 } }] };
            return MatchRewardRendererUI;
        }(View));
        matchSign.MatchRewardRendererUI = MatchRewardRendererUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchSignUI = /** @class */ (function (_super) {
            __extends(MatchSignUI, _super);
            function MatchSignUI() {
                return _super.call(this) || this;
            }
            MatchSignUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchSignUI.uiView);
            };
            MatchSignUI.uiView = { "type": "View", "props": { "width": 1280, "height": 720 }, "child": [{ "type": "Box", "props": { "var": "_box", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "res/bg/bg_hall.png", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Image", "props": { "visible": false, "skin": "matchSign/matchSign_img_6.png", "right": 0, "left": 0, "bottom": 0 } }, { "type": "BaseButton", "props": { "y": 21, "var": "_close", "stateNum": 1, "skin": "menu/btnClose.png", "left": 10 } }, { "type": "Image", "props": { "top": 127, "skin": "matchSign/match_list_bg.png", "sizeGrid": "14,17,15,22", "right": 20, "left": 20, "bottom": 10 } }, { "type": "Image", "props": { "y": 25, "skin": "matchSign/matchSign_title.png", "centerX": 0 } }, { "type": "BaseButton", "props": { "visible": false, "var": "_btnJoin", "stateNum": 2, "skin": "matchSign/matchSign_btn_join_match.png", "right": 23, "labelSize": 26, "bottom": 19 } }, { "type": "List", "props": { "var": "_list", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 153, "spaceY": 10, "spaceX": 20, "right": 50, "repeatX": 2, "left": 60, "bottom": 30 } }, { "type": "BaseButton", "props": { "y": 18, "visible": false, "var": "_btnHelp", "stateNum": 2, "skin": "matchSign/matchSign_btn_help.png", "right": 10, "labelSize": 26 } }, { "type": "Label", "props": { "x": 153, "var": "_labNoHistory", "text": "当前暂无比赛", "fontSize": 30, "color": "#9b5036", "centerY": 37, "centerX": 0, "cacheAsBitmap": true } }, { "type": "BaseButton", "props": { "visible": true, "var": "_btnCreate", "stateNum": 2, "skin": "matchSign/matchSign_btn_create_match.png", "left": 22, "labelSize": 26, "bottom": 19 } }, { "type": "BaseButton", "props": { "y": 38, "visible": true, "var": "_matchhistory", "stateNum": 1, "skin": "matchSign/btn_his.png", "right": 90, "labelSize": 26 } }, { "type": "Box", "props": { "var": "_hisbox", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.7 } }, { "type": "Image", "props": { "width": 960, "skin": "common/bg_common_di.png", "height": 640, "centerY": 0, "centerX": 2 }, "child": [{ "type": "Image", "props": { "y": 42, "skin": "matchSign/his_title.png", "centerX": 6 } }, { "type": "List", "props": { "var": "_hislist", "vScrollBarSkin": "tongyong/tongyong_gray.png", "top": 150, "spaceY": 20, "right": 40, "repeatY": 4, "repeatX": 1, "left": 30, "bottom": 50 } }] }, { "type": "BaseButton", "props": { "y": 46, "var": "_hisclose", "stateNum": 1, "skin": "common/sBtn_close2.png", "left": 1075 } }] }] }] };
            return MatchSignUI;
        }(View));
        matchSign.MatchSignUI = MatchSignUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchSignCostRendererUI = /** @class */ (function (_super) {
            __extends(MatchSignCostRendererUI, _super);
            function MatchSignCostRendererUI() {
                return _super.call(this) || this;
            }
            MatchSignCostRendererUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchSignCostRendererUI.uiView);
            };
            MatchSignCostRendererUI.uiView = { "type": "View", "props": { "width": 92, "height": 56 }, "child": [{ "type": "BaseButton", "props": { "y": 0, "x": 0, "width": 92, "var": "_btn", "stateNum": 3, "skin": "createTable/bar.png", "sizeGrid": "21,24,20,24", "labelSize": 20, "labelColors": "#9C573A,#705E40,#705E40,#705E40", "label": "200钻石" } }] };
            return MatchSignCostRendererUI;
        }(View));
        matchSign.MatchSignCostRendererUI = MatchSignCostRendererUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchSignCreateUI = /** @class */ (function (_super) {
            __extends(MatchSignCreateUI, _super);
            function MatchSignCreateUI() {
                return _super.call(this) || this;
            }
            MatchSignCreateUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchSignCreateUI.uiView);
            };
            MatchSignCreateUI.uiView = { "type": "View", "props": { "width": 640, "height": 1024 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_mask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.6 } }, { "type": "Box", "props": { "width": 620, "var": "_box", "top": 59, "right": 10, "left": 10, "height": 785, "bottom": 63 }, "child": [{ "type": "Image", "props": { "y": -70, "x": 0, "top": 0, "skin": "tongyong/tongyong_bg.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "height": 940, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "width": 319, "skin": "tongyong/tongyong_bg_title.png", "centerX": 0 }, "child": [{ "type": "Label", "props": { "text": "缙云麻将比赛", "strokeColor": "#a03c07", "stroke": 2, "fontSize": 34, "color": "#f9e6b6", "centerY": -7, "centerX": 0 } }] }, { "type": "Image", "props": { "top": 80, "skin": "tongyong/tongyong_top_border_1.png", "sizeGrid": "18,23,21,21", "right": 15, "left": 15, "height": 700, "bottom": 21 } }] }, { "type": "BaseButton", "props": { "y": -29, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "right": -29, "label": "" } }, { "type": "Box", "props": { "y": 96, "var": "_wanfa", "right": 30, "left": 30, "height": 60 } }, { "type": "Panel", "props": { "width": 620, "var": "_panel", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 169, "right": 0, "left": 0, "height": 684, "bottom": 150 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 60, "text": "比赛名称", "fontSize": 28, "color": "#b77a5c" } }, { "type": "TextInput", "props": { "y": 38, "width": 497, "var": "_inputName", "skin": "matchSign/matchSign_img_12.png", "sizeGrid": "20,36,20,36", "promptColor": "#aa8d83", "prompt": "请输入比赛名称", "padding": "1,1,1,20", "height": 54, "fontSize": 24, "color": "#9b5036", "centerX": 0.5 } }, { "type": "Image", "props": { "y": 115, "skin": "tongyong/tongyong_line.png", "right": 50, "left": 50 } }, { "type": "Label", "props": { "y": 136, "x": 60, "text": "开赛方式", "fontSize": 28, "color": "#b77a5c" } }, { "type": "RadioGroup", "props": { "y": 174, "x": 52, "var": "_radType", "stateNum": 2, "space": 95, "skin": "createTable/createTable_radio_btn_1.png", "selectedIndex": 0, "labels": "人满开赛,定时开赛", "labelSize": 24, "labelPadding": "12", "labelColors": "#9b5036,#9b5036,#9b5036,#9b5036", "direction": "horizontal" } }, { "type": "TextInput", "props": { "y": 226, "width": 497, "var": "_inputCount", "skin": "matchSign/matchSign_img_12.png", "sizeGrid": "20,36,20,36", "promptColor": "#aa8d83", "prompt": "设定比赛人数", "padding": "1,1,1,20", "mouseEnabled": false, "height": 56, "fontSize": 24, "color": "#9b5036", "centerX": 0.5 } }, { "type": "Image", "props": { "y": 226, "width": 497, "var": "_imgCount", "skin": "matchSign/matchSign_img_5.png", "sizeGrid": "20,18,20,20", "height": 56, "centerX": 0.5, "alpha": 0.01 } }, { "type": "Image", "props": { "y": 307, "skin": "tongyong/tongyong_line.png", "right": 50, "left": 50 } }, { "type": "Label", "props": { "y": 334, "x": 60, "text": "报名费用", "fontSize": 28, "color": "#b77a5c" } }, { "type": "Image", "props": { "y": 330, "x": 438, "skin": "matchSign/matchSign_img_13.png" } }, { "type": "Box", "props": { "y": 455, "x": 50, "width": 520, "var": "_boxRule", "height": 151 }, "child": [{ "type": "Image", "props": { "y": 0, "skin": "tongyong/tongyong_line.png", "right": 0, "left": 0 } }, { "type": "Label", "props": { "y": 21, "x": 10, "text": "玩法", "fontSize": 28, "color": "#b77a5c" } }, { "type": "BaseButton", "props": { "y": 6, "x": 400, "var": "_btnRule", "stateNum": 2, "skin": "matchSign/matchSign_btn_setup.png", "label": "" } }, { "type": "Image", "props": { "y": 71, "x": 12, "width": 497, "skin": "matchSign/matchSign_img_12.png", "sizeGrid": "20,18,20,20", "height": 80, "centerX": 0.5 } }, { "type": "Label", "props": { "y": 83, "wordWrap": true, "var": "_labRule", "text": "玩法", "right": 28, "left": 28, "fontSize": 20, "color": "#9b5036" } }] }, { "type": "TextInput", "props": { "y": 380, "width": 497, "var": "_inputDiamond", "skin": "matchSign/matchSign_img_12.png", "sizeGrid": "20,36,20,36", "promptColor": "#aa8d83", "prompt": "设定报名费用", "padding": "1,1,1,20", "mouseEnabled": false, "height": 56, "fontSize": 24, "color": "#9b5036", "centerX": 0.5 } }, { "type": "Image", "props": { "y": 380, "width": 497, "var": "_imgDiamond", "skin": "matchSign/matchSign_img_5.png", "sizeGrid": "20,18,20,20", "height": 56, "centerX": 0, "alpha": 0.01 } }] }, { "type": "Image", "props": { "width": 574, "skin": "createTable/dibian.png", "sizeGrid": "0,18,0,20", "right": 23, "left": 23, "height": 99, "bottom": 33 } }, { "type": "BaseButton", "props": { "var": "_btnCreate", "stateNum": 2, "skin": "matchSign/matchSign_btn_create.png", "label": "", "centerX": 145, "bottom": 44 } }, { "type": "Label", "props": { "x": 50, "wordWrap": true, "width": 291, "text": "比赛保留3天，3天未开始该比赛将自动解散", "height": 40, "fontSize": 20, "color": "#9b5036", "bottom": 66 } }, { "type": "Image", "props": { "var": "_imgInputBack", "skin": "matchSign/matchSign_img_11.png", "sizeGrid": "22,0,16,0", "right": -10, "left": -10, "height": 342, "bottom": 0 } }] }] };
            return MatchSignCreateUI;
        }(View));
        matchSign.MatchSignCreateUI = MatchSignCreateUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchSignInfoUI = /** @class */ (function (_super) {
            __extends(MatchSignInfoUI, _super);
            function MatchSignInfoUI() {
                return _super.call(this) || this;
            }
            MatchSignInfoUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchSignInfoUI.uiView);
            };
            MatchSignInfoUI.uiView = { "type": "View", "props": { "width": 1280, "height": 720 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_mask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.6 } }, { "type": "Box", "props": { "visible": true, "var": "_box", "top": 59, "right": 100, "left": 100, "height": 598, "bottom": 63 }, "child": [{ "type": "Image", "props": { "y": 0, "x": -10, "top": 0, "skin": "matchSign/match_list_bg.png", "sizeGrid": "35,33,36,38", "right": 0, "left": 0, "height": 940, "bottom": 0 }, "child": [{ "type": "Image", "props": { "width": 1230, "top": 21, "skin": "matchSign/match_content.png", "sizeGrid": "14,21,21,17", "right": 15, "left": 15, "height": 497, "bottom": 21 } }, { "type": "Label", "props": { "y": 50, "var": "_labTitle", "text": "您已被淘汰", "fontSize": 36, "color": "#944422", "centerX": 0, "cacheAsBitmap": true } }] }, { "type": "Image", "props": { "y": 84, "visible": false, "skin": "matchSign/matchSign_img_16.png", "centerX": 0 } }, { "type": "BaseButton", "props": { "y": 284, "var": "_btnShare", "stateNum": 1, "skin": "matchSign/matchSign_btn_share.png", "labelSize": 24, "centerX": -273 } }, { "type": "BaseButton", "props": { "y": 394, "var": "_btnDetail", "stateNum": 1, "skin": "matchSign/matchSign_detail.png", "labelSize": 24, "centerX": -264 } }, { "type": "Label", "props": { "y": 189, "x": 128, "width": 257, "var": "_roomcode", "text": "label", "fontSize": 30, "color": "#944422", "align": "center" } }, { "type": "Image", "props": { "y": 148, "x": 25, "visible": false, "var": "_imgName" } }, { "type": "Image", "props": { "y": 151, "var": "_imgTime", "skin": "matchSign/matchSign_img_17.png", "centerX": 276 } }, { "type": "BaseButton", "props": { "y": 257, "visible": false, "var": "_btnTab", "stateNum": 2, "skin": "matchSign/matchSign_btn_tab.png", "labelSize": 26, "labelColors": "#997a4b,#997a4b,#ffecd0", "centerX": 0 } }, { "type": "BaseButton", "props": { "y": 257, "x": 128, "visible": false, "var": "_btnTab2", "stateNum": 2, "skin": "matchSign/matchSign_btn_tab_2.png", "labelSize": 26, "labelColors": "#997a4b,#997a4b,#ffecd0", "centerX": 0 } }, { "type": "BaseButton", "props": { "y": -39, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "right": -34, "label": "" } }, { "type": "Image", "props": { "y": 288, "x": 690, "skin": "matchSign/cost_bg.png" } }, { "type": "Image", "props": { "y": 296, "x": 780, "var": "_imgFree", "skin": "matchSign/matchSign_img_20.png" } }, { "type": "Image", "props": { "y": 188, "x": 226, "visible": false, "skin": "matchSign/matchSign_img_21.png" } }, { "type": "Image", "props": { "y": 225, "x": 764, "var": "_imgMember", "skin": "matchSign/matchSign_img_1.png" } }, { "type": "Image", "props": { "y": 230, "var": "_imgTimeNotStart", "skin": "matchSign/matchSign_img_34.png", "centerX": 282 } }, { "type": "Image", "props": { "y": 179, "var": "_imgWillStart", "skin": "matchSign/matchSign_img_19.png", "centerX": 216 } }, { "type": "Image", "props": { "y": 770, "x": 23, "width": 574, "visible": false, "skin": "createTable/dibian.png", "sizeGrid": "0,18,0,20", "right": 23, "left": 23, "height": 100, "bottom": 32 } }, { "type": "Label", "props": { "var": "_labBottom", "text": "您已被淘汰", "fontSize": 24, "color": "#9b5036", "centerX": -370, "cacheAsBitmap": true, "bottom": 57 } }, { "type": "Label", "props": { "var": "_labFinalRank", "text": "排名", "fontSize": 24, "color": "#9b5036", "centerX": -183, "cacheAsBitmap": true, "bottom": 55 } }, { "type": "BaseButton", "props": { "y": 380, "var": "_btnSign", "stateNum": 1, "skin": "matchSign/matchSign_btn_sign2.png", "centerX": 276 } }, { "type": "BaseButton", "props": { "y": 380, "var": "_btnCancelSign", "stateNum": 1, "skin": "matchSign/matchSign_btn_cancel_modify2.png", "centerX": 276 } }, { "type": "BaseButton", "props": { "visible": false, "var": "_btnReturnMatch", "stateNum": 2, "skin": "matchSign/matchSign_btn_return_match2.png", "centerX": 289, "bottom": 136 } }, { "type": "BaseButton", "props": { "y": 781, "x": 357, "visible": false, "var": "_btnManager", "stateNum": 2, "skin": "matchSign/matchSign_btn_manager.png", "labelSize": 26, "centerX": 152.5, "bottom": 36 } }, { "type": "Image", "props": { "y": 179, "var": "_imgMatching", "skin": "matchSign/matchSign_img_23.png", "centerX": 205 } }, { "type": "Label", "props": { "var": "_labSignOver", "text": "该比赛已终止报名", "fontSize": 24, "color": "#9b5036", "centerX": 286, "cacheAsBitmap": true, "bottom": 62 } }, { "type": "Image", "props": { "y": 305, "x": 865, "visible": false, "var": "_imgDiamond", "skin": "tongyong/tongyong_diamond.png" } }, { "type": "Image", "props": { "y": 117, "skin": "tongyong/line_heng.png", "sizeGrid": "0,2,0,2", "right": 50, "left": 50 } }, { "type": "Image", "props": { "top": 139, "skin": "tongyong/line_shu.png", "sizeGrid": "2,0,2,0", "centerX": 0, "bottom": 51 } }, { "type": "Label", "props": { "y": 300, "x": 733, "width": 168, "var": "_labCost", "text": "label", "fontSize": 30, "color": "#f8ebd3", "align": "center" } }, { "type": "Label", "props": { "y": 221, "x": 800, "width": 92, "var": "_fontMember", "text": "label", "fontSize": 30, "color": "#944422", "align": "center" } }, { "type": "Label", "props": { "y": 182, "x": 688, "width": 257, "var": "_labTotalMember", "text": "满200人开赛", "fontSize": 30, "color": "#944422", "align": "center" } }, { "type": "Box", "props": { "y": -27, "x": -40, "width": 1147, "visible": false, "var": "_rulebox", "height": 647 }, "child": [{ "type": "Image", "props": { "y": 27, "x": 40, "top": 0, "skin": "matchSign/match_list_bg.png", "sizeGrid": "35,33,36,38", "right": 0, "left": 0, "height": 940, "bottom": 0 }, "child": [{ "type": "Image", "props": { "width": 1230, "top": 21, "skin": "matchSign/match_content.png", "sizeGrid": "14,21,21,17", "right": 15, "left": 15, "height": 497, "bottom": 21 } }, { "type": "Label", "props": { "y": 50, "var": "_labTitle1", "text": "您已被淘汰", "fontSize": 36, "color": "#944422", "centerX": 0, "cacheAsBitmap": true } }] }, { "type": "Box", "props": { "y": 185, "width": 154, "var": "_boxTab", "height": 353, "centerX": -445 }, "child": [{ "type": "BaseButton", "props": { "y": 0, "x": 0, "var": "_tab1", "stateNum": 3, "skin": "matchSign/btn_reward.png" } }, { "type": "BaseButton", "props": { "y": 150, "x": 0, "var": "_tab2", "stateNum": 3, "skin": "matchSign/btn_rule.png" } }, { "type": "BaseButton", "props": { "y": 300, "x": 0, "visible": false, "var": "_tab3", "stateNum": 3, "skin": "matchSign/btn_history.png" } }, { "type": "Image", "props": { "y": 0, "x": 0, "visible": false, "var": "_imgTab1", "skin": "matchSign/matchSign_img_31.png" } }, { "type": "Image", "props": { "y": 0, "x": 0, "visible": false, "var": "_imgTab2", "skin": "matchSign/matchSign_img_32.png" } }, { "type": "Image", "props": { "y": 0, "x": 0, "visible": false, "var": "_imgTab3", "skin": "matchSign/matchSign_img_33.png" } }] }, { "type": "BaseButton", "props": { "y": 28, "var": "_btnback", "stateNum": 1, "skin": "menu/btnClose.png", "left": 30 } }, { "type": "Image", "props": { "y": 127, "x": 10, "skin": "tongyong/line_heng.png", "sizeGrid": "0,2,0,2", "right": 50, "left": 50 } }, { "type": "Panel", "props": { "x": 262, "width": 834, "var": "_panel", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 148, "bottom": 57 }, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 515, "var": "_boxInfo", "height": 441, "centerX": 0.5 }, "child": [{ "type": "Image", "props": { "y": -2, "width": 470, "visible": false, "skin": "matchSign/matchSign_img_12.png", "sizeGrid": "24,18,22,15", "height": 35, "centerX": 0 } }, { "type": "Label", "props": { "y": 3, "x": 185, "visible": false, "var": "_labMemberCount1", "text": "已报名：1人", "fontSize": 24, "color": "#b77a5c", "centerX": 0, "cacheAsBitmap": true } }, { "type": "Image", "props": { "y": 151, "width": 470, "visible": false, "skin": "matchSign/matchSign_img_12.png", "sizeGrid": "24,18,22,15", "height": 171, "centerX": 0.5 } }, { "type": "Label", "props": { "y": 213, "x": 83, "wordWrap": true, "width": 354, "visible": false, "var": "_labRule", "text": "爱的客户挂断是vgdj", "fontSize": 24, "color": "#b77a5c", "cacheAsBitmap": true } }, { "type": "Label", "props": { "y": 158, "visible": false, "text": "玩法", "fontSize": 24, "color": "#b77a5c", "centerX": 0.5, "cacheAsBitmap": true } }, { "type": "Label", "props": { "y": 337, "var": "_labHelp", "underline": true, "text": "比赛规则", "fontSize": 24, "color": "#9b5036", "centerX": 0.5, "cacheAsBitmap": true } }, { "type": "Label", "props": { "y": 3, "var": "_labMyRank1", "text": "我的排名：12", "right": 26, "fontSize": 24, "color": "#b77a5c", "cacheAsBitmap": true } }, { "type": "Label", "props": { "y": 3, "x": 30, "var": "_labCurrentMember1", "text": "当前人数：1/12", "fontSize": 24, "color": "#b77a5c", "cacheAsBitmap": true } }, { "type": "Image", "props": { "y": 199, "x": 60, "skin": "createTable/line.png", "right": 50, "left": 50 } }] }, { "type": "Box", "props": { "width": 515, "var": "_boxReward", "height": 441 }, "child": [{ "type": "List", "props": { "y": 0, "x": 35, "width": 445, "var": "_listReward", "vScrollBarSkin": "tongyong/jindutiaodi.png", "spaceY": 0, "repeatX": 1, "height": 418, "centerX": 0 } }] }, { "type": "Box", "props": { "y": 115, "width": 400, "var": "_boxWarn", "height": 90, "centerX": 0.5 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "menu/menu_brown.png", "sizeGrid": "12,14,16,12", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Label", "props": { "y": 15, "var": "_labWarn", "text": "比赛人数未满8人,暂时无法开赛", "mouseEnabled": false, "fontSize": 24, "color": "#fcecd3", "centerX": 0, "align": "center" } }, { "type": "Label", "props": { "text": "继续等待其他玩家报名", "mouseEnabled": false, "fontSize": 24, "color": "#fcecd3", "centerX": 0.0078125, "bottom": 15, "align": "center" } }] }] }, { "type": "Panel", "props": { "x": 261, "width": 828, "var": "_rulepanel", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 148, "bottom": 44 }, "child": [{ "type": "Image", "props": { "y": 0, "var": "_ruleimg", "centerX": 0 } }] }, { "type": "Image", "props": { "y": 166, "x": 232, "top": 139, "skin": "tongyong/line_shu.png", "sizeGrid": "2,0,2,0", "bottom": 51 } }, { "type": "List", "props": { "x": 261, "width": 828, "var": "_rewardpanel", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 148, "spaceY": 10, "repeatY": 4, "repeatX": 1, "bottom": 44 } }, { "type": "Box", "props": { "y": 148, "x": 323, "width": 515, "var": "_boxPlayerList", "height": 441, "centerX": 0.5 }, "child": [{ "type": "Label", "props": { "y": 3, "var": "_labMyRank2", "text": "我的排名：12", "right": 26.3046875, "fontSize": 24, "color": "#b77a5c", "cacheAsBitmap": true } }, { "type": "Label", "props": { "y": 3, "x": 30, "var": "_labCurrentMember2", "text": "当前人数：1/12", "fontSize": 24, "color": "#b77a5c", "cacheAsBitmap": true } }, { "type": "List", "props": { "y": 43, "width": 300, "var": "_listUser2", "vScrollBarSkin": "tongyong/jindutiaodi.png", "spaceY": 20, "repeatX": 1, "height": 375, "centerX": 0 } }, { "type": "List", "props": { "y": 78, "width": 445, "var": "_listUser", "vScrollBarSkin": "tongyong/jindutiaodi.png", "spaceY": 7, "repeatX": 1, "height": 340, "centerX": 0 } }, { "type": "Label", "props": { "y": 3, "x": 185, "var": "_labMemberCount2", "text": "已报名：1人", "fontSize": 24, "color": "#b77a5c", "centerX": 0, "cacheAsBitmap": true } }, { "type": "Box", "props": { "y": 45, "x": 32, "width": 401, "var": "_boxUserTitle", "height": 24 }, "child": [{ "type": "Image", "props": { "y": -5, "width": 470, "skin": "matchSign/matchSign_img_12.png", "sizeGrid": "24,18,22,15", "height": 35, "centerX": 26.5 } }, { "type": "Label", "props": { "y": 0, "x": 0, "text": "排名", "fontSize": 22, "color": "#b77a5c", "cacheAsBitmap": true } }, { "type": "Label", "props": { "y": 0, "x": 88, "text": "昵称", "fontSize": 22, "color": "#b77a5c", "cacheAsBitmap": true } }, { "type": "Label", "props": { "y": 0, "x": 358, "text": "分数", "fontSize": 22, "color": "#b77a5c", "cacheAsBitmap": true } }] }] }] }] }] };
            return MatchSignInfoUI;
        }(View));
        matchSign.MatchSignInfoUI = MatchSignInfoUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchSignMatchListRendererUI = /** @class */ (function (_super) {
            __extends(MatchSignMatchListRendererUI, _super);
            function MatchSignMatchListRendererUI() {
                return _super.call(this) || this;
            }
            MatchSignMatchListRendererUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchSignMatchListRendererUI.uiView);
            };
            MatchSignMatchListRendererUI.uiView = { "type": "View", "props": { "width": 570, "height": 155 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "matchSign/match_content.png", "sizeGrid": "14,21,21,17", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Image", "props": { "y": 0, "x": 0, "visible": false, "var": "_imgIcon" } }, { "type": "Image", "props": { "y": 0, "x": 0, "visible": false, "var": "_imgIcon2" } }, { "type": "Image", "props": { "y": 80, "x": 300, "visible": false, "var": "_imgLeftTimeBack", "skin": "matchSign/matchSign_img_9.png" } }, { "type": "Label", "props": { "y": 21, "x": 26, "var": "_labTitle", "text": "周日大奖赛", "fontSize": 30, "color": "#944422" } }, { "type": "Label", "props": { "y": 89, "x": 258, "width": 295, "var": "_labInfo", "text": "开赛时间：12-23 18:55", "height": 28, "fontSize": 28, "color": "#b56949", "align": "right" } }, { "type": "Label", "props": { "y": 89, "x": 382, "width": 166, "var": "_labLeftTime", "text": "剩余：12:31", "fontSize": 28, "color": "#b56949", "align": "right" } }, { "type": "Box", "props": { "y": 24, "x": 485, "var": "_boxMember" }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "matchSign/matchSign_img_1.png" } }, { "type": "Label", "props": { "y": -1, "x": 29, "var": "_labMemberCount", "text": "11", "fontSize": 28, "color": "#b56949" } }] }, { "type": "BaseButton", "props": { "y": 18, "x": 499, "visible": false, "var": "_btnSign", "stateNum": 2, "skin": "matchSign/matchSign_btn_sign.png" }, "child": [{ "type": "Label", "props": { "y": 55, "x": 0, "width": 121, "var": "_labFree", "text": "免费", "mouseEnabled": false, "fontSize": 20, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "y": 55, "x": 29, "width": 44, "var": "_labCost", "text": "40", "mouseEnabled": false, "height": 20, "fontSize": 20, "color": "#ffffff", "align": "center" } }, { "type": "Image", "props": { "y": 57, "x": 72, "var": "_imgDiamond", "skin": "tongyong/tongyong_diamond.png" } }] }, { "type": "BaseButton", "props": { "y": 18, "x": 499, "visible": false, "var": "_btnReturnMatch", "stateNum": 2, "skin": "matchSign/matchSign_btn_return_match.png", "name": "returnMatch" }, "child": [{ "type": "Label", "props": { "y": 55, "x": 0, "width": 121, "var": "_labSignined", "text": "已报名", "mouseEnabled": false, "fontSize": 20, "color": "#ffffff", "align": "center" } }] }, { "type": "BaseButton", "props": { "y": 18, "x": 499, "visible": false, "var": "_btnCancelSign", "stateNum": 2, "skin": "matchSign/matchSign_btn_cancel_sign.png" } }, { "type": "Image", "props": { "y": 18, "x": 499, "visible": false, "var": "_imgAlreadyStart", "skin": "matchSign/matchSign_btn_started.png" } }, { "type": "Image", "props": { "y": 0, "x": 493, "visible": false, "skin": "matchSign/matchSign_img_10.png" } }, { "type": "Label", "props": { "y": 91, "x": 28, "var": "_match_desc", "text": "第一名", "fontSize": 28, "color": "#b56949" } }] };
            return MatchSignMatchListRendererUI;
        }(View));
        matchSign.MatchSignMatchListRendererUI = MatchSignMatchListRendererUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchSignRewardRendererUI = /** @class */ (function (_super) {
            __extends(MatchSignRewardRendererUI, _super);
            function MatchSignRewardRendererUI() {
                return _super.call(this) || this;
            }
            MatchSignRewardRendererUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchSignRewardRendererUI.uiView);
            };
            MatchSignRewardRendererUI.uiView = { "type": "View", "props": { "width": 370, "height": 68 }, "child": [{ "type": "Label", "props": { "var": "_no", "text": "0", "fontSize": 28, "color": "#b66340" } }, { "type": "Label", "props": { "y": 34, "x": 0, "var": "_desc", "text": "label", "fontSize": 28, "color": "#7e3110" } }] };
            return MatchSignRewardRendererUI;
        }(View));
        matchSign.MatchSignRewardRendererUI = MatchSignRewardRendererUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchSignRewardRendererNewUI = /** @class */ (function (_super) {
            __extends(MatchSignRewardRendererNewUI, _super);
            function MatchSignRewardRendererNewUI() {
                return _super.call(this) || this;
            }
            MatchSignRewardRendererNewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchSignRewardRendererNewUI.uiView);
            };
            MatchSignRewardRendererNewUI.uiView = { "type": "View", "props": { "width": 158, "height": 56 }, "child": [{ "type": "BaseButton", "props": { "y": 0, "x": 0, "width": 158, "var": "_btn", "stateNum": 3, "skin": "createTable/bar.png", "sizeGrid": "21,24,20,24", "labelSize": 20, "labelColors": "#9C573A,#705E40,#705E40,#705E40", "label": "200钻石" } }] };
            return MatchSignRewardRendererNewUI;
        }(View));
        matchSign.MatchSignRewardRendererNewUI = MatchSignRewardRendererNewUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchSignRuleUI = /** @class */ (function (_super) {
            __extends(MatchSignRuleUI, _super);
            function MatchSignRuleUI() {
                return _super.call(this) || this;
            }
            MatchSignRuleUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchSignRuleUI.uiView);
            };
            MatchSignRuleUI.uiView = { "type": "View", "props": { "width": 640, "height": 1024 }, "child": [{ "type": "Image", "props": { "y": 296, "x": 405, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "x": 10, "var": "_boxInfo", "top": 59, "right": 10, "left": 10, "bottom": 63 }, "child": [{ "type": "Image", "props": { "width": 620, "top": 0, "skin": "tongyong/tongyong_bg.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "height": 940, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "width": 319, "skin": "tongyong/tongyong_bg_title.png", "centerX": 0 }, "child": [{ "type": "Image", "props": { "var": "_gamename", "skin": "matchSign/matchSign_setup_title.png", "centerY": -7, "centerX": 0 } }] }, { "type": "Image", "props": { "top": 80, "skin": "tongyong/tongyong_top_border_1.png", "sizeGrid": "18,23,21,21", "right": 15, "left": 15, "height": 700, "bottom": 21 } }, { "type": "Panel", "props": { "var": "_panel", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 100, "right": 10, "left": 10, "bottom": 145 } }] }, { "type": "BaseButton", "props": { "y": -29, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "right": -29 } }, { "type": "Image", "props": { "width": 574, "skin": "createTable/dibian.png", "sizeGrid": "0,18,0,20", "right": 23, "left": 23, "height": 96, "bottom": 30 } }, { "type": "BaseButton", "props": { "var": "_btnCancel", "stateNum": 2, "skin": "matchSign/matchSign_btn_cancel_modify.png", "scaleValue": 1, "labelSize": 40, "labelColors": "#ffffff", "labelAlign": "center", "centerX": -154, "bottom": 33.5, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "BaseButton", "props": { "var": "_btnConfirm", "stateNum": 2, "skin": "matchSign/matchSign_btn_modify.png", "scaleValue": 1, "labelSize": 40, "labelColors": "#ffffff", "labelAlign": "center", "centerX": 154, "bottom": 33.5, "anchorY": 0.5, "anchorX": 0.5 } }] }] };
            return MatchSignRuleUI;
        }(View));
        matchSign.MatchSignRuleUI = MatchSignRuleUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchSignRuleRendererUI = /** @class */ (function (_super) {
            __extends(MatchSignRuleRendererUI, _super);
            function MatchSignRuleRendererUI() {
                return _super.call(this) || this;
            }
            MatchSignRuleRendererUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchSignRuleRendererUI.uiView);
            };
            MatchSignRuleRendererUI.uiView = { "type": "View", "props": { "width": 158, "height": 56 }, "child": [{ "type": "BaseButton", "props": { "y": 0, "x": 0, "width": 158, "var": "_btn", "stateNum": 3, "skin": "createTable/bar.png", "sizeGrid": "21,24,20,24", "labelSize": 20, "labelColors": "#9C573A,#705E40,#705E40,#705E40", "label": "200钻石" } }] };
            return MatchSignRuleRendererUI;
        }(View));
        matchSign.MatchSignRuleRendererUI = MatchSignRuleRendererUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchSignUser2RendererUI = /** @class */ (function (_super) {
            __extends(MatchSignUser2RendererUI, _super);
            function MatchSignUser2RendererUI() {
                return _super.call(this) || this;
            }
            MatchSignUser2RendererUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchSignUser2RendererUI.uiView);
            };
            MatchSignUser2RendererUI.uiView = { "type": "View", "props": { "width": 300, "height": 22 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 300, "var": "_labNickname", "text": "label", "fontSize": 22, "color": "#b77a5c", "align": "center" } }] };
            return MatchSignUser2RendererUI;
        }(View));
        matchSign.MatchSignUser2RendererUI = MatchSignUser2RendererUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchSignUser3RendererUI = /** @class */ (function (_super) {
            __extends(MatchSignUser3RendererUI, _super);
            function MatchSignUser3RendererUI() {
                return _super.call(this) || this;
            }
            MatchSignUser3RendererUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchSignUser3RendererUI.uiView);
            };
            MatchSignUser3RendererUI.uiView = { "type": "View", "props": { "width": 567, "height": 44 }, "child": [{ "type": "Label", "props": { "y": 9, "x": 96, "width": 42, "var": "_labRank", "text": "label", "fontSize": 22, "color": "#b77a5c", "align": "center" } }, { "type": "Label", "props": { "y": 9, "width": 300, "var": "_labNickname", "text": "label", "fontSize": 22, "color": "#b77a5c", "centerX": 108, "align": "center" } }, { "type": "Image", "props": { "y": 0, "x": 103, "var": "_imgRank", "skin": "matchSign/matchSign_rank_1.png" } }, { "type": "Image", "props": { "y": 42, "var": "_imgLine", "skin": "tongyong/tongyong_line.png", "centerX": 0.5 } }, { "type": "Label", "props": { "y": 9, "var": "_labReward", "text": "50", "right": 103.529296875, "fontSize": 22, "color": "#b77a5c", "align": "center" } }, { "type": "Image", "props": { "y": 12, "x": 471, "var": "_imgDiamond", "skin": "tongyong/tongyong_diamond.png" } }] };
            return MatchSignUser3RendererUI;
        }(View));
        matchSign.MatchSignUser3RendererUI = MatchSignUser3RendererUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchSignUserRendererUI = /** @class */ (function (_super) {
            __extends(MatchSignUserRendererUI, _super);
            function MatchSignUserRendererUI() {
                return _super.call(this) || this;
            }
            MatchSignUserRendererUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchSignUserRendererUI.uiView);
            };
            MatchSignUserRendererUI.uiView = { "type": "View", "props": { "width": 445, "height": 39 }, "child": [{ "type": "Label", "props": { "x": 0, "width": 42, "var": "_labRank", "text": "label", "fontSize": 22, "color": "#b77a5c", "centerY": 0, "align": "center" } }, { "type": "Label", "props": { "x": 70, "var": "_labNickname", "text": "label", "fontSize": 22, "color": "#b77a5c", "centerY": 0 } }, { "type": "Label", "props": { "x": 314, "width": 126, "var": "_labScore", "text": "label", "fontSize": 22, "color": "#b77a5c", "centerY": 0, "align": "center" } }, { "type": "Image", "props": { "y": 0, "x": 6, "var": "_imgRank", "skin": "matchSign/matchSign_rank_1.png" } }] };
            return MatchSignUserRendererUI;
        }(View));
        matchSign.MatchSignUserRendererUI = MatchSignUserRendererUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchWInUI = /** @class */ (function (_super) {
            __extends(MatchWInUI, _super);
            function MatchWInUI() {
                return _super.call(this) || this;
            }
            MatchWInUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchWInUI.uiView);
            };
            MatchWInUI.uiView = { "type": "View", "props": { "width": 640, "height": 640 }, "child": [{ "type": "Image", "props": { "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "alpha": 0.7 } }, { "type": "Box", "props": { "width": 640, "var": "_box", "height": 640, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 297, "x": 320, "skin": "poker/light_quan.png", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 19 }, { "type": "Image", "props": { "y": 307, "x": 320, "skin": "poker/light_quan.png", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 20 }, { "type": "Image", "props": { "skin": "matchSign/ani/win_bg_1.png", "scaleY": 1, "scaleX": 1, "rotation": 0, "centerY": -39, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5, "alpha": 1 }, "compId": 2 }, { "type": "Image", "props": { "y": 346, "skin": "matchSign/ani/win_bg_2.png", "centerY": -69, "centerX": 0, "anchorY": 1, "anchorX": 0.5, "alpha": 1 }, "compId": 3 }, { "type": "Image", "props": { "y": 308, "x": 259, "skin": "matchSign/ani/win_bg_6.png", "centerX": -110, "anchorY": 1, "anchorX": 1 }, "compId": 16 }, { "type": "Image", "props": { "y": 312, "x": 381, "skin": "matchSign/ani/win_bg_6.png", "skewY": 180, "centerX": 12, "anchorY": 1, "anchorX": 1 }, "compId": 17 }, { "type": "Image", "props": { "y": 314, "skin": "matchSign/ani/win_bg_5.png", "scaleX": 1, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5, "alpha": 1 }, "compId": 4 }, { "type": "Image", "props": { "y": 208, "skin": "matchSign/ani/win_bg_3.png", "scaleY": 1, "scaleX": 1, "centerX": -88.5, "anchorY": -1, "anchorX": 2, "alpha": 1 } }, { "type": "Image", "props": { "y": 208, "skin": "matchSign/ani/win_bg_4.png", "scaleY": 1, "scaleX": 1, "centerX": 101.5, "anchorY": -1, "anchorX": -1, "alpha": 1 } }, { "type": "Image", "props": { "y": 334, "visible": false, "skin": "matchSign/ani/win_1.png", "scaleY": 1, "scaleX": 1, "centerX": -1, "anchorY": 0.5, "anchorX": 0.5, "alpha": 1 } }, { "type": "Image", "props": { "y": 442, "var": "_text", "skin": "matchSign/ani/win_tips_1.png", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "BaseButton", "props": { "y": 485, "var": "_btnConfirm", "stateNum": 1, "skin": "tongyong/btn_confirm.png", "label": "", "centerX": -136 } }, { "type": "BaseButton", "props": { "y": 485, "var": "_btnShare", "stateNum": 1, "skin": "tongyong/btn_share.png", "label": "", "centerX": 162 } }, { "type": "Label", "props": { "y": 294, "x": 257, "width": 133, "var": "_win", "text": "0", "font": "font_num_20", "align": "center" } }, { "type": "Label", "props": { "y": 90, "width": 300, "var": "_title", "text": "比赛", "fontSize": 24, "color": "#fff8a9", "centerX": 0, "align": "center" } }, { "type": "Box", "props": { "y": 496, "visible": false, "var": "_download", "centerX": 436.7 }, "child": [{ "type": "Animation", "props": { "var": "_ani1", "source": "res/components/ad.ani" } }, { "type": "Image", "props": { "y": 38, "x": -5, "var": "_area", "skin": "gameLogo/lishui.png", "scaleY": 0.6, "scaleX": 0.6 } }] }, { "type": "Box", "props": { "y": 389, "x": 234, "var": "_showReward" }, "child": [{ "type": "Image", "props": { "skin": "match/reward.png" } }, { "type": "Label", "props": { "y": 0, "x": 115, "var": "_reward", "text": "30", "fontSize": 24, "color": "#fff448" } }, { "type": "Image", "props": { "y": 4, "x": 153, "var": "_diamond", "skin": "tongyong/tongyong_diamond.png" } }] }] }], "animations": [{ "nodes": [{ "target": 4, "keyframes": { "y": [{ "value": 240, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "y", "index": 0 }], "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleY", "index": 4 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleX", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleX", "index": 4 }, { "value": 0.9, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleX", "index": 6 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleX", "index": 8 }], "anchorY": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "anchorY", "index": 0 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 4 }] } }, { "target": 2, "keyframes": { "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 4 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 4 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 4 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 9 }, { "value": 0.6, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 24 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 44 }] } }, { "target": 3, "keyframes": { "y": [{ "value": 360, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "y", "index": 0 }, { "value": 346, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "y", "index": 8 }, { "value": 356, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "y", "index": 10 }, { "value": 346, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "y", "index": 24 }, { "value": 356, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "y", "index": 42 }, { "value": 346, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "y", "index": 60 }], "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleY", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleY", "index": 8 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleY", "index": 10 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleX", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleX", "index": 8 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleX", "index": 10 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 8 }] } }, { "target": 16, "keyframes": { "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleY", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleY", "index": 10 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleY", "index": 12 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleX", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleX", "index": 10 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "scaleX", "index": 12 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "alpha", "index": 10 }] } }, { "target": 17, "keyframes": { "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleY", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleY", "index": 10 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleY", "index": 12 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleX", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleX", "index": 10 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleX", "index": 12 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "alpha", "index": 10 }] } }, { "target": 19, "keyframes": { "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "scaleY", "index": 15 }, { "value": 1.8, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "scaleY", "index": 29 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "scaleX", "index": 15 }, { "value": 1.8, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "scaleX", "index": 29 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "alpha", "index": 0 }, { "value": 0.6, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "alpha", "index": 15 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 19, "key": "alpha", "index": 29 }] } }, { "target": 20, "keyframes": { "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 20, "key": "scaleY", "index": 0 }, { "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 20, "key": "scaleY", "index": 18 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 20, "key": "scaleY", "index": 35 }, { "value": 1.8, "tweenMethod": "linearNone", "tween": true, "target": 20, "key": "scaleY", "index": 52 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 20, "key": "scaleX", "index": 0 }, { "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 20, "key": "scaleX", "index": 18 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 20, "key": "scaleX", "index": 35 }, { "value": 1.8, "tweenMethod": "linearNone", "tween": true, "target": 20, "key": "scaleX", "index": 52 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 20, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 20, "key": "alpha", "index": 18 }, { "value": 0.6, "tweenMethod": "linearNone", "tween": true, "target": 20, "key": "alpha", "index": 35 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 20, "key": "alpha", "index": 52 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return MatchWInUI;
        }(View));
        matchSign.MatchWInUI = MatchWInUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var MatchstartUI = /** @class */ (function (_super) {
            __extends(MatchstartUI, _super);
            function MatchstartUI() {
                return _super.call(this) || this;
            }
            MatchstartUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.matchSign.MatchstartUI.uiView);
            };
            MatchstartUI.uiView = { "type": "View", "props": { "width": 1280, "height": 720 }, "child": [{ "type": "Image", "props": { "skin": "res/bg/match_bg.png" } }, { "type": "Image", "props": { "skin": "matchSign/ani/matchstart_bg.png", "centerY": 0, "centerX": 0 } }, { "type": "Image", "props": { "var": "_title", "skin": "matchSign/ani/matchrstart.png", "centerY": 0, "centerX": 0 } }, { "type": "Box", "props": { "x": 349, "var": "_swiss", "centerY": 171 } }] };
            return MatchstartUI;
        }(View));
        matchSign.MatchstartUI = MatchstartUI;
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var date;
        (function (date) {
            var DateUI = /** @class */ (function (_super) {
                __extends(DateUI, _super);
                function DateUI() {
                    return _super.call(this) || this;
                }
                DateUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.matchSign.date.DateUI.uiView);
                };
                DateUI.uiView = { "type": "View", "props": { "width": 640, "height": 340 }, "child": [{ "type": "Image", "props": { "x": 10, "top": 80, "skin": "matchSign/matchSign_img_14.png", "sizeGrid": "5,5,5,5", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Label", "props": { "y": 25, "x": 47, "var": "_labCancel", "text": "取消", "mouseEnabled": true, "fontSize": 30, "color": "#9b5036" } }, { "type": "Label", "props": { "y": 25, "var": "_labConfirm", "text": "确定", "right": 47, "mouseEnabled": true, "fontSize": 30, "color": "#9b5036" } }, { "type": "Image", "props": { "y": 185, "skin": "matchSign/matchSign_img_15.png", "mouseThrough": true, "mouseEnabled": false, "centerX": 0 } }] };
                return DateUI;
            }(View));
            date.DateUI = DateUI;
        })(date = matchSign.date || (matchSign.date = {}));
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var matchSign;
    (function (matchSign) {
        var date;
        (function (date) {
            var DateScrollUI = /** @class */ (function (_super) {
                __extends(DateScrollUI, _super);
                function DateScrollUI() {
                    return _super.call(this) || this;
                }
                DateScrollUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.matchSign.date.DateScrollUI.uiView);
                };
                DateScrollUI.uiView = { "type": "View", "props": { "width": 140, "height": 190 }, "child": [{ "type": "List", "props": { "y": 0, "x": 0, "width": 140, "var": "_listBack", "vScrollBarSkin": "tongyong/jindutiaodi.png", "spaceY": 10, "repeatX": 1, "height": 190 } }, { "type": "List", "props": { "y": 80, "x": 0, "width": 140, "var": "_list", "vScrollBarSkin": "tongyong/jindutiaodi.png", "spaceY": 10, "repeatX": 1, "mouseThrough": true, "mouseEnabled": false, "height": 30 } }] };
                return DateScrollUI;
            }(View));
            date.DateScrollUI = DateScrollUI;
        })(date = matchSign.date || (matchSign.date = {}));
    })(matchSign = ui.matchSign || (ui.matchSign = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var CaishenUI = /** @class */ (function (_super) {
            __extends(CaishenUI, _super);
            function CaishenUI() {
                return _super.call(this) || this;
            }
            CaishenUI.prototype.createChildren = function () {
                View.regComponent("ui.mj.HandCard.Card_1UI", ui.mj.HandCard.Card_1UI);
                _super.prototype.createChildren.call(this);
                this.createView(ui.mj.CaishenUI.uiView);
            };
            CaishenUI.uiView = { "type": "View", "props": { "width": 960, "height": 640 }, "child": [{ "type": "Image", "props": { "y": 322, "x": 480, "skin": "opt/caishen_ani_2.png", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 7 }, { "type": "Image", "props": { "y": 306, "x": 480, "skin": "opt/caishen_ani_4.png", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 8 }, { "type": "Image", "props": { "skin": "opt/caishen_ani_1.png", "centerY": 0, "centerX": 0 }, "compId": 4 }, { "type": "Card_1", "props": { "y": 268, "x": 445, "var": "_cai", "centerY": 0, "centerX": 0, "runtime": "ui.mj.HandCard.Card_1UI" }, "compId": 2 }, { "type": "Image", "props": { "skin": "opt/caishen_ani_3.png", "centerY": -82.5, "centerX": 0 }, "compId": 6 }], "animations": [{ "nodes": [{ "target": 2, "keyframes": { "y": [{ "value": -101, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "y", "index": 0 }], "x": [{ "value": 512, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 0 }, { "value": 512, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 8 }, { "value": 512, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 10 }], "scaleY": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 0 }, { "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 8 }, { "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 10 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 13 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 14 }], "scaleX": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 0 }, { "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 8 }, { "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 10 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 13 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 14 }], "anchorY": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "anchorY", "index": 0 }], "anchorX": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "anchorX", "index": 0 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 8 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 10 }] } }, { "target": 4, "keyframes": { "scaleY": [{ "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleY", "index": 0 }, { "value": 0.6, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleY", "index": 7 }], "scaleX": [{ "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleX", "index": 0 }, { "value": 0.6, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleX", "index": 7 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 7 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 10 }] } }, { "target": 6, "keyframes": { "x": [{ "value": 436, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "x", "index": 0 }, { "value": 436, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "x", "index": 10 }], "centerY": [{ "value": -90, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "centerY", "index": 0 }, { "value": -90, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "centerY", "index": 10 }, { "value": -90, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "centerY", "index": 13 }, { "value": -90, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "centerY", "index": 14 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "alpha", "index": 10 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "alpha", "index": 13 }] } }, { "target": 7, "keyframes": { "x": [{ "value": 480, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 0 }, { "value": 480, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 13 }, { "value": 480, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 18 }], "rotation": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "rotation", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "rotation", "index": 18 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "rotation", "index": 19 }, { "value": 60, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "rotation", "index": 45 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 13 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 18 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 19 }] } }, { "target": 8, "keyframes": { "x": [{ "value": 480, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "x", "index": 0 }, { "value": 480, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "x", "index": 16 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "alpha", "index": 16 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "alpha", "index": 35 }, { "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "alpha", "index": 45 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return CaishenUI;
        }(View));
        mj.CaishenUI = CaishenUI;
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var ChooseScoreUI = /** @class */ (function (_super) {
            __extends(ChooseScoreUI, _super);
            function ChooseScoreUI() {
                return _super.call(this) || this;
            }
            ChooseScoreUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.mj.ChooseScoreUI.uiView);
            };
            ChooseScoreUI.uiView = { "type": "View", "props": { "width": 771, "height": 82 }, "child": [{ "type": "BaseButton", "props": { "y": 0, "x": 0, "var": "_score_0", "stateNum": 2, "skin": "card/pao_0.png", "name": 0 } }, { "type": "BaseButton", "props": { "y": 0, "x": 155, "var": "_score_1", "stateNum": 2, "skin": "card/pao_1.png", "name": 1 } }, { "type": "BaseButton", "props": { "y": 0, "x": 310, "var": "_score_2", "stateNum": 2, "skin": "card/pao_2.png", "name": 2 } }, { "type": "BaseButton", "props": { "y": 0, "x": 464, "var": "_score_3", "stateNum": 2, "skin": "card/pao_3.png", "name": 3 } }, { "type": "BaseButton", "props": { "y": 0, "x": 619, "var": "_score_4", "stateNum": 2, "skin": "card/pao_4.png", "name": 4 } }] };
            return ChooseScoreUI;
        }(View));
        mj.ChooseScoreUI = ChooseScoreUI;
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var DiceViewUI = /** @class */ (function (_super) {
            __extends(DiceViewUI, _super);
            function DiceViewUI() {
                return _super.call(this) || this;
            }
            DiceViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.mj.DiceViewUI.uiView);
            };
            DiceViewUI.uiView = { "type": "View", "props": {}, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "dice/dice_bg.png", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Animation", "props": { "y": -138, "x": 45, "var": "_dice_1", "source": "res/mj/Dice.ani" }, "compId": 7 }, { "type": "Animation", "props": { "y": -114, "x": -59, "var": "_dice_2", "source": "res/mj/Dice.ani" }, "compId": 8 }], "animations": [{ "nodes": [{ "target": 7, "keyframes": { "y": [{ "value": -132, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "y", "index": 0 }, { "value": -34, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "y", "index": 5 }, { "value": 51, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "y", "index": 10 }, { "value": 147, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "y", "index": 15 }, { "value": 86, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "y", "index": 20 }, { "value": -32, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "y", "index": 25 }, { "value": -138, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "y", "index": 30 }], "x": [{ "value": -101, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 0 }, { "value": -192, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 5 }, { "value": -130, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 10 }, { "value": -12, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 15 }, { "value": 146, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 20 }, { "value": 160, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 25 }, { "value": 45, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 30 }] } }, { "target": 8, "keyframes": { "y": [{ "value": -114, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "y", "index": 0 }, { "value": -62, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "y", "index": 5 }, { "value": 24, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "y", "index": 10 }, { "value": 148, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "y", "index": 15 }, { "value": 67, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "y", "index": 20 }, { "value": -30, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "y", "index": 25 }, { "value": -132, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "y", "index": 30 }], "x": [{ "value": -59, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "x", "index": 0 }, { "value": 115, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "x", "index": 5 }, { "value": 173, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "x", "index": 10 }, { "value": 98, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "x", "index": 15 }, { "value": -50, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "x", "index": 20 }, { "value": -145, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "x", "index": 25 }, { "value": -61, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "x", "index": 30 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return DiceViewUI;
        }(View));
        mj.DiceViewUI = DiceViewUI;
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var FoldCard;
        (function (FoldCard) {
            var Card_1UI = /** @class */ (function (_super) {
                __extends(Card_1UI, _super);
                function Card_1UI() {
                    return _super.call(this) || this;
                }
                Card_1UI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.FoldCard.Card_1UI.uiView);
                };
                Card_1UI.uiView = { "type": "View", "props": { "width": 34, "name": "1", "height": 52 }, "compId": 1, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_bg", "skin": "card/1/1.png", "scaleY": 0.7, "scaleX": 0.7 } }, { "type": "Image", "props": { "visible": false, "var": "_back", "skin": "card/1/bg_1.png", "scaleY": 0.7, "scaleX": 0.7 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 34, "visible": false, "var": "_mask", "skin": "card/mask.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "height": 49, "alpha": 0.7 } }], "animations": [{ "nodes": [{ "target": 1, "keyframes": { "var": [{ "value": "_arror", "tweenMethod": "linearNone", "tween": false, "target": 1, "key": "var", "index": 0 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
                return Card_1UI;
            }(View));
            FoldCard.Card_1UI = Card_1UI;
        })(FoldCard = mj.FoldCard || (mj.FoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var FoldCard;
        (function (FoldCard) {
            var Card_2UI = /** @class */ (function (_super) {
                __extends(Card_2UI, _super);
                function Card_2UI() {
                    return _super.call(this) || this;
                }
                Card_2UI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.FoldCard.Card_2UI.uiView);
                };
                Card_2UI.uiView = { "type": "View", "props": { "width": 44, "name": "2", "height": 40 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_bg", "skin": "card/2/1.png", "scaleY": 0.7, "scaleX": 0.7 } }, { "type": "Image", "props": { "visible": false, "var": "_back", "skin": "card/4/bg_2.png", "scaleY": 0.7, "scaleX": 0.7 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 44, "visible": false, "var": "_mask", "skin": "card/mask.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "height": 38, "alpha": 0.7 } }] };
                return Card_2UI;
            }(View));
            FoldCard.Card_2UI = Card_2UI;
        })(FoldCard = mj.FoldCard || (mj.FoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var FoldCard;
        (function (FoldCard) {
            var Card_3UI = /** @class */ (function (_super) {
                __extends(Card_3UI, _super);
                function Card_3UI() {
                    return _super.call(this) || this;
                }
                Card_3UI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.FoldCard.Card_3UI.uiView);
                };
                Card_3UI.uiView = { "type": "View", "props": { "width": 34, "name": "3", "height": 52 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_bg", "skin": "card/3/1.png", "scaleY": 0.7, "scaleX": 0.7 } }, { "type": "Image", "props": { "visible": false, "var": "_back", "skin": "card/1/bg_1.png", "scaleY": 0.7, "scaleX": 0.7 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 34, "visible": false, "var": "_mask", "skin": "card/mask.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "height": 49, "alpha": 0.7 } }] };
                return Card_3UI;
            }(View));
            FoldCard.Card_3UI = Card_3UI;
        })(FoldCard = mj.FoldCard || (mj.FoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var FoldCard;
        (function (FoldCard) {
            var Card_4UI = /** @class */ (function (_super) {
                __extends(Card_4UI, _super);
                function Card_4UI() {
                    return _super.call(this) || this;
                }
                Card_4UI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.FoldCard.Card_4UI.uiView);
                };
                Card_4UI.uiView = { "type": "View", "props": { "width": 44, "name": "4", "height": 40 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_bg", "skin": "card/4/1.png", "scaleY": 0.7, "scaleX": 0.7 } }, { "type": "Image", "props": { "visible": false, "var": "_back", "skin": "card/4/bg_2.png", "scaleY": 0.7, "scaleX": 0.7 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 44, "visible": false, "var": "_mask", "skin": "card/mask.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "height": 38, "alpha": 0.7 } }] };
                return Card_4UI;
            }(View));
            FoldCard.Card_4UI = Card_4UI;
        })(FoldCard = mj.FoldCard || (mj.FoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var FoldCard;
        (function (FoldCard) {
            var FoldCardAllUI = /** @class */ (function (_super) {
                __extends(FoldCardAllUI, _super);
                function FoldCardAllUI() {
                    return _super.call(this) || this;
                }
                FoldCardAllUI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.FoldCard.Card_1UI", ui.mj.FoldCard.Card_1UI);
                    View.regComponent("ui.mj.TimeLimitUI", ui.mj.TimeLimitUI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.FoldCard.FoldCardAllUI.uiView);
                };
                FoldCardAllUI.uiView = { "type": "View", "props": { "width": 600, "height": 262 }, "child": [{ "type": "Card_1", "props": { "y": 3, "x": -8, "var": "card_1", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 3, "x": 26, "var": "card_2", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 3, "x": 60, "var": "card_3", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 3, "x": 94, "var": "card_4", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 3, "x": 128, "var": "card_5", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 3, "x": 162, "var": "card_6", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 3, "x": 196, "var": "card_7", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 3, "x": 230, "var": "card_8", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 3, "x": 264, "var": "card_9", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 3, "x": 298, "var": "card_10", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 3, "x": 332, "var": "card_11", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 3, "x": 366, "var": "card_12", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 3, "x": 400, "var": "card_13", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 3, "x": 434, "var": "card_14", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 3, "x": 468, "var": "card_15", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 3, "x": 502, "var": "card_16", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 3, "x": 536, "var": "card_17", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 3, "x": 570, "var": "card_18", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 44, "x": -8, "var": "card_19", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 44, "x": 26, "var": "card_20", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 44, "x": 60, "var": "card_21", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 44, "x": 94, "var": "card_22", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 44, "x": 128, "var": "card_23", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 44, "x": 162, "var": "card_24", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 44, "x": 196, "var": "card_25", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 44, "x": 366, "var": "card_26", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 44, "x": 400, "var": "card_27", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 44, "x": 434, "var": "card_28", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 44, "x": 468, "var": "card_29", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 44, "x": 502, "var": "card_30", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 44, "x": 536, "var": "card_31", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 44, "x": 570, "var": "card_32", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 85, "x": -8, "var": "card_33", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 85, "x": 26, "var": "card_34", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 85, "x": 60, "var": "card_35", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 85, "x": 94, "var": "card_36", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 85, "x": 128, "var": "card_37", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 85, "x": 162, "var": "card_38", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 85, "x": 196, "var": "card_39", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 85, "x": 366, "var": "card_40", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 85, "x": 400, "var": "card_41", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 85, "x": 434, "var": "card_42", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 85, "x": 468, "var": "card_43", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 85, "x": 502, "var": "card_44", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 85, "x": 536, "var": "card_45", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 85, "x": 570, "var": "card_46", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 126, "x": -8, "var": "card_47", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 126, "x": 26, "var": "card_48", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 126, "x": 60, "var": "card_49", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 126, "x": 94, "var": "card_50", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 126, "x": 128, "var": "card_51", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 126, "x": 162, "var": "card_52", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 126, "x": 196, "var": "card_53", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 126, "x": 366, "var": "card_54", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 126, "x": 400, "var": "card_55", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "TimeLimit", "props": { "y": 45, "x": 234, "visible": false, "runtime": "ui.mj.TimeLimitUI" } }, { "type": "Card_1", "props": { "y": 126, "x": 434, "var": "card_56", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 126, "x": 468, "var": "card_57", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 126, "x": 502, "var": "card_58", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 126, "x": 536, "var": "card_59", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 126, "x": 570, "var": "card_60", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 167, "x": -8, "var": "card_61", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 167, "x": 26, "var": "card_62", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 167, "x": 60, "var": "card_63", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 167, "x": 94, "var": "card_64", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 167, "x": 128, "var": "card_65", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 167, "x": 162, "var": "card_66", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 167, "x": 196, "var": "card_67", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 167, "x": 230, "var": "card_68", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 167, "x": 264, "var": "card_69", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 167, "x": 298, "var": "card_70", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 167, "x": 332, "var": "card_71", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 167, "x": 366, "var": "card_72", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 167, "x": 400, "var": "card_73", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 167, "x": 434, "var": "card_74", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 167, "x": 468, "var": "card_75", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 167, "x": 502, "var": "card_76", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 167, "x": 536, "var": "card_77", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 167, "x": 570, "var": "card_78", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 208, "x": -8, "var": "card_79", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 208, "x": 26, "var": "card_80", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 208, "x": 60, "var": "card_81", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 208, "x": 94, "var": "card_82", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 208, "x": 128, "var": "card_83", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 208, "x": 162, "var": "card_84", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 208, "x": 196, "var": "card_85", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 208, "x": 230, "var": "card_86", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 208, "x": 264, "var": "card_87", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 208, "x": 298, "var": "card_88", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 208, "x": 332, "var": "card_89", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 208, "x": 366, "var": "card_90", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 208, "x": 400, "var": "card_91", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 208, "x": 434, "var": "card_92", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 208, "x": 468, "var": "card_93", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 208, "x": 502, "var": "card_94", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 208, "x": 536, "var": "card_95", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 208, "x": 570, "var": "card_96", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 249, "x": -8, "var": "card_97", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 249, "x": 26, "var": "card_98", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 249, "x": 60, "var": "card_99", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 249, "x": 94, "var": "card_100", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 249, "x": 128, "var": "card_101", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 249, "x": 162, "var": "card_102", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 249, "x": 196, "var": "card_103", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 249, "x": 230, "var": "card_104", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 249, "x": 264, "var": "card_105", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 249, "x": 298, "var": "card_106", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 249, "x": 332, "var": "card_107", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 249, "x": 366, "var": "card_108", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 249, "x": 400, "var": "card_109", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 249, "x": 434, "var": "card_110", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 249, "x": 468, "var": "card_111", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 249, "x": 502, "var": "card_112", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 249, "x": 536, "var": "card_113", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 249, "x": 570, "var": "card_114", "runtime": "ui.mj.FoldCard.Card_1UI" } }] };
                return FoldCardAllUI;
            }(View));
            FoldCard.FoldCardAllUI = FoldCardAllUI;
        })(FoldCard = mj.FoldCard || (mj.FoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var FoldCard;
        (function (FoldCard) {
            var FoldCard_1UI = /** @class */ (function (_super) {
                __extends(FoldCard_1UI, _super);
                function FoldCard_1UI() {
                    return _super.call(this) || this;
                }
                FoldCard_1UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.FoldCard.Card_1UI", ui.mj.FoldCard.Card_1UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.FoldCard.FoldCard_1UI.uiView);
                };
                FoldCard_1UI.uiView = { "type": "View", "props": { "width": 393, "height": 172 }, "child": [{ "type": "Card_1", "props": { "y": 0, "x": 170, "var": "card_6", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 136, "var": "card_5", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 102, "var": "card_4", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 68, "var": "card_3", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 34, "var": "card_2", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 0, "var": "card_1", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 40, "x": 170, "var": "card_12", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 40, "x": 136, "var": "card_11", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 40, "x": 102, "var": "card_10", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 40, "x": 68, "var": "card_9", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 40, "x": 34, "var": "card_8", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 40, "x": 0, "var": "card_7", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 80, "x": 170, "var": "card_18", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 80, "x": 136, "var": "card_17", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 80, "x": 102, "var": "card_16", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 80, "x": 68, "var": "card_15", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 80, "x": 34, "var": "card_14", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 80, "x": 0, "var": "card_13", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 170, "var": "card_24", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 136, "var": "card_23", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 102, "var": "card_22", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 68, "var": "card_21", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 34, "var": "card_20", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 0, "var": "card_19", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 374, "var": "card_30", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 340, "var": "card_29", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 306, "var": "card_28", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 272, "var": "card_27", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 238, "var": "card_26", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 204, "var": "card_25", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 476, "var": "card_33", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 442, "var": "card_32", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 408, "var": "card_31", "runtime": "ui.mj.FoldCard.Card_1UI" } }] };
                return FoldCard_1UI;
            }(View));
            FoldCard.FoldCard_1UI = FoldCard_1UI;
        })(FoldCard = mj.FoldCard || (mj.FoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var FoldCard;
        (function (FoldCard) {
            var FoldCard_2UI = /** @class */ (function (_super) {
                __extends(FoldCard_2UI, _super);
                function FoldCard_2UI() {
                    return _super.call(this) || this;
                }
                FoldCard_2UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.FoldCard.Card_2UI", ui.mj.FoldCard.Card_2UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.FoldCard.FoldCard_2UI.uiView);
                };
                FoldCard_2UI.uiView = { "type": "View", "props": { "width": 177, "height": 360 }, "child": [{ "type": "Card_2", "props": { "y": 173, "x": 0, "var": "card_6", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 202, "x": 0, "var": "card_5", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 231, "x": 0, "var": "card_4", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 260, "x": 0, "var": "card_3", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 289, "x": 0, "var": "card_2", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 318, "x": 0, "var": "card_1", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 173, "x": 44, "var": "card_12", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 202, "x": 44, "var": "card_11", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 231, "x": 44, "var": "card_10", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 260, "x": 44, "var": "card_9", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 289, "x": 44, "var": "card_8", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 318, "x": 44, "var": "card_7", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 173, "x": 88, "var": "card_18", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 202, "x": 88, "var": "card_17", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 231, "x": 88, "var": "card_16", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 260, "x": 88, "var": "card_15", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 289, "x": 88, "var": "card_14", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 318, "x": 88, "var": "card_13", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": -89, "x": 132, "var": "card_33", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": -60, "x": 132, "var": "card_32", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": -31, "x": 132, "var": "card_31", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": -2, "x": 132, "var": "card_30", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 27, "x": 132, "var": "card_29", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 56, "x": 132, "var": "card_28", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 85, "x": 132, "var": "card_27", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 114, "x": 132, "var": "card_26", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 143, "x": 132, "var": "card_25", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 173, "x": 132, "var": "card_24", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 202, "x": 132, "var": "card_23", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 231, "x": 132, "var": "card_22", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 260, "x": 132, "var": "card_21", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 289, "x": 132, "var": "card_20", "runtime": "ui.mj.FoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 318, "x": 132, "var": "card_19", "runtime": "ui.mj.FoldCard.Card_2UI" } }] };
                return FoldCard_2UI;
            }(View));
            FoldCard.FoldCard_2UI = FoldCard_2UI;
        })(FoldCard = mj.FoldCard || (mj.FoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var FoldCard;
        (function (FoldCard) {
            var FoldCard_3UI = /** @class */ (function (_super) {
                __extends(FoldCard_3UI, _super);
                function FoldCard_3UI() {
                    return _super.call(this) || this;
                }
                FoldCard_3UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.FoldCard.Card_3UI", ui.mj.FoldCard.Card_3UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.FoldCard.FoldCard_3UI.uiView);
                };
                FoldCard_3UI.uiView = { "type": "View", "props": { "width": 393, "height": 172 }, "child": [{ "type": "Card_3", "props": { "y": 0, "x": -15, "var": "card_30", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 19, "var": "card_29", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 53, "var": "card_28", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 87, "var": "card_27", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 121, "var": "card_26", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 155, "var": "card_25", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 189, "var": "card_24", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 223, "var": "card_23", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 257, "var": "card_22", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 291, "var": "card_21", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 325, "var": "card_20", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 359, "var": "card_19", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 40, "x": 189, "var": "card_18", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 40, "x": 223, "var": "card_17", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 40, "x": 257, "var": "card_16", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 40, "x": 291, "var": "card_15", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 40, "x": 325, "var": "card_14", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 40, "x": 359, "var": "card_13", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 80, "x": 189, "var": "card_12", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 80, "x": 223, "var": "card_11", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 80, "x": 257, "var": "card_10", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 80, "x": 291, "var": "card_9", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 80, "x": 325, "var": "card_8", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 80, "x": 359, "var": "card_7", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 120, "x": 189, "var": "card_6", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 120, "x": 223, "var": "card_5", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 120, "x": 257, "var": "card_4", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 120, "x": 291, "var": "card_3", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 120, "x": 325, "var": "card_2", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 120, "x": 359, "var": "card_1", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": -117, "var": "card_33", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": -83, "var": "card_32", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": -49, "var": "card_31", "runtime": "ui.mj.FoldCard.Card_3UI" } }] };
                return FoldCard_3UI;
            }(View));
            FoldCard.FoldCard_3UI = FoldCard_3UI;
        })(FoldCard = mj.FoldCard || (mj.FoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var FoldCard;
        (function (FoldCard) {
            var FoldCard_4UI = /** @class */ (function (_super) {
                __extends(FoldCard_4UI, _super);
                function FoldCard_4UI() {
                    return _super.call(this) || this;
                }
                FoldCard_4UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.FoldCard.Card_4UI", ui.mj.FoldCard.Card_4UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.FoldCard.FoldCard_4UI.uiView);
                };
                FoldCard_4UI.uiView = { "type": "View", "props": { "width": 178, "height": 361 }, "child": [{ "type": "Card_4", "props": { "y": 0, "x": 44, "var": "card_13", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 29, "x": 44, "var": "card_14", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 58, "x": 44, "var": "card_15", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 86, "x": 44, "var": "card_16", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 115, "x": 44, "var": "card_17", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 143, "x": 44, "var": "card_18", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 0, "x": 0, "var": "card_19", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 29, "x": 0, "var": "card_20", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 58, "x": 0, "var": "card_21", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 86, "x": 0, "var": "card_22", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 115, "x": 0, "var": "card_23", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 143, "x": 0, "var": "card_24", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 0, "x": 132, "var": "card_1", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 29, "x": 132, "var": "card_2", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 58, "x": 132, "var": "card_3", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 86, "x": 132, "var": "card_4", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 115, "x": 132, "var": "card_5", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 143, "x": 132, "var": "card_6", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 0, "x": 88, "var": "card_7", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 29, "x": 88, "var": "card_8", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 58, "x": 88, "var": "card_9", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 86, "x": 88, "var": "card_10", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 115, "x": 88, "var": "card_11", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 143, "x": 88, "var": "card_12", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 173, "x": 0, "var": "card_25", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 202, "x": 0, "var": "card_26", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 231, "x": 0, "var": "card_27", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 259, "x": 0, "var": "card_28", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 288, "x": 0, "var": "card_29", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 316, "x": 0, "var": "card_30", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 345, "x": 1, "var": "card_31", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 374, "x": 1, "var": "card_32", "runtime": "ui.mj.FoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 402, "x": 1, "var": "card_33", "runtime": "ui.mj.FoldCard.Card_4UI" } }] };
                return FoldCard_4UI;
            }(View));
            FoldCard.FoldCard_4UI = FoldCard_4UI;
        })(FoldCard = mj.FoldCard || (mj.FoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var FoldCard;
        (function (FoldCard) {
            var FoldCard_5UI = /** @class */ (function (_super) {
                __extends(FoldCard_5UI, _super);
                function FoldCard_5UI() {
                    return _super.call(this) || this;
                }
                FoldCard_5UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.FoldCard.Card_1UI", ui.mj.FoldCard.Card_1UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.FoldCard.FoldCard_5UI.uiView);
                };
                FoldCard_5UI.uiView = { "type": "View", "props": { "width": 452, "height": 172 }, "child": [{ "type": "Card_1", "props": { "y": 0, "x": 0, "var": "card_1", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 34, "var": "card_2", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 68, "var": "card_3", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 102, "var": "card_4", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 136, "var": "card_5", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 170, "var": "card_6", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 204, "var": "card_7", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 238, "var": "card_8", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 272, "var": "card_9", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 306, "var": "card_10", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 340, "var": "card_11", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 374, "var": "card_12", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 40, "x": 0, "var": "card_13", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 40, "x": 34, "var": "card_14", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 40, "x": 68, "var": "card_15", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 40, "x": 102, "var": "card_16", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 40, "x": 136, "var": "card_17", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 40, "x": 170, "var": "card_18", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 40, "x": 204, "var": "card_19", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 40, "x": 238, "var": "card_20", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 40, "x": 272, "var": "card_21", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 40, "x": 306, "var": "card_22", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 40, "x": 340, "var": "card_23", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 40, "x": 374, "var": "card_24", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 80, "x": 0, "var": "card_25", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 80, "x": 34, "var": "card_26", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 80, "x": 68, "var": "card_27", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 80, "x": 102, "var": "card_28", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 80, "x": 136, "var": "card_29", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 80, "x": 170, "var": "card_30", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 80, "x": 204, "var": "card_31", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 80, "x": 238, "var": "card_32", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 80, "x": 272, "var": "card_33", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 80, "x": 306, "var": "card_34", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 80, "x": 340, "var": "card_35", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 80, "x": 374, "var": "card_36", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 0, "var": "card_37", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 34, "var": "card_38", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 68, "var": "card_39", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 102, "var": "card_40", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 136, "var": "card_41", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 170, "var": "card_42", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 204, "var": "card_43", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 238, "var": "card_44", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 272, "var": "card_45", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 306, "var": "card_46", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 340, "var": "card_47", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 120, "x": 374, "var": "card_48", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": -11, "x": 0, "var": "card_49", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": -11, "x": 34, "var": "card_50", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": -11, "x": 68, "var": "card_51", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": -11, "x": 102, "var": "card_52", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": -11, "x": 136, "var": "card_53", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": -11, "x": 170, "var": "card_54", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": -11, "x": 204, "var": "card_55", "runtime": "ui.mj.FoldCard.Card_1UI" } }] };
                return FoldCard_5UI;
            }(View));
            FoldCard.FoldCard_5UI = FoldCard_5UI;
        })(FoldCard = mj.FoldCard || (mj.FoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var FoldCard;
        (function (FoldCard) {
            var FoldCard_6UI = /** @class */ (function (_super) {
                __extends(FoldCard_6UI, _super);
                function FoldCard_6UI() {
                    return _super.call(this) || this;
                }
                FoldCard_6UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.FoldCard.Card_3UI", ui.mj.FoldCard.Card_3UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.FoldCard.FoldCard_6UI.uiView);
                };
                FoldCard_6UI.uiView = { "type": "View", "props": { "width": 476, "height": 172 }, "child": [{ "type": "Card_3", "props": { "y": 0, "x": 442, "var": "card_37", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 408, "var": "card_38", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 374, "var": "card_39", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 340, "var": "card_40", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 306, "var": "card_41", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 272, "var": "card_42", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 238, "var": "card_43", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 204, "var": "card_44", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 170, "var": "card_45", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 136, "var": "card_46", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 102, "var": "card_47", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 68, "var": "card_48", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 40, "x": 442, "var": "card_25", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 40, "x": 408, "var": "card_26", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 40, "x": 374, "var": "card_27", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 40, "x": 340, "var": "card_28", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 40, "x": 306, "var": "card_29", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 40, "x": 272, "var": "card_30", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 40, "x": 238, "var": "card_31", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 40, "x": 204, "var": "card_32", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 40, "x": 170, "var": "card_33", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 40, "x": 136, "var": "card_34", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 40, "x": 102, "var": "card_35", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 40, "x": 68, "var": "card_36", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 80, "x": 442, "var": "card_13", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 80, "x": 408, "var": "card_14", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 80, "x": 374, "var": "card_15", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 80, "x": 340, "var": "card_16", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 80, "x": 306, "var": "card_17", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 80, "x": 272, "var": "card_18", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 80, "x": 238, "var": "card_19", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 80, "x": 204, "var": "card_20", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 80, "x": 170, "var": "card_21", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 80, "x": 136, "var": "card_22", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 80, "x": 102, "var": "card_23", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 80, "x": 68, "var": "card_24", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 120, "x": 442, "var": "card_1", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 120, "x": 408, "var": "card_2", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 120, "x": 374, "var": "card_3", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 120, "x": 340, "var": "card_4", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 120, "x": 306, "var": "card_5", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 120, "x": 272, "var": "card_6", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 120, "x": 238, "var": "card_7", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 120, "x": 204, "var": "card_8", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 120, "x": 170, "var": "card_9", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 120, "x": 136, "var": "card_10", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 120, "x": 102, "var": "card_11", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 120, "x": 68, "var": "card_12", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 107, "x": 374, "var": "card_51", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 107, "x": 340, "var": "card_52", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 107, "x": 306, "var": "card_53", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 107, "x": 272, "var": "card_54", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 107, "x": 239, "width": 33, "var": "card_55", "height": 50, "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 107, "x": 408, "var": "card_50", "runtime": "ui.mj.FoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 107, "x": 442, "var": "card_49", "runtime": "ui.mj.FoldCard.Card_3UI" } }] };
                return FoldCard_6UI;
            }(View));
            FoldCard.FoldCard_6UI = FoldCard_6UI;
        })(FoldCard = mj.FoldCard || (mj.FoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var GameEndUI = /** @class */ (function (_super) {
            __extends(GameEndUI, _super);
            function GameEndUI() {
                return _super.call(this) || this;
            }
            GameEndUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.mj.GameEndUI.uiView);
            };
            GameEndUI.uiView = { "type": "View", "props": { "width": 865, "height": 529 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "alpha": 0.7 } }, { "type": "Box", "props": { "var": "_box", "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "var": "_bg", "skin": "gameEnd/bg.png" } }, { "type": "Image", "props": { "y": 8, "x": 389, "visible": false, "var": "_liuju", "skin": "gameEnd/liuju.png" } }, { "type": "Box", "props": { "y": 19, "x": 50, "width": 882, "var": "_itemBox", "height": 516 } }, { "type": "BaseButton", "props": { "y": 529, "var": "_next", "stateNum": 2, "skin": "table/next_round.png", "centerX": 315.5 } }, { "type": "BaseButton", "props": { "y": 529, "var": "_back_desk", "stateNum": 1, "skin": "table/btnBackDesk.png", "centerX": -278.5 } }] }] };
            return GameEndUI;
        }(View));
        mj.GameEndUI = GameEndUI;
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var GameEndLoseItemUI = /** @class */ (function (_super) {
            __extends(GameEndLoseItemUI, _super);
            function GameEndLoseItemUI() {
                return _super.call(this) || this;
            }
            GameEndLoseItemUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.mj.GameEndLoseItemUI.uiView);
            };
            GameEndLoseItemUI.uiView = { "type": "View", "props": { "width": 862, "height": 112 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "gameEnd/loseItem.png", "sizeGrid": "20,20,28,20", "height": 110 } }, { "type": "Label", "props": { "y": 11, "x": 152, "var": "_name", "text": "label", "fontSize": 24, "color": "#2B4C55" } }, { "type": "Panel", "props": { "y": 87, "x": 154, "width": 669, "var": "_detail", "height": 22 } }, { "type": "Box", "props": { "y": 10, "x": 18, "var": "_avatar" } }, { "type": "Label", "props": { "x": 792, "var": "_score", "text": "0", "font": "font_num_3", "centerY": 0, "anchorX": 0.5, "align": "right" } }, { "type": "Image", "props": { "y": 67, "x": 83, "var": "_pao", "skin": "card/tag_0.png" } }, { "type": "Image", "props": { "y": 4, "x": 74, "visible": false, "var": "_zhuang", "skin": "table/table_icon_zhuang.png" } }, { "type": "Box", "props": { "y": 38, "x": 154, "width": 672, "var": "_card", "height": 46 } }] };
            return GameEndLoseItemUI;
        }(View));
        mj.GameEndLoseItemUI = GameEndLoseItemUI;
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var GameEndWinItenUI = /** @class */ (function (_super) {
            __extends(GameEndWinItenUI, _super);
            function GameEndWinItenUI() {
                return _super.call(this) || this;
            }
            GameEndWinItenUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.mj.GameEndWinItenUI.uiView);
            };
            GameEndWinItenUI.uiView = { "type": "View", "props": { "width": 862, "height": 125 }, "child": [{ "type": "Box", "props": { "y": 15, "x": 19, "var": "_avatar" } }, { "type": "Label", "props": { "y": 16, "x": 157, "var": "_name", "text": "label", "fontSize": 24, "color": "#2B4C55" } }, { "type": "Box", "props": { "y": 45, "x": 152, "width": 672, "var": "_card", "height": 46 } }, { "type": "Panel", "props": { "y": 98, "x": 154, "width": 670, "var": "_detail", "height": 22 } }, { "type": "Label", "props": { "y": 54, "x": 792, "var": "_score", "text": "0", "font": "font_num_4", "anchorX": 0.5, "align": "right" } }, { "type": "Image", "props": { "y": 123, "x": 33, "var": "_line", "skin": "gameEnd/line.png" } }, { "type": "Image", "props": { "y": 80, "x": 87, "var": "_pao", "skin": "card/tag_0.png" } }, { "type": "Image", "props": { "y": 14, "x": 84, "visible": false, "var": "_zhuang", "skin": "table/table_icon_zhuang.png" } }, { "type": "Image", "props": { "y": 20, "x": 415, "var": "_hu", "skin": "gameEnd/zimo.png", "scaleY": 0.6, "scaleX": 0.6 } }] };
            return GameEndWinItenUI;
        }(View));
        mj.GameEndWinItenUI = GameEndWinItenUI;
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HandCard;
        (function (HandCard) {
            var Card_1UI = /** @class */ (function (_super) {
                __extends(Card_1UI, _super);
                function Card_1UI() {
                    return _super.call(this) || this;
                }
                Card_1UI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HandCard.Card_1UI.uiView);
                };
                Card_1UI.uiView = { "type": "View", "props": { "width": 72, "name": "5", "height": 104 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 70, "var": "_bg", "skin": "card/5/1.png", "scaleY": 1, "scaleX": 1 }, "child": [{ "type": "Image", "props": { "visible": false, "var": "_god", "skin": "card/big.png" } }, { "type": "Image", "props": { "y": 0, "x": 0, "visible": false, "var": "_mask", "top": 0, "skin": "card/enable.png", "sizeGrid": "5,5,5,5", "right": 0, "left": 0, "height": 103, "alpha": 0.6 } }] }, { "type": "Image", "props": { "y": 0, "x": 0, "var": "_back", "skin": "card/5/bg_5.png", "scaleY": 1, "scaleX": 1 } }, { "type": "Image", "props": { "y": -29, "x": 20, "visible": false, "var": "_ting", "skin": "ting/arrow.png" } }] };
                return Card_1UI;
            }(View));
            HandCard.Card_1UI = Card_1UI;
        })(HandCard = mj.HandCard || (mj.HandCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HandCard;
        (function (HandCard) {
            var Card_2UI = /** @class */ (function (_super) {
                __extends(Card_2UI, _super);
                function Card_2UI() {
                    return _super.call(this) || this;
                }
                Card_2UI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HandCard.Card_2UI.uiView);
                };
                Card_2UI.uiView = { "type": "View", "props": { "width": 20, "name": "2", "height": 45 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_bg", "skin": "card/2/1.png", "scaleY": 0.7, "scaleX": 0.7 }, "child": [{ "type": "Image", "props": { "visible": false, "var": "_god", "skin": "card/small_left.png" } }] }, { "type": "Image", "props": { "y": 0, "x": 20, "var": "_back", "skin": "card/2/bg_2.png" } }] };
                return Card_2UI;
            }(View));
            HandCard.Card_2UI = Card_2UI;
        })(HandCard = mj.HandCard || (mj.HandCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HandCard;
        (function (HandCard) {
            var Card_3UI = /** @class */ (function (_super) {
                __extends(Card_3UI, _super);
                function Card_3UI() {
                    return _super.call(this) || this;
                }
                Card_3UI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HandCard.Card_3UI.uiView);
                };
                Card_3UI.uiView = { "type": "View", "props": { "width": 32, "name": "3", "height": 48 }, "child": [{ "type": "Image", "props": { "var": "_bg", "skin": "card/3/1.png", "scaleY": 0.7, "scaleX": 0.7 }, "child": [{ "type": "Image", "props": { "visible": false, "var": "_god", "skin": "card/small_top.png" } }] }, { "type": "Image", "props": { "y": 0, "x": 0, "var": "_back", "skin": "card/3/bg_3.png", "scaleY": 0.7, "scaleX": 0.7 } }] };
                return Card_3UI;
            }(View));
            HandCard.Card_3UI = Card_3UI;
        })(HandCard = mj.HandCard || (mj.HandCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HandCard;
        (function (HandCard) {
            var Card_4UI = /** @class */ (function (_super) {
                __extends(Card_4UI, _super);
                function Card_4UI() {
                    return _super.call(this) || this;
                }
                Card_4UI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HandCard.Card_4UI.uiView);
                };
                Card_4UI.uiView = { "type": "View", "props": { "width": 22, "name": "4", "height": 53 }, "child": [{ "type": "Image", "props": { "y": 0, "x": -23, "width": 65, "var": "_bg", "skin": "card/4/1.png", "scaleY": 0.7, "scaleX": 0.7, "height": 60 }, "child": [{ "type": "Image", "props": { "visible": false, "var": "_god", "skin": "card/small_right.png" } }] }, { "type": "Image", "props": { "y": 0, "x": 2, "var": "_back", "skin": "card/2/bg_2.png", "scaleY": 1, "scaleX": -1 } }] };
                return Card_4UI;
            }(View));
            HandCard.Card_4UI = Card_4UI;
        })(HandCard = mj.HandCard || (mj.HandCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HandCard;
        (function (HandCard) {
            var HandCard_1UI = /** @class */ (function (_super) {
                __extends(HandCard_1UI, _super);
                function HandCard_1UI() {
                    return _super.call(this) || this;
                }
                HandCard_1UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.HandCard.Card_1UI", ui.mj.HandCard.Card_1UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HandCard.HandCard_1UI.uiView);
                };
                HandCard_1UI.uiView = { "type": "View", "props": { "width": 946, "height": 103 }, "child": [{ "type": "Card_1", "props": { "y": 0, "x": 878, "var": "_catch", "runtime": "ui.mj.HandCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 802, "var": "card_1", "runtime": "ui.mj.HandCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 734, "var": "card_2", "runtime": "ui.mj.HandCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 667, "var": "card_3", "runtime": "ui.mj.HandCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 600, "var": "card_4", "runtime": "ui.mj.HandCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 533, "var": "card_5", "runtime": "ui.mj.HandCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 467, "var": "card_6", "runtime": "ui.mj.HandCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 400, "var": "card_7", "runtime": "ui.mj.HandCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 334, "var": "card_8", "runtime": "ui.mj.HandCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 269, "var": "card_9", "runtime": "ui.mj.HandCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 204, "var": "card_10", "runtime": "ui.mj.HandCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 136, "var": "card_11", "runtime": "ui.mj.HandCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 68, "var": "card_12", "runtime": "ui.mj.HandCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 0, "var": "card_13", "runtime": "ui.mj.HandCard.Card_1UI" } }] };
                return HandCard_1UI;
            }(View));
            HandCard.HandCard_1UI = HandCard_1UI;
        })(HandCard = mj.HandCard || (mj.HandCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HandCard;
        (function (HandCard) {
            var HandCard_2UI = /** @class */ (function (_super) {
                __extends(HandCard_2UI, _super);
                function HandCard_2UI() {
                    return _super.call(this) || this;
                }
                HandCard_2UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.HandCard.Card_2UI", ui.mj.HandCard.Card_2UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HandCard.HandCard_2UI.uiView);
                };
                HandCard_2UI.uiView = { "type": "View", "props": { "width": 49, "height": 454 }, "child": [{ "type": "Card_2", "props": { "y": 0, "x": 0, "var": "_catch", "runtime": "ui.mj.HandCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 40, "x": 0, "var": "card_1", "runtime": "ui.mj.HandCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 70, "x": 0, "var": "card_2", "runtime": "ui.mj.HandCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 100, "x": 0, "var": "card_3", "runtime": "ui.mj.HandCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 130, "x": 0, "var": "card_4", "runtime": "ui.mj.HandCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 160, "x": 0, "var": "card_5", "runtime": "ui.mj.HandCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 190, "x": 0, "var": "card_6", "runtime": "ui.mj.HandCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 220, "x": 0, "var": "card_7", "runtime": "ui.mj.HandCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 250, "x": 0, "var": "card_8", "runtime": "ui.mj.HandCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 280, "x": 0, "var": "card_9", "runtime": "ui.mj.HandCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 310, "x": 0, "var": "card_10", "runtime": "ui.mj.HandCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 340, "x": 0, "var": "card_11", "runtime": "ui.mj.HandCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 370, "x": 0, "var": "card_12", "runtime": "ui.mj.HandCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 400, "x": 0, "var": "card_13", "runtime": "ui.mj.HandCard.Card_2UI" } }] };
                return HandCard_2UI;
            }(View));
            HandCard.HandCard_2UI = HandCard_2UI;
        })(HandCard = mj.HandCard || (mj.HandCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HandCard;
        (function (HandCard) {
            var HandCard_3UI = /** @class */ (function (_super) {
                __extends(HandCard_3UI, _super);
                function HandCard_3UI() {
                    return _super.call(this) || this;
                }
                HandCard_3UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.HandCard.Card_3UI", ui.mj.HandCard.Card_3UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HandCard.HandCard_3UI.uiView);
                };
                HandCard_3UI.uiView = { "type": "View", "props": { "width": 502, "height": 54 }, "child": [{ "type": "Card_3", "props": { "var": "_catch", "runtime": "ui.mj.HandCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 50, "var": "card_1", "runtime": "ui.mj.HandCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 84, "var": "card_2", "runtime": "ui.mj.HandCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 118, "var": "card_3", "runtime": "ui.mj.HandCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 152, "var": "card_4", "runtime": "ui.mj.HandCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 186, "var": "card_5", "runtime": "ui.mj.HandCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 220, "var": "card_6", "runtime": "ui.mj.HandCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 254, "var": "card_7", "runtime": "ui.mj.HandCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 288, "var": "card_8", "runtime": "ui.mj.HandCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 322, "var": "card_9", "runtime": "ui.mj.HandCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 356, "var": "card_10", "runtime": "ui.mj.HandCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 390, "var": "card_11", "runtime": "ui.mj.HandCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 424, "var": "card_12", "runtime": "ui.mj.HandCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 0, "x": 458, "var": "card_13", "runtime": "ui.mj.HandCard.Card_3UI" } }] };
                return HandCard_3UI;
            }(View));
            HandCard.HandCard_3UI = HandCard_3UI;
        })(HandCard = mj.HandCard || (mj.HandCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HandCard;
        (function (HandCard) {
            var HandCard_4UI = /** @class */ (function (_super) {
                __extends(HandCard_4UI, _super);
                function HandCard_4UI() {
                    return _super.call(this) || this;
                }
                HandCard_4UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.HandCard.Card_4UI", ui.mj.HandCard.Card_4UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HandCard.HandCard_4UI.uiView);
                };
                HandCard_4UI.uiView = { "type": "View", "props": { "width": 25, "height": 424 }, "child": [{ "type": "Card_4", "props": { "y": 0, "x": 0, "var": "_catch", "runtime": "ui.mj.HandCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 40, "x": 0, "var": "card_1", "runtime": "ui.mj.HandCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 70, "x": 0, "var": "card_2", "runtime": "ui.mj.HandCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 100, "x": 0, "var": "card_3", "runtime": "ui.mj.HandCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 130, "x": 0, "var": "card_4", "runtime": "ui.mj.HandCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 160, "x": 0, "var": "card_5", "runtime": "ui.mj.HandCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 190, "x": 0, "var": "card_6", "runtime": "ui.mj.HandCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 220, "x": 0, "var": "card_7", "runtime": "ui.mj.HandCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 250, "x": 0, "var": "card_8", "runtime": "ui.mj.HandCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 280, "x": 0, "var": "card_9", "runtime": "ui.mj.HandCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 310, "x": 0, "var": "card_10", "runtime": "ui.mj.HandCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 340, "x": 0, "var": "card_11", "runtime": "ui.mj.HandCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 370, "x": 0, "var": "card_12", "runtime": "ui.mj.HandCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 400, "x": 0, "var": "card_13", "runtime": "ui.mj.HandCard.Card_4UI" } }] };
                return HandCard_4UI;
            }(View));
            HandCard.HandCard_4UI = HandCard_4UI;
        })(HandCard = mj.HandCard || (mj.HandCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HoldCard;
        (function (HoldCard) {
            var Card_1UI = /** @class */ (function (_super) {
                __extends(Card_1UI, _super);
                function Card_1UI() {
                    return _super.call(this) || this;
                }
                Card_1UI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HoldCard.Card_1UI.uiView);
                };
                Card_1UI.uiView = { "type": "View", "props": { "width": 48, "visible": true, "name": "1", "height": 72 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_bg", "skin": "card/1/1.png", "scaleY": 1, "scaleX": 1 } }, { "type": "Image", "props": { "visible": false, "var": "_back", "skin": "card/1/bg_1.png", "scaleY": 1, "scaleX": 1 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 49, "visible": false, "var": "_mask", "skin": "card/mask.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "height": 70, "alpha": 0.7 } }] };
                return Card_1UI;
            }(View));
            HoldCard.Card_1UI = Card_1UI;
        })(HoldCard = mj.HoldCard || (mj.HoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HoldCard;
        (function (HoldCard) {
            var Card_1_2UI = /** @class */ (function (_super) {
                __extends(Card_1_2UI, _super);
                function Card_1_2UI() {
                    return _super.call(this) || this;
                }
                Card_1_2UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.HoldCard.Card_2UI", ui.mj.HoldCard.Card_2UI);
                    View.regComponent("ui.mj.HoldCard.Card_3UI", ui.mj.HoldCard.Card_3UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HoldCard.Card_1_2UI.uiView);
                };
                Card_1_2UI.uiView = { "type": "View", "props": { "y": 88, "width": 38, "height": 90, "anchorY": 1 }, "child": [{ "type": "Card_2", "props": { "y": 0, "x": 0, "var": "card_3", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 25, "x": 0, "var": "card_2", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_2UI" } }, { "type": "Card_3", "props": { "y": 50, "x": 8, "var": "card_1", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_3UI" } }, { "type": "Card_2", "props": { "y": 16, "x": 0, "var": "card_4", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_2UI" } }] };
                return Card_1_2UI;
            }(View));
            HoldCard.Card_1_2UI = Card_1_2UI;
        })(HoldCard = mj.HoldCard || (mj.HoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HoldCard;
        (function (HoldCard) {
            var Card_1_3UI = /** @class */ (function (_super) {
                __extends(Card_1_3UI, _super);
                function Card_1_3UI() {
                    return _super.call(this) || this;
                }
                Card_1_3UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.HoldCard.Card_3UI", ui.mj.HoldCard.Card_3UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HoldCard.Card_1_3UI.uiView);
                };
                Card_1_3UI.uiView = { "type": "View", "props": { "width": 100, "height": 63, "anchorX": 1 }, "child": [{ "type": "Card_3", "props": { "y": 14, "x": 100, "var": "card_3", "scaleY": 0.7, "scaleX": 0.7, "runtime": "ui.mj.HoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 14, "x": 134, "var": "card_2", "scaleY": 0.7, "scaleX": 0.7, "runtime": "ui.mj.HoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 14, "x": 168, "var": "card_1", "scaleY": 0.7, "scaleX": 0.7, "runtime": "ui.mj.HoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 3, "x": 134, "var": "card_4", "scaleY": 0.7, "scaleX": 0.7, "runtime": "ui.mj.HoldCard.Card_3UI" } }] };
                return Card_1_3UI;
            }(View));
            HoldCard.Card_1_3UI = Card_1_3UI;
        })(HoldCard = mj.HoldCard || (mj.HoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HoldCard;
        (function (HoldCard) {
            var Card_1_4UI = /** @class */ (function (_super) {
                __extends(Card_1_4UI, _super);
                function Card_1_4UI() {
                    return _super.call(this) || this;
                }
                Card_1_4UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.HoldCard.Card_4UI", ui.mj.HoldCard.Card_4UI);
                    View.regComponent("ui.mj.HoldCard.Card_3UI", ui.mj.HoldCard.Card_3UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HoldCard.Card_1_4UI.uiView);
                };
                Card_1_4UI.uiView = { "type": "View", "props": { "width": 36, "skewY": 0, "skewX": 0, "height": 91 }, "child": [{ "type": "Card_4", "props": { "y": 0, "x": 0, "var": "card_1", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 25, "x": 0, "var": "card_2", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_4UI" } }, { "type": "Card_3", "props": { "y": 50, "x": 0, "var": "card_3", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_3UI" } }, { "type": "Card_4", "props": { "y": 16, "x": 0, "var": "card_4", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_4UI" } }] };
                return Card_1_4UI;
            }(View));
            HoldCard.Card_1_4UI = Card_1_4UI;
        })(HoldCard = mj.HoldCard || (mj.HoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HoldCard;
        (function (HoldCard) {
            var Card_2UI = /** @class */ (function (_super) {
                __extends(Card_2UI, _super);
                function Card_2UI() {
                    return _super.call(this) || this;
                }
                Card_2UI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HoldCard.Card_2UI.uiView);
                };
                Card_2UI.uiView = { "type": "View", "props": { "width": 58, "name": "2", "height": 52 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_bg", "skin": "card/2/1.png", "scaleY": 1, "scaleX": 1 } }, { "type": "Image", "props": { "visible": false, "var": "_back", "skin": "card/4/bg_2.png" } }, { "type": "Image", "props": { "y": -1, "x": 0, "width": 63, "visible": false, "var": "_mask", "skin": "card/mask.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "height": 54, "alpha": 0.7 } }] };
                return Card_2UI;
            }(View));
            HoldCard.Card_2UI = Card_2UI;
        })(HoldCard = mj.HoldCard || (mj.HoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HoldCard;
        (function (HoldCard) {
            var Card_2_1UI = /** @class */ (function (_super) {
                __extends(Card_2_1UI, _super);
                function Card_2_1UI() {
                    return _super.call(this) || this;
                }
                Card_2_1UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.HoldCard.Card_1UI", ui.mj.HoldCard.Card_1UI);
                    View.regComponent("ui.mj.HoldCard.Card_4UI", ui.mj.HoldCard.Card_4UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HoldCard.Card_2_1UI.uiView);
                };
                Card_2_1UI.uiView = { "type": "View", "props": { "width": 162, "height": 71 }, "child": [{ "type": "Card_1", "props": { "y": 0, "x": 0, "var": "card_1", "runtime": "ui.mj.HoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 49, "var": "card_2", "runtime": "ui.mj.HoldCard.Card_1UI" } }, { "type": "Card_4", "props": { "y": 16, "x": 98, "var": "card_3", "runtime": "ui.mj.HoldCard.Card_4UI" } }, { "type": "Card_1", "props": { "y": -16, "x": 49, "var": "card_4", "runtime": "ui.mj.HoldCard.Card_1UI" } }] };
                return Card_2_1UI;
            }(View));
            HoldCard.Card_2_1UI = Card_2_1UI;
        })(HoldCard = mj.HoldCard || (mj.HoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HoldCard;
        (function (HoldCard) {
            var Card_2_3UI = /** @class */ (function (_super) {
                __extends(Card_2_3UI, _super);
                function Card_2_3UI() {
                    return _super.call(this) || this;
                }
                Card_2_3UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.HoldCard.Card_3UI", ui.mj.HoldCard.Card_3UI);
                    View.regComponent("ui.mj.HoldCard.Card_4UI", ui.mj.HoldCard.Card_4UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HoldCard.Card_2_3UI.uiView);
                };
                Card_2_3UI.uiView = { "type": "View", "props": { "width": 111, "height": 63, "anchorX": 1 }, "child": [{ "type": "Card_3", "props": { "y": 13, "x": 147, "var": "card_2", "scaleY": 0.7, "scaleX": 0.7, "runtime": "ui.mj.HoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 13, "x": 113, "var": "card_3", "scaleY": 0.7, "scaleX": 0.7, "runtime": "ui.mj.HoldCard.Card_3UI" } }, { "type": "Card_4", "props": { "y": 24, "x": 181, "var": "card_1", "scaleY": 0.7, "scaleX": 0.7, "runtime": "ui.mj.HoldCard.Card_4UI" } }, { "type": "Card_3", "props": { "y": 2, "x": 147, "var": "card_4", "scaleY": 0.7, "scaleX": 0.7, "runtime": "ui.mj.HoldCard.Card_3UI" } }] };
                return Card_2_3UI;
            }(View));
            HoldCard.Card_2_3UI = Card_2_3UI;
        })(HoldCard = mj.HoldCard || (mj.HoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HoldCard;
        (function (HoldCard) {
            var Card_2_4UI = /** @class */ (function (_super) {
                __extends(Card_2_4UI, _super);
                function Card_2_4UI() {
                    return _super.call(this) || this;
                }
                Card_2_4UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.HoldCard.Card_4UI", ui.mj.HoldCard.Card_4UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HoldCard.Card_2_4UI.uiView);
                };
                Card_2_4UI.uiView = { "type": "View", "props": { "width": 36, "height": 81 }, "child": [{ "type": "Card_4", "props": { "y": 0, "x": 0, "var": "card_1", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 25, "x": 0, "var": "card_2", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 50, "x": 0, "var": "card_3", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 16, "x": 0, "var": "card_4", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_4UI" } }] };
                return Card_2_4UI;
            }(View));
            HoldCard.Card_2_4UI = Card_2_4UI;
        })(HoldCard = mj.HoldCard || (mj.HoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HoldCard;
        (function (HoldCard) {
            var Card_3UI = /** @class */ (function (_super) {
                __extends(Card_3UI, _super);
                function Card_3UI() {
                    return _super.call(this) || this;
                }
                Card_3UI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HoldCard.Card_3UI.uiView);
                };
                Card_3UI.uiView = { "type": "View", "props": { "width": 48, "name": "3", "height": 72 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_bg", "skin": "card/3/1.png", "scaleY": 1, "scaleX": 1 } }, { "type": "Image", "props": { "visible": false, "var": "_back", "skin": "card/1/bg_1.png" } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 49, "visible": false, "var": "_mask", "skin": "card/mask.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "height": 70, "alpha": 0.7 } }] };
                return Card_3UI;
            }(View));
            HoldCard.Card_3UI = Card_3UI;
        })(HoldCard = mj.HoldCard || (mj.HoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HoldCard;
        (function (HoldCard) {
            var Card_3_1UI = /** @class */ (function (_super) {
                __extends(Card_3_1UI, _super);
                function Card_3_1UI() {
                    return _super.call(this) || this;
                }
                Card_3_1UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.HoldCard.Card_1UI", ui.mj.HoldCard.Card_1UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HoldCard.Card_3_1UI.uiView);
                };
                Card_3_1UI.uiView = { "type": "View", "props": { "width": 148, "height": 72 }, "child": [{ "type": "Card_1", "props": { "y": 0, "x": 0, "var": "card_1", "runtime": "ui.mj.HoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 49, "var": "card_2", "runtime": "ui.mj.HoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 0, "x": 98, "var": "card_3", "runtime": "ui.mj.HoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": -16, "x": 49, "var": "card_4", "runtime": "ui.mj.HoldCard.Card_1UI" } }] };
                return Card_3_1UI;
            }(View));
            HoldCard.Card_3_1UI = Card_3_1UI;
        })(HoldCard = mj.HoldCard || (mj.HoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HoldCard;
        (function (HoldCard) {
            var Card_3_2UI = /** @class */ (function (_super) {
                __extends(Card_3_2UI, _super);
                function Card_3_2UI() {
                    return _super.call(this) || this;
                }
                Card_3_2UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.HoldCard.Card_1UI", ui.mj.HoldCard.Card_1UI);
                    View.regComponent("ui.mj.HoldCard.Card_2UI", ui.mj.HoldCard.Card_2UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HoldCard.Card_3_2UI.uiView);
                };
                Card_3_2UI.uiView = { "type": "View", "props": { "y": 86, "width": 36, "height": 86, "anchorY": 1 }, "child": [{ "type": "Card_1", "props": { "y": 0, "x": 10, "var": "card_3", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_1UI" } }, { "type": "Card_2", "props": { "y": 34, "x": 2, "var": "card_2", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 59, "x": 2, "var": "card_1", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 25, "x": 2, "var": "card_4", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_2UI" } }] };
                return Card_3_2UI;
            }(View));
            HoldCard.Card_3_2UI = Card_3_2UI;
        })(HoldCard = mj.HoldCard || (mj.HoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HoldCard;
        (function (HoldCard) {
            var Card_3_4UI = /** @class */ (function (_super) {
                __extends(Card_3_4UI, _super);
                function Card_3_4UI() {
                    return _super.call(this) || this;
                }
                Card_3_4UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.HoldCard.Card_1UI", ui.mj.HoldCard.Card_1UI);
                    View.regComponent("ui.mj.HoldCard.Card_4UI", ui.mj.HoldCard.Card_4UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HoldCard.Card_3_4UI.uiView);
                };
                Card_3_4UI.uiView = { "type": "View", "props": { "width": 36, "height": 89 }, "child": [{ "type": "Card_1", "props": { "y": 0, "x": 0, "var": "card_1", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_1UI" } }, { "type": "Card_4", "props": { "y": 34, "x": 0, "var": "card_2", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 59, "x": 0, "var": "card_3", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_4UI" } }, { "type": "Card_4", "props": { "y": 25, "x": 0, "var": "card_4", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_4UI" } }] };
                return Card_3_4UI;
            }(View));
            HoldCard.Card_3_4UI = Card_3_4UI;
        })(HoldCard = mj.HoldCard || (mj.HoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HoldCard;
        (function (HoldCard) {
            var Card_4UI = /** @class */ (function (_super) {
                __extends(Card_4UI, _super);
                function Card_4UI() {
                    return _super.call(this) || this;
                }
                Card_4UI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HoldCard.Card_4UI.uiView);
                };
                Card_4UI.uiView = { "type": "View", "props": { "width": 63, "name": "4", "height": 54 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_bg", "skin": "card/4/1.png" } }, { "type": "Image", "props": { "visible": false, "var": "_back", "skin": "card/4/bg_2.png", "scaleY": 1, "scaleX": 1 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 63, "visible": false, "var": "_mask", "skin": "card/mask.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "height": 54, "alpha": 0.7 } }] };
                return Card_4UI;
            }(View));
            HoldCard.Card_4UI = Card_4UI;
        })(HoldCard = mj.HoldCard || (mj.HoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HoldCard;
        (function (HoldCard) {
            var Card_4_1UI = /** @class */ (function (_super) {
                __extends(Card_4_1UI, _super);
                function Card_4_1UI() {
                    return _super.call(this) || this;
                }
                Card_4_1UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.HoldCard.Card_2UI", ui.mj.HoldCard.Card_2UI);
                    View.regComponent("ui.mj.HoldCard.Card_1UI", ui.mj.HoldCard.Card_1UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HoldCard.Card_4_1UI.uiView);
                };
                Card_4_1UI.uiView = { "type": "View", "props": { "width": 163, "height": 72 }, "child": [{ "type": "Card_2", "props": { "y": 17, "x": 0, "var": "card_1", "runtime": "ui.mj.HoldCard.Card_2UI" } }, { "type": "Card_1", "props": { "y": 1, "x": 63, "var": "card_2", "runtime": "ui.mj.HoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": 1, "x": 112, "var": "card_3", "runtime": "ui.mj.HoldCard.Card_1UI" } }, { "type": "Card_1", "props": { "y": -14, "x": 63, "var": "card_4", "runtime": "ui.mj.HoldCard.Card_1UI" } }] };
                return Card_4_1UI;
            }(View));
            HoldCard.Card_4_1UI = Card_4_1UI;
        })(HoldCard = mj.HoldCard || (mj.HoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HoldCard;
        (function (HoldCard) {
            var Card_4_2UI = /** @class */ (function (_super) {
                __extends(Card_4_2UI, _super);
                function Card_4_2UI() {
                    return _super.call(this) || this;
                }
                Card_4_2UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.HoldCard.Card_2UI", ui.mj.HoldCard.Card_2UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HoldCard.Card_4_2UI.uiView);
                };
                Card_4_2UI.uiView = { "type": "View", "props": { "y": 76, "width": 36, "height": 80, "anchorY": 1 }, "child": [{ "type": "Card_2", "props": { "y": 0, "x": 0, "var": "card_3", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 25, "x": 0, "var": "card_2", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 50, "x": 0, "var": "card_1", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_2UI" } }, { "type": "Card_2", "props": { "y": 16, "x": 0, "var": "card_4", "scaleY": 0.6, "scaleX": 0.6, "runtime": "ui.mj.HoldCard.Card_2UI" } }] };
                return Card_4_2UI;
            }(View));
            HoldCard.Card_4_2UI = Card_4_2UI;
        })(HoldCard = mj.HoldCard || (mj.HoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HoldCard;
        (function (HoldCard) {
            var Card_4_3UI = /** @class */ (function (_super) {
                __extends(Card_4_3UI, _super);
                function Card_4_3UI() {
                    return _super.call(this) || this;
                }
                Card_4_3UI.prototype.createChildren = function () {
                    View.regComponent("ui.mj.HoldCard.Card_2UI", ui.mj.HoldCard.Card_2UI);
                    View.regComponent("ui.mj.HoldCard.Card_3UI", ui.mj.HoldCard.Card_3UI);
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HoldCard.Card_4_3UI.uiView);
                };
                Card_4_3UI.uiView = { "type": "View", "props": { "width": 110, "height": 63, "anchorX": 1 }, "child": [{ "type": "Card_2", "props": { "y": 24, "x": 111, "var": "card_3", "scaleY": 0.7, "scaleX": 0.7, "runtime": "ui.mj.HoldCard.Card_2UI" } }, { "type": "Card_3", "props": { "y": 13, "x": 155, "var": "card_2", "scaleY": 0.7, "scaleX": 0.7, "runtime": "ui.mj.HoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 13, "x": 189, "var": "card_1", "scaleY": 0.7, "scaleX": 0.7, "runtime": "ui.mj.HoldCard.Card_3UI" } }, { "type": "Card_3", "props": { "y": 2, "x": 155, "var": "card_4", "scaleY": 0.7, "scaleX": 0.7, "runtime": "ui.mj.HoldCard.Card_3UI" } }] };
                return Card_4_3UI;
            }(View));
            HoldCard.Card_4_3UI = Card_4_3UI;
        })(HoldCard = mj.HoldCard || (mj.HoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var HoldCard;
        (function (HoldCard) {
            var liujuUI = /** @class */ (function (_super) {
                __extends(liujuUI, _super);
                function liujuUI() {
                    return _super.call(this) || this;
                }
                liujuUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.createView(ui.mj.HoldCard.liujuUI.uiView);
                };
                liujuUI.uiView = { "type": "View", "props": { "width": 960, "height": 640 }, "child": [{ "type": "Image", "props": { "y": 243, "x": 492, "skin": "opt/ju.png" }, "compId": 2 }, { "type": "Image", "props": { "y": 239, "x": 416, "skin": "opt/liu.png" }, "compId": 3 }, { "type": "Image", "props": { "y": 208, "x": 494, "skin": "opt/ju_t.png" }, "compId": 4 }, { "type": "Image", "props": { "y": 212, "x": 416, "skin": "opt/liu_t.png" }, "compId": 5 }], "animations": [{ "nodes": [{ "target": 3, "keyframes": { "y": [{ "value": 277, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "y", "index": 0 }], "x": [{ "value": 454, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "x", "index": 0 }], "scaleY": [{ "value": 2, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleY", "index": 0 }, { "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleY", "index": 10 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleY", "index": 13 }], "scaleX": [{ "value": 2, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleX", "index": 0 }, { "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleX", "index": 10 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleX", "index": 13 }], "anchorY": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "anchorY", "index": 0 }], "anchorX": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "anchorX", "index": 0 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 13 }] } }, { "target": 2, "keyframes": { "y": [{ "value": 281, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "y", "index": 0 }], "x": [{ "value": 527, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 0 }], "scaleY": [{ "value": 2, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 0 }, { "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 10 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 13 }], "scaleX": [{ "value": 2, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 0 }, { "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 10 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 13 }], "anchorY": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "anchorY", "index": 0 }], "anchorX": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "anchorX", "index": 0 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 13 }] } }, { "target": 5, "keyframes": { "y": [{ "value": 280, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "y", "index": 0 }, { "value": 280, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "y", "index": 13 }], "x": [{ "value": 452, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "x", "index": 0 }, { "value": 452, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "x", "index": 13 }], "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 0 }, { "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 13 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 20 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 13 }], "anchorY": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "anchorY", "index": 0 }, { "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "anchorY", "index": 13 }], "anchorX": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "anchorX", "index": 0 }, { "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "anchorX", "index": 13 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 12 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 13 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 17 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 20 }] } }, { "target": 4, "keyframes": { "y": [{ "value": 277, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "y", "index": 0 }, { "value": 277, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "y", "index": 12 }], "x": [{ "value": 529, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "x", "index": 0 }, { "value": 529, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "x", "index": 12 }], "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleY", "index": 0 }, { "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleY", "index": 13 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "scaleY", "index": 20 }], "anchorY": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "anchorY", "index": 0 }, { "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "anchorY", "index": 12 }], "anchorX": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "anchorX", "index": 0 }, { "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "anchorX", "index": 12 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 12 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 13 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 17 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 20 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
                return liujuUI;
            }(View));
            HoldCard.liujuUI = liujuUI;
        })(HoldCard = mj.HoldCard || (mj.HoldCard = {}));
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var LoserUI = /** @class */ (function (_super) {
            __extends(LoserUI, _super);
            function LoserUI() {
                return _super.call(this) || this;
            }
            LoserUI.prototype.createChildren = function () {
                View.regComponent("ui.components.head.HeadUI", ui.components.head.HeadUI);
                _super.prototype.createChildren.call(this);
                this.createView(ui.mj.LoserUI.uiView);
            };
            LoserUI.uiView = { "type": "View", "props": { "width": 257, "height": 110 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_bg", "skin": "gameEnd/lose.png" } }, { "type": "Head", "props": { "y": 13, "x": 20, "var": "_loser", "scaleY": 0.8, "scaleX": 0.8, "runtime": "ui.components.head.HeadUI" } }, { "type": "Image", "props": { "y": 64, "x": 121, "skin": "gameEnd/gang.png" } }, { "type": "Label", "props": { "y": 22, "x": 138, "var": "_score", "text": "0", "font": "font_num_1", "align": "center" } }, { "type": "Label", "props": { "y": 68, "x": 184, "var": "_gang", "text": "999", "fontSize": 13, "color": "#f4f410" } }] };
            return LoserUI;
        }(View));
        mj.LoserUI = LoserUI;
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var OptAcionUI = /** @class */ (function (_super) {
            __extends(OptAcionUI, _super);
            function OptAcionUI() {
                return _super.call(this) || this;
            }
            OptAcionUI.prototype.createChildren = function () {
                View.regComponent("ui.mj.HandCard.Card_1UI", ui.mj.HandCard.Card_1UI);
                _super.prototype.createChildren.call(this);
                this.createView(ui.mj.OptAcionUI.uiView);
            };
            OptAcionUI.uiView = { "type": "View", "props": {}, "child": [{ "type": "Card_1", "props": { "y": 0, "x": -44, "var": "_card_1", "runtime": "ui.mj.HandCard.Card_1UI" }, "compId": 2 }, { "type": "Card_1", "props": { "y": 0, "x": 24, "var": "_card_2", "runtime": "ui.mj.HandCard.Card_1UI" }, "compId": 4 }, { "type": "Card_1", "props": { "y": 0, "x": 92, "var": "_card_3", "runtime": "ui.mj.HandCard.Card_1UI" }, "compId": 5 }, { "type": "Card_1", "props": { "y": 0, "x": 160, "var": "_card_4", "runtime": "ui.mj.HandCard.Card_1UI" }, "compId": 6 }], "animations": [{ "nodes": [{ "target": 2, "keyframes": { "x": [{ "value": -114, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 0 }, { "value": -44, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 8 }, { "value": -50, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 10 }, { "value": -44, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 12 }], "var": [{ "value": "_card_1", "tweenMethod": "linearNone", "tween": false, "target": 2, "key": "var", "index": 0 }, { "value": "_card_1", "tweenMethod": "linearNone", "tween": false, "target": 2, "key": "var", "index": 8 }] } }, { "target": 4, "keyframes": { "x": [{ "value": 64, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "x", "index": 0 }, { "value": 24, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "x", "index": 8 }], "var": [{ "value": "_card_2", "tweenMethod": "linearNone", "tween": false, "target": 4, "key": "var", "index": 0 }, { "value": "_card_2", "tweenMethod": "linearNone", "tween": false, "target": 4, "key": "var", "index": 8 }] } }, { "target": 5, "keyframes": { "x": [{ "value": 132, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "x", "index": 0 }, { "value": 92, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "x", "index": 8 }], "var": [{ "value": "_card_3", "tweenMethod": "linearNone", "tween": false, "target": 5, "key": "var", "index": 0 }, { "value": "_card_3", "tweenMethod": "linearNone", "tween": false, "target": 5, "key": "var", "index": 8 }] } }, { "target": 6, "keyframes": { "x": [{ "value": 200, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "x", "index": 0 }, { "value": 160, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "x", "index": 8 }], "var": [{ "value": "_card_4", "tweenMethod": "linearNone", "tween": false, "target": 6, "key": "var", "index": 0 }, { "value": "_card_4", "tweenMethod": "linearNone", "tween": false, "target": 6, "key": "var", "index": 8 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return OptAcionUI;
        }(View));
        mj.OptAcionUI = OptAcionUI;
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var OptChoiceViewUI = /** @class */ (function (_super) {
            __extends(OptChoiceViewUI, _super);
            function OptChoiceViewUI() {
                return _super.call(this) || this;
            }
            OptChoiceViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.mj.OptChoiceViewUI.uiView);
            };
            OptChoiceViewUI.uiView = { "type": "View", "props": { "width": 69, "height": 118 } };
            return OptChoiceViewUI;
        }(View));
        mj.OptChoiceViewUI = OptChoiceViewUI;
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var PaiduiUI = /** @class */ (function (_super) {
            __extends(PaiduiUI, _super);
            function PaiduiUI() {
                return _super.call(this) || this;
            }
            PaiduiUI.prototype.createChildren = function () {
                View.regComponent("ui.mj.FoldCard.Card_1UI", ui.mj.FoldCard.Card_1UI);
                _super.prototype.createChildren.call(this);
                this.createView(ui.mj.PaiduiUI.uiView);
            };
            PaiduiUI.uiView = { "type": "View", "props": { "width": 157, "height": 66 }, "child": [{ "type": "Image", "props": { "y": 21, "x": 0, "width": 157, "skin": "timelimit/left_card_bg.png", "height": 46 } }, { "type": "Image", "props": { "y": 14, "x": 7, "skin": "card/1/bg_1.png", "scaleY": 0.7, "scaleX": 0.7 } }, { "type": "Image", "props": { "y": 14, "x": 39, "skin": "card/1/bg_1.png", "scaleY": 0.7, "scaleX": 0.7 } }, { "type": "Image", "props": { "y": 14, "x": 71, "skin": "card/1/bg_1.png", "scaleY": 0.7, "scaleX": 0.7 } }, { "type": "Image", "props": { "y": 0, "x": 7, "skin": "card/1/bg_1.png", "scaleY": 0.7, "scaleX": 0.7 } }, { "type": "Card_1", "props": { "y": 0, "x": 39, "var": "_card", "runtime": "ui.mj.FoldCard.Card_1UI" } }, { "type": "Label", "props": { "y": 32, "x": 129, "width": 39, "var": "_left", "text": "0", "height": 24, "fontSize": 24, "color": "#f8f4f4", "anchorX": 0.5, "align": "center" } }] };
            return PaiduiUI;
        }(View));
        mj.PaiduiUI = PaiduiUI;
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var RuleRenderItemUI = /** @class */ (function (_super) {
            __extends(RuleRenderItemUI, _super);
            function RuleRenderItemUI() {
                return _super.call(this) || this;
            }
            RuleRenderItemUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.mj.RuleRenderItemUI.uiView);
            };
            RuleRenderItemUI.uiView = { "type": "View", "props": { "width": 207, "height": 38 }, "child": [{ "type": "Label", "props": { "y": 6, "var": "_text", "text": "20", "fontSize": 20, "font": "Microsoft YaHei", "color": "#f4e9e9", "centerX": -0.376953125 } }, { "type": "Image", "props": { "var": "_line", "skin": "table/ruler_line.png", "centerX": 0, "bottom": 4 } }] };
            return RuleRenderItemUI;
        }(View));
        mj.RuleRenderItemUI = RuleRenderItemUI;
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var SmallEndUI = /** @class */ (function (_super) {
            __extends(SmallEndUI, _super);
            function SmallEndUI() {
                return _super.call(this) || this;
            }
            SmallEndUI.prototype.createChildren = function () {
                View.regComponent("ui.mj.smallEndItemUI", ui.mj.smallEndItemUI);
                _super.prototype.createChildren.call(this);
                this.createView(ui.mj.SmallEndUI.uiView);
            };
            SmallEndUI.uiView = { "type": "View", "props": { "width": 1280, "height": 720 }, "child": [{ "type": "Image", "props": { "width": 1280, "var": "_bg", "skin": "smallEnd/bg.png", "height": 720 } }, { "type": "Box", "props": { "y": 0, "x": 0, "width": 1280, "var": "_box", "height": 720 }, "child": [{ "type": "smallEndItem", "props": { "y": 92, "x": 18, "var": "_p0", "runtime": "ui.mj.smallEndItemUI" } }, { "type": "smallEndItem", "props": { "y": 232, "x": 16, "var": "_p1", "runtime": "ui.mj.smallEndItemUI" } }, { "type": "smallEndItem", "props": { "y": 372, "x": 18, "var": "_p2", "runtime": "ui.mj.smallEndItemUI" } }, { "type": "smallEndItem", "props": { "y": 512, "x": 18, "var": "_p3", "runtime": "ui.mj.smallEndItemUI" } }, { "type": "Image", "props": { "y": 56, "x": 640, "var": "_lose", "skin": "smallEnd/xjs_tag_lose.png", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 58, "x": 640, "var": "_win", "skin": "smallEnd/xjs_tag_win.png", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Button", "props": { "y": 635, "x": 218, "width": 214, "var": "_back_desk", "stateNum": 1, "skin": "table/btnBackDesk.png", "height": 76 } }, { "type": "Button", "props": { "y": 635, "x": 884, "var": "_next", "stateNum": 1, "skin": "table/btnReadyAgain.png" } }, { "type": "Button", "props": { "y": 673, "x": 640, "var": "_back_hall", "stateNum": 1, "skin": "table/backHall.png", "label": "label", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 47, "x": 640, "var": "_liuju", "skin": "smallEnd/liuju.png", "anchorY": 0.5, "anchorX": 0.5 } }] }] };
            return SmallEndUI;
        }(View));
        mj.SmallEndUI = SmallEndUI;
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var TimeLimitUI = /** @class */ (function (_super) {
            __extends(TimeLimitUI, _super);
            function TimeLimitUI() {
                return _super.call(this) || this;
            }
            TimeLimitUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.mj.TimeLimitUI.uiView);
            };
            TimeLimitUI.uiView = { "type": "View", "props": { "width": 69, "height": 118 }, "child": [{ "type": "Image", "props": { "y": 9, "x": -16, "var": "_bg", "skin": "timelimit/time_bg.png", "anchorY": 0, "anchorX": 0 } }, { "type": "Image", "props": { "y": 82, "x": 27, "var": "_pos_1", "skin": "timelimit/time_pos_1.png" } }, { "type": "Image", "props": { "y": 51, "x": -6, "var": "_pos_4", "skin": "timelimit/time_pos_4.png" } }, { "type": "Image", "props": { "y": 49, "x": 59, "var": "_pos_2", "skin": "timelimit/time_pos_2.png" } }, { "type": "Image", "props": { "y": 20, "x": 26, "var": "_pos_3", "skin": "timelimit/time_pos_3.png" } }, { "type": "Label", "props": { "y": 59, "x": 34, "var": "_num", "text": "00", "font": "font_num_2", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Animation", "props": { "y": 59, "x": 34, "width": 0, "var": "_time_1", "source": "res/mj/time1.ani", "height": 0 } }, { "type": "Animation", "props": { "y": 59, "x": 34, "var": "_time_2", "source": "res/mj/time2.ani" } }, { "type": "Animation", "props": { "y": 59, "x": 34, "var": "_time_3", "source": "res/mj/time3.ani" } }, { "type": "Animation", "props": { "y": 59, "x": 34, "var": "_time_4", "source": "res/mj/time4.ani" } }] };
            return TimeLimitUI;
        }(View));
        mj.TimeLimitUI = TimeLimitUI;
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var TingAllUI = /** @class */ (function (_super) {
            __extends(TingAllUI, _super);
            function TingAllUI() {
                return _super.call(this) || this;
            }
            TingAllUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.mj.TingAllUI.uiView);
            };
            TingAllUI.uiView = { "type": "View", "props": { "width": 156, "height": 104 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "ting/all.png", "scaleY": 0.58, "scaleX": 0.58 } }, { "type": "Image", "props": { "y": 40, "x": 128, "skin": "ting/num.png" } }, { "type": "Label", "props": { "y": 37, "x": 78, "width": 6, "var": "_num", "text": "0", "height": 12, "font": "font_num_1" } }] };
            return TingAllUI;
        }(View));
        mj.TingAllUI = TingAllUI;
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var TingItemUI = /** @class */ (function (_super) {
            __extends(TingItemUI, _super);
            function TingItemUI() {
                return _super.call(this) || this;
            }
            TingItemUI.prototype.createChildren = function () {
                View.regComponent("ui.mj.HandCard.Card_1UI", ui.mj.HandCard.Card_1UI);
                _super.prototype.createChildren.call(this);
                this.createView(ui.mj.TingItemUI.uiView);
            };
            TingItemUI.uiView = { "type": "View", "props": { "width": 150, "height": 107 }, "child": [{ "type": "Card_1", "props": { "y": 0, "x": 0, "var": "_card", "runtime": "ui.mj.HandCard.Card_1UI" } }, { "type": "Image", "props": { "y": 40, "x": 125, "skin": "ting/num.png" } }, { "type": "Label", "props": { "y": 38, "x": 86, "var": "_num", "text": "0", "font": "font_num_1" } }] };
            return TingItemUI;
        }(View));
        mj.TingItemUI = TingItemUI;
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var mj;
    (function (mj) {
        var smallEndItemUI = /** @class */ (function (_super) {
            __extends(smallEndItemUI, _super);
            function smallEndItemUI() {
                return _super.call(this) || this;
            }
            smallEndItemUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.mj.smallEndItemUI.uiView);
            };
            smallEndItemUI.uiView = { "type": "View", "props": { "width": 1243, "height": 136 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 1243, "var": "_bg", "skin": "res/smallEnd/player_xjs_bg.png", "height": 137 } }, { "type": "Image", "props": { "var": "_dlg_win", "skin": "res/smallEnd/player_xjs_dlg_line.png" } }, { "type": "View", "props": { "y": 50, "x": 50, "var": "_head" } }, { "type": "Label", "props": { "y": 20, "x": 62, "var": "_name", "text": "昵称123", "fontSize": 20, "font": "Microsoft YaHei", "color": "#fffefe", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 33, "x": 70, "var": "_owner", "skin": "smallEnd/owner.png", "scaleY": 0.7, "scaleX": 0.7 } }, { "type": "Image", "props": { "y": 19, "x": 1160, "var": "_tag_hu", "skin": "smallEnd/player_tag_hu.png" } }, { "type": "Image", "props": { "y": 0, "x": 1163, "var": "_tag_fc", "skin": "smallEnd/player_tag_fc.png" } }, { "type": "Label", "props": { "y": 15, "x": 218, "var": "_win_type", "fontSize": 18, "font": "Microsoft YaHei", "color": "#FFDE00", "anchorY": 0.5, "anchorX": 0 } }, { "type": "Box", "props": { "y": 44, "x": 292, "width": 760, "var": "_card", "height": 65 } }, { "type": "Label", "props": { "y": 54, "x": 141, "var": "_score", "text": "0123456789+-*/", "fontSize": 30, "font": "fenshu_fnt", "color": "#f1a723" } }] };
            return smallEndItemUI;
        }(View));
        mj.smallEndItemUI = smallEndItemUI;
    })(mj = ui.mj || (ui.mj = {}));
})(ui || (ui = {}));
(function (ui) {
    var page;
    (function (page) {
        var HallUI = /** @class */ (function (_super) {
            __extends(HallUI, _super);
            function HallUI() {
                return _super.call(this) || this;
            }
            HallUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.page.HallUI.uiView);
            };
            HallUI.uiView = { "type": "View", "props": { "visible": true }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "res/bg/bg_hall.png", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Image", "props": { "var": "_bottomUI", "skin": "res/img/img_di.png", "left": 0, "bottom": 0 }, "child": [{ "type": "ScaleButton", "props": { "y": -4, "x": 406, "var": "_btnActivity", "skin": "dating/sBtn_activity.png", "scaleValue": 0.9, "scaleTime": 100, "label": "", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "ScaleButton", "props": { "y": -4, "x": 1158, "var": "_btnClub", "skin": "dating/sBtn_club.png", "scaleValue": 0.9, "scaleTime": 100, "label": "", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "ScaleButton", "props": { "y": -3, "x": 710, "var": "_btnKefu", "skin": "dating/sBtn_kefu.png", "scaleValue": 0.9, "scaleTime": 100, "label": "", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "ScaleButton", "props": { "y": -3, "x": 557, "var": "_btnRecord", "skin": "dating/sBtn_record.png", "scaleValue": 0.9, "scaleTime": 100, "label": "", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "ScaleButton", "props": { "y": -4, "x": 1011, "var": "_btnSet", "skin": "dating/sBtn_set.png", "scaleValue": 0.9, "scaleTime": 100, "label": "", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "ScaleButton", "props": { "y": -3, "x": 867, "var": "_btnShare", "skin": "dating/sBtn_share.png", "scaleValue": 0.9, "scaleTime": 100, "label": "", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "ScaleButton", "props": { "y": -22, "x": 152, "var": "_btnShop", "skin": "dating/sBtn_shop.png", "scaleValue": 0.9, "scaleTime": 100, "label": "", "anchorY": 0.5, "anchorX": 0.5 } }] }, { "type": "Image", "props": { "width": 787, "var": "_labaBg", "top": 85, "skin": "dating/img_labadi.png", "height": 62, "centerX": 0 } }, { "type": "Image", "props": { "width": 757, "var": "_mask", "top": 84, "height": 62, "centerX": 31.5 }, "child": [{ "type": "Sprite", "props": { "y": 0, "x": 23, "width": 736, "renderType": "mask", "height": 59 }, "child": [{ "type": "Rect", "props": { "y": 0, "x": 0, "width": 759, "lineWidth": 1, "height": 59, "fillColor": "#ff0000" } }] }] }, { "type": "BaseButton", "props": { "var": "_btnRank", "stateNum": 1, "skin": "dating/bBtn_rank.png", "left": 0, "centerY": 0.5 } }, { "type": "ScaleButton", "props": { "var": "_btnCreateRoom", "skin": "dating/sBtn_createRoom.png", "scaleValue": 0.9, "scaleTime": 100, "label": "", "centerY": -86, "centerX": 291.5 } }, { "type": "ScaleButton", "props": { "var": "_btnMatch", "skin": "dating/sBtn_jjc.png", "scaleValue": 0.9, "scaleTime": 100, "label": "", "centerY": 18, "centerX": -98 }, "child": [{ "type": "Label", "props": { "y": 365, "x": 222, "var": "_label_match", "text": "赢红包好礼", "fontSize": 24, "font": "Microsoft YaHei", "color": "#ffffff", "anchorY": 0.5, "anchorX": 0.5, "align": "center" } }] }, { "type": "ScaleButton", "props": { "var": "_btnJoinRoom", "skin": "dating/sBtn_joinRoom.png", "scaleValue": 0.9, "scaleTime": 100, "label": "", "centerY": 120.5, "centerX": 290 } }, { "type": "ScaleButton", "props": { "var": "_btnRedBagMatch", "skin": "dating/sBtn_redBgRoom.png", "scaleValue": 0.9, "scaleTime": 100, "label": "", "centerY": 22.5, "centerX": -376 }, "child": [{ "type": "Label", "props": { "y": 364, "x": 166, "var": "_label_redbag", "text": "暂未开放", "fontSize": 24, "font": "Microsoft YaHei", "color": "#ffffff", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "skin": "dating/img_jijiangkaiqi.png" } }] }, { "type": "Image", "props": { "y": 173, "x": 339, "width": 127, "var": "_touchPanel", "height": 409, "alpha": 0 } }, { "type": "ScaleButton", "props": { "visible": false, "skin": "dating/sBtn_shouchong.png", "scaleTime": 100, "right": 22, "label": "", "centerY": -198 } }] };
            return HallUI;
        }(View));
        page.HallUI = HallUI;
    })(page = ui.page || (ui.page = {}));
})(ui || (ui = {}));
(function (ui) {
    var page;
    (function (page) {
        var LoadingUI = /** @class */ (function (_super) {
            __extends(LoadingUI, _super);
            function LoadingUI() {
                return _super.call(this) || this;
            }
            LoadingUI.prototype.createChildren = function () {
                View.regComponent("ui.components.LoadContextUI", ui.components.LoadContextUI);
                _super.prototype.createChildren.call(this);
                this.createView(ui.page.LoadingUI.uiView);
            };
            LoadingUI.uiView = { "type": "View", "props": { "width": 960, "height": 640, "centerX": 0 }, "child": [{ "type": "Image", "props": { "var": "_imgH", "top": 0, "skin": "res/bg/bg_loading_h.jpg", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Image", "props": { "var": "_imgV", "top": 0, "skin": "res/bg/bg_menu.jpg", "right": 0, "left": 0, "bottom": 0 } }, { "type": "ProgressBar", "props": { "width": 400, "var": "_processBar", "skin": "loading/loading_jindutiaodi.png", "sizeGrid": "20,44,20,41", "height": 33, "centerX": 0, "bottom": 150.5, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "LoadContext", "props": { "var": "_labelContext", "centerX": 9, "bottom": 117, "anchorY": 0.5, "anchorX": 0.5, "runtime": "ui.components.LoadContextUI" } }] };
            return LoadingUI;
        }(View));
        page.LoadingUI = LoadingUI;
    })(page = ui.page || (ui.page = {}));
})(ui || (ui = {}));
(function (ui) {
    var page;
    (function (page) {
        var LoginUI = /** @class */ (function (_super) {
            __extends(LoginUI, _super);
            function LoginUI() {
                return _super.call(this) || this;
            }
            LoginUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.page.LoginUI.uiView);
            };
            LoginUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 1280, "height": 720 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "res/bg/bg_login.png", "right": 0, "left": 0, "bottom": 0 } }, { "type": "BaseButton", "props": { "var": "_btnGuest", "stateNum": 2, "skin": "login/btn_guest.png", "scaleValue": 0.8, "label": "", "centerX": -273, "bottom": 106, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "BaseButton", "props": { "var": "_btnWx", "stateNum": 1, "skin": "login/btn_wx.png", "scaleValue": 0.8, "label": "", "centerX": 0, "bottom": 128, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "BaseButton", "props": { "var": "_btnAccount", "stateNum": 2, "skin": "login/btn_account.png", "scaleValue": 0.8, "label": "", "centerX": 274, "bottom": 110, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "var": "_imgLogo", "skin": "login/img_logo_tongjiang.png", "centerY": -80, "centerX": 0 } }, { "type": "Box", "props": { "y": 641, "width": 278, "var": "_box", "centerX": 0 }, "child": [{ "type": "Label", "props": { "y": 16, "x": 78, "var": "_labProtocol", "underline": true, "text": "同意《用户使用协议》", "fontSize": 20, "color": "#ffffff" } }, { "type": "CheckBox", "props": { "y": 0, "var": "_cheProtocol", "stateNum": 2, "skin": "login/btn_deal.png", "selected": true, "labelSize": 30, "labelPadding": "12" } }] }, { "type": "Label", "props": { "y": 6, "x": 1139, "var": "_version", "text": "版本号:1.0.0", "fontSize": 24, "font": "Microsoft YaHei", "color": "#ffffff" } }] };
            return LoginUI;
        }(View));
        page.LoginUI = LoginUI;
    })(page = ui.page || (ui.page = {}));
})(ui || (ui = {}));
(function (ui) {
    var page;
    (function (page) {
        var MenuUI = /** @class */ (function (_super) {
            __extends(MenuUI, _super);
            function MenuUI() {
                return _super.call(this) || this;
            }
            MenuUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.page.MenuUI.uiView);
            };
            MenuUI.uiView = { "type": "View", "props": { "y": 0, "width": 640, "height": 960 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "menu/menu_bg.png", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Image", "props": { "top": 0, "skin": "res/bg/bg_menu.jpg", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Image", "props": { "x": 0, "skin": "menu/anniu_di.png", "bottom": 0 } }, { "type": "Tab", "props": { "width": 640, "var": "_tab", "selectedIndex": 0, "mouseThrough": true, "height": 339, "centerX": 0, "bottom": 0 }, "child": [{ "type": "BaseButton", "props": { "y": 229, "var": "_item2", "stateNum": 3, "skin": "menu/zhanji.png", "name": "item2", "centerX": 71 } }, { "type": "BaseButton", "props": { "y": 227, "x": 4, "visible": true, "var": "_item0", "stateNum": 3, "skin": "menu/youxi.png", "name": "item0", "centerX": -214 } }, { "type": "BaseButton", "props": { "y": 227, "x": 432, "visible": true, "var": "_item3", "stateNum": 3, "skin": "menu/geren.png", "name": "item3", "centerX": 214 } }, { "type": "BaseButton", "props": { "y": 228, "visible": true, "var": "_item1", "stateNum": 3, "skin": "menu/club.png", "name": "item1", "centerX": -71 } }] }, { "type": "Image", "props": { "var": "_mask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.7 } }, { "type": "Image", "props": { "x": 10, "var": "_shareBg", "skin": "menu/share_bg.png", "sizeGrid": "13,13,13,8", "right": 0, "left": 0, "height": 180, "bottom": -185, "alpha": 0 }, "child": [{ "type": "BaseButton", "props": { "y": 10, "var": "_wechat", "stateNum": 2, "skin": "menu/wechat.png", "label": "", "centerX": -139.5 } }, { "type": "BaseButton", "props": { "y": 10, "var": "_pyq", "stateNum": 2, "skin": "menu/pyq.png", "label": "", "centerX": 140 } }] }] };
            return MenuUI;
        }(View));
        page.MenuUI = MenuUI;
    })(page = ui.page || (ui.page = {}));
})(ui || (ui = {}));
(function (ui) {
    var page;
    (function (page) {
        var PreLoadingUI = /** @class */ (function (_super) {
            __extends(PreLoadingUI, _super);
            function PreLoadingUI() {
                return _super.call(this) || this;
            }
            PreLoadingUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.page.PreLoadingUI.uiView);
            };
            PreLoadingUI.uiView = { "type": "View", "props": { "width": 1280, "height": 720 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "preload/preload_write.png", "sizeGrid": "1,1,1,1", "right": 0, "left": 0, "bottom": 0 } }, { "type": "Image", "props": { "y": 320, "x": 109, "var": "_imgLogo", "centerX": 0 } }] };
            return PreLoadingUI;
        }(View));
        page.PreLoadingUI = PreLoadingUI;
    })(page = ui.page || (ui.page = {}));
})(ui || (ui = {}));
(function (ui) {
    var page;
    (function (page) {
        var TablePageUI = /** @class */ (function (_super) {
            __extends(TablePageUI, _super);
            function TablePageUI() {
                return _super.call(this) || this;
            }
            TablePageUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.page.TablePageUI.uiView);
            };
            TablePageUI.uiView = { "type": "View", "props": { "width": 1280, "scaleX": 1, "height": 640, "centerX": 0 }, "child": [{ "type": "Image", "props": { "width": 1280, "var": "_bg", "skin": "res/bg/bg_table.jpg", "centerY": 0, "centerX": 0 } }, { "type": "Image", "props": { "var": "_logo", "skin": "gameLogo/1.png", "centerY": -40, "centerX": 0 } }, { "type": "Box", "props": { "y": 0, "var": "_box", "mouseThrough": true } }] };
            return TablePageUI;
        }(View));
        page.TablePageUI = TablePageUI;
    })(page = ui.page || (ui.page = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var AccountLoginUI = /** @class */ (function (_super) {
            __extends(AccountLoginUI, _super);
            function AccountLoginUI() {
                return _super.call(this) || this;
            }
            AccountLoginUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.AccountLoginUI.uiView);
            };
            AccountLoginUI.uiView = { "type": "View", "props": { "width": 640, "height": 400 }, "child": [{ "type": "Image", "props": { "y": 296, "x": 405, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "x": 10, "right": 10, "left": 10, "height": 452, "centerY": -40 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "tongyong/tongyong_bg.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "height": 940, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "width": 319, "skin": "tongyong/tongyong_bg_title.png", "centerX": 0.5 }, "child": [{ "type": "Image", "props": { "width": 160, "skin": "login/login_title.png", "centerY": -7, "centerX": 0 } }] }, { "type": "Image", "props": { "top": 80, "skin": "tongyong/tongyong_top_border_1.png", "sizeGrid": "18,23,21,21", "right": 15, "left": 15, "bottom": 20 } }] }, { "type": "BaseButton", "props": { "var": "_btnLogin", "stateNum": 2, "skin": "login/btn_login.png", "name": "confirm", "labelSize": 34, "labelPadding": "-2", "labelColors": "#45483e,#45483e,#45483e,#45483e", "labelAlign": "center", "centerX": 0.5, "bottom": 47 } }, { "type": "Box", "props": { "y": 135, "width": 514, "height": 67, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 514, "skin": "login/login_login_back.png", "sizeGrid": "20,16,24,18" } }, { "type": "Label", "props": { "x": 25, "text": "账号", "fontSize": 36, "color": "#9b5036", "centerY": 0 } }, { "type": "Image", "props": { "x": 115, "skin": "login/login_shu.png" } }, { "type": "TextInput", "props": { "x": 138, "width": 356, "var": "_inputAccount", "type": "text", "promptColor": "#a6836d", "prompt": "请输入账号", "height": 67, "fontSize": 30, "color": "#fcecd3", "centerY": 0, "align": "left" } }] }, { "type": "Box", "props": { "y": 226, "width": 514, "height": 67, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 514, "skin": "login/login_login_back.png", "sizeGrid": "20,16,24,18" } }, { "type": "TextInput", "props": { "x": 138, "width": 356, "var": "_inputPassword", "type": "text", "promptColor": "#a6836d", "prompt": "请输入密码", "height": 67, "fontSize": 30, "color": "#fcecd3", "centerY": 0, "align": "left" } }, { "type": "Label", "props": { "y": -75, "x": 25, "text": "密码", "fontSize": 36, "color": "#9b5036", "centerY": 0 } }, { "type": "Image", "props": { "x": 115, "skin": "login/login_shu.png" } }] }, { "type": "BaseButton", "props": { "y": -31, "x": 547, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "right": -27 } }] }] };
            return AccountLoginUI;
        }(View));
        panel.AccountLoginUI = AccountLoginUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var AgreeMentUI = /** @class */ (function (_super) {
            __extends(AgreeMentUI, _super);
            function AgreeMentUI() {
                return _super.call(this) || this;
            }
            AgreeMentUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.AgreeMentUI.uiView);
            };
            AgreeMentUI.uiView = { "type": "View", "props": { "width": 1280, "height": 720 }, "child": [{ "type": "Image", "props": { "y": 481, "x": 322, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "top": 10, "right": 10, "left": 10, "bottom": 10 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "res/bg/bg_endBg.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Panel", "props": { "width": 1150, "var": "_panel", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 108, "centerX": 0, "bottom": 50 } }, { "type": "Image", "props": { "width": 160, "var": "_gamename", "top": 30, "skin": "tongyong/tongyong_agreement.png", "centerX": 0 } }] }, { "type": "ScaleButton", "props": { "var": "_close", "top": 25, "stateNum": 1, "skin": "common/sBtn_close2.png", "scaleValue": 0.9, "scaleTime": 100, "right": 20 } }] }] };
            return AgreeMentUI;
        }(View));
        panel.AgreeMentUI = AgreeMentUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var AlertUI = /** @class */ (function (_super) {
            __extends(AlertUI, _super);
            function AlertUI() {
                return _super.call(this) || this;
            }
            AlertUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.AlertUI.uiView);
            };
            AlertUI.uiView = { "type": "View", "props": { "width": 454, "height": 328 }, "child": [{ "type": "Image", "props": { "y": 276, "x": 385, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "width": 454, "height": 328, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 454, "skin": "tongyong/tongyong_back.png", "sizeGrid": "50,29,30,18", "height": 328 } }, { "type": "Label", "props": { "y": 17, "x": 0, "var": "_labTitle", "text": "提示", "fontSize": 34, "font": "Arial", "color": "#ffffff", "centerX": 0, "bold": true } }, { "type": "HTMLDivElement", "props": { "y": 80, "x": 37, "width": 380, "var": "_labMsg", "innerHTML": "htmlText", "height": 103 } }, { "type": "Label", "props": { "y": 190, "wordWrap": false, "var": "_labTime", "text": "(5秒后自动关闭)", "height": 34, "fontSize": 30, "color": "#000000", "centerX": 0, "bold": false } }, { "type": "Box", "props": { "y": 0, "x": 0, "width": 454, "var": "_btns", "height": 328 }, "child": [{ "type": "BaseButton", "props": { "var": "_btnCancel", "stateNum": 2, "skin": "tongyong/tongyong_btn_2.png", "name": "cancel", "labelSize": 34, "labelPadding": "-2", "labelColors": "#45483e,#45483e,#45483e,#45483e", "labelAlign": "center", "label": "取消", "centerX": 90, "bottom": 40 } }, { "type": "BaseButton", "props": { "y": 239, "x": 73, "var": "_btnConfirm", "stateNum": 2, "skin": "tongyong/tongyong_btn_1.png", "name": "confirm", "labelSize": 34, "labelPadding": "-2", "labelColors": "#45483e,#45483e,#45483e,#45483e", "labelAlign": "center", "label": "确认", "centerX": -90, "bottom": 40 } }] }] }] };
            return AlertUI;
        }(View));
        panel.AlertUI = AlertUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var AlertDissloveItemUI = /** @class */ (function (_super) {
            __extends(AlertDissloveItemUI, _super);
            function AlertDissloveItemUI() {
                return _super.call(this) || this;
            }
            AlertDissloveItemUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.AlertDissloveItemUI.uiView);
            };
            AlertDissloveItemUI.uiView = { "type": "View", "props": { "width": 250, "height": 60 }, "child": [{ "type": "Image", "props": { "y": 1, "x": -2, "skin": "common/img_disglove_di.png" } }, { "type": "Label", "props": { "y": 31, "x": 104, "var": "_name", "text": "我是独孤求败", "fontSize": 24, "font": "Microsoft YaHei", "color": "#d06211", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 10, "x": 196, "var": "_status", "skin": "common/img_wenhao.png" } }] };
            return AlertDissloveItemUI;
        }(View));
        panel.AlertDissloveItemUI = AlertDissloveItemUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var AlertInGameUI = /** @class */ (function (_super) {
            __extends(AlertInGameUI, _super);
            function AlertInGameUI() {
                return _super.call(this) || this;
            }
            AlertInGameUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.AlertInGameUI.uiView);
            };
            AlertInGameUI.uiView = { "type": "View", "props": { "width": 683, "height": 480 }, "child": [{ "type": "Image", "props": { "y": 286, "x": 395, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "width": 531, "height": 300, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": -93, "x": -73, "skin": "common/bg_common_di.png" } }, { "type": "Label", "props": { "y": -62, "visible": false, "var": "_labTitle", "text": "提示", "fontSize": 40, "font": "Microsoft YaHei", "color": "#2572b0", "centerX": -2.5, "bold": true } }, { "type": "Image", "props": { "y": -63, "var": "_imgTitle", "skin": "tongyong/tongyong_back_to_menu.png", "centerX": 3 } }, { "type": "HTMLDivElement", "props": { "y": 41, "x": 21, "width": 490, "var": "_labMsg", "innerHTML": "htmlText", "height": 200 } }, { "type": "Label", "props": { "y": -48, "wordWrap": false, "var": "_labTime", "text": "300s", "fontSize": 30, "font": "Microsoft YaHei", "color": "#ffffff", "centerX": 284.02685546875, "bold": false } }, { "type": "Box", "props": { "y": 0, "x": 0, "width": 550, "var": "_btns", "height": 322 }, "child": [{ "type": "ScaleButton", "props": { "y": 334, "var": "_btnCancel", "stateNum": 1, "skin": "common/sBtn_cancel.png", "scaleValue": 0.9, "scaleTime": 100, "name": "cancel", "labelColors": "#ffffff", "labelAlign": "center", "centerX": 138, "bottom": -47, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "ScaleButton", "props": { "y": 333, "var": "_btnConfirm", "stateNum": 1, "skin": "common/sBtn_confrm.png", "scaleValue": 0.9, "scaleTime": 100, "name": "confirm", "labelColors": "#ffffff", "labelAlign": "center", "centerX": -138, "bottom": -46.5, "anchorY": 0.5, "anchorX": 0.5 } }] }] }, { "type": "Box", "props": { "width": 600, "var": "_dissloveBox", "height": 280, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Label", "props": { "y": 15, "x": 287, "var": "_label_tip", "text": "玩家xxx 申请解散房间,是否同意?", "fontSize": 24, "font": "Microsoft YaHei", "color": "#956b3c", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Box", "props": { "y": 36, "x": 7, "width": 600, "var": "_itemBox", "height": 240 } }] }] };
            return AlertInGameUI;
        }(View));
        panel.AlertInGameUI = AlertInGameUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var ChatUI = /** @class */ (function (_super) {
            __extends(ChatUI, _super);
            function ChatUI() {
                return _super.call(this) || this;
            }
            ChatUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.ChatUI.uiView);
            };
            ChatUI.uiView = { "type": "View", "props": { "width": 69, "height": 118 }, "child": [{ "type": "Box", "props": { "width": 580, "var": "_chatbox", "right": 120, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 498, "skin": "tongyong/tongyong_bg.png", "sizeGrid": "57,53,59,52", "height": 672 } }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 498, "var": "_preBg", "skin": "table/chat_img.png", "sizeGrid": "18,21,19,19", "height": 672 } }, { "type": "Tab", "props": { "y": 6, "x": 11, "width": 58, "var": "_tabBtn", "stateNum": 0, "selectedIndex": 0, "height": 672 }, "child": [{ "type": "BaseButton", "props": { "y": 0, "x": -2, "var": "_message", "stateNum": 3, "skin": "chat/chat.png", "name": "item0", "labelPadding": "30", "labelColors": "#929292,#0079ff", "height": 330 } }, { "type": "BaseButton", "props": { "y": 323, "x": 0, "var": "_emoji", "stateNum": 3, "skin": "chat/emoj.png", "name": "item1", "labelPadding": "30", "labelColors": "#929292,#0079ff", "height": 330 } }] }, { "type": "Box", "props": { "y": 12, "x": 66, "width": 497, "var": "_mesBox", "height": 255 }, "child": [{ "type": "List", "props": { "y": 6, "x": 0, "width": 430, "var": "_mesList", "vScrollBarSkin": "tongyong/jindutiaodi.png", "spaceY": 2, "repeatY": 8, "repeatX": 1, "renderType": "render", "height": 650 } }] }, { "type": "Box", "props": { "y": 7, "x": 85, "width": 464, "var": "_emojiBox", "height": 264 }, "child": [{ "type": "List", "props": { "y": 6, "x": -40, "width": 430, "var": "_emoList", "vScrollBarSkin": "tongyong/jindutiaodi.png", "spaceY": 15, "spaceX": 30, "repeatY": 4, "repeatX": 4, "renderType": "render", "height": 650 } }] }, { "type": "BaseButton", "props": { "y": -37, "x": 443, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "label": "" } }] }] };
            return ChatUI;
        }(View));
        panel.ChatUI = ChatUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var ChatContentUI = /** @class */ (function (_super) {
            __extends(ChatContentUI, _super);
            function ChatContentUI() {
                return _super.call(this) || this;
            }
            ChatContentUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.ChatContentUI.uiView);
            };
            ChatContentUI.uiView = { "type": "View", "props": { "width": 230, "height": 73 }, "child": [{ "type": "Image", "props": { "y": 1, "x": 171, "var": "_bg", "skin": "chat/messagePop.png", "sizeGrid": "0,23,0,48", "rotation": 0 }, "child": [{ "type": "Label", "props": { "y": 11, "x": 18, "var": "_message", "text": "12", "fontSize": 26, "color": "#000000" } }] }, { "type": "Image", "props": { "y": -19, "x": 170, "var": "_bgEmoji", "skin": "chat/chat_pop.png", "alpha": 0 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 5, "var": "_emoji", "skin": "chat/20.png" } }] }, { "type": "Image", "props": { "y": 1, "x": 61, "var": "_bgLeft", "skin": "chat/messagePop.png", "sizeGrid": "0,23,0,48", "scaleX": -1, "rotation": 0 }, "child": [{ "type": "Label", "props": { "y": 11, "var": "_messageLeft", "text": "1", "scaleX": -1, "right": 21, "fontSize": 26, "color": "#000000" } }] }, { "type": "Image", "props": { "y": -19, "x": 64, "var": "_bgEmojiLeft", "skin": "chat/chat_pop.png", "scaleX": -1 }, "child": [{ "type": "Image", "props": { "y": 7, "x": 5, "var": "_emojiLeft", "skin": "chat/20.png" } }] }] };
            return ChatContentUI;
        }(View));
        panel.ChatContentUI = ChatContentUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var ChatNUI = /** @class */ (function (_super) {
            __extends(ChatNUI, _super);
            function ChatNUI() {
                return _super.call(this) || this;
            }
            ChatNUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.ChatNUI.uiView);
            };
            ChatNUI.uiView = { "type": "View", "props": { "width": 498, "height": 672 }, "child": [{ "type": "Image", "props": { "y": 286, "x": 395, "var": "_uiMask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "var": "_chatbox" }, "child": [{ "type": "Image", "props": { "y": 10, "x": 10, "width": 498, "skin": "tongyong/tongyong_bg.png", "sizeGrid": "57,53,59,52", "height": 672 } }, { "type": "Image", "props": { "var": "_preBg", "skin": "chat/chat_img.png", "centerY": 0, "centerX": 0 } }, { "type": "Tab", "props": { "y": 16, "x": 19, "width": 58, "var": "_tabBtn", "stateNum": 0, "selectedIndex": 0, "height": 672 }, "child": [{ "type": "BaseButton", "props": { "y": 0, "x": 0, "var": "_message", "stateNum": 1, "skin": "chat/tab_msg_selected_bg.png", "name": "item0", "labelPadding": "30", "labelColors": "#929292,#0079ff", "height": 330 }, "child": [{ "type": "Image", "props": { "var": "_msg_s1", "skin": "chat/tab_msg_selected.png.png", "centerY": 0, "centerX": 0 } }, { "type": "Image", "props": { "y": 10, "x": 10, "var": "_msg_us1", "skin": "chat/tab_msg_unselected.png", "centerY": 0, "centerX": 0 } }] }, { "type": "BaseButton", "props": { "y": 323, "x": 0, "var": "_emoji", "stateNum": 1, "skin": "chat/tab_emoj_selected_bg.png", "name": "item1", "labelPadding": "30", "labelColors": "#929292,#0079ff", "height": 330 }, "child": [{ "type": "Image", "props": { "y": -81, "x": 2, "var": "_e_s1", "skin": "chat/tab_emoj_selected.png", "centerY": 0, "centerX": 0 } }, { "type": "Image", "props": { "y": -80, "x": 4, "var": "_e_us1", "skin": "chat/tab_emoj_unselected.png", "centerY": 0, "centerX": 0 } }] }] }, { "type": "Box", "props": { "width": 408, "var": "_mesBox", "right": 0, "height": 650, "centerY": 0 }, "child": [{ "type": "List", "props": { "width": 408, "var": "_mesList", "vScrollBarSkin": "tongyong/jindutiaodi.png", "spaceY": 2, "right": 0, "repeatY": 8, "repeatX": 1, "renderType": "render", "height": 650, "centerY": 0 } }] }, { "type": "Box", "props": { "y": 10, "x": 10, "width": 408, "var": "_emojiBox", "right": 0, "height": 650, "centerY": 0 }, "child": [{ "type": "List", "props": { "width": 408, "var": "_emoList", "vScrollBarSkin": "tongyong/jindutiaodi.png", "spaceY": 2, "right": 0, "repeatY": 8, "repeatX": 1, "renderType": "render", "height": 650, "centerY": 0 } }] }] }] };
            return ChatNUI;
        }(View));
        panel.ChatNUI = ChatNUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var CreateGpsItemUI = /** @class */ (function (_super) {
            __extends(CreateGpsItemUI, _super);
            function CreateGpsItemUI() {
                return _super.call(this) || this;
            }
            CreateGpsItemUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.CreateGpsItemUI.uiView);
            };
            CreateGpsItemUI.uiView = { "type": "View", "props": { "width": 69, "height": 118 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 590, "skin": "createTable/border.png", "sizeGrid": "22,47,22,35" } }] };
            return CreateGpsItemUI;
        }(View));
        panel.CreateGpsItemUI = CreateGpsItemUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var CreateItemUI = /** @class */ (function (_super) {
            __extends(CreateItemUI, _super);
            function CreateItemUI() {
                return _super.call(this) || this;
            }
            CreateItemUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.CreateItemUI.uiView);
            };
            CreateItemUI.uiView = { "type": "View", "props": { "width": 590, "height": 40, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 590, "var": "_content", "sizeGrid": "22,36,14,28", "height": 30 } }] };
            return CreateItemUI;
        }(View));
        panel.CreateItemUI = CreateItemUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var CreateRoomUI = /** @class */ (function (_super) {
            __extends(CreateRoomUI, _super);
            function CreateRoomUI() {
                return _super.call(this) || this;
            }
            CreateRoomUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.CreateRoomUI.uiView);
            };
            CreateRoomUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 1280, "height": 720 }, "child": [{ "type": "Image", "props": { "var": "_mask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.7 } }, { "type": "Image", "props": { "var": "_bg", "skin": "res/bg/bg_createRoom.png", "scaleY": 0.9, "scaleX": 0.9, "right": 0, "left": 0, "centerY": 0 }, "child": [{ "type": "Image", "props": { "y": 10, "x": 10, "visible": false, "var": "_wanfaUI" }, "child": [{ "type": "Panel", "props": { "y": 110, "x": 252, "width": 986, "var": "_wanfaPanel", "vScrollBarSkin": "tongyong/jindutiaodi.png", "mouseEnabled": true, "height": 522 } }] }, { "type": "Image", "props": { "y": 0, "x": 0, "var": "_ruleUI" }, "child": [{ "type": "Image", "props": { "y": 607, "x": 271, "var": "_xiaokuang", "skin": "res/img/img_fangzhufuAAfu.png" } }, { "type": "Image", "props": { "y": 533, "x": 241, "visible": false, "skin": "res/img/img_line.png" } }, { "type": "Label", "props": { "y": 557, "x": 529, "visible": false, "text": "注:牌局未开始时解散房间将会返还所有房卡", "fontSize": 24, "font": "Microsoft YaHei", "color": "#995d3b" } }, { "type": "ScaleButton", "props": { "y": 649, "x": 1237, "var": "_btnCreate", "skin": "createRoom/sBtn_create.png", "scaleValue": 0.9, "scaleTime": 100, "label": "" }, "child": [{ "type": "Label", "props": { "y": 21, "x": 62, "var": "_labelCost", "text": "X10", "fontSize": 30, "font": "Microsoft YaHei", "color": "#f2fef1" } }] }, { "type": "Panel", "props": { "y": 108, "x": 227, "width": 1181, "var": "_rulePanel", "vScrollBarSkin": "tongyong/jindutiaodi.png", "mouseThrough": false, "hitTestPrior": false, "height": 474, "disabled": false } }, { "type": "Image", "props": { "y": 656, "x": 320, "var": "_chargePos" } }] }, { "type": "Image", "props": { "y": 100, "x": 0, "var": "_leftUI", "skin": "createRoom/img_leftbg.png" }, "child": [{ "type": "VBox", "props": { "y": 25, "x": -1, "width": 0, "var": "_gamelist", "height": 0 } }] }, { "type": "Image", "props": { "y": 12, "width": 498, "skin": "createRoom/img_title_bg.png", "height": 70, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 36, "x": 128, "var": "_title_selectSlider", "skin": "createRoom/img_title_bg2.png", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 36, "x": 373, "var": "_title_wanfa", "skin": "createRoom/img_title_wanfa.png", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 35, "x": 130, "var": "_title_create", "skin": "createRoom/img_title_create.png", "anchorY": 0.5, "anchorX": 0.5 } }] }, { "type": "ScaleButton", "props": { "y": 50, "x": 1225, "var": "_btnBack", "top": 20, "skin": "createRoom/sBtn_back.png", "scaleValue": 0.9, "scaleTime": 100, "right": 20, "label": "" } }, { "type": "Image", "props": { "y": 24, "x": 424 } }] }] };
            return CreateRoomUI;
        }(View));
        panel.CreateRoomUI = CreateRoomUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var CreateRoomGameUI = /** @class */ (function (_super) {
            __extends(CreateRoomGameUI, _super);
            function CreateRoomGameUI() {
                return _super.call(this) || this;
            }
            CreateRoomGameUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.CreateRoomGameUI.uiView);
            };
            CreateRoomGameUI.uiView = { "type": "View", "props": { "width": 266, "height": 109 }, "child": [{ "type": "Image", "props": { "y": 4, "x": -1, "var": "_unselect", "skin": "createRoom/img_unselect.png" } }, { "type": "Image", "props": { "y": 1, "x": -2, "var": "_select", "skin": "createRoom/img_selectImg.png" } }, { "type": "Label", "props": { "y": 56, "x": 112, "var": "_gameName", "text": "全民八张", "fontSize": 32, "font": "Microsoft YaHei", "color": "#8a4e2c", "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 5, "x": -1, "width": 269, "var": "_tabClick", "height": 105 } }] };
            return CreateRoomGameUI;
        }(View));
        panel.CreateRoomGameUI = CreateRoomGameUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var CreateRuleIteamUI = /** @class */ (function (_super) {
            __extends(CreateRuleIteamUI, _super);
            function CreateRuleIteamUI() {
                return _super.call(this) || this;
            }
            CreateRuleIteamUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.CreateRuleIteamUI.uiView);
            };
            CreateRuleIteamUI.uiView = { "type": "View", "props": { "width": 1100, "height": 90 }, "child": [{ "type": "Image", "props": { "y": 0, "x": -1, "width": 1100, "var": "_content", "skin": "res/img/img_fenggetiao.png" }, "child": [{ "type": "Image", "props": { "top": 11, "skin": "createRoom/img_word_bg.png", "left": 17 } }, { "type": "Label", "props": { "var": "_name", "top": 19, "text": "局数：", "left": 20, "fontSize": 26, "color": "#8a4e2c" } }] }] };
            return CreateRuleIteamUI;
        }(View));
        panel.CreateRuleIteamUI = CreateRuleIteamUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var CreateTableUI = /** @class */ (function (_super) {
            __extends(CreateTableUI, _super);
            function CreateTableUI() {
                return _super.call(this) || this;
            }
            CreateTableUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.CreateTableUI.uiView);
            };
            CreateTableUI.uiView = { "type": "View", "props": { "width": 640, "height": 960 }, "child": [{ "type": "Image", "props": { "y": 286, "x": 395, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "var": "_boxInfo", "top": 10, "right": 10, "left": 10, "bottom": 10 }, "child": [{ "type": "Image", "props": { "width": 620, "top": 0, "skin": "tongyong/tongyong_bg.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "height": 940, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "width": 319, "skin": "tongyong/tongyong_bg_title.png", "centerX": 0 }, "child": [{ "type": "Image", "props": { "var": "_gamename", "skin": "createTable/3.png", "centerY": -7, "centerX": 0 } }] }, { "type": "Image", "props": { "top": 80, "skin": "tongyong/tongyong_top_border_1.png", "sizeGrid": "18,23,21,21", "right": 15, "left": 15, "height": 700, "bottom": 21 } }, { "type": "Panel", "props": { "var": "_panel", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 110, "right": 10, "left": 10, "bottom": 177 } }, { "type": "Box", "props": { "y": 96, "var": "_wanfa", "right": 30, "left": 30, "height": 60 } }] }, { "type": "BaseButton", "props": { "y": -25, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "right": -27 } }, { "type": "Image", "props": { "skin": "createTable/dibian.png", "sizeGrid": "0,18,0,20", "right": 23, "left": 23, "height": 150, "bottom": 30 } }, { "type": "BaseButton", "props": { "y": 827, "x": 362, "var": "_btnCreate", "stateNum": 2, "skin": "createTable/createTable_btn_create.png", "centerX": 162.5, "bottom": 55 } }, { "type": "Label", "props": { "x": 48, "text": "钻石在开始第一局后扣除,\\n若第一局未打完解散不扣钻石", "leading": 10, "fontSize": 20, "color": "#9b5036", "bottom": 93 } }, { "type": "Label", "props": { "x": 50, "var": "_diamond", "text": "当前钻石数量", "fontSize": 20, "color": "#9b5036", "bottom": 56 } }] }] };
            return CreateTableUI;
        }(View));
        panel.CreateTableUI = CreateTableUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var CreateTitleItemUI = /** @class */ (function (_super) {
            __extends(CreateTitleItemUI, _super);
            function CreateTitleItemUI() {
                return _super.call(this) || this;
            }
            CreateTitleItemUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.CreateTitleItemUI.uiView);
            };
            CreateTitleItemUI.uiView = { "type": "View", "props": { "width": 590, "height": 44 }, "child": [{ "type": "Image", "props": { "y": -2, "x": 0, "width": 590, "var": "_content", "sizeGrid": "16,19,23,34", "height": 44 }, "child": [{ "type": "Label", "props": { "y": 10, "x": 36, "var": "_title", "text": "支付方式", "fontSize": 26, "color": "#b77a5c" } }, { "type": "Image", "props": { "width": 560, "visible": true, "var": "_line", "skin": "createTable/line.png", "sizeGrid": "2,4,2,4", "height": 1, "centerX": 0, "bottom": 1 } }, { "type": "Image", "props": { "y": 25, "x": 202, "visible": false, "var": "_huodong", "skin": "createTable/huodong.png", "anchorY": 0.5, "anchorX": 0.5 }, "compId": 6 }] }], "animations": [{ "nodes": [{ "target": 6, "keyframes": { "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "scaleY", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "scaleY", "index": 4 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "scaleY", "index": 8 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "scaleY", "index": 12 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "scaleY", "index": 16 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "scaleX", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "scaleX", "index": 4 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "scaleX", "index": 8 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "scaleX", "index": 12 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "scaleX", "index": 16 }], "alpha": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "alpha", "index": 60 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return CreateTitleItemUI;
        }(View));
        panel.CreateTitleItemUI = CreateTitleItemUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var EmojiUI = /** @class */ (function (_super) {
            __extends(EmojiUI, _super);
            function EmojiUI() {
                return _super.call(this) || this;
            }
            EmojiUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.EmojiUI.uiView);
            };
            EmojiUI.uiView = { "type": "View", "props": { "width": 180, "height": 150 }, "child": [{ "type": "Animation", "props": { "y": -58, "x": -52, "var": "_ani", "source": "chat/8/zlp_00.png,chat/8/zlp_01.png,chat/8/zlp_02.png,chat/8/zlp_03.png,chat/8/zlp_04.png,chat/8/zlp_05.png,chat/8/zlp_06.png,chat/8/zlp_07.png,chat/8/zlp_08.png,chat/8/zlp_09.png,chat/8/zlp_10.png,chat/8/zlp_11.png,chat/8/zlp_12.png,chat/8/zlp_13.png,chat/8/zlp_14.png,chat/8/zlp_15.png,chat/8/zlp_16.png,chat/8/zlp_17.png,chat/8/zlp_18.png,chat/8/zlp_19.png", "autoPlay": true } }] };
            return EmojiUI;
        }(View));
        panel.EmojiUI = EmojiUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var EmojiItemUI = /** @class */ (function (_super) {
            __extends(EmojiItemUI, _super);
            function EmojiItemUI() {
                return _super.call(this) || this;
            }
            EmojiItemUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.EmojiItemUI.uiView);
            };
            EmojiItemUI.uiView = { "type": "View", "props": { "width": 408, "height": 150 }, "child": [{ "type": "Image", "props": { "y": -65, "x": -58, "var": "_e1" } }, { "type": "Image", "props": { "y": -65, "x": 193, "var": "_e2" } }] };
            return EmojiItemUI;
        }(View));
        panel.EmojiItemUI = EmojiItemUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var HelperUI = /** @class */ (function (_super) {
            __extends(HelperUI, _super);
            function HelperUI() {
                return _super.call(this) || this;
            }
            HelperUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.HelperUI.uiView);
            };
            HelperUI.uiView = { "type": "View", "props": { "width": 640, "height": 960 }, "child": [{ "type": "Image", "props": { "y": 471, "x": 312, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "top": 10, "right": 10, "left": 10, "bottom": 10 }, "child": [{ "type": "Image", "props": { "top": 0, "skin": "tongyong/tongyong_bg.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "top": 80, "skin": "tongyong/tongyong_top_border_1.png", "sizeGrid": "18,23,21,21", "right": 15, "left": 15, "bottom": 20 } }, { "type": "Panel", "props": { "x": 40, "width": 540, "var": "_panel", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 220, "bottom": 50 }, "child": [{ "type": "Image", "props": { "y": 0, "var": "_img", "centerX": 0 } }] }, { "type": "Image", "props": { "y": 0, "x": 151, "width": 319, "skin": "tongyong/tongyong_bg_title.png", "centerX": 0 }, "child": [{ "type": "Image", "props": { "width": 160, "var": "_gamename", "skin": "tongyong/tongyong_help.png", "centerY": -7, "centerX": 0 } }] }] }, { "type": "BaseButton", "props": { "y": -25, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "right": -27 } }, { "type": "Panel", "props": { "y": 100, "var": "_panTab", "right": 40, "left": 40, "hScrollBarSkin": "tongyong/jindutiaodi.png" }, "child": [{ "type": "Tab", "props": { "y": 0, "var": "_tab", "selectedIndex": 0 } }] }] }] };
            return HelperUI;
        }(View));
        panel.HelperUI = HelperUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var JoinRoomUI = /** @class */ (function (_super) {
            __extends(JoinRoomUI, _super);
            function JoinRoomUI() {
                return _super.call(this) || this;
            }
            JoinRoomUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.JoinRoomUI.uiView);
            };
            JoinRoomUI.uiView = { "type": "View", "props": { "width": 1280, "height": 720, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "var": "_mask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.6 } }, { "type": "Box", "props": { "width": 1280, "var": "_box", "height": 720, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "skin": "res/bg/bg_joinRoom.png", "sizeGrid": "57,50,59,50", "centerY": -12, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "Image", "props": { "y": 25, "x": 372, "skin": "joinRoom/joinRoom_title.png" } }, { "type": "Box", "props": { "y": 87, "x": 247 }, "child": [{ "type": "Image", "props": { "y": 50, "x": -6, "width": 80, "var": "_img1", "height": 60, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 50, "x": 83, "width": 80, "var": "_img2", "height": 60, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 51, "x": 179, "width": 80, "var": "_img3", "height": 60, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 51, "x": 272, "width": 80, "var": "_img4", "height": 60, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 52, "x": 365, "width": 80, "var": "_img5", "height": 60, "anchorY": 0.5, "anchorX": 0.5 } }, { "type": "Image", "props": { "y": 51, "x": 458, "width": 80, "var": "_img6", "height": 60, "anchorY": 0.5, "anchorX": 0.5 } }] }, { "type": "Box", "props": { "y": 401, "x": 465, "width": 850, "height": 400, "anchorY": 0.5, "anchorX": 0.5 }, "child": [{ "type": "ScaleButton", "props": { "y": 53, "x": 115, "var": "_btnNum_1", "skin": "joinRoom/sBtn_num_yellow.png", "scaleValue": 0.9, "scaleTime": 100, "labelSize": 50, "labelFont": "Microsoft YaHei", "labelColors": "#833228", "labelAlign": "center" } }, { "type": "ScaleButton", "props": { "y": 53, "x": 428, "var": "_btnNum_2", "skin": "joinRoom/sBtn_num_yellow.png", "scaleValue": 0.9, "scaleTime": 100, "labelSize": 50, "labelFont": "Microsoft YaHei", "labelColors": "#833228", "labelAlign": "center" } }, { "type": "ScaleButton", "props": { "y": 53, "x": 736, "var": "_btnNum_3", "skin": "joinRoom/sBtn_num_yellow.png", "scaleValue": 0.9, "scaleTime": 100, "labelSize": 50, "labelFont": "Microsoft YaHei", "labelColors": "#833228", "labelAlign": "center" } }, { "type": "ScaleButton", "props": { "y": 153, "x": 115, "var": "_btnNum_4", "skin": "joinRoom/sBtn_num_yellow.png", "scaleValue": 0.9, "scaleTime": 100, "labelSize": 50, "labelFont": "Microsoft YaHei", "labelColors": "#833228", "labelAlign": "center" } }, { "type": "ScaleButton", "props": { "y": 153, "x": 428, "var": "_btnNum_5", "skin": "joinRoom/sBtn_num_yellow.png", "scaleValue": 0.9, "scaleTime": 100, "labelSize": 50, "labelFont": "Microsoft YaHei", "labelColors": "#833228", "labelAlign": "center" } }, { "type": "ScaleButton", "props": { "y": 153, "x": 736, "var": "_btnNum_6", "skin": "joinRoom/sBtn_num_yellow.png", "scaleValue": 0.9, "scaleTime": 100, "labelSize": 50, "labelFont": "Microsoft YaHei", "labelColors": "#833228", "labelAlign": "center" } }, { "type": "ScaleButton", "props": { "y": 252, "x": 115, "var": "_btnNum_7", "skin": "joinRoom/sBtn_num_yellow.png", "scaleValue": 0.9, "scaleTime": 100, "labelSize": 50, "labelFont": "Microsoft YaHei", "labelColors": "#833228", "labelAlign": "center" } }, { "type": "ScaleButton", "props": { "y": 252, "x": 428, "var": "_btnNum_8", "skin": "joinRoom/sBtn_num_yellow.png", "scaleValue": 0.9, "scaleTime": 100, "labelSize": 50, "labelFont": "Microsoft YaHei", "labelColors": "#833228", "labelAlign": "center" } }, { "type": "ScaleButton", "props": { "y": 252, "x": 736, "var": "_btnNum_9", "skin": "joinRoom/sBtn_num_yellow.png", "scaleValue": 0.9, "scaleTime": 100, "labelSize": 50, "labelFont": "Microsoft YaHei", "labelColors": "#833228", "labelAlign": "center" } }, { "type": "ScaleButton", "props": { "y": 353, "x": 428, "var": "_btnNum_0", "skin": "joinRoom/sBtn_num_yellow.png", "scaleValue": 0.9, "scaleTime": 100, "labelSize": 50, "labelFont": "Microsoft YaHei", "labelColors": "#833228", "labelAlign": "center" } }, { "type": "ScaleButton", "props": { "y": 353, "x": 115, "width": 226, "var": "_btnNum_delete", "skin": "joinRoom/sBtn_num_red.png", "scaleValue": 0.9, "scaleTime": 100, "labelSize": 45, "labelFont": "Microsoft YaHei", "labelColors": "#fffefe", "labelAlign": "center", "height": 95 } }, { "type": "ScaleButton", "props": { "y": 352, "x": 739, "width": 237, "var": "_btnNum_retry", "skin": "joinRoom/sBtn_num_green.png", "scaleTime": 100, "labelSize": 45, "labelFont": "Microsoft YaHei", "labelColors": "#fffefe", "labelAlign": "center", "height": 95 } }] }, { "type": "Box", "props": { "y": 207, "x": 311, "width": 324, "var": "_boxTips", "height": 46 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 324, "skin": "menu/menu_brown.png", "sizeGrid": "12,14,16,12", "height": 46, "centerX": 0 } }, { "type": "Label", "props": { "text": "房间号不存在，请重新输入", "mouseEnabled": false, "fontSize": 24, "color": "#fcecd3", "centerY": 0, "centerX": 0, "align": "center" } }] }] }, { "type": "ScaleButton", "props": { "y": 84, "x": 1094, "var": "_btnClose", "skin": "joinRoom/sBtn_close.png", "scaleValue": 0.9, "scaleTime": 100, "label": "" } }] }] };
            return JoinRoomUI;
        }(View));
        panel.JoinRoomUI = JoinRoomUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var JoinTableUI = /** @class */ (function (_super) {
            __extends(JoinTableUI, _super);
            function JoinTableUI() {
                return _super.call(this) || this;
            }
            JoinTableUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.JoinTableUI.uiView);
            };
            JoinTableUI.uiView = { "type": "View", "props": { "width": 640, "height": 960 }, "child": [{ "type": "Image", "props": { "var": "_mask", "top": 0, "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "right": 0, "mouseEnabled": true, "left": 0, "bottom": 0, "alpha": 0.6 } }, { "type": "Box", "props": { "var": "_box", "right": 10, "left": 10, "height": 640, "centerY": 30 }, "child": [{ "type": "Image", "props": { "y": -70, "x": 0, "top": 0, "skin": "tongyong/tongyong_bg.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "height": 940, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "width": 319, "skin": "tongyong/tongyong_bg_title.png", "centerX": 0 }, "child": [{ "type": "Image", "props": { "width": 160, "skin": "joinTable/joinTable_title.png", "centerY": -7, "centerX": 0 } }] }, { "type": "Image", "props": { "top": 80, "skin": "tongyong/tongyong_top_border_1.png", "sizeGrid": "18,23,21,21", "right": 15, "left": 15, "height": 700, "bottom": 21 } }] }, { "type": "BaseButton", "props": { "y": -31, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "right": -27 } }, { "type": "Label", "props": { "y": 223, "var": "_lab", "text": "房间号不存在，请重新输入", "mouseEnabled": false, "fontSize": 18, "color": "#9b5036", "centerX": 0, "align": "center" } }, { "type": "Box", "props": { "y": 128, "centerX": 0 }, "child": [{ "type": "Image", "props": { "var": "_img1", "skin": "joinTable/joinTable_num_bg.png" } }, { "type": "Image", "props": { "x": 87, "var": "_img2", "skin": "joinTable/joinTable_num_bg.png" } }, { "type": "Image", "props": { "x": 174, "var": "_img3", "skin": "joinTable/joinTable_num_bg.png" } }, { "type": "Image", "props": { "x": 261, "var": "_img4", "skin": "joinTable/joinTable_num_bg.png" } }, { "type": "Image", "props": { "x": 348, "var": "_img5", "skin": "joinTable/joinTable_num_bg.png" } }, { "type": "Image", "props": { "x": 435, "var": "_img6", "skin": "joinTable/joinTable_num_bg.png" } }] }, { "type": "Box", "props": { "y": 251, "width": 324, "var": "_boxTips", "height": 46, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 324, "skin": "menu/menu_brown.png", "sizeGrid": "12,14,16,12", "height": 46, "centerX": 0 } }, { "type": "Label", "props": { "text": "房间号不存在，请重新输入", "mouseEnabled": false, "fontSize": 24, "color": "#fcecd3", "centerY": 0, "centerX": 0, "align": "center" } }] }] }] };
            return JoinTableUI;
        }(View));
        panel.JoinTableUI = JoinTableUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var KeFuPanelUI = /** @class */ (function (_super) {
            __extends(KeFuPanelUI, _super);
            function KeFuPanelUI() {
                return _super.call(this) || this;
            }
            KeFuPanelUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.KeFuPanelUI.uiView);
            };
            KeFuPanelUI.uiView = { "type": "View", "props": { "width": 640, "height": 328 }, "child": [{ "type": "Image", "props": { "y": 286, "x": 395, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "width": 620, "var": "_box", "right": 10, "left": 10, "height": 395, "centerY": 0.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "common/bg_common_di.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "height": 399 }, "child": [{ "type": "Image", "props": { "width": 160, "var": "_title", "skin": "common/title_sysytemTip.png", "centerY": -152.5, "centerX": 0 } }] }, { "type": "HTMLDivElement", "props": { "y": 100, "x": 30, "width": 559, "var": "_labMsg", "innerHTML": "htmlText", "height": 200 } }, { "type": "ScaleButton", "props": { "y": 53, "visible": false, "var": "_close", "stateNum": 1, "skin": "common/sBtn_close2.png", "scaleValue": 0.9, "scaleTime": 100, "right": 15 } }, { "type": "BaseButton", "props": { "y": 305, "var": "_btnConfirm", "stateNum": 1, "skin": "common/sBtn_copy.png", "label": "", "centerX": 0 } }] }] };
            return KeFuPanelUI;
        }(View));
        panel.KeFuPanelUI = KeFuPanelUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var MatchSignUI = /** @class */ (function (_super) {
            __extends(MatchSignUI, _super);
            function MatchSignUI() {
                return _super.call(this) || this;
            }
            MatchSignUI.prototype.createChildren = function () {
                View.regComponent("ui.matchSign.MatchSignInfoUI", ui.matchSign.MatchSignInfoUI);
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.MatchSignUI.uiView);
            };
            MatchSignUI.uiView = { "type": "View", "props": { "width": 640, "height": 960 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 640, "skin": "matchSign/微信图片_20171214103007.jpg", "height": 960 } }, { "type": "Label", "props": { "y": 91, "var": "_labTitle", "text": "我的游戏", "fontSize": 26, "color": "#ffffff", "centerX": 0, "cacheAsBitmap": true } }, { "type": "Label", "props": { "y": 132, "var": "_labHalfwayJoin", "text": "中途允许加入", "fontSize": 26, "color": "#ffffff", "centerX": 0, "cacheAsBitmap": true } }, { "type": "Label", "props": { "y": 160, "x": 20, "var": "_labOwner", "text": "房主：xxx", "fontSize": 26, "color": "#ffffff", "cacheAsBitmap": true } }, { "type": "Label", "props": { "y": 162, "var": "_labStartMode", "text": "开赛方式：手动开赛", "right": 20, "fontSize": 26, "color": "#ffffff", "cacheAsBitmap": true } }, { "type": "Label", "props": { "y": 50, "var": "_labName", "text": "缙云麻将", "fontSize": 26, "color": "#ffffff", "centerX": 0, "cacheAsBitmap": true } }, { "type": "MatchSignInfo", "props": { "runtime": "ui.matchSign.MatchSignInfoUI" } }, { "type": "Tab", "props": { "y": 219, "var": "_tab", "centerX": 0 }, "child": [{ "type": "BaseButton", "props": { "x": 0, "stateNum": 2, "skin": "tongyong/tongyong_btn_1.png", "name": "item0", "labelSize": 26, "label": "基本信息" } }, { "type": "BaseButton", "props": { "y": 0, "x": 187, "stateNum": 2, "skin": "tongyong/tongyong_btn_1.png", "name": "item1", "labelSize": 26, "label": "玩家列表" } }, { "type": "BaseButton", "props": { "y": 0, "x": 374, "stateNum": 2, "skin": "tongyong/tongyong_btn_1.png", "name": "item2", "labelSize": 26, "label": "报名管理" } }] }] };
            return MatchSignUI;
        }(View));
        panel.MatchSignUI = MatchSignUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var MsgItemUI = /** @class */ (function (_super) {
            __extends(MsgItemUI, _super);
            function MsgItemUI() {
                return _super.call(this) || this;
            }
            MsgItemUI.prototype.createChildren = function () {
                View.regComponent("Text", laya.display.Text);
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.MsgItemUI.uiView);
            };
            MsgItemUI.uiView = { "type": "View", "props": { "width": 408, "height": 50, "centerY": 0 }, "child": [{ "type": "Text", "props": { "y": 13, "x": 0, "width": 408, "var": "_msg", "text": "你的牌打得也太好了。", "fontSize": 22, "font": "Microsoft YaHei", "color": "#E7E3DA", "align": "center" } }] };
            return MsgItemUI;
        }(View));
        panel.MsgItemUI = MsgItemUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var PlaySheetUI = /** @class */ (function (_super) {
            __extends(PlaySheetUI, _super);
            function PlaySheetUI() {
                return _super.call(this) || this;
            }
            PlaySheetUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.PlaySheetUI.uiView);
            };
            PlaySheetUI.uiView = { "type": "View", "props": { "width": 960, "height": 640, "centerX": 0 }, "child": [{ "type": "Box", "props": { "visible": false, "var": "_view", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "width": 580, "var": "_bg", "skin": "sheet/sheet_timer_layer.png", "sizeGrid": "0,43,-1,44", "centerX": 0, "bottom": 88 }, "child": [{ "type": "Button", "props": { "y": 5, "var": "_next", "stateNum": 2, "skin": "sheet/sheet_forward_button.png", "right": 64 } }, { "type": "Button", "props": { "y": 5, "var": "_last", "stateNum": 2, "skin": "sheet/sheet_back_button.png", "left": 64 } }] }, { "type": "BaseButton", "props": { "var": "_play", "stateNum": 2, "skin": "sheet/sheet_play_button_1.png", "centerX": 0, "bottom": 136 } }, { "type": "BaseButton", "props": { "y": 0, "var": "_exit", "stateNum": 2, "skin": "sheet/sheet_exit_button_1.png", "left": 30 } }, { "type": "Image", "props": { "width": 490, "visible": true, "var": "_progress", "skin": "sheet/time_bg.png", "sizeGrid": "1,3,1,3", "height": 8, "centerX": 0, "bottom": 109, "anchorY": 0.5, "anchorX": 0 }, "child": [{ "type": "Image", "props": { "y": -2, "x": 0, "width": 0, "var": "_fg", "skin": "sheet/sheet_timer_bg.png", "sizeGrid": "1,4,1,4", "height": 8 } }, { "type": "BaseButton", "props": { "y": -24, "x": 0, "var": "_thumb", "stateNum": 2, "skin": "sheet/sheet_play_thumb_1.png", "anchorX": 0.5 } }] }, { "type": "BaseButton", "props": { "y": 344, "var": "_replay", "stateNum": 2, "skin": "sheet/sheet_play_button_1.png", "centerX": 0 } }] }] };
            return PlaySheetUI;
        }(View));
        panel.PlaySheetUI = PlaySheetUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var ReportUI = /** @class */ (function (_super) {
            __extends(ReportUI, _super);
            function ReportUI() {
                return _super.call(this) || this;
            }
            ReportUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.ReportUI.uiView);
            };
            ReportUI.uiView = { "type": "View", "props": { "width": 900, "height": 448 }, "child": [{ "type": "Image", "props": { "y": 215, "x": 442, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "width": 900, "height": 448, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 900, "skin": "realtime/realtime_bg_record.png", "sizeGrid": "100,100,50,50", "height": 448 } }, { "type": "Box", "props": { "y": 0, "x": 0, "width": 900, "var": "_boxResult", "height": 448 }, "child": [{ "type": "List", "props": { "y": 63, "x": 400, "var": "_listResult", "spaceX": 6, "repeatY": 1, "repeatX": 4, "renderType": "render", "height": 362, "hScrollBarSkin": "tongyong/jindutiaodi.png", "centerX": 0 } }, { "type": "Image", "props": { "y": 220, "x": 331, "var": "_imgNoResult", "skin": "realtime/realtime_no_history.png", "centerX": 0 } }] }, { "type": "Box", "props": { "width": 900, "var": "_boxVisiter", "height": 448 }, "child": [{ "type": "Image", "props": { "y": 52, "x": 17, "width": 867, "var": "_imgVisiterBack", "skin": "realtime/realtime_watch_bg.png", "height": 374, "centerX": 0.5 } }, { "type": "List", "props": { "y": 80, "x": 442, "var": "_listVisiter", "vScrollBarSkin": "tongyong/jindutiaodi.png", "spaceY": 30, "spaceX": 90, "repeatY": 3, "repeatX": 5, "renderType": "render", "centerX": 0 } }, { "type": "Image", "props": { "y": 220, "var": "_imgNoVisiter", "skin": "realtime/realtime_no_visit.png", "centerX": 0 } }] }, { "type": "Box", "props": { "y": -36, "width": 473, "var": "_boxRealtime", "height": 79, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "skin": "realtime/realtime_title_record_bg_2.png", "scaleY": 0.8, "scaleX": 0.8, "centerX": 0 } }, { "type": "BaseButton", "props": { "y": 3, "x": 235, "var": "_btnVisiter", "stateNum": 1, "skin": "realtime/realtime_button_others_2.png", "scaleY": 0.8, "scaleX": 0.8 } }, { "type": "BaseButton", "props": { "y": 3, "x": 4, "var": "_btnResult", "stateNum": 1, "skin": "realtime/realtime_btn_record_2.png", "scaleY": 0.8, "scaleX": 0.8 } }] }, { "type": "Image", "props": { "y": -53, "var": "_imgGameEnd", "skin": "realtime/realtime_title_settlement.png", "centerX": 0 } }, { "type": "BaseButton", "props": { "y": -34, "x": 833, "var": "_btnClose", "stateNum": 2, "skin": "tongyong/tongyong_btn_close.png", "scaleY": 0.8, "scaleX": 0.8 } }] }] };
            return ReportUI;
        }(View));
        panel.ReportUI = ReportUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var SetupUI = /** @class */ (function (_super) {
            __extends(SetupUI, _super);
            function SetupUI() {
                return _super.call(this) || this;
            }
            SetupUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.SetupUI.uiView);
            };
            SetupUI.uiView = { "type": "View", "props": { "width": 640, "height": 322 }, "child": [{ "type": "Image", "props": { "y": 152, "x": 267, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "width": 620, "height": 487, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "common/bg_common_di.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "height": 940, "bottom": 0 }, "child": [{ "type": "Image", "props": { "var": "_title", "skin": "common/title_setting.png", "centerY": -190.5, "centerX": 0 } }] }, { "type": "Label", "props": { "y": 135, "x": 83, "text": "音乐", "fontSize": 30, "color": "#9b5036", "bold": true } }, { "type": "Label", "props": { "y": 211, "x": 83, "text": "音效", "fontSize": 30, "color": "#9b5036", "bold": true } }, { "type": "ScaleButton", "props": { "y": 51, "var": "_close", "stateNum": 1, "skin": "common/sBtn_close2.png", "scaleValue": 0.9, "scaleTime": 100, "right": 9 } }, { "type": "ScaleButton", "props": { "y": 399, "var": "_btnExit", "stateNum": 1, "skin": "common/sBtn_changgeAccount.png", "scaleValue": 0.9, "scaleTime": 100, "centerX": -9 } }, { "type": "Label", "props": { "x": 30, "var": "_labVerApp", "text": "label", "fontSize": 18, "color": "#9b5036", "bottom": 35 } }, { "type": "Label", "props": { "var": "_labVerRes", "text": "label", "right": 30, "fontSize": 18, "color": "#9b5036", "bottom": 35 } }, { "type": "HSlider", "props": { "y": 139, "x": 205, "width": 350, "var": "_sliMusic", "value": 0.5, "skin": "tongyong/tongyong_jindutiaodi.png", "sizeGrid": "16,24,9,25" } }, { "type": "HSlider", "props": { "y": 215, "x": 205, "width": 350, "var": "_sliSound", "value": 0.1, "skin": "tongyong/tongyong_jindutiaodi.png", "sizeGrid": "16,24,9,25" } }, { "type": "Box", "props": { "y": 272, "x": 83, "width": 324, "var": "_boxBig", "height": 68 }, "child": [{ "type": "BaseButton", "props": { "y": 0, "x": 121, "var": "_btnCardBigClose", "stateNum": 1, "skin": "setup/setup_btn_on.png" } }, { "type": "BaseButton", "props": { "y": 0, "x": 121, "var": "_btnCardBigOpen", "stateNum": 1, "skin": "setup/setup_btn_off.png" } }, { "type": "Label", "props": { "y": 15, "x": 0, "text": "出牌放大", "fontSize": 30, "color": "#9b5036", "bold": true } }] }] }, { "type": "RadioGroup", "props": { "labels": "label1,label2", "labelFont": "Microsoft YaHei", "labelBold": false } }] };
            return SetupUI;
        }(View));
        panel.SetupUI = SetupUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var ShopHUI = /** @class */ (function (_super) {
            __extends(ShopHUI, _super);
            function ShopHUI() {
                return _super.call(this) || this;
            }
            ShopHUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.ShopHUI.uiView);
            };
            ShopHUI.uiView = { "type": "View", "props": { "width": 1280, "top": 0, "right": 0, "left": 0, "height": 720, "centerY": 0, "centerX": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 306, "x": 415, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "skin": "res/bg/bg_hall.png", "centerY": 0, "centerX": 0 } }, { "type": "Image", "props": { "width": 1211, "top": 100, "skin": "res/shop/bg_toumingdi.png", "sizeGrid": "47,50,56,50", "centerX": 0, "bottom": 10 }, "child": [{ "type": "List", "props": { "var": "_list", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 110, "spaceY": 30, "spaceX": 120, "right": 70, "repeatX": 3, "left": 70, "height": 490, "bottom": 10 } }, { "type": "Label", "props": { "y": 46, "var": "_labDesc", "text": "大时代", "strokeColor": "#741d0f", "stroke": 4, "right": 35, "fontSize": 22, "color": "#fff8da" } }, { "type": "Box", "props": { "width": 750, "top": 3, "height": 60, "centerX": 2.5 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 5, "var": "_tab_slider", "skin": "shop/img_slider.png" } }, { "type": "Image", "props": { "y": 7, "x": 77, "skin": "shop/shop_title_diamond.png" } }, { "type": "Image", "props": { "y": 6, "x": 328, "skin": "shop/shop_title_gold.png" } }, { "type": "Image", "props": { "y": 6, "x": 571, "skin": "shop/shop_title_daoju.png" } }, { "type": "Image", "props": { "y": -2, "x": 7, "width": 240, "var": "_touch_diomand", "height": 60 } }, { "type": "Image", "props": { "y": -3, "x": 251, "width": 240, "var": "_touch_gold", "height": 60 } }, { "type": "Image", "props": { "y": -3, "x": 493, "width": 240, "var": "_touch_prop", "height": 60 } }] }] }, { "type": "Image", "props": { "width": 1280, "top": 0, "skin": "res/shop/bg_dingkuang.png", "height": 90, "centerX": 0 }, "child": [{ "type": "ScaleButton", "props": { "y": 44, "x": 106, "var": "_close", "stateNum": 1, "skin": "createRoom/sBtn_back.png", "scaleValue": 0.9, "scaleTime": 100 } }, { "type": "Image", "props": { "skin": "shop/shop_title_shop.png", "centerY": 0, "centerX": 0 } }, { "type": "Image", "props": { "y": 31, "x": 1009, "skin": "shop/shop_back.png" } }, { "type": "Label", "props": { "y": 36, "x": 1054, "width": 115, "var": "_labDiamond", "text": "label", "height": 24, "fontSize": 24, "color": "#ffdb4b", "align": "right" } }] }] }] };
            return ShopHUI;
        }(View));
        panel.ShopHUI = ShopHUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var ShopVUI = /** @class */ (function (_super) {
            __extends(ShopVUI, _super);
            function ShopVUI() {
                return _super.call(this) || this;
            }
            ShopVUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.ShopVUI.uiView);
            };
            ShopVUI.uiView = { "type": "View", "props": { "width": 637, "height": 839 }, "child": [{ "type": "Image", "props": { "y": 296, "x": 405, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "width": 637, "height": 839, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "width": 567, "skin": "tongyong/tongyong_bg.png", "sizeGrid": "43,50,52,50", "height": 700, "centerX": 0, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 36, "x": -35, "skin": "shop/shopv_bg.png", "centerX": 0, "bottom": 26 } }, { "type": "Image", "props": { "y": -138, "skin": "shop/shop_title.png", "centerX": 0 } }, { "type": "List", "props": { "var": "_list", "vScrollBarSkin": "tongyong/jindutiaodi.png", "top": 81, "spaceY": 21, "spaceX": 46, "right": 55, "repeatX": 2, "left": 55, "bottom": 10 } }, { "type": "Label", "props": { "y": 18, "var": "_labDesc", "text": "存费送费撒房地产的", "strokeColor": "#741d0f", "stroke": 4, "right": 35, "fontSize": 22, "color": "#fff8da" } }] }, { "type": "BaseButton", "props": { "y": -2, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "right": 9 } }, { "type": "Image", "props": { "y": 150, "x": 63, "skin": "shop/shop_back.png" } }, { "type": "Label", "props": { "y": 155, "x": 108, "width": 115, "var": "_labDiamond", "text": "label", "height": 24, "fontSize": 24, "color": "#ffdb4b", "align": "right" } }] }] };
            return ShopVUI;
        }(View));
        panel.ShopVUI = ShopVUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var panel;
    (function (panel) {
        var UpdateUI = /** @class */ (function (_super) {
            __extends(UpdateUI, _super);
            function UpdateUI() {
                return _super.call(this) || this;
            }
            UpdateUI.prototype.createChildren = function () {
                View.regComponent("HTMLDivElement", laya.html.dom.HTMLDivElement);
                _super.prototype.createChildren.call(this);
                this.createView(ui.panel.UpdateUI.uiView);
            };
            UpdateUI.uiView = { "type": "View", "props": { "width": 640, "height": 328 }, "child": [{ "type": "Image", "props": { "y": 286, "x": 395, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "y": 10, "var": "_box", "right": 10, "left": 10, "height": 452, "centerY": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "tongyong/tongyong_bg.png", "sizeGrid": "57,50,59,50", "right": 0, "left": 0, "height": 940, "bottom": 0 }, "child": [{ "type": "Image", "props": { "y": 0, "width": 319, "skin": "tongyong/tongyong_bg_title.png", "centerX": 0 }, "child": [{ "type": "Image", "props": { "width": 160, "var": "_title", "skin": "loading/updata_title.png", "centerY": -7, "centerX": 0 } }] }, { "type": "Image", "props": { "top": 80, "skin": "tongyong/tongyong_top_border_1.png", "sizeGrid": "18,23,21,21", "right": 15, "left": 15, "bottom": 112 } }] }, { "type": "HTMLDivElement", "props": { "y": 100, "x": 30, "width": 559, "var": "_labMsg", "innerHTML": "htmlText", "height": 200 } }, { "type": "BaseButton", "props": { "var": "_btnConfirm", "stateNum": 2, "skin": "loading/btn_update.png", "name": "confirm", "labelSize": 34, "labelColors": "#45483e,#45483e,#45483e,#45483e", "labelAlign": "center", "centerX": 0.5, "bottom": 13 } }, { "type": "BaseButton", "props": { "y": -31, "visible": false, "var": "_close", "stateNum": 2, "skin": "tongyong/close.png", "right": -27 } }] }] };
            return UpdateUI;
        }(View));
        panel.UpdateUI = UpdateUI;
    })(panel = ui.panel || (ui.panel = {}));
})(ui || (ui = {}));
(function (ui) {
    var poker;
    (function (poker) {
        var CardBigUI = /** @class */ (function (_super) {
            __extends(CardBigUI, _super);
            function CardBigUI() {
                return _super.call(this) || this;
            }
            CardBigUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.poker.CardBigUI.uiView);
            };
            CardBigUI.uiView = { "type": "View", "props": { "width": 133, "height": 168 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "_imgFont", "skin": "pokerCardBig/pokerCardBig_front.png" } }, { "type": "Image", "props": { "y": 0, "x": 0, "var": "_imgFlowerSmall", "skin": "pokerCardBig/pokerCardBig_flower_small_0.png" } }, { "type": "Image", "props": { "y": 0, "x": 0, "var": "_imgFlowerBig", "skin": "pokerCardBig/pokerCardBig_flower_big_2.png" } }, { "type": "Image", "props": { "y": 0, "x": 0, "var": "_imgNum", "skin": "pokerCardBig/pokerCardBig_black_11.png" } }, { "type": "Image", "props": { "y": 0, "x": -1, "var": "_imgBack", "skin": "pokerCardBig/pokerCardBig_back.png", "skewY": 0 }, "compId": 2 }, { "type": "Image", "props": { "visible": false, "var": "_mask", "skin": "pokerCardBig/pokerCardBig_mask.png", "alpha": 0.7 } }], "animations": [{ "nodes": [{ "target": 2, "keyframes": { "y": [{ "value": 84, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "y", "index": 0 }], "x": [{ "value": 66, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 0 }], "skewY": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "skewY", "index": 0 }, { "value": 180, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "skewY", "index": 10 }], "anchorY": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "anchorY", "index": 0 }], "anchorX": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "anchorX", "index": 0 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return CardBigUI;
        }(View));
        poker.CardBigUI = CardBigUI;
    })(poker = ui.poker || (ui.poker = {}));
})(ui || (ui = {}));
(function (ui) {
    var poker;
    (function (poker) {
        var CardSmallUI = /** @class */ (function (_super) {
            __extends(CardSmallUI, _super);
            function CardSmallUI() {
                return _super.call(this) || this;
            }
            CardSmallUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.poker.CardSmallUI.uiView);
            };
            CardSmallUI.uiView = { "type": "View", "props": { "width": 72, "height": 92 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "pokerCardSmall/pokerCardSmall_front.png" } }, { "type": "Image", "props": { "y": 0, "x": 0, "var": "_imgNum", "skin": "pokerCardSmall/pokerCardSmall_black_1.png" } }, { "type": "Image", "props": { "y": 0, "x": 0, "var": "_imgFlowerBig", "skin": "pokerCardSmall/pokerCardSmall_flower_big_0.png" } }, { "type": "Image", "props": { "y": 0, "x": 0, "var": "_imgBack", "skin": "pokerCardSmall/pokerCardSmall_back.png" } }] };
            return CardSmallUI;
        }(View));
        poker.CardSmallUI = CardSmallUI;
    })(poker = ui.poker || (ui.poker = {}));
})(ui || (ui = {}));
(function (ui) {
    var poker;
    (function (poker) {
        var GameEndUI = /** @class */ (function (_super) {
            __extends(GameEndUI, _super);
            function GameEndUI() {
                return _super.call(this) || this;
            }
            GameEndUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.poker.GameEndUI.uiView);
            };
            GameEndUI.uiView = { "type": "View", "props": { "width": 534, "height": 358 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "poker/poker_next_bg.png" } }, { "type": "Label", "props": { "y": 90, "x": 24, "width": 181, "text": "昵称", "height": 20, "fontSize": 20, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "y": 90, "x": 240, "width": 60, "text": "剩余牌", "fontSize": 20, "color": "#ffffff" } }, { "type": "Label", "props": { "y": 90, "x": 360, "width": 40, "text": "炸弹", "fontSize": 20, "color": "#ffffff" } }, { "type": "Label", "props": { "y": 90, "x": 430, "width": 60, "text": "积分", "height": 20, "fontSize": 20, "color": "#ffffff", "align": "center" } }, { "type": "List", "props": { "y": 122, "x": 0, "width": 534, "var": "_list", "spaceY": 20, "repeatY": 4, "repeatX": 1, "height": 187 } }, { "type": "Label", "props": { "y": 40, "x": 0, "width": 534, "var": "_labInfo", "height": 20, "fontSize": 20, "color": "#ffffff", "align": "center" } }, { "type": "BaseButton", "props": { "y": 258, "var": "_btnNext", "stateNum": 2, "skin": "poker/poker_next_btn.png", "centerX": 0 } }, { "type": "BaseButton", "props": { "y": 258, "x": 10, "var": "_btnScore", "stateNum": 2, "skin": "poker/poker_score_btn.png", "centerX": 0 } }] };
            return GameEndUI;
        }(View));
        poker.GameEndUI = GameEndUI;
    })(poker = ui.poker || (ui.poker = {}));
})(ui || (ui = {}));
(function (ui) {
    var poker;
    (function (poker) {
        var GameEndInfoRendererUI = /** @class */ (function (_super) {
            __extends(GameEndInfoRendererUI, _super);
            function GameEndInfoRendererUI() {
                return _super.call(this) || this;
            }
            GameEndInfoRendererUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.poker.GameEndInfoRendererUI.uiView);
            };
            GameEndInfoRendererUI.uiView = { "type": "View", "props": { "width": 534, "height": 20 }, "child": [{ "type": "Label", "props": { "y": 0, "x": 24, "width": 181, "var": "_labNickname", "text": "昵称", "height": 20, "fontSize": 20, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "y": 0, "x": 240, "width": 60, "var": "_labLeftCards", "text": "剩余牌", "fontSize": 20, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "y": 0, "x": 360, "width": 40, "var": "_labBoom", "text": "炸弹", "fontSize": 20, "color": "#ffffff", "align": "center" } }, { "type": "Label", "props": { "y": 0, "x": 430, "width": 60, "var": "_labScore", "text": "积分", "height": 20, "fontSize": 20, "color": "#ffffff", "align": "center" } }, { "type": "Image", "props": { "y": -2, "x": 5, "var": "_imgMaster", "skin": "wakeng/waKeng_kengzhu.png", "scaleY": 0.5, "scaleX": 0.5 } }] };
            return GameEndInfoRendererUI;
        }(View));
        poker.GameEndInfoRendererUI = GameEndInfoRendererUI;
    })(poker = ui.poker || (ui.poker = {}));
})(ui || (ui = {}));
(function (ui) {
    var poker;
    (function (poker) {
        var PokerBoomUI = /** @class */ (function (_super) {
            __extends(PokerBoomUI, _super);
            function PokerBoomUI() {
                return _super.call(this) || this;
            }
            PokerBoomUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.poker.PokerBoomUI.uiView);
            };
            PokerBoomUI.uiView = { "type": "View", "props": { "width": 41, "height": 42 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "poker/poker_boom.png" } }] };
            return PokerBoomUI;
        }(View));
        poker.PokerBoomUI = PokerBoomUI;
    })(poker = ui.poker || (ui.poker = {}));
})(ui || (ui = {}));
(function (ui) {
    var poker;
    (function (poker) {
        var PokerClockUI = /** @class */ (function (_super) {
            __extends(PokerClockUI, _super);
            function PokerClockUI() {
                return _super.call(this) || this;
            }
            PokerClockUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.poker.PokerClockUI.uiView);
            };
            PokerClockUI.uiView = { "type": "View", "props": { "width": 69, "height": 79 }, "child": [{ "type": "Image", "props": { "y": 64, "x": 37, "var": "_img", "skin": "poker/poker_clock.png", "rotation": -2, "anchorY": 0.8, "anchorX": 0.5 }, "compId": 2 }, { "type": "FontClip", "props": { "y": 41, "var": "_num", "value": "15", "skin": "poker/daojishi.png", "sheet": "0123456789", "interval": 1000, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 } }], "animations": [{ "nodes": [{ "target": 2, "keyframes": { "rotation": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "rotation", "index": 0 }, { "value": 2, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "rotation", "index": 2 }, { "value": -2, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "rotation", "index": 4 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return PokerClockUI;
        }(View));
        poker.PokerClockUI = PokerClockUI;
    })(poker = ui.poker || (ui.poker = {}));
})(ui || (ui = {}));
(function (ui) {
    var poker;
    (function (poker) {
        var PokerConUI = /** @class */ (function (_super) {
            __extends(PokerConUI, _super);
            function PokerConUI() {
                return _super.call(this) || this;
            }
            PokerConUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.poker.PokerConUI.uiView);
            };
            PokerConUI.uiView = { "type": "View", "props": { "width": 1280, "top": 0, "centerX": 0, "bottom": 0 }, "child": [{ "type": "Box", "props": { "x": 0, "width": 1280, "var": "_boxCards", "top": 0, "bottom": 0 } }] };
            return PokerConUI;
        }(View));
        poker.PokerConUI = PokerConUI;
    })(poker = ui.poker || (ui.poker = {}));
})(ui || (ui = {}));
(function (ui) {
    var poker;
    (function (poker) {
        var PokerCountUI = /** @class */ (function (_super) {
            __extends(PokerCountUI, _super);
            function PokerCountUI() {
                return _super.call(this) || this;
            }
            PokerCountUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.poker.PokerCountUI.uiView);
            };
            PokerCountUI.uiView = { "type": "View", "props": { "width": 49, "height": 63 }, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "poker/poker_card.png" } }] };
            return PokerCountUI;
        }(View));
        poker.PokerCountUI = PokerCountUI;
    })(poker = ui.poker || (ui.poker = {}));
})(ui || (ui = {}));
(function (ui) {
    var poker;
    (function (poker) {
        var boomUI = /** @class */ (function (_super) {
            __extends(boomUI, _super);
            function boomUI() {
                return _super.call(this) || this;
            }
            boomUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.poker.boomUI.uiView);
            };
            boomUI.uiView = { "type": "View", "props": { "width": 960, "height": 640 }, "child": [{ "type": "Image", "props": { "y": 323, "x": 479, "skin": "poker/boom/boon_1.png", "scaleY": 0.5, "scaleX": 0.5, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 0, "x": 137, "skin": "poker/boom/boon_2.png", "scaleY": 0.5, "scaleX": 0.5, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 3 }] }, { "type": "Image", "props": { "y": 331, "x": 479, "skin": "poker/boom/b_1.png", "scaleY": 0.5, "scaleX": 0.5, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 4 }, { "type": "Image", "props": { "y": 331, "x": 489, "skin": "poker/boom/b_2.png", "scaleY": 0.5, "scaleX": 0.5, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 5 }, { "type": "Image", "props": { "y": 330, "x": 474, "skin": "poker/boom/b_3.png", "scaleY": 0.5, "scaleX": 0.5, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 6 }, { "type": "Image", "props": { "y": 335, "x": 466, "skin": "poker/boom/b_4.png", "scaleY": 0.5, "scaleX": 0.5, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 7 }, { "type": "Image", "props": { "y": 329, "x": 456, "skin": "poker/boom/b_5.png", "scaleY": 0.5, "scaleX": 0.5, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 8 }, { "type": "Image", "props": { "y": 340, "x": 456, "skin": "poker/boom/b_6.png", "scaleY": 0.5, "scaleX": 0.5, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 9 }, { "type": "Image", "props": { "y": 338, "x": 461, "skin": "poker/boom/b_7.png", "scaleY": 0.5, "scaleX": 0.5, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 10 }, { "type": "Image", "props": { "y": 341, "x": 467, "skin": "poker/boom/b_8.png", "scaleY": 0.5, "scaleX": 0.5, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 11 }], "animations": [{ "nodes": [{ "target": 2, "keyframes": { "y": [{ "value": -90, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "y", "index": 0 }, { "value": 304, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "y", "index": 10 }], "x": [{ "value": 473, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 0 }, { "value": 463, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "x", "index": 10 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 9 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 10 }] } }, { "target": 3, "keyframes": { "x": [{ "value": 112, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "x", "index": 0 }, { "value": 160, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "x", "index": 1 }, { "value": 112, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "x", "index": 2 }, { "value": 143, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "x", "index": 3 }, { "value": 121, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "x", "index": 4 }, { "value": 151, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "x", "index": 5 }, { "value": 123, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "x", "index": 6 }, { "value": 153, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "x", "index": 7 }, { "value": 131, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "x", "index": 8 }, { "value": 147, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "x", "index": 9 }, { "value": 132, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "x", "index": 10 }], "pivotX": [{ "value": 34, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "pivotX", "index": 0 }, { "value": 82, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "pivotX", "index": 1 }, { "value": 34, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "pivotX", "index": 2 }, { "value": 65, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "pivotX", "index": 3 }, { "value": 43, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "pivotX", "index": 4 }, { "value": 73, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "pivotX", "index": 5 }, { "value": 45, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "pivotX", "index": 6 }, { "value": 75, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "pivotX", "index": 7 }, { "value": 53, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "pivotX", "index": 8 }, { "value": 69, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "pivotX", "index": 9 }, { "value": 54, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "pivotX", "index": 10 }], "alpha": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 1 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 2 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 3 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 4 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 5 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 6 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 7 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 8 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 9 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 10 }] } }, { "target": 4, "keyframes": { "x": [{ "value": 479, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "x", "index": 0 }, { "value": 459, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "x", "index": 9 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 9 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 10 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 11 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 4, "key": "alpha", "index": 12 }] } }, { "target": 5, "keyframes": { "x": [{ "value": 489, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "x", "index": 0 }, { "value": 467, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "x", "index": 12 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 11 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 12 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 13 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "alpha", "index": 14 }] } }, { "target": 6, "keyframes": { "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "alpha", "index": 13 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "alpha", "index": 14 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "alpha", "index": 15 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "alpha", "index": 16 }] } }, { "target": 7, "keyframes": { "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 15 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 16 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 17 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 18 }] } }, { "target": 8, "keyframes": { "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "alpha", "index": 17 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "alpha", "index": 18 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "alpha", "index": 19 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "alpha", "index": 20 }] } }, { "target": 9, "keyframes": { "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "alpha", "index": 19 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "alpha", "index": 20 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "alpha", "index": 21 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "alpha", "index": 22 }] } }, { "target": 10, "keyframes": { "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "alpha", "index": 21 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "alpha", "index": 22 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "alpha", "index": 23 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "alpha", "index": 24 }] } }, { "target": 11, "keyframes": { "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "alpha", "index": 23 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "alpha", "index": 24 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "alpha", "index": 25 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "alpha", "index": 26 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return boomUI;
        }(View));
        poker.boomUI = boomUI;
    })(poker = ui.poker || (ui.poker = {}));
})(ui || (ui = {}));
(function (ui) {
    var poker;
    (function (poker) {
        var lianduiUI = /** @class */ (function (_super) {
            __extends(lianduiUI, _super);
            function lianduiUI() {
                return _super.call(this) || this;
            }
            lianduiUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.poker.lianduiUI.uiView);
            };
            lianduiUI.uiView = { "type": "View", "props": { "width": 960, "height": 640 }, "child": [{ "type": "Image", "props": { "y": 321, "x": 480, "skin": "poker/type_plane_1.png", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 7 }, { "type": "Image", "props": { "y": 348, "x": 551, "skin": "poker/liandui/poker_dui.png", "scaleY": 1, "scaleX": 1, "centerY": 0, "centerX": 100, "anchorY": 1, "anchorX": 0, "alpha": 1 }, "compId": 2 }, { "type": "Image", "props": { "y": 348, "x": 409, "skin": "poker/liandui/poker_lian.png", "scaleY": 1, "scaleX": 1, "centerY": 0, "centerX": -100, "anchorY": 1, "anchorX": 1, "alpha": 1 }, "compId": 3 }], "animations": [{ "nodes": [{ "target": 2, "keyframes": { "scaleY": [{ "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 5 }, { "value": 1.3, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 7 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 9 }], "scaleX": [{ "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 5 }, { "value": 1.3, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 7 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 9 }], "centerX": [{ "value": 80, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "centerX", "index": 0 }, { "value": 27, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "centerX", "index": 5 }, { "value": 35, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "centerX", "index": 7 }, { "value": 27, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "centerX", "index": 9 }], "alpha": [{ "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 5 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 24 }] } }, { "target": 3, "keyframes": { "scaleY": [{ "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleY", "index": 5 }, { "value": 1.3, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleY", "index": 7 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleY", "index": 9 }], "scaleX": [{ "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleX", "index": 5 }, { "value": 1.3, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleX", "index": 7 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "scaleX", "index": 9 }], "centerX": [{ "value": -80, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "centerX", "index": 0 }, { "value": -27, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "centerX", "index": 5 }, { "value": -35, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "centerX", "index": 7 }, { "value": -27, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "centerX", "index": 9 }], "alpha": [{ "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 5 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 3, "key": "alpha", "index": 24 }] } }, { "target": 7, "keyframes": { "scaleX": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "scaleX", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "scaleX", "index": 5 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "scaleX", "index": 6 }, { "value": 3, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "scaleX", "index": 9 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 6 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 9 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return lianduiUI;
        }(View));
        poker.lianduiUI = lianduiUI;
    })(poker = ui.poker || (ui.poker = {}));
})(ui || (ui = {}));
(function (ui) {
    var poker;
    (function (poker) {
        var palneUI = /** @class */ (function (_super) {
            __extends(palneUI, _super);
            function palneUI() {
                return _super.call(this) || this;
            }
            palneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.poker.palneUI.uiView);
            };
            palneUI.uiView = { "type": "View", "props": { "width": 960, "height": 640 }, "child": [{ "type": "Animation", "props": { "y": 289.5, "x": 481, "width": 3.5, "source": "res/poker/plane.ani", "height": 2, "alpha": 1 }, "compId": 6 }, { "type": "Image", "props": { "y": 278, "x": 442, "skin": "poker/type_plane_1.png" }, "compId": 8 }, { "type": "Image", "props": { "y": 280, "x": 645, "skin": "poker/type_plane.png", "alpha": 1 }, "compId": 7 }], "animations": [{ "nodes": [{ "target": 6, "keyframes": { "y": [{ "value": 195, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "y", "index": 0 }, { "value": 177, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "y", "index": 2 }, { "value": 293.8181818181818, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "y", "index": 12 }, { "value": 330.6363636363636, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "y", "index": 22 }, { "value": 357, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "y", "index": 24 }], "x": [{ "value": 1314, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "x", "index": 0 }, { "value": -361, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "x", "index": 24 }], "width": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "width", "index": 0 }, { "value": 6, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "width", "index": 24 }], "height": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "height", "index": 0 }, { "value": 3, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "height", "index": 24 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "alpha", "index": 2 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "alpha", "index": 22 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "alpha", "index": 24 }] } }, { "target": 7, "keyframes": { "x": [{ "value": 660, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 0 }, { "value": 660, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 8 }, { "value": 660, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 9 }, { "value": 380, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 13 }, { "value": 440, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "x", "index": 18 }], "skewX": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "skewX", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "skewX", "index": 9 }, { "value": -15, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "skewX", "index": 13 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "skewX", "index": 18 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 8 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 9 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 13 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 7, "key": "alpha", "index": 32 }] } }, { "target": 8, "keyframes": { "x": [{ "value": 442, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "x", "index": 0 }, { "value": 532, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "x", "index": 11 }, { "value": 358, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "x", "index": 13 }, { "value": 338, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "x", "index": 15 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "scaleX", "index": 9 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "scaleX", "index": 11 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "scaleX", "index": 13 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "scaleX", "index": 15 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "alpha", "index": 9 }, { "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "alpha", "index": 11 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 8, "key": "alpha", "index": 15 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return palneUI;
        }(View));
        poker.palneUI = palneUI;
    })(poker = ui.poker || (ui.poker = {}));
})(ui || (ui = {}));
(function (ui) {
    var poker;
    (function (poker) {
        var sandaierUI = /** @class */ (function (_super) {
            __extends(sandaierUI, _super);
            function sandaierUI() {
                return _super.call(this) || this;
            }
            sandaierUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.poker.sandaierUI.uiView);
            };
            sandaierUI.uiView = { "type": "View", "props": { "width": 960, "height": 640 }, "child": [{ "type": "Image", "props": { "skin": "poker/type_threetwo.png", "centerY": 0, "centerX": 0, "anchorY": 2, "anchorX": 0.5 }, "compId": 2 }], "animations": [{ "nodes": [{ "target": 2, "keyframes": { "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 4 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 5 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 4 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 5 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 4 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 24 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return sandaierUI;
        }(View));
        poker.sandaierUI = sandaierUI;
    })(poker = ui.poker || (ui.poker = {}));
})(ui || (ui = {}));
(function (ui) {
    var poker;
    (function (poker) {
        var shengliUI = /** @class */ (function (_super) {
            __extends(shengliUI, _super);
            function shengliUI() {
                return _super.call(this) || this;
            }
            shengliUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.poker.shengliUI.uiView);
            };
            shengliUI.uiView = { "type": "View", "props": { "width": 960, "height": 640 }, "child": [{ "type": "Image", "props": { "y": 296, "x": 405, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "width": 960, "var": "_box", "height": 640, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": 139, "x": 466, "skin": "poker/win_light_1.png", "scaleY": 0.2, "scaleX": 0.2, "centerX": -13.5, "anchorY": 0.5, "anchorX": 0.5, "alpha": 0 }, "compId": 15 }, { "type": "Image", "props": { "y": 257, "x": 480, "skin": "poker/win_light_4.png", "scaleY": 0.2, "scaleX": 0.2, "centerX": 0, "anchorY": 1, "anchorX": 0.5, "alpha": 0 }, "compId": 18 }, { "type": "Image", "props": { "y": 139, "x": 480, "skin": "poker/win_light_4.png", "scaleY": 0.2, "scaleX": 0.2, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5, "alpha": 0 }, "compId": 28 }, { "type": "Image", "props": { "y": 163, "x": 480, "width": 1024, "skin": "poker/poker_win_bg.png", "scaleY": 0, "scaleX": 0, "height": 306, "centerX": 0, "anchorY": 0, "anchorX": 0.5, "alpha": 0, "sizeGrid": "15,0,25,0" }, "compId": 11 }, { "type": "Image", "props": { "y": 198, "x": 480, "skin": "poker/light_quan.png", "scaleY": 1.375, "scaleX": 1.375, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5, "alpha": 0.22499999999999998 }, "compId": 29 }, { "type": "Image", "props": { "y": 188, "x": 480, "skin": "poker/light_quan.png", "scaleY": 0.1, "scaleX": 0.1, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5, "alpha": 0 }, "compId": 26 }, { "type": "Image", "props": { "y": 85, "skin": "poker/win_light_2.png", "centerX": 0, "alpha": 0 }, "compId": 16 }, { "type": "Image", "props": { "y": 164, "x": 166, "skin": "poker/win_light_3.png", "scaleY": 0.2, "scaleX": 0.2, "centerX": 0, "alpha": 0 }, "compId": 17 }, { "type": "Image", "props": { "y": 144, "x": 500, "skin": "poker/poker_li.png", "scaleY": 0.1, "scaleX": 0.1, "centerX": 20, "anchorY": 1.5, "anchorX": 0.5, "alpha": 0 }, "compId": 25 }, { "type": "Image", "props": { "y": 107, "x": 479, "skin": "poker/poker_sldi.png", "scaleY": 0.1, "scaleX": 0.1, "centerX": 0, "anchorY": 0, "anchorX": 0.5, "alpha": 0 }, "compId": 23 }, { "type": "Image", "props": { "y": 129, "skin": "poker/poker_sheng.png", "scaleY": 0.1, "scaleX": 0.1, "pivotY": 0, "pivotX": 0, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5, "alpha": 0 }, "compId": 24 }] }], "animations": [{ "nodes": [{ "target": 11, "keyframes": { "scaleY": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "scaleY", "index": 3 }], "scaleX": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "scaleX", "index": 3 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "alpha", "index": 3 }] } }, { "target": 26, "keyframes": { "scaleY": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 26, "key": "scaleY", "index": 0 }, { "value": 1.6, "tweenMethod": "linearNone", "tween": true, "target": 26, "key": "scaleY", "index": 36 }], "scaleX": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 26, "key": "scaleX", "index": 0 }, { "value": 1.6, "tweenMethod": "linearNone", "tween": true, "target": 26, "key": "scaleX", "index": 36 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 26, "key": "alpha", "index": 0 }, { "value": 0.6, "tweenMethod": "linearNone", "tween": true, "target": 26, "key": "alpha", "index": 18 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 26, "key": "alpha", "index": 36 }] } }, { "target": 23, "keyframes": { "y": [{ "value": 107, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "y", "index": 0 }, { "value": 107, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "y", "index": 9 }, { "value": 104, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "y", "index": 11 }, { "value": 107, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "y", "index": 13 }, { "value": 107, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "y", "index": 14 }], "x": [{ "value": 479, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "x", "index": 0 }], "scaleY": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "scaleY", "index": 9 }], "scaleX": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "scaleX", "index": 0 }, { "value": 1.05, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "scaleX", "index": 9 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "scaleX", "index": 11 }, { "value": 0.96, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "scaleX", "index": 13 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "scaleX", "index": 14 }], "anchorY": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "anchorY", "index": 0 }], "anchorX": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "anchorX", "index": 0 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 23, "key": "alpha", "index": 9 }] } }, { "target": 24, "keyframes": { "y": [{ "value": 129, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "y", "index": 0 }, { "value": 84, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "y", "index": 20 }], "scaleY": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "scaleY", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "scaleY", "index": 7 }, { "value": 0.9, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "scaleY", "index": 9 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "scaleY", "index": 13 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "scaleY", "index": 16 }], "scaleX": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "scaleX", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "scaleX", "index": 7 }, { "value": 0.9, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "scaleX", "index": 9 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "scaleX", "index": 13 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "scaleX", "index": 16 }], "anchorY": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "anchorY", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "anchorY", "index": 20 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 24, "key": "alpha", "index": 7 }] } }, { "target": 25, "keyframes": { "y": [{ "value": 144, "tweenMethod": "linearNone", "tween": true, "target": 25, "key": "y", "index": 0 }, { "value": 144, "tweenMethod": "linearNone", "tween": true, "target": 25, "key": "y", "index": 7 }, { "value": 144, "tweenMethod": "linearNone", "tween": true, "target": 25, "key": "y", "index": 10 }, { "value": 136, "tweenMethod": "linearNone", "tween": true, "target": 25, "key": "y", "index": 17 }, { "value": 144, "tweenMethod": "linearNone", "tween": true, "target": 25, "key": "y", "index": 29 }, { "value": 136, "tweenMethod": "linearNone", "tween": true, "target": 25, "key": "y", "index": 44 }, { "value": 144, "tweenMethod": "linearNone", "tween": true, "target": 25, "key": "y", "index": 58 }, { "value": 136, "tweenMethod": "linearNone", "tween": true, "target": 25, "key": "y", "index": 74 }, { "value": 144, "tweenMethod": "linearNone", "tween": true, "target": 25, "key": "y", "index": 96 }], "scaleY": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 25, "key": "scaleY", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 25, "key": "scaleY", "index": 7 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 25, "key": "scaleY", "index": 10 }], "scaleX": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 25, "key": "scaleX", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 25, "key": "scaleX", "index": 7 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 25, "key": "scaleX", "index": 10 }], "anchorY": [{ "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 25, "key": "anchorY", "index": 0 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 25, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 25, "key": "alpha", "index": 7 }] } }, { "target": 15, "keyframes": { "y": [{ "value": 139, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "y", "index": 0 }], "x": [{ "value": 466, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "x", "index": 0 }], "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleY", "index": 10 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleX", "index": 10 }], "anchorY": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "anchorY", "index": 0 }], "anchorX": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "anchorX", "index": 0 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "alpha", "index": 10 }, { "value": 0.6, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "alpha", "index": 24 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "alpha", "index": 38 }] } }, { "target": 18, "keyframes": { "y": [{ "value": 257, "tweenMethod": "linearNone", "tween": true, "target": 18, "key": "y", "index": 0 }], "x": [{ "value": 480, "tweenMethod": "linearNone", "tween": true, "target": 18, "key": "x", "index": 0 }], "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 18, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 18, "key": "scaleY", "index": 16 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 18, "key": "scaleY", "index": 30 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 18, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 18, "key": "scaleX", "index": 16 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 18, "key": "scaleX", "index": 30 }], "anchorY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 18, "key": "anchorY", "index": 0 }], "anchorX": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 18, "key": "anchorX", "index": 0 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 18, "key": "alpha", "index": 0 }, { "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 18, "key": "alpha", "index": 16 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 18, "key": "alpha", "index": 30 }] } }, { "target": 28, "keyframes": { "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 28, "key": "scaleY", "index": 0 }, { "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 28, "key": "scaleY", "index": 19 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 28, "key": "scaleY", "index": 32 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 28, "key": "scaleX", "index": 0 }, { "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 28, "key": "scaleX", "index": 19 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 28, "key": "scaleX", "index": 32 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 28, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 28, "key": "alpha", "index": 19 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 28, "key": "alpha", "index": 32 }] } }, { "target": 16, "keyframes": { "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "alpha", "index": 2 }] } }, { "target": 17, "keyframes": { "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleY", "index": 3 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "scaleX", "index": 3 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 17, "key": "alpha", "index": 3 }] } }, { "target": 29, "keyframes": { "scaleY": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "scaleY", "index": 0 }, { "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "scaleY", "index": 15 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "scaleY", "index": 33 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "scaleY", "index": 50 }], "scaleX": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "scaleX", "index": 0 }, { "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "scaleX", "index": 15 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "scaleX", "index": 33 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "scaleX", "index": 50 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "alpha", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "alpha", "index": 15 }, { "value": 0.4, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "alpha", "index": 33 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 29, "key": "alpha", "index": 50 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }, { "nodes": [], "name": "ani2", "id": 2, "frameRate": 24, "action": 0 }, { "nodes": [], "name": "ani3", "id": 3, "frameRate": 24, "action": 0 }] };
            return shengliUI;
        }(View));
        poker.shengliUI = shengliUI;
    })(poker = ui.poker || (ui.poker = {}));
})(ui || (ui = {}));
(function (ui) {
    var poker;
    (function (poker) {
        var shibaiUI = /** @class */ (function (_super) {
            __extends(shibaiUI, _super);
            function shibaiUI() {
                return _super.call(this) || this;
            }
            shibaiUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.poker.shibaiUI.uiView);
            };
            shibaiUI.uiView = { "type": "View", "props": { "width": 960, "height": 640 }, "child": [{ "type": "Image", "props": { "y": 306, "x": 415, "var": "_mask", "skin": "tongyong/jindutiaodi.png", "sizeGrid": "5,5,5,5", "mouseEnabled": true, "centerY": 0, "centerX": 0, "alpha": 0.7 } }, { "type": "Box", "props": { "width": 960, "var": "_box", "height": 640, "centerY": 0, "centerX": 0 }, "child": [{ "type": "Image", "props": { "y": -23, "x": 213, "skin": "poker/fail_light_1.png" }, "compId": 10 }, { "type": "Image", "props": { "y": 85, "skin": "poker/fail_light_2.png", "centerX": 0 }, "compId": 11 }, { "type": "Image", "props": { "y": 163, "x": -32, "skin": "poker/poker_fail_bg.png", "height": 306, "centerX": 0, "sizeGrid": "22,0,24,0" }, "compId": 9 }, { "type": "Image", "props": { "y": 164, "skin": "poker/fail_light_3.png", "centerX": 0 }, "compId": 12 }, { "type": "Image", "props": { "y": 107, "x": 480, "width": 457, "skin": "poker/poker_sbdi.png", "scaleY": 1, "scaleX": 1, "height": 115, "centerX": 0, "anchorY": 0, "anchorX": 0.5, "alpha": 1 }, "compId": 13 }, { "type": "Image", "props": { "y": 132, "x": 500, "skin": "poker/poker_bai.png", "scaleY": 1, "scaleX": 1, "centerX": 20, "anchorY": 1.5, "anchorX": 0.5, "alpha": 1 }, "compId": 15 }, { "type": "Image", "props": { "y": 94, "x": 10, "skin": "poker/poker_shi.png", "scaleY": 1, "scaleX": 1, "pivotY": 0, "pivotX": 0, "centerX": 0, "anchorY": 0, "anchorX": 0.5, "alpha": 1 }, "compId": 14 }] }], "animations": [{ "nodes": [{ "target": 13, "keyframes": { "y": [{ "value": 107, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 0 }, { "value": 107, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 7 }, { "value": 104, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 9 }, { "value": 107, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 11 }, { "value": 107, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 13 }, { "value": 107, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 14 }, { "value": 107, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "y", "index": 28 }], "scaleY": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "scaleY", "index": 9 }], "scaleX": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "scaleX", "index": 0 }, { "value": 1.05, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "scaleX", "index": 9 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "scaleX", "index": 11 }, { "value": 0.96, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "scaleX", "index": 13 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "scaleX", "index": 14 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 13, "key": "alpha", "index": 9 }] } }, { "target": 14, "keyframes": { "y": [{ "value": 129, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 0 }, { "value": 116, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 7 }, { "value": 114, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 9 }, { "value": 108, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 13 }, { "value": 100, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 16 }, { "value": 94, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "y", "index": 20 }], "scaleY": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleY", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleY", "index": 7 }, { "value": 0.9, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleY", "index": 9 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleY", "index": 13 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleY", "index": 16 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleY", "index": 20 }], "scaleX": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleX", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleX", "index": 7 }, { "value": 0.9, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleX", "index": 9 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleX", "index": 13 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleX", "index": 16 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "scaleX", "index": 20 }], "anchorY": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "anchorY", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "anchorY", "index": 20 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "alpha", "index": 7 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 14, "key": "alpha", "index": 20 }] } }, { "target": 15, "keyframes": { "y": [{ "value": 130, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "y", "index": 0 }, { "value": 130, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "y", "index": 7 }, { "value": 132, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "y", "index": 10 }, { "value": 124, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "y", "index": 17 }, { "value": 132, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "y", "index": 28 }, { "value": 124, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "y", "index": 41 }, { "value": 132, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "y", "index": 57 }], "scaleY": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleY", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleY", "index": 7 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleY", "index": 10 }], "scaleX": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleX", "index": 0 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleX", "index": 7 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "scaleX", "index": 10 }], "anchorY": [{ "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "anchorY", "index": 0 }, { "value": 1.5, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "anchorY", "index": 10 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 15, "key": "alpha", "index": 7 }] } }, { "target": 12, "keyframes": { "x": [{ "value": 480, "tweenMethod": "linearNone", "tween": true, "target": 12, "key": "x", "index": 0 }], "scaleY": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 12, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 12, "key": "scaleY", "index": 3 }], "scaleX": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 12, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 12, "key": "scaleX", "index": 3 }], "anchorX": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 12, "key": "anchorX", "index": 0 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 12, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 12, "key": "alpha", "index": 3 }] } }, { "target": 10, "keyframes": { "y": [{ "value": 301, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "y", "index": 0 }], "x": [{ "value": 511, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "x", "index": 0 }], "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleY", "index": 13 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "scaleX", "index": 13 }], "anchorY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "anchorY", "index": 0 }], "anchorX": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "anchorX", "index": 0 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "alpha", "index": 13 }, { "value": 0.6, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "alpha", "index": 27 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 10, "key": "alpha", "index": 41 }] } }, { "target": 9, "keyframes": { "scaleY": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "scaleY", "index": 3 }], "scaleX": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "scaleX", "index": 3 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 9, "key": "alpha", "index": 3 }] } }, { "target": 11, "keyframes": { "scaleY": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "scaleY", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "scaleY", "index": 3 }], "scaleX": [{ "value": 0.1, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "scaleX", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "scaleX", "index": 3 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 11, "key": "alpha", "index": 3 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }, { "nodes": [], "name": "ani2", "id": 2, "frameRate": 24, "action": 0 }, { "nodes": [], "name": "ani3", "id": 3, "frameRate": 24, "action": 0 }] };
            return shibaiUI;
        }(View));
        poker.shibaiUI = shibaiUI;
    })(poker = ui.poker || (ui.poker = {}));
})(ui || (ui = {}));
(function (ui) {
    var poker;
    (function (poker) {
        var shunziUI = /** @class */ (function (_super) {
            __extends(shunziUI, _super);
            function shunziUI() {
                return _super.call(this) || this;
            }
            shunziUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.poker.shunziUI.uiView);
            };
            shunziUI.uiView = { "type": "View", "props": { "width": 960, "height": 640 }, "child": [{ "type": "Image", "props": { "skin": "poker/type_shunzi.png", "centerY": 0, "centerX": -100, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 2 }, { "type": "Image", "props": { "skin": "poker/type_plane_1.png", "centerY": 0, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 6 }], "animations": [{ "nodes": [{ "target": 2, "keyframes": { "centerX": [{ "value": -100, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "centerX", "index": 1 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "centerX", "index": 5 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "centerX", "index": 20 }, { "value": 100, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "centerX", "index": 24 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 1 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 20 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 23 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 24 }] } }, { "target": 6, "keyframes": { "centerX": [{ "value": -150, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "centerX", "index": 0 }, { "value": -120, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "centerX", "index": 2 }, { "value": -60, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "centerX", "index": 5 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "alpha", "index": 2 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "alpha", "index": 5 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 6, "key": "alpha", "index": 8 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return shunziUI;
        }(View));
        poker.shunziUI = shunziUI;
    })(poker = ui.poker || (ui.poker = {}));
})(ui || (ui = {}));
(function (ui) {
    var poker;
    (function (poker) {
        var sidaisanUI = /** @class */ (function (_super) {
            __extends(sidaisanUI, _super);
            function sidaisanUI() {
                return _super.call(this) || this;
            }
            sidaisanUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ui.poker.sidaisanUI.uiView);
            };
            sidaisanUI.uiView = { "type": "View", "props": { "width": 960, "height": 640 }, "child": [{ "type": "Image", "props": { "y": 348, "skin": "poker/type_fourthree.png", "centerY": 0, "centerX": 0, "anchorY": 1, "anchorX": 0.5 }, "compId": 2 }], "animations": [{ "nodes": [{ "target": 2, "keyframes": { "y": [{ "value": 381, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "y", "index": 0 }, { "value": 430, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "y", "index": 4 }], "scaleY": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 4 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleY", "index": 5 }], "scaleX": [{ "value": 0.2, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 4 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "scaleX", "index": 5 }], "anchorY": [{ "value": 2, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "anchorY", "index": 0 }, { "value": 2, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "anchorY", "index": 4 }], "alpha": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 0 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 4 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 2, "key": "alpha", "index": 24 }] } }], "name": "ani1", "id": 1, "frameRate": 24, "action": 0 }] };
            return sidaisanUI;
        }(View));
        poker.sidaisanUI = sidaisanUI;
    })(poker = ui.poker || (ui.poker = {}));
})(ui || (ui = {}));
//# sourceMappingURL=layaUI.max.all.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
* @author seacole
 *废弃
 */
var BasePanel = /** @class */ (function (_super) {
    __extends(BasePanel, _super);
    function BasePanel() {
        var _this = _super.call(this) || this;
        _this.on(Laya.Event.ADDED, _this, _this.addToStage);
        _this.on(Laya.Event.REMOVED, _this, _this.removeFromStage);
        return _this;
    }
    BasePanel.prototype.createChildren = function () {
        _super.prototype.createChildren.call(this);
    };
    BasePanel.prototype.addToStage = function (e) {
        AppControl.getInstance().stage.on(Laya.Event.RESIZE, this, this.onResize);
        this.onResize(e);
    };
    BasePanel.prototype.removeFromStage = function (e) {
        AppControl.getInstance().stage.off(Laya.Event.RESIZE, this, this.onResize);
    };
    BasePanel.prototype.onBack = function (event) {
    };
    BasePanel.prototype.hide = function () {
        this.removeSelf();
    };
    BasePanel.prototype.onResize = function (e) {
    };
    return BasePanel;
}(Laya.Component));
//# sourceMappingURL=BasePanel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 位图字体基础类;
*/
var BPFont = /** @class */ (function (_super) {
    __extends(BPFont, _super);
    function BPFont() {
        var _this = _super.call(this) || this;
        // 文本字间距
        _this._padding = 0;
        _this.on(Laya.Event.ADDED, _this, _this.onAddToStage);
        _this.on(Laya.Event.REMOVED, _this, _this.onRemoveFromStage);
        return _this;
    }
    BPFont.prototype.onAddToStage = function (e) {
        this.text = this._text;
    };
    BPFont.prototype.onRemoveFromStage = function (e) {
    };
    BPFont.prototype.setInfo = function (fontData) {
        this._id = fontData.id;
        this.width = fontData.width;
        this._posType = fontData.posType;
        this._jsonData = fontData.jsonData;
        this._imageData = fontData.textureData;
        this._posX = fontData.posX;
        this._posY = fontData.posY;
        this._text = fontData.text;
    };
    Object.defineProperty(BPFont.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BPFont.prototype, "padding", {
        get: function () {
            return this._padding;
        },
        set: function (v) {
            this._padding = v;
            this.setCharsPos();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BPFont.prototype, "text", {
        get: function () {
            return this._text;
        },
        set: function (v) {
            this._text = v;
            this.createBitmapFont(v);
        },
        enumerable: true,
        configurable: true
    });
    // 创建位图字体
    BPFont.prototype.createBitmapFont = function (v) {
        if (!v || v == "") {
            return;
        }
        // 移除上次绘制的内容
        for (var k = 0; k < this.numChildren; k++) {
            Laya.Pool.recover("sprite_bp" + this._id, this._childs[k]);
        }
        this.removeChildren();
        var charTotal = v.length;
        var charSps = [];
        this._maxHeight = 0;
        for (var i = 0; i < charTotal; i++) {
            var targetChar = v.substr(i, 1);
            var charData = this._jsonData.frames[targetChar];
            if (!charData) {
                console.warn("没有找到对应的字符：" + targetChar);
                continue;
            }
            var charSp = this.drawTexture(charData);
            if (charSp.height > this._maxHeight)
                this._maxHeight = charSp.height;
            charSps.push(charSp);
        }
        this.charSprites = charSps;
        this.setCharsPos();
    };
    // 从图集上面抠图
    BPFont.prototype.drawTexture = function (charData) {
        var charSp = new Laya.Sprite();
        charSp = Laya.Pool.getItemByClass("sprite_bp" + this._id, Laya.Sprite);
        charSp.graphics.clear();
        charSp.graphics.fillTexture(this._imageData, charData.x, charData.y, charData.w, charData.h, "no-repeat", new Laya.Point(-charData.x, -charData.y));
        charSp.size(charData.w, charData.h);
        charSp.scrollRect = new Laya.Rectangle(charData.x, charData.y, charData.w, charData.h);
        this.addChild(charSp);
        return charSp;
    };
    // 设置位置
    BPFont.prototype.setCharsPos = function () {
        switch (this._posType) {
            case BPFont.LEFT:
                this.setCharsPosOnLeft();
                break;
            case BPFont.RIGHT:
                this.setCharsPosOnRight();
                break;
            case BPFont.CENTER:
                this.setCharsPosOnCenter();
                break;
        }
    };
    // 左对齐
    BPFont.prototype.setCharsPosOnLeft = function () {
        if (!this.text || this.text == "") {
            return;
        }
        var sps = this.charSprites;
        var length = sps.length;
        for (var i = 0; i < length; i++) {
            sps[i].x = 0;
            sps[i].y = Math.round(this._maxHeight - sps[i].height >> 1);
        }
        for (var i = 1; i < length; i++) {
            sps[i].x += sps[i - 1].x + sps[i - 1].width + this.padding;
        }
    };
    // 右对齐
    BPFont.prototype.setCharsPosOnRight = function () {
        if (!this.text || this.text == "") {
            return;
        }
        var sps = this.charSprites;
        var length = sps.length;
        var width = this.width;
        for (var i = 0; i < length; i++) {
            sps[i].x = width;
            sps[i].y = Math.round(this._maxHeight - sps[i].height >> 1);
        }
        for (var i = length - 1; i >= 0; i--) {
            width -= sps[i].width + this.padding;
            sps[i].x = width;
        }
    };
    // 居中
    BPFont.prototype.setCharsPosOnCenter = function () {
        if (!this.text || this.text == "") {
            return;
        }
        var sps = this.charSprites;
        var length = sps.length;
        var width = this.width;
        var allCharsWidth = 0;
        for (var i = 0; i < length; i++) {
            allCharsWidth += sps[i].width;
        }
        var x = Math.round((width - allCharsWidth) / 2);
        sps[0].x = x;
        sps[0].y = this._maxHeight - sps[0].height >> 1;
        for (var i = 1; i < length; i++) {
            sps[i].x = 0;
            sps[i].x += sps[i - 1].x + sps[i - 1].width + this.padding;
            sps[i].y = Math.round(this._maxHeight - sps[i].height >> 1);
        }
    };
    BPFont.prototype.start = function (time) {
    };
    BPFont.prototype.stop = function () {
    };
    //  左 右 中
    BPFont.LEFT = "left";
    BPFont.RIGHT = "right";
    BPFont.CENTER = "center";
    return BPFont;
}(Laya.Component));
//# sourceMappingURL=BPFont.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 捕鱼场景鱼死亡时金币数字;
*/
var Font1 = /** @class */ (function (_super) {
    __extends(Font1, _super);
    function Font1() {
        var _this = _super.call(this) || this;
        _this._fontName = "Font1";
        return _this;
    }
    Font1.prototype.onAddToStage = function (e) {
        _super.prototype.onAddToStage.call(this, e);
        this.pos(this._posX, this._posY);
        this.play();
    };
    Font1.prototype.onRemoveFromStage = function (e) {
    };
    Font1.prototype.play = function () {
        // Laya.Tween.clearTween(this);
        // this.anchorX=0.5;
        // this.anchorY=0.5;
        // this.scaleX=0;
        // this.scaleY=0;
        // Laya.Tween.to(this,{scaleX:1,scaleY:1},FontConfig.FONT_GOLD_DUA,Laya.Ease.linearIn,Laya.Handler.create(this,this.step1));
    };
    Font1.prototype.step1 = function () {
        //  Laya.Tween.to(this,{scaleX:0,scaleY:0},FontConfig.FONT_GOLD_DUA,Laya.Ease.linearIn,Laya.Handler.create(this,this.step2),FontConfig.FONT_GOLD_DELAY);
    };
    Font1.prototype.step2 = function () {
        Dispatcher.dispatch(EventNames.REMOVE_FONT, this);
    };
    return Font1;
}(BPFont));
//# sourceMappingURL=Font1.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 倒计时的位图字体
*/
var TimerFont = /** @class */ (function (_super) {
    __extends(TimerFont, _super);
    function TimerFont() {
        return _super.call(this) || this;
    }
    TimerFont.prototype.onAddToStage = function (e) {
        _super.prototype.onAddToStage.call(this, e);
        this.pos(this._posX, this._posY);
        this.anchorX = 0.5;
        this.anchorY = 0.5;
        this.tweenSelf();
        Laya.timer.loop(1000, this, this.onTimer);
    };
    TimerFont.prototype.onRemoveFromStage = function (e) {
        _super.prototype.onRemoveFromStage.call(this, e);
        Laya.Tween.clearTween(this);
        Laya.timer.clear(this, this.onTimer);
    };
    TimerFont.prototype.setInfo = function (fontData) {
        _super.prototype.setInfo.call(this, fontData);
        this._time = Number(fontData.text);
        this._needRemove = fontData.needRemove;
    };
    TimerFont.prototype.onTimer = function () {
        this._time--;
        this._time = this._time < 0 ? 0 : this._time;
        this.text = this._time.toString();
        this.tweenSelf();
        if (this._time <= 0) {
            Laya.Tween.clearTween(this);
            Laya.timer.clear(this, this.onTimer);
        }
        if (this._needRemove && this._time <= 0) {
            Dispatcher.dispatch(EventNames.REMOVE_FONT, this);
        }
    };
    TimerFont.prototype.tweenSelf = function () {
        // this.scaleX = 0;
        // this.scaleY = 0;
        // Laya.Tween.clearTween(this);
        // Laya.Tween.to(this, { scaleX: 1, scaleY: 1 }, 800, Laya.Ease.elasticOut);
    };
    TimerFont.prototype.start = function (time) {
        this.stop();
        this._time = time;
        this.text = this._time.toString();
        this.tweenSelf();
        Laya.timer.loop(1000, this, this.onTimer);
    };
    TimerFont.prototype.stop = function () {
        Laya.Tween.clearTween(this);
        Laya.timer.clear(this, this.onTimer);
    };
    return TimerFont;
}(BPFont));
//# sourceMappingURL=TimerFont.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 大厅顶部组件;
*/
var HallTopUI = /** @class */ (function (_super) {
    __extends(HallTopUI, _super);
    function HallTopUI() {
        var _this = _super.call(this) || this;
        _this.name = "HallTopUI";
        _this._head = new HeadUI();
        _this._head.setImageBounds(70, 70);
        _this._head.nameLimit = 20;
        _this._head.setLabName({ x: 106, y: 15, align: "left", color: "#0d0d0d", fontSize: 24 });
        _this._head.setLabInfo(HeadUI.TYPE_UID, { x: 106, y: 53, align: "left", color: "#bee7fe", fontSize: 22 });
        _this._head.pos(0, 0);
        _this._headinfo.addChild(_this._head);
        _this._head.setVisiableNameAndID(false);
        if (GameConfig.IS_IOS_EXAMINE) {
            _this._btn_exchange.visible = false;
            _this._ticketNum.visible = false;
        }
        EventManager.instance.registerOnObject(_this, Dispatcher.eventDispatcher, EventNames.REFRESH_ROLE_INFO, _this, _this.onRefreshRoleInfo);
        EventManager.instance.registerOnObject(_this, _this._btn_buydiamond, Laya.Event.CLICK, _this, _this.onTouch);
        EventManager.instance.registerOnObject(_this, _this._btn_exchange, Laya.Event.CLICK, _this, _this.onTouch);
        //EventManager.instance.registerOnObject(this, AppControl.getInstance().stage, Laya.Event.RESIZE, this, this.onResize);
        _this._btn_exchange.mouseEnabled = false;
        EventManager.instance.enableOnObject(_this);
        return _this;
    }
    /**
    * 鼠标点击事件
    */
    HallTopUI.prototype.onTouch = function (e, param) {
        switch (e.currentTarget) {
            case this._btn_buydiamond:
                //购买钻石
                log("弹出商城");
                ShopCtrl.instance.show();
                break;
            case this._btn_exchange:
                //奖券兑换
                log("弹出兑换");
                break;
        }
    };
    HallTopUI.prototype.onRefreshRoleInfo = function () {
        this._head.data = GameLogic.selfData;
        //Utils.getFitNickName(GameLogic.selfData.nickname,6)
        this._name.text = Utils.getFitNickName(GameLogic.selfData.nickname, 6);
        this._id.text = "ID:" + GameLogic.selfData.uid;
        this._diamondNum.text = "" + GameLogic.selfData.diamond;
        this._ticketNum.text = "0";
    };
    return HallTopUI;
}(ui.components.Hall.HallTopUI));
//# sourceMappingURL=HallTopUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 玩家头像
*/
var HeadUI = /** @class */ (function (_super) {
    __extends(HeadUI, _super);
    function HeadUI(infoType) {
        if (infoType === void 0) { infoType = 0; }
        var _this = _super.call(this) || this;
        _this.WIDTH = 73;
        _this.HEIGHT = 73;
        _this.nameLimit = 10;
        _this.data = null;
        _this._labInfo.visible = infoType > 0;
        return _this;
    }
    HeadUI.prototype.setImageBounds = function (w, h) {
        this.WIDTH = w;
        this.HEIGHT = h;
        this._imgFemale.width = w;
        this._imgFemale.height = h;
        this._femaleMask.width = w;
        this._femaleMask.height = h;
        this._imgMale.width = w;
        this._imgMale.height = h;
        this._maleMask.width = w;
        this._maleMask.height = h;
        this._headkuang.width = w + 3;
        this._headkuang.height = h + 3;
        //暂时隐藏框
        this._headkuang.visible = false;
    };
    Object.defineProperty(HeadUI.prototype, "data", {
        set: function (value) {
            if (value) {
                this._labName.text = Utils.getFitNickName(value.nickname, this.nameLimit) + "";
                this.setLabInfoData(value);
                if (!value.hasOwnProperty("sex"))
                    value.sex = 1;
                this._imgMale.visible = value.sex != 2;
                this._imgFemale.visible = value.sex == 2;
                // this._test++;
                // if (this._test % 3 == 0)
                //     value.avatar = 0;
                // else if (this._test % 3 == 1)
                //     value.avatar = "https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515770253325&di=47c9309c74a192b47bde773bcf2f135c&imgtype=0&src=http%3A%2F%2Fe.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F500fd9f9d72a6059099ccd5a2334349b023bbae5.jpg";
                // else if (this._test % 3 == 2)
                //     value.avatar = "http://c.hiphotos.baidu.com/image/pic/item/c9fcc3cec3fdfc0380b079f3df3f8794a5c226b4.jpg";
                if (value.avatar) {
                    if (this._avatar != value.avatar) {
                        this.clearImgHead();
                        this._avatar = value.avatar;
                        if (!this._imgHead) {
                            this._imgHead = new ui.components.head.HeadImgUI();
                            this.addChildAt(this._imgHead, 2);
                        }
                        this._imgHead._img.texture = null;
                        this._imgHead._img.source = null;
                        this._imgHead._img.width = this._imgHead._headMask.width = this.WIDTH;
                        this._imgHead._img.height = this._imgHead._headMask.height = this.HEIGHT;
                        this._imgHead._img.loadImage(value.avatar, 0, 0, this.WIDTH, this.HEIGHT);
                    }
                }
                else {
                    this.clearImgHead();
                    this._avatar = "";
                }
            }
            else {
                // this.clearImgHead();
                // this._labName.text = "";
                // this._labInfo.text = "";
                // this._imgMale.visible = true;
                // this._imgFemale.visible = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    HeadUI.prototype.clearImgHead = function () {
        if (this._imgHead) {
            this._imgHead._img.texture = null;
            this._imgHead._img.source = null;
            // this._imgHead.destroy();
        }
    };
    HeadUI.prototype.getInfo = function (uid) {
        var _this = this;
        if (this._uid != uid) {
            this._uid = uid;
            if (RoleManager.getRole(uid)) {
                this.data = RoleManager.getRole(uid);
            }
            else {
                webService.getUserInfo(this._uid, function (response) {
                    if (response.code == 0)
                        _this.data = response;
                });
            }
        }
    };
    HeadUI.prototype.setLabName = function (data) {
        Utils.injectProp(this._labName, data);
    };
    HeadUI.prototype.setLabInfo = function (infoType, data) {
        if (infoType === void 0) { infoType = 0; }
        if (data === void 0) { data = null; }
        this._infoType = infoType;
        this._labInfo.visible = true;
        if (data)
            Utils.injectProp(this._labInfo, data);
    };
    HeadUI.prototype.setLabInfoData = function (value) {
        switch (this._infoType) {
            case HeadUI.TYPE_GOLD:
                this._labInfo.text = value.gold + "";
                break;
            case HeadUI.TYPE_DIAMOND:
                this._labInfo.text = value.diamond + "";
                break;
            case HeadUI.TYPE_SCORE:
                this._labInfo.text = value.score + "";
                break;
            case HeadUI.TYPE_UID:
                this._labInfo.text = "ID: " + value.uid + "";
                break;
        }
    };
    //隐藏名字和id
    HeadUI.prototype.setVisiableNameAndID = function (isvisiable) {
        this._labName.visible = isvisiable;
        this._labInfo.visible = isvisiable;
    };
    HeadUI.TYPE_GOLD = 1;
    HeadUI.TYPE_DIAMOND = 2;
    HeadUI.TYPE_SCORE = 3;
    HeadUI.TYPE_UID = 4;
    return HeadUI;
}(ui.components.head.HeadUI));
//# sourceMappingURL=HeadUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 玩家头像 供list用
*/
var HeadRenderer = /** @class */ (function (_super) {
    __extends(HeadRenderer, _super);
    function HeadRenderer() {
        return _super.call(this) || this;
    }
    HeadRenderer.prototype.updata = function () {
        if (this.dataSource) {
            this.getInfo(this.dataSource);
        }
    };
    return HeadRenderer;
}(HeadUI));
//# sourceMappingURL=HeadRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
* @author seacole
 *数字键盘
 */
var KeyBoardNumUI = /** @class */ (function (_super) {
    __extends(KeyBoardNumUI, _super);
    //1 最后是回退 2最后是搜索
    function KeyBoardNumUI(type) {
        if (type === void 0) { type = 1; }
        var _this = _super.call(this) || this;
        _this._type = type;
        var fontData1 = new FontData();
        fontData1.init(FontConfig.FONT_JOIN_TABLE_1, Laya.loader.getRes(ResourceConfig.BITMAP_FONT_JOINTABLE1_JSON), Laya.loader.getRes(ResourceConfig.BITMAP_FONT_JOINTABLE1_PNG), 178, BPFont.CENTER);
        var fontData2 = new FontData();
        fontData2.init(FontConfig.FONT_JOIN_TABLE_1, Laya.loader.getRes(ResourceConfig.BITMAP_FONT_JOINTABLE2_JSON), Laya.loader.getRes(ResourceConfig.BITMAP_FONT_JOINTABLE2_PNG), 178, BPFont.CENTER);
        for (var i = 1; i <= 12; i++) {
            var renderer = new ui.components.keyboard.KeyBoardRendererUI();
            renderer.name = i.toString();
            var bpFont1 = FontManager.instance.addFont(fontData1);
            bpFont1.text = _this.getBpStr(i);
            renderer.addChild(bpFont1);
            bpFont1.pos(0, 20);
            var bpFont2 = FontManager.instance.addFont(fontData2);
            bpFont2.text = _this.getBpStr(i);
            renderer.addChild(bpFont2);
            bpFont2.pos(0, 20);
            if (_this._type == 2 && _this.getBpStr(i) == "搜索")
                renderer.getChildAt(0).skin = "joinTable/joinTable_keyBoard_btn_2.png";
            renderer.x = 2 + 181 * ((i - 1) % 3);
            renderer.y = 2 + 72 * Math.floor((i - 1) / 3);
            renderer.on(Laya.Event.CLICK, _this, _this.onTouch);
            renderer.on(Laya.Event.MOUSE_OVER, _this, _this.onTouch);
            renderer.on(Laya.Event.MOUSE_OUT, _this, _this.onTouch);
            renderer.on(Laya.Event.MOUSE_DOWN, _this, _this.onTouch);
            renderer.on(Laya.Event.MOUSE_UP, _this, _this.onTouch);
            _this.addChild(renderer);
        }
        return _this;
    }
    KeyBoardNumUI.prototype.onTouch = function (e) {
        switch (e.type) {
            case Laya.Event.CLICK:
                Dispatcher.dispatch(EventNames.KEYBOARD_NUM, e.currentTarget.name);
                break;
            case Laya.Event.MOUSE_OVER:
            case Laya.Event.MOUSE_DOWN:
                e.currentTarget.getChildAt(1).visible = true;
                e.currentTarget.getChildAt(2).visible = false;
                break;
            case Laya.Event.MOUSE_OUT:
            case Laya.Event.MOUSE_UP:
                e.currentTarget.getChildAt(1).visible = false;
                e.currentTarget.getChildAt(2).visible = true;
                break;
        }
    };
    KeyBoardNumUI.prototype.getBpStr = function (value) {
        if (value == 10)
            return "重输";
        else if (value == 11)
            return "0";
        else if (value == 12) {
            if (this._type == 1)
                return "退";
            else if (this._type == 2)
                return "搜索";
        }
        else
            return value + "";
    };
    return KeyBoardNumUI;
}(ui.components.keyboard.KeyBoardNumUI));
//# sourceMappingURL=KeyBoardNumUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @author seacole
 * 加载菊花
 */
var LoadingCircle = /** @class */ (function (_super) {
    __extends(LoadingCircle, _super);
    function LoadingCircle() {
        var _this = _super.call(this) || this;
        _this._tweenTime = 0.6;
        _this._r = 60;
        var bg = new Laya.Image("loading/loading_bg.png");
        bg.x = -bg.width * 0.5;
        bg.y = -bg.height * 0.5;
        _this.addChild(bg);
        _this._imgs = [];
        for (var i = 0; i < 8; i++) {
            var img = new Laya.Image("loading/symbol_loading.png");
            img.x = -19.5;
            img.y = -19.5;
            var s = new Laya.Sprite();
            s.addChild(img);
            switch (i) {
                case 0:
                    s.x = 0;
                    s.y = -_this._r;
                    break;
                case 1:
                    s.x = _this._r * 0.7;
                    s.y = -_this._r * 0.7;
                    break;
                case 2:
                    s.x = _this._r;
                    s.y = 0;
                    break;
                case 3:
                    s.x = _this._r * 0.7;
                    s.y = _this._r * 0.7;
                    break;
                case 4:
                    s.x = 0;
                    s.y = _this._r;
                    break;
                case 5:
                    s.x = -_this._r * 0.7;
                    s.y = _this._r * 0.7;
                    break;
                case 6:
                    s.x = -_this._r;
                    s.y = 0;
                    break;
                case 7:
                    s.x = -_this._r * 0.7;
                    s.y = -_this._r * 0.7;
                    break;
            }
            _this._imgs.push(s);
        }
        return _this;
    }
    Object.defineProperty(LoadingCircle, "instance", {
        get: function () {
            if (!LoadingCircle._instance)
                LoadingCircle._instance = new LoadingCircle();
            return LoadingCircle._instance;
        },
        enumerable: true,
        configurable: true
    });
    LoadingCircle.prototype.play = function () {
        this.visible = true;
        if (this._isPlaying)
            return;
        this._isPlaying = true;
        this._timeCount = 0;
        Laya.timer.loop(150, this, this.onTimer);
        this.onTimer(null);
    };
    LoadingCircle.prototype.onTimer = function (e) {
        var s = this._imgs[this._timeCount];
        if (!s.parent)
            this.addChild(s);
        s.alpha = 0;
        s.scaleX = 0.01;
        s.scaleY = 0.01;
        Laya.Tween.clearTween(s);
        Laya.Tween.to(s, { alpha: 1, scaleX: 0.7, scaleY: 0.7 }, this._tweenTime * 1000, Laya.Ease.cubicInOut, Laya.Handler.create(this, this.step1, [s]));
        this._timeCount++;
        if (this._timeCount >= 8)
            this._timeCount = 0;
    };
    LoadingCircle.prototype.step1 = function (s) {
        Laya.Tween.to(s, { alpha: 0, scaleX: 0.01, scaleY: 0.01 }, this._tweenTime * 1000, Laya.Ease.cubicInOut);
    };
    LoadingCircle.prototype.stop = function () {
        this.visible = false;
        this._isPlaying = false;
        for (var i = 0; i < this._imgs.length; i++) {
            Laya.Tween.clearTween(this._imgs[i]);
            if (this._imgs[i].parent)
                this.removeChild(this._imgs[i]);
        }
        Laya.timer.clear(this, this.onTimer);
    };
    return LoadingCircle;
}(Laya.Component));
//# sourceMappingURL=LoadingCircle.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @author seacole
 * 加载UI
 */
var LoadingUI = /** @class */ (function (_super) {
    __extends(LoadingUI, _super);
    function LoadingUI() {
        var _this = _super.call(this) || this;
        //有背景情况下 200毫秒后出菊花，再1000毫秒后菊花消失，出加载页面，没有进度条，再500毫秒后，进度条出现
        //无背景情况下 200毫秒后出菊花
        _this._circleShowTime = 200;
        _this._detailShowTime = 1000;
        _this._processShowTime = 500;
        _this.mouseEnabled = true;
        _this.mouseThrough = false;
        return _this;
    }
    Object.defineProperty(LoadingUI, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new LoadingUI();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    LoadingUI.prototype.load = function (loadData, caller, callback) {
        if (loadData)
            Laya.loader.load(loadData, Laya.Handler.create(caller, callback), Laya.Handler.create(this, this.onLoading, null, false));
    };
    LoadingUI.prototype.show = function (type, loadData, caller, callback, hideTime) {
        if (type === void 0) { type = 1; }
        if (loadData === void 0) { loadData = null; }
        if (caller === void 0) { caller = null; }
        if (callback === void 0) { callback = null; }
        if (hideTime === void 0) { hideTime = 0; }
        this._type = type;
        this._hideTime = hideTime;
        if (!this._bg) {
            this._bg = new ui.components.MaskUI();
            this._bg.alpha = 0.01;
            this.addChild(this._bg);
        }
        if (!this._loadCircle) {
            this._loadCircle = new LoadingCircle();
            this.addChild(this._loadCircle);
        }
        if (!this._detail) {
            this._detail = new ui.page.LoadingUI();
            this._detail.centerX = 0;
            this._detail.centerY = 0;
            this.addChildAt(this._detail, 1);
        }
        if (!this.parent)
            AppControl.getInstance().addToLoading(this);
        this.checkType();
        if (loadData)
            this.load(loadData, caller, callback);
        this.onResize(null);
    };
    LoadingUI.prototype.checkType = function () {
        this.clearShowTime();
        this._loadCircle.visible = false;
        this._detail.visible = false;
        this._detail._processBar.value = 0;
        this._detail._processBar.visible = false;
        this._detail._labelContext.visible = false;
        if (this._type == LoadingUI.TYPE_NO_BG_ATONCE)
            this.showCircle();
        else
            Laya.timer.once(this._circleShowTime, this, this.showCircle);
        if (this._hideTime)
            Laya.timer.once(this._hideTime, this, this.hide);
    };
    LoadingUI.prototype.showCircle = function () {
        this._loadCircle.play();
        if (this._type == LoadingUI.TYPE_HAS_BG) {
            Laya.timer.once(this._detailShowTime, this, this.showDetail);
        }
    };
    LoadingUI.prototype.showDetail = function () {
        this._detail.visible = true;
        this._loadCircle.stop();
        Laya.timer.once(this._processShowTime, this, this.showProcess);
        var currPage = AppControl.getInstance().currentPage;
        if (currPage)
            AppControl.getInstance().screenMode = currPage.screenMode;
        else
            AppControl.getInstance().screenMode = Laya.Stage.SCREEN_HORIZONTAL;
        if (AppControl.getInstance().screenMode == Laya.Stage.SCREEN_HORIZONTAL) {
            // this._detail._processBar.bottom = 124;
            this._detail._imgH.visible = true;
            this._detail._imgV.visible = false;
        }
        else {
            // this._detail._processBar.bottom = 230;
            this._detail._imgH.visible = false;
            this._detail._imgV.visible = true;
        }
        this.onResize(null);
    };
    LoadingUI.prototype.showProcess = function () {
        this._detail._processBar.visible = true;
        this._detail._labelContext.visible = true;
    };
    LoadingUI.prototype.clearShowTime = function () {
        Laya.timer.clear(this, this.showCircle);
        Laya.timer.clear(this, this.showDetail);
        Laya.timer.clear(this, this.showProcess);
        Laya.timer.clear(this, this.hide);
    };
    LoadingUI.prototype.onLoading = function (progress) {
        if (this._detail) {
            progress = progress > 1 ? 1 : progress;
            this._detail._processBar.value = progress;
            var num = Math.floor(progress * 100);
            this._detail._labelContext._labelProcess.text = num + "%";
            this.clearTime();
            Laya.timer.once(15000, this, this.onError);
        }
    };
    LoadingUI.prototype.onError = function () {
        alert("网络连接异常，请点击“刷新”重试");
    };
    LoadingUI.prototype.clearTime = function () {
        Laya.timer.clear(this, this.onError);
    };
    Object.defineProperty(LoadingUI.prototype, "progress", {
        /**
         * 外部设置进度条
         */
        set: function (value) {
            this.onLoading(value);
        },
        enumerable: true,
        configurable: true
    });
    LoadingUI.prototype.onResize = function (e) {
        this.width = AppControl.getInstance().stage.width;
        this.height = AppControl.getInstance().stage.height;
        if (this._bg) {
            this._bg.width = AppControl.getInstance().stage.width;
            this._bg.height = AppControl.getInstance().stage.height;
        }
        if (this._detail) {
            this._detail.width = AppControl.getInstance().stage.width;
            this._detail.height = AppControl.getInstance().stage.height;
        }
        if (this._loadCircle) {
            this._loadCircle.x = AppControl.getInstance().stage.width * 0.5;
            this._loadCircle.y = AppControl.getInstance().stage.height * 0.5;
        }
        AppControl.getInstance().resetScreen();
    };
    LoadingUI.prototype.hide = function () {
        if (this._loadCircle)
            this._loadCircle.stop();
        this.clearTime();
        this.clearShowTime();
        _super.prototype.hide.call(this);
    };
    LoadingUI.TYPE_HAS_BG = 1; //有背景
    LoadingUI.TYPE_NO_BG_DELAY = 2; //没背景 菊花延时出现
    LoadingUI.TYPE_NO_BG_ATONCE = 3; //没背景 菊花立即出现
    return LoadingUI;
}(BasePanel));
//# sourceMappingURL=LoadingUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @author seacole
 * 一开始的加载UI
 */
var PreLoadingUI = /** @class */ (function (_super) {
    __extends(PreLoadingUI, _super);
    function PreLoadingUI() {
        return _super.call(this) || this;
    }
    Object.defineProperty(PreLoadingUI, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new PreLoadingUI();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    PreLoadingUI.prototype.load = function (loadData, caller, callback) {
        if (loadData)
            Laya.loader.load(loadData, Laya.Handler.create(caller, callback), Laya.Handler.create(this, this.onLoading, null, false));
    };
    /**
     * 显示完整加载页面
     */
    PreLoadingUI.prototype.onShowDetail = function () {
        if (!this._detail) {
            this._detail = new ui.page.PreLoadingUI();
            //this._detail._imgLogo.skin = "preload/preload_logo_" + GameConfig.APPAREA + ".png";
            this._detail._imgLogo.skin = "preload/preload_logo_" + GameConfig.APPAREA + ".png";
            this.addChild(this._detail);
        }
        this.clearTime();
        Dispatcher.dispatch(EventNames.PRELOADING_FINISH);
    };
    PreLoadingUI.prototype.show = function (loadData, caller, callback) {
        if (loadData === void 0) { loadData = null; }
        if (caller === void 0) { caller = null; }
        if (callback === void 0) { callback = null; }
        var currPage = AppControl.getInstance().currentPage;
        AppControl.getInstance().screenMode = Laya.Stage.SCREEN_HORIZONTAL;
        if (!this.parent) {
            AppControl.getInstance().addToLoading(this);
        }
        this.onResize(null);
        if (loadData)
            this.load(loadData, caller, callback);
    };
    PreLoadingUI.prototype.onLoading = function (progress) {
        this.clearTime();
        Laya.timer.once(10000, this, this.onError);
    };
    PreLoadingUI.prototype.onError = function () {
        alert("网络连接异常，请点击“刷新”重试");
    };
    PreLoadingUI.prototype.clearTime = function () {
        Laya.timer.clear(this, this.onError);
    };
    PreLoadingUI.prototype.onResize = function (e) {
        this.width = AppControl.getInstance().stage.width;
        this.height = AppControl.getInstance().stage.height;
        if (this._detail) {
            this._detail.width = AppControl.getInstance().stage.width;
            this._detail.height = AppControl.getInstance().stage.height;
            this._detail._imgLogo.bottom = AppControl.getInstance().stage.height * 0.52;
        }
        AppControl.getInstance().resetScreen();
    };
    PreLoadingUI.prototype.hide = function () {
        this.clearTime();
        _super.prototype.hide.call(this);
        if (Laya.Browser.window.loadingView) {
            Laya.Browser.window.conch.showLoadingView(false);
        }
    };
    return PreLoadingUI;
}(BasePanel));
//# sourceMappingURL=PreLoadingUI.js.map
/*
* @author seacole
* 基础ctrl;
*/
var BaseCtrl = /** @class */ (function () {
    function BaseCtrl() {
        this._autoHide = true;
    }
    BaseCtrl.prototype.start = function (loadData) {
        this._loadData = loadData;
    };
    /**
     * 加载自身需要资源
     */
    BaseCtrl.prototype.showself = function () {
        if (!this._ui) {
            if (this._loadData)
                LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, this._loadData, this, this.beforeShow);
            else
                this.beforeShow();
        }
        else
            this.onShow(1);
    };
    /**
     * 这里完成new ui，添加注册监听等初始化工作
     */
    BaseCtrl.prototype.beforeShow = function () {
        EventManager.instance.registerOnObject(this, AppControl.getInstance().stage, Laya.Event.RESIZE, this, this.onResize);
        EventManager.instance.registerOnObject(this, this._ui, Laya.Event.REMOVED, this, this.afterShow);
    };
    /**
     * 开启监听，配置宽高，添加到舞台
     * @param type 1 addToUI 2 addToPopUp 3 addToSystem
     */
    BaseCtrl.prototype.onShow = function (type) {
        if (type === void 0) { type = 1; }
        EventManager.instance.enableOnObject(this);
        this._ui.width = AppControl.getInstance().stage.width;
        this._ui.height = AppControl.getInstance().stage.height > 1280 ? 1280 : AppControl.getInstance().stage.height;
        this._ui.y = (AppControl.getInstance().stage.height - this._ui.height) / 2;
        this._ui.mouseThrough = true;
        if (!this._uiMask && this._ui.hasOwnProperty("_mask")) {
            this._uiMask = this._ui["_mask"];
            this._uiMask.width = AppControl.getInstance().stage.width;
            this._uiMask.height = AppControl.getInstance().stage.height > 1280 ? 1280 : AppControl.getInstance().stage.height;
            ;
            if (this._autoHide)
                this._uiMask.on(Laya.Event.CLICK, this, this.hide);
            // if (this._ui["_mask"].parent == this._ui) {
            //     AppControl.getInstance().addToUI(this._ui["_mask"]);
            // }
        }
        if (!this._ui.parent) {
            if (type == 1) {
                if (this._uiMask)
                    AppControl.getInstance().addToUI(this._uiMask);
                AppControl.getInstance().addToUI(this._ui);
            }
            else if (type == 2) {
                if (this._uiMask)
                    AppControl.getInstance().addToPopup(this._uiMask);
                AppControl.getInstance().addToPopup(this._ui);
            }
            else if (type == 3) {
                if (this._uiMask)
                    AppControl.getInstance().addToSystem(this._uiMask);
                AppControl.getInstance().addToSystem(this._ui);
            }
        }
        this.onResize();
        LoadingUI.instance.hide();
    };
    BaseCtrl.prototype.tweenSelf = function () {
        this._ui.pos(AppControl.getInstance().stage.width * 0.5, AppControl.getInstance().stage.height * 0.5);
        this._ui.scale(0, 0);
        Laya.Tween.clearTween(this._ui);
        Laya.Tween.to(this._ui, { scaleX: 1, scaleY: 1, x: (AppControl.getInstance().stage.width - this._ui.width) / 2, y: (AppControl.getInstance().stage.height - this._ui.height) / 2 }, 200, Laya.Ease.backOut);
    };
    /**
     * 离开时调度
     */
    BaseCtrl.prototype.afterShow = function () {
        EventManager.instance.disableOnObject(this);
    };
    BaseCtrl.prototype.onResize = function () {
        this._ui.width = AppControl.getInstance().stage.width;
        this._ui.height = AppControl.getInstance().stage.height > 1280 ? 1280 : AppControl.getInstance().stage.height;
        if (this._uiMask) {
            this._uiMask.width = AppControl.getInstance().stage.width;
            this._uiMask.height = AppControl.getInstance().stage.height > 1280 ? 1280 : AppControl.getInstance().stage.height;
        }
    };
    BaseCtrl.prototype.hide = function () {
        if (this._ui)
            this._ui.removeSelf();
        if (this._uiMask)
            this._uiMask.removeSelf();
    };
    Object.defineProperty(BaseCtrl.prototype, "parent", {
        get: function () {
            if (this._ui && this._ui.parent)
                return this._ui.parent;
            else
                return null;
        },
        enumerable: true,
        configurable: true
    });
    return BaseCtrl;
}());
//# sourceMappingURL=BaseCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 比赛历史记录;
*/
var MatchHistoryCtrl = /** @class */ (function (_super) {
    __extends(MatchHistoryCtrl, _super);
    function MatchHistoryCtrl() {
        var _this = _super.call(this) || this;
        _this["name"] = "MatchHistoryCtrl";
        return _this;
    }
    Object.defineProperty(MatchHistoryCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new MatchHistoryCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    MatchHistoryCtrl.prototype.show = function (data) {
        this._data = data;
        this.showself();
    };
    /**
     * 这里完成new ui，添加注册监听等初始化工作
     */
    MatchHistoryCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.components.menu.MatchHistoryUI();
            this._ui._list.itemRender = MatchHistoryRenderer;
            this._ui._list.scrollBar.visible = false;
            this._ui._list.scrollBar.elasticDistance = 100;
            this._ui._list.selectEnable = true;
            this._ui._list.renderHandler = new Laya.Handler(this, this.updateList);
            this._ui._list.mouseHandler = new Laya.Handler(this, this.onSelect);
            EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.hide);
        }
        _super.prototype.beforeShow.call(this);
        this.onShow();
    };
    /**
    * 开启监听，配置宽高，添加到舞台
    */
    MatchHistoryCtrl.prototype.onShow = function () {
        _super.prototype.onShow.call(this);
        this._ui._list.array = [];
        this._ui._imgName.skin = "res/gameIcon/gameIcon_matchInfo_" + this._data.gtype + ".png";
        this._ui._labMember.text = this._data.tplayer + "人";
        this._ui._labTitle.text = this._data.title;
        this._ui._labDua.text = TimeUtils.timeFormat(this._data.ttime, "{2}时{1}分");
        if (this._data.rank > 0) {
            this._ui._imgNoRank.visible = false;
            this._ui._labRank.text = this._data.rank;
        }
        else {
            this._ui._imgNoRank.visible = true;
            this._ui._labRank.text = "";
        }
        if (this._data.hasOwnProperty("list"))
            this.setList();
        else
            this._data.list = [];
    };
    /***渲染单元格时的回调方法***/
    MatchHistoryCtrl.prototype.updateList = function (cell, index) {
        if (this._data.hasOwnProperty("list"))
            cell.updata(index == (this._data.list.length - 1), this.isFreeMatch);
    };
    /**
     * 离开时调度
     */
    MatchHistoryCtrl.prototype.afterShow = function () {
        _super.prototype.afterShow.call(this);
    };
    /***选择单元格回调***/
    MatchHistoryCtrl.prototype.onSelect = function (e) {
        if (e.type == Laya.Event.MOUSE_OUT) {
            if (this._ui._list.scrollBar.value >= this._ui._list.scrollBar.max)
                this.getNextPage();
        }
    };
    MatchHistoryCtrl.prototype.getNextPage = function () {
        var _this = this;
        if (this._data.page < this._data.pageCnt)
            webService.getHistoryMatch(this._data.gid, this._data.page + 1, this._data.gtype, "", 0, 0, 0, function (response) {
                if (response.code == 0) {
                    if (response.page > _this._data.page) {
                        _this._data.page = response.page;
                        if (response.data) {
                            _this._data.list = _this._data.list.concat(response.data);
                            _this.setList();
                        }
                    }
                }
            });
    };
    MatchHistoryCtrl.prototype.setList = function () {
        if (this._data.list[0].hasOwnProperty("score") && Number(this._data.list[0].score) > 0)
            this.isFreeMatch = false;
        else
            this.isFreeMatch = true;
        this._ui._list.array = this._data.list;
    };
    Object.defineProperty(MatchHistoryCtrl.prototype, "isFreeMatch", {
        get: function () {
            return this._isFreeMatch;
        },
        set: function (value) {
            this._isFreeMatch = value;
            if (this._isFreeMatch) {
                this._ui._labNickname.centerX = 108;
                this._ui._labReward.visible = false;
            }
            else {
                this._ui._labNickname.centerX = 0;
                this._ui._labReward.visible = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    return MatchHistoryCtrl;
}(BaseCtrl));
//# sourceMappingURL=MatchHistoryCtrl.js.map
/*
* @author seacole
* 比赛玩家列表Renderer;
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var MatchHistoryRenderer = /** @class */ (function (_super) {
    __extends(MatchHistoryRenderer, _super);
    function MatchHistoryRenderer() {
        return _super.call(this) || this;
    }
    MatchHistoryRenderer.prototype.updata = function (isLast, isFreeMatch) {
        if (this.dataSource) {
            if (this.dataSource.hasOwnProperty("rk"))
                if (this._dataSource.rk <= 3) {
                    this._labRank.text = "";
                    this._imgRank.visible = true;
                    this._imgRank.source = Laya.loader.getRes("matchSign/matchSign_rank_" + this.dataSource.rk + ".png");
                }
                else {
                    this._labRank.text = this.dataSource.rk;
                    this._imgRank.visible = false;
                }
            else {
                this._labRank.text = "";
                this._imgRank.visible = false;
            }
            this._imgLine.visible = !isLast;
            this._labNickname.text = Utils.getFitNickName(this.dataSource.nk, 20);
            if (isFreeMatch) {
                this._labNickname.centerX = 108;
                this._imgDiamond.visible = this._labReward.visible = false;
            }
            else {
                this._labNickname.centerX = 0;
                this._labReward.text = this.dataSource.score ? this.dataSource.score : 0;
                this._imgDiamond.visible = this._labReward.visible = true;
            }
        }
    };
    return MatchHistoryRenderer;
}(ui.matchSign.MatchSignUser3RendererUI));
//# sourceMappingURL=MatchHistoryRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 开房页签;
*/
var MenuFindUI = /** @class */ (function (_super) {
    __extends(MenuFindUI, _super);
    function MenuFindUI() {
        var _this = _super.call(this) || this;
        _this.name = "MenuFindUI";
        _this._head = new HeadUI();
        _this._head.setImageBounds(88, 88);
        _this._head.nameLimit = 20;
        _this._head.setLabName({ x: 106, y: 15, align: "left", color: "#0d0d0d", fontSize: 24 });
        _this._head.setLabInfo(HeadUI.TYPE_UID, { x: 106, y: 53, align: "left", color: "#bee7fe", fontSize: 22 });
        _this._head.pos(20, 10);
        _this._headInfo.addChild(_this._head);
        _this._panel.vScrollBar.visible = false;
        _this._panel.visible = false;
        var games = GameDef.showGames;
        var skins = [];
        var i = 0;
        _this.arrgame = [];
        for (var k in games) {
            var v = games[k];
            // skins.push("res/menu/create_"+v+".png")
            var button = void 0;
            if (GameConfig.IS_BANSHU) {
                button = new component.BaseButton("banshu/create_" + k + ".png");
                //   button.skin
                //  button.skin = Laya.loader.getRes("res/banshu/create_" + v + ".png");
            }
            else
                button = new component.BaseButton("res/menu/create_" + k + ".png");
            // button.skin = "res/menu/create_"+v+".png"
            button.stateNum = 2;
            // this.addChild(button)
            // button.centerX = 0
            button.centerX = (i % 2) == 0 ? -150 : 150;
            button.y = Math.floor(i / 2) * 190 + 160;
            button.name = String(k);
            button.mouseEnabled = true;
            button.mouseThrough = true;
            EventManager.instance.registerOnObject(_this, button, Laya.Event.CLICK, _this, _this.onGameTouch, [v]);
            i++;
            if (GameConfig.IS_IOS_EXAMINE && i > 1)
                break;
            _this.arrgame.push({ "k": k, "games": v });
        }
        _this.arrgame.sort(function (a, b) {
            if (GameDef._showDes[a.k] > GameDef._showDes[b.k])
                return 1;
            else
                return -1;
        });
        _this._list.itemRender = component.BaseButton;
        _this._list.scrollBar.visible = false;
        _this._list.renderHandler = new Laya.Handler(_this, _this.updateListResult);
        //this._list.selectEnable = false;
        _this._list.mouseHandler = new Laya.Handler(_this, _this.goToPage);
        _this._list.array = _this.arrgame;
        //this._list.selectHandler = new Laya.Handler(this, this.goToPage)
        _this._btnJoinMatch.top = Math.ceil(i / 2) * 180 + 200;
        _this._btnJoin.top = _this._btnJoinMatch.top + _this._btnJoinMatch.height + 20;
        if (Native.instance.isNative)
            _this._ani.removeSelf();
        else
            _this._ani.hitArea = new Laya.Rectangle(-115, -48, 230, 97);
        // Laya.loader.load(skins, Laya.Handler.create(this, this.onUIAssetsLoaded.bind(this)));
        EventManager.instance.registerOnObject(_this, Dispatcher.eventDispatcher, EventNames.REFRESH_ROLE_INFO, _this, _this.onRefreshRoleInfo);
        EventManager.instance.registerOnObject(_this, _this._ani, Laya.Event.CLICK, _this, _this.onTouch);
        EventManager.instance.registerOnObject(_this, _this._btnJoin, Laya.Event.CLICK, _this, _this.onTouch);
        EventManager.instance.registerOnObject(_this, _this._btnJoinMatch, Laya.Event.CLICK, _this, _this.onTouch);
        EventManager.instance.registerOnObject(_this, _this._btnRecharge, Laya.Event.CLICK, _this, _this.onTouch);
        EventManager.instance.registerOnObject(_this, AppControl.getInstance().stage, Laya.Event.RESIZE, _this, _this.onResize);
        return _this;
    }
    MenuFindUI.prototype.updateListResult = function (cell, index) {
        cell.skin = "res/menu/create_" + this.arrgame[index].k + ".png";
        cell.stateNum = 2;
        cell.width = 280;
        cell.height = 180;
    };
    MenuFindUI.prototype.goToPage = function (e, index) {
        console.log(e.type);
        if (e.type == "mousedown") {
            console.log("index=============" + index);
            if (GameLogic.selfData.game_code) {
                this.showPop();
            }
            else
                this.create(this.arrgame[index].k, this.arrgame[index].games);
        }
    };
    MenuFindUI.prototype.addListener = function () {
        EventManager.instance.enableOnObject(this);
        if (GameLogic.selfData.game_code > 0) {
            this._btnJoin.skin = "menu/back.png";
        }
        else {
            this._btnJoin.skin = "menu/jrfj.png";
        }
        // webService.getUserInfo(server.uid, function (param) {
        //     if (param.diamond)
        //         this._diamond.text = StringUtils.format(GameConfig.language.diamond, param.diamond)
        // }.bind(this));
        if (!Native.instance.isNative)
            this._ani.play(1, true);
        this.onResize();
    };
    MenuFindUI.prototype.removeListener = function () {
        if (!Native.instance.isNative)
            this._ani.stop();
        EventManager.instance.disableOnObject(this);
    };
    MenuFindUI.prototype.onResize = function () {
        this.width = AppControl.getInstance().stage.width;
        this.height = this.parent.height - 80;
        this._ani.x = this.width - 230 * 0.5 - 20;
        var tmp = this.height;
        if (this.height > 1280)
            tmp = 1280;
        this._ani.y = tmp - 97 * 0.5 - 20;
    };
    MenuFindUI.prototype.onRefreshRoleInfo = function () {
        this._head.data = GameLogic.selfData;
        if (GameLogic.selfData.game_code > 0) {
            this._btnJoin.skin = "menu/back.png";
        }
        else {
            this._btnJoin.skin = "menu/jrfj.png";
        }
        this._diamond.text = StringUtils.format(GameConfig.language.diamond, GameLogic.selfData.diamond);
    };
    MenuFindUI.prototype.onGameTouch = function (param, e) {
        if (e.currentTarget.name) {
            if (GameLogic.selfData.game_code) {
                this.showPop();
            }
            else
                this.create(e.currentTarget.name, param);
        }
    };
    /**
    * 鼠标点击事件
    */
    MenuFindUI.prototype.onTouch = function (e, param) {
        switch (e.currentTarget) {
            // case this._btnCreate:
            //     if (GameLogic.selfData.game_code) {
            //         this.showPop()
            //     } else
            //         this.create(GameDef.GAME_TYPE.SHANXI_MJ);
            //     break;
            // case this._btnCreate2:
            //     if (GameLogic.selfData.game_code) {
            //         this.showPop()
            //     } else
            //         this.create(GameDef.GAME_TYPE.WAKENG);
            //     break;
            // case this._btnCreate3:
            //     if (GameLogic.selfData.game_code) {
            //         this.showPop()
            //     } else
            //         this.create(GameDef.GAME_TYPE.SHISANSHUI);
            //     break;
            // case this._btnCreate4:
            //     if (GameLogic.selfData.game_code) {
            //         this.showPop()
            //     } else
            //         this.create(GameDef.GAME_TYPE.JINYUN_MJ);
            //     break;
            case this._ani:
                Native.instance.gotoDownload();
                break;
            case this._btnJoin:
                this.join();
                break;
            case this._btnJoinMatch:
                matchSign.MatchSignCtrl.instance.show();
                break;
            case this._btnRecharge:
                ShopCtrl.instance.show();
                break;
        }
        if (e.currentTarget.name) {
            if (GameLogic.selfData.game_code) {
                this.showPop();
            }
            else
                this.create(e.currentTarget.name, param);
        }
    };
    MenuFindUI.prototype.showPop = function () {
        var _this = this;
        AlertInGameCtrl.instance.show(StringUtils.format(GameConfig.language.alreadySeat, GameLogic.selfData.game_code), function (code) {
            if (code == AlertCtrl.CONFIRM) {
                _this.join();
            }
            else {
            }
        });
    };
    MenuFindUI.prototype.create = function (type, param) {
        CreateTableCtrl.instance.show(type, param);
    };
    MenuFindUI.prototype.join = function () {
        var _this = this;
        if (GameLogic.selfData.game_code > 0) {
            webService.joinTable(String(GameLogic.selfData.game_code), function (response) {
                if (response.code == 0) {
                    // this._ui._labRoom.focus = false;
                    GameConfig.setServerUrl(response.ip);
                    GameConfig.joinTable(response);
                }
                else {
                    GameLogic.selfData.game_code = 0;
                    _this.onRefreshRoleInfo();
                    AlertInGameCtrl.instance.show(GameConfig.language.join_fail, null, 0, false);
                    GameLogic.selfData.getInfo(true);
                }
            });
        }
        else {
            JoinTableCtrl.instance.show();
        }
    };
    return MenuFindUI;
}(ui.components.menu.MenuFindUI));
//# sourceMappingURL=MenuFindUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 游戏List  Renderer;
*/
var MenuGameRenderer = /** @class */ (function (_super) {
    __extends(MenuGameRenderer, _super);
    function MenuGameRenderer() {
        return _super.call(this) || this;
    }
    MenuGameRenderer.prototype.updata = function () {
        this._imgGame.source = Laya.Loader.getRes("gamename/" + this.dataSource.gtype + ".png");
        //this._gameName.text
        this._labName.text = Utils.getFitNickName(this.dataSource.name, 10);
        this._score.text = this.dataSource.score;
        this._labDesc.text = TimeUtils.timeFormat(this.dataSource.end_time);
        if (this.parent)
            this.width = this.parent["width"];
    };
    return MenuGameRenderer;
}(ui.components.menu.MenuGameRendererUI));
//# sourceMappingURL=MenuGameRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 战绩统计List  Renderer;
*/
var MenuHistoryDetailRenderer = /** @class */ (function (_super) {
    __extends(MenuHistoryDetailRenderer, _super);
    function MenuHistoryDetailRenderer() {
        return _super.call(this) || this;
    }
    MenuHistoryDetailRenderer.prototype.updata = function () {
        // var cfg: any = GameConfig.getGameCfgByGameType(this.dataSource.gtype);
        // if (cfg) {
        this._time.text = TimeUtils.Format("MM-dd hh:mm", this.dataSource.st);
        // this._labInfo.text = StringUtils.format(GameConfig.language.history_detail, this.dataSource.round, this.dataSource.score);
        if (this.parent) {
            this.width = this.parent["width"] - 20;
            this._box.width = this.width - 200;
        }
        this._box.removeChildren();
        var peace = this._box.width / this.dataSource.ss.length;
        for (var k in this.dataSource.ss) {
            var v = this.dataSource.ss[k];
            var view = new Laya.Box();
            view.width = peace;
            var text = new Laya.Label(Utils.getFitNickName(v.n, 10));
            text.color = "#9b5036";
            text.fontSize = 18;
            text.centerX = 0;
            // text.strokeColor = "#5c281f"
            // text.stroke = 2
            view.addChild(text);
            var score = new Laya.Label(String(v.s));
            if (v.s > 0) {
                score.font = "font_num_10";
            }
            else {
                score.font = "font_num_9";
            }
            view.addChild(score);
            score.y = 47;
            score.centerX = 0;
            this._box.addChild(view);
            view.x = parseInt(k) * peace;
        }
        // }
        this.setHandCount();
        this.setTime();
        this.setScores();
    };
    MenuHistoryDetailRenderer.prototype.setHandCount = function () {
        var str = "第" + this.dataSource.cnt + "局";
        this._hand_count.text = str;
    };
    MenuHistoryDetailRenderer.prototype.setTime = function () {
        this._txtTime.text = TimeUtils.Format("MM-dd hh:mm", this.dataSource.st);
    };
    MenuHistoryDetailRenderer.prototype.setScores = function () {
        var arr = [];
        for (var k in this.dataSource.ss) {
            var s = this.dataSource.ss[k].s;
            arr.push(s + "");
        }
        this._scores.itemRender = TextRender;
        this._scores.array = arr;
        this._scores.renderHandler = new Laya.Handler(this, function (cell, idx) {
            cell.updata(idx);
        });
    };
    return MenuHistoryDetailRenderer;
}(ui.components.menu.MenuHistoryDetailRenderUI));
//# sourceMappingURL=MenuHistoryDetailRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 战绩统计List  Renderer;
*/
var MenuHistoryScoreRenderer = /** @class */ (function (_super) {
    __extends(MenuHistoryScoreRenderer, _super);
    function MenuHistoryScoreRenderer() {
        var _this = _super.call(this) || this;
        if (GameConfig.IS_BANSHU)
            _this._video.removeSelf();
        return _this;
        // this._video.on(Laya.Event.CLICK, this, this.click)
        // this._share.on(Laya.Event.CLICK, this, this.click)
        // this._share.mouseThrough = false
    }
    MenuHistoryScoreRenderer.prototype.updata = function (index) {
        // var cfg: any = GameConfig.getGameCfgByGameType(this.dataSource.gtype);
        // if (cfg) {
        // if (this.dataSource.gtype == 3) {
        //     this._imgTile.skin = "menu/item_bg_0.png"
        // } else {
        //     this._imgTile.skin = "menu/item_bg_1.png"
        // }
        this._imgTile.skin = GameDef.SCORE_BG[this.dataSource.gtype];
        if (GameConfig.IS_BANSHU) {
            //this._imgGame.source = Laya.Loader.getRes("banshu/history_" + this.dataSource.gtype + ".png");
            this._gameName.text = GameDef.GAME_NAME_CH[this.dataSource.gtype - 1];
        }
        else {
            //this._imgGame.source = Laya.Loader.getRes("menu/" + this.dataSource.gtype + ".png");
            this._gameName.text = GameDef.GAME_NAME_CH[this.dataSource.gtype - 1];
        }
        // this._labName.text = cfg.name;
        if (this.dataSource.score >= 0) {
            this._score.text = "+" + String(this.dataSource.score);
            this._imgScore.skin = "menu/score_bg_0.png";
            this._score.font = "font_num_10";
        }
        else {
            this._score.text = this.dataSource.score;
            this._imgScore.skin = "menu/score_bg_1.png";
            this._score.font = "font_num_9";
        }
        this._labInfo.text = TimeUtils.timeChange(this.dataSource.end_time * 1000);
        // TimeUtils.Format("yyyy-MM-dd hh:mm:ss", this.dataSource.end_time)
        if (this.parent)
            this.width = this.parent["width"] - 20;
        //是比赛
        var show = true;
        if (MatchConfig.isMatch(this.dataSource.gmode)) {
            this._imgMatch.visible = true;
            this._video.visible = false;
            this._labMatchTitle.text = this.dataSource.title;
            show = false;
            //有排名
            if (this.dataSource.rank > 0) {
                this._score.text = this.dataSource.rank;
                this._imgDi.visible = this._imgMing.visible = this._imgScore.visible = this._score.visible = true;
                this._imgNoRank.visible = false;
                this._imgDi.right = this._score.right + this._score.displayWidth + 8;
                this._imgDi.alpha = this._imgMing.alpha = this._imgScore.alpha = this._score.alpha = 1;
            }
            else {
                this._imgDi.visible = this._imgMing.visible = this._imgScore.visible = this._score.visible = false;
                this._imgNoRank.visible = true;
                this._imgNoRank.alpha = 1;
            }
        }
        else {
            this._score.visible = false;
            this._labMatchTitle.text = "";
            this._imgMatch.visible = false;
            this._video.visible = true;
            this._imgNoRank.visible = false;
            this._imgScore.visible = false;
            this._imgDi.visible = this._imgMing.visible = false;
        }
        this.setResult(show);
        this.setGameMessage(show);
        this.setPlayers(show);
        // }
    };
    MenuHistoryScoreRenderer.prototype.click = function () {
        console.log("分享");
    };
    /**
     * 设置结果
     */
    MenuHistoryScoreRenderer.prototype.setResult = function (show) {
        if (show === void 0) { show = true; }
        var score = this.dataSource.score;
        if (0 < score)
            this._result.skin = "menu/win.png";
        if (0 == score)
            this._result.skin = "menu/tie.png";
        if (0 > score)
            this._result.skin = "menu/lose.png";
        this._result.visible = show;
    };
    /**
     * 设置游戏信息
     */
    MenuHistoryScoreRenderer.prototype.setGameMessage = function (show) {
        if (show === void 0) { show = true; }
        var str = "房间号: " + this.dataSource.gcode;
        this._game_msg.text = str;
        this._game_msg.visible = show;
    };
    /**
     * 设置玩家信息
     */
    MenuHistoryScoreRenderer.prototype.setPlayers = function (show) {
        if (show === void 0) { show = true; }
        var score = this.dataSource.score;
        var str = (score > 0 ? "+" : "") + score;
        this._players.text = str;
        this._players.visible = show;
    };
    return MenuHistoryScoreRenderer;
}(ui.components.menu.MenuHistoryScoreRendererUI));
// class PlayerRender extends Laya.Text{
// }
//# sourceMappingURL=MenuHistoryScoreRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 大厅页签;
*/
var MenuLobbyUI = /** @class */ (function (_super) {
    __extends(MenuLobbyUI, _super);
    function MenuLobbyUI() {
        var _this = _super.call(this) || this;
        _this.name = "MenuLobbyUI";
        _this._head = new HeadUI();
        _this._head.setLabName({ x: 106, y: 15, align: "left", color: "#000000" });
        _this._head.setLabInfo(HeadUI.TYPE_GOLD, { x: 106, y: 50, align: "left", color: "#ff8e00" });
        _this._head.pos(20, 10);
        _this.addChildAt(_this._head, 0);
        _this._list.itemRender = MenuGameRenderer;
        _this._list.scrollBar.visible = false;
        _this._list.selectEnable = true;
        _this._list.renderHandler = new Laya.Handler(_this, _this.updateList);
        _this._list.mouseHandler = new Laya.Handler(_this, _this.onSelect);
        var _listArr = [];
        for (var idx in GameConfig.cfgGameList) {
            _listArr.push(GameConfig.cfgGameList[idx]);
        }
        _this._list.array = _listArr;
        EventManager.instance.registerOnObject(_this, Dispatcher.eventDispatcher, EventNames.REFRESH_ROLE_INFO, _this, _this.onRefreshRoleInfo);
        EventManager.instance.registerOnObject(_this, AppControl.getInstance().stage, Laya.Event.RESIZE, _this, _this.onResize);
        return _this;
    }
    MenuLobbyUI.prototype.addListener = function () {
        EventManager.instance.enableOnObject(this);
        this.onResize();
    };
    MenuLobbyUI.prototype.removeListener = function () {
        EventManager.instance.disableOnObject(this);
    };
    MenuLobbyUI.prototype.onResize = function () {
        this.width = AppControl.getInstance().stage.width;
    };
    MenuLobbyUI.prototype.onRefreshRoleInfo = function () {
        this._head.data = GameLogic.selfData;
    };
    /***渲染单元格时的回调方法***/
    MenuLobbyUI.prototype.updateList = function (cell, index) {
        cell.updata();
    };
    /***选择单元格回调***/
    MenuLobbyUI.prototype.onSelect = function (e) {
        if (e.type == Laya.Event.CLICK) {
            log(e.target.dataSource);
        }
    };
    return MenuLobbyUI;
}(ui.components.menu.MenuLobbyUI));
//# sourceMappingURL=MenuLobbyUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 我的页签;
*/
var MenuPersonUI = /** @class */ (function (_super) {
    __extends(MenuPersonUI, _super);
    function MenuPersonUI() {
        var _this = _super.call(this) || this;
        _this.name = "MenuPersonUI";
        _this._head = new HeadUI();
        _this._head.nameLimit = 20;
        _this._head.setImageBounds(110, 110);
        _this._head.setLabName({ centerX: 12, y: 120, width: 200, align: "center", color: "#000000", fontSize: 26 });
        _this._head.setLabInfo(HeadUI.TYPE_UID, { x: 0, y: 158, align: "center", color: "#bee7fe", fontSize: 26 });
        _this._head.centerX = 0;
        _this._head.y = 50;
        _this.addChild(_this._head);
        // this._btnBack.visible=!Native.instance.isWeiXin;
        EventManager.instance.registerOnObject(_this, Dispatcher.eventDispatcher, EventNames.REFRESH_ROLE_INFO, _this, _this.onRefreshRoleInfo);
        EventManager.instance.registerOnObject(_this, AppControl.getInstance().stage, Laya.Event.RESIZE, _this, _this.onResize);
        EventManager.instance.registerOnObject(_this, _this._btnBack, Laya.Event.CLICK, _this, _this.onBack);
        EventManager.instance.registerOnObject(_this, _this._btnHelp, Laya.Event.CLICK, _this, _this.onHelp);
        EventManager.instance.registerOnObject(_this, _this._btnClub, Laya.Event.CLICK, _this, _this.onClub);
        EventManager.instance.registerOnObject(_this, _this._btnRecharge, Laya.Event.CLICK, _this, _this.onCharge);
        EventManager.instance.registerOnObject(_this, _this._btnSet, Laya.Event.CLICK, _this, _this.onSet);
        EventManager.instance.registerOnObject(_this, _this._btnShare, Laya.Event.CLICK, _this, _this.onShare);
        EventManager.instance.registerOnObject(_this, _this._btnShop, Laya.Event.CLICK, _this, _this.onCharge);
        EventManager.instance.registerOnObject(_this, _this._btnKefu, Laya.Event.CLICK, _this, _this.onKeFu);
        if (GameConfig.IS_BANSHU) {
            _this._btnShare.removeSelf();
            _this._btnKefu.removeSelf();
            _this._btnSet.x = _this._btnShare.x;
        }
        return _this;
    }
    MenuPersonUI.prototype.onKeFu = function () {
        KeFuCtrl.instance.show("本游戏仅供休闲娱乐使用，游戏中有任何问题请联系客服微信<br>微信号：ddyx18");
    };
    MenuPersonUI.prototype.onShare = function () {
        Dispatcher.dispatch("show_share");
    };
    MenuPersonUI.prototype.onSet = function () {
        SetupCtrl.instance.show(true);
    };
    MenuPersonUI.prototype.onCharge = function () {
        ShopCtrl.instance.show();
    };
    MenuPersonUI.prototype.addListener = function () {
        GameLogic.selfData.getInfo(true);
        EventManager.instance.enableOnObject(this);
        this.onResize();
    };
    MenuPersonUI.prototype.removeListener = function () {
        EventManager.instance.disableOnObject(this);
    };
    MenuPersonUI.prototype.onResize = function () {
        this.width = AppControl.getInstance().stage.width;
        this.height = AppControl.getInstance().stage.height - 80;
    };
    MenuPersonUI.prototype.onRefreshRoleInfo = function () {
        this._head.data = GameLogic.selfData;
        this._diamond.text = StringUtils.format(GameConfig.language.diamond, GameLogic.selfData.diamond);
    };
    MenuPersonUI.prototype.onBack = function (e) {
        AppControl.getInstance().showPage(LoginPage);
    };
    MenuPersonUI.prototype.onHelp = function (e) {
        HelpCtrl.instance.show(false, GameDef.currentGames);
    };
    MenuPersonUI.prototype.onClub = function (e) {
    };
    return MenuPersonUI;
}(ui.components.menu.MenuPersonUI));
//# sourceMappingURL=MenuPersonUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 战绩页签;
*/
var MenuScoreUI = /** @class */ (function (_super) {
    __extends(MenuScoreUI, _super);
    function MenuScoreUI() {
        var _this = _super.call(this) || this;
        _this._dicDetail = {};
        _this.name = "MenuScoreUI";
        _this._list.itemRender = MenuHistoryScoreRenderer;
        _this._list.scrollBar.visible = false;
        _this._list.scrollBar.elasticDistance = 100;
        _this._list.selectEnable = true;
        _this._list.renderHandler = new Laya.Handler(_this, _this.updateList);
        _this._list.mouseHandler = new Laya.Handler(_this, _this.onSelect);
        _this._list.scrollBar.on(Laya.Event.CHANGE, _this, _this.onScrollListsChanged);
        _this._list.array = [];
        _this._listDetail.itemRender = MenuHistoryDetailRenderer;
        _this._listDetail.scrollBar.visible = false;
        _this._listDetail.selectEnable = true;
        _this._listDetail.renderHandler = new Laya.Handler(_this, _this.updateListDetail);
        _this._listDetail.mouseHandler = new Laya.Handler(_this, _this.onSelectDetail);
        EventManager.instance.registerOnObject(_this, AppControl.getInstance().stage, Laya.Event.RESIZE, _this, _this.onResize);
        EventManager.instance.registerOnObject(_this, Dispatcher.eventDispatcher, EventNames.UNAUTHORIZED, _this, _this.onUnauthorized);
        Dispatcher.on(EventNames.BACK_TO_LOGIN, _this, _this.clear);
        _this.clear();
        _this.listenBtn();
        return _this;
    }
    MenuScoreUI.prototype.listenBtn = function () {
        var _this = this;
        this._btn_close.on(Laya.Event.CLICK, this, function () {
            if (MenuScoreUI.TAG_LIST == _this._currentTag) {
                _this.visible = false;
            }
            else
                _this.currentTag = MenuScoreUI.TAG_LIST;
        });
        this.deniedScroll(this._btn_close, [this._list, this._listDetail, this._players]);
    };
    MenuScoreUI.prototype.deniedScroll = function (view, lists) {
        for (var _i = 0, lists_1 = lists; _i < lists_1.length; _i++) {
            var list = lists_1[_i];
            view.on(Laya.Event.MOUSE_DOWN, this, this.onViewTouch, [list]);
            view.on(Laya.Event.MOUSE_MOVE, this, this.onViewTouch, [list]);
            view.on(Laya.Event.MOUSE_UP, this, this.onViewTouch, [list]);
            view.on(Laya.Event.MOUSE_OUT, this, this.onViewTouch, [list]);
        }
    };
    MenuScoreUI.prototype.onViewTouch = function (e, list) {
        if (list) {
            if (e.type == "mousedown") {
                list.scrollBar.touchScrollEnable = false;
                list.scrollBar.mouseWheelEnable = false;
            }
            if (e.type == "mouseout") {
                list.scrollBar.touchScrollEnable = true;
                list.scrollBar.mouseWheelEnable = true;
            }
            if (e.type == "mouseup") {
                list.scrollBar.touchScrollEnable = true;
                list.scrollBar.mouseWheelEnable = true;
            }
        }
    };
    MenuScoreUI.prototype.addListener = function () {
        EventManager.instance.enableOnObject(this);
        Laya.timer.loop(10 * 1000, this, this.onTimer);
        this.onResize();
        this._currentTag = 0;
        this.currentTag = MenuScoreUI.TAG_LIST;
    };
    MenuScoreUI.prototype.removeListener = function () {
        EventManager.instance.disableOnObject(this);
        Laya.timer.clear(this, this.onTimer);
        this.clear();
    };
    MenuScoreUI.prototype.onResize = function () {
        this.width = AppControl.getInstance().stage.width;
        this.height = AppControl.getInstance().stage.height > 1280 ? 1150 : AppControl.getInstance().stage.height - 130;
    };
    MenuScoreUI.prototype.clear = function () {
        this._isFirstPageGet = false;
        this._currRefreshPage = 0;
        this._maxPageCount = 0;
        this._listArr = [];
        // this._dicDetail = {};
        // this._detailTotal = {};
        this.updata();
    };
    /***渲染单元格时的回调方法***/
    MenuScoreUI.prototype.updateList = function (cell, index) {
        this.deniedScroll(cell._video, [this._list, this._listDetail, this._players]);
        cell.updata(index);
    };
    /***选择单元格回调***/
    MenuScoreUI.prototype.onSelect = function (e) {
        if (e.type == Laya.Event.CLICK) {
            var className = Laya.ClassUtils.getClass(e.target);
            if (e.target.name == "share") {
            }
            else if (e.target.name == "video") {
                var gid = e.target.parent.dataSource.gid;
                var gtype = e.target.parent.dataSource.gtype;
                if (this._dicDetail[gid]) {
                    this.showDetail(gid, gtype);
                }
                else {
                    LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY);
                    webService.getHistoryNoraml(gid, gtype, this.onGetHistoryDetail.bind(this));
                }
            }
            else {
                if (!GameConfig.IS_BANSHU) {
                    var gid = e.target.dataSource.gid;
                    var gtype = e.target.dataSource.gtype;
                    if (this._dicDetail[gid]) {
                        if (MatchConfig.isMatch(e.target.dataSource.gmode))
                            this.showMatchHistory(gid);
                        else
                            this.showDetail(gid, gtype);
                    }
                    else {
                        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY);
                        if (MatchConfig.isMatch(e.target.dataSource.gmode))
                            webService.getHistoryMatch(gid, 1, gtype, e.target.dataSource.title, e.target.dataSource.tplayer, e.target.dataSource.ttime, e.target.dataSource.rank, this.onGetHistoryMatchDetail.bind(this));
                        else
                            webService.getHistoryNoraml(gid, gtype, this.onGetHistoryDetail.bind(this));
                    }
                }
            }
        }
        // else if (e.type == Laya.Event.MOUSE_OUT) {
        //     if (this._list.scrollBar.value >= this._list.scrollBar.max)
        //         this.getNextPage();
        // }
    };
    MenuScoreUI.prototype.onScrollListsChanged = function () {
        if (this._list.scrollBar.value < 0)
            this._refreshFirstPage = true;
        else if (this._list.scrollBar.value > 0)
            this._refreshFirstPage = false;
        if (this._refreshFirstPage && this._list.scrollBar.value == 0)
            this.getFirstPage(true);
        if (this._list.scrollBar.value > this._list.scrollBar.max)
            this._refreshListsMore = true;
        else if (this._list.scrollBar.value < this._list.scrollBar.max)
            this._refreshListsMore = false;
        if (this._refreshListsMore && this._list.scrollBar.value == this._list.scrollBar.max)
            this.getNextPage();
    };
    /***渲染单元格时的回调方法***/
    MenuScoreUI.prototype.updateListDetail = function (cell, index) {
        this.deniedScroll(cell._video, [this._list, this._listDetail, this._players]);
        cell.updata();
    };
    /***选择单元格回调***/
    MenuScoreUI.prototype.onSelectDetail = function (e, index) {
        if (e.type == Laya.Event.CLICK) {
            // goto播录像
            var vid;
            var gtype;
            if (e.target.name == "video") {
                vid = e.target.parent.dataSource.vid;
                gtype = e.target.parent.dataSource.gtype;
            }
            else {
                vid = e.target.dataSource.vid;
                gtype = e.target.dataSource.gtype;
            }
            LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY);
            var testPath = GameConfig.WEB_SERVICE_URL + "/history/video?vid=" + vid;
            Laya.loader.load(testPath, Laya.Handler.create(this, this.onGetVidoInfo, [gtype]), null, Laya.Loader.BUFFER);
            // webService.getVideoDetail(vid, gtype, this.onGetHistoryDetail.bind(this));
        }
    };
    MenuScoreUI.prototype.onGetVidoInfo = function (gtype, data) {
        LoadingUI.instance.hide();
        if (data) {
            // if (String(gtype) == GameDef.GAME_TYPE.SHANXI_MJ || String(gtype) == GameDef.GAME_TYPE.WAKENG
            //     || String(gtype) == GameDef.GAME_TYPE.JINYUN_MJ || String(gtype) == GameDef.GAME_TYPE.SHISANSHUI
            //     || String(gtype) == GameDef.GAME_TYPE.JINYUN_GS_MJ || String(gtype) == GameDef.GAME_TYPE.JINYUN_HZ_MJ
            //     || String(gtype) == GameDef.GAME_TYPE.SHANGQIU_MJ || String(gtype) == GameDef.GAME_TYPE.GUANPAI) {
            GameConfig.IS_MATCH = false;
            AppControl.getInstance().showPage(GameConfig.getGamePage(GameDef.GAME_NAME[gtype - 1]), 1, String(gtype), data);
            // }
        }
    };
    MenuScoreUI.prototype.onGetHistoryList = function (response) {
        if (response.code == 0) {
            if (this._currRefreshPage < response.page)
                this._currRefreshPage = response.page;
            this._maxPageCount = response.page_cnt;
            for (var i = 0; i < response.data.length; i++) {
                var flag = true;
                if (response.data[i].gmode >= 100)
                    flag = false;
                for (var j = 0; j < this._listArr.length; j++) {
                    if (this._listArr[j].gid == response.data[i].gid) {
                        flag = false;
                        break;
                    }
                }
                if (flag)
                    this._listArr.push(response.data[i]);
            }
            this._listArr.sort(this.onSort);
            this._list.array = this._listArr;
            this.updata();
            if (this.lastGInfo) {
                if (this._detailTotal && this._detailTotal[this._lastGid])
                    this.showDetail(this._lastGid, this._lastGtype);
                else {
                    LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY);
                    webService.getHistoryNoraml(this._lastGid, this._lastGtype, this.onGetHistoryDetail.bind(this));
                }
            }
        }
    };
    MenuScoreUI.prototype.onSort = function (a, b) {
        if (!a.hasOwnProperty("end_time"))
            a.end_time = 0;
        if (!b.hasOwnProperty("end_time"))
            b.end_time = 0;
        if (a.end_time > b.end_time)
            return -1;
        else if (a.end_time < b.end_time)
            return 1;
        else
            return 0;
    };
    MenuScoreUI.prototype.onGetHistoryDetail = function (response, gid, gtype) {
        LoadingUI.instance.hide();
        if (response.code == 0) {
            if (!this._detailTotal)
                this._detailTotal = {};
            if (this._detailTotal[gid])
                return;
            if (!this._detailTotal[gid])
                this._detailTotal[gid] = [];
            if (response.data) {
                for (var i = 0; i < response.data.length; i++) {
                    var data = JSON.parse(response.data[i]);
                    data.gtype = gtype;
                    response.data[i] = data;
                    for (var k in data.ss) {
                        var v = data.ss[k];
                        if (!this._detailTotal[gid][k]) {
                            this._detailTotal[gid][k] = {
                                "n": v.n,
                                "s": v.s
                            };
                        }
                        else {
                            this._detailTotal[gid][k].s += v.s;
                        }
                    }
                }
            }
            this._dicDetail[gid] = response.data;
            this.showDetail(gid, gtype);
        }
    };
    MenuScoreUI.prototype.onGetHistoryMatchDetail = function (response, gid, gtype, title, tplayer, ttime, rank) {
        LoadingUI.instance.hide();
        if (response.code == 0) {
            var data = { gid: gid, gtype: gtype, title: title, tplayer: tplayer, ttime: ttime };
            if (response.data)
                data.list = response.data;
            this._dicDetail[gid] = { list: response.data, gid: gid, gtype: gtype, title: title, tplayer: tplayer, ttime: ttime, rank: rank, page: response.page, pageCnt: response.page_cnt };
            this.showMatchHistory(gid);
        }
    };
    MenuScoreUI.prototype.showMatchHistory = function (gid) {
        MatchHistoryCtrl.instance.show(this._dicDetail[gid]);
    };
    MenuScoreUI.prototype.showDetail = function (gid, gtype) {
        this.zOrder = 4;
        this._lastGid = gid;
        this._lastGtype = gtype;
        this._listDetail.array = this._dicDetail[gid];
        this._luxiangname.skin = "createTable/" + gtype + ".png";
        this.currentTag = MenuScoreUI.TAG_DETAIL;
        this._profit.removeChildren();
        var peace = this._profit.width / this._detailTotal[gid].length;
        var space = "     ";
        var len = this._detailTotal[gid].length;
        var playersArr = [];
        for (var k in this._detailTotal[gid]) {
            var v = this._detailTotal[gid][k];
            var name_1 = new Laya.Label(Utils.getFitNickName(v.n, 10));
            name_1.fontSize = 26;
            name_1.color = "#ffffff";
            name_1.align = "center";
            name_1.strokeColor = "#5c281f";
            name_1.stroke = 2;
            name_1.x = peace * parseInt(k) + peace / 2;
            name_1.y = 10;
            name_1.anchorX = 0.5;
            this._profit.addChild(name_1);
            var text = new Laya.Label(String(v.s));
            text.align = "center";
            if (v.s >= 0) {
                text.text = "+" + v.s;
                text.font = "font_num_10";
            }
            else {
                text.font = "font_num_9";
            }
            text.x = peace * parseInt(k) + peace / 2;
            text.y = 45;
            text.anchorX = 0.5;
            this._profit.addChild(text);
            //strName += Utils.getFitNickName(v.n, 10)+space
            playersArr.push(Utils.getFitNickName(v.n, 10));
        }
        TextRender.WID = 860 / len;
        this._players.itemRender = TextRender;
        this._players.array = playersArr;
        this._players.renderHandler = new Laya.Handler(this, function (cell, idx) {
            cell.updata(idx);
        });
    };
    MenuScoreUI.prototype.onHistoryProfit = function (response) {
        if (response.code == 0 && response.data) {
            for (var k in response.data) {
                // this["profit_" + k].text = response.data[k]
                if (response.data[k] >= 0) {
                    this["profit_" + k].text = "+" + response.data[k];
                    this["profit_" + k].color = "#ffe932";
                }
                else {
                    this["profit_" + k].color = "#2bff4e";
                    this["profit_" + k].text = String(response.data[k]);
                }
            }
        }
    };
    MenuScoreUI.prototype.getFirstPage = function (isRefresh) {
        if (isRefresh === void 0) { isRefresh = false; }
        if (!this._isFirstPageGet || isRefresh) {
            if (!this._isFirstPageGet)
                webService.getHistoryProfit(this.onHistoryProfit.bind(this));
            webService.getHistoryList(1, 3, this.onGetHistoryList.bind(this));
            this._isFirstPageGet = true;
        }
    };
    MenuScoreUI.prototype.getNextPage = function () {
        if (this._currRefreshPage < this._maxPageCount)
            webService.getHistoryList(this._currRefreshPage + 1, 3, this.onGetHistoryList.bind(this));
    };
    MenuScoreUI.prototype.updata = function () {
        if (this._list.array && this._list.array.length) {
            this._labNoHistory.visible = false;
            this._list.visible = true;
        }
        else {
            this._labNoHistory.visible = true;
            this._list.visible = false;
        }
    };
    Object.defineProperty(MenuScoreUI.prototype, "currentTag", {
        set: function (value) {
            if (this._currentTag != value) {
                this._currentTag = value;
                if (this._currentTag == MenuScoreUI.TAG_LIST) {
                    this._listHistoryBox.visible = true;
                    this._list.visible = true;
                    this._listDeatilBox.visible = false;
                    this._listDetail.visible = false;
                }
                else {
                    this._listHistoryBox.visible = false;
                    this._list.visible = false;
                    this._listDeatilBox.visible = true;
                    this._listDetail.visible = true;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    MenuScoreUI.prototype.onBack = function (e) {
        this.zOrder = 1;
        this.clearLastInfo();
        this.currentTag = MenuScoreUI.TAG_LIST;
        this.visible = false;
    };
    MenuScoreUI.prototype.onUnauthorized = function (e) {
        this.clearLastInfo();
    };
    MenuScoreUI.prototype.clearLastInfo = function () {
        this._lastGid = 0;
        this._lastGtype = 0;
    };
    Object.defineProperty(MenuScoreUI.prototype, "lastGInfo", {
        get: function () {
            if (this._lastGid && this._lastGtype)
                return true;
            else
                return false;
        },
        enumerable: true,
        configurable: true
    });
    MenuScoreUI.prototype.onTimer = function () {
        if (this.visible && !this.lastGInfo)
            this.getFirstPage(true);
    };
    Object.defineProperty(MenuScoreUI.prototype, "isDetailShowing", {
        get: function () {
            return this._listDeatilBox.visible;
        },
        enumerable: true,
        configurable: true
    });
    MenuScoreUI.TAG_LIST = 1;
    MenuScoreUI.TAG_DETAIL = 2;
    return MenuScoreUI;
}(ui.components.menu.MenuScoreUI));
var TextRender = /** @class */ (function (_super) {
    __extends(TextRender, _super);
    function TextRender() {
        var _this = _super.call(this) || this;
        _this.init();
        return _this;
    }
    TextRender.prototype.init = function () {
        this._txt = new Laya.Label();
        this.addChild(this._txt);
        this._txt.fontSize = 24;
        this._txt.color = "#995d3b";
        this._txt.centerX = 0;
        this._txt.centerY = 0;
        this.height = 66;
        this.width = TextRender.WID;
    };
    TextRender.prototype.updata = function (index) {
        this._txt.text = this.dataSource;
    };
    return TextRender;
}(Laya.View));
//# sourceMappingURL=MenuScoreUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 电量
*/
var BatteryUI = /** @class */ (function (_super) {
    __extends(BatteryUI, _super);
    function BatteryUI() {
        var _this = _super.call(this) || this;
        Dispatcher.on(EventNames.BATTERY_CHANGE, _this, _this.onchange);
        Native.instance.onBatteryChanged(-1, -1);
        return _this;
    }
    // * @param {number } state 0:未知状态 1:未充电 2:充电中 3:已充满
    // * @param {number } level 电量 0-100
    BatteryUI.prototype.onchange = function (state, level) {
        this.process = level;
        this.isCharge = state == 2;
    };
    Object.defineProperty(BatteryUI.prototype, "process", {
        set: function (value) {
            this._imgProcess.width = 39 * value / 100;
            if (value >= 20)
                this._imgProcess.source = Laya.loader.getRes("table/battery_bg1.png");
            else
                this._imgProcess.source = Laya.loader.getRes("table/battery_bg3.png");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BatteryUI.prototype, "isCharge", {
        set: function (value) {
            this._imgCharge.visible = value;
            if (value)
                this._imgProcess.source = Laya.loader.getRes("table/battery_bg2.png");
        },
        enumerable: true,
        configurable: true
    });
    return BatteryUI;
}(ui.components.table.BatteryUI));
//# sourceMappingURL=BatteryUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 网络信号
*/
var NetSignalUI = /** @class */ (function (_super) {
    __extends(NetSignalUI, _super);
    function NetSignalUI() {
        var _this = _super.call(this) || this;
        _this.name = "NetSignalUI";
        Dispatcher.on(EventNames.PING_CHANGE, _this, _this.onNetChange);
        return _this;
    }
    NetSignalUI.prototype.onNetChange = function () {
        var ping = server.ping;
        var type = Native.instance.getNet();
        if (type == 1) {
            this._wifi1.visible = ping <= 150;
            this._wifi2.visible = ping > 150 && ping <= 300;
            this._wifi3.visible = ping > 300;
            this._4g1.visible = false;
            this._4g2.visible = false;
            this._4g3.visible = false;
        }
        else {
            this._4g1.visible = ping <= 150;
            this._4g2.visible = ping > 150 && ping <= 300;
            this._4g3.visible = ping > 300;
            this._wifi1.visible = false;
            this._wifi2.visible = false;
            this._wifi3.visible = false;
        }
    };
    return NetSignalUI;
}(ui.components.table.NetSignalUI));
//# sourceMappingURL=NetSignalUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 游戏中玩家UI
*/
var PlayerInGameUI = /** @class */ (function (_super) {
    __extends(PlayerInGameUI, _super);
    function PlayerInGameUI() {
        var _this = _super.call(this) || this;
        _this._btnSit.on(Laya.Event.CLICK, _this, _this.onSitTouch);
        _this._head = new HeadUI();
        _this._head.setLabName({ visible: false });
        // this._head.setLabInfo(HeadUI.TYPE_SCORE);
        // this._head.scale(0.8, 0.8);
        //     this._head._imgFemale.width = 73
        //     this._head._imgFemale.height = 73
        //    this._head._imgMale.width = 73
        //    this._head._imgMale.height = 73
        //    this._head._imgHead.width = 73
        //    this._head._imgHead.height = 73
        _this._head.setImageBounds(73, 73);
        _this._head.x = 12;
        _this._head.y = 12;
        _this._head._labName.fontSize = 18;
        _this._box.addChildAt(_this._head, 0);
        if (BaseGameData.gameType == GameConfig.GAME_TYPE_POKER) {
            _this._cardCountUI = new poker.PokerCountUI();
            _this._cardCountUI.y = 34;
            _this._box.addChildAt(_this._cardCountUI, _this._box.numChildren - 2);
            _this._boomCountUI = new poker.BoomCountUI();
            _this._boomCountUI.y = -15;
            _this._box.addChild(_this._boomCountUI);
            _this._imgDug = new Laya.Image();
            _this._imgDug.source = Laya.loader.getRes(ResourceConfig.DUG_URL + "10.png");
            _this._imgDug.y = -35;
            _this._box.addChild(_this._imgDug);
            _this._imgDug.visible = false;
            _this._imgPass = new Laya.Image();
            // this._imgPass.source = Laya.loader.getRes(ResourceConfig.PASS_URL);
            _this._imgPass.y = 24;
            _this._box.addChild(_this._imgPass);
            _this._imgPass.visible = false;
        }
        _this._chatContent = new ChatContent();
        _this._chatContent.visible = false;
        _this._box.addChild(_this._chatContent);
        _this._chatContent.pos(-70, -7);
        _this._box.on(Laya.Event.CLICK, _this, _this.onPlayerInfo);
        if (Native.instance.isNative) {
            _this._chatRecord = new ui.components.chat.ChatRecordUI();
            _this._chatRecord.y = 73;
            _this._chatRecord.visible = false;
            _this._box.addChild(_this._chatRecord);
            _this._chatRecordCh = new Laya.Image("table/table_chat_record.png");
            _this._chatRecordCh.y = 73;
            _this._box.addChild(_this._chatRecordCh);
        }
        return _this;
    }
    PlayerInGameUI.prototype.addListener = function () {
        EventManager.instance.enableOnObject(this);
    };
    PlayerInGameUI.prototype.removeListener = function () {
        EventManager.instance.disableOnObject(this);
    };
    Object.defineProperty(PlayerInGameUI.prototype, "index", {
        set: function (value) {
            this._index = value;
            this.name = "PlayerInGameUI" + this._index;
            this.scale(0.8, 0.8);
            if (BaseGameData.gameType == GameDef.GAME_TYPE.SHISANSHUI) {
                this.scale(1, 1);
            }
            EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.PLAYER_DATA_CHANGED, this, this.onDataChange);
            if (BaseGameData.gameType == GameConfig.GAME_TYPE_MJ) {
                switch (this._index) {
                    case 1:
                        this.setChildPos(2, 2);
                        break;
                    case 2:
                        this.setChildPos(1, 1);
                        this._imgPao.x = -16;
                        break;
                    case 3:
                        this.setChildPos(1, 2);
                        this._imgPao.x = -16;
                        break;
                    case 4:
                        this.setChildPos(2, 2);
                        break;
                }
            }
            else {
                switch (this._index) {
                    case 1:
                        this.setChildPos(1, 2, 2, 2, 2, 2);
                        break;
                    case 2:
                        this.setChildPos(2, 1, 1, 1, 1, 1);
                        break;
                    case 3:
                        this.setChildPos(1, 2, 2, 2, 2, 2);
                        break;
                    case 4:
                        this.setChildPos(1, 2, 2, 2, 2, 2);
                        break;
                }
            }
            if (this._chatContent) {
                this._chatContent.popleft = GameDef.CHAT_POS[BaseGameData.maxPlayer - 1][this._index - 1];
                if (this._chatRecord)
                    this._chatRecord.visible = this._chatRecordCh.visible = false;
                // let posi = Utils.injectProp(this._chatContent, GameDef.CHAT_POS[BaseGameData.maxPlayer - 1][this._index - 1]);
                // switch (this._index){
                //     case 1: 
                //          this._chatContent.y = -100
                //          break;
                //     case 2:
                //         break;
                //     case 3:
                //         this._chatContent.y = 100
                //         break;
                //     case 4:
                //         this._chatContent.x = 100
                //         break;
                // }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 1左2右
     */
    PlayerInGameUI.prototype.setChildPos = function (master, ready, cardCount, boom, dug, pass) {
        if (cardCount === void 0) { cardCount = 0; }
        if (boom === void 0) { boom = 0; }
        if (dug === void 0) { dug = 0; }
        if (pass === void 0) { pass = 0; }
        if (master == 1)
            this._imgMaster.x = -16;
        else if (master == 2)
            this._imgMaster.x = 70;
        if (ready == 1) {
            this._imgReady.x = -176;
            if (this._chatRecord)
                this._chatRecord.x = this._chatRecordCh.x = -7;
        }
        else if (ready == 2) {
            this._imgReady.x = 122;
            if (this._chatRecord)
                this._chatRecord.x = this._chatRecordCh.x = 72;
        }
        if (this._cardCountUI) {
            if (cardCount == 1)
                this._cardCountUI.x = -60;
            else if (cardCount == 2)
                this._cardCountUI.x = 110;
        }
        if (this._boomCountUI) {
            if (boom == 1)
                this._boomCountUI.x = -77;
            else if (boom == 2)
                this._boomCountUI.x = 100;
        }
        if (this._imgDug) {
            this._imgDugType = dug;
            if (dug == 1)
                this._imgDug.x = -114;
            else if (boom == 2)
                this._imgDug.x = 100;
        }
        if (this._imgPass) {
            if (dug == 1)
                this._imgPass.x = -148;
            else if (boom == 2)
                this._imgPass.x = 153;
        }
    };
    Object.defineProperty(PlayerInGameUI.prototype, "status", {
        get: function () {
            return this._status;
        },
        set: function (value) {
            if (this._status != value) {
                this._status = value;
                this._imgEmpty.visible = this._status == PlayerInGameUI.STATUS_EMPTY;
                this._btnSit.visible = this._status == PlayerInGameUI.STATUS_CAN_SIT;
                this._box.visible = this._status == PlayerInGameUI.STATUS_ALREADY_SIT;
                if (this._status == PlayerInGameUI.STATUS_ALREADY_SIT)
                    this.addListener();
                else {
                    this.removeListener();
                    this._data = null;
                    this._head.data = null;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    PlayerInGameUI.prototype.checkIsGameing = function (isFirstLayout) {
        if (isFirstLayout === void 0) { isFirstLayout = false; }
        this.checkAll();
        if (!isFirstLayout && this._isCurrentLayoutInGame == BaseGameData.isGameing)
            return;
        this._isCurrentLayoutInGame = BaseGameData.isGameing;
        var posi = PlayerInGamePosiConfig.getPosi(BaseGameData.gameType, this._index);
        this.setPosi(isFirstLayout, posi);
    };
    PlayerInGameUI.prototype.getMjGameType = function () {
    };
    PlayerInGameUI.prototype.setPosi = function (isFirstLayout, posi) {
        // if (isFirstLayout) {
        Utils.injectProp(this, posi);
        // }
        // else {
        //     this.centerX = NaN
        //     if (this._index == 1)
        //         AnimationManager.instance.addAnimation(() => {
        //             Laya.Tween.to(this, posi, 200, null, Laya.Handler.create(this, () => { AnimationManager.instance.animationOver() }));
        //         }, null);
        //     else
        //         Laya.Tween.to(this, posi, 200);
        // }
    };
    PlayerInGameUI.prototype.clear = function (needCheckIsGameing) {
        if (needCheckIsGameing === void 0) { needCheckIsGameing = true; }
        this.status = PlayerInGameUI.STATUS_CAN_SIT;
        this._isCurrentLayoutInGame = false;
        this._data = null;
        this._head.data = null;
        this._labScore.text = "";
        this._labFlower.text = "";
        this.pass = false;
        if (needCheckIsGameing)
            this.checkIsGameing(true);
        if (this._cardCountUI)
            this._cardCountUI.visible = false;
    };
    PlayerInGameUI.prototype.onSitTouch = function () {
        var _this = this;
        if (BaseGameData.divide) {
            var text = StringUtils.format(GameConfig.language.sit_down_tip, BaseGameData.divide);
            AlertInGameCtrl.instance.show(text, function (type) {
                if (type == AlertCtrl.CONFIRM) {
                    server.sitdownReq(_this._index);
                }
            }, 0, true, ResourceConfig.ALERT_TISHI);
        }
        else {
            server.sitdownReq(this._index);
        }
        // server.sitdownReq(this._index);
    };
    Object.defineProperty(PlayerInGameUI.prototype, "data", {
        set: function (value) {
            this._data = value;
            this.onDataChange(this._data.uid);
        },
        enumerable: true,
        configurable: true
    });
    PlayerInGameUI.prototype.checkMaster = function () {
        if (BaseGameData.gameType == GameDef.GAME_TYPE.SHISANSHUI) {
            this._imgMaster.visible = false;
            this._imgKengzhu.visible = false;
        }
        else if (BaseGameData.gameType == GameDef.GAME_TYPE.WAKENG) {
            this._imgMaster.visible = false;
            if (this._data)
                this._imgKengzhu.visible = this._data.seatid == BaseGameData.btnSeatid;
            else
                this._imgKengzhu.visible = false;
        }
        else {
            this._imgKengzhu.visible = false;
            if (this._data)
                this._imgMaster.visible = this._data.seatid == BaseGameData.btnSeatid;
            else
                this._imgMaster.visible = false;
        }
    };
    PlayerInGameUI.prototype.checkAll = function () {
        if (BaseGameData.gameType != GameDef.GAME_TYPE.SHANGQIU_MJ) {
            this._labFlower.visible = false;
            this._imgFlower.visible = false;
        }
        else {
            this._labFlower.visible = true;
            this._imgFlower.visible = true;
        }
        // if (BaseGameData.gameType == GameDef.GAME_TYPE.SHANGQIU_MJ) {
        //     this._imgFlower.visible = BaseGameData.isGameing;
        //     this._labFlower.visible = BaseGameData.isGameing;
        // } else 
        if (BaseGameData.gameType == GameDef.GAME_TYPE.SHANXI_MJ) {
            this._imgPao.visible = BaseGameData.isGameing;
        }
        this.setBoom();
        this.setReady();
        this.setCardCountUI();
        if (!BaseGameData.isGameing)
            this.pass = false;
    };
    PlayerInGameUI.prototype.onDataChange = function (uid) {
        this.checkAll();
        if (this._data) {
            if (this._data.uid == uid) {
                this._imgDisconnect.visible = this._data.isOffline;
                this._imgLeave.visible = this._data.isLeave;
                if (this._data.isOffline)
                    this.voiceChanged(0);
                this._labScore.text = this._data.score + "";
                if (this._data.score >= 0) {
                    this._labScore.color = "#ffdd65";
                }
                else
                    this._labScore.color = "#65ffa3";
                this._labFlower.text = this._data.flowerCout + "";
                this._labName.text = this._data.showname + "";
                this._head.data = this._data;
                this._imgPao.skin = "card/tag_" + this._data.pao + ".png";
                if (this._cardCountUI) {
                    if (this._data.uid == server.uid)
                        this._cardCountUI.count = this._data.handCards.length;
                    else
                        this._cardCountUI.count = this._data.handCardCount;
                }
                if (this._boomCountUI) {
                    this._boomCountUI.count = this._data.boomCount;
                    this.setBoom();
                }
                this.checkMaster();
            }
        }
        else {
            this._imgDisconnect.visible = false;
            this._imgMaster.visible = false;
            this._imgKengzhu.visible = false;
            this._head.data = null;
        }
    };
    PlayerInGameUI.prototype.setBoom = function () {
        if (this._boomCountUI) {
            if (BaseGameData.isGameing && this._data && this._data.boomCount > 0)
                this._boomCountUI.visible = true;
            else
                this._boomCountUI.visible = false;
        }
    };
    PlayerInGameUI.prototype.setCardCountUI = function () {
        if (this._cardCountUI)
            this._cardCountUI.visible = BaseGameData.isTableStart && !this._imgReady.visible;
    };
    PlayerInGameUI.prototype.setReady = function () {
        if (this._data && !GameConfig.IS_MATCH)
            this._imgReady.visible = this._data.isReady;
        else
            this._imgReady.visible = false;
    };
    PlayerInGameUI.prototype.onPlayerInfo = function () {
        if (!GameConfig.IS_BANSHU)
            PlayerInfoCtrl.instance.show(this._data);
    };
    PlayerInGameUI.prototype.showDug = function (score) {
        var _this = this;
        this._imgDug.source = Laya.loader.getRes(ResourceConfig.DUG_URL + this._imgDugType + score + ".png");
        Laya.Tween.clearTween(this._imgDug);
        this._imgDug.visible = true;
        TweenUtils.get(this._imgDug).to({ alpha: 1 }, 200).delay(1000).to({ alpha: 0 }, 200, null, Laya.Handler.create(this, function () {
            _this._imgDug.visible = false;
        }));
    };
    Object.defineProperty(PlayerInGameUI.prototype, "pass", {
        set: function (value) {
            if (this._imgPass)
                this._imgPass.visible = value;
        },
        enumerable: true,
        configurable: true
    });
    PlayerInGameUI.prototype.playChat = function (info) {
        if (this._chatContent) {
            // let player = BaseGameData.getPlayerDataBySeatid(this._index)
            this._chatContent.init(info, this._index, this._data.seatid);
            this._chatContent.visible = true;
        }
    };
    //status 0:停止说话 1:开始说话 2:继续说话 98取消禁言 99禁言
    PlayerInGameUI.prototype.voiceChanged = function (status) {
        var player = BaseGameData.getPlayerDataByUid(this._data.uid);
        if (this._chatRecord) {
            if (status == 0) {
                this._chatRecord.visible = false;
                this._chatRecord.ani1.stop();
            }
            else if (status == 1 || status == 2) {
                if (player && !player.isVoiceForbidden && player.uid != server.uid && !player.isOffline) {
                    this._chatRecordCh.visible = false;
                    if (!this._chatRecord.visible) {
                        this._chatRecord.ani1.play(1, true);
                        this._chatRecord.visible = true;
                    }
                }
            }
            else if (status == 99) {
                this._chatRecordCh.visible = true;
                this._chatRecord.visible = false;
                this._chatRecord.ani1.stop();
            }
            else if (status == 98) {
                this._chatRecordCh.visible = false;
            }
        }
    };
    PlayerInGameUI.STATUS_EMPTY = 1; //空位
    PlayerInGameUI.STATUS_CAN_SIT = 2; //可以坐下
    PlayerInGameUI.STATUS_ALREADY_SIT = 3; //已经坐下
    return PlayerInGameUI;
}(ui.components.table.PlayerInGameUI));
//# sourceMappingURL=PlayerInGameUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 语音提示
*/
var RecordUI = /** @class */ (function (_super) {
    __extends(RecordUI, _super);
    function RecordUI() {
        var _this = _super.call(this) || this;
        _this._angle = 0;
        _this.centerX = 0;
        _this.centerY = -16;
        _this.stop();
        _this._mask = new Laya.Sprite();
        _this._circle.mask = _this._mask;
        return _this;
    }
    RecordUI.prototype.show = function () {
        if (!this.parent)
            AppControl.getInstance().addToPopup(this);
        this._mask.graphics.clear();
    };
    RecordUI.prototype.start = function (time) {
        if (time === void 0) { time = 15000; }
        this.tweenSelf();
        this._angle = 0;
        this._maxTime = time;
        this._startTime = Laya.Browser.now();
        Laya.timer.loop(100, this, this.onTimer);
        this.onTimer();
    };
    RecordUI.prototype.tweenSelf = function () {
        this.ani1.play(1, true);
    };
    RecordUI.prototype.stop = function () {
        this.ani1.gotoAndStop(1);
        this.ani1.stop();
        this.removeSelf();
        this.upShow = true;
        Laya.timer.clear(this, this.onTimer);
        return Laya.Browser.now() - this._startTime;
    };
    Object.defineProperty(RecordUI.prototype, "upShow", {
        set: function (value) {
            this._imgUp.visible = value;
            if (value)
                this._imgCancel.visible = false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordUI.prototype, "cancelShow", {
        set: function (value) {
            this._imgCancel.visible = value;
            if (value)
                this._imgUp.visible = false;
        },
        enumerable: true,
        configurable: true
    });
    RecordUI.prototype.onTimer = function () {
        var time = Laya.Browser.now();
        var multiple = (time - this._startTime) / this._maxTime;
        var angle = Math.min(360, multiple * 360);
        this.changeGraphics(angle);
        if (multiple >= 1) {
            this.stop();
            RecordManager.instance.stopRecord(true, BaseGameData.selfSeatid, GameLogic.selfData.nickname, 15000);
        }
    };
    RecordUI.prototype.changeGraphics = function (angle) {
        this._mask.graphics.clear();
        this._mask.graphics.drawPie(63.5, 63.5, 75, -90 + angle, 270, "#ffffff");
    };
    return RecordUI;
}(ui.components.table.RecordUI));
//# sourceMappingURL=RecordUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 桌子菜单
*/
var TableMenuUI = /** @class */ (function (_super) {
    __extends(TableMenuUI, _super);
    function TableMenuUI() {
        var _this = _super.call(this) || this;
        _this._y1 = 0;
        _this._y2 = 100;
        _this._y3 = 200;
        _this._y4 = 300;
        _this._y5 = 400;
        _this._h2 = 146;
        _this._h3 = 218;
        _this._h4 = 290;
        _this.name = "TableMenuUI";
        EventManager.instance.registerOnObject(_this, _this._btnMenu, Laya.Event.CLICK, _this, _this.onMenuTouch);
        EventManager.instance.registerOnObject(_this, _this._btnEnd, Laya.Event.CLICK, _this, _this.onMenuTouch);
        EventManager.instance.registerOnObject(_this, _this._btnSetup, Laya.Event.CLICK, _this, _this.onMenuTouch);
        EventManager.instance.registerOnObject(_this, _this._btnBack, Laya.Event.CLICK, _this, _this.onMenuTouch);
        EventManager.instance.registerOnObject(_this, _this._btnRestart, Laya.Event.CLICK, _this, _this.onMenuTouch);
        EventManager.instance.registerOnObject(_this, _this._btnExit, Laya.Event.CLICK, _this, _this.onMenuTouch);
        EventManager.instance.registerOnObject(_this, Dispatcher.eventDispatcher, EventNames.MENU_CHECK, _this, _this.onCheck);
        EventManager.instance.registerOnObject(_this, Dispatcher.eventDispatcher, EventNames.MENU_TOUCH, _this, _this.onMenuTouch);
        _this.mouseThrough = true;
        return _this;
    }
    TableMenuUI.prototype.addListener = function () {
        EventManager.instance.enableOnObject(this);
    };
    TableMenuUI.prototype.removeListener = function () {
        EventManager.instance.disableOnObject(this);
    };
    TableMenuUI.prototype.onCheck = function () {
        this._btnRestart.visible = false;
        this._btnEnd.visible = false;
        this._btnBack.visible = false;
        this._btnSetup.visible = false;
        this._btnExit.visible = false;
        //this._btnBack.skin = "table/table_btn_back.png";
        if (!GameConfig.IS_MATCH) {
            if (!BaseGameData.isTableStart) {
                // if (BaseGameData.owner == server.uid)
                //     this._btnBack.skin = "table/table_btn_back_3.png";
                // else {
                //     if (BaseGameData.selfSeatid)
                //         this._btnBack.skin = "table/table_btn_back_3.png";
                // }
            }
        }
        //返回 站起 解散 设置
        //旁观的人
        if (!BaseGameData.selfSeatid) {
            if (BaseGameData.owner == server.uid) {
                this._btnBack.visible = true;
                this._btnSetup.visible = true;
                this._btnExit.visible = true;
                this._btnBack.y = this._y1;
                if (!GameConfig.IS_MATCH) {
                    if (BaseGameData.isTableStart) {
                        //this._imgBack.height = this._h2;
                        this._btnSetup.y = this._y2;
                        this._btnExit.y = this._y3;
                    }
                    else {
                        this._btnEnd.visible = true;
                        //this._imgBack.height = this._h3;
                        this._btnEnd.y = this._y2;
                        this._btnSetup.y = this._y3;
                        this._btnExit.y = this._y4;
                    }
                }
                else {
                    //this._imgBack.height = this._h2;
                    this._btnSetup.y = this._y2;
                    this._btnExit.y = this._y3;
                }
            }
            else {
                this._btnExit.visible = true;
                this._btnBack.visible = true;
                this._btnSetup.visible = true;
                //this._imgBack.height = this._h2;
                this._btnBack.y = this._y1;
                this._btnSetup.y = this._y2;
                this._btnExit.y = this._y3;
            }
        }
        //正在玩的玩家
        else if (BaseGameData.isTableStart) {
            this._btnBack.visible = true;
            this._btnSetup.visible = true;
            this._btnExit.visible = true;
            if (!GameConfig.IS_MATCH) {
                this._btnEnd.visible = true;
                //this._imgBack.height = this._h3;
            }
            else {
                //this._imgBack.height = this._h2;
            }
            this._btnBack.y = this._y1;
            if (!GameConfig.IS_MATCH) {
                this._btnEnd.y = this._y2;
                this._btnSetup.y = this._y3;
                this._btnExit.y = this._y4;
            }
            else {
                this._btnSetup.y = this._y2;
                this._btnExit.y = this._y3;
            }
        }
        //游戏前开始坐下的玩家 并且不是房主
        else if (BaseGameData.owner != server.uid) {
            this._btnBack.visible = true;
            this._btnSetup.visible = true;
            this._btnExit.visible = true;
            //this._imgBack.height = this._h2;
            this._btnBack.y = this._y1;
            this._btnSetup.y = this._y2;
            this._btnExit.y = this._y3;
        }
        //游戏前开始坐下的玩家 房主
        else {
            this._btnBack.visible = true;
            this._btnSetup.visible = true;
            this._btnRestart.visible = true;
            this._btnExit.visible = true;
            if (!GameConfig.IS_MATCH) {
                this._btnEnd.visible = true;
                //this._imgBack.height = this._h4;
            }
            else {
                //this._imgBack.height = this._h3;
            }
            this._btnBack.y = this._y1;
            this._btnRestart.y = this._y2;
            if (!GameConfig.IS_MATCH) {
                this._btnEnd.y = this._y3;
                this._btnSetup.y = this._y4;
                this._btnExit.y = this._y5;
            }
            else {
                this._btnSetup.y = this._y3;
                this._btnExit.y = this._y4;
            }
        }
    };
    /**
     * 菜单touch
     */
    TableMenuUI.prototype.onMenuTouch = function (e, type) {
        if (e) {
            switch (e.currentTarget) {
                case this._btnMenu:
                    this._box.visible = !this._box.visible;
                    break;
                case this._btnEnd:
                    this.onBtnEndTouch();
                    break;
                case this._btnBack:
                    this._box.visible = !this._box.visible;
                    break;
                case this._btnExit:
                    this.onBtnBackTouch();
                    break;
                case this._btnSetup:
                    SetupCtrl.instance.show(false);
                    break;
                case this._btnRestart:
                    //server.standupReq();
                    var isAutoLogin = LoginManager.instance.orderedLogin(true);
                    if (!isAutoLogin)
                        AppControl.getInstance().showPage(LoginPage, LoginPage.PARAMS0_FIRST_ENTER);
                    break;
            }
        }
        else {
            if (type == 1)
                this.onBtnEndTouch();
            else if (type == 2)
                this.onBtnBackTouch();
        }
    };
    TableMenuUI.prototype.onBtnEndTouch = function () {
        if (!BaseGameData.isTableStart) {
            if (server.uid == BaseGameData.owner) {
                AlertInGameCtrl.instance.show("牌局未开始，解散房间不扣钻石,确定解散房间", function (type) {
                    if (type == AlertCtrl.CONFIRM) {
                        server.tableEndReq();
                    }
                }, 0, true, "common/title_disglove.png");
            }
        }
        else {
            AlertInGameCtrl.instance.show("牌局已开始，解散房间不返还钻石,确定解散房间", function (type) {
                if (type == AlertCtrl.CONFIRM) {
                    // server.tableEndReq()
                    server.playerVoteReq(1, 1, 1);
                }
            }, 0, true, "common/title_disglove.png");
        }
    };
    TableMenuUI.prototype.onBtnBackTouch = function () {
        if (BaseGameData.isTableStart && !GameConfig.IS_MATCH) {
            if (BaseGameData.selfSeatid)
                this.back3();
            else
                this.back();
        }
        //游戏未开始
        else {
            if (BaseGameData.selfSeatid && !GameConfig.IS_MATCH) {
                //自己是房主
                if (BaseGameData.owner == server.uid)
                    this.back1();
                //自己不是房主
                else
                    this.back2();
            }
            else
                this.back();
        }
    };
    TableMenuUI.prototype.back1 = function () {
        var _this = this;
        AlertInGameCtrl.instance.show(GameConfig.language.back_to_menu1, function (type) {
            if (type == AlertCtrl.CONFIRM) {
                _this.back();
            }
        }, 0, true, ResourceConfig.ALERT_BACK_TO_MENU);
    };
    TableMenuUI.prototype.back2 = function () {
        var self = this;
        var text = GameConfig.language.back_to_menu2;
        if (BaseGameData.divide) {
            text = StringUtils.format(GameConfig.language.back_to_menu4, BaseGameData.divide);
        }
        AlertInGameCtrl.instance.show(text, function (type) {
            if (type == AlertCtrl.CONFIRM) {
                server.standupReq();
                self._timeCount = 0;
                Laya.timer.loop(100, self, self.checkIsStandUp);
            }
        }, 0, true, ResourceConfig.ALERT_BACK_TO_MENU);
    };
    TableMenuUI.prototype.back3 = function () {
        var _this = this;
        AlertInGameCtrl.instance.show(GameConfig.language.back_to_menu3, function (type) {
            if (type == AlertCtrl.CONFIRM) {
                _this.back();
            }
        }, 0, true, ResourceConfig.ALERT_BACK_TO_MENU);
    };
    TableMenuUI.prototype.checkIsStandUp = function () {
        this._timeCount += 100;
        if (BaseGameData.selfSeatid) {
            if (this._timeCount >= 3000) {
                Laya.timer.clear(this, this.checkIsStandUp);
                this.back();
            }
        }
        else {
            Laya.timer.clear(this, this.checkIsStandUp);
            this.back();
        }
    };
    TableMenuUI.prototype.back = function () {
        Utils.backToMenu();
    };
    return TableMenuUI;
}(ui.components.table.MenuUI));
//# sourceMappingURL=TableMenuUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BaseDialog = /** @class */ (function (_super) {
    __extends(BaseDialog, _super);
    function BaseDialog() {
        return _super.call(this) || this;
    }
    BaseDialog.prototype.hide = function () {
        this.removeSelf();
    };
    BaseDialog.prototype.show = function () {
    };
    return BaseDialog;
}(ui.dialog.BaseDialogUI));
//# sourceMappingURL=BaseDialog.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var MatchOutLoseDialog = /** @class */ (function (_super) {
    __extends(MatchOutLoseDialog, _super);
    function MatchOutLoseDialog() {
        var _this = _super.call(this) || this;
        _this._autoHide = true;
        return _this;
    }
    MatchOutLoseDialog.prototype.show = function (msg) {
        //  if(msg.ranking > BaseGameData.maxPlayer){
        //     this.matchOut = new ui.matchSign.MatchLoseUI()
        // }else{
        //     this.matchOut = new ui.matchSign.MatchWInUI()
        //     this.matchOut._win.skin = "matchSign/ani/win_"+msg.ranking+".png"
        // }
        // this.addChild(this.matchOut)
        // this.matchOut.zOrder = GameZorder.Ani
        this._title.text = msg.title;
        this.ani1.play(1, false);
        this._btnConfirm.on(Laya.Event.CLICK, this, this.back);
        this._btnShare.on(Laya.Event.CLICK, this, this.share, [msg]);
        this._download.on(Laya.Event.CLICK, this, this.onDownload);
        this._ani1.play();
        this._area.skin = "gameLogo/" + GameConfig.APPAREA + ".png";
        Laya.timer.once(1000, this, function () {
            this.ani1.stop();
            AnimationManager.instance.animationOver();
        });
        if (Native.instance.isNative) {
            this._download.visible = false;
        }
        else {
            // this._btnConfirm.centerX = 0
            // this._btnShare.visible = false
        }
        if (BaseGameData.matchInfo.matchStage < 3) {
            this._text.text = "请在比赛结束后查看您的名次";
        }
        else {
            this._text.text = "继续比赛，再接再厉吧";
        }
    };
    MatchOutLoseDialog.prototype.hide = function () {
        this.ani1.stop();
        DialogManager.instance.removeDialog("MATCH_OUT_LOSE");
    };
    MatchOutLoseDialog.prototype.back = function () {
        this.hide();
        Utils.backToMenu();
    };
    MatchOutLoseDialog.prototype.share = function (data) {
        //  if(Native.instance.isNative){
        //     Native.instance.share(2, 0);
        //  }else{
        var dialog = DialogManager.instance.callDialog("MATCH_SHARE");
        dialog.show(data);
        //  }
        // Native.instance.share(2, 0);
    };
    MatchOutLoseDialog.prototype.onDownload = function () {
        Native.instance.gotoDownload();
    };
    return MatchOutLoseDialog;
}(ui.matchSign.MatchLoseUI));
// this._fontData = new FontData();
// 			this._fontData.init(FontConfig.FONT_WAKENG_1, Laya.loader.getRes(ResourceConfig.BITMAP_FONT_WAKENG1_JSON),
// 				Laya.loader.getRes(ResourceConfig.BITMAP_FONT_WAKENG1_PNG), 50, BPFont.LEFT);
// 			this._bpFont = FontManager.instance.addFont(this._fontData);
// 			this.addChild(this._bpFont);
// 			this._bpFont.pos(41, 12);
// 			this._bpFont.text = "*1";
//# sourceMappingURL=MatchOutLoseDialog.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var MatchOutWinDialog = /** @class */ (function (_super) {
    __extends(MatchOutWinDialog, _super);
    function MatchOutWinDialog() {
        var _this = _super.call(this) || this;
        _this._autoHide = true;
        return _this;
    }
    MatchOutWinDialog.prototype.show = function (msg) {
        this._win.text = String(msg.ranking);
        if (BaseGameData.matchInfo.matchStage == 4) {
            if (msg.ranking == 1) {
                this._text.skin = "matchSign/ani/win_tips_1.png";
            }
            else {
                this._text.skin = "match/win_tips_2.png";
            }
        }
        else {
            this._text.skin = "match/lose_tips_1.png";
        }
        this._title.text = msg.title;
        this.ani1.play(1, false);
        this._btnConfirm.on(Laya.Event.CLICK, this, this.back);
        this._btnShare.on(Laya.Event.CLICK, this, this.share, [msg]);
        this._download.on(Laya.Event.CLICK, this, this.onDownload);
        this._ani1.play();
        this._area.skin = "gameLogo/" + GameConfig.APPAREA + ".png";
        if (BaseGameData.isFreeMatch || !BaseGameData.matchReward) {
            this._showReward.visible = false;
        }
        this._reward.text = String(BaseGameData.matchReward);
        this._diamond.x = this._reward.x + this._reward.width + 10;
        Laya.timer.once(1000, this, function () {
            this.ani1.stop();
            AnimationManager.instance.animationOver();
        });
        if (Native.instance.isNative) {
            this._download.visible = false;
        }
        else {
            // this._btnConfirm.centerX = 0
            // this._btnShare.visible = false
        }
    };
    MatchOutWinDialog.prototype.hide = function () {
        this.ani1.stop();
        DialogManager.instance.removeDialog("MATCH_OUT_WIN");
    };
    MatchOutWinDialog.prototype.back = function () {
        if (DialogManager.instance.hasDialog("MATCH_OVER")) {
            DialogManager.instance._dialogList["MATCH_OVER"].visible = true;
        }
        else {
            this.hide();
            Utils.backToMenu();
        }
    };
    MatchOutWinDialog.prototype.share = function (data) {
        // if(Native.instance.isNative){
        //     Native.instance.share(2, 0);
        // }else{
        var dialog = DialogManager.instance.callDialog("MATCH_SHARE");
        dialog.show(data);
        // }
    };
    MatchOutWinDialog.prototype.matchOver = function () {
        this._btnConfirm.skin = "tongyong/btn_confirm.png";
    };
    MatchOutWinDialog.prototype.onDownload = function () {
        Native.instance.gotoDownload();
    };
    return MatchOutWinDialog;
}(ui.matchSign.MatchWInUI));
// this._fontData = new FontData();
// 			this._fontData.init(FontConfig.FONT_WAKENG_1, Laya.loader.getRes(ResourceConfig.BITMAP_FONT_WAKENG1_JSON),
// 				Laya.loader.getRes(ResourceConfig.BITMAP_FONT_WAKENG1_PNG), 50, BPFont.LEFT);
// 			this._bpFont = FontManager.instance.addFont(this._fontData);
// 			this.addChild(this._bpFont);
// 			this._bpFont.pos(41, 12);
// 			this._bpFont.text = "*1";
//# sourceMappingURL=MatchOutWinDialog.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var MatchOverDialog = /** @class */ (function (_super) {
    __extends(MatchOverDialog, _super);
    function MatchOverDialog() {
        var _this = _super.call(this) || this;
        _this._autoHide = true;
        _this._rankList.scrollBar.visible = false;
        _this._rankList.itemRender = MatchOverRender;
        _this._rankList.renderHandler = new Laya.Handler(_this, _this.updateRank);
        _this._rankList.array = [];
        _this._close.on(Laya.Event.CLICK, _this, _this.hide);
        _this._btnConfirm.on(Laya.Event.CLICK, _this, _this.back);
        _this._btnShare.on(Laya.Event.CLICK, _this, _this.showShare);
        _this._share1.on(Laya.Event.CLICK, _this, _this.share1);
        _this._share2.on(Laya.Event.CLICK, _this, _this.share2);
        _this._back.on(Laya.Event.CLICK, _this, _this.hideShare);
        return _this;
    }
    MatchOverDialog.prototype.showShare = function () {
        this._share1.visible = true;
        this._share2.visible = true;
        this._back.visible = true;
    };
    MatchOverDialog.prototype.hideShare = function () {
        this._share1.visible = false;
        this._share2.visible = false;
        this._back.visible = false;
    };
    MatchOverDialog.prototype.show = function (data) {
        this._data = data;
        this._selectType = 0;
        this._rankList.array = data.playerInfo;
        if (BaseGameData.matchInfo.matchRank < 4) {
            this._ranklBig.visible = true;
            this._rank1.text = String(BaseGameData.matchInfo.matchRank);
        }
        else {
            this._rankSmall.visible = true;
            this._rank2.text = String(BaseGameData.matchInfo.matchRank);
        }
        this._reward.text = String(BaseGameData.matchReward);
        if (BaseGameData.isFreeMatch || !BaseGameData.matchReward) {
            this._showReward.visible = false;
            this._labelReward.visible = false;
            this._labelName.x = 400;
        }
        if (Native.instance.isNative) {
        }
        else {
            // this._btnConfirm.centerX = 0
            // this._btnShare.visible = false
        }
        this._title.text = BaseGameData.matchTitle;
        this._time.text = TimeUtils.Format("yyyy-MM-dd hh:mm");
        this._head = new HeadUI();
        this._head.setImageBounds(60, 60);
        this._head.nameLimit = 8;
        this._head.setLabName({ x: 70, y: 10, align: "left", color: "#ffffff", fontSize: 18 });
        this._head.setLabInfo(HeadUI.TYPE_UID, { x: 70, y: 44, align: "left", color: "#ffffff", fontSize: 16 });
        // this._head.centerX = 0
        // this._head.y = 330
        this._avatar.addChild(this._head);
        this._head.getInfo(server.uid);
        // var htmlCanvas:Laya.HTMLCanvas = this._content.drawToCanvas(620, 560, 0, 0);//把精灵绘制到canvas上面
        // var canvas = htmlCanvas.getCanvas();//获取原生的canvas对象
        var data = matchSign.MatchSignData.getInfoByCode(matchSign.MatchSignData.currentMatchCode);
        var text = "";
        if (data) {
            if (data.gamemode >= 160) {
                text = "精彩赛事不间断，可赢得钻石奖励！快来参与吧！";
            }
            else {
                text = "精彩赛事不间断，奖励丰厚，快来参与吧！";
            }
        }
        WxWeb.instance.onShareInfo(3, 0, "我在比赛中获得了第" + BaseGameData.matchInfo.matchRank + "名", text, this._data.info);
    };
    MatchOverDialog.prototype.onClick = function () {
        this._selectType = this._selectType == 0 ? 1 : 0;
    };
    MatchOverDialog.prototype.back = function () {
        this.hide();
    };
    MatchOverDialog.prototype.updateRank = function (cell, index) {
        cell.updata(index);
    };
    MatchOverDialog.prototype.hide = function () {
        DialogManager.instance.removeDialog("MATCH_OVER");
        Utils.backToMenu();
    };
    MatchOverDialog.prototype.share1 = function () {
        Native.instance.share(2, 0);
    };
    MatchOverDialog.prototype.share2 = function () {
        Native.instance.share(2, 1);
    };
    return MatchOverDialog;
}(ui.match.MatchOverUI));
var MatchOverRender = /** @class */ (function (_super) {
    __extends(MatchOverRender, _super);
    function MatchOverRender() {
        return _super.call(this) || this;
    }
    MatchOverRender.prototype.updata = function (index) {
        console.info(this.dataSource);
        if (this.dataSource.ranking < 4) {
            this._rank.visible = false;
            this._img.visible = true;
            this._img.skin = "match/rank_" + this.dataSource.ranking + ".png";
        }
        else {
            this._rank.visible = true;
            this._rank.text = String(this.dataSource.ranking);
            this._img.visible = false;
        }
        this._reward.text = this.dataSource.reward;
        this._name.text = Utils.getFitNickName(this.dataSource.nickname, 10);
        if (BaseGameData.isFreeMatch) {
            this._diamond.visible = false;
            this._reward.visible = false;
            this._name.x = 365;
        }
    };
    return MatchOverRender;
}(ui.match.MatchOverRenderUI));
//# sourceMappingURL=MatchOverDialog.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var MatchRecordDialog = /** @class */ (function (_super) {
    __extends(MatchRecordDialog, _super);
    function MatchRecordDialog() {
        var _this = _super.call(this) || this;
        _this._rankList.scrollBar.visible = false;
        _this._rewardList.scrollBar.visible = false;
        _this._rankList.itemRender = MatchRankRender;
        _this._rankList.renderHandler = new Laya.Handler(_this, _this.updateRank);
        _this._rankList.array = [];
        _this._rewardList.itemRender = MatchRewardRender;
        _this._rewardList.renderHandler = new Laya.Handler(_this, _this.updateReward);
        _this._rewardList.array = [];
        if (!BaseGameData.isFreeMatch) {
            _this._rank.height = 320;
            _this._rank.y = 180;
            _this._rankList.height = 220;
            _this._tab.visible = true;
            _this._tab.on(Laya.Event.CLICK, _this, _this.onClick);
        }
        else {
            _this._rankList.height = 300;
            _this._rank.height = 400;
            _this._rank.y = 65;
            _this._tab.visible = false;
        }
        _this._close.on(Laya.Event.CLICK, _this, _this.hide);
        return _this;
    }
    MatchRecordDialog.prototype.show = function (data) {
        this._data = data;
        this._selectType = 0;
        this.checkTab();
        this._rankList.array = data.playerInfo;
    };
    MatchRecordDialog.prototype.onClick = function () {
        this._selectType = this._selectType == 0 ? 1 : 0;
        this.checkTab();
    };
    MatchRecordDialog.prototype.checkTab = function () {
        if (this._selectType == 0) {
            this._tab.skin = "match/paiming.png";
            this._rank.visible = true;
            this._reward.visible = false;
            this._selfRank.text = "我的排名" + this._data.selfInfo.ranking;
            if (BaseGameData.matchInfo.matchHandCnt && BaseGameData.selfSeatid) {
                if (BaseGameData.matchInfo.matchStage < 3) {
                    this._round.text = "局数:" + BaseGameData.matchInfo.matchHandCnt;
                }
                else {
                    this._round.text = "局数:" + BaseGameData.currHandCount;
                }
            }
            // this._round.text = "局数:" + (BaseGameData.matchInfo.matchHandCnt || 0)
            this._score.text = "分数：" + this._data.selfInfo.score;
        }
        else {
            matchSign.MatchSignData.getReward(parseInt(server.code), function (reward) {
                this._rewardList.array = reward;
            }.bind(this));
            this._tab.skin = "match/jiangli.png";
            this._rank.visible = false;
            this._reward.visible = true;
            this._totalReward.text = "总奖池：" + BaseGameData.matchInfo.totalPlayer * 10;
            this._player.text = "参赛人数 " + BaseGameData.matchInfo.totalPlayer;
        }
    };
    MatchRecordDialog.prototype.updateRank = function (cell, index) {
        cell.updata(index);
    };
    MatchRecordDialog.prototype.updateReward = function (cell, index) {
        cell.updata(index);
    };
    MatchRecordDialog.prototype.hide = function () {
        DialogManager.instance.removeDialog("MATCH_RECORD");
    };
    return MatchRecordDialog;
}(ui.match.MatchRecordUI));
var MatchRankRender = /** @class */ (function (_super) {
    __extends(MatchRankRender, _super);
    function MatchRankRender() {
        return _super.call(this) || this;
    }
    MatchRankRender.prototype.updata = function (index) {
        console.info(this.dataSource);
        if (this.dataSource.ranking < 4) {
            this._rank.visible = false;
            this._img.visible = true;
            this._img.skin = "match/rank_" + this.dataSource.ranking + ".png";
        }
        else {
            this._rank.visible = true;
            this._rank.text = String(this.dataSource.ranking);
            this._img.visible = false;
        }
        this._name.text = Utils.getFitNickName(this.dataSource.nickname, 10);
        this._score.text = this.dataSource.score;
    };
    return MatchRankRender;
}(ui.match.MatchRankRenderUI));
var MatchRewardRender = /** @class */ (function (_super) {
    __extends(MatchRewardRender, _super);
    function MatchRewardRender() {
        return _super.call(this) || this;
    }
    MatchRewardRender.prototype.updata = function (index) {
        if (index < 3) {
            this._rank.visible = false;
            this._img.skin = "match/rank_" + (index + 1) + ".png";
        }
        else {
            this._rank.text = String(index + 1);
            this._img.visible = false;
        }
        this._score.text = this.dataSource;
    };
    return MatchRewardRender;
}(ui.match.MatchRewardRenderUI));
//# sourceMappingURL=MatchRecordDialog.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var MatchShareDialog = /** @class */ (function (_super) {
    __extends(MatchShareDialog, _super);
    function MatchShareDialog() {
        var _this = _super.call(this) || this;
        _this._autoHide = true;
        return _this;
    }
    MatchShareDialog.prototype.show = function (msg) {
        this._data = msg;
        this._winNum.text = String(msg.ranking);
        if (BaseGameData.matchInfo.matchStage > 2) {
            this._lose.visible = false;
            this._win.visible = true;
            if (BaseGameData.matchInfo.matchStage == 4) {
                if (msg.ranking == 1) {
                    this._winText.skin = "matchSign/ani/win_tips_1.png";
                }
                else {
                    this._winText.skin = "match/win_tips_2.png";
                }
            }
            else {
                this._winText.skin = "match/lose_tips_1.png";
            }
        }
        else {
            this._lose.visible = true;
            this._win.visible = false;
            this._text.text = "请在比赛结束后查看您的排名";
        }
        this._reward.text = String(BaseGameData.matchReward);
        this._diamond.x = this._reward.x + this._reward.width + 10;
        if (BaseGameData.isFreeMatch) {
            this._showReward.visible = false;
        }
        this._share1.on(Laya.Event.CLICK, this, this.share1);
        this._share2.on(Laya.Event.CLICK, this, this.share2);
        this._title.text = msg.title;
        this._head = new HeadUI();
        this._head.setImageBounds(73, 73);
        this._head.nameLimit = 20;
        this._head.setLabName({ x: 106, y: 10, align: "left", color: "#ffffff", fontSize: 20 });
        this._head.setLabInfo(HeadUI.TYPE_UID, { x: 106, y: 48, align: "left", color: "#ffffff", fontSize: 18 });
        this._head.centerX = 0;
        this._head.y = 330;
        this._avatar.addChild(this._head);
        this._head.getInfo(server.uid);
        this._back.on(Laya.Event.CLICK, this, this.back);
        var htmlCanvas = this._content.drawToCanvas(739, 552, 0, 0); //把精灵绘制到canvas上面
        var canvas = htmlCanvas.getCanvas(); //获取原生的canvas对象
        var data = matchSign.MatchSignData.getInfoByCode(matchSign.MatchSignData.currentMatchCode);
        var text = "";
        if (data) {
            if (data.gamemode >= 160) {
                text = "精彩赛事不间断，可赢得钻石奖励！快来参与吧！";
            }
            else {
                text = "精彩赛事不间断，奖励丰厚，快来参与吧！";
            }
        }
        WxWeb.instance.onShareInfo(3, 0, "我在比赛中获得了第" + this._data.ranking + "名", text, this._data.info);
    };
    MatchShareDialog.prototype.hide = function () {
        DialogManager.instance.removeDialog("MATCH_SHARE");
    };
    MatchShareDialog.prototype.back = function () {
        DialogManager.instance.removeDialog("MATCH_SHARE");
    };
    MatchShareDialog.prototype.share1 = function () {
        Native.instance.share(2, 0);
    };
    MatchShareDialog.prototype.share2 = function () {
        Native.instance.share(2, 1);
    };
    return MatchShareDialog;
}(ui.match.MatchRankShareUI));
//# sourceMappingURL=MatchShareDialog.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var MatchWaitDialog = /** @class */ (function (_super) {
    __extends(MatchWaitDialog, _super);
    function MatchWaitDialog() {
        return _super.call(this) || this;
        // this.updateMatchInfo()
    }
    MatchWaitDialog.prototype.show = function () {
        this.updateMatchInfo();
    };
    MatchWaitDialog.prototype.updateMatchInfo = function () {
        var index = BaseGameData.matchInfo.matchRounds || 1;
        if (BaseGameData.matchInfo.waiting == 1 &&
            !BaseGameData.matchInfo.matchHandCnt &&
            BaseGameData.matchInfo.matchStage == 1) {
            this._rank.visible = false;
            this._rankNum.visible = false;
            this._ming.visible = false;
            this._wait.visible = true;
        }
        else {
            this._wait.visible = false;
            this.updateWaittingTableText();
            this.updateRankingText();
        }
        var cnt = BaseGameData.matchInfo.matchLeftTable || 0;
        if (cnt <= 0)
            cnt = 1;
        this._left.text = cnt + "桌正在游戏中";
        // this._jinji.text = "前"+BaseGameData.matchInfo.matchSwissPlayer[index]+"名晋级"
        if (BaseGameData.matchInfo.totalPlayer > BaseGameData.matchInfo.matchSwissPlayer[0]) {
            this._view1.visible = true;
            this._view2.visible = false;
            this._stage_1_3._stage.skin = BaseGameData.matchInfo.matchStage < 3 ? "match/stage_1_1.png" : "match/stage_1_2.png";
            this._stage_1_3._bg.skin = BaseGameData.matchInfo.matchStage < 3 ? "match/stage_1.png" : "match/stage_2.png";
            this._stage_1_3._jinjiBegin.text = String(BaseGameData.matchInfo.totalPlayer);
            this._stage_1_3._jinjiBegin.font = BaseGameData.matchInfo.matchStage < 3 ? "font_num_17" : "font_num_18";
            this._stage_1_3._jinjiBegin.visible = true;
            this._stage_1_3._jinjiEnd.text = String(BaseGameData.matchInfo.matchSwissPlayer[0]);
            this._stage_1_3._jinjiEnd.visible = true;
            this._stage_1_3._jinjiEnd.font = BaseGameData.matchInfo.matchStage < 3 ? "font_num_17" : "font_num_18";
            this._stage_1_3._ing.skin = BaseGameData.matchInfo.matchStage < 3 ? "match/jin_1.png" : "match/jin_2.png";
            // this._stage_1_3._jinji.text =  "前"+BaseGameData.matchInfo.matchSwissPlayer[0]+"名晋级"
            this._stage_1_3._jinji.visible = BaseGameData.matchInfo.matchStage < 3 ? true : false;
            this._stage_1_3._round.text = "第" + BaseGameData.matchInfo.matchHandCnt + "局";
            this._stage_1_3._round.visible = BaseGameData.matchInfo.matchStage < 3 && BaseGameData.matchInfo.matchHandCnt ? true : false;
            this._stage_3_3._bg.skin = BaseGameData.matchInfo.matchStage == 3 ? "match/stage_1.png" : "match/stage_2.png";
            this._stage_3_3._stage.skin = BaseGameData.matchInfo.matchStage == 3 ? "match/stage_3_1.png" : "match/stage_3_2.png";
            this._stage_3_3._jinjiBegin.text = String(BaseGameData.matchInfo.matchSwissPlayer[index - 1]);
            this._stage_3_3._jinjiBegin.font = BaseGameData.matchInfo.matchStage == 3 ? "font_num_17" : "font_num_18";
            this._stage_3_3._jinjiBegin.visible = BaseGameData.matchInfo.matchStage < 3 ? false : true;
            this._stage_3_3._jinjiEnd.text = String(BaseGameData.matchInfo.matchSwissPlayer[index]);
            this._stage_3_3._jinjiEnd.font = BaseGameData.matchInfo.matchStage == 3 ? "font_num_17" : "font_num_18";
            this._stage_3_3._jinjiEnd.visible = BaseGameData.matchInfo.matchStage < 3 ? false : true;
            this._stage_3_3._jin.skin = BaseGameData.matchInfo.matchStage == 3 ? "match/jin_1.png" : "match/jin_2.png";
            this._stage_3_3._jin.visible = BaseGameData.matchInfo.matchStage < 3 ? false : true;
            this._stage_3_3._begin.visible = BaseGameData.matchInfo.matchStage < 3 ? true : false;
            // this._stage_3_3._jinji.text = "前"+BaseGameData.matchInfo.matchSwissPlayer[index]+"名晋级"
            // this._stage_3_3._jinji.visible = BaseGameData.matchInfo.matchStage == 3 ? true : false
            this._stage_3_3._round.text = "第" + (BaseGameData.matchInfo.matchRounds || 1) + "轮";
            this._stage_3_3._round.visible = BaseGameData.matchInfo.matchStage == 3 ? true : false;
            this._stage_4_3._bg.skin = BaseGameData.matchInfo.matchStage == 4 ? "match/stage_1.png" : "match/stage_2.png";
            this._stage_4_3._stage.skin = BaseGameData.matchInfo.matchStage == 4 ? "match/stage_4_1.png" : "match/stage_4_2.png";
            this._stage_4_3._begin.visible = BaseGameData.matchInfo.matchStage < 4 ? true : false;
            this._stage_4_3._ing.visible = BaseGameData.matchInfo.matchStage < 4 ? false : true;
            if (BaseGameData.matchInfo.matchStage < 3) {
                this._stage_1_3.ani1.play();
                this._stage_3_3.ani1.gotoAndStop(0);
                this._stage_4_3.ani1.gotoAndStop(0);
            }
            else if (BaseGameData.matchInfo.matchStage < 4) {
                this._stage_1_3.ani1.gotoAndStop(0);
                this._stage_3_3.ani1.play();
                this._stage_4_3.ani1.gotoAndStop(0);
            }
            else {
                this._stage_1_3.ani1.gotoAndStop(0);
                this._stage_3_3.ani1.gotoAndStop(0);
                this._stage_4_3.ani1.play();
            }
        }
        else {
            this._view1.visible = false;
            this._view2.visible = true;
            this._stage_3_2._bg.skin = BaseGameData.matchInfo.matchStage == 3 ? "match/stage_1.png" : "match/stage_2.png";
            this._stage_3_2._stage.skin = BaseGameData.matchInfo.matchStage == 3 ? "match/stage_3_1.png" : "match/stage_3_2.png";
            this._stage_3_2._jinjiBegin.text = String(BaseGameData.matchInfo.matchSwissPlayer[index - 1]);
            this._stage_3_2._jinjiBegin.visible = true;
            this._stage_3_2._jinjiBegin.font = BaseGameData.matchInfo.matchStage == 3 ? "font_num_17" : "font_num_18";
            this._stage_3_2._jinjiEnd.text = String(BaseGameData.matchInfo.matchSwissPlayer[index]);
            this._stage_3_2._jinjiEnd.font = BaseGameData.matchInfo.matchStage == 3 ? "font_num_17" : "font_num_18";
            this._stage_3_2._jinjiEnd.visible = true;
            if (BaseGameData.matchInfo.matchStage == 4) {
                this._stage_3_2._jinjiBegin.text = String(BaseGameData.matchInfo.matchSwissPlayer[index - 2]);
                this._stage_3_2._jinjiEnd.text = String(BaseGameData.matchInfo.matchSwissPlayer[index - 1]);
            }
            this._stage_3_2._jinji.visible = BaseGameData.matchInfo.matchStage == 3 ? true : false;
            this._stage_3_2._round.text = "第" + (BaseGameData.matchInfo.matchRounds || 1) + "轮";
            this._stage_3_2._round.visible = BaseGameData.matchInfo.matchStage == 3 ? true : false;
            this._stage_3_2._ing.skin = BaseGameData.matchInfo.matchStage == 3 ? "match/jin_1.png" : "match/jin_2.png";
            this._stage_4_2._bg.skin = BaseGameData.matchInfo.matchStage == 4 ? "match/stage_1.png" : "match/stage_2.png";
            this._stage_4_2._stage.skin = BaseGameData.matchInfo.matchStage == 4 ? "match/stage_4_1.png" : "match/stage_4_2.png";
            this._stage_4_2._begin.visible = BaseGameData.matchInfo.matchStage < 4 ? true : false;
            this._stage_4_2._ing.visible = BaseGameData.matchInfo.matchStage < 4 ? false : true;
            if (BaseGameData.matchInfo.matchStage < 4) {
                this._stage_3_2.ani1.play();
                this._stage_4_2.ani1.gotoAndStop(0);
            }
            else {
                this._stage_3_2.ani1.gotoAndStop(0);
                this._stage_4_2.ani1.play();
            }
        }
    };
    MatchWaitDialog.prototype.updateWaittingTableText = function () {
        if (BaseGameData.matchInfo.matchStage == 1) {
            this._waittext.text = "正在为您匹配本局对手，请稍等";
        }
        else {
            this._waittext.text = "正在等待其他桌结束";
            var cnt = BaseGameData.matchInfo.matchLeftTable || 0;
            if (cnt <= 0)
                cnt = 1;
            this._left.text = "当前仍有" + cnt + "桌进行中";
        }
    };
    MatchWaitDialog.prototype.updateRankingText = function () {
        this._rank.visible = true;
        //倍数美术字
        this._rankNum.text = String(BaseGameData.matchInfo.matchRank);
    };
    return MatchWaitDialog;
}(ui.match.MatchWaitUI));
// this._fontData = new FontData();
// 			this._fontData.init(FontConfig.FONT_WAKENG_1, Laya.loader.getRes(ResourceConfig.BITMAP_FONT_WAKENG1_JSON),
// 				Laya.loader.getRes(ResourceConfig.BITMAP_FONT_WAKENG1_PNG), 50, BPFont.LEFT);
// 			this._bpFont = FontManager.instance.addFont(this._fontData);
// 			this.addChild(this._bpFont);
// 			this._bpFont.pos(41, 12);
// 			this._bpFont.text = "*1";
//# sourceMappingURL=MatchWaitDialog.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var PlayerInfoDialog = /** @class */ (function (_super) {
    __extends(PlayerInfoDialog, _super);
    function PlayerInfoDialog() {
        var _this = _super.call(this) || this;
        _this.name = "PlayerInfoDialog";
        return _this;
    }
    PlayerInfoDialog.prototype.show = function (data) {
        this._data = data;
        this.beforeShow();
        this.onShow();
    };
    PlayerInfoDialog.prototype.beforeShow = function () {
        this._head = new HeadUI();
        this._head.setImageBounds(73, 73);
        this._head.setLabInfo(HeadUI.TYPE_SCORE);
        this._head._labName.visible = false;
        this._head._labInfo.visible = false;
        this._avatar.addChild(this._head);
        this._close.on(Laya.Event.CLICK, this, this.hide);
        server.on(EventNames.GAME_USER_INFO_REP, this, this.onUserInfoRep);
        this._btnVoice.on(Laya.Event.CLICK, this, this.onTouch);
    };
    /**
    * 开启监听，配置宽高，添加到舞台
    */
    PlayerInfoDialog.prototype.onShow = function () {
        var player = BaseGameData.getPlayerDataByUid(this._data.uid);
        if (player.ip == "") {
            server.userInfoReq([this._data.uid]);
        }
        this._head.getInfo(this._data.uid);
        this._name.text = Utils.getFitNickName(this._data.nickname, 20);
        this._ip.text = this._data.ip;
        this._gps.text = this._data.gps || "该玩家定位未开启";
        this._ID.text = this._data.uid;
        this._btnVoice.visible = (Native.instance.isNative && this._data.uid != server.uid && !GameConfig.IS_MATCH);
        this.checkFobbiden();
    };
    PlayerInfoDialog.prototype.checkFobbiden = function () {
        var player = BaseGameData.getPlayerDataByUid(this._data.uid);
        if (player.isVoiceForbidden)
            this._btnVoice.selected = true;
        else
            this._btnVoice.selected = false;
    };
    PlayerInfoDialog.prototype.onUserInfoRep = function (info) {
        for (var k in info.info) {
            var v = info.info[k];
            var player = BaseGameData.getPlayerDataByUid(v.uid);
            player.ip = v.ip;
            player.gps = v.addr;
            this._ip.text = v.ip;
            this._gps.text = v.addr || "该玩家定位未开启";
        }
    };
    PlayerInfoDialog.prototype.onTouch = function () {
        var _this = this;
        var player = BaseGameData.getPlayerDataByUid(this._data.uid);
        if (player) {
            if (player.isVoiceForbidden)
                Native.instance.voiceForbidMemberVoice(BaseGameData.voiceRoomName, player.voiceMemberID, 0, function () {
                    _this.checkFobbiden();
                });
            else
                Native.instance.voiceForbidMemberVoice(BaseGameData.voiceRoomName, player.voiceMemberID, 1, function () {
                    _this.checkFobbiden();
                });
        }
    };
    PlayerInfoDialog.prototype.hide = function () {
        DialogManager.instance.removeDialog("PLAYER_INFO");
    };
    return PlayerInfoDialog;
}(ui.components.PlayerInfoUI));
//# sourceMappingURL=PlayerInfoDialog.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @author xiemena
 * @description 分享界面
 */
var ShareDlalog = /** @class */ (function (_super) {
    __extends(ShareDlalog, _super);
    function ShareDlalog() {
        var _this = _super.call(this) || this;
        _this["name"] = "ShareDlalog";
        _this.init();
        return _this;
    }
    Object.defineProperty(ShareDlalog, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new ShareDlalog();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    ShareDlalog.prototype.init = function () {
        this._ui = new ui.dialog.ShareDlgUI();
        // this._ui.anchorX = 0.5
        // this._ui.anchorY = 0.5
        this._ui._mask.centerX = 0;
        this._ui._mask.centerY = 0;
        this.setTag("");
        this.addListener();
    };
    ShareDlalog.prototype.addListener = function () {
        this._ui._wechat.on(Laya.Event.CLICK, this, this.onTouch);
        this._ui._pyq.on(Laya.Event.CLICK, this, this.onTouch);
    };
    ShareDlalog.prototype.setTag = function (skin) {
        this._ui._tag.visible = 0 != skin.length;
        if (skin.length)
            this._ui._tag.skin = skin;
    };
    ShareDlalog.prototype.show = function () {
        this.showself();
    };
    ShareDlalog.prototype.onTouch = function (e) {
        switch (e.currentTarget) {
            case this._ui._wechat:
                Native.instance.share(1, 0);
                break;
            case this._ui._pyq:
                Native.instance.share(1, 1);
                break;
        }
    };
    ShareDlalog.LOGO = "SHARE_DLG";
    return ShareDlalog;
}(BaseCtrl));
//# sourceMappingURL=ShareDlalog.js.map
/*
* @author seacole
* 特效基础类;
*/
var BaseEffect = /** @class */ (function () {
    function BaseEffect() {
    }
    BaseEffect.prototype.show = function (effectData) {
        Dispatcher.on(EventNames.REMOVE_EFFECT_BY_ID, this, this.onRemoveEffectById);
        Dispatcher.on(EventNames.REMOVE_EFFECT_BY_INDEX, this, this.onRemoveEffectByIndex);
    };
    BaseEffect.prototype.onRemoveEffectById = function (id) {
        if (this._id == id)
            this.hide();
    };
    BaseEffect.prototype.onRemoveEffectByIndex = function (index) {
        if (this._index == index)
            this.hide();
    };
    BaseEffect.prototype.hide = function () {
        Dispatcher.dispatch(EventNames.REMOVE_EFFECT, [this]);
    };
    Object.defineProperty(BaseEffect.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    BaseEffect.prototype.play = function (effectData) {
    };
    BaseEffect.prototype.removeSelf = function () {
        Dispatcher.off(EventNames.REMOVE_EFFECT_BY_ID, this, this.onRemoveEffectById);
        Dispatcher.off(EventNames.REMOVE_EFFECT_BY_INDEX, this, this.onRemoveEffectByIndex);
    };
    Object.defineProperty(BaseEffect.prototype, "index", {
        get: function () {
            return this._index;
        },
        enumerable: true,
        configurable: true
    });
    return BaseEffect;
}());
//# sourceMappingURL=BaseEffect.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* ani特效基础类;
*/
var AnimationEffect = /** @class */ (function (_super) {
    __extends(AnimationEffect, _super);
    function AnimationEffect() {
        return _super.call(this) || this;
    }
    AnimationEffect.prototype.show = function (effectData) {
        _super.prototype.show.call(this, effectData);
        this._tweenArr = [];
        if (!this._roleAni) {
            this._roleAni = new Laya.Animation();
            this._roleAni.source = effectData.url;
        }
        this._id = effectData.id;
        this._index = effectData.index;
        this._roleAni.pos(effectData.posX, effectData.posY);
        this._roleAni.scale(effectData.scaleX, effectData.scaleY);
        if (effectData.blendMode)
            this._roleAni.blendMode = "lighter";
        this._roleAni.visible = false;
        if (effectData.delay) {
            this._roleAni.visible = effectData.delayShow;
            if (this._roleAni.visible)
                this._roleAni.play(effectData.start, effectData.loop);
            Laya.timer.once(effectData.delay, this, this.play.bind(this), [effectData]);
        }
        else
            this.play(effectData);
        if (!this._lab) {
            this._lab = new Laya.Label();
            this._lab.anchorX = 0.5;
            this._lab.anchorY = 0.5;
            this._lab.align = "center";
            this._lab.width = 300;
        }
        this._lab.text = '';
        this._lastFrame = 0;
        if (effectData.hasOwnProperty('tween')) {
            this._lab.font = effectData.fontStyle == '' ? 'Arial' : effectData.fontStyle;
            this._lab.text = effectData.text;
            if (effectData.tween.length == 0)
                return this._roleAni;
            for (var item in effectData.tween) {
                this._tweenArr.push(effectData.tween[item]);
            }
            var obJect = (this._tweenArr.splice(0, 1))[0];
            for (var item in obJect) {
                if (item != 'frame')
                    this._lab[item] = obJect[item];
                else
                    this._lastFrame = obJect[item];
            }
            this._roleAni.addChild(this._lab);
            this.onNextAction();
        }
        return this._roleAni;
    };
    AnimationEffect.prototype.onNextAction = function () {
        if (this._tweenArr.length <= 0)
            return;
        var next = (this._tweenArr.splice(0, 1))[0];
        var nextData = {};
        var durTime = 1000 * (next.frame - this._lastFrame) / 60;
        for (var item in next) {
            if (item != 'frame')
                nextData[item] = next[item];
            else
                this._lastFrame = next[item];
        }
        Laya.Tween.to(this._lab, nextData, durTime, null, Laya.Handler.create(this, this.onNextAction, null, true));
    };
    AnimationEffect.prototype.play = function (effectData) {
        if (!this._roleAni.visible) {
            this._roleAni.visible = true;
            this._roleAni.play(effectData.start, effectData.loop);
        }
        if (effectData.loop) {
            if (effectData.duation)
                Laya.timer.once(effectData.duation, this, this.hide);
        }
        else
            this._roleAni.on(Laya.Event.COMPLETE, this, this.hide);
        if (effectData.needTween) {
            var ease = Laya.Ease.linearIn;
            if (effectData.tweenType == 1) {
                Laya.Tween.to(this._roleAni, { x: effectData.toPosX }, effectData.duation, ease);
                Laya.Tween.to(this._roleAni, { y: effectData.toPosY }, effectData.duation, Laya.Ease.quadOut, Laya.Handler.create(this, this.hide));
            }
            else
                Laya.Tween.to(this._roleAni, { x: effectData.toPosX, y: effectData.toPosY }, effectData.duation, ease, Laya.Handler.create(this, this.hide));
        }
    };
    AnimationEffect.prototype.hide = function () {
        Laya.Tween.clearTween(this._roleAni);
        Laya.timer.clear(this, this.play);
        this._roleAni.off(Laya.Event.COMPLETE, this, this.hide);
        _super.prototype.hide.call(this);
    };
    AnimationEffect.prototype.removeSelf = function () {
        _super.prototype.removeSelf.call(this);
        Laya.timer.clear(this, this.play);
        this._roleAni.stop();
        this._roleAni.removeSelf();
        this._lab.removeSelf();
        Laya.Tween.clearAll(this._lab);
    };
    return AnimationEffect;
}(BaseEffect));
//# sourceMappingURL=AnimationEffect.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 粒子特效基础类;
*/
var ParticleEffect = /** @class */ (function (_super) {
    __extends(ParticleEffect, _super);
    function ParticleEffect() {
        return _super.call(this) || this;
    }
    ParticleEffect.prototype.show = function (effectData) {
        _super.prototype.show.call(this, effectData);
        if (!this._sp) {
            this._setting = Laya.Loader.getRes(effectData.url);
            // this._setting.blendState = 1;
            this._sp = new Laya.Particle2D(this._setting);
        }
        this._id = effectData.id;
        this._index = effectData.index;
        this._sp.pos(effectData.posX, effectData.posY);
        this._sp.scale(effectData.scaleX, effectData.scaleY);
        if (effectData.delay) {
            this._sp.visible = false;
            Laya.timer.once(effectData.delay, this, this.play, [effectData]);
        }
        else
            this.play(effectData);
        return this._sp;
    };
    ParticleEffect.prototype.play = function (effectData) {
        this._sp.visible = true;
        this._sp.emitter.start();
        this._sp.play();
        if (!effectData.loop)
            Laya.timer.once(this._setting.duration * 1000, this, this.hide);
        var ease = Laya.Ease.linearIn;
        if (effectData.needTween)
            Laya.Tween.to(this._sp, { x: effectData.toPosX, y: effectData.toPosY }, effectData.duation, ease, Laya.Handler.create(this, this.hide));
    };
    ParticleEffect.prototype.hide = function () {
        Laya.Tween.clearTween(this._sp);
        Laya.timer.clear(this, this.hide);
        _super.prototype.hide.call(this);
    };
    ParticleEffect.prototype.removeSelf = function () {
        _super.prototype.removeSelf.call(this);
        this._sp.emitter.stop();
        this._sp.stop();
        this._sp.removeSelf();
    };
    return ParticleEffect;
}(BaseEffect));
//# sourceMappingURL=ParticleEffect.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 序列帧特效基础类;
*/
var SequenceEffect = /** @class */ (function (_super) {
    __extends(SequenceEffect, _super);
    function SequenceEffect() {
        return _super.call(this) || this;
    }
    SequenceEffect.prototype.show = function (effectData) {
        _super.prototype.show.call(this, effectData);
        if (!this._urls) {
            this._urls = [];
            for (var i = 1; i <= effectData.length; i++) {
                this._urls.push(effectData.url + i + ".png");
            }
            this._roleAni = new Laya.Animation();
        }
        this._id = effectData.id;
        this._index = effectData.index;
        //创建动画模板dizziness
        Laya.Animation.createFrames(this._urls, effectData.url);
        this._roleAni.pos(effectData.posX, effectData.posY);
        this._roleAni.scale(effectData.scaleX, effectData.scaleY);
        this._roleAni.visible = false;
        if (effectData.delay) {
            this._roleAni.visible = effectData.delayShow;
            if (this._roleAni.visible)
                this._roleAni.play(effectData.start, effectData.loop, effectData.url);
            Laya.timer.once(effectData.delay, this, this.play, [effectData]);
        }
        else
            this.play(effectData);
        return this._roleAni;
    };
    SequenceEffect.prototype.play = function (effectData) {
        if (!this._roleAni.visible) {
            this._roleAni.visible = true;
            this._roleAni.play(effectData.start, effectData.loop, effectData.url);
        }
        if (effectData.loop) {
            if (effectData.duation)
                Laya.timer.once(effectData.duation, this, this.hide);
        }
        else
            this._roleAni.on(Laya.Event.COMPLETE, this, this.hide);
        if (effectData.needTween) {
            var ease = Laya.Ease.linearIn;
            if (effectData.tweenType == 1) {
                Laya.Tween.to(this._roleAni, { x: effectData.toPosX }, effectData.duation, ease);
                Laya.Tween.to(this._roleAni, { y: effectData.toPosY }, effectData.duation, Laya.Ease.quadOut, Laya.Handler.create(this, this.hide));
            }
            else
                Laya.Tween.to(this._roleAni, { x: effectData.toPosX, y: effectData.toPosY }, effectData.duation, ease, Laya.Handler.create(this, this.hide));
        }
    };
    SequenceEffect.prototype.hide = function () {
        Laya.Tween.clearTween(this._roleAni);
        Laya.timer.clear(this, this.play);
        _super.prototype.hide.call(this);
    };
    SequenceEffect.prototype.removeSelf = function () {
        this._roleAni.stop();
        if (this._roleAni.parent)
            this._roleAni.parent.removeChild(this._roleAni);
    };
    return SequenceEffect;
}(BaseEffect));
//# sourceMappingURL=SequenceEffect.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var VipUpgradeEffect = /** @class */ (function (_super) {
    __extends(VipUpgradeEffect, _super);
    function VipUpgradeEffect() {
        return _super.call(this) || this;
    }
    VipUpgradeEffect.prototype.show = function (effectData) {
        _super.prototype.show.call(this, effectData);
        if (!this._roleAni) {
            this._roleAni = new Laya.Animation();
            this._roleAni.source = effectData.url;
        }
        this._id = effectData.id;
        this._index = effectData.index;
        this._roleAni.pos(effectData.posX, effectData.posY);
        this._roleAni.scale(effectData.scaleX, effectData.scaleY);
        this._roleAni.frames;
        this._roleAni.autoAnimation;
        var nod = this._roleAni.getChildByName("_effect");
        if (effectData.blendMode)
            this._roleAni.blendMode = "lighter";
        if (effectData.delay) {
            this._roleAni.visible = false;
            Laya.timer.once(effectData.delay, this, this.play.bind(this), [effectData]);
        }
        else
            this.play(effectData);
        return this._roleAni;
    };
    VipUpgradeEffect.prototype.play = function (effectData) {
        this._roleAni.visible = true;
        this._roleAni.play(effectData.start, effectData.loop);
        if (effectData.loop) {
            if (effectData.duation)
                Laya.timer.once(effectData.duation, this, this.hide);
        }
        else
            this._roleAni.on(Laya.Event.COMPLETE, this, this.hide);
    };
    VipUpgradeEffect.prototype.hide = function () {
        Laya.timer.clear(this, this.play);
        this._roleAni.off(Laya.Event.COMPLETE, this, this.hide);
        _super.prototype.hide.call(this);
    };
    VipUpgradeEffect.prototype.removeSelf = function () {
        _super.prototype.removeSelf.call(this);
        Laya.timer.clear(this, this.play);
        this._roleAni.stop();
        if (this._roleAni.parent)
            this._roleAni.parent.removeChild(this._roleAni);
    };
    return VipUpgradeEffect;
}(BaseEffect));
//# sourceMappingURL=VipUpgradeEffect.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BaseCardTypeView = /** @class */ (function (_super) {
    __extends(BaseCardTypeView, _super);
    function BaseCardTypeView(opttype, selfdir, targetdir, cards) {
        var _this = _super.call(this) || this;
        _this.DIR = [[1, 4, 1, 2], [2, 3, 2, 1], [3, 2, 3, 4], [4, 1, 4, 3]];
        _this.RES_CARDS = [
            [[1, 1, 1, 1], [1, 1, 4, 1], [1, 1, 1, 1], [2, 1, 1, 1]],
            [[2, 2, 2, 2], [2, 2, 1, 2], [2, 2, 2, 2], [1, 2, 2, 2]],
            [[3, 3, 3, 3], [3, 3, 2, 3], [3, 3, 3, 3], [4, 3, 3, 3]],
            [[4, 4, 4, 4], [4, 4, 3, 4], [4, 4, 4, 4], [1, 4, 4, 4]]
        ];
        _this.NODE_WIDTH = [[174, 190, 174, 190], [0, 55, 55, 55], [106, 115, 110, 115], [0, 55, 55, 55]];
        _this.NODE_HEIGHT = [[0, 65, 65, 65], [89, 103, 89, 103], [0, 52, 52, 52], [88, 103, 88, 103]];
        _this.SCALE_LIST = [0.85, 0.5, 0.5, 0.5];
        _this.CARD_WIDTH = 40;
        _this.CARD_HEIGHT = 50;
        _this.POS = [
            [
                [{ x: 28, y: 0 }, { x: 84, y: 0 }, { x: 140, y: 0 }, { x: 84, y: 22 }],
                [{ x: 28, y: 0 }, { x: 84, y: 0 }, { x: 148, y: -12 }, { x: 84, y: 22 }],
                [{ x: 28, y: 0 }, { x: 84, y: 0 }, { x: 140, y: 0 }, { x: 84, y: 22 }],
                [{ x: 36, y: -12 }, { x: 100, y: 0 }, { x: 156, y: 0 }, { x: 102, y: 22 }]
            ],
            [
                [{ x: 0, y: 16 }, { x: 0, y: 44 }, { x: 0, y: 72 }, { x: 0, y: 55 }],
                [{ x: 0, y: 14 }, { x: 0, y: 42 }, { x: 4, y: 77 }, { x: 0, y: 53 }],
                [{ x: 0, y: 16 }, { x: 0, y: 44 }, { x: 0, y: 72 }, { x: 0, y: 55 }],
                [{ x: 4, y: 23 }, { x: 0, y: 60 }, { x: 0, y: 88 }, { x: 0, y: 71 }]
            ],
            [
                [{ x: -16, y: 0 }, { x: -49, y: 0 }, { x: -82, y: 0 }, { x: -49, y: 12 }],
                [{ x: -16, y: 0 }, { x: -49, y: 0 }, { x: -86, y: 8 }, { x: -49, y: 12 }],
                [{ x: -16, y: 0 }, { x: -49, y: 0 }, { x: -82, y: 0 }, { x: -49, y: 12 }],
                [{ x: -20, y: 7 }, { x: -57, y: 0 }, { x: -90, y: 0 }, { x: -57, y: 12 }]
            ],
            [
                [{ x: 0, y: -16 }, { x: 0, y: -44 }, { x: 0, y: -72 }, { x: 0, y: -33 }],
                [{ x: 0, y: -16 }, { x: 0, y: -44 }, { x: -4, y: -78 }, { x: 0, y: -32 }],
                [{ x: 0, y: -16 }, { x: 0, y: -44 }, { x: 0, y: -72 }, { x: 0, y: -33 }],
                [{ x: -4, y: -26 }, { x: 0, y: -61 }, { x: 0, y: -89 }, { x: 0, y: -50 }]
            ]
        ];
        _this.cardsViews = [];
        _this.init(opttype, selfdir, targetdir, cards);
        return _this;
    }
    // private ALIGN_LIST = {display.BOTTOM_LEFT,display.BOTTOM_RIGHT,display.TOP_RIGHT,display.TOP_LEFT}
    BaseCardTypeView.prototype.init = function (opttype, selfdir, targetdir, cards) {
        this.width = this.NODE_WIDTH[selfdir][targetdir];
        this.height = this.NODE_HEIGHT[selfdir][targetdir];
        this.opttype = opttype;
        this.cards = cards;
        this.dir = selfdir;
        this.targetdir = targetdir;
        this.xoffset = 0;
        this.yoffset = 0;
        this.cardsViews = [];
        if (opttype == GameDef.OptType.MJ_CHI || opttype == GameDef.OptType.MJ_PENG) {
            this.initThree();
        }
        else if (opttype == GameDef.OptType.MJ_MNGANG) {
            this.MnGang();
        }
        else if (opttype == GameDef.OptType.MJ_ANGANG) {
            this.AnGang();
        }
        else if (opttype == GameDef.OptType.MJ_PENGGANG) {
            this.MnGang();
        }
    };
    BaseCardTypeView.prototype.getCard = function (v, k) {
        var x;
        var y;
        var showFront = true;
        if (this.opttype == GameDef.OptType.MJ_ANGANG) {
            showFront = false;
            if (k == 4 && this.dir == 1 && Utils.checkSeatid(BaseGameData.selfSeatid)) {
                showFront = true;
            }
        }
        var view = new BaseCardView(v, this.dir, null);
        var scale = this.SCALE_LIST[this.dir];
        view.scale(scale, scale);
        var pos = this.POS[this.dir][this.targetdir][k];
        return { view: view, x: pos.x, y: pos.y };
    };
    BaseCardTypeView.prototype.initThree = function () {
        var cards = this.cards;
        var offset = 0;
        for (var k in cards) {
            var v = cards[k];
            var info = this.getCard(v, k);
            var view = info.view;
            var x = info.x;
            var y = info.y;
            var index = parseInt(k);
            if (this.dir == 2) {
                index = 5 - parseInt(k);
            }
            this.addChildAt(view, index);
            view.pos(x, y);
            this.cardsViews.push(view);
        }
    };
    BaseCardTypeView.prototype.AnGang = function () {
        var card = 0;
        for (var i = 0; i < 4; i++) {
            if (i == 4) {
                card = this.cards[0];
            }
            var info = this.getCard(card, i);
            var view = info.view;
            var x = info.x;
            var y = info.y;
            var index = i;
            if (this.dir == 2) {
                index = 5 - i;
                if (i == 4) {
                    index = 5;
                }
            }
            this.addChildAt(view, index);
            view.pos(x, y);
            this.cardsViews.push(view);
            // view:addTo(self,index):align(ALIGN_LIST[self.dir],x,y)
            // table.insert(self.cardsViews,view)
        }
    };
    BaseCardTypeView.prototype.showAnGang = function (card) {
        for (var k in this.cardsViews) {
            var view = this.cardsViews[k];
            view.initFront(card, this.dir, false);
            view.setUIWithShow(true);
        }
    };
    BaseCardTypeView.prototype.MnGang = function () {
        for (var k in this.cards) {
            var v = this.cards[k];
            var info = this.getCard(v, k);
            var view = info.view;
            var x = info.x;
            var y = info.y;
            var index = parseInt(k);
            if (this.dir == 2) {
                index = 5 - parseInt(k);
                if (parseInt(k) == 4) {
                    index = 5;
                }
            }
            this.addChildAt(view, index);
            view.pos(x, y);
            this.cardsViews.push(view);
        }
    };
    BaseCardTypeView.prototype.pengGang = function (handcard) {
        var info = this.getCard(handcard, 4);
        var view = info.view;
        var x = info.x;
        var y = info.y;
        this.addChildAt(view, 3);
        view.pos(x, y);
        this.cardsViews.push(view);
    };
    BaseCardTypeView.prototype.removePengGang = function () {
        var view = this.cardsViews[this.cardsViews.length - 1];
        this.cardsViews.pop();
        view.removeSelf();
    };
    return BaseCardTypeView;
}(Laya.Sprite));
//# sourceMappingURL=BaseCardTypeView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BaseCardView = /** @class */ (function (_super) {
    __extends(BaseCardView, _super);
    function BaseCardView(card, dir, optcallback) {
        var _this = _super.call(this) || this;
        _this.HIGH_LIGHT_ZORDER = 1;
        _this.UPDELAY = 30;
        _this.OFFSET_Y = -30;
        _this.MOVE_CARDS_T = 0.1;
        _this.RES_PATH = "card/";
        _this.SHIFTER_NUM = 0;
        _this.init(card, dir, optcallback);
        if (dir == 1) {
            // Laya.stage.on(Laya.Event.RESIZE, this, this.onResize);
        }
        return _this;
    }
    BaseCardView.prototype.getModel = function () {
        switch (this.dir) {
            case 1: return ui.mj.HandCard.Card_1UI;
            case 2: return ui.mj.HandCard.Card_2UI;
            case 3: return ui.mj.HandCard.Card_3UI;
            case 4: return ui.mj.HandCard.Card_4UI;
        }
    };
    BaseCardView.prototype.onResize = function () {
        if (Laya.stage.width / Laya.stage.height < 8 / 5 && this.dir == 1) {
            var scale = Laya.stage.width / 1024;
            this.view.scale(scale, scale);
        }
        else {
            this.view.scale(1, 1);
        }
    };
    BaseCardView.prototype.init = function (card, dir, optcallback) {
        this.dir = dir;
        if (optcallback) {
            this.callback = optcallback;
        }
        var model = this.getModel();
        this.view = new model();
        // if(Laya.stage.width/Laya.stage.height < 8/5 && dir == 1){
        // 	let scale = Laya.stage.width/1024
        // 	this.view.scale(scale,scale)
        // }
        this.addChild(this.view);
        if (card > 0) {
            this.view._bg.visible = true;
            this.view._back.visible = false;
            this.view._bg.skin = "card/" + this.view.name + "/" + (card % 100) + ".png";
            this.card = card;
            if (card % 100 == BaseGameData.SHIFTER_NUM % 100) {
                this.view._god.visible = true;
            }
            // if(this.dir == 1){
            // 	this.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);
            // }
        }
        else {
            this.view._bg.visible = false;
        }
    };
    BaseCardView.prototype.updateFront = function (card) {
        if (card > 0) {
            this.view._back.visible = false;
            this.view._bg.visible = true;
            this.view._bg.skin = "card/" + this.view.name + "/" + (card % 100) + ".png";
            this.card = card;
            if (card % 100 == BaseGameData.SHIFTER_NUM % 100) {
                this.view._god.visible = true;
            }
        }
    };
    BaseCardView.prototype.shuffle = function () {
        if (this.card > 0) {
            if (this.view._bg.visible == true) {
                this.view._bg.visible = false;
                this.view._back.visible = true;
            }
            else {
                this.view._bg.visible = true;
                this.view._back.visible = false;
            }
        }
    };
    BaseCardView.prototype.isSelected = function () {
        return this.bSelected;
    };
    BaseCardView.prototype.upAction = function () {
        if (this.bSelected)
            return;
        this.bSelected = true;
        this.y = this.y + this.OFFSET_Y;
    };
    BaseCardView.prototype.downAction = function () {
        if (!this.bSelected)
            return;
        this.bSelected = false;
        this.y = this.y - this.OFFSET_Y;
        if (this.y < 0)
            this.y = 0;
    };
    BaseCardView.prototype.showFoldBg = function () {
        var bg = new Laya.Image("card/fold_bg.png");
        bg.sizeGrid = "10,10,10,10";
        bg.width = 96;
        bg.height = 126;
        bg.centerX = -14;
        bg.centerY = -12;
        this.addChildAt(bg, 0);
    };
    return BaseCardView;
}(Laya.View));
//# sourceMappingURL=BaseCardView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BaseChooseScore = /** @class */ (function (_super) {
    __extends(BaseChooseScore, _super);
    function BaseChooseScore(callback, info) {
        var _this = _super.call(this) || this;
        _this.callback = callback;
        _this.init(info);
        return _this;
    }
    BaseChooseScore.prototype.init = function (info) {
        this.mouseEnabled = true;
        for (var i = 0; i < 5; i++) {
            this["_score_" + i].on(Laya.Event.CLICK, this, this.onClick);
        }
        for (var k in info.cards) {
        }
    };
    BaseChooseScore.prototype.onClick = function (event) {
        this.callback(GameDef.OptType.CALL_SCORE, [parseInt(event.target.name)]);
        this.removeSelf();
    };
    return BaseChooseScore;
}(ui.mj.ChooseScoreUI));
//# sourceMappingURL=BaseChooseScore.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BaseDealCardsView = /** @class */ (function (_super) {
    __extends(BaseDealCardsView, _super);
    function BaseDealCardsView() {
        var _this = _super.call(this) || this;
        _this.cards = {};
        _this.cardsViews = {};
        _this.cardsPos = {};
        _this.DIRLIST = [
            [[1]],
            [[1, 3], [3, 1], [3, 1]],
            [[1, 2, 4], [2, 4, 1], [2, 4, 1], [4, 1, 2]],
            [[1, 4, 3, 2], [2, 1, 4, 3], [3, 2, 1, 4], [4, 3, 2, 1]]
        ];
        _this.BEGINX = [-216, 350, 148, -350];
        _this.BEGINY = [190, -94, -254, 162];
        _this.BEGIN_SIGNALX = [175, 350, -90, -350];
        _this.BEGIN_SIGNALY = [200, 110, -245, -16];
        _this.CATCH_SIGNALX = [250, 350, -150, -350];
        _this.CATCH_SIGNALY = [200, 140, -245, -90];
        _this.CARD_WIDTH_BIG = [130, 0, -87, 0];
        _this.CARD_HEIGHT_BIG = [0, 68, 0, -68];
        _this.CARD_WIDTH = [43, 0, 43, 0];
        _this.CARD_HEIGHT = [0, 27, 0, 27];
        _this.cards = {};
        _this.cardsViews = {};
        _this.cardsPos = {};
        return _this;
    }
    BaseDealCardsView.prototype.getCard = function (dir, index) {
        var card;
        if (index < 4) {
            var num = dir;
            if (num == 4) {
                num = 2;
            }
            card = new Laya.Image("card/deal_card_" + num + ".png");
            if (dir == 1) {
                card.scaleX = 0.6;
                card.scaleY = 0.6;
            }
        }
        else {
            if (dir == 1 || dir == 3) {
                card = new Laya.Image("card/bg_3.png");
                card.scaleX = 0.6;
                card.scaleY = 0.6;
                if (dir == 3) {
                    card.scaleX = 0.4;
                    card.scaleY = 0.4;
                }
            }
            else {
                card = new Laya.Image("card/bg_2.png");
                card.scaleX = 0.38;
                card.scaleY = 0.38;
            }
        }
        return card;
    };
    BaseDealCardsView.prototype.getDealcardSound = function (index) {
        var list = [
            "deal_card_a",
            "deal_card_b",
            "deal_card_a",
            "deal_card_b",
            "deal_card_a",
            "deal_card_b",
            "deal_card_a",
            "deal_card_b",
            "deal_card_a",
            "deal_card_b",
            "deal_card_a",
            "deal_card_b",
            "deal_card_a",
            "deal_card_b",
            "deal_card_a",
            "deal_card_b",
            "deal_card_a",
            "deal_card_b",
            "deal_card_a",
            "deal_card_b",
            "deal_card_a",
            "deal_card_b",
            "deal_card_a",
            "deal_card_b",
        ];
        return list[index];
    };
    BaseDealCardsView.prototype.dealCards = function (index, callback) {
        this.callback = callback;
        var duration = 120;
        var dir = Utils.getDir(index);
        var list = this.DIRLIST[BaseGameData.maxPlayer - 1][dir - 1];
        var cardIndex;
        var rightIndexArray = [];
        for (var k in list) {
            var v = list[k];
            for (var i = 1; i <= 4; i++) {
                cardIndex = i;
                if (v == 2) {
                    cardIndex = 5 - i;
                }
                var card_1 = this.getCard(v, i);
                this.addChildAt(card_1, i - 1);
                this.cards[parseInt(k) + (i - 1) * BaseGameData.maxPlayer] = card_1;
                card_1.alpha = 0;
                if (v == 4) {
                    rightIndexArray.push(parseInt(k) + (i - 1) * BaseGameData.maxPlayer);
                }
                if (i < 4) {
                    this.cardsPos[parseInt(k) + (i - 1) * BaseGameData.maxPlayer] = { x: this.BEGINX[v - 1] + (i - 1) * this.CARD_WIDTH_BIG[v - 1], y: this.BEGINY[v - 1] + (i - 1) * this.CARD_HEIGHT_BIG[v - 1] };
                }
                else {
                    this.cardsPos[parseInt(k) + (i - 1) * BaseGameData.maxPlayer] = { x: this.BEGIN_SIGNALX[v - 1], y: this.BEGIN_SIGNALY[v - 1] };
                }
            }
        }
        var card = this.getCard(list[0], 5);
        card.alpha = 0;
        this.addChild(card);
        // card.alpha = 0
        this.cards[16] = card;
        this.cardsPos[16] = ({ x: this.CATCH_SIGNALX[list[0] - 1], y: this.CATCH_SIGNALY[list[0] - 1] });
        //  逆时针发牌
        // let rightIndexArray = [index+2,index+6,index+10,index+14]
        var rightIndex = 3;
        for (var k in this.cards) {
            var view = this.cards[k];
            var dealCardsPos = this.cardsPos[k];
            var times = k;
            var delay = duration * parseInt(times);
            if (rightIndexArray.indexOf((parseInt(k))) >= 0) {
                this.setChildIndex(view, rightIndex);
                rightIndex--;
            }
            // let audio = cc.CallFunc:create(function()
            // 	_app.soundMgr:playGameSound(getDealcardSound(k))
            // end)
            // let show = cc.Show:create()
            // let move = cc.MoveTo:create(duration, dealCardsPos)
            // let callF
            // let delay2
            // if k == #self.cards then
            // 	delay2 = cc.DelayTime:create(0.5)
            // 	callF = cc.CallFunc:create(function()
            // 		self:cleanup()
            // 		self.callback()
            // 	end)
            // end
            // let sequence = cc.Sequence:create(delay,  show,  cc.Spawn:create(audio,move),  delay2, callF)
            if (parseInt(k) == 16) {
                TweenUtils.get(view).to({ x: dealCardsPos.x, y: dealCardsPos.y, alpha: 1 }, duration, null, null, delay)
                    .to({}, 10, null, Laya.Handler.create(this, this.clean), 500);
            }
            else {
                if (BaseGameData.selfSeatid && parseInt(k) % 4 == BaseGameData.selfSeatid) {
                    TweenUtils.get(view).to({ x: dealCardsPos.x, y: dealCardsPos.y, alpha: 1 }, duration, null, null, delay);
                }
                else {
                    TweenUtils.get(view).to({ x: dealCardsPos.x, y: dealCardsPos.y, alpha: 1 }, duration, null, Laya.Handler.create(this, function () {
                        SoundManager.instance.playEffect("deal_card_a", 0, 1, false, 1, true);
                    }), delay);
                }
            }
        }
    };
    BaseDealCardsView.prototype.clean = function () {
        for (var k in this.cards) {
            var view = this.cards[k];
            view.removeSelf();
            view = null;
        }
        this.cards = [];
        if (this.callback) {
            this.callback();
        }
    };
    return BaseDealCardsView;
}(Laya.Sprite));
//# sourceMappingURL=BaseDealCardsView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BaseFoldCardView = /** @class */ (function (_super) {
    __extends(BaseFoldCardView, _super);
    function BaseFoldCardView(seatid, dir) {
        var _this = _super.call(this) || this;
        _this.CARD_WIDTH = [42, 53, -42, -53];
        _this.CARD_HEIGHT = [55, -35, -55, 35];
        _this.SCALE_LIST = [0.62, 0.62, 0.62, 0.62];
        _this.MAX_NUM = 12;
        _this.cards = [];
        _this.cardsViews = [];
        _this.init(seatid, dir);
        return _this;
    }
    BaseFoldCardView.prototype.init = function (seatid, dir) {
        this.seatid = seatid;
        this.dir = dir;
        this.cards = [];
        this.cardsViews = [];
        this.initData();
        if (BaseFoldCardManager.instance._foldType > 0) {
            this.foldView = new ui.mj.FoldCard.FoldCardAllUI();
            this.addChild(this.foldView);
            for (var i = 1; i < 115; i++) {
                this.foldView["card_" + i].visible = false;
            }
        }
        else {
            if (BaseGameData.maxPlayer == 2) {
                if (dir == 1) {
                    this.foldView = new ui.mj.FoldCard.FoldCard_5UI();
                    this.addChild(this.foldView);
                }
                else {
                    this.foldView = new ui.mj.FoldCard.FoldCard_6UI();
                    this.addChild(this.foldView);
                }
                for (var i = 1; i < 56; i++) {
                    this.foldView["card_" + i].visible = false;
                }
            }
            else {
                if (dir == 1) {
                    this.foldView = new ui.mj.FoldCard.FoldCard_1UI();
                    this.addChild(this.foldView);
                }
                else if (dir == 2) {
                    this.foldView = new ui.mj.FoldCard.FoldCard_2UI();
                    this.addChild(this.foldView);
                }
                else if (dir == 3) {
                    this.foldView = new ui.mj.FoldCard.FoldCard_3UI();
                    this.addChild(this.foldView);
                }
                else if (dir == 4) {
                    this.foldView = new ui.mj.FoldCard.FoldCard_4UI();
                    this.addChild(this.foldView);
                }
                for (var i = 1; i < 34; i++) {
                    this.foldView["card_" + i].visible = false;
                }
            }
        }
        this.width = this.foldView.width;
        this.height = this.foldView.height;
        Dispatcher.on("mask_same_card", this, this.markSameCard);
        Dispatcher.on("clear_same_card", this, this.clearMarkCard);
    };
    BaseFoldCardView.prototype.initData = function () {
    };
    BaseFoldCardView.prototype.getCardModel = function () {
        switch (this.dir) {
            case 1: return ui.mj.HoldCard.Card_1UI;
            case 2: return ui.mj.HoldCard.Card_2UI;
            case 3: return ui.mj.HoldCard.Card_3UI;
            case 4: return ui.mj.HoldCard.Card_4UI;
        }
    };
    BaseFoldCardView.prototype.addFoldCard = function (cardid) {
        var index = this.cards.length + 1;
        var view = this.foldView["card_" + index];
        if (!view)
            return;
        view.visible = true;
        if (cardid > 0) {
            view._bg.skin = "card/" + view.name + "/" + (cardid % 100) + ".png";
        }
        else {
            view._back.visible = true;
        }
        this.cards.push(cardid);
    };
    BaseFoldCardView.prototype.updateFoldCards = function (cards) {
        if (this.cards.length > 0) {
            return;
        }
        for (var k in cards) {
            var v = cards[k];
            this.addFoldCard(v);
        }
        // this.updateCardIndex()
    };
    BaseFoldCardView.prototype.removeFoldCard = function () {
        if (this.cards.length) {
            var index = this.cards.length;
            this.foldView["card_" + index].visible = false;
            this.cards.pop();
        }
    };
    BaseFoldCardView.prototype.removeAllCards = function () {
        for (var i = 1; i < 37; i++) {
            this.foldView["card_" + i].visible = false;
        }
        this.cards = [];
    };
    BaseFoldCardView.prototype.removeCard = function (cardid) {
        var index = this.cards.length;
        if (this.cards[index - 1] == cardid) {
            this.foldView["card_" + index].visible = false;
            this.cards.pop();
        }
    };
    BaseFoldCardView.prototype.showLastFlag = function (seatid) {
        var view = this.cardsViews[this.cardsViews.length];
        if (view) {
            return view.showLastFlag();
        }
        // let index = this.cards.length
        // if (index > 0){
        //     this.foldView["card_"+index]._arror.play()
        // }
    };
    BaseFoldCardView.prototype.hideLastFlag = function () {
        var index = this.cards.length;
        if (index > 0) {
            this.foldView["card_" + index]._arror.stop();
        }
    };
    BaseFoldCardView.prototype.getLastFlagPos = function () {
        var length = this.cards.length;
        var index = length;
        if (index < 1)
            return;
        var view = this.foldView["card_" + index];
        return view.localToGlobal(new laya.maths.Point(view.width / 2, 15));
    };
    BaseFoldCardView.prototype.getFoldCardPos = function () {
        var length = this.cards.length;
        var index = length + 1;
        var view = this.foldView["card_" + index];
        if (!view)
            return { x: 0, y: 0 };
        return view.localToGlobal(new laya.maths.Point(0, 0));
        // let width = this.CARD_WIDTH[this.dir - 1]
        // let height = this.CARD_HEIGHT[this.dir -1]
        // let x,y
        // if (this.dir == 1){
        //     y = Math.floor(length/this.MAX_NUM)*height
        //     x = (length%this.MAX_NUM)*width
        // }else if (this.dir == 2){
        //     x = Math.floor(length/this.MAX_NUM)*width
        //     y = (length%this.MAX_NUM)*height
        // }else if (this.dir == 3){
        //     y = Math.floor(length/this.MAX_NUM)*height
        //     x = (length%this.MAX_NUM)*width
        // }else if (this.dir == 4){
        //     x = Math.floor(length/this.MAX_NUM)*width
        //     y = (length%this.MAX_NUM)*height
        // }
        // if (BaseGameData.max_player == 2){
        //     x = x + 130 * (this.dir-2.4)
        // }
        // return {x:x,y:y,index:index,scale:this.SCALE_LIST[this.dir-1]}
    };
    BaseFoldCardView.prototype.updateFoldCardFrame = function (cards) {
        this.removeAllCards();
        this.updateFoldCards(cards);
    };
    BaseFoldCardView.prototype.markSameCard = function (card) {
        if (!card) {
            return;
        }
        for (var k in this.cards) {
            var v = this.cards[k];
            if (v % 100 == card % 100) {
                this.foldView["card_" + (parseInt(k) + 1)]._mask.visible = true;
            }
            else {
                this.foldView["card_" + (parseInt(k) + 1)]._mask.visible = false;
            }
        }
    };
    BaseFoldCardView.prototype.clearMarkCard = function () {
        for (var k in this.cards) {
            this.foldView["card_" + (parseInt(k) + 1)]._mask.visible = false;
        }
    };
    return BaseFoldCardView;
}(Laya.View));
//# sourceMappingURL=BaseFoldCardView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BaseGameEndDialog = /** @class */ (function (_super) {
    __extends(BaseGameEndDialog, _super);
    function BaseGameEndDialog() {
        var _this = _super.call(this) || this;
        _this.signList = ["+", "-", "*", "/"];
        _this["name"] = "BaseGameEndDialog";
        _this._cardView = BaseCardView;
        return _this;
    }
    BaseGameEndDialog.prototype.onSort = function (a, b) {
        if (BaseGameData.winDetailObj[a.seatid] && !BaseGameData.winDetailObj[b.seatid])
            return 1;
        if (!BaseGameData.winDetailObj[a.seatid] && BaseGameData.winDetailObj[b.seatid])
            return -1;
        if (a.winScore > b.winScore)
            return 1;
        else
            return -1;
    };
    BaseGameEndDialog.prototype.show = function (data, data1, data2) {
        this._data = data;
        this._data.sort(this.onSort);
        this._endType = data1;
        this._winType = data2;
        var index = 1;
        var posX = 40;
        var posY = BaseGameData.maxPlayer * 130 + 10;
        this._bg.removeChildren();
        if (this._winType == 0) {
            this._liuju.visible = true;
        }
        else {
            this._liuju.visible = false;
        }
        for (var k in this._data) {
            var v = this._data[k];
            // if(v.winScore <= 0){
            if (!BaseGameData.winDetailObj[v.seatid]) {
                var view = this.addLoseItem(BaseGameData.getPlayerDataBySeatid(v.seatid), v.winScore);
                this._bg.addChild(view);
                view.pos(posX, posY - view.height - 10);
                posY = view.y;
            }
            else {
                var view = this.addWinItem(BaseGameData.getPlayerDataBySeatid(v.seatid), v.winScore);
                this._bg.addChild(view);
                view.pos(posX, posY - view.height - 5);
                posY = view.y;
                if (parseInt(k) == this._data.length - 1) {
                    view._line.visible = false;
                }
            }
        }
        this._next.on(Laya.Event.CLICK, this, this.nextRound);
        this._back_desk.on(Laya.Event.CLICK, this, this.hide);
        if (this._endType) {
            this._next.stateNum = 2;
            this._next.skin = "gameEnd/tableEnd.png";
        }
        else {
            this._next.stateNum = 1;
            this._next.skin = "table/btnReadyAgain.png";
        }
    };
    BaseGameEndDialog.prototype.getHoldModel = function (target_dir) {
        if (target_dir == 2) {
            return ui.mj.HoldCard.Card_2_1UI;
        }
        else if (target_dir == 3) {
            return ui.mj.HoldCard.Card_3_1UI;
        }
        else if (target_dir == 4) {
            return ui.mj.HoldCard.Card_4_1UI;
        }
        else if (target_dir == 1) {
            return ui.mj.HoldCard.Card_3_1UI;
        }
    };
    BaseGameEndDialog.prototype.getDir = function (seatid) {
        var dirList = [
            [[1]],
            [[1, 3], [3, 1]],
            [[1, 2, 4], [4, 1, 2], [2, 4, 1]],
            [[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]
        ];
        var dir = seatid;
        if (!BaseGameData.winSeatid) {
            return dirList[BaseGameData.maxPlayer - 1][0][seatid - 1];
        }
        return dirList[BaseGameData.maxPlayer - 1][BaseGameData.winSeatid - 1][seatid - 1];
    };
    BaseGameEndDialog.prototype.addHoldCard = function (info) {
        var target_dir = this.getDir(info.fromSeatid);
        var view = this.getHoldModel(target_dir);
        var hold_card = new view();
        for (var i = 0; i < 4; i++) {
            var v = info.cards[i];
            if (v) {
                hold_card["card_" + (i + 1)]._bg.skin = "card/" + hold_card["card_" + (i + 1)].name + "/" + (v % 100) + ".png";
            }
            else {
                hold_card["card_" + (i + 1)].visible = false;
            }
        }
        return hold_card;
    };
    BaseGameEndDialog.prototype.nextRound = function () {
        if (GameConfig.IS_MATCH) {
            this.hide();
            if (DialogManager.instance.hasDialog("MATCH_WAIT")) {
                DialogManager.instance._dialogList["MATCH_WAIT"].visible = true;
            }
        }
        else if (this._endType) {
            this.hide();
            TableEndCtrl.instance.show(BaseGameData.tableEndInfo);
        }
        else {
            server.playerReadyReq();
            if (this._endType) {
                DialogManager.instance.removeDialog("GAME_END");
                TableEndCtrl.instance.show(BaseGameData.tableEndInfo);
            }
            else {
                Laya.timer.once(100, this, function () {
                    DialogManager.instance.removeDialog("GAME_END");
                });
            }
        }
    };
    BaseGameEndDialog.prototype.addLoseItem = function (player, score) {
        var CardCls = this._cardView;
        var view = new ui.mj.GameEndLoseItemUI();
        var head = new HeadUI();
        view._avatar.addChild(head);
        head.setImageBounds(73, 73);
        head.getInfo(player.uid || 0);
        head._labInfo.visible = false;
        head._labName.visible = false;
        if (player.seatid == BaseGameData.btnSeatid) {
            view._zhuang.visible = true;
        }
        if (score >= 0) {
            view._score.font = "font_num_4";
            view._score.text = "+" + score;
        }
        else {
            view._score.font = "font_num_3";
            view._score.text = score;
        }
        view._name.text = Utils.getFitNickName(player.nickname, 10);
        var arr = BaseGameData.loseDetailObj[player.seatid];
        var toX = 10;
        for (var k in arr) {
            var v = arr[k];
            if (v.name != GameDef.WIN_TYPE.XIAZHUANG) {
                var detail = this.addDetail(v.name, v.value, v.sign);
                view._detail.addChild(detail);
                detail.x = toX;
                toX = detail.width + detail.x + 10;
            }
            else {
                var img = new Laya.Image("gameEnd/28.png");
                view.addChild(img);
                img.centerY = 0;
                img.right = 150;
            }
        }
        if (BaseGameData.gameType == GameDef.GAME_TYPE.SHANXI_MJ) {
            view._pao.skin = "card/tag_" + player.pao + ".png";
        }
        else {
            view._pao.visible = false;
        }
        var index = 1;
        var posX = 10;
        var posY = 0;
        if (player.seatid == BaseGameData.btnSeatid) {
            view._zhuang.visible = true;
        }
        for (var j in player.holdCards) {
            var holdInfo = player.holdCards[j];
            var holdCard = this.addHoldCard(holdInfo);
            view._card.addChild(holdCard);
            holdCard.scale(0.5, 0.5);
            holdCard.pos(posX, posY + 12);
            posX = posX + holdCard.width * 0.5 + 5;
            console.log("posX======================" + posX);
        }
        var cards = player.handCards;
        this.sortCards(cards);
        for (var m = cards.length - 1; m >= 0; m--) {
            var cardid = player.handCards[m];
            var handCard = new CardCls(cardid, 1, null);
            handCard.scale(0.5, 0.5);
            view._card.addChild(handCard);
            handCard.pos(posX, posY);
            posX = posX + 35;
        }
        return view;
    };
    BaseGameEndDialog.prototype.sortCards = function (cards) {
        var length = cards.length;
        for (var i = 0; i < length - 1; i++) {
            for (var j = i + 1; j < length; j++) {
                if (BaseGameData.SHIFTER_NUM == (cards[i] % 100) || BaseGameData.SHIFTER_NUM == (cards[j] % 100)) {
                    if (BaseGameData.SHIFTER_NUM == (cards[i] % 100) && BaseGameData.SHIFTER_NUM != (cards[j] % 100)) {
                        var a = cards[j];
                        cards[j] = cards[i];
                        cards[i] = a;
                    }
                }
                else if ((cards[i] % 100) < (cards[j] % 100)) {
                    var a = cards[i];
                    cards[i] = cards[j];
                    cards[j] = a;
                }
            }
        }
    };
    BaseGameEndDialog.prototype.addWinItem = function (player, score) {
        var CardCls = this._cardView;
        var view = new ui.mj.GameEndWinItenUI();
        var head = new HeadUI();
        view._avatar.addChild(head);
        head._labInfo.visible = false;
        head._labName.visible = false;
        head.setImageBounds(73, 73);
        head.getInfo(player.uid);
        view._name.text = Utils.getFitNickName(player.nickname, 10);
        var index = 1;
        var posX = 10;
        var posY = 0;
        if (player.seatid == BaseGameData.btnSeatid) {
            view._zhuang.visible = true;
        }
        for (var j in player.holdCards) {
            var holdInfo = player.holdCards[j];
            var holdCard = this.addHoldCard(holdInfo);
            view._card.addChild(holdCard);
            holdCard.scale(0.5, 0.5);
            holdCard.pos(posX, posY + 12);
            posX = posX + holdCard.width * 0.5 + 5;
            console.log("posX======================" + posX);
        }
        var cards = player.handCards;
        this.sortCards(cards);
        for (var m = cards.length - 1; m >= 0; m--) {
            var cardid = player.handCards[m];
            var handCard = new CardCls(cardid, 1, null);
            handCard.scale(0.5, 0.5);
            view._card.addChild(handCard);
            handCard.pos(posX, posY);
            posX = posX + 35;
        }
        if (BaseGameData.winSeatid) {
            var handCard = new CardCls(BaseGameData.winCard, 1, null);
            handCard.scale(0.5, 0.5);
            view._card.addChild(handCard);
            handCard.pos(posX + 15, posY);
            posX = posX + 15;
        }
        var arr = BaseGameData.winDetailObj[player.seatid];
        var toX = 10;
        var total = 1;
        for (var k in arr) {
            var v = arr[k];
            var detail = this.addDetail(v.name, v.value, v.sign);
            view._detail.addChild(detail);
            detail.x = toX;
            toX = detail.width + detail.x + 10;
            if (v.sign == 3) {
                total = total * v.value;
            }
        }
        var totalfan = new Laya.Label(String(total));
        totalfan.font = "font_num_8";
        view._card.addChild(totalfan);
        totalfan.pos(posX + 38, posY + 19);
        var img = new Laya.Image("gameEnd/total_fan.png");
        view._card.addChild(img);
        img.pos(posX + 38 + totalfan.width, posY + 18);
        view._pao.visible = false;
        if (score >= 0) {
            view._score.font = "font_num_4";
            view._score.text = "+" + score;
        }
        else {
            view._score.text = score;
            view._score.font = "font_num_3";
        }
        if (this._winType == GameDef.MJ_WIN_TYPE.WIN_ALL) {
            view._hu.skin = "gameEnd/zimo.png";
        }
        else {
            view._hu.skin = "gameEnd/pinghu.png";
        }
        if (BaseGameData.gameType == GameDef.GAME_TYPE.SHANXI_MJ) {
            view._pao.skin = "card/tag_" + player.pao + ".png";
        }
        else {
            view._pao.visible = false;
        }
        return view;
    };
    BaseGameEndDialog.prototype.addDetail = function (type, value, sign) {
        var view = new Laya.View();
        var typeImg = new Laya.Image("gameEnd/" + type + ".png");
        view.addChild(typeImg);
        var text = this.signList[sign - 1] + value;
        if (value < 0) {
            text = value;
        }
        var num = new Laya.Label(text);
        num.font = "font_num_5";
        view.addChild(num);
        num.x = typeImg.width + 10;
        num.y = 3;
        return view;
    };
    BaseGameEndDialog.prototype.updateListResult = function (cell, index) {
        cell.updata();
    };
    BaseGameEndDialog.prototype.hide = function () {
        if (this._endType) {
            DialogManager.instance.removeDialog("GAME_END");
            TableEndCtrl.instance.show(BaseGameData.tableEndInfo);
        }
        else {
            Laya.timer.once(100, this, function () {
                if (!BaseGameData.isGameing) {
                    Dispatcher.dispatch(EventNames.CHECK_READY);
                }
                DialogManager.instance.removeDialog("GAME_END");
            });
        }
    };
    BaseGameEndDialog.prototype.updateMatchRoundEnd = function () {
        this._next.skin = "gameEnd/showwait.png";
        this._next.visible = false;
        this._back_desk.centerX = 0;
    };
    return BaseGameEndDialog;
}(ui.mj.GameEndUI));
//# sourceMappingURL=BaseGameEndDialog.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var defaultGpsValue = -1000;
var BaseGpsTip = /** @class */ (function (_super) {
    __extends(BaseGpsTip, _super);
    function BaseGpsTip() {
        var _this = _super.call(this) || this;
        _this["name"] = "BaseGpsTip";
        _this.init();
        return _this;
    }
    BaseGpsTip.prototype.init = function () {
        this.centerY = 0;
        this._btn_close.on(Laya.Event.CLICK, this, this.hide);
        server.on(EventNames.GAME_USER_INFO_REP, this, this.onUserInfoRep);
        this.gpsMsgs = [];
        this.heads = [];
        for (var i = 1; i <= 4; i++) {
            var msg = {
                exist: false,
                seatid: i,
                uid: 0,
                longitude: 0,
                latitude: 0
            };
            this.gpsMsgs.push(msg);
            this.heads.push(null);
        }
    };
    BaseGpsTip.prototype.onUserInfoRep = function (info) {
        for (var k in info.info) {
            var v = info.info[k];
            var player = BaseGameData.getPlayerDataByUid(v.uid);
            if (player) {
                var sid = player.seatid;
                this.gpsMsgs[sid - 1].exist = true;
                this.gpsMsgs[sid - 1].longitude = v.longitude;
                this.gpsMsgs[sid - 1].latitude = v.latitude;
                this.updateDis(sid);
            }
        }
    };
    BaseGpsTip.prototype.updateDis = function (seatid) {
        if (1 == seatid) {
            this.updateDisFromTo(1, 2);
            this.updateDisFromTo(1, 3);
            this.updateDisFromTo(1, 4);
        }
        if (2 == seatid) {
            this.updateDisFromTo(1, 2);
            this.updateDisFromTo(2, 3);
            this.updateDisFromTo(2, 4);
        }
        if (3 == seatid) {
            this.updateDisFromTo(1, 3);
            this.updateDisFromTo(2, 3);
            this.updateDisFromTo(3, 4);
        }
        if (4 == seatid) {
            this.updateDisFromTo(1, 4);
            this.updateDisFromTo(2, 4);
            this.updateDisFromTo(3, 4);
        }
    };
    BaseGpsTip.prototype.updateDisFromTo = function (from, to) {
        var msgFrom = this.gpsMsgs[from - 1];
        var msgTo = this.gpsMsgs[to - 1];
        if (msgFrom.exist && msgTo.exist) {
            if (msgFrom.longitude != defaultGpsValue && msgTo.longitude != defaultGpsValue &&
                msgFrom.latitude != defaultGpsValue && msgTo.latitude != defaultGpsValue) {
                var dis = this.computeDis(msgFrom.longitude, msgTo.longitude, msgFrom.latitude, msgTo.latitude);
                this.setDistance(from, to, this.disToString(dis));
                this.checkWarning(from, to, dis);
            }
        }
    };
    BaseGpsTip.prototype.checkWarning = function (from, to, dis) {
        var warning = this.isWarning(dis);
        var line = "_g" + from.toString() + to.toString();
        this[line].skin = warning ? "gps/redLine.png" : "gps/whiteLine.png";
        var bg = "_d" + from.toString() + to.toString();
        this[bg]._bg.skin = warning ? "gps/readFrame.png" : "gps/unKnown.png";
    };
    /**
     * 设置距离
     * @param fromSeatId
     * @param toSeatId
     * @param dis
     */
    BaseGpsTip.prototype.setDistance = function (fromSeatId, toSeatId, dis) {
        var k = "_d" + fromSeatId + "" + toSeatId;
        this[k]._bg._dis = dis;
    };
    /**
     * 设置头像信息
     * @param seatId 
     * @param headView
     */
    BaseGpsTip.prototype.setHead = function (seatId, headView) {
        var k = "_head" + seatId;
        this[k].addChild(headView);
    };
    BaseGpsTip.prototype.hide = function () {
        this.removeSelf();
    };
    BaseGpsTip.prototype.show = function () {
        for (var i = 0; i < 4; i++) {
            var player = BaseGameData.getPlayerDataBySeatid(i + 1);
            if (player) {
                //if (player.ip == "") {
                server.userInfoReq([player.uid]);
                //}
                var dir = player.seatid;
                this.gpsMsgs[dir - 1].uid = player.uid;
                if (null == this.heads[dir - 1]) {
                    var head = new HeadUI();
                    head.anchorX = 0.5;
                    head.anchorY = 0.5;
                    head.setImageBounds(73, 73);
                    this.setHead(dir, head);
                    this.heads[dir - 1] = head;
                }
                this.heads[dir - 1].getInfo(player.uid);
            }
        }
    };
    /**
     * 根据经纬度计算距离
     * @param long1
     * @param lati1
     * @param long2
     * @param lati2
     */
    BaseGpsTip.prototype.computeDis = function (long1, lati1, long2, lati2) {
        var pi = Math.PI;
        var r = 6378137;
        var radian = function (d) { return d * pi / 180.0; };
        var rlong1 = radian(long1), rlong2 = radian(long2);
        var rlati1 = radian(lati1), rlati2 = radian(lati2);
        var dis_long = rlong1 - rlong2;
        var dis_lati = rlati1 - rlati2;
        var dis = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(dis_lati / 2), 2)
            + Math.cos(rlati1) * Math.cos(rlati2) * Math.pow(Math.sin(dis_long / 2), 2))) * r;
        return dis;
    };
    BaseGpsTip.prototype.disToString = function (dis) {
        if (dis < 1000)
            return parseInt(dis.toString()) + "m";
        return dis.toFixed(2) + "km";
    };
    BaseGpsTip.prototype.isWarning = function (dis) {
        return dis < 100;
    };
    return BaseGpsTip;
}(ui.components.gps.GpsTipUI));
//# sourceMappingURL=BaseGpsTip.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BaseHandCardView = /** @class */ (function (_super) {
    __extends(BaseHandCardView, _super);
    function BaseHandCardView(seatid, dir, callback) {
        var _this = _super.call(this) || this;
        _this.cardsViews = [];
        _this.cards = [];
        _this.CARD_WIDTH = [-70, 0, 32, 0];
        _this.CARD_HEIGHT = [0, 29, 0, -29];
        _this.CARD_WIDTH_OFFSET = [-95, 0, 50, 0];
        _this.CARD_HEIGHT_OFFSET = [0, 50, 0, -50];
        _this.TOUCH_CARD_WIDTH = 76;
        _this.TOUCH_CARD_HEIGHT = 110;
        _this.UPDELAY = 15;
        _this.CARD_SCALE = [0.67, 1, 1, 1];
        _this.SHOWCARD_SCALE = [0.67, 0.55, 0.65, 0.55];
        _this.SPACE = 2;
        _this.SHIFTER_NUM = 81;
        _this.RECT_X = 145;
        _this.RECT_Y = 30;
        _this.touchIndex = 0;
        _this.beginX = 0;
        _this.beginY = 0;
        _this.init(seatid, dir, callback);
        return _this;
    }
    BaseHandCardView.prototype.init = function (seatid, dir, optCallBack) {
        this._maskCardsBut = [];
        this.seatid = seatid;
        this.dir = dir;
        this._scale = 1;
        // if(Laya.stage.width/Laya.stage.height < 8/5 && dir == 1){
        //     this._scale = Laya.stage.width/1024
        // }
        this.wOffset = this.CARD_WIDTH_OFFSET[dir - 1] * this._scale;
        this.hOffset = this.CARD_HEIGHT_OFFSET[dir - 1] * this._scale;
        this._cardWidth = this.CARD_WIDTH[dir - 1] * this._scale;
        this._cardHeight = this.CARD_HEIGHT[dir - 1] * this._scale;
        this.cards = [];
        this.cardsViews = [];
        if (optCallBack) {
            this.optCallBack = optCallBack;
        }
        if (this.dir == 1) {
            this.width = 946;
        }
        else if (this.dir == 2) {
            this.height = 454;
        }
        else if (this.dir == 3) {
            this.width = 500;
        }
        else if (this.dir == 4) {
            this.height = 424;
        }
        this.initData();
        this.width = TableLayout.HAND_CARD[dir - 1].width;
        this.height = TableLayout.HAND_CARD[dir - 1].height;
    };
    BaseHandCardView.prototype.registerCardView = function (cardView) {
        this._cardView = cardView;
    };
    BaseHandCardView.prototype.onResize = function () {
        if (this.dir == 1 && Utils.checkSeatid(BaseGameData.selfSeatid)) {
            // this.operatArea.width = Laya.stage.width
            // this.operatArea.height = Laya.stage.height
            // this.operatArea.pos(-point.x,-point.y)
            this.touchRect.width = Laya.stage.width;
            this.touchRect.y = Laya.stage.height - 150;
            // if(Laya.stage.width/Laya.stage.height < 8/5 && this.dir == 1){
            //     this._scale = Laya.stage.width/1024
            //     this.wOffset = this.CARD_WIDTH_OFFSET[this.dir-1]*this._scale
            //     this.hOffset = this.CARD_HEIGHT_OFFSET[this.dir-1]*this._scale
            //     this._cardWidth = this.CARD_WIDTH[this.dir-1]*this._scale
            //     this._cardHeight = this.CARD_HEIGHT[this.dir-1]*this._scale
            // }else if(this._scale < 1 && Laya.stage.width/Laya.stage.height > 8/5){
            //     this._scale = 1
            //     this.wOffset = this.CARD_WIDTH_OFFSET[this.dir-1]*this._scale
            //     this.hOffset = this.CARD_HEIGHT_OFFSET[this.dir-1]*this._scale
            //     this._cardWidth = this.CARD_WIDTH[this.dir-1]*this._scale
            //     this._cardHeight = this.CARD_HEIGHT[this.dir-1]*this._scale
            // }
            // if(this._isMoveing){
            //     this.catch = null
            //     Laya.Tween.clearAll(this)
            // }
            //     if(this.catch){
            //         this.cards.shift()
            //         this.cardsViews.shift()
            //     }
            //     this.updatePos()
            //     if(this.catch){
            //         let card = this.catch.card
            //         this.catch.removeSelf()
            //         this.catch = null
            //         this.setCatchCard(card)
            //     }
        }
    };
    BaseHandCardView.prototype.initTouch = function () {
        if (this.dir == 1 && Utils.checkSeatid(BaseGameData.selfSeatid)) {
            Dispatcher.on("handview", this, this.onMouseDown);
            Dispatcher.on("choose_ting", this, this.ChooseTing);
            this.touchRect = new Laya.Rectangle(0, Laya.stage.height - 150, Laya.stage.width, 120);
            Laya.stage.on(Laya.Event.RESIZE, this, this.onResize);
        }
    };
    BaseHandCardView.prototype.ChooseTing = function (isting) {
        this._isting = isting;
        if (isting) {
            for (var k in this.cardsViews) {
                var view = this.cardsViews[k];
                var index = BaseGameData.tingCards.indexOf((view.card % 100));
                if (index >= 0) {
                    view.view._ting.visible = true;
                }
                else {
                    view.view._mask.visible = true;
                }
            }
        }
        else {
            for (var k in this.cardsViews) {
                var view = this.cardsViews[k];
                view.view._mask.visible = false;
            }
        }
    };
    BaseHandCardView.prototype.initData = function () {
    };
    BaseHandCardView.prototype.onMouseDown = function (e) {
        if (!BaseGameData.isGameing)
            return;
        if (BaseGameData.isRecord == 1)
            return;
        if (this.cards.length <= 0) {
            return false;
        }
        if (!Utils.checkSeatid(BaseGameData.selfSeatid)) {
            return;
        }
        var compareX = e.currentTarget.mouseX;
        var compareY = e.currentTarget.mouseY;
        if (!this.touchRect.contains(e.currentTarget.mouseX, e.currentTarget.mouseY)) {
            this.unSelectCards();
            BaseTingCardManager.instance.clearAll();
            Dispatcher.dispatch("clear_same_card");
            // this.operatArea.y = this.operatArea.y + 50
            // _holdCardManager:clearMarkCard()
            // _foldCardManager:clearMarkCard()
            // return false 
        }
        else {
            var count = this.cards.length;
            var touchFlag = false;
            for (var i = count; i > 0; i--) {
                var view = this.cardsViews[i - 1];
                var point = view.localToGlobal(new laya.maths.Point(0, 0));
                var rect = view.getBounds();
                var newRect = new Laya.Rectangle(point.x, point.y, rect.width, rect.height + 50);
                if (view && newRect.contains(compareX, compareY)) {
                    this.touchIndex = i;
                    this.beginX = e.currentTarget.mouseX;
                    this.beginY = e.currentTarget.mouseY;
                    touchFlag = true;
                    break;
                }
            }
            if (!touchFlag) {
                // return false
                this.touchIndex = null;
                return;
            }
            if (this.touchIndex && this.touchIndex > 0) {
                var view = this.cardsViews[this.touchIndex - 1];
                if (this._isting) {
                    var index = BaseGameData.tingCards.indexOf((view.card % 100));
                    if (index >= 0) {
                    }
                    else {
                        return;
                    }
                }
                this.onClickCard(view);
                this.changeArrowByIndex(this.touchIndex - 1);
            }
        }
    };
    BaseHandCardView.prototype.onTouchMoved = function (e) {
        // if  (!_gameController.optSeatid || _gameController.optSeatid != _gameDataMgr.selfInfo.seatid) return
        // var offset = e.currentTarget.mouseX - (Laya.stage.width-295-this.cards.length*this.TOUCH_CARD_WIDTH)
        // var index = Math.floor(offset/this.TOUCH_CARD_WIDTH) 
        if (this.beginY) {
            if (this.beginY - e.currentTarget.mouseY > this.UPDELAY) {
                if (this.cards.length % 3 == 1) {
                    return;
                }
                // if (!BaseGameData.moveCard){
                //     BaseGameData.moveCard = new BaseCardView(this.cardsViews[this.touchIndex].card,1,null)
                //     this.parent.addChild(BaseGameData.moveCard)
                //     let card = this.cardsViews[this.touchIndex]
                //     let cardX = this.cardsViews[this.touchIndex].x
                //     let cardY = this.cardsViews[this.touchIndex].y
                //     BaseGameData.moveCard.pos(cardX,cardY)
                //     this._cardX = cardX
                //     this._cardY = cardY
                //     // this.cardsViews[this.touchIndex].alpha = 0.5
                //     // _holdCardManager:markSameCard(this.cardsViews[this.touchIndex].card)
                //     // _foldCardManager:markSameCard(this.cardsViews[this.touchIndex].card)
                // }
            }
            if (BaseGameData.moveCard && this._cardX) {
                var tx = e.currentTarget.mouseX - this.beginX;
                var posX = this._cardX + tx;
                var ty = e.currentTarget.mouseY - this.beginY;
                var posY = this._cardY + ty;
                BaseGameData.moveCard.pos(posX, posY);
                return;
            }
        }
        if (this.beginX && Math.abs(e.currentTarget.mouseX - this.beginX) < this.UPDELAY) {
            return;
        }
        var count = this.cards.length;
        for (var i = count; i > 0; i--) {
            var view = this.cardsViews[i - 1];
            var point = view.localToGlobal(new laya.maths.Point(0, 0));
            var rect = view.getBounds();
            var newRect = new Laya.Rectangle(point.x, point.y, rect.width, rect.height);
            if (view && newRect.contains(e.currentTarget.mouseX, e.currentTarget.mouseY)) {
                this.touchIndex = i;
                this.beginX = point.x;
                this.beginY = point.y;
                break;
            }
        }
    };
    BaseHandCardView.prototype.onTouchEnd = function (e) {
        if (!this.touchRect.contains(e.currentTarget.mouseX, e.currentTarget.mouseY)) {
            this.unSelectCards();
            this.off(Laya.Event.MOUSE_MOVE, this, this.onTouchMoved);
            return;
        }
        if (this.touchIndex && this.touchIndex > 0) {
            var view = this.cardsViews[this.touchIndex - 1];
            this.onClickCard(view);
            this.off(Laya.Event.MOUSE_MOVE, this, this.onTouchMoved);
            this.changeArrowByIndex(this.touchIndex - 1);
        }
        // for (var index = 0; index < this.cards.length; index++) {
        //     let card = this.cards[index];
        //     if (card.getBounds().contains(e.currentTarget.mouseX, e.currentTarget.mouseY)) {
        //         log("card index:" + index + " id:" + this.cards[index]._cardID)
        //         this.onClickCard(card)
        //         break;
        //     }
        // }
    };
    BaseHandCardView.prototype.onClickCard = function (card) {
        if (card.y == 0) {
            this.unSelectCards();
            card.upAction();
            Dispatcher.dispatch("mask_same_card", card.card);
            // Laya.Tween.to(card, { y: -30 }, 50);
        }
        else {
            if (BaseGameData.optSeatid == this.seatid) {
                this.onDropCard(card);
            }
        }
    };
    BaseHandCardView.prototype.onDropCard = function (card) {
        // Laya.Tween.to(card, { y: -100 }, 50);
        var point = card.localToGlobal(new laya.maths.Point(0, 0));
        var cardid = card.card;
        var opttype = this._isting ? GameDef.OptType.MJ_TING : GameDef.OptType.MJ_DISCARD;
        this.optCallBack(opttype, cardid);
        // card.removeSelf()
    };
    BaseHandCardView.prototype.addCard = function (cardid, callback) {
        var cardid = cardid || 0;
        var length = this.cardsViews.length;
        var index = length; //+ 2
        var isShowShu = true;
        var showFront = (cardid > 0) ? true : false;
        if (this.dir == 1) {
            if (Utils.checkSeatid(BaseGameData.selfSeatid)) {
                showFront = true;
            }
            isShowShu = true;
        }
        else {
            if (cardid > 0 && cardid != 99) {
                isShowShu = false;
            }
        }
        // if (this.dir == 4){
        //     index = 15 - length
        // }
        var card = new this._cardView(cardid, this.dir, null);
        card.hitArea = new Laya.Rectangle(0, 0, card.width, card.height + 50);
        this.addChildAt(card, index);
        card.pos(length * this._cardWidth + this.wOffset, length * this._cardHeight + this.hOffset);
        this.cardsViews.push(card);
        this.cards.push(cardid);
        if (cardid == BaseGameData.SHIFTER_NUM) {
            // card.showGod()
        }
    };
    BaseHandCardView.prototype.updateCardIndex = function () {
        var length = this.cardsViews.length - 1;
        for (var k in this.cardsViews) {
            var view = this.cardsViews[k];
            this.setChildIndex(view, length - parseInt(k));
        }
    };
    BaseHandCardView.prototype.updatePos = function () {
        if ((this.dir == 1 && Utils.checkSeatid(BaseGameData.selfSeatid)) || BaseGameData.isRecord == 1) {
            this.sortCardsViews();
            this.sortCards(this.cards);
        }
        var catchIndex = -1;
        // let width = this.CARD_WIDTH[this.dir-1]
        // let widthOffset = this.CARD_WIDTH_OFFSET[this.dir-1]
        // let height = this.CARD_HEIGHT[this.dir-1]
        // let heightOffset = this.CARD_HEIGHT_OFFSET[this.dir-1]
        this._isMoveing = true;
        if (BaseGameData.isRecord == 1) {
            for (var k in this.cardsViews) {
                var view = this.cardsViews[k];
                var toX = parseInt(k) * this._cardWidth + this.wOffset;
                var toY = parseInt(k) * this._cardHeight + this.hOffset;
                Laya.Tween.to(view, { x: toX, y: toY }, 20);
                // v:runAction(cc.MoveTo:create(0.2,cc.p((k-1)*CARD_WIDTH[this.dir]+CARD_WIDTH_OFFSET[this.dir],(k-1)*CARD_HEIGHT[this.dir]+CARD_HEIGHT_OFFSET[this.dir])))
                view.bSelected = false;
                if (this.dir == 4) {
                    view.zOrder = 12 - parseInt(k);
                }
                else {
                    view.zOrder = parseInt(k);
                }
            }
        }
        else {
            var cardsNum = this.cardsViews.length;
            for (var k in this.cardsViews) {
                var view = this.cardsViews[k];
                if (this.catch && this.catch == view) {
                    view.bSelected = false;
                    catchIndex = parseInt(k);
                }
                else {
                    // v:runAction(cc.MoveTo:create(0.2,cc.p((k-1)*CARD_WIDTH[this.dir]+CARD_WIDTH_OFFSET[this.dir],(k-1)*CARD_HEIGHT[this.dir]+CARD_HEIGHT_OFFSET[this.dir])))
                    var toX = parseInt(k) * this._cardWidth + this.wOffset;
                    var toY = parseInt(k) * this._cardHeight + this.hOffset;
                    Laya.Tween.to(view, { x: toX, y: toY }, 20);
                    view.bSelected = false;
                }
            }
            if (catchIndex >= 0) {
                if (catchIndex == 0) {
                    Laya.Tween.to(this.catch, { x: this.wOffset }, 20, null, Laya.Handler.create(this, function () {
                        this.catch = null;
                        this._isMoveing = false;
                    }));
                }
                else {
                    TweenUtils.get(this.catch).to({ y: -110 }, 200).to({ x: catchIndex * this._cardWidth + this.wOffset }, 200).to({ y: 0 }, 200, null, Laya.Handler.create(this, function () {
                        this.catch = null;
                        this._isMoveing = false;
                    }));
                }
            }
            // this.touchRect = cc.rect(display.width-RECT_X-#this.cards*TOUCH_CARD_WIDTH, RECT_Y, 100+#this.cards*TOUCH_CARD_WIDTH, TOUCH_CARD_HEIGHT)
            // this.lastTouchTime = nil
        }
    };
    BaseHandCardView.prototype.moveCatch = function (index) {
        this.cardsViews[index] = this.catch;
        this.catch = null;
        this.touchRect = new Laya.Rectangle();
    };
    BaseHandCardView.prototype.moveCardsToRight = function (noAni) {
        var cardsNum = this.cardsViews.length;
        var width = this.CARD_WIDTH[this.dir - 1];
        var widthOffset = this.CARD_WIDTH_OFFSET[this.dir - 1];
        for (var k in this.cardsViews) {
            var view = this.cardsViews[k];
            view.bSelected = false;
            if (parseInt(k) == 0) {
                if (noAni) {
                    view.pos(0, 0);
                }
                else {
                    Laya.Tween.to(view, { x: 0, y: 0 }, 20);
                }
                this.catch = view;
            }
            else {
                if (noAni) {
                    var toX = (parseInt(k) - 1) * this._cardWidth + this.wOffset;
                    var toY = (parseInt(k) - 1) * this._cardHeight + this.hOffset;
                    view.pos(toX, toY);
                }
                else {
                    var toX = (parseInt(k) - 1) * this._cardWidth + this.wOffset;
                    var toY = (parseInt(k) - 1) * this._cardHeight + this.hOffset;
                    Laya.Tween.to(view, { x: toX, y: toY }, 20);
                }
            }
        }
    };
    BaseHandCardView.prototype.removeCards = function (cards, noAni) {
        if (cards.length == 0)
            return;
        this.unSelectSelfCards();
        var index = -1;
        for (var k in cards) {
            var v = cards[k];
            if ((this.dir == 1 && Utils.checkSeatid(BaseGameData.selfSeatid)) || BaseGameData.isRecord == 1) {
                index = this.cards.indexOf(v);
                if (index >= 0) {
                    this.cards.splice(index, 1);
                    var view = this.cardsViews[index];
                    this.cardsViews.splice(index, 1);
                    view.removeSelf();
                }
            }
            else {
                if (this.catch) {
                    this.cardsViews.shift();
                    this.cards.shift();
                    this.catch.removeSelf();
                    this.catch = null;
                }
                else {
                    var view = this.cardsViews[this.cardsViews.length - 1];
                    this.cardsViews.pop();
                    this.cards.pop();
                    if (view)
                        view.removeSelf();
                }
            }
        }
        if (noAni)
            return;
        if (cards.length > 2 || cards.length == 1) {
            this.updatePos();
        }
        else {
            this.moveCardsToRight();
        }
    };
    BaseHandCardView.prototype.removeCard = function (card) {
        // for k,v in pairs(this.cardsViews) do
        // 	v:setVisible(true)
        // 	v:setOpacity(255)
        // end
        if (BaseGameData.isRecord == 0) {
            if ((this.catch && this.catch.card == card) || this.dir != 1 || (this.dir == 1 && !Utils.checkSeatid(BaseGameData.selfSeatid))) {
                var view = this.cardsViews[0];
                this.cardsViews.shift();
                this.cards.shift();
                view.removeSelf();
                view = null;
                this.catch = null;
                return;
            }
        }
        var index = this.cards.indexOf(card);
        if (BaseGameData.isRecord == 0) {
            if (this.dir != 1 || !BaseGameData.selfSeatid) {
                index = this.cardsViews.length;
            }
        }
        if (index >= 0) {
            this.cards.splice(index, 1);
            var view = this.cardsViews[index];
            this.cardsViews.splice(index, 1);
            view.removeSelf();
            this.updatePos();
        }
    };
    BaseHandCardView.prototype.setCatchCard = function (catch_card) {
        if (this.cards.length % 3 == 2) {
            return;
        }
        this.unSelectCards();
        // this.clearCurrentOpt()
        var cardid = catch_card || 0;
        var showFront = false;
        if (cardid > 0 && cardid != 99) {
            showFront = true;
        }
        var isShowShu = true;
        // let scale = (cardid > 0 && cardid != 99) ? this.SHOWCARD_SCALE[this.dir-1] : this.CARD_SCALE[this.dir-1]
        var index = this.cardsViews.length;
        if (this.dir == 1) {
            isShowShu = true;
        }
        else {
            if (cardid > 0 && cardid != 99) {
                isShowShu = false;
            }
        }
        if (this.dir == 2) {
            index = 0;
        }
        var card = new this._cardView(cardid, this.dir, null);
        this.addChildAt(card, index);
        card.pos(0, -30);
        // card.index = this.cards.length
        var cards = [cardid];
        var cardView = [card];
        this.cards = cards.concat(this.cards);
        this.cardsViews = cardView.concat(this.cardsViews);
        var catchCard = card;
        this.catch = catchCard;
        Laya.Tween.to(card, { y: 0 }, 20);
    };
    BaseHandCardView.prototype.shuffleCards = function (callback) {
        var width = this.CARD_WIDTH[this.dir - 1];
        var widthOffset = this.CARD_WIDTH_OFFSET[this.dir - 1];
        var height = this.CARD_HEIGHT[this.dir - 1];
        var heightOffset = this.CARD_HEIGHT_OFFSET[this.dir - 1];
        var callF = Laya.Handler.create(this, function () {
            for (var k in this.cardsViews) {
                var view = this.cardsViews[k];
                view.shuffle();
                // if (view.card == this.SHIFTER_NUM){
                // 	view.hideGod()
                // }
            }
            if (this.dir == 1) {
                this.sortCardsViews();
                this.sortCards(this.cards);
            }
            for (var k in this.cardsViews) {
                var view = this.cardsViews[k];
                Laya.Tween.to(view, { x: parseInt(k) * this._cardWidth + this.wOffset, y: parseInt(k) * this._cardHeight + this.hOffset }, 20);
            }
        });
        // let delay = cc.DelayTime:create(0.4)
        var callF2 = Laya.Handler.create(this, function () {
            for (var k in this.cardsViews) {
                var view = this.cardsViews[k];
                view.shuffle();
                // if (view.card == this.SHIFTER_NUM){
                // 	view.hideGod()
                // }
            }
        });
        var callF3 = Laya.Handler.create(this, function () {
            for (var k in this.cardsViews) {
                var view = this.cardsViews[k];
                view.shuffle();
                if (parseInt(k) == (this.cardsViews.length - 1)) {
                    callback();
                }
                // if (view.card == this.SHIFTER_NUM){
                // 	view.hideGod()
                // }
            }
        });
        TweenUtils.get(this).to({}, 0, null, callF, 400).to({}, 0, null, callF3, 400); //.to({},0,null,callF2,400).to({},0,null,callF2,400).to({},0,null,callF3,400)
    };
    // public showCard( index, callback ){
    // 	let cardView = this.cardsViews[index]
    // 	if (cardView && cardView.front && !cardView.isShow)
    // 		let callF = cca.callFunc(callback)
    // 		card:runAction(cca.seq(cardView:flipAction(), callF))
    // 		cardView.isShow = true
    // 	elseif callback then
    // 		callback()
    // 	end
    // end
    BaseHandCardView.prototype.removeAllCards = function () {
        for (var k in this.cardsViews) {
            var view = this.cardsViews[k];
            view.removeSelf();
            view = null;
        }
        this.cardsViews = [];
        this.cards = [];
    };
    BaseHandCardView.prototype.showAllCards = function (cards) {
        var hasCalled = false;
        this.sortCards(cards);
        this.cards = cards;
        for (var k in this.cardsViews) {
            var view = this.cardsViews[k];
            view.updateFront(cards[k]);
        }
    };
    // public setCardsOpacity( opac )
    // 	let cardViews = self:getCardViews()
    // 	for k,v in pairs(cardViews) do
    // 		v:setOpacity(opac)
    // 	end
    // end
    // public setCardsScale( scale )
    // 	for k,v in pairs(this.cardsViews) do
    // 		v:setScale(scale)
    // 	end
    // end
    BaseHandCardView.prototype.unSelectCards = function () {
        // _tingCardManager:clearAll()
        for (var k in this.cardsViews) {
            var view = this.cardsViews[k];
            view.downAction();
        }
    };
    BaseHandCardView.prototype.unSelectSelfCards = function () {
        for (var k in this.cardsViews) {
            var view = this.cardsViews[k];
            if (view.isSelected()) {
                view.downAction();
            }
        }
    };
    BaseHandCardView.prototype.sortCards = function (cards) {
        var length = cards.length;
        for (var i = 0; i < length - 1; i++) {
            for (var j = i + 1; j < length; j++) {
                if (BaseGameData.SHIFTER_NUM == (cards[i] % 100) || BaseGameData.SHIFTER_NUM == (cards[j] % 100)) {
                    if (BaseGameData.SHIFTER_NUM == (cards[i] % 100) && BaseGameData.SHIFTER_NUM != (cards[j] % 100)) {
                        var a = cards[i];
                        cards[i] = cards[j];
                        cards[j] = a;
                    }
                }
                else if ((cards[i] % 100) < (cards[j] % 100)) {
                    var a = cards[i];
                    cards[i] = cards[j];
                    cards[j] = a;
                }
            }
        }
    };
    BaseHandCardView.prototype.sortCardsViews = function () {
        var length = this.cardsViews.length;
        for (var i = 0; i < length - 1; i++) {
            for (var j = i + 1; j < length; j++) {
                if (BaseGameData.SHIFTER_NUM == (this.cardsViews[i].card % 100) || BaseGameData.SHIFTER_NUM == (this.cardsViews[j].card % 100)) {
                    if (BaseGameData.SHIFTER_NUM == (this.cardsViews[i].card % 100) && BaseGameData.SHIFTER_NUM != (this.cardsViews[j].card % 100)) {
                        var a = this.cardsViews[i];
                        this.cardsViews[i] = this.cardsViews[j];
                        this.cardsViews[j] = a;
                    }
                }
                else if ((this.cardsViews[i].card % 100) < (this.cardsViews[j].card % 100)) {
                    var a = this.cardsViews[i];
                    this.cardsViews[i] = this.cardsViews[j];
                    this.cardsViews[j] = a;
                }
            }
        }
    };
    BaseHandCardView.prototype.updateFlower = function (cards, count) {
        if (cards && cards.length > 0) {
            this.sortCards(cards);
            for (var k in cards) {
                var v = cards[k];
                this.addCard(v, null);
            }
        }
        else {
            for (var i = 0; i < count; i++) {
                this.addCard(0, null);
            }
        }
        if (this.cards.length % 3 == 2) {
            this.moveCardsToRight(true);
        }
        if (this.dir == 4) {
            this.updateCardIndex();
        }
    };
    BaseHandCardView.prototype.updateHandCards = function (cards, count, optcallback) {
        // if (this.cards.length > 0){
        // 	return
        // }
        if (this.cardsViews.length > 0)
            return;
        if (cards && cards.length > 0) {
            this.sortCards(cards);
            for (var k in cards) {
                var v = cards[k];
                this.addCard(v, optcallback);
            }
        }
        else {
            for (var i = 0; i < count; i++) {
                this.addCard(0, null);
            }
        }
        if (this.cards.length % 3 == 2) {
            this.moveCardsToRight(true);
        }
        if (this.dir == 4) {
            this.updateCardIndex();
        }
    };
    BaseHandCardView.prototype.getCardSizeAndPos = function () {
        var x = (this.cards.length - 1) * this.CARD_WIDTH[this.dir] + this.CARD_WIDTH_OFFSET[this.dir];
        var y = (this.cards.length - 1) * this.CARD_HEIGHT[this.dir] + this.CARD_HEIGHT_OFFSET[this.dir];
        var width = this.CARD_WIDTH[this.dir];
        var height = this.CARD_HEIGHT[this.dir];
        return { x: x, y: y, width: width, height: height };
    };
    // public clearCurrentOpt()
    // 	if _gameController.moveCard then
    // 		_gameController.moveCard:removeSelf()
    // 		_gameController.moveCard = nil
    // 		if this.touchIndex then
    // 			this.cardsViews[#this.cards+1-this.touchIndex]:setVisible(true)
    // 		end
    // 		this.cardX,this.cardY,this.beginX,this.beginY = nil,nil,nil,nil
    // 	end
    // end
    // public clearMoveCard()
    // 	if _gameController.moveCard then
    // 		_gameController.moveCard:removeSelf()
    // 		_gameController.moveCard = nil
    // 	end
    // end
    BaseHandCardView.prototype.clearUI = function () {
        for (var k in this.cardsViews) {
            var view = this.cardsViews[k];
            view.removeSelf();
            view = null;
        }
        this.cardsViews = [];
        this.cards = [];
    };
    BaseHandCardView.prototype.showArror = function () {
        if (this.dir != 1)
            return;
        for (var k in this.cardsViews) {
            var view = this.cardsViews[k];
            var index = BaseGameData.tingCards.indexOf((view.card % 100));
            if (index >= 0) {
                view.view._ting.visible = true;
            }
            else {
                view.view._ting.visible = false;
            }
        }
    };
    BaseHandCardView.prototype.clearArror = function () {
        if (this.dir != 1)
            return;
        for (var k in this.cardsViews) {
            var view = this.cardsViews[k];
            var index = BaseGameData.tingCards.indexOf(view.card % 100);
            if (view) {
                view.view._ting.visible = false;
            }
        }
    };
    BaseHandCardView.prototype.changeArrowByIndex = function (k) {
        if (!BaseGameData.optSeatid || BaseGameData.optSeatid != BaseGameData.selfSeatid) {
            return;
        }
        BaseTingCardManager.instance.clearAll();
        if (this.cardsViews && this.cardsViews[k]) {
            if (this.cardsViews[k].bSelected) {
                BaseTingCardManager.instance.tingCard(this.cardsViews[k].card % 100);
            }
        }
    };
    // public tingCard()
    // 	let info = _gameDataMgr:tingCard()
    // 	if not info then return end
    // 	this.arrows = {}
    // 	for k,v in ipairs(this.cardsViews) do
    // 		for i,j in pairs(info) do
    // 			if i == v.card then
    // 				v:showArraw()
    // 			end
    // 		end
    // 	end
    // end
    BaseHandCardView.prototype.clearArrow = function () {
        for (var k in this.cardsViews) {
            var view = this.cardsViews[k];
            view.hideArraw();
        }
        // _tingCardManager:clearAll()
    };
    BaseHandCardView.prototype.clearTouch = function () {
        for (var k in this.cardsViews) {
            var view = this.cardsViews[k];
            view.view._mask.visible = true;
        }
        Dispatcher.off("handview", this, this.onMouseDown);
    };
    return BaseHandCardView;
}(Laya.View));
//# sourceMappingURL=BaseHandCardView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BaseHoldCardView = /** @class */ (function (_super) {
    __extends(BaseHoldCardView, _super);
    function BaseHoldCardView(seatid, dir) {
        var _this = _super.call(this) || this;
        _this.cardsView = [];
        _this.cards = [];
        _this.init(seatid, dir);
        if (dir == 1) {
            // Laya.stage.on(Laya.Event.RESIZE, this, this.onResize);
        }
        Dispatcher.on("mask_same_card", _this, _this.markSameCard);
        Dispatcher.on("clear_same_card", _this, _this.clearMarkCard);
        return _this;
    }
    BaseHoldCardView.prototype.onResize = function () {
        if (Laya.stage.width / Laya.stage.height < 8 / 5 && this.dir == 1) {
            this._scale = Laya.stage.width / 1024;
        }
        else {
            this._scale = 1;
        }
        var cards = this.cards;
        this.cards = [];
        this.cardsView = [];
        this.updateView(cards);
    };
    BaseHoldCardView.prototype.init = function (seatid, dir) {
        this.seatid = seatid;
        this.dir = dir;
        this.posX = 0;
        this.posY = 0;
        this._scale = 1;
        // if(Laya.stage.width/Laya.stage.height < 8/5 && dir == 1){
        //     this._scale = Laya.stage.width/1024
        // }
        if (dir == 1) {
            this.height = 72;
        }
    };
    BaseHoldCardView.prototype.getHoldModel = function (target_dir) {
        switch (this.dir) {
            case 1:
                if (target_dir == 2) {
                    return ui.mj.HoldCard.Card_2_1UI;
                }
                else if (target_dir == 3) {
                    return ui.mj.HoldCard.Card_3_1UI;
                }
                else if (target_dir == 4) {
                    return ui.mj.HoldCard.Card_4_1UI;
                }
                else if (target_dir == 1) {
                    return ui.mj.HoldCard.Card_3_1UI;
                }
            case 2:
                if (target_dir == 1) {
                    return ui.mj.HoldCard.Card_1_2UI;
                }
                else if (target_dir == 3) {
                    return ui.mj.HoldCard.Card_3_2UI;
                }
                else if (target_dir == 4) {
                    return ui.mj.HoldCard.Card_4_2UI;
                }
                else if (target_dir == 2) {
                    return ui.mj.HoldCard.Card_4_2UI;
                }
            case 3:
                if (target_dir == 1) {
                    return ui.mj.HoldCard.Card_1_3UI;
                }
                else if (target_dir == 2) {
                    return ui.mj.HoldCard.Card_2_3UI;
                }
                else if (target_dir == 4) {
                    return ui.mj.HoldCard.Card_4_3UI;
                }
                else if (target_dir == 3) {
                    return ui.mj.HoldCard.Card_1_3UI;
                }
            case 4:
                if (target_dir == 1) {
                    return ui.mj.HoldCard.Card_1_4UI;
                }
                else if (target_dir == 2) {
                    return ui.mj.HoldCard.Card_2_4UI;
                }
                else if (target_dir == 3) {
                    return ui.mj.HoldCard.Card_3_4UI;
                }
                else if (target_dir == 4) {
                    return ui.mj.HoldCard.Card_2_4UI;
                }
        }
    };
    BaseHoldCardView.prototype.addHoldCard = function (info) {
        var target_dir = Utils.getDir(info.fromSeatid);
        console.log("info.fromSeatid" + info.fromSeatid + "target_dir" + target_dir + "this.dir" + this.dir + "selfseatid" + BaseGameData.selfSeatid);
        var view = this.getHoldModel(target_dir);
        var hold_card = new view();
        hold_card.scale(this._scale, this._scale);
        this.addChild(hold_card);
        hold_card.pos(this.posX, this.posY);
        hold_card.zOrder = this.cardsView.length + 1;
        if (this.dir == 1) {
            this.width = 400;
            this.posX = this.posX + hold_card.width + 10;
        }
        else if (this.dir == 2) {
            this.width = 36;
            this.posY = this.posY - hold_card.height - 1;
            hold_card.zOrder = 5 - this.cards.length;
        }
        else if (this.dir == 3) {
            this.width = 360;
            this.posX = this.posX - hold_card.width - 6;
        }
        else if (this.dir == 4) {
            this.width = 36;
            this.posY = this.posY + hold_card.height + 5;
        }
        // for(var j in info.cards){
        //     let v = info.cards[j]
        //     hold_card["card_"+(parseInt(j)+1)]._front.skin = "card/"+ v + ".png"
        // }
        var cards = info.cards;
        console.info(cards);
        if (info.opttype == GameDef.OptType.MJ_CHI) {
            // if(target_dir == 2){
            // }else if(target_dir == 3){
            //     cards = [cards[0],cards[2],cards[1]]
            // }else if(target_dir == 4){
            //     cards = [cards[2],cards[0],cards[1]]
            // }
            cards = [cards[2], cards[0], cards[1]];
        }
        console.log("chipenggang ============================");
        console.info(cards);
        for (var i = 0; i < 4; i++) {
            var v = cards[i];
            if (v) {
                hold_card["card_" + (i + 1)]._bg.skin = "card/" + hold_card["card_" + (i + 1)].name + "/" + (v % 100) + ".png";
            }
            else if (v == 0) {
                hold_card["card_" + (i + 1)]._back.visible = true;
            }
            else {
                hold_card["card_" + (i + 1)].visible = false;
            }
            // if (info.opttype == GameDef.OptType.MJ_ANGANG && i < 3){
            //     hold_card["card_"+(i+1)]._back.visible = true
            // }
            if (info.opttype == GameDef.OptType.MJ_ANGANG && BaseGameData.isGameing) {
                hold_card["card_" + (i + 1)]._back.visible = true;
                if (i == 3 && this.dir == 1) {
                    hold_card["card_" + (i + 1)]._back.visible = false;
                }
            }
        }
        this.cardsView.push(hold_card);
        this.cards.push(info);
        // if(this.dir == 2){
        //     this.updateIndex()
        // }
    };
    BaseHoldCardView.prototype.updateIndex = function () {
        for (var k in this.cardsView) {
            var view = this.cardsView[k];
            this.setChildIndex(view, this.cards.length - 1 - parseInt(k));
        }
    };
    BaseHoldCardView.prototype.updateView = function (cardsInfo) {
        this.removeChildren();
        this.posX = 0;
        this.posY = 0;
        for (var k in cardsInfo) {
            var info = cardsInfo[k];
            this.addHoldCard(info);
        }
    };
    BaseHoldCardView.prototype.clearUI = function () {
        for (var k in this.cardsView) {
            var view = this.cardsView[k];
            view.removeSelf();
            view = null;
        }
        this.cardsView = [];
        this.cards = [];
    };
    BaseHoldCardView.prototype.pengGang = function (card) {
        for (var k in this.cards) {
            var info = this.cards[k];
            if (info.opttype == GameDef.OptType.MJ_PENG) {
                for (var j in info.cards) {
                    if (info.cards[j] % 100 == card % 100) {
                        var view = this.cardsView[k];
                        view["card_4"]._bg.skin = "card/" + view["card_4"].name + "/" + (card % 100) + ".png";
                        view["card_4"].visible = true;
                        info.opttype = GameDef.OptType.MJ_PENGGANG;
                        return;
                    }
                }
            }
        }
    };
    BaseHoldCardView.prototype.getHoldPos = function () {
        var pos = this.localToGlobal(new laya.maths.Point(0, 0));
        if (this.dir == 1) {
            pos.x = pos.x + this.width;
        }
        else if (this.dir == 2) {
            pos.y = pos.y - this.height;
        }
        else if (this.dir == 3) {
            pos.x = pos.x - this.width;
        }
        else if (this.dir == 4) {
            pos.y = pos.y + this.height;
        }
        return pos;
    };
    BaseHoldCardView.prototype.markSameCard = function (card) {
        for (var k in this.cards) {
            var v = this.cards[k];
            var cards = v.cards;
            if (v.opttype == GameDef.OptType.MJ_CHI) {
                // if(target_dir == 2){
                // }else if(target_dir == 3){
                //     cards = [cards[0],cards[2],cards[1]]
                // }else if(target_dir == 4){
                //     cards = [cards[2],cards[0],cards[1]]
                // }
                cards = [cards[2], cards[0], cards[1]];
            }
            for (var i in cards) {
                var m = cards[i];
                if (m % 100 == card % 100) {
                    this.cardsView[k]["card_" + (parseInt(i) + 1)]._mask.visible = true;
                }
                else {
                    this.cardsView[k]["card_" + (parseInt(i) + 1)]._mask.visible = false;
                }
            }
        }
    };
    BaseHoldCardView.prototype.clearMarkCard = function () {
        for (var k in this.cards) {
            var v = this.cards[k];
            for (var i in v.cards) {
                this.cardsView[k]["card_" + (parseInt(i) + 1)]._mask.visible = false;
            }
        }
    };
    return BaseHoldCardView;
}(Laya.View));
//# sourceMappingURL=BaseHoldCardView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BaseMjSmallEnd = /** @class */ (function (_super) {
    __extends(BaseMjSmallEnd, _super);
    function BaseMjSmallEnd() {
        var _this = _super.call(this) || this;
        _this.signList = ["+", "-", "*", "/"];
        _this["name"] = "BaseMjSmallEnd";
        return _this;
    }
    BaseMjSmallEnd.prototype.onSort = function (a, b) {
        if (BaseGameData.winDetailObj[a.seatid] && !BaseGameData.winDetailObj[b.seatid])
            return 1;
        if (!BaseGameData.winDetailObj[a.seatid] && BaseGameData.winDetailObj[b.seatid])
            return -1;
        if (a.winScore > b.winScore)
            return 1;
        else
            return -1;
    };
    BaseMjSmallEnd.prototype.show = function (data, data1, data2) {
        this.addListeners();
        this.anchorX = 0;
        this.anchorY = 0;
        //this.scale(0.9,0.9)
        //this.y += 20
        //this.x += 20 
        this._bg.anchorX = 0.5;
        this._bg.anchorY = 0.5;
        //this._bg.scale(100, 100)
        this._data = data;
        this._data.sort(this.onSort);
        this._endType = data1;
        this._winType = data2;
        var index = 1;
        var posX = 40;
        var posY = BaseGameData.maxPlayer * 130 + 10;
        this._bg.removeChildren();
        if (this._winType == 0) {
            this._liuju.visible = true;
            this._lose.visible = false;
            this._win.visible = false;
        }
        else {
            this._liuju.visible = false;
        }
        for (var i = 1; i <= 4; i++) {
            var v = this.getViewBySeatId(i);
            v.visible = false;
        }
        for (var k in this._data) {
            var v = this._data[k];
            if (v.winScore <= 0) {
                if (!BaseGameData.winDetailObj[v.seatid]) {
                    var view = this.addLoseItem(BaseGameData.getPlayerDataBySeatid(v.seatid), v.winScore);
                    view.visible = true;
                    // this._bg.addChild(view)
                    // view.pos(posX,posY-view.height-10)
                    // posY = view.y
                }
            }
            else {
                var view = this.addWinItem(BaseGameData.getPlayerDataBySeatid(v.seatid), v.winScore);
                view.visible = true;
            }
            if (this._winType && v.seatid === BaseGameData.selfSeatid) {
                if (v.winScore <= 0) {
                    this._lose.visible = true;
                    this._win.visible = false;
                }
                else {
                    this._lose.visible = false;
                    this._win.visible = true;
                }
            }
        }
        //this.scaleMode = Laya.Stage.SCALE_FIXED_HEIGHT
    };
    BaseMjSmallEnd.prototype.getHoldModel = function (target_dir) {
        if (target_dir == 2) {
            return ui.mj.HoldCard.Card_2_1UI;
        }
        else if (target_dir == 3) {
            return ui.mj.HoldCard.Card_3_1UI;
        }
        else if (target_dir == 4) {
            return ui.mj.HoldCard.Card_4_1UI;
        }
        else if (target_dir == 1) {
            return ui.mj.HoldCard.Card_3_1UI;
        }
    };
    BaseMjSmallEnd.prototype.getDir = function (seatid) {
        var dirList = [
            [[1]],
            [[1, 3], [3, 1]],
            [[1, 2, 4], [4, 1, 2], [2, 4, 1]],
            [[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]
        ];
        var dir = seatid;
        if (!BaseGameData.winSeatid) {
            return dirList[BaseGameData.maxPlayer - 1][0][seatid - 1];
        }
        return dirList[BaseGameData.maxPlayer - 1][BaseGameData.winSeatid - 1][seatid - 1];
    };
    BaseMjSmallEnd.prototype.addHoldCard = function (info) {
        var target_dir = this.getDir(info.fromSeatid);
        var view = this.getHoldModel(target_dir);
        var hold_card = new view();
        for (var i = 0; i < 4; i++) {
            var v = info.cards[i];
            if (v) {
                hold_card["card_" + (i + 1)]._bg.skin = "card/" + hold_card["card_" + (i + 1)].name + "/" + (v % 100) + ".png";
            }
            else {
                hold_card["card_" + (i + 1)].visible = false;
            }
        }
        return hold_card;
    };
    BaseMjSmallEnd.prototype.nextRound = function () {
        if (GameConfig.IS_MATCH) {
            this.hide();
            if (DialogManager.instance.hasDialog("MATCH_WAIT")) {
                DialogManager.instance._dialogList["MATCH_WAIT"].visible = true;
            }
        }
        else if (this._endType) {
            this.hide();
            TableEndCtrl.instance.show(BaseGameData.tableEndInfo);
        }
        else {
            server.playerReadyReq();
            if (this._endType) {
                DialogManager.instance.removeDialog("GAME_END");
                TableEndCtrl.instance.show(BaseGameData.tableEndInfo);
            }
            else {
                Laya.timer.once(100, this, function () {
                    DialogManager.instance.removeDialog("GAME_END");
                });
            }
        }
    };
    BaseMjSmallEnd.prototype.getViewBySeatId = function (seatId) {
        switch (seatId) {
            case 1: return this._p0;
            case 2: return this._p1;
            case 3: return this._p2;
            case 4: return this._p3;
        }
        return null;
    };
    BaseMjSmallEnd.prototype.strScore = function (score) {
        if (0 < score) {
            return "+" + score;
        }
        return "" + score;
    };
    BaseMjSmallEnd.prototype.addLoseItem = function (player, score, ViewClass) {
        if (ViewClass === void 0) { ViewClass = BaseCardView; }
        var view = this.getViewBySeatId(player.seatid);
        if (!view)
            return;
        //头像设置
        var head = new HeadUI();
        view._head.addChild(head);
        head.setImageBounds(73, 73);
        head.getInfo(player.uid || 0);
        head._labInfo.visible = false;
        head._labName.visible = false;
        view._dlg_win.visible = false;
        //房主设置
        view._owner.visible = player.seatid == BaseGameData.owner;
        view._score.text = this.strScore(score);
        //名称设置
        view._name.text = Utils.getFitNickName(player.nickname, 10);
        var index = 1;
        var posX = 10;
        var posY = 0;
        for (var j in player.holdCards) {
            var holdInfo = player.holdCards[j];
            var holdCard = this.addHoldCard(holdInfo);
            view._card.addChild(holdCard);
            holdCard.scale(0.5 * 1.5, 0.5 * 1.5);
            holdCard.pos(posX, posY + 12);
            posX = posX + holdCard.width * 0.5 * 1.5 + 5;
            console.log("posX======================" + posX);
        }
        var cards = player.handCards;
        this.sortCards(cards);
        for (var m = cards.length - 1; m >= 0; m--) {
            var cardid = player.handCards[m];
            var handCard = new ViewClass(cardid, 1, null);
            handCard.scale(0.5 * 1.5, 0.5 * 1.5);
            view._card.addChild(handCard);
            handCard.pos(posX, posY);
            posX = posX + 35 * 1.5;
        }
        view._tag_fc.visible = false;
        view._tag_hu.visible = false;
        return view;
    };
    BaseMjSmallEnd.prototype.sortCards = function (cards) {
        var length = cards.length;
        for (var i = 0; i < length - 1; i++) {
            for (var j = i + 1; j < length; j++) {
                if (BaseGameData.SHIFTER_NUM == (cards[i] % 100) || BaseGameData.SHIFTER_NUM == (cards[j] % 100)) {
                    if (BaseGameData.SHIFTER_NUM == (cards[i] % 100) && BaseGameData.SHIFTER_NUM != (cards[j] % 100)) {
                        var a = cards[j];
                        cards[j] = cards[i];
                        cards[i] = a;
                    }
                }
                else if ((cards[i] % 100) < (cards[j] % 100)) {
                    var a = cards[i];
                    cards[i] = cards[j];
                    cards[j] = a;
                }
            }
        }
    };
    BaseMjSmallEnd.prototype.addWinItem = function (player, score, ViewClass) {
        if (ViewClass === void 0) { ViewClass = BaseCardView; }
        var view = this.getViewBySeatId(player.seatid);
        if (!view)
            return;
        //头像设置
        var head = new HeadUI();
        view._head.addChild(head);
        head.setImageBounds(73, 73);
        head.getInfo(player.uid || 0);
        head._labInfo.visible = false;
        head._labName.visible = false;
        view._dlg_win.visible = true;
        //房主设置
        view._owner.visible = player.seatid == BaseGameData.owner;
        view._score.text = this.strScore(score);
        //名称设置
        view._name.text = Utils.getFitNickName(player.nickname, 10);
        var index = 1;
        var posX = 10;
        var posY = 0;
        var cardScale = 1.5;
        for (var j in player.holdCards) {
            var holdInfo = player.holdCards[j];
            var holdCard = this.addHoldCard(holdInfo);
            view._card.addChild(holdCard);
            holdCard.scale(0.5 * cardScale, 0.5 * cardScale);
            holdCard.pos(posX, posY + 12);
            posX = posX + holdCard.width * 0.5 * cardScale + 5;
            console.log("posX======================" + posX);
        }
        var cards = player.handCards;
        this.sortCards(cards);
        for (var m = cards.length - 1; m >= 0; m--) {
            var cardid = player.handCards[m];
            var handCard = new ViewClass(cardid, 1, null);
            handCard.scale(0.5 * cardScale, 0.5 * cardScale);
            view._card.addChild(handCard);
            handCard.pos(posX, posY);
            posX = posX + 35 * cardScale;
        }
        if (BaseGameData.winSeatid) {
            var handCard = new ViewClass(BaseGameData.winCard, 1, null);
            handCard.scale(0.5 * cardScale, 0.5 * cardScale);
            view._card.addChild(handCard);
            handCard.pos(posX + 15 * cardScale, posY);
            posX = posX + 15 * cardScale;
        }
        //let arr = BaseGameData.winDetailObj[player.seatid]
        // let toX = 10
        // let total = 1
        // for (var k in arr) {
        //     let v = arr[k]
        //     let detail = this.addDetail(v.name, v.value, v.sign)
        //     view._detail.addChild(detail)
        //     detail.x = toX
        //     toX = detail.width + detail.x + 10
        //     if (v.sign == 3) {
        //         total = total * v.value
        //     }
        // }
        // let totalfan = new Laya.Label(String(total))
        // totalfan.font = "font_num_8"
        // view._card.addChild(totalfan)
        // totalfan.pos(posX + 38, posY + 19)
        // let img = new Laya.Image("gameEnd/total_fan.png")
        // view._card.addChild(img)
        // img.pos(posX + 38 + totalfan.width, posY + 18)
        // view._pao.visible = false
        // if (this._winType == GameDef.MJ_WIN_TYPE.WIN_ALL) {
        //     view._hu.skin = "gameEnd/zimo.png"
        // } else {
        //     view._hu.skin = "gameEnd/pinghu.png"
        // }
        // if (BaseGameData.gameType == GameDef.GAME_TYPE.SHANXI_MJ) {
        //     view._pao.skin = "card/tag_" + player.pao + ".png"
        // } else {
        //     view._pao.visible = false
        // }
        return view;
    };
    BaseMjSmallEnd.prototype.addDetail = function (type, value, sign) {
        var view = new Laya.View();
        var typeImg = new Laya.Image("gameEnd/" + type + ".png");
        view.addChild(typeImg);
        var text = this.signList[sign - 1] + value;
        if (value < 0) {
            text = value;
        }
        var num = new Laya.Label(text);
        num.font = "font_num_5";
        view.addChild(num);
        num.x = typeImg.width + 10;
        num.y = 3;
        return view;
    };
    BaseMjSmallEnd.prototype.updateListResult = function (cell, index) {
        cell.updata();
    };
    BaseMjSmallEnd.prototype.hide = function () {
        if (this._endType) {
            DialogManager.instance.removeDialog("GAME_END");
            TableEndCtrl.instance.show(BaseGameData.tableEndInfo);
        }
        else {
            Laya.timer.once(100, this, function () {
                // if (!BaseGameData.isGameing) {
                //     Dispatcher.dispatch(EventNames.CHECK_READY)
                // }
                DialogManager.instance.removeDialog("GAME_END");
            });
        }
    };
    BaseMjSmallEnd.prototype.updateMatchRoundEnd = function () {
        this._next.skin = "gameEnd/showwait.png";
    };
    BaseMjSmallEnd.prototype.addListeners = function () {
        this._back_desk.on(Laya.Event.CLICK, this, this.onTouch);
        this._back_hall.on(Laya.Event.CLICK, this, this.onTouch);
        this._next.on(Laya.Event.CLICK, this, this.nextRound);
        if (this._endType) {
            this._next.visible = false;
            this._back_hall.visible = true;
        }
        else {
            this._back_hall.visible = false;
        }
    };
    BaseMjSmallEnd.prototype.onTouch = function (e) {
        if (e) {
            switch (e.target) {
                case this._back_desk:
                    this.hide();
                    break;
                case this._back_hall:
                    break;
                case this._next:
                    break;
            }
        }
    };
    return BaseMjSmallEnd;
}(ui.mj.SmallEndUI));
//# sourceMappingURL=BaseMjSmallEnd.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BaseOptChoiceView = /** @class */ (function (_super) {
    __extends(BaseOptChoiceView, _super);
    function BaseOptChoiceView(callback) {
        var _this = _super.call(this) || this;
        _this.OPT_TYPE_RES_NORMAL = ["", "opt/button_1_1.png", "opt/button_2_1.png",
            "opt/button_3_1.png", "opt/button_3_1.png", "opt/button_3_1.png",
            "opt/button_6_1.png", "opt/button_4_1.png"];
        _this.OPT_TYPE_RES_PRESSED = ["", "button/button_1_2.png", "button/button_2_2.png", "button/button_3_2.png",
            "button/button_3_2.png", "button/button_3_2.png", "button/button_6_2.png",
            "button/button_4_2.png"];
        _this._buttons = [];
        _this._choiceType = {};
        _this._pengCards = [];
        _this._pengCardsType = [];
        // this.init()
        if (callback) {
            _this.optCallBack = callback;
        }
        return _this;
    }
    BaseOptChoiceView.prototype.showOptChoice = function (opt) {
        //opt = [{opttype : 2,cards : [1,3,2,4,5,6]},{opttype : 3,cards : [2]},{opttype = 6,cards = [2]},{opttype = 4,cards = [3]}]
        if (!this._optNode) {
            this._optNode = new Laya.Sprite();
            this.addChild(this._optNode);
            this._optNode.pos(0, 0);
        }
        this._buttons = [];
        this._choiceType = {};
        this._pengCards = [];
        this._pengCardsType = [];
        var callbacks = [this.ChiChoice, this.PengChoice, this.GangChoice, this.GangChoice, this.GangChoice, this.TingChoice, this.HuChoice, this.QiChoice];
        var cancelButton = new Laya.Image("opt/button_5_1.png");
        this._optNode.addChild(cancelButton);
        cancelButton.on(Laya.Event.CLICK, this, this.QiChoice);
        // EventManager.instance.registerOnObject(this, cancelButton, Laya.Event.CLICK, this, this.QiChoice);
        var offset = 1;
        for (var k in opt) {
            var v = opt[k];
            if (v.opttype > GameDef.OptType.MJ_DRAW && v.opttype < GameDef.OptType.MJ_MISS_HU) {
                var _image = this.OPT_TYPE_RES_NORMAL[v.opttype - 1];
                this._choiceType[v.opttype] = v.cards;
                if (v.opttype == GameDef.OptType.MJ_MNGANG || v.opttype == GameDef.OptType.MJ_ANGANG || v.opttype == GameDef.OptType.MJ_PENGGANG) {
                    if (this._pengCards.length == 0) {
                        var btn = new Laya.Image(_image);
                        this._optNode.addChild(btn);
                        btn.pos(-120 * offset, 0);
                        btn.on(Laya.Event.CLICK, this, callbacks[v.opttype - 2]);
                        // EventManager.instance.registerOnObject(this, btn, Laya.Event.CLICK, this, callbacks[v.opttype-2]);
                        this._buttons.push(btn);
                        // this._buttons[#self.buttons+1] = ht.ui.HTPushButton.new(images):addTo(self.optNode):pos(-120*offset,0):onButtonClicked(handler(self, callbacks[v.opttype-1]))
                        offset = offset + 1;
                    }
                    for (var i in v.cards) {
                        var card = v.cards[i];
                        this._pengCards.push(card);
                        this._pengCardsType.push(v.opttype);
                    }
                }
                else {
                    var btn = new Laya.Image(_image);
                    this._optNode.addChild(btn);
                    btn.pos(-120 * offset, 0);
                    btn.on(Laya.Event.CLICK, this, callbacks[v.opttype - 2]);
                    this._buttons.push(btn);
                    offset = offset + 1;
                    if (v.opttype == GameDef.OptType.MJ_TING) {
                        this._tingBtn = btn;
                        BaseGameData.tingCards = [];
                        BaseGameData.tingInfo = {};
                        var length_1 = 0;
                        var i_1 = 0;
                        var tingKey = void 0;
                        var count = 0;
                        var winIndex = void 0;
                        for (var j in v.cards) {
                            var info = v.cards[j];
                            if (j == "0" || parseInt(j) == count + length_1 + 1) {
                                length_1 = info;
                                i_1 = 0;
                                count = parseInt(j);
                            }
                            else if (parseInt(j) < count + length_1 + 1) {
                                if (i_1 == 0) {
                                    tingKey = info % 100;
                                    BaseGameData.tingCards.push(tingKey);
                                    BaseGameData.tingInfo[tingKey] = [];
                                }
                                else {
                                    BaseGameData.tingInfo[tingKey].push(info);
                                }
                                i_1++;
                            }
                        }
                        BaseHandCardManager.instance.showArror(BaseGameData.selfSeatid);
                    }
                }
                // if (v.opttype == MJ_TING) then
                // 	_handCardManager:tingCard()
                // end
            }
        }
    };
    BaseOptChoiceView.prototype.hideButtons = function () {
        this._optNode.visible = false;
    };
    BaseOptChoiceView.prototype.ChiChoice = function () {
        console.log("chi==========================");
        BaseTingCardManager.instance.clearAll();
        if (this._choiceType[GameDef.OptType.MJ_CHI].length == 3) {
            this.optCallBack(GameDef.OptType.MJ_CHI, this._choiceType[GameDef.OptType.MJ_CHI]);
            this.clearUI();
        }
        else {
            this.hideButtons();
            this._choice = new ChoiceView(this._choiceType[GameDef.OptType.MJ_CHI], GameDef.OptType.MJ_CHI, this.optCallBack, this.cancelChoice.bind(this));
            this.addChild(this._choice);
            this._choice.pos(0, 0);
        }
    };
    BaseOptChoiceView.prototype.PengChoice = function () {
        this.clearOpt();
        this.optCallBack(GameDef.OptType.MJ_PENG, [this._choiceType[GameDef.OptType.MJ_PENG][0]]);
    };
    BaseOptChoiceView.prototype.GangChoice = function () {
        BaseTingCardManager.instance.clearAll();
        this.clearChoice();
        this.hideButtons();
        if (this._pengCards.length > 1) {
            this._choice = new ChoiceView(this._pengCards, this._pengCardsType, this.optCallBack, this.cancelChoice.bind(this));
            this.addChild(this._choice);
            this._choice.pos(0, 0);
        }
        else {
            this.optCallBack(this._pengCardsType[0], this._pengCards);
            this.clearUI();
        }
    };
    BaseOptChoiceView.prototype.TingChoice = function () {
        BaseTingCardManager.instance.clearAll();
        this.clearChoice();
        this.hideButtons();
        if (BaseGameData.tingCards.length > 1) {
            this.ting = true;
            this._choice = new ChoiceView([], GameDef.OptType.MJ_TING, function () {
                Dispatcher.dispatch("choose_ting", [true]);
            }.bind(this), this.cancelChoice.bind(this));
            this.addChild(this._choice);
            this._choice.pos(0, 0);
            Dispatcher.dispatch("choose_ting", [true]);
        }
        else {
            this.optCallBack(GameDef.OptType.MJ_TING, BaseGameData.tingCards);
        } // _handCardManager:darkTingTiles(_gameDataMgr.selfInfo.seatid, true)
        // self.choice = ChoiceView.new(self.choiceType[MJ_TING],MJ_TING):addTo(self,20):pos(0,100)
        // self.ting = true
        // _gameDataMgr:setTingOpt(_gameDataMgr.selfInfo.seatid)
    };
    BaseOptChoiceView.prototype.HuChoice = function () {
        this.optCallBack(GameDef.OptType.MJ_HU, this._choiceType[GameDef.OptType.MJ_HU]);
        this.clearUI();
    };
    BaseOptChoiceView.prototype.QiChoice = function () {
        console.log("----------------------------------------");
        this.optCallBack(GameDef.OptType.MJ_QI);
        this.clearUI();
    };
    BaseOptChoiceView.prototype.clearChoice = function () {
        if (this._choice) {
            this._choice.removeSelf();
            this._choice = null;
        }
    };
    BaseOptChoiceView.prototype.clearUI = function () {
        this.clearChoice();
        this.clearOpt();
    };
    BaseOptChoiceView.prototype.clearOpt = function () {
        if (this._optNode) {
            this._optNode.removeSelf();
            this._optNode = null;
        }
    };
    BaseOptChoiceView.prototype.cancelChoice = function () {
        if (this._buttons.length > 1 || this.ting) {
            if (this.ting) {
                this.ting = null;
                Dispatcher.dispatch("choose_ting", [false]);
                // _gameDataMgr:clearTingOpt(_gameDataMgr.selfInfo.seatid)
                // this.optCallBack(GameDef.OptType.MJ_TING,[0])
                // _handCardManager:normalTingTiles()
            }
            this.clearChoice();
            this._optNode.visible = true;
        }
        else {
            this.optCallBack(GameDef.OptType.MJ_QI);
            this.clearUI();
        }
    };
    return BaseOptChoiceView;
}(Laya.View));
//# sourceMappingURL=BaseOptChoiceView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BaseTingCardView = /** @class */ (function (_super) {
    __extends(BaseTingCardView, _super);
    function BaseTingCardView(info) {
        var _this = _super.call(this) || this;
        _this.HEIGHT = 132;
        _this.init(info);
        return _this;
    }
    BaseTingCardView.prototype.init = function (info) {
        if (!info)
            return;
        this.info = info;
        if (this.info.length < 34) {
            this.num = this.info.length;
            // this.width = this.num > 4 ? 3*85 : (this.num-1)*85
            var height = this.num > 4 ? (Math.ceil(this.num / 4)) * this.HEIGHT : this.HEIGHT;
            var width = this.num > 4 ? 4 * 170 + 100 : this.num * 170 + 100;
            this.bg = new Laya.Image("opt/card_border.png");
            this.bg.sizeGrid = "10,10,10,10,0";
            this.addChild(this.bg);
            this.bg.width = width;
            this.bg.height = height;
            this.tingCard();
        }
        else {
            this.bg = new Laya.Image("opt/card_border.png");
            this.bg.sizeGrid = "10,10,10,10,0";
            this.bg.width = 280;
            this.bg.height = this.HEIGHT;
            this.width = 280;
            this.height = this.HEIGHT;
            this.addChild(this.bg);
            this.tingAllCard();
        }
    };
    BaseTingCardView.prototype.tingAllCard = function () {
        var hu = new Laya.Image("ting/hu.png");
        this.bg.addChild(hu);
        hu.x = 20;
        hu.centerY = 0;
        var view = new ui.mj.TingAllUI();
        // display.newSprite("ting/hu.png"):addTo(this.bg):pos(this.size.width/2-80,this.size.height/2)
        this.bg.addChild(view);
        view.pos(this.width / 2 - 20, 10);
        // display.newSprite("ting/all.png"):addTo(this.bg):pos(this.size.width/2,this.size.height/2):setScale(0.6)
        var num = 0;
        for (var k in this.info) {
            var v = this.info[k];
            num = num + BaseGameData.getLeftCardCount(v);
        }
        view._num.text = String(num);
    };
    BaseTingCardView.prototype.tingCard = function () {
        var hu = new Laya.Image("ting/hu.png");
        this.bg.addChild(hu);
        hu.x = 20;
        hu.centerY = 0;
        var posX = 110;
        var poxY = 15;
        // :addTo(this.bg):pos(this.width+this.size.width/2-80,this.size.height/2)
        this.info.sort(function (a, b) {
            if (a < b)
                return -1;
            else
                return 1;
        });
        for (var i = 0; i < this.num; i++) {
            var width = i % 4 * 160 + posX;
            var height = Math.floor(i / 4) * this.HEIGHT + poxY;
            this.addItem(this.info[i], 1, 1, width, height);
        }
    };
    BaseTingCardView.prototype.addItem = function (cardid, fanshu, num, width, height) {
        var card = new ui.mj.TingItemUI();
        this.bg.addChild(card);
        card.pos(width, height);
        card._card._back.visible = false;
        card._card._bg.skin = "card/" + card._card.name + "/" + cardid + ".png";
        card._num.text = String(BaseGameData.getLeftCardCount(cardid));
        card._card._ting.visible = false;
    };
    BaseTingCardView.prototype.clearUI = function () {
        if (this.bg) {
            this.bg.removeSelf();
            this.bg = null;
        }
    };
    return BaseTingCardView;
}(Laya.View));
//# sourceMappingURL=BaseTingCardView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BaseWinCardView = /** @class */ (function (_super) {
    __extends(BaseWinCardView, _super);
    function BaseWinCardView(seatid, dir) {
        var _this = _super.call(this) || this;
        _this.cardsViews = [];
        _this.cards = [];
        _this.CARD_WIDTH = [-64, 0, 44, 0];
        _this.CARD_HEIGHT = [0, 22, 0, -22];
        _this.CARD_WIDTH_OFFSET = [-100, 0, 50, 0];
        _this.CARD_HEIGHT_OFFSET = [0, 50, 0, -50];
        _this.TOUCH_CARD_WIDTH = 76;
        _this.TOUCH_CARD_HEIGHT = 110;
        _this.UPDELAY = 15;
        _this.CARD_SCALE = [0.67, 1, 1, 1];
        _this.SHOWCARD_SCALE = [0.67, 0.55, 0.65, 0.55];
        _this.SPACE = 2;
        _this.SHIFTER_NUM = 81;
        _this.RECT_X = 145;
        _this.RECT_Y = 30;
        _this.touchIndex = 0;
        _this.beginX = 0;
        _this.beginY = 0;
        _this.init(seatid, dir);
        return _this;
    }
    BaseWinCardView.prototype.registerCardView = function (cardView) {
        this._cardView = cardView;
    };
    BaseWinCardView.prototype.init = function (seatid, dir) {
        this.seatid = seatid;
        this.dir = dir;
        this.wOffset = 0;
        this.hOffset = 0;
        this.cards = [];
        this.cardsViews = [];
        this.width = TableLayout.HAND_CARD[dir - 1].width;
        this.height = TableLayout.HAND_CARD[dir - 1].height;
    };
    BaseWinCardView.prototype.addCard = function (cardid, callback) {
        var cardid = cardid || 0;
        var length = this.cardsViews.length;
        var index = length; //+ 2
        var card = new this._cardView(cardid, this.dir, null);
        this.addChildAt(card, index);
        // card.pos(length*this.CARD_WIDTH[this.dir-1]+this.CARD_WIDTH_OFFSET[this.dir-1],length*this.CARD_HEIGHT[this.dir-1]+this.CARD_HEIGHT_OFFSET[this.dir-1])
        this.cardsViews.push(card);
        this.cards.push(cardid);
        if (cardid == this.SHIFTER_NUM) {
            // card.showGod()
        }
    };
    BaseWinCardView.prototype.clearUI = function () {
        for (var k in this.cardsViews) {
            var view = this.cardsViews[k];
            view.removeSelf();
            view = null;
        }
        this.cardsViews = [];
        this.cards = [];
    };
    return BaseWinCardView;
}(Laya.View));
//# sourceMappingURL=BaseWinCardView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ChoiceCard = /** @class */ (function (_super) {
    __extends(ChoiceCard, _super);
    function ChoiceCard(cards, choiceType, optcallback) {
        var _this = _super.call(this) || this;
        _this.init(cards, choiceType, optcallback);
        return _this;
    }
    ChoiceCard.prototype.replace_card = function (cardid) {
        if (cardid % 100 == BaseGameData.SHIFTER_NUM) {
            cardid = 78;
        }
        else if (cardid % 100 == 78) {
            cardid = BaseGameData.SHIFTER_NUM;
        }
        return cardid;
    };
    ChoiceCard.prototype.init = function (cards, choiceType, optcallback) {
        this.callback = optcallback;
        this.choiceType = choiceType;
        this.cards = cards;
        var B = function (C, D) {
            return C > D;
        };
        this.cards.sort(B);
        this.bg = new Laya.Image("opt/card_border.png");
        this.bg.sizeGrid = "10,10,10,10,0";
        this.addChild(this.bg);
        // this.bg.sizeGrid = 
        this.bg.width = 20;
        for (var k in this.cards) {
            var v = this.cards[k];
            var index = parseInt(k);
            var view = new ui.mj.HoldCard.Card_1UI();
            if (BaseGameData.gameType == GameDef.GAME_TYPE.JINYUN_MJ) {
                view._bg.skin = "card/" + view.name + "/" + (this.replace_card(v) % 100) + ".png";
            }
            else {
                view._bg.skin = "card/" + view.name + "/" + (v % 100) + ".png";
            }
            this.bg.addChild(view);
            view.pos(index * view.width + 10, 10);
            this.bg.width = this.bg.width + view.width;
        }
        // this.bg.width = this.bg.width+20
        this.bg.height = 90;
        this.bg.on(Laya.Event.CLICK, this, this.optCard);
    };
    ChoiceCard.prototype.optCard = function () {
        this.callback(this.choiceType, this.cards);
    };
    return ChoiceCard;
}(Laya.Image));
//# sourceMappingURL=ChoiceCard.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ChoiceView = /** @class */ (function (_super) {
    __extends(ChoiceView, _super);
    function ChoiceView(cards, choiceType, optcallback, cancelback) {
        var _this = _super.call(this) || this;
        _this.POS = [[0], [-1, 1], [-1, 0, 1]];
        _this.OFFSET = [[0], [40, 80], [-150, 0, 150]];
        _this.init(cards, choiceType, optcallback, cancelback);
        return _this;
    }
    ChoiceView.prototype.init = function (cards, choiceType, optcallback, cancelback) {
        this.choiceType = choiceType;
        // this.width = 0
        this.callback = optcallback;
        this.cancelBack = cancelback;
        var groupCount = 1;
        var width = -80;
        var offset = -80;
        if (choiceType == GameDef.OptType.MJ_CHI) {
            groupCount = 3;
            width = -170;
            offset = -170;
        }
        console.info(this.choiceType);
        console.info(cards);
        this.count = cards.length / groupCount;
        var beginPos = width * this.count + offset;
        var card = [];
        var index = 0;
        for (var k in cards) {
            card.push(cards[k]);
            if (parseInt(k + 1) % groupCount == 0) {
                if (choiceType.length > 1) {
                    var choice = new ChoiceCard(card, this.choiceType[k], optcallback);
                    this.addChild(choice);
                    choice.pos(beginPos - (parseInt(k) * width + offset), 15);
                    // this.initView(card,parseInt(k)/groupCount,this.choiceType[k])
                }
                else {
                    var choice = new ChoiceCard(card, this.choiceType, optcallback);
                    this.addChild(choice);
                    var x = index * width + offset;
                    choice.pos(beginPos - x, 15);
                    index = index + 1;
                    // choice.pos(this.POS[this.count][k]*115+this.OFFSET[this.count][k],0);
                    // this.initView(card,parseInt(k)/groupCount,this.choiceType) 
                }
                card = [];
            }
        }
        this.cancelBtn = new Laya.Image("opt/button_cancle_1.png");
        this.addChild(this.cancelBtn);
        this.cancelBtn.pos(0, 0);
        this.cancelBtn.on(Laya.Event.CLICK, this, this.cancelBack);
        // EventManager.instance.registerOnObject(this, this.cancelBtn, Laya.Event.CLICK, this, this.onCancel);
    };
    ChoiceView.prototype.onCancel = function () {
        this.cancelBack();
        // this.parent.cancelChoice()
        // self:getParent():cancelChoice()
    };
    return ChoiceView;
}(Laya.Sprite));
//# sourceMappingURL=ChoiceView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var LeftCardView = /** @class */ (function (_super) {
    __extends(LeftCardView, _super);
    function LeftCardView() {
        return _super.call(this) || this;
    }
    LeftCardView.prototype.updateLeftCount = function () {
        if (this._left.visible == false) {
            this._left.visible = true;
        }
        this._left.text = String(BaseGameData.leftCard);
    };
    LeftCardView.prototype.updateShifter = function () {
        this._card._back.visible = false;
        this._card._bg.skin = "card/1/" + BaseGameData.SHIFTER_NUM + ".png";
    };
    return LeftCardView;
}(ui.mj.PaiduiUI));
//# sourceMappingURL=LeftCardView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var MJBaseControl = /** @class */ (function (_super) {
    __extends(MJBaseControl, _super);
    function MJBaseControl() {
        return _super.call(this) || this;
    }
    MJBaseControl.prototype.init = function () {
    };
    MJBaseControl.prototype.initEvent = function () {
    };
    MJBaseControl.prototype.onGameStart = function (event) {
    };
    MJBaseControl.prototype.onGameInfoNtf = function (event) {
    };
    MJBaseControl.prototype.onCardInit = function (event) {
    };
    MJBaseControl.prototype.onCardMoveNtf = function (event) {
    };
    MJBaseControl.prototype.onShowCardNtf = function (event) {
    };
    MJBaseControl.prototype.onPlayerOptNtf = function (event) {
    };
    MJBaseControl.prototype.PlayerOptReq = function (opt) {
    };
    MJBaseControl.prototype.onGameEndNtf = function (event) {
    };
    MJBaseControl.prototype.initGameView = function () {
    };
    MJBaseControl.prototype.initCardsView = function () {
        // for k,v in pairs(_gameDataMgr.seatsInfo) do
        //     local handView = _handCardManager:addHandCardView(v.seatid,v.dir,handler(self,self.foldCard))
        //     if handView then
        //         handView:addTo(self,HAND_CARD_ZORDER):pos(handCardLayouts[v.dir].x, handCardLayouts[v.dir].y)
        //     end
        //     local foldView  = _foldCardManager:addFoldCardView(v.seatid,v.dir)
        //     if foldView then
        //         foldView:addTo(self,FOLD_CARD_ZORDER):pos(foldCardLayouts[v.dir].x, foldCardLayouts[v.dir].y)
        //     end
        //     local holdView = _holdCardManager:addHoldCardView(v.seatid,v.dir)
        //     if holdView then
        //         local order = v.dir == 4 and FOLD_CARD_ZORDER or HAND_CARD_ZORDER
        //         holdView:addTo(self,order):pos(holdCardLayouts[v.dir].x, holdCardLayouts[v.dir].y)
        //     end
        // end
    };
    MJBaseControl.prototype.clearGameUI = function () {
    };
    return MJBaseControl;
}(Laya.Sprite));
//# sourceMappingURL=MJBaseControl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var RuleInfoView = /** @class */ (function (_super) {
    __extends(RuleInfoView, _super);
    function RuleInfoView(rule) {
        var _this = _super.call(this) || this;
        _this.texts = {};
        _this._listData = [];
        _this.init(rule);
        return _this;
    }
    RuleInfoView.prototype.handCountStr = function () {
        if (BaseGameData.gameType == GameDef.GAME_TYPE.TONGLU_MJ) {
            if (30 == BaseGameData.totalHandCount || 50 == BaseGameData.totalHandCount)
                return "片";
        }
        return "局";
    };
    RuleInfoView.prototype.init = function (rule) {
        this._ruleInfo = rule;
        if (GameConfig.IS_MATCH) {
            this._info.visible = false;
        }
        else {
            this._info.visible = true;
        }
        this._wanfa.text = GameDef.RULE_TITLE_MJ[BaseGameData.gameType];
        if (!!this._wanfa.text) {
            this._wanfa.visible = false;
            this._list.y -= 20;
        }
        this._list.y -= 20;
        log(BaseGameData.gameType);
        if (BaseGameData.gameType == GameDef.GAME_TYPE.SHANGQIU_MJ) {
            this.textKey = ShangQiuMJ.ruleKey;
            this.textValue = ShangQiuMJ.ruleValue;
        }
        else if (BaseGameData.gameType == GameDef.GAME_TYPE.SHANXI_MJ) {
            this.textKey = ShanxiMJ.ruleKey;
            this.textValue = ShanxiMJ.ruleValue;
        }
        else if (BaseGameData.gameType == GameDef.GAME_TYPE.JINYUN_MJ || BaseGameData.gameType == GameDef.GAME_TYPE.JINYUN_HZ_MJ) {
            this.textKey = JinYunMJ.ruleKey;
            this.textValue = JinYunMJ.ruleValue;
        }
        else if (BaseGameData.gameType == GameDef.GAME_TYPE.JINYUN_GS_MJ) {
            this.textKey = JinYunGsMJ.ruleKey;
            this.textValue = JinYunGsMJ.ruleValue;
        }
        else if (BaseGameData.gameType == GameDef.GAME_TYPE.TONGLU_MJ) {
            this.textKey = TongluMj.ruleKey;
            this.textValue = TongluMj.ruleValue;
        }
        else if (BaseGameData.gameType == GameDef.GAME_TYPE.BAZHANG) {
            this.textKey = BaZhang.ruleKey;
            this.textValue = BaZhang.ruleValue;
        }
        log(BaseGameData.totalHandCount);
        this._listData = [
            { "name": BaseGameData.totalHandCount + this.handCountStr() },
            { "name": BaseGameData.maxPlayer + "人" }
        ];
        for (var k in rule) {
            var value = rule[k];
            if (this.textKey[value.name - 1] == "red_joker" && value.value == 1) {
                BaseGameData.SHIFTER_NUM = 72;
            }
            else {
                BaseGameData.SHIFTER_NUM = -1;
            }
            if (this.textKey[value.name - 1] == "fold_type") {
                BaseFoldCardManager.instance._foldType = value.value;
            }
            BaseFoldCardManager.instance._foldType = 0;
            if (value.name > 2) {
                this.texts[this.textKey[value.name - 1]] = this.textValue[value.name - 1][value.value];
                if (this.textValue[value.name - 1][value.value] && this.textValue[value.name - 1][value.value] != "") {
                    this._listData.push({ "name": this.textValue[value.name - 1][value.value] });
                }
            }
            else {
                if (value.name == 1) {
                    BaseGameData.tableid = value.value;
                }
                else if (value.name == 2) {
                    BaseGameData.totalHandCount = value.value;
                }
            }
        }
        if (BaseGameData.divide) {
            this._divide.text = "AA支付";
        }
        else {
            this._divide.text = "房主支付";
        }
        this._divide.visible = !GameConfig.IS_MATCH;
        this._list.array = this._listData;
        if (this._listData.length > 1) {
            this._ruleBg.height = 180 + (this._listData.length - 2) * 40;
            this._list.height = this._listData.length * 40;
            this._list.repeatY = this._listData.length;
        }
        this._list.scrollBar.visible = false;
        this._list.itemRender = ruleRender;
        this._list.scrollBar.visible = false;
        this._list.renderHandler = new Laya.Handler(this, this.updateList);
        // this._playRule.text = this.texts["dian_pao"] 
        this._code.text = "房间      " + BaseGameData.tableid;
        this._round.text = BaseGameData.currHandCount + "/" + BaseGameData.totalHandCount + this.handCountStr();
        Dispatcher.on(EventNames.TIME_CHANGE, this, this.onTimeChange);
        this.onTimeChange();
        // this._playRule.on(Laya.Event.CLICK,this,this.onClick)
        this._ruleBtn.on(Laya.Event.CLICK, this, this.onClick);
        this.on(Laya.Event.CLICK, this, this.close);
        this.mouseThrough = true;
        //新增玩法展示
        var str = "";
        var length = this._listData.length;
        var index = 0;
        this._listData.forEach(function (c) {
            index++;
            if (index == length) {
                str += c.name;
            }
            else {
                str += c.name + ",";
            }
        });
        //this._wanfa_label.style.align = "center";
        this._wanfa_label.color = "#ffffff";
        this._wanfa_label.style.fontSize = 20;
        this._wanfa_label.style.leading = 10;
        this._wanfa_label.style.align = "left";
        this._wanfa_label.innerHTML = str;
    };
    RuleInfoView.prototype.updateRound = function () {
        this._round.text = "第" + BaseGameData.currHandCount + "/" + BaseGameData.totalHandCount + this.handCountStr();
    };
    RuleInfoView.prototype.onTimeChange = function () {
        this._time.text = TimeUtils.getSystemTimeHM(true);
    };
    RuleInfoView.prototype.onClick = function () {
        this._rule.visible = !this._rule.visible;
    };
    RuleInfoView.prototype.hideRule = function () {
        this._rule.visible = false;
    };
    RuleInfoView.prototype.close = function (e) {
        var rect = this._ruleBtn.getBounds();
        if (rect.contains(e.currentTarget.mouseX, e.currentTarget.mouseY)) {
            return;
        }
        this._rule.visible = false;
    };
    RuleInfoView.prototype.updateLeftCount = function () {
        if (this._leftCard.visible == false) {
            this._leftCard.visible = true;
        }
        this._leftLabel.text = String(BaseGameData.leftCard);
    };
    /***渲染单元格时的回调方法***/
    RuleInfoView.prototype.updateList = function (cell, index) {
        if (index == this._listData.length - 1) {
            cell.updata(true);
        }
        else {
            cell.updata(false);
        }
    };
    //获取是否无抛牌
    RuleInfoView.prototype.getIsWuPaoPai = function () {
        for (var k in this._ruleInfo) {
            var value = this._ruleInfo[k];
            if (this.textKey[value.name - 1] == "wpp" && value.value == 1) {
                return true;
            }
        }
        return false;
    };
    return RuleInfoView;
}(ui.components.RuleInfoUI));
var ruleRender = /** @class */ (function (_super) {
    __extends(ruleRender, _super);
    function ruleRender() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ruleRender.prototype.updata = function (index) {
        this._text.text = this.dataSource.name;
        if (index)
            this._line.visible = false;
    };
    return ruleRender;
}(ui.mj.RuleRenderItemUI));
//# sourceMappingURL=RuleInfoView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var TimeLimitView = /** @class */ (function (_super) {
    __extends(TimeLimitView, _super);
    function TimeLimitView() {
        var _this = _super.call(this) || this;
        _this._posList = [];
        _this.POS_ROTATION = [
            [],
            [-90, 90],
            [-90, 180, 0],
            [0, -90, 180, 90]
        ];
        _this.POS_LIST = [];
        _this.time = 0;
        _this.change = [1, 2, 4, 3];
        _this.init();
        return _this;
    }
    TimeLimitView.prototype.init = function () {
        // this._posBg.stop()
        for (var i = 1; i < 5; i++) {
            var view = this["_pos_" + i];
            this.POS_LIST.push({ x: view.x, y: view.y });
            this["_time_" + i].stop();
            this["_time_" + i].visible = false;
            if (BaseGameData.maxPlayer < 4) {
                view.visible = false;
            }
        }
    };
    TimeLimitView.prototype.updatePos = function () {
        if (BaseGameData.maxPlayer > 3) {
            for (var i = 1; i < 5; i++) {
                var view = this["_pos_" + i];
                var posi = Utils.getDir(i);
                view.pos(this.POS_LIST[posi - 1].x, this.POS_LIST[posi - 1].y);
                this["_time_" + i].rotation = -180 + 90 * (BaseGameData.selfSeatid || 1);
                // this["ani"+i].rotation = -180 + 90*BaseGameData.selfSeatid
                console.log("this.time============_time_" + i + "rotation =======" + this["_time_" + i].rotation);
            }
        }
        else {
            for (var i = 1; i < 5; i++) {
                var view = this["_pos_" + i];
                var posi = Utils.getDir(i);
                view.pos(this.POS_LIST[posi - 1].x, this.POS_LIST[posi - 1].y);
                this["_time_" + i].rotation = -90;
                // this["ani"+i].rotation = -180 + 90*BaseGameData.selfSeatid
                console.log("this.time============_time_" + i + "rotation =======" + this["_time_" + i].rotation);
            }
        }
        var pos = Utils.getDir(1);
        // this._posBg.rotation = this.POS_ROTATION[BaseGameData.maxPlayer-1][pos-1]
    };
    TimeLimitView.prototype.updatePosBg = function () {
        if (BaseGameData.optSeatid) {
            var pos = Utils.getDir(BaseGameData.optSeatid);
            // this._posBg.rotation = this.POS_ROTATION[BaseGameData.maxPlayer-1][pos-1]
            if (BaseGameData.maxPlayer > 3) {
                for (var i = 1; i < 5; i++) {
                    if (i != BaseGameData.optSeatid) {
                        this["_pos_" + i].skin = "timelimit/time_pos_" + i + ".png";
                        this["_time_" + i].stop();
                        this["_time_" + i].visible = false;
                    }
                    else {
                        this["_pos_" + i].skin = "timelimit/time_pos_" + (i + 4) + ".png";
                        this["_time_" + i].play();
                        this["_time_" + i].visible = true;
                    }
                }
            }
            else {
                for (var i = 1; i < 5; i++) {
                    if (i != Utils.getDir(BaseGameData.optSeatid)) {
                        this["_pos_" + i].skin = "timelimit/time_pos_" + i + ".png";
                        this["_time_" + i].stop();
                        this["_time_" + i].visible = false;
                    }
                    else {
                        this["_pos_" + i].skin = "timelimit/time_pos_" + (i + 4) + ".png";
                        this["_time_" + i].play();
                        this["_time_" + i].visible = true;
                    }
                }
            }
        }
    };
    TimeLimitView.prototype.updateLabel = function () {
        this.time = this.time - 1 > 0 ? this.time - 1 : 0;
        if (this.time <= 0) {
            if (BaseGameData.isGameing)
                server.dispatchMessage(EventNames.GAME_PLAYER_OPT_REP, { "result": 2 });
            this._num.text = String(this.time);
            Laya.timer.clearAll(this);
        }
        else {
            this._num.text = String(this.time);
        }
    };
    TimeLimitView.prototype.startCount = function (time) {
        this.time = time;
        this.updatePosBg();
        // this._posBg.play()
        Laya.timer.loop(1000, this, this.updateLabel);
    };
    TimeLimitView.prototype.updateLeftCount = function () {
        // if(this._leftCard.visible == false){
        //     this._leftCard.visible = true
        // }
        // this._leftLabel.text = String(BaseGameData.leftCard)
    };
    TimeLimitView.prototype.clean = function () {
        for (var i = 1; i < 5; i++) {
            this["_time_" + i].stop();
        }
        Laya.timer.clearAll(this);
    };
    return TimeLimitView;
}(ui.mj.TimeLimitUI));
//# sourceMappingURL=TimeLimitView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
* @author seacole
 *场景基础类
 */
var AppPage = /** @class */ (function (_super) {
    __extends(AppPage, _super);
    function AppPage() {
        var _this = _super.call(this) || this;
        _this._loadDatas = [];
        _this._screenMode = Laya.Stage.SCREEN_HORIZONTAL;
        return _this;
    }
    AppPage.register = function (page, loadData) {
        if (!AppPage._loadData)
            AppPage._loadData = {};
        var key = Laya.ClassUtils.getClass(page);
        AppPage._loadData[key] = loadData;
    };
    AppPage.prototype.createChild = function () {
        // AppControl.getInstance().screenMode = this._screenMode;//调整到 AppControl.getInstance().showPage执行       
    };
    AppPage.prototype.layoutChild = function () {
        EventManager.instance.enableOnObject(this);
        this.onResize(null);
    };
    AppPage.prototype.destroy = function () {
        EventManager.instance.disableOnObject(this);
    };
    AppPage.prototype.init = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        EventManager.instance.registerOnObject(this, AppControl.getInstance().stage, Laya.Event.RESIZE, this, this.onResize);
    };
    AppPage.prototype.loadRes = function (key) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        this.playBgm();
        this.initParams = params[0];
        if (AppPage._loadData[key])
            LoadingUI.instance.show(LoadingUI.TYPE_HAS_BG, AppPage._loadData[key], this, this.loadComplete);
        else
            this.loadComplete();
    };
    AppPage.prototype.loadComplete = function () {
        var _this = this;
        AppControl.getInstance().AppStage.clear();
        LoadingUI.instance.hide();
        //苹果蛋疼的转屏瞬间画面会拉伸
        if (Native.instance.OS == OSConfig.IOS_WEB) {
            Laya.timer.frameOnce(3, this, function () {
                AppControl.getInstance().screenMode = _this.screenMode;
                _this.addToStage.apply(_this, _this.initParams);
                _this.updateDisplayObjectList();
            });
        }
        else {
            AppControl.getInstance().screenMode = this.screenMode;
            this.addToStage.apply(this, this.initParams);
            this.updateDisplayObjectList();
        }
    };
    AppPage.prototype.addToStage = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        this.playBgm();
        this.createChild();
        this.init.apply(this, params);
    };
    AppPage.prototype.playBgm = function () {
        // GameSoundManager.playBGM();
    };
    AppPage.prototype.updateDisplayObjectList = function () {
        this.layoutChild();
    };
    AppPage.prototype.clear = function () {
        this.destroy();
    };
    AppPage.prototype.add3D = function (child) {
        AppControl.getInstance().addTo3D(child);
    };
    AppPage.prototype.addView = function (child) {
        AppControl.getInstance().addToMain(child);
    };
    AppPage.prototype.addUI = function (child) {
        AppControl.getInstance().addToUI(child);
    };
    AppPage.prototype.addPopup = function (child) {
        AppControl.getInstance().addToPopup(child);
    };
    AppPage.prototype.addTooltip = function (child) {
        AppControl.getInstance().addToTooltip(child);
    };
    AppPage.prototype.removeAChild = function (child) {
        if (child && child.parent) {
            child.parent.removeChild(child);
        }
    };
    AppPage.prototype.onResize = function (e) {
    };
    Object.defineProperty(AppPage.prototype, "screenMode", {
        get: function () {
            return this._screenMode;
        },
        set: function (value) {
            this._screenMode = value;
        },
        enumerable: true,
        configurable: true
    });
    return AppPage;
}(laya.ui.View));
//# sourceMappingURL=AppPage.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 游戏界面基础类 所有共有数据在这里处理，具体UI控制和独有数据每个游戏各自处理;
*/
var TablePage = /** @class */ (function (_super) {
    __extends(TablePage, _super);
    function TablePage() {
        var _this = _super.call(this) || this;
        _this._loadDatas = _this._loadDatas.concat([{ url: ResourceConfig.SHEET_TONGYONG, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_GAME_NAME, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_TABLE, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_GAME_LOGO, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_CHAT, type: Laya.Loader.ATLAS }, { url: ResourceConfig.BG_TABLE, type: Laya.Loader.IMAGE },
            { url: ResourceConfig.BITMAP_FONT_WAKENG1_JSON, type: Laya.Loader.JSON }, { url: ResourceConfig.BITMAP_FONT_WAKENG1_PNG, type: Laya.Loader.IMAGE },
            { url: ResourceConfig.SHEET_PLAY_SHEET, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_DIALOG, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.BITMAP_FONT_MENU1_JSON, type: Laya.Loader.JSON }, { url: ResourceConfig.BITMAP_FONT_MENU1_PNG, type: Laya.Loader.IMAGE },
            { url: ResourceConfig.BITMAP_FONT_MENU2_JSON, type: Laya.Loader.JSON }, { url: ResourceConfig.BITMAP_FONT_MENU2_PNG, type: Laya.Loader.IMAGE },
            { url: ResourceConfig.SHEET_COMMON, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_FENSHU_FNT, type: Laya.Loader.JSON }, { url: ResourceConfig.SHEET_FENSHU, type: Laya.Loader.IMAGE },
            { url: ResourceConfig.SHEET_CHAT, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_EMOJI, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_EMOJI_1, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_EMOJI_2, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_EMOJI_3, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_EMOJI_4, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_EMOJI_5, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_EMOJI_6, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_EMOJI_7, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_EMOJI_8, type: Laya.Loader.ATLAS }]);
        if (GameConfig.IS_BANSHU)
            _this._loadDatas = _this._loadDatas.concat([{ url: ResourceConfig.SHEET_BANSHU, type: Laya.Loader.ATLAS }]);
        _this.name = "TablePage";
        _this.screenMode = Laya.Stage.SCREEN_HORIZONTAL;
        return _this;
    }
    //protected _tableInfo: ui.components.table.TableInfoUI
    TablePage.prototype.createChild = function () {
        _super.prototype.createChild.call(this);
        PreLoadingUI.instance.hide();
    };
    TablePage.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        if (BaseGameData.isRecord != 1 && !GameConfig.IS_BANSHU && !GameConfig.IS_MATCH) {
            NativeHelper.instance.voiceQuitRoom(BaseGameData.voiceRoomName, function (result) {
            });
        }
        RealTimeSpeechManager.instance.off(EventNames.REALTIME_MIC, this, this.onMic);
        RealTimeSpeechManager.instance.off(EventNames.REALTIME_SPEAKER, this, this.onSpeaker);
        server.stopCache();
        this.clearData();
        SoundManager.instance.stopMusic();
        this._menu.removeListener();
        BaseGameData.gameType = "";
        BaseGameData.isVoiceJoined = false;
    };
    TablePage.prototype.init = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        AppControl.getInstance().AppStage.registUnauthorized();
        _super.prototype.init.apply(this, params);
        var i;
        if (!this._table) {
            this._table = new ui.page.TablePageUI();
            this._tablePop = new ui.components.table.TablePopUI();
            this._netSignalUI = new NetSignalUI();
            this._netSignalUI.y = 10;
            //暂时隐藏
            this._netSignalUI.visible = false;
            this._tablePop.addChild(this._netSignalUI);
            this._tablePop._inviteUI.centerY = 0;
            this._batteryUI = new BatteryUI();
            this._batteryUI.y = 15;
            if (Native.instance.isNative)
                this._tablePop.addChild(this._batteryUI);
            this._recordUI = new RecordUI();
            this._menu = new TableMenuUI();
            // Utils.injectProp(this._menu, BaseGameData.tablelayout.MENU_CONTENT_LAYOUT)
            this._sheetData = null;
            this._tablePop._btnTest.visible = GameConfig.IS_TEST;
            this._tablePop._btnTest.right = 28;
            this._tablePop._btnTest.bottom = 100;
            //返回大厅，查看战绩
            this._tablePop._btnCheckResult.visible = false;
            //倍数美术字
            // this._fontData1Roomid = new FontData();
            // this._fontData1Roomid.init(FontConfig.FONT_WAKENG_1, Laya.loader.getRes(ResourceConfig.BITMAP_FONT_WAKENG1_JSON),
            //     Laya.loader.getRes(ResourceConfig.BITMAP_FONT_WAKENG1_PNG), 50, BPFont.LEFT);
            // this._bitMapFontRoomid = FontManager.instance.addFont(this._fontData1Roomid);
            // this._tablePop._inviteUI.addChild(this._bitMapFontRoomid);
            // this._bitMapFontRoomid.pos(140, 103);
            // this._bitMapFontRoomid.text = "";
        }
        if (GameConfig.IS_BANSHU) {
            this._menu._btnChat.visible = false;
            this._tablePop._inviteUI.removeSelf();
        }
        this._menu._btnChat.right = 28;
        if (GameConfig.IS_MATCH) {
            this._menu._btnChat.visible = false;
            this._menu._checkBox_laba.visible = false;
            this._menu._checkBox_huatong.visible = false;
        }
        if (!Native.instance.isNative) {
            this._menu._checkBox_laba.visible = false;
            this._menu._checkBox_huatong.visible = false;
        }
        this._tablePop._aniTip.visible = false;
        this._tablePop._tuoguan.visible = false;
        this._tablePop.bottom = NaN;
        this._tablePop.centerY = 0;
        this._table.bottom = NaN;
        this._table.centerY = 0;
        this.addView(this._table);
        this.addView(this._tablePop);
        this._tablePop.addChild(this._menu);
        this.addView(DialogManager.instance);
        DialogManager.instance.mouseThrough = true;
        this._tablePop.mouseThrough = true;
        this._menu.addListener();
        this._menu._box.visible = false;
        // this._tablePop._btnMicrophone.visible = Native.instance.isWeiXin;
        Utils.injectProp(this._menu, BaseGameData.tablelayout.MENU_CONTENT_LAYOUT);
        Utils.injectProp(this._menu._checkBox_laba, BaseGameData.tablelayout.PLAY_SOUND_LAYOUT);
        Utils.injectProp(this._menu._checkBox_huatong, BaseGameData.tablelayout.SSYY_LAYOUT);
        Utils.injectProp(this._menu._btnMenu, BaseGameData.tablelayout.MENU_LAYOUT);
        // Utils.injectProp(this._menu._btnRestart, BaseGameData.tablelayout.MENU_LAYOUT)
        Utils.injectProp(this._menu._btnChat, BaseGameData.tablelayout.CHAT_LAYOUT);
        // Utils.injectProp(this._menu._btnMicrophone, BaseGameData.tablelayout.MENU_LAYOUT)
        Utils.injectProp(this._tablePop._aniTip, BaseGameData.tablelayout.SSYY_TIP_LAYOUT);
        Utils.injectProp(this._table._bg, BaseGameData.tablelayout.BG_LAYOUT);
        Utils.injectProp(this._table._logo, BaseGameData.tablelayout.LOGO_LAYOUT);
        if (GameConfig.IS_BANSHU)
            this._table._logo.source = Laya.Loader.getRes("banshu/gameLogo_" + BaseGameData.gameType + ".png");
        else
            this._table._logo.source = Laya.Loader.getRes("gameLogo/" + GameDef.GAME_LOGO[BaseGameData.gameType] + ".png");
        this._netSignalUI.onNetChange();
        this.clearData();
        // 1是否是录像 2gametype 3录像2进制文件        
        var isVideo = params.length && params[0] == 1;
        if (isVideo) {
            BaseGameData.isRecord = 1;
            BaseGameData.gameType = params[1];
            this._sheetData = params[2];
        }
        else {
            if (!GameConfig.IS_BANSHU && !GameConfig.IS_MATCH) {
                RealTimeSpeechManager.instance.on(EventNames.REALTIME_MIC, this, this.onMic);
                RealTimeSpeechManager.instance.on(EventNames.REALTIME_SPEAKER, this, this.onSpeaker);
                NativeHelper.instance.voiceJoinRoom(BaseGameData.voiceRoomName, function (response) {
                    if (response.result == 1) { // GV_ON_JOINROOM_SUCC
                        BaseGameData.voiceMemberID = response.memberID;
                        if (BaseGameData.selfSeatid)
                            server.tableDataReq(1, BaseGameData.voiceMemberID);
                        BaseGameData.isVoiceJoined = true;
                        if (BaseGameData.selfSeatid)
                            RealTimeSpeechManager.instance.setMic();
                        else
                            RealTimeSpeechManager.instance.passiveCloseMic();
                        RealTimeSpeechManager.instance.setSpeaker();
                        Native.instance.voiceMemberVoiceCallback();
                        // NativeHelper.instance.voiceOpenMic();
                    }
                });
            }
        }
        this._tablePop.visible = BaseGameData.isRecord > 0 ? false : true;
        DialogManager.instance.addDialog("PLAYER_INFO", PlayerInfoDialog);
        // Laya.Browser.document.addEventListener("visibilitychange", function () {
        //     if (!TableEndCtrl.instance.parent && !TableEndShuCtrl.instance.parent && !DialogManager.instance.hasDialog("MATCH_OVER") &&
        //         !DialogManager.instance.hasDialog("MATCH_OUT_WIN") && !DialogManager.instance.hasDialog("MATCH_OUT_LOSE")) {
        //         server.reconnect()
        //         console.log(Laya.Browser.document.hidden);
        //     }
        //     // Modify behavior...
        // });
    };
    TablePage.prototype.initEvent = function () {
        var _this = this;
        EventManager.instance.registerOnObject(this, AppControl.getInstance().stage, Laya.Event.CLICK, this, this.onStageTouch);
        EventManager.instance.registerOnObject(this, AppControl.getInstance().stage, Laya.Event.MOUSE_UP, this, this.onStageTouch);
        EventManager.instance.registerOnObject(this, AppControl.getInstance().stage, Laya.Event.MOUSE_OUT, this, this.onStageTouch);
        //EventManager.instance.registerOnObject(this, this._menu._btnRestart, Laya.Event.MOUSE_DOWN, this, this.onBtnTouch);
        EventManager.instance.registerOnObject(this, this._menu._btnMicrophone, Laya.Event.MOUSE_DOWN, this, this.onBtnTouch);
        EventManager.instance.registerOnObject(this, this._tablePop._btnBack, Laya.Event.MOUSE_DOWN, this, this.onBtnTouch);
        EventManager.instance.registerOnObject(this, this._tablePop._btnEnd, Laya.Event.MOUSE_DOWN, this, this.onBtnTouch);
        EventManager.instance.registerOnObject(this, this._menu._btnChat, Laya.Event.MOUSE_DOWN, this, this.onBtnTouch);
        EventManager.instance.registerOnObject(this, this._tablePop._btnTest, Laya.Event.MOUSE_DOWN, this, this.onBtnTouch);
        EventManager.instance.registerOnObject(this, this._tablePop._btnRealTime, Laya.Event.CLICK, this, this.onBtnTouch);
        EventManager.instance.registerOnObject(this, this._tablePop._inviteUI._btnInvite, Laya.Event.CLICK, this, this.onBtnTouch);
        EventManager.instance.registerOnObject(this, this._menu._btnMatchRecord, Laya.Event.CLICK, this, this.onBtnTouch);
        EventManager.instance.registerOnObject(this, this._menu._checkBox_huatong, Laya.Event.CLICK, this, this.onBtnTouch);
        EventManager.instance.registerOnObject(this, this._menu._checkBox_laba, Laya.Event.CLICK, this, this.onBtnTouch);
        EventManager.instance.registerOnObject(this, this._tablePop._tuoguan, Laya.Event.CLICK, this, this.onBtnTouch);
        EventManager.instance.registerOnObject(this, this._tablePop._btnCheckResult, Laya.Event.CLICK, this, this.onBtnTouch);
        EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.PLAY_RECORD, this, this.onPlayRecord);
        EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.PLAY_RECORD_END, this, this.stopChatVisiter);
        EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.VOICE_CHANGE, this, this.onVoiceChange);
        EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.PLAYER_DATA_COMPLETED, this, this.onPlayerInfoComleted);
        EventManager.instance.registerOnObject(this, server, EventNames.CONNECT_SERVER, this, this.onConnectToServer);
        EventManager.instance.registerOnObject(this, server, EventNames.SERVER_ERROR, this, this.onServerError);
        EventManager.instance.registerOnObject(this, server, EventNames.SHOW_DISCONNECT, this, this.onDisconnectServer);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_TABLE_INFO_NTF, this, this.onTableInfoNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_SITDOWN_REP, this, this.onSitdownRepHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_SITDOWN_NTF, this, this.onSitdownNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_STANDUP_REP, this, this.onStandupRepHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_STANDUP_NTF, this, this.onStandupNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_START_TABLE_REP, this, this.onStartTableRepHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_START_TABLE_NTF, this, this.onStartTableNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_TABLE_WILL_END_NTF, this, this.onTableWillEndNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_PLAYER_READY_REP, this, this.onPlayerReadyRepHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_PLAYER_READY_NTF, this, this.onPlayerReadyNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_EMOTICON_NTF, this, this.onEmoticonNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_USE_GOODS_REP, this, this.onUseGoodsRepHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_USE_GOODS_NTF, this, this.onUseGoodsNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_GAME_START_NTF, this, this.onGameStartNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_REAL_TIME_RECORD_REP, this, this.onRealTimeRecordRepHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_OFFLINE_NTF, this, this.onOfflineNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_PlAYER_TABLE_STATUS_NTF, this, this.onPlayerTableStatusNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_PLAYER_CHAT_NTF, this, this.onPlayerChatNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_VOTE_REP, this, this.onVoteRepHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_VOTE_NTF, this, this.onVoteNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_TABLE_END_NTF, this, this.onTableEndNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_TABLE_DATA_NTF, this, this.onTableDataNtfHandler);
        // EventManager.instance.registerOnObject(this, server, EventNames.GAME_RECONNECT_INFO, this, this.onReconnectInfoHandler);
        // EventManager.instance.registerOnObject(this, server, EventNames.GAME_SHOW_INFO_NTF, this, this.onShowInfoNtfHandler);
        Dispatcher.on(EventNames.CHECK_READY, this, this.checkNextBtn);
        this._table.on(Laya.Event.CLICK, this, function () { _this.hideChatDialog(); });
        this._menu._checkBox_laba.on("change", this, this.updateRevVoice, [this._menu._checkBox_laba]);
    };
    TablePage.prototype.updateRevVoice = function (checkbox_laba) {
        if (checkbox_laba.selected == true) {
            //打开接收语音
        }
        else {
            //关闭接收语音
        }
    };
    TablePage.prototype.layoutChild = function () {
        _super.prototype.layoutChild.call(this);
        SoundManager.instance.playBg("bg1");
        if (this._playerUis) {
            for (var i = 1; i < this._playerUis.length; i++) {
                this._playerUis[i].clear();
                this._playerUis[i].removeSelf();
            }
            this._playerUis = null;
        }
        if (!BaseGameData.isRecord && !GameConfig.IS_MATCH) {
            LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_ATONCE);
            server.connect();
        }
        if (GameConfig.IS_MATCH)
            server.joinMatchReq();
        if (GameConfig.IS_MATCH) {
            this._menu._btnMatchRecord.visible = true;
            Utils.injectProp(this._tablePop._btnMatchRecord, BaseGameData.tablelayout.MATCH_RECORD_LAYOUT);
        }
        else {
            this._menu._btnMatchRecord.visible = false;
        }
        this.removeSeatViews();
        this.initSeatViews();
        // this._tablePop._tuoguan.visible = false
        // this.this.NtfHandler({ "tableid": "16973", "maxPlayer": 4 });
        // this.onPlayerInfoNtfHandler({ "uid": 1002, "seatid": 3, "status": 1 });
        // this.onGameInfoNtfHandler({ "totalHandCount": 8, "baseScore": 1 });
        // this.onSitdownNtfHandler({ "uid": 1004, "seatid": 2 });
        // this.onPlayerReadyNtfHandler({ "seatid": 2 });
        //  this.onSitdownNtfHandler({ "uid": 1003, "seatid": 4 });
        // this.onPlayerReadyNtfHandler({ "seatid": 4 });
        // this.onStandupNtfHandler({ "uid": 1002, "seatid": 3 });
    };
    TablePage.prototype.onResize = function (e) {
        this._table.width = 0;
        this._table.width = AppControl.getInstance().stage.width;
        this._table.height = AppControl.getInstance().stage.height > TableLayout.STAGE.height ? TableLayout.STAGE.height : AppControl.getInstance().stage.height;
        this._tablePop.width = 0;
        this._tablePop.width = AppControl.getInstance().stage.width;
        this._tablePop.height = AppControl.getInstance().stage.height > TableLayout.STAGE.height ? TableLayout.STAGE.height : AppControl.getInstance().stage.height;
        this._table._box.width = this._tablePop.width > TableLayout.STAGE.width ? TableLayout.STAGE.width : AppControl.getInstance().stage.width;
        this._table._box.height = this._tablePop.height;
        this._table._box.centerX = 0;
        //this._menu.x = AppControl.getInstance().stage.width > TableLayout.STAGE.width ? (AppControl.getInstance().stage.width - TableLayout.STAGE.width) * 0.5 + 20 : 20;
        if (Native.instance.isNative) {
            this._batteryUI.x = AppControl.getInstance().stage.width > TableLayout.STAGE.width ? AppControl.getInstance().stage.width * 0.5 + 640 - 60 : AppControl.getInstance().stage.width - 60;
            this._netSignalUI.x = this._batteryUI.x - 50;
        }
        else {
            this._netSignalUI.x = AppControl.getInstance().stage.width > TableLayout.STAGE.width ? AppControl.getInstance().stage.width * 0.5 + 640 - 50 : AppControl.getInstance().stage.width - 50;
            this._batteryUI.x = this._netSignalUI.x - 60;
        }
        log(AppControl.getInstance().stage.width);
        log(TableLayout.STAGE.width);
        log((AppControl.getInstance().stage.width - TableLayout.STAGE.width) / 2);
        //按钮 适配背景
        this._tablePop._btnMatchRecord.right = AppControl.getInstance().stage.width > TableLayout.STAGE.width ? (AppControl.getInstance().stage.width - TableLayout.STAGE.width) / 2 + BaseGameData.tablelayout.MATCH_RECORD_LAYOUT["right"] : BaseGameData.tablelayout.MATCH_RECORD_LAYOUT["right"];
        this._tablePop._aniTip.right = AppControl.getInstance().stage.width > TableLayout.STAGE.width ? (AppControl.getInstance().stage.width - TableLayout.STAGE.width) / 2 + BaseGameData.tablelayout.SSYY_TIP_LAYOUT["right"] : BaseGameData.tablelayout.SSYY_TIP_LAYOUT["right"];
        this._menu.right = AppControl.getInstance().stage.width > TableLayout.STAGE.width ? (AppControl.getInstance().stage.width - TableLayout.STAGE.width) / 2 + BaseGameData.tablelayout.MENU_CONTENT_LAYOUT["right"] : BaseGameData.tablelayout.MENU_CONTENT_LAYOUT["right"];
        this._menu.right = AppControl.getInstance().stage.width > TableLayout.STAGE.width ? (AppControl.getInstance().stage.width - TableLayout.STAGE.width) / 2 + BaseGameData.tablelayout.MENU_CONTENT_LAYOUT["right"] : BaseGameData.tablelayout.MENU_CONTENT_LAYOUT["right"];
        //this._tablePop._btnBack.centerY = this._tablePop._btnEnd.centerY = this._tablePop._inviteUI.centerY ;
        AppControl.getInstance().resetScreen();
    };
    /**
     * 断线时。不需要去刷新位置信息
     */
    TablePage.prototype.clearData = function (needCheckIsGameing) {
        if (needCheckIsGameing === void 0) { needCheckIsGameing = true; }
        BaseGameData.init();
        Laya.timer.clearAll(this);
        Laya.Tween.clearAll(this);
        AnimationManager.instance.endAnimations();
        AniEffectManager.instance.clearAll();
        this.stopChatVisiter(false);
        this._isWxRecording = false;
        this._isWxRecordSend = false;
        this._tablePop._inviteUI.visible = this._tablePop._btnBack.visible = this._tablePop._btnEnd.visible = false;
        WxWeb.instance.clearRecord();
        var i;
        if (this._playerUis) {
            for (i = 1; i < this._playerUis.length; i++) {
                this._playerUis[i].clear(needCheckIsGameing);
            }
        }
    };
    /**
     * 连接上服务器
     */
    TablePage.prototype.onConnectToServer = function () {
        LoadingUI.instance.hide();
        if (GameConfig.IS_MATCH)
            server.joinMatchReq();
    };
    /**
     * 连接失败
     */
    TablePage.prototype.onServerError = function () {
    };
    /**
     * 显示房号等信息
     */
    TablePage.prototype.setTableInfo = function () {
        if (!BaseGameData.isRecord) {
            this._tablePop._inviteUI.visible = !BaseGameData.isTableStart && !GameConfig.IS_MATCH;
            if (BaseGameData.owner == server.uid) {
                this._tablePop._btnBack.visible = this._tablePop._btnEnd.visible = !BaseGameData.isTableStart && !GameConfig.IS_MATCH;
                if (this.screenMode == Laya.Stage.SCREEN_VERTICAL) {
                    this._tablePop._btnBack.centerX = 170;
                    this._tablePop._btnEnd.centerX = -170;
                }
                else {
                    this._tablePop._btnBack.centerX = 260;
                    this._tablePop._btnBack.centerY = 50;
                    this._tablePop._btnEnd.centerX = -260;
                    this._tablePop._btnEnd.centerY = 50;
                }
            }
            else {
                this._tablePop._btnEnd.visible = false;
                this._tablePop._btnBack.visible = !BaseGameData.isTableStart && !GameConfig.IS_MATCH;
                // this._tablePop._btnBack.centerX = this._tablePop._btnEnd.centerX = 0;
                if (this.screenMode == Laya.Stage.SCREEN_VERTICAL) {
                    this._tablePop._btnBack.centerX = 170;
                    this._tablePop._btnEnd.centerX = -170;
                }
                else {
                    this._tablePop._btnBack.centerX = 260;
                    this._tablePop._btnBack.centerY = 50;
                    this._tablePop._btnEnd.centerX = -260;
                    this._tablePop._btnEnd.centerY = 50;
                }
            }
        }
        if (!this._tablePop._next.visible && BaseGameData.isTableStart && !BaseGameData.isRecord)
            this._tablePop._wait.visible = !BaseGameData.isGameing;
        //this._bitMapFontRoomid.visible =false;
        // this._tableInfo._text_roomId.text = BaseGameData.tableid + "";
        // this._tableInfo._text_round.text = BaseGameData.currHandCount + "/"+BaseGameData.totalHandCount;
        if (!GameConfig.IS_MATCH) {
            this._tablePop._tuoguan.visible = false;
        }
        //隐藏桌面上的离开房间和解散房间
        this._tablePop._btnBack.visible = this._tablePop._btnEnd.visible = false;
        // //返回大厅，查看战绩
        // this._tablePop._labInfo.text=StringUtils.format(GameConfig.language.table_info,BaseGameData.tableid,BaseGameData.currHandCount?BaseGameData.currHandCount:1);
        // this._tablePop._labInfo.text = "";
    };
    /**
     * 断开连接
     */
    TablePage.prototype.onDisconnectServer = function (code) {
        this.clearData(false);
        if (code) {
            LoadingUI.instance.hide();
            AlertInGameCtrl.instance.show(GameConfig.language.socket_disconnect[code], this.back, 0, false);
        }
        else
            LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_ATONCE);
    };
    /**
     * 桌子信息
     */
    TablePage.prototype.onTableInfoNtfHandler = function (msg) {
        BaseGameData.onTableInfoNtfHandler(msg);
        var i;
        // if (!this._playerUis) {
        //     this._playerUis = [null];
        //     for (i = 1; i <= BaseGameData.maxPlayer; i++) {
        //         var playerUI: PlayerInGameUI = new PlayerInGameUI();
        //         playerUI.index = i;
        //         playerUI.clear();
        //         this._playerUis.push(playerUI);
        //         // this._tablePop._box.addChild(playerUI);
        //         this._table._box.addChild(playerUI)
        //         this._table._box.zOrder = GameZorder.Player
        //     }
        // }
        this.removeSeatViews();
        this.initSeatViews();
        for (i = 0; i < msg.playerinfo.length; i++) {
            this.onPlayerInfoNtfHandler(msg.playerinfo[i]);
        }
        // this._tablePop._menu._btnEnd.disabled = BaseGameData.owner != server.uid;
        // if(Utils.checkSeatid(BaseGameData.selfSeatid)){
        PlayerManager.instance.movePlayer(false);
        // }
        this.checkSelfSeatid();
        this.checkNextBtn();
        this.setTableInfo();
        this.changeAllSeatToSeat();
        //返回大厅，查看战绩
        this._tablePop._btnCheckResult.visible = false;
        this._voteNtfmsg = null;
        AlertDissolveCtrl.instance.hide();
        Dispatcher.dispatch(EventNames.MENU_CHECK);
    };
    TablePage.prototype.initSeatViews = function () {
        var info = { "seatid": 1, "dir": 1 };
        for (var i = 1; i <= BaseGameData.maxPlayer; i++) {
            var pos = Utils.currentPos(i);
            info.seatid = i;
            info.dir = i;
            var player = PlayerManager.instance.addPlayerView(i, info);
            player.dir = i;
            this._table._box.addChild(player);
            this._table._box.zOrder = GameZorder.Player;
            Utils.injectProp(player, BaseGameData.tablelayout.SEAT_LAYOUT[BaseGameData.maxPlayer - 1][pos - 1]);
            // player.pos(BaseGameData.tablelayout.SEAT_LAYOUT[BaseGameData.maxPlayer-1][pos-1].x, BaseGameData.tablelayout.SEAT_LAYOUT[BaseGameData.maxPlayer-1][pos-1].y)
        }
    };
    TablePage.prototype.removeSeatViews = function () {
        PlayerManager.instance.removeAllPlayer();
        BaseGameData.offset = 0;
    };
    TablePage.prototype.changeAllSeatToSeat = function () {
        for (var i = 1; i <= BaseGameData.maxPlayer; i++) {
            if (!BaseGameData.getPlayerDataBySeatid(i)) {
                this.changeSeatToSeat(i);
            }
        }
    };
    TablePage.prototype.changeSeatToSeat = function (seatid) {
        // _gameDataMgr:removeSeatInfo(seatid)
        if (!Utils.checkSeatid(BaseGameData.selfSeatid)) {
            PlayerManager.instance.changeToSeat(seatid);
        }
        else {
            PlayerManager.instance.changeToEmpty(seatid);
        }
    };
    TablePage.prototype.checkSelfSeatid = function () {
        if (GameConfig.IS_MATCH)
            return;
        if (!BaseGameData.selfSeatid) {
            for (var i = 1; i <= BaseGameData.maxPlayer; i++) {
                if (!BaseGameData.getPlayerDataBySeatid(i)) {
                    if (BaseGameData.divide) {
                        if (server.uid == BaseGameData.owner) {
                            server.sitdownReq(0);
                        }
                        else {
                            var text = StringUtils.format(GameConfig.language.sit_down_tip, BaseGameData.divide);
                            AlertInGameCtrl.instance.show(text, function (type) {
                                if (type == AlertCtrl.CONFIRM) {
                                    server.sitdownReq(0);
                                }
                            }, 0, true, ResourceConfig.ALERT_TISHI);
                        }
                        break;
                    }
                    else {
                        server.sitdownReq(0);
                        break;
                    }
                }
            }
        }
    };
    TablePage.prototype.checkNextBtn = function () {
        if (this._tablePop && this._tablePop._next)
            this._tablePop._next.visible = false;
        var player = BaseGameData.getPlayerDataBySeatid(BaseGameData.selfSeatid);
        if (player && player.status == 0 && player.seatid > 0 && !BaseGameData.isRecord
            // && BaseGameData.gameType != GameDef.GAME_TYPE.SHISANSHUI
            && !GameConfig.IS_MATCH) {
            this._tablePop._next.visible = true;
            this._tablePop._wait.visible = false;
            if (BaseGameData.isGameing == false) {
                this._tablePop._next.on(Laya.Event.CLICK, this, function () {
                    server.playerReadyReq();
                });
            }
            if (this._tablePop._btnCheckResult.visible) {
                this._tablePop._next.visible = false;
            }
        }
        else {
            this._tablePop._wait.visible = false;
            this._tablePop._next.visible = false;
            if (GameConfig.IS_MATCH && BaseGameData.isTableStart)
                this._tablePop._wait.visible = true;
        }
    };
    /**
     * 玩家信息
     */
    TablePage.prototype.onPlayerInfoNtfHandler = function (msg) {
        BaseGameData.onPlayerInfoNtfHandler(msg);
        PlayerManager.instance.changeSeatToPlayer(msg.uid, msg.seatid);
        var player = BaseGameData.getPlayerDataByUid(msg.uid);
        if (player && server.uid == player.uid && GameConfig.IS_MATCH && player.isLeave) {
            this._tablePop._tuoguan.visible = true;
        }
        // this.setPlayerUIStatus(msg.uid == server.uid, msg.uid, msg.seatid);
        // for (var i: number = 1; i < this._playerUis.length; i++) {
        //     this._playerUis[i].checkIsGameing();
        // }
    };
    TablePage.prototype.onSitdownRepHandler = function (msg) {
        if (msg.result) {
            GameLogic.selfData.game_code = 0;
            var errorCode = GameConfig.language.sit_down_errorcode;
            if (msg.result == 5) {
                AlertInGameCtrl.instance.show(GameConfig.language.sit_down_error, null, 0, false);
            }
            else if (msg.result == 100) {
                if (BaseGameData.divide) {
                    if (GameLogic.selfData.diamond >= BaseGameData.divide) {
                        HintCtrl.instance.show(errorCode[msg.result]);
                    }
                    else {
                        AlertInGameCtrl.instance.show("余额不足,是否前往充值", function (type) {
                            if (type == AlertCtrl.CONFIRM) {
                                ShopCtrl.instance.show();
                            }
                        });
                    }
                }
                else {
                    HintCtrl.instance.show(errorCode[msg.result]);
                }
            }
            else {
                if (errorCode.hasOwnProperty(msg.result))
                    HintCtrl.instance.show(errorCode[msg.result]);
                else
                    HintCtrl.instance.show(StringUtils.format(GameConfig.language.sit_down_fail, msg.result));
            }
        }
        // var a:Object;a.
    };
    /**
     * 玩家坐下
     */
    TablePage.prototype.onSitdownNtfHandler = function (msg) {
        BaseGameData.onSitdownNtfHandler(msg);
        SoundManager.instance.playEffect("player_enter", 0, 1, false, 1, true);
        PlayerManager.instance.changeSeatToPlayer(msg.uid, msg.seatid);
        // this.setPlayerUIStatus(msg.uid == server.uid, msg.uid, msg.seatid);
        if (msg.uid == server.uid) {
            GameLogic.selfData.game_code = BaseGameData.tableid;
            PlayerManager.instance.movePlayer(false);
        }
        Dispatcher.dispatch(EventNames.MENU_CHECK);
    };
    // private setPlayerUIStatus(needReset: boolean, uid: number, seatid: number): void {
    //     var i: number;
    //     var index: number;
    //     if (needReset) {
    //         for (i = 1; i < this._playerUis.length; i++) {
    //             this._playerUis[i].status = PlayerInGameUI.STATUS_CAN_SIT;
    //         }
    //         //有人坐的状态置位坐下
    //         for (i = 0; i < BaseGameData.players.length; i++) {
    //             index = this.getPlayerUIBySeatId(BaseGameData.players[i].seatid);
    //             if (index) {
    //                 this._playerUis[index].status = PlayerInGameUI.STATUS_ALREADY_SIT;
    //                 this._playerUis[index].data = BaseGameData.players[i];
    //             }
    //         }
    //         //如果自己在桌子上，没人坐的座位设置为空
    //         if (BaseGameData.selfSeatid) {
    //             for (i = 1; i < this._playerUis.length; i++) {
    //                 if (this._playerUis[i].status == PlayerInGameUI.STATUS_CAN_SIT)
    //                     this._playerUis[i].status = PlayerInGameUI.STATUS_EMPTY;
    //             }
    //         }
    //         //如果自己不在桌子上，没人坐的座位设置为可以坐下
    //         else {
    //             for (i = 1; i < this._playerUis.length; i++) {
    //                 if (this._playerUis[i].status == PlayerInGameUI.STATUS_EMPTY)
    //                     this._playerUis[i].status = PlayerInGameUI.STATUS_CAN_SIT;
    //             }
    //         }
    //     }
    //     else {
    //         index = this.getPlayerUIBySeatId(seatid);
    //         if (index) {
    //             var playerData: PlayerData = BaseGameData.getPlayerDataByUid(uid);
    //             if (playerData.seatid > 0) {
    //                 this._playerUis[index].status = PlayerInGameUI.STATUS_ALREADY_SIT;
    //                 this._playerUis[index].data = playerData;
    //             }
    //             else {
    //                 if (BaseGameData.selfSeatid)
    //                     this._playerUis[index].status = PlayerInGameUI.STATUS_EMPTY;
    //                 else
    //                     this._playerUis[index].status = PlayerInGameUI.STATUS_CAN_SIT;
    //             }
    //         }
    //     }
    // }
    /**
     * 获取对应seatid的UI  如果自己在桌子上，最下方是自己，否则，最下方是1号位玩家
     */
    TablePage.prototype.getPlayerUIBySeatId = function (seatid) {
        if (seatid) {
            if (BaseGameData.selfSeatid) {
                var minus = seatid - BaseGameData.selfSeatid + 1;
                if (minus <= 0)
                    minus += BaseGameData.maxPlayer;
                return minus;
            }
            else
                return seatid;
        }
        else
            return 0;
    };
    TablePage.prototype.onStandupRepHandler = function (msg) {
        if (msg.result)
            HintCtrl.instance.show(GameConfig.language.standup_fail);
    };
    /**
     * 玩家站起
     */
    TablePage.prototype.onStandupNtfHandler = function (msg) {
        BaseGameData.onStandupNtfHandler(msg);
        this.changeAllSeatToSeat();
        // this.setPlayerUIStatus(msg.uid == server.uid, msg.uid, msg.seatid);
        // for (var i: number = 1; i < this._playerUis.length; i++) {
        //     this._playerUis[i].checkIsGameing();
        // }
        if (msg.uid == server.uid) {
            GameLogic.selfData.game_code = 0;
        }
        Dispatcher.dispatch(EventNames.MENU_CHECK);
    };
    TablePage.prototype.onStartTableRepHandler = function (msg) {
        if (msg.result)
            HintCtrl.instance.show(GameConfig.language.start_table_fail);
    };
    /**
     * 桌子开始
     */
    TablePage.prototype.onStartTableNtfHandler = function (msg) {
        Dispatcher.dispatch(EventNames.MENU_CHECK);
    };
    /**
     * 桌子即将结束
     */
    TablePage.prototype.onTableWillEndNtfHandler = function (msg) {
        GameLogic.selfData.game_code = 0;
        var text = "房间已解散";
        if (BaseGameData.divide && BaseGameData.selfSeatid) {
            text = "房间已解散,<br>返还" + BaseGameData.divide + "钻石";
        }
        AlertInGameCtrl.instance.show(text, this.back, null, false);
    };
    TablePage.prototype.back = function () {
        AnimationManager.instance.endAnimations();
        Laya.timer.clearAll(this);
        Laya.Tween.clearAll(this);
        Utils.backToMenu();
    };
    TablePage.prototype.onPlayerReadyRepHandler = function (msg) {
        if (msg.result)
            HintCtrl.instance.show(GameConfig.language.player_ready_fail);
    };
    TablePage.prototype.onPlayerReadyNtfHandler = function (msg) {
        BaseGameData.onPlayerReadyNtfHandler(msg);
        if (msg.seatid == BaseGameData.selfSeatid) {
            this._tablePop._next.visible = false;
            this._tablePop._wait.visible = false;
            if (BaseGameData.isTableStart) {
                this._tablePop._wait.visible = true;
            }
        }
    };
    /**
     * 发表情
     * msg.emoticon_num
     * msg.seatid
     */
    TablePage.prototype.onEmoticonNtfHandler = function (msg) {
    };
    TablePage.prototype.onUseGoodsRepHandler = function (msg) {
        if (msg.result)
            HintCtrl.instance.show(GameConfig.language.use_goods_fail);
    };
    /**
     * 使用道具
     * msg.id
     * msg.use_seatid
     * msg.target_seatid
     */
    TablePage.prototype.onUseGoodsNtfHandler = function (msg) {
    };
    TablePage.prototype.onGameStartNtfHandler = function (msg) {
        this._voteNtfmsg = null;
        BaseGameData.onGameStartNtfHandler(msg);
        var i;
        // if (!this._playerUis) {
        //     this._playerUis = [null];
        //     for (i = 1; i <= BaseGameData.maxPlayer; i++) {
        //         var playerUI: PlayerInGameUI = new PlayerInGameUI();
        //         playerUI.index = i;
        //         playerUI.clear();
        //         this._playerUis.push(playerUI);
        //         this._tablePop._box.addChild(playerUI);
        //     }
        // }
        for (i = 0; i < msg.players.length; i++) {
            this.onPlayerInfoNtfHandler(msg.players[i]);
        }
        // for (var i: number = 1; i < this._playerUis.length; i++) {
        //     this._playerUis[i].checkIsGameing();
        // }
        PlayerManager.instance.moveToGameStart(false);
        this.setTableInfo();
        Dispatcher.dispatch(EventNames.MENU_CHECK);
    };
    /**
     * 结算 积分结算这里处理,win_score表示当局输赢积分，下面两项游戏自己处理逻辑
     * msg.win_type
     * msg.table_end
     */
    TablePage.prototype.onGameEndNtfHandler = function (msg) {
        BaseGameData.onGameEndNtfHandler(msg);
        // for (var i: number = 1; i < this._playerUis.length; i++) {
        //     this._playerUis[i].checkIsGameing();
        // }
    };
    /**
     * 实时战绩，已将info保存到每个玩家
     */
    TablePage.prototype.onRealTimeRecordRepHandler = function (msg) {
        BaseGameData.onRealTimeRecordRepHandler(msg);
    };
    TablePage.prototype.onOfflineNtfHandler = function (msg) {
        BaseGameData.onOfflineNtfHandler(msg);
    };
    TablePage.prototype.onReconnectInfoHandler = function (msg) {
        // msg.gameplayer[0].cards[0].cards = [40,41,42,50,51,52,60,61,62,70,71,72,100,101];
        // this.removeSeatViews()
        // this.initSeatViews()
        BaseGameData.onReconnectInfoHandler(msg);
        PlayerManager.instance.moveToGameStart(false);
        Dispatcher.dispatch(EventNames.MENU_CHECK);
    };
    TablePage.prototype.onShowInfoNtfHandler = function (msg) {
    };
    TablePage.prototype.onDetailNtfHandler = function (msg) {
    };
    TablePage.prototype.onTableDataNtfHandler = function (msg) {
        BaseGameData.onTableDataNtfHandler(msg);
    };
    /**
     * 桌子结束
     */
    TablePage.prototype.onTableEndNtfHandler = function (msg) {
        BaseGameData.onTableEndNtfHandler(msg);
        Laya.timer.once(2100, this, function () {
            if ((!DialogManager.instance.hasDialog("GAME_END") && !poker.GameEndWinCtrl.instance.parent && !poker.GameEndLoseCtrl.instance.parent) || BaseGameData.currHandCount < BaseGameData.totalHandCount) {
                if (this.screenMode == Laya.Stage.SCREEN_VERTICAL) {
                    TableEndShuCtrl.instance.show(BaseGameData.tableEndInfo);
                }
                else {
                    //TableEndCtrl.instance.show(BaseGameData.tableEndInfo)
                    this._tablePop._btnCheckResult.visible = true;
                    this._tablePop._next.visible = false;
                    this._tablePop._wait.visible = false;
                }
            }
        });
        GameLogic.selfData.game_code = 0;
        AlertDissolveCtrl.instance.hide();
        // ReportCtrl.instance.show(ReportCtrl.TYPE_GAME_END, msg);
    };
    TablePage.prototype.onPlayerChatNtfHandler = function (msg) {
        var player = BaseGameData.getPlayerDataByUid(msg.uid);
        if (msg.chatType == GameDef.CHAT_TYPE.RECORD) {
            if (msg.uid != server.uid) {
                var tmp = msg.chatContent.split(";");
                var time = tmp[0];
                var chatContent = tmp[1];
                if (player && player.seatid)
                    RecordManager.instance.downloadVoice(chatContent, player.seatid, "", time);
                else {
                    webService.getUserInfo(msg.uid, function (response) {
                        if (response.code == 0)
                            RecordManager.instance.downloadVoice(chatContent, 0, response.nickname, time);
                    });
                }
            }
        }
        else {
            if (player && player.seatid) {
                // var index: number = this.getPlayerUIBySeatId(player.seatid);
                // this._playerUis[index].playChat(msg)
                PlayerManager.instance.playChat(player.seatid, msg);
            }
        }
    };
    TablePage.prototype.onPlayRecord = function (seatid, nickname) {
        if (seatid) {
            var player = BaseGameData.getPlayerDataBySeatid(seatid);
            if (player) {
                PlayerManager.instance._players[seatid].playChat({ chatType: GameDef.CHAT_TYPE.RECORD });
            }
        }
        else {
            this.showChatVisiter(nickname);
        }
    };
    TablePage.prototype.showChatVisiter = function (nickname) {
        Laya.Tween.clearTween(this._tablePop._chatVisiter);
        this._tablePop._chatVisiter.visible = true;
        this._tablePop._chatVisiter._labNickname.text = nickname;
        this._tablePop._chatVisiter.y = -this._tablePop._chatVisiter.height;
        Laya.Tween.to(this._tablePop._chatVisiter, { y: 0 }, 300);
        this._tablePop._chatVisiter.ani1.play(1, true);
    };
    TablePage.prototype.stopChatVisiter = function (needTween) {
        var _this = this;
        if (needTween === void 0) { needTween = true; }
        log("stopChatVisiter");
        if (this._tablePop && this._tablePop._chatVisiter) {
            Laya.Tween.clearTween(this._tablePop._chatVisiter);
            this._tablePop._chatVisiter.ani1.stop();
            if (needTween)
                Laya.Tween.to(this._tablePop._chatVisiter, { y: -this._tablePop._chatVisiter.height }, 300, null, Laya.Handler.create(this, function () { _this._tablePop._chatVisiter.visible = false; }));
            else
                this._tablePop._chatVisiter.visible = false;
        }
    };
    TablePage.prototype.onVoiceChange = function (memberID, status, roomName) {
        var playerData = BaseGameData.getPlayerDataByVoiceMemberid(memberID);
        if (playerData) {
            if (status == 98)
                playerData.isVoiceForbidden = false;
            else if (status == 99)
                playerData.isVoiceForbidden = true;
            PlayerManager.instance._players[playerData.seatid].voiceChanged(status);
        }
        // this._playerUis[1].voiceChanged(status);
    };
    /**
     * 退到上一个场景
     */
    TablePage.prototype.exit = function () {
    };
    TablePage.prototype.onStageTouch = function (e) {
        if (e.type == Laya.Event.CLICK) {
            switch (e.target) {
                case this._menu._btnMenu:
                    break;
                default:
                    this._menu._box.visible = false;
                    Dispatcher.dispatch("handview", [e]);
                    break;
            }
        }
        else if (e.type == Laya.Event.MOUSE_UP) { // || e.type == Laya.Event.MOUSE_OUT
            if (this._isWxRecording) {
                var time = this._recordUI.stop();
                this._menu._btnMicrophone.off(Laya.Event.MOUSE_OVER, this, this.onBtnTouch);
                this._menu._btnMicrophone.off(Laya.Event.MOUSE_OUT, this, this.onBtnTouch);
                if (time >= 1000) {
                    RecordManager.instance.stopRecord(this._isWxRecordSend, BaseGameData.selfSeatid, GameLogic.selfData.nickname, time);
                }
                else {
                    RecordManager.instance.stopRecord(false, BaseGameData.selfSeatid, "");
                    HintCtrl.instance.show(GameConfig.language.record_short);
                }
                this._isWxRecording = false;
                this._isWxRecordSend = false;
            }
        }
    };
    /**
     * 一般按钮touch
     */
    TablePage.prototype.onBtnTouch = function (e) {
        var _this = this;
        if (this.hideChatDialog())
            return;
        switch (e.currentTarget) {
            case this._tablePop._tuoguan:
                server.matchBackReq();
                this._tablePop._tuoguan.visible = false;
                break;
            case this._tablePop._btnRealTime:
                // ReportCtrl.instance.show(ReportCtrl.TYPE_REAL_TIME);
                SetupCtrl.instance.show(false);
                break;
            case this._menu._btnChat:
                SoundManager.instance.playBtnEffect(SoundConfig.SOUND_BTN_NORMAL);
                ChatCtrl.instance.show();
                // ShopCtrl.instance.show();
                break;
            case this._tablePop._btnTest:
                server.setDeckCrads();
                break;
            case this._tablePop._inviteUI._btnInvite:
                Native.instance.share();
                break;
            case this._menu._btnMicrophone:
                if (e.type == Laya.Event.MOUSE_DOWN) {
                    SoundManager.instance.playBtnEffect(SoundConfig.SOUND_BTN_NORMAL);
                    this._isWxRecording = true;
                    this._isWxRecordSend = true;
                    this._recordUI.show();
                    RecordManager.instance.startRecord(function () {
                        _this._recordUI.start();
                        if (!_this._isWxRecording) {
                            _this._recordUI.stop();
                            RecordManager.instance.stopRecord(false, BaseGameData.selfSeatid, "");
                        }
                    });
                    this._menu._btnMicrophone.on(Laya.Event.MOUSE_OVER, this, this.onBtnTouch);
                    this._menu._btnMicrophone.on(Laya.Event.MOUSE_OUT, this, this.onBtnTouch);
                }
                else if (e.type == Laya.Event.MOUSE_OVER) {
                    this._isWxRecordSend = true;
                    this._recordUI.upShow = true;
                }
                else if (e.type == Laya.Event.MOUSE_OUT) {
                    this._isWxRecordSend = false;
                    this._recordUI.cancelShow = true;
                }
                break;
            case this._menu._checkBox_huatong:
                SoundManager.instance.playBtnEffect(SoundConfig.SOUND_BTN_NORMAL);
                this._tablePop._aniTip.ani1.stop();
                this._tablePop._aniTip.removeSelf();
                localStorage.setItem("ssyy_tip_2", "1");
                if (BaseGameData.selfSeatid) {
                    this._menu._checkBox_huatong.mouseEnabled = false;
                    RealTimeSpeechManager.instance.switchMic();
                }
                else
                    HintCtrl.instance.show(GameConfig.language.realtime_mic);
                break;
            case this._menu._checkBox_laba:
                this._menu._checkBox_laba.mouseEnabled = false;
                RealTimeSpeechManager.instance.switchSpeaker();
                break;
            case this._menu._btnMatchRecord:
                DialogManager.instance.callDialog("MATCH_RECORD");
                server.matchRecordReq();
                break;
            case this._tablePop._btnBack:
                Dispatcher.dispatch(EventNames.MENU_TOUCH, [null, 2]);
                SoundManager.instance.playBtnEffect(1);
                break;
            case this._tablePop._btnEnd:
                Dispatcher.dispatch(EventNames.MENU_TOUCH, [null, 1]);
                SoundManager.instance.playBtnEffect(1);
                break;
            case this._menu._btnRestart:
                var isAutoLogin = LoginManager.instance.orderedLogin(true);
                if (!isAutoLogin)
                    AppControl.getInstance().showPage(LoginPage, LoginPage.PARAMS0_FIRST_ENTER);
                break;
            case this._tablePop._btnCheckResult:
                //查看战绩
                TableEndCtrl.instance.show(BaseGameData.tableEndInfo);
                break;
        }
    };
    TablePage.prototype.setMenu = function () {
    };
    TablePage.prototype.onVoteRepHandler = function (msg) {
        if (msg.result == 99) {
            HintCtrl.instance.show("解散太频繁");
        }
    };
    TablePage.prototype.onVoteNtfHandler = function (msg) {
        console.info(msg);
        if (msg.voteType == 1) {
            if (!msg.voteResult) {
                console.log("=================================AlertDissolveCtrl   show");
                AlertDissolveCtrl.instance.show("", this.onDisReq, msg.timeout, false, "common/title_disglove.png", msg.result);
                this._voteNtfmsg = msg;
                //log(BaseGameData.players)
            }
        }
    };
    TablePage.prototype.onPlayerInfoComleted = function () {
        console.log("=================================onPlayerInfoComleted()");
        if (this._voteNtfmsg && AlertDissolveCtrl.instance.isVisiable()) {
            this.onVoteNtfHandler(this._voteNtfmsg);
        }
    };
    TablePage.prototype.onPlayerTableStatusNtfHandler = function (msg) {
        BaseGameData.onPlayerTableStatusNtfHandler(msg);
        if (msg.uid == server.uid) {
            var player = BaseGameData.getPlayerDataByUid(msg.uid);
            if (player && player.isLeave) {
                this._tablePop._tuoguan.visible = true;
            }
            else {
                this._tablePop._tuoguan.visible = false;
            }
        }
        // let play = BaseGameData.getPlayerDataByUid(msg.uid)
        // let offline = msg.status >> 1
        // let leave = msg.status >> 2
    };
    TablePage.prototype.onDisReq = function (result) {
        server.playerVoteReq(1, 2, result);
    };
    TablePage.prototype.PlaySheet = function () {
        var view = new PlaySheetView();
        this.addPopup(view);
        view.width = this._table.width;
        view.init(this._sheetData);
    };
    TablePage.prototype.onMic = function (type, code) {
        if (code == 0)
            this._menu._checkBox_huatong.selected = type == "off";
        else {
            var isOpen = localStorage.getItem(RealTimeSpeechManager.CONST_MIC);
            if (isOpen == "on")
                this._menu._checkBox_huatong.selected = false;
            else
                this._menu._checkBox_huatong.selected = true;
        }
        this._menu._checkBox_huatong.mouseEnabled = true;
        this._menu._checkBox_huatong.visible = true;
        if (localStorage.getItem("ssyy_tip_2") == "1") {
            this._tablePop._aniTip.removeSelf();
        }
        else {
            this._tablePop._aniTip.ani1.play(1, true);
            this._tablePop._aniTip.visible = true;
        }
    };
    TablePage.prototype.onSpeaker = function (type, code) {
        if (code == 0)
            this._menu._checkBox_laba.selected = type == "off";
        else {
            var isOpen = localStorage.getItem("r_speaker");
            if (!isOpen || isOpen == "on")
                this._menu._checkBox_laba.selected = false;
            else
                this._menu._checkBox_laba.selected = true;
        }
        this._menu._checkBox_laba.visible = true;
        this._menu._checkBox_laba.mouseEnabled = true;
    };
    TablePage.prototype.hideChatDialog = function () {
        if (!ChatCtrl.instance.parent)
            return false;
        return ChatCtrl.instance.hide();
    };
    return TablePage;
}(AppPage));
//# sourceMappingURL=TablePage.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BaZhangPage = /** @class */ (function (_super) {
    __extends(BaZhangPage, _super);
    function BaZhangPage() {
        var _this = _super.call(this) || this;
        _this._handCardView = [];
        _this._winScore = [];
        _this._isWuPaopai = false;
        _this.name = "BaZhangPage";
        _this.screenMode = Laya.Stage.SCREEN_HORIZONTAL;
        _this._loadDatas = _this._loadDatas.concat([{ url: "res/config/bazhang.json", type: Laya.Loader.JSON }, { url: ResourceConfig.SHEET_POKER_CARD_BIG, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_POKER_CARD_SMALL, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_BAZHANG, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_BAZHANG_N, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_BAZHANG_S, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_BAZHANG_CHAT, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_BAZHANG_ANI, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_GAME_END, type: Laya.Loader.ATLAS },
            //新增
            { url: ResourceConfig.SHEET_BZ_BTWORD, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_BZ_SHOUPAI, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_BZ_SYSTEM, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_BZ_SELECTCARD, type: Laya.Loader.ATLAS }
        ]);
        AppPage.register(BaZhangPage, _this._loadDatas);
        return _this;
    }
    //protected _tableInfo :ui.components.table.TableInfoUI
    //OptCardView =bazhang.OptCardView
    BaZhangPage.prototype.init = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        GameDef.CHAT_POS = [
            [],
            [2, 1],
            [2, 1, 2],
            [2, 1, 1, 2],
            [2, 1, 1, 2, 2],
            [2, 1, 1, 1, 2, 2]
        ];
        PlayerManager.instance.registerClass(bazhang.GamePlayerView);
        SoundManager.instance.language = 0;
        BaseGameData.tablelayout = bazhang.GameDataLayOut;
        DialogManager.instance.addDialog("HISTORY", bazhang.HistoryDialog);
        Utils.injectProp(GameConfig.cfgAudio, Laya.loader.getRes("res/config/bazhang.json"));
        _super.prototype.init.apply(this, params);
        Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_WIDTH;
        AppControl.getInstance().stage.width = 1280;
        Laya.stage.setScreenSize(Laya.Browser.clientWidth * Laya.Browser.pixelRatio, Laya.Browser.clientHeight * Laya.Browser.pixelRatio);
        this._tablePop.centerY = 0;
        this._tablePop.anchorX = 0.5;
        this._tablePop.anchorY = 0.5;
        this._table.anchorX = 0.5;
        this._table.anchorY = 0.5;
        this._table.centerY = 0;
        this._tablePop._wait.centerX = 0;
        this._tablePop._wait.centerY = 0;
        this._tablePop._next.centerX = 0;
        this._tablePop._next.centerY = 0;
        //添加左上角房间信息
        // this._tableInfo = new ui.components.table.TableInfoUI()
        // this._tableInfo.top = 10
        // this._tableInfo.left = 10
        // this._table.addChild(this._tableInfo)
        //隐藏gamelogo
        this._table._logo.visible = false;
        this._tablePop._btnTest.visible = false;
        this.initEvent();
        this._table._bg.skin = "res/bg/bg_game_bz.png";
        //this._table._bg.width = 850
        this._tablePop._inviteUI.centerY = 0;
        if (BaseGameData.isRecord) {
            this.PlaySheet();
        }
    };
    BaZhangPage.prototype.initEvent = function () {
        _super.prototype.initEvent.call(this);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_PLAYER_OPT_NTF, this, this.onPlayerOptNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_PLAYER_OPT_REP, this, this.onPlayerOptRepHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_CARD_MOVE_NTF, this, this.onCardMoveNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_GAME_START_NTF, this, this.onGameStartNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_GAME_END_NTF, this, this.onGameEndNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_SHOW_CARDS_NTF, this, this.onShowCardsNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_RECONNECT_INFO, this, this.onReconnectNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_SHOW_INFO_NTF, this, this.onShowInfoNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_DETAIL_NTF, this, this.onDetailNtfHandler);
        EventManager.instance.registerOnObject(this, server, "game.updateTable", this, this.updateTable);
        EventManager.instance.registerOnObject(this, AppControl.getInstance().stage, Laya.Event.RESIZE, this, this.onResize);
    };
    BaZhangPage.prototype.onResize = function (e) {
        _super.prototype.onResize.call(this, e);
        if (!this._scale || Laya.stage.width / Laya.stage.height != this._scale) {
            if (!this._scale)
                this._scale = Laya.stage.width / Laya.stage.height;
            if (Laya.stage.width / Laya.stage.height < 1280 / 720) {
                Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_WIDTH;
                //20180322  屏蔽麻将重新设置舞台宽，保证分辨率为1280X720
                AppControl.getInstance().stage.width = 1280;
                this._table.width = this._tablePop.width = AppControl.getInstance().stage.width;
            }
            else {
                Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_HEIGHT;
                AppControl.getInstance().stage.height = 720;
                this._table.width = this._tablePop.width = AppControl.getInstance().stage.width;
            }
            this._scale = Laya.stage.width / Laya.stage.height;
            Laya.stage.setScreenSize(Laya.Browser.clientWidth * Laya.Browser.pixelRatio, Laya.Browser.clientHeight * Laya.Browser.pixelRatio);
        }
        if (this._ruleView) {
            this._ruleView.left = AppControl.getInstance().stage.width > TableLayout.STAGE.width ? (AppControl.getInstance().stage.width - TableLayout.STAGE.width) / 2 + 100 : 100;
        }
    };
    BaZhangPage.prototype.onDetailNtfHandler = function (msg) {
        if (msg.detailType == GameDef.DETAIL_TYPE.WIN_DEATIL) {
            bazhang.GameData._scoreInfo = msg.playerInfo;
            if (msg.noAni)
                return;
            AnimationManager.instance.addAnimation(function () {
                if (this._timeCircleView) {
                    this._timeCircleView.clear();
                    this._timeCircleView.removeSelf();
                    this._timeCircleView = null;
                }
                SoundManager.instance.playEffect("start_compare", 1);
                this.playStartCompare(msg);
                // this.playWinDetail(msg.playerInfo)
            }.bind(this), null);
        }
        else if (msg.detailType == GameDef.DETAIL_TYPE.WIN_SPECIAL) {
            bazhang.GameData._specialInfo = msg.playerInfo;
            if (msg.noAni)
                return;
            SoundManager.instance.playEffect("special", 1);
            this.playWinSpecial(msg.playerInfo);
        }
        else if (msg.detailType == GameDef.DETAIL_TYPE.GUN_DETAIL) {
            bazhang.GameData._gunInfo = msg.playerInfo;
            if (msg.noAni)
                return;
            this.playGunEffect(msg.playerInfo);
        }
        else if (msg.detailType == GameDef.DETAIL_TYPE.SHOW_RULE) {
            this.showRule(msg.playerInfo);
        }
        else if (msg.detailType == GameDef.DETAIL_TYPE.HISTORY_DETAIL) {
            // HistoryCtrl.instance.updateData(msg.playerInfo, msg.globalInfo)
            if (DialogManager.instance.hasDialog("HISTORY")) {
                DialogManager.instance._dialogList["HISTORY"].updateData(msg.playerInfo, msg.globalInfo);
            }
        }
    };
    BaZhangPage.prototype.playStartCompare = function (msg) {
        // AniEffectManager.instance.playEffectOnce(this._table, ResourceConfig.ANI_START_COMPARE,1100,{x:Laya.stage.width/2, y:Laya.stage.height/2},function(){
        //     this.playWinDetail(msg.playerInfo)
        //     // AnimationManager.instance.animationOver()
        // }.bind(this))
        SkeletonAniManager.instance.playSkeletonAni(this._table, "res/bazhang/skeletonAni/BZ_bipai/BZ_bipai.sk", false, 0, { x: this._table.width / 2, y: this._table.height / 2 }, function () {
            log("比牌开始");
            this.playWinDetail(msg.playerInfo);
            //AnimationManager.instance.animationOver()
        }.bind(this));
    };
    BaZhangPage.prototype.showRule = function (info) {
        if (BaseGameData.isRecord) {
            if (this._ruleView) {
                this._ruleView.removeSelf();
                this._ruleView = null;
            }
        }
        if (!this._ruleView) {
            this._ruleView = new RuleInfoView(info[0].info);
            this._tablePop.addChild(this._ruleView);
            this._ruleView._info.sizeGrid = null;
            this._ruleView.anchorX = 0;
            this._ruleView.anchorY = 0;
            this._ruleView._info.width = 357;
            this._ruleView._info.height = 93;
            this._ruleView.top = 10;
            this._ruleView.left = this._ruleView.left = AppControl.getInstance().stage.width > TableLayout.STAGE.width ? (AppControl.getInstance().stage.width - TableLayout.STAGE.width) / 2 + 100 : 100;
            this._ruleView._info.skin = "tongyong/table_info_bg.png";
            Utils.injectProp(this._ruleView._wanfaInfo, bazhang.GameDataLayOut.wanfa_LAYOUT);
            this._ruleView._ruleBtn.visible = false;
            this._ruleView._wanfaInfo.visible = true;
            this._isWuPaopai = this._ruleView.getIsWuPaoPai();
        }
    };
    BaZhangPage.prototype.playGunEffect = function (info) {
        var callback = function () {
            AnimationManager.instance.animationOver();
        };
        AnimationManager.instance.addAnimation(function () {
            SoundManager.instance.playEffect("daqiang1", 1);
            SkeletonAniManager.instance.playSkeletonAni(this._table, "res/bazhang/skeletonAni/BZ_daqiang/daqiang.sk", false, 0, { x: this._table.width / 2, y: this._table.height / 2 }, function () {
                log("开始打枪");
                AnimationManager.instance.animationOver();
            });
        }.bind(this), null);
        var _loop_1 = function () {
            var v = info[k];
            if (!this_1._handCardView[v.seatid - 1]) {
                callback();
                return "break";
            }
            var gunScore = 0;
            AnimationManager.instance.addAnimation(function () {
                //SoundManager.instance.playEffect("daqiang1", 1)
                for (var m in v.info) {
                    var toInfo = v.info[m];
                    this._handCardView[v.seatid - 1].playGun(m, toInfo.name, parseInt(m) == (v.info.length - 1));
                    if (parseInt(k) == info.length - 1 && parseInt(m) == v.info.length - 1) {
                        this._handCardView[toInfo.name - 1].playBullet(toInfo.value, m, callback);
                    }
                    else {
                        this._handCardView[toInfo.name - 1].playBullet(toInfo.value, m);
                    }
                    gunScore += toInfo.value || 0;
                }
                this._handCardView[v.seatid - 1].showGunScore(gunScore);
            }.bind(this_1), null);
        };
        var this_1 = this;
        for (var k in info) {
            var state_1 = _loop_1();
            if (state_1 === "break")
                break;
        }
    };
    BaZhangPage.prototype.playWinSpecial = function (info) {
        for (var k in info) {
            var v = info[k];
            this._handCardView[v.seatid - 1].showSpecial();
        }
        AnimationManager.instance.addAnimation(function () {
            bazhang.WinSpecialView.instance.show(info);
        }.bind(this), null);
    };
    BaZhangPage.prototype.playWinDetail = function (info) {
        var callback = function () {
            AnimationManager.instance.animationOver();
        };
        for (var k in info) {
            var v = info[k];
            if (parseInt(k) == info.length - 1) {
                this._handCardView[v.seatid - 1].showWinDetail(v.info, callback);
            }
            else {
                this._handCardView[v.seatid - 1].showWinDetail(v.info);
            }
        }
    };
    //游戏开始
    BaZhangPage.prototype.onGameStartNtfHandler = function (msg) {
        _super.prototype.onGameStartNtfHandler.call(this, msg);
        // this.setTableInfo();//zhc新增
        AnimationManager.instance.endAnimations();
        bazhang.GameData.clearData();
        this.initGameUI();
        if (this._ruleView) {
            this._ruleView.updateRound();
        }
    };
    BaZhangPage.prototype.initGameUI = function () {
        this.initCardLayout();
        this.initGameView();
    };
    BaZhangPage.prototype.initCardLayout = function () {
        // bazhang.GameDataLayOut.DEAL_VIEW_LAYOUT = [[
        //     {x:Laya.stage.width/2-100, y:Laya.stage.height - 150},
        // ],[
        //     {x:Laya.stage.width/2-100 , y:Laya.stage.height - 150},
        //     {x:Laya.stage.width/2 - 120, y: 200},
        // ],[
        //     {x:Laya.stage.width/2-100, y:Laya.stage.height - 150},
        //     {x:Laya.stage.width - 180, y:Laya.stage.height/2-50},
        //     {x:40, y:Laya.stage.height/2-50}
        // ],[
        //     {x:Laya.stage.width/2-100, y:Laya.stage.height - 150},
        //     {x:Laya.stage.width - 180, y:Laya.stage.height/2-50},
        //     {x:Laya.stage.width/2 - 50, y: 200},
        //     {x:80, y:Laya.stage.height/2-50}
        // ]]
    };
    BaZhangPage.prototype.initGameView = function () {
        this.clearGameUI();
        this.clearGame();
        this.initCardsView();
        if (!this._historyBtn) {
            this._historyBtn = new component.BaseButton("shisanshui/history.png");
            this._table.addChild(this._historyBtn);
            this._historyBtn.stateNum = 2;
            Utils.injectProp(this._historyBtn, bazhang.GameDataLayOut.HISTORY_LAYOUT);
            this._historyBtn.on(Laya.Event.CLICK, this, this.showHistory);
            //暂时隐藏
            this._historyBtn.visible = false;
        }
    };
    BaZhangPage.prototype.showHistory = function () {
        // HistoryCtrl.instance.show()
        var dialog = DialogManager.instance.callDialog("HISTORY");
        dialog.show();
    };
    BaZhangPage.prototype.clearGameUI = function () {
        for (var k in this._winScore) {
            var v = this._winScore[k];
            v.removeSelf();
        }
        if (this._dealCardView) {
            this._dealCardView.clear();
            this._dealCardView.removeSelf();
            this._dealCardView = null;
        }
        for (var k in this._handCardView) {
            var view = this._handCardView[k];
            view.clearAll();
            view.removeSelf();
        }
        if (this._timeCircleView) {
            this._timeCircleView.clear();
            this._timeCircleView.removeSelf();
            this._timeCircleView = null;
        }
        this._handCardView = [];
        bazhang.OptCardView.instance.hide();
    };
    BaZhangPage.prototype.clearGame = function () {
        BaseGameData.optSeatid = 0;
        BaseGameData.winDetailArr = [];
        BaseGameData.winDetailObj = {};
        BaseGameData.winCard = 0;
        BaseGameData.winSeatid = 0;
    };
    // message Score {
    // 	required uint32 seatid = 1;
    // 	optional int32 	win_score = 2;
    // 	optional int32 	score = 3;
    // }
    // optional uint32 win_type = 1;
    // repeated Score scores = 2;
    // optional uint32 table_end = 3;
    BaZhangPage.prototype.onTableInfoNtfHandler = function (msg) {
        _super.prototype.onTableInfoNtfHandler.call(this, msg);
        this.initGameUI();
        // this._tableInfo._text_roomId.text = BaseGameData.tableid + "";
        // this._tableInfo._text_round.text = BaseGameData.currHandCount + "/" + BaseGameData.totalHandCount;
        Laya.timer.once(1500, this, function () {
            //     this.onGameStartNtfHandler({"currHandCount":1,"leftCard":50,"btnSeatid":0,"players":[{"uid":10001,"seatid":1,"score":1},{"uid":10002,"seatid":2,"score":1},{"uid":10003,"seatid":3,"score":1},{"uid":10004,"seatid":4,"score":1}]})
            //     this.onShowInfoNtfHandler({"type":GameDef.ShowInfoType.START_TIME,"info":[]})
            //     this.onShowInfoNtfHandler({"type":GameDef.ShowInfoType.START_GAME,"info":[]})
            //     this.onShowInfoNtfHandler({"type":GameDef.ShowInfoType.DEAL_CARDS,"info":[13,13,13,13]})
            //     this.onCardMoveNtfHandler({"toSeatid":1,"cards":[40,41,42,43,50,51,52,60,61,82,93,70,101],"opttype":GameDef.OptType.MJ_DEAL})
            //     this.onPlayerOptNtfHandler({"seatid":1,"cards":[40,41,42,43,50,51,52,60,61,82,93,70,101]})
            //     this.onShowCardsNtfHandler({"showncards":[{"seatid":1,"handcards":[40,41,42,43,50,51,52,60,61,82,93,70,101]},{"seatid":2,"handcards":[112,62,91,82,102,110,101,41,42,111,131,143,51]},{"seatid":3,"handcards":[53,142,30,71,40,141,23,33,121,140,22,73,123]},{"seatid":4,"handcards":[72,103,122,130,113,61,60,80,63,31,81,133,32]}]})
            //     this.onDetailNtfHandler({"detailType":1,"playerInfo":[{"seatid":1,"info":[{"name":2,"value":3},{"name":4,"value":5},{"name":1,"value":-3},{"name":8},{"name":1,"value":-3},{"name":1}]},{"seatid":2,"info":[{"name":1,"value":-3},{"name":1},{"name":3,"value":1},{"name":3},{"name":1,"value":3},{"name":1}]},{"seatid":3,"info":[{"name":1,"value":1},{"name":1},{"name":2,"value":-1},{"name":2},{"name":1,"value":-1},{"name":1}]},{"seatid":4,"info":[{"name":1,"value":-1},{"name":1},{"name":4,"value":3},{"name":8},{"name":1,"value":1},{"name":1}]}]})
            //     this.onDetailNtfHandler({"detailType":3,"playerInfo":[{"seatid":1,"info":[{"name":1000,"value":3}]}]})
            //     this.onDetailNtfHandler({"detailType":4,"playerInfo":[{"seatid":1,"info":[{"name":2,"value":3},{"name":3,"value":3},{"name":4,"value":3}]},
            //                                                          {"seatid":2,"info":[{"name":1,"value":3},{"name":3,"value":3},{"name":4,"value":3}]},
            //                                                          {"seatid":3,"info":[{"name":1,"value":3},{"name":2,"value":3},{"name":4,"value":3}]},
            //                                                          {"seatid":4,"info":[{"name":1,"value":3},{"name":2,"value":3},{"name":3,"value":3}]}]})
            //     this.onShowInfoNtfHandler({"type":GameDef.ShowInfoType.QUAN_LEI_DA,"info":[]})                                                    
            //     this.onGameEndNtfHandler({"win_type":1,"scores":[{"seatid":1,"winScore":20,"score":20},{"seatid":2,"winScore":-40,"score":20},{"seatid":3,"winScore":30,"score":20},{"seatid":4,"winScore":-20,"score":20}]})
            // 
            //this.onTableEndNtfHandler({"playerInfo":[{"uid":701989,"score":22},{"uid":560765,"score":-22}],"totalHandCount":12,"endTime":1522477986})
            //   -- test_cards = {20, 30, 40, 50, 60, 70, 80, 90} tonghualong
            // -- test_cards = {20, 30, 40, 50, 60, 70, 80, 91} long
            // -- test_cards = {20, 21, 22, 23, 60, 61, 62, 63} --zhadan
            // -- test_cards = {20, 21, 22, 23, 60, 61, 62, 70} --zhadan
            // -- test_cards = {20, 21, 30, 31, 40, 41, 50, 51} --four pair
            // -- test_cards = {20, 30, 40, 60, 70, 80, 100, 110}
            // -- test_cards = {20, 30, 40, 60, 71, 80, 121, 110}
            //    let test_cards = [20, 21, 30, 31, 40, 41, 50, 51]
            //    let xx = new bazhang.AutoSeleCards()
            //    let type = xx.specialType(test_cards)
            //    log("specialType:"+ type)
            //   let test_cards = [1,30,41]
            //    let xx = new bazhang.AutoSeleCards()
            //    let type = xx.normalType(test_cards)
            //    log("normal:"+ type)
            //BaseGameData.gameType=GameDef.GAME_TYPE.SHISANSHUI
            //this.onTableEndNtfHandler({"playerInfo":[{"uid":933244,"score":-60,"info":["胜利局数:3局","最大输赢:1分"]},{"uid":272742,"score":60,"info":["胜利局数:7局","最大输赢:13分","最大输赢:1分"]}],"totalHandCount":10,"endTime":1522820120})
            // AlertInGameCtrl.instance.show("余额不足,是否前往充值", (type: number) => {
            //                 if (type == AlertCtrl.CONFIRM) {
            //                     ShopCtrl.instance.show();
            //                 }
            //             });
            // let  cards = [71,31,1,80,111,2,122,143]
            //  bazhang.OptCardView.instance.checkNormalType()
            //bazhang.OptCardView.instance.checkBadBeat(cards)
        });
    };
    //游戏结束回调
    BaZhangPage.prototype.onGameEndNtfHandler = function (msg) {
        AnimationManager.instance.addAnimation(function () {
            BaseGameData.onGameEndNtfHandler(msg);
            for (var k in msg.scores) {
                var v = msg.scores[k];
                // this._handCardView[v.seatid-1].showGameEnd(v.winScore)
                var text = v.winScore || 0;
                var font = "font_num_15";
                if (v.winScore >= 0) {
                    text = "+" + text;
                    font = "font_num_14";
                }
                var score = new Laya.Label(text);
                this._table.addChild(score);
                score.font = font;
                var dir = Utils.getDir(v.seatid);
                var pos = bazhang.GameDataLayOut.WIN_SCORE_LAYOUT[BaseGameData.maxPlayer - 1][dir - 1];
                Utils.injectProp(score, pos);
                this._winScore.push(score);
            }
            this.setTableInfo();
            this.checkNextBtn();
            if (BaseGameData.currHandCount == BaseGameData.totalHandCount) {
                this._tablePop._next.visible = false;
            }
            AnimationManager.instance.animationOver();
        }.bind(this), null);
    };
    //单局游戏结束
    BaZhangPage.prototype.onShowCardsNtfHandler = function (msg) {
        BaseGameData.onShowCardsNtfHandler(msg);
        bazhang.OptCardView.instance.hide();
        if (this._timeCircleView) {
            this._timeCircleView.clear();
            this._timeCircleView.removeSelf();
            this._timeCircleView = null;
        }
        for (var k in msg.showncards) {
            var v = msg.showncards[k];
            var player = BaseGameData.getPlayerDataBySeatid(v.seatid);
            player.handCards = v.handcards;
            this._handCardView[v.seatid - 1].showCards(v.handcards);
        }
    };
    BaZhangPage.prototype.onPlayerOptNtfHandler = function (msg) {
        if (msg.noAni)
            return;
        AnimationManager.instance.addAnimation(function () {
            if (!this._timeCircleView) {
                this._timeCircleView = new bazhang.TimeCircleView();
                this._timeCircleView.centerX = 0;
                this._timeCircleView.centerY = 35;
                this._table.addChild(this._timeCircleView);
            }
            this._timeCircleView.start(msg.timeout);
            var player = BaseGameData.getPlayerDataBySeatid(BaseGameData.selfSeatid);
            if (player && player.handCards) {
                this._timeCircleView.visible = false;
                bazhang.OptCardView.instance.show(player.handCards, msg.timeout, this._isWuPaopai);
            }
            AnimationManager.instance.animationOver();
        }.bind(this), null);
    };
    BaZhangPage.prototype.onPlayerOptRepHandler = function (msg) {
    };
    BaZhangPage.prototype.onCardMoveNtfHandler = function (msg) {
        if (msg.opttype == GameDef.OptType.MJ_DEAL) {
            var player = BaseGameData.getPlayerDataBySeatid(msg.toSeatid);
            player.handCards = msg.cards;
        }
    };
    BaZhangPage.prototype.onReconnectNtfHandler = function (msg) {
        _super.prototype.onReconnectInfoHandler.call(this, msg);
        this.initGameUI();
        this.setHandCards();
        // for (var i: number = 1; i < this._playerUis.length; i++) {
        //     this._playerUis[i].checkIsGameing(true);
        // }
        this.setTableInfo();
    };
    BaZhangPage.prototype.setHandCards = function () {
        for (var k in BaseGameData.players) {
            var player = BaseGameData.players[k];
            if (player.handCards) {
                this._handCardView[player.seatid - 1].init();
            }
        }
    };
    //初始化手牌位置
    BaZhangPage.prototype.initCardsView = function () {
        for (var k in BaseGameData.players) {
            var player = BaseGameData.players[k];
            var view = new bazhang.HandCardView(player.seatid, player.dir);
            this._handCardView[player.seatid - 1] = view;
            this._table.addChild(view);
            var pos = bazhang.GameDataLayOut.HAND_VIEW_LAYOUT[BaseGameData.maxPlayer - 1][player.dir - 1];
            //[BaseGameData.maxPlayer-1]
            Utils.injectProp(view, pos);
        }
    };
    BaZhangPage.prototype.onShowInfoNtfHandler = function (msg) {
        if (msg.type == GameDef.ShowInfoType.DEAL_CARDS) {
            if (msg.noAni)
                return;
            //发牌动画
            AnimationManager.instance.addAnimation(function () {
                this._dealCardView = new bazhang.DealCardView(this.dealCallBack.bind(this));
                this._table.addChild(this._dealCardView);
                this._dealCardView.width = this._table.width;
                this._dealCardView.height = this._table.height;
                this._dealCardView.dealCards(msg.info);
            }.bind(this), null);
        }
        else if (msg.type == GameDef.ShowInfoType.SHOW_OPT_END) {
            //收到摆牌结束动画
            AnimationManager.instance.addAnimation(function () {
                for (var k in msg.seatid) {
                    if (msg.seatid[k] == BaseGameData.selfSeatid) {
                        if (this._timeCircleView) {
                            this._timeCircleView.visible = true;
                        }
                        bazhang.OptCardView.instance.hide();
                    }
                    var view = this._handCardView[msg.seatid[k] - 1];
                    view.updatePos();
                }
                // Laya.timer.frameOnce(3, this, function () {
                //     AlertInGameCtrl.instance.hide()
                // })
                AnimationManager.instance.animationOver();
            }.bind(this), null);
        }
        else if (msg.type == GameDef.ShowInfoType.QUAN_LEI_DA) {
            if (msg.noAni)
                return;
            //红波浪
            AnimationManager.instance.addAnimation(function () {
                SoundManager.instance.playEffect("quanleida", 1);
                SkeletonAniManager.instance.playSkeletonAni(this._table, "res/bazhang/skeletonAni/BZ_hbl/BZ_hbl.sk", false, 0, { x: this._table.width / 2, y: this._table.height / 2 }, function () {
                    log("播放红波浪动画！！！！");
                    AnimationManager.instance.animationOver();
                });
            }.bind(this), null);
        }
        else if (msg.type == GameDef.ShowInfoType.START_GAME) {
            SoundManager.instance.playEffect("start", 1);
            if (msg.noAni)
                return;
            //游戏开始动画
            AnimationManager.instance.addAnimation(function () {
                SkeletonAniManager.instance.playSkeletonAni(this._table, "res/bazhang/skeletonAni/BZ_kaishi/kaishi.sk", false, 0, { x: this._table.width / 2, y: this._table.height / 2 }, function () {
                    log("播放游戏开始动画！！！！");
                    AnimationManager.instance.animationOver();
                });
            }.bind(this), null);
        }
        else if (msg.type == GameDef.ShowInfoType.START_TIME) {
            BaseGameData.isTableStart = true;
            BaseGameData.isGameing = true;
            //倒计时开始动画
            this.setTableInfo();
            if (msg.noAni)
                return;
            AnimationManager.instance.addAnimation(function () {
                SoundManager.instance.playEffect("start_time", 1);
                var ani = new Laya.Animation();
                ani.loadAnimation(ResourceConfig.ANI_BZ_START_TIME);
                this._table.addChild(ani);
                ani.pos(this._table.width / 2, this._table.height / 2);
                ani.play(1, false);
                Laya.timer.once(4000, this, function () {
                    ani.stop();
                    ani.removeSelf();
                    AnimationManager.instance.animationOver();
                });
            }.bind(this), null);
        }
    };
    BaZhangPage.prototype.dealCallBack = function () {
        if (this._dealCardView) {
            this._dealCardView.clear();
            this._dealCardView.removeSelf();
            this._dealCardView = null;
        }
        for (var i = 0; i < BaseGameData.maxPlayer; i++) {
            if (this._handCardView[i])
                this._handCardView[i].init();
        }
        console.log("fapai jieshu==================");
        AnimationManager.instance.animationOver();
    };
    BaZhangPage.prototype.updateTable = function () {
        Laya.Tween.clearAll(this);
        Laya.timer.clearAll(this);
        AnimationManager.instance.endAnimations();
        bazhang.OptCardView.instance.hide();
        if (this._dealCardView) {
            this._dealCardView.clear();
            this._dealCardView.removeSelf();
            this._dealCardView = null;
        }
        this.initGameUI();
        // this.removeSeatViews()
        // this.initSeatViews()
        // for (var i: number = 1; i < this._playerUis.length; i++) {
        //     this._playerUis[i].checkIsGameing(true);
        // }
        for (var i = 0; i < BaseGameData.maxPlayer; i++) {
            if (this._handCardView[i])
                this._handCardView[i].init();
        }
        if (bazhang.GameData._scoreInfo) {
            for (var k in bazhang.GameData._scoreInfo) {
                var v = bazhang.GameData._scoreInfo[k];
                this._handCardView[v.seatid - 1].showWinDetail(v.info);
            }
        }
    };
    BaZhangPage.prototype.clearData = function (needCheckIsGameing) {
        if (needCheckIsGameing === void 0) { needCheckIsGameing = true; }
        for (var k in this._handCardView) {
            var v = this._handCardView[k];
            if (v) {
                v.clearAll();
            }
        }
        if (this._dealCardView) {
            this._dealCardView.clear();
            this._dealCardView.removeSelf();
            this._dealCardView = null;
        }
        Laya.timer.clearAll(this);
        Laya.Tween.clearAll(this);
        AnimationManager.instance.endAnimations();
        _super.prototype.clearData.call(this, needCheckIsGameing);
    };
    BaZhangPage.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        Laya.Tween.clearAll(this);
        Laya.timer.clearAll(this);
        if (this._ruleView) {
            this._ruleView.removeSelf();
            this._ruleView = null;
        }
        this.clearGame();
        this.clearGameUI();
    };
    return BaZhangPage;
}(TablePage));
//# sourceMappingURL=BaZhangPage.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var bazhang;
(function (bazhang) {
    var DealCardView = /** @class */ (function (_super) {
        __extends(DealCardView, _super);
        function DealCardView(callback) {
            var _this = _super.call(this) || this;
            _this.callBack = callback;
            return _this;
        }
        DealCardView.prototype.dealCards = function (info) {
            SoundManager.instance.playEffect("fapai", 1);
            var _loop_1 = function (k) {
                var _loop_2 = function (i) {
                    var card = poker.CardBigUI.borrowCard();
                    card.init(false, { scaleX: 0.67, scaleY: 0.67 });
                    card.card = 0;
                    this_1.addChild(card);
                    //card.pos(Laya.stage.width/2, Laya.stage.height/2)
                    card.centerX = 0;
                    card.centerY = 0;
                    var posX = bazhang.GameDataLayOut.DEAL_VIEW_LAYOUT[BaseGameData.maxPlayer - 1][k].centerX;
                    //GameDataLayOut.DEAL_VIEW_LAYOUT[BaseGameData.maxPlayer-1][k].centerX
                    var posY = bazhang.GameDataLayOut.DEAL_VIEW_LAYOUT[BaseGameData.maxPlayer - 1][k].centerY;
                    //GameDataLayOut.DEAL_VIEW_LAYOUT[BaseGameData.maxPlayer-1][k].centerY
                    Laya.Tween.to(card, { centerX: posX + i * 10, centerY: posY }, 200, null, Laya.Handler.create(this_1, function () {
                        poker.CardBigUI.returnCard(card);
                        if (i == bazhang.GameData.MAX_HAND - 1 && parseInt(k) == BaseGameData.maxPlayer - 1) {
                            if (this.callBack) {
                                Laya.timer.once(1000, this, this.callBack);
                            }
                        }
                    }), i * 100);
                };
                for (var i = 0; i < info[k]; i++) {
                    _loop_2(i);
                }
            };
            var this_1 = this;
            for (var k in info) {
                _loop_1(k);
            }
        };
        DealCardView.prototype.clear = function () {
            Laya.Tween.clearAll(this);
        };
        return DealCardView;
    }(Laya.View));
    bazhang.DealCardView = DealCardView;
})(bazhang || (bazhang = {}));
//# sourceMappingURL=DealCardView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var bazhang;
(function (bazhang) {
    var GameData = /** @class */ (function (_super) {
        __extends(GameData, _super);
        function GameData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GameData.init = function () {
            _super.init.call(this);
            GameData._scoreInfo = [];
            GameData._gunInfo = [];
            GameData._specialInfo = [];
        };
        GameData.clearData = function () {
            GameData._scoreInfo = [];
            GameData._gunInfo = [];
            GameData._specialInfo = [];
        };
        //八张常量定义
        GameData.MAX_HAND = 8; //最大手牌
        GameData.MAX_TOU_DAO = 2; //头道牌数量
        GameData.MAX_ZHONG_WEI_DAO = 3; //中尾道数量
        //选牌界面
        GameData.SHOWCARD_SCALE_RATE = 0.67; //展示区缩放比例
        GameData.HANDCARD_SCALE_RATE = 1.3; //手牌缩放缩放比例
        //桌面手牌
        GameData.HANDCARD_VIEW_SCALE_RATE = 0.67; //手牌缩放缩放比例
        return GameData;
    }(BaseGameData));
    bazhang.GameData = GameData;
})(bazhang || (bazhang = {}));
//# sourceMappingURL=GameData.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var bazhang;
(function (bazhang) {
    var GamePlayerView = /** @class */ (function (_super) {
        __extends(GamePlayerView, _super);
        function GamePlayerView(p) {
            return _super.call(this, p) || this;
        }
        GamePlayerView.prototype.initView = function (p) {
            this.view._imgMaster.visible = false;
        };
        return GamePlayerView;
    }(component.BasePlayer));
    bazhang.GamePlayerView = GamePlayerView;
})(bazhang || (bazhang = {}));
//# sourceMappingURL=GamePlayerView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var bazhang;
(function (bazhang) {
    var HandCardView = /** @class */ (function (_super) {
        __extends(HandCardView, _super);
        function HandCardView(seatid, dir) {
            var _this = _super.call(this) || this;
            //4人配置
            _this.gunPos = [[{}, { scaleX: -1, rotation: -60 }, { scaleX: 1, rotation: 90 }, { scaleX: 1, rotation: 60 }],
                [{ rotation: -60 }, {}, { scaleX: 1, rotation: 60 }, { rotation: 0 }],
                [{ scaleX: 1, rotation: -90 }, { scaleX: -1, rotation: 60 }, {}, { scaleX: 1, rotation: -60 }],
                [{ scaleX: -1, rotation: 60 }, { scaleX: -1, rotation: 0 }, { scaleX: -1, rotation: -60 }, {}]];
            //5人的配置
            _this.gunPos5 = [[{}, { scaleX: -1, rotation: -60 }, { scaleX: 1, rotation: 70 }, { scaleX: 1, rotation: 120 }, { scaleX: 1, rotation: 60 }],
                [],
                [{ rotation: -60 }, {}, { scaleX: 1, rotation: 70 }, { scaleX: 1, rotation: 50 }, { rotation: 0 }],
                [{ scaleX: 1, rotation: -70 }, { scaleX: -1, rotation: 40 }, {}, { scaleX: 1, rotation: 0 }, { scaleX: 1, rotation: -40 }],
                [{ scaleX: -1, rotation: 70 }, { scaleX: -1, rotation: 30 }, { scaleX: -1, rotation: 0 }, {}, { scaleX: 1, rotation: -60 }],
                [{ scaleX: -1, rotation: 60 }, { scaleX: -1, rotation: 0 }, { scaleX: -1, rotation: -50 }, { scaleX: -1, rotation: -40 }, {}]];
            //6人的配置                 
            _this.gunPos6 = [[{}, { scaleX: -1, rotation: 0 }, { scaleX: -1, rotation: -30 }, { scaleX: -1, rotation: -50 }, { scaleX: 1, rotation: 90 }, { scaleX: 1, rotation: 60 }],
                [{ scaleX: 1, rotation: 0 }, {}, { scaleX: -1, rotation: -60 }, { scaleX: 1, rotation: 90 }, { scaleX: 1, rotation: 50 }, { scaleX: 1, rotation: 30 }],
                [{ scaleX: 1, rotation: -30 }, { scaleX: 1, rotation: -70 }, {}, { scaleX: 1, rotation: 40 }, { scaleX: 1, rotation: 20 }, { scaleX: 1, rotation: 0 }],
                [{ scaleX: 1, rotation: -50 }, { scaleX: 1, rotation: -90 }, { scaleX: -1, rotation: 70 }, {}, { scaleX: 1, rotation: 0 }, { scaleX: 1, rotation: -30 }],
                [{ scaleX: 1, rotation: -90 }, { scaleX: -1, rotation: 60 }, { scaleX: -1, rotation: 30 }, { scaleX: -1, rotation: 0 }, {}, { scaleX: 1, rotation: -60 }],
                [{ scaleX: -1, rotation: 60 }, { scaleX: -1, rotation: 30 }, { scaleX: -1, rotation: 0 }, { scaleX: -1, rotation: -30 }, { scaleX: -1, rotation: -60 }, {}]];
            _this._seatid = seatid;
            _this._dir = dir;
            _this.width = 209;
            // 
            // if(dir == 1){
            //     // this._scale = 0.88
            //       // this.height = 288
            //     // this._heightOffset = 70
            //     this.scale(0.67,0.67)
            //     this._scale = 0.67
            //     this._offset = -60
            //     this.height = 225
            //     this._heightOffset =56
            // }else{
            _this.scale(bazhang.GameData.HANDCARD_VIEW_SCALE_RATE, bazhang.GameData.HANDCARD_VIEW_SCALE_RATE);
            _this._scale = bazhang.GameData.HANDCARD_VIEW_SCALE_RATE;
            _this._offset = -60;
            _this.height = 225;
            _this._heightOffset = 56;
            //}
            for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                var card = _this["card_" + i];
                card.ani1.gotoAndStop(0);
            }
            //摆牌动画
            _this.ani1_1.gotoAndStop(0);
            _this.visible = false;
            return _this;
        }
        HandCardView.prototype.init = function () {
            this.visible = true;
            this._cardList = [];
            for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                // let card = poker.CardBigUI.borrowCard();
                // card.init(false, { scaleX: 0.67, scaleY: 0.67 });
                // card.card = 0;
                // this.addChild(card)
                // card.x = i*10
                // card.bottom = 0
                var card = this["card_" + i];
                card.ani1.gotoAndStop(0);
                this._cardList.push(card);
            }
            this.ani1_1.gotoAndStop(0);
        };
        HandCardView.prototype.updatePos = function () {
            this.ani1_1.play(1, false);
            // for(var k in this._cardList){
            //     let card = this._cardList[k]
            //     card.scale(this._scale, this._scale)
            //     let toX = parseInt(k) > 9 ? (parseInt(k)-9)*this._offset : parseInt(k)%5*this._offset
            //     let toY = this.height - this._heightOffset - Math.floor(parseInt(k)/5)*this._heightOffset
            //     card.pos(toX, toY)
            //     card.zOrder = 3 - Math.floor(parseInt(k)/5) 
            // }
            this._flag = true;
        };
        HandCardView.prototype.showGameEnd = function (score) {
            var s = new Laya.Label(score);
            s.font = "font_num_4";
            this.addChild(s);
            s.pos(this.width / 2, this.height / 2);
            s.zOrder = 11;
        };
        HandCardView.prototype.showCards = function (cards) {
            if (!this._flag)
                this.updatePos();
            this._cards = cards;
            this._gunSocre = 0;
            // for(var k in this._cardList){
            //     let card = this._cardList[k]
            //     let index = k
            //     card.skewY = 0
            //     // Laya.Tween.to(card,{skewY:180},2000,function(){
            //         card.card = cards[index]
            //     // })
            // }
        };
        HandCardView.prototype.playCardType = function (name, y, index) {
            var v;
            var bg;
            if (name > 999) {
                v = bazhang.GameDataLayOut.typeList[name];
            }
            else {
                if (name > 3) {
                    bg = "bazhang/showcard_bg_2.png";
                }
                else {
                    bg = "bazhang/showcard_bg_1.png";
                }
                v = "bazhang/selectCardLayer/shoubai/" + bazhang.GameDataLayOut.typeList[name][index];
            }
            if (v) {
                var ani_1 = new ui.bazhang.showcradtypeUI();
                ani_1._bg.skin = bg;
                ani_1._type.skin = v;
                ani_1.zOrder = 10;
                this.addChild(ani_1);
                ani_1.ani1.play(1, false);
                ani_1.centerX = -this._offset;
                ani_1.y = y;
                Laya.timer.once(2000, this, function () {
                    ani_1.ani1.stop();
                    ani_1.removeSelf();
                });
            }
        };
        HandCardView.prototype.clear = function () {
            this.removeChildren();
            this._cardList = [];
        };
        HandCardView.prototype.showOpt = function (cards) {
            for (var k in this._cardList) {
                var card = this._cardList[k];
                card.card = cards[k];
            }
        };
        HandCardView.prototype.showSpecial = function () {
            this._special.visible = true;
        };
        HandCardView.prototype.setCard = function (card, value) {
            var baseUrl = "pokerCardBig/pokerCardBig_";
            // card._imgBack.visible = false;
            // card._imgFont.visible = true;
            card._imgNum.visible = true;
            card._imgFlowerBig.visible = true;
            if (card._imgFlowerSmall)
                card._imgFlowerSmall.visible = true;
            var flower = value % 10;
            var num = Math.floor(value / 10);
            card._imgFlowerBig.source = Laya.Loader.getRes(baseUrl + "flower_big_" + flower + ".png");
            if (card._imgFlowerSmall)
                card._imgFlowerSmall.source = Laya.Loader.getRes(baseUrl + "flower_small_" + flower + ".png");
            var numUrl = baseUrl;
            if (this.isBlack(flower))
                numUrl += "black_";
            else
                numUrl += "red_";
            var imgNum = num;
            if (num == 14)
                imgNum = 1;
            card._imgNum.source = Laya.Loader.getRes(numUrl + imgNum + ".png");
            if (value == 1) {
                card._imgFlowerBig.source = Laya.Loader.getRes(baseUrl + "flower_big_4.png");
                card._imgFlowerSmall.source = null;
                card._imgNum.source = Laya.Loader.getRes(baseUrl + "red_14.png");
            }
            else if (value == 2) {
                card._imgFlowerBig.source = Laya.Loader.getRes(baseUrl + "flower_small_4.png");
                card._imgFlowerSmall.source = null;
                card._imgNum.source = Laya.Loader.getRes(baseUrl + "black_14.png");
            }
        };
        HandCardView.prototype.isBlack = function (flower) {
            return (flower == poker.CardUI.FLOWER_CLUB || flower == poker.CardUI.FLOWER_SPADE);
        };
        HandCardView.prototype.showWinDetail = function (info, callback, noAni) {
            if (!this._cardList) {
                if (callback)
                    callback();
            }
            this.showTouDao(info, callback, noAni);
            Laya.timer.once(2000, this, function () {
                this.showZhongDao(info, noAni);
            });
            Laya.timer.once(4000, this, function () {
                this.showWeiDao(info, callback, noAni);
            });
        };
        HandCardView.prototype.showWeiDao = function (info, callback, noAni) {
            if (!noAni) {
                SoundManager.instance.playEffect("bipai", 1);
                this.ani1_wei.play(0, false);
            }
            var toudao1 = info[0];
            var toudao2 = info[1];
            var cards = BaseGameData.getPlayerDataBySeatid(this._seatid).handCards;
            for (var i = 0; i < bazhang.GameData.MAX_ZHONG_WEI_DAO; i++) {
                this.setCard(this._cardList[i], cards[i]);
                this._cardList[i].ani1.play(1, false);
            }
            // if(this._dir == 1){
            var score1 = toudao1.value || 0;
            if (toudao1.value && toudao1.value >= 0) {
                this._score_1.font = "font_num_12";
                score1 = "+" + score1;
            }
            else {
                this._score_1.font = "font_num_13";
            }
            this._score_1.text = score1;
            var score2 = toudao2.value || 0;
            if (toudao2.value && toudao2.value >= 0) {
                this._score_2.font = "font_num_12";
                score2 = "+" + score2;
            }
            else {
                this._score_2.font = "font_num_13";
            }
            this._score_2.text = "(" + score2 + ")";
            this._weidao.visible = true;
            // if(this._dir == 2||this._dir == 3){
            //      //||this._dir == 4
            //     this.ani2_0.play(0,false)
            // }else
            // this.ani2.play(0,false)
            if (GameDef.RESULT_POS[BaseGameData.maxPlayer - 1][this._dir - 1] == 1) {
                //往左
                this.ani2_0.play(0, false);
            }
            else {
                //往右
                this.ani2.play(0, false);
            }
            // }
            this.playCardType(toudao2.name, 220, 0);
            if (callback) {
                Laya.timer.once(2000, this, callback);
            }
        };
        HandCardView.prototype.showZhongDao = function (info, noAni) {
            if (!noAni) {
                SoundManager.instance.playEffect("bipai", 1);
                this.ani1_zhong.play(0, false);
            }
            var toudao1 = info[2];
            var toudao2 = info[3];
            var cards = BaseGameData.getPlayerDataBySeatid(this._seatid).handCards;
            for (var i = bazhang.GameData.MAX_ZHONG_WEI_DAO; i < bazhang.GameData.MAX_HAND - bazhang.GameData.MAX_TOU_DAO; i++) {
                this.setCard(this._cardList[i], cards[i]);
                this._cardList[i].ani1.play(1, false);
            }
            // if(this._dir == 1){
            var score1 = toudao1.value || 0;
            if (toudao1.value && toudao1.value >= 0) {
                this._score_3.font = "font_num_12";
                score1 = "+" + score1;
            }
            else {
                this._score_3.font = "font_num_13";
            }
            this._score_3.text = score1;
            var score2 = toudao2.value || 0;
            if (toudao2.value && toudao2.value >= 0) {
                this._score_4.font = "font_num_12";
                score2 = "+" + score2;
            }
            else {
                this._score_4.font = "font_num_13";
            }
            this._score_4.text = "(" + score2 + ")";
            this._zhongdao.visible = true;
            // if(this._dir == 2||this._dir == 3){
            //      //||this._dir == 4
            //     this.ani3_0.play(0, false)
            // }else
            // this.ani3.play(0,false)
            if (GameDef.RESULT_POS[BaseGameData.maxPlayer - 1][this._dir - 1] == 1) {
                //往左
                this.ani3_0.play(0, false);
            }
            else {
                //往右
                this.ani3.play(0, false);
            }
            // }
            this.playCardType(toudao2.name, 110, 1);
        };
        HandCardView.prototype.showTouDao = function (info, callback, noAni) {
            if (!noAni) {
                SoundManager.instance.playEffect("bipai", 1);
                this.ani1_tou.play(0, false);
            }
            var toudao1 = info[4];
            var toudao2 = info[5];
            var player = BaseGameData.getPlayerDataBySeatid(this._seatid);
            if (!player || !player.handCards) {
                if (callback)
                    callback();
            }
            var cards = player.handCards;
            for (var i = bazhang.GameData.MAX_HAND - bazhang.GameData.MAX_TOU_DAO; i < bazhang.GameData.MAX_HAND; i++) {
                this.setCard(this._cardList[i], cards[i]);
                this._cardList[i].ani1.play(1, false);
            }
            // if(this._dir == 1){
            var score1 = toudao1.value || 0;
            if (toudao1.value && toudao1.value >= 0) {
                this._score_5.font = "font_num_12";
                score1 = "+" + score1;
            }
            else {
                this._score_5.font = "font_num_13";
            }
            this._score_5.text = score1;
            var score2 = toudao2.value || 0;
            if (toudao2.value && toudao2.value >= 0) {
                this._score_6.font = "font_num_12";
                score2 = "+" + score2;
            }
            else {
                this._score_6.font = "font_num_13";
            }
            this._score_6.text = "(" + score2 + ")";
            this._toudao.visible = true;
            // if(this._dir == 2||this._dir == 3){
            //     //||this._dir == 4
            //     this.ani4_0.play(0, false)
            // }else
            if (GameDef.RESULT_POS[BaseGameData.maxPlayer - 1][this._dir - 1] == 1) {
                //往左
                this.ani4_0.play(0, false);
            }
            else {
                //往右
                this.ani4.play(0, false);
            }
            // }
            this.playCardType(toudao2.name, 40, 2);
            // if(callback){
            //     Laya.timer.once(2000,this,callback)
            // }
        };
        HandCardView.prototype.playGun = function (delay, target, isRemove) {
            var targetDir = Utils.getDir(target);
            var removeTag = isRemove;
            if (!this._gunAni) {
                this._gunAni = new ui.bazhang.qiangUI();
                this.addChild(this._gunAni);
            }
            Laya.timer.once(1000 * parseInt(delay) + 500, this, function () {
                // if(this._dir == 3){
                //     ani.rotation = -90
                // }else if(this._dir == 4){
                //     ani.rotation = 184
                //     ani.scaleY = -1
                // }
                console.log("playgum===========this.dir=====" + this._dir + "targetDir=========" + targetDir);
                var gunpos = [];
                if (BaseGameData.maxPlayer == 5) {
                    gunpos = this.gunPos5;
                }
                else if (BaseGameData.maxPlayer == 6) {
                    gunpos = this.gunPos6;
                }
                else {
                    gunpos = this.gunPos;
                }
                Utils.injectProp(this._gunAni, gunpos[this._dir - 1][targetDir - 1]);
                this._gunAni.zOrder = 10;
                this._gunAni.pos(this.width / 2 + 40, this.height / 2);
                this._gunAni._ani.play(20, false);
                if (removeTag) {
                    Laya.timer.once(1000, this, function () {
                        this._gunAni._ani.stop();
                        this._gunAni.removeSelf();
                        this._gunAni = null;
                    });
                }
            }.bind(this));
        };
        HandCardView.prototype.showGunScore = function (score) {
            this._gunSocre = this._gunSocre + score;
            this._gun.visible = true;
            // if(this._dir == 2){
            //     this._gun.x = -140
            // }
            if (GameDef.RESULT_POS[BaseGameData.maxPlayer - 1][this._dir - 1] == 1) {
                //往左
                this._gun.x = -140;
            }
            if (this._gunSocre >= 0) {
                this._daqiang.font = "font_num_12";
                this._daqiang.text = score = "+" + this._gunSocre;
            }
            else {
                this._daqiang.font = "font_num_13";
                this._daqiang.text = score = this._gunSocre;
            }
        };
        HandCardView.prototype.playBullet = function (score, delay, callback) {
            Laya.timer.once(1000 * parseInt(delay) + 500, this, function () {
                var ani = new Laya.Animation();
                ani.loadAnimation(ResourceConfig.ANI_BZ_PLAY_BULLET);
                this.addChild(ani);
                ani.zOrder = 10;
                ani.pos(this.width / 2 + 50, this.height / 2);
                ani.play(23, false);
                this.showGunScore(-score);
                SoundManager.instance.playEffect("daqiang", 1);
                Laya.timer.once(2000, this, function () {
                    ani.stop();
                    ani.removeSelf();
                    if (callback) {
                        callback();
                    }
                });
            }.bind(this));
        };
        HandCardView.prototype.clearAll = function () {
            Laya.Tween.clearAll(this);
            Laya.timer.clearAll(this);
        };
        return HandCardView;
    }(ui.bazhang.showcardanimationUI));
    bazhang.HandCardView = HandCardView;
})(bazhang || (bazhang = {}));
//# sourceMappingURL=HandCardView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 创建桌子
*/
var bazhang;
(function (bazhang) {
    var HistoryCtrl = /** @class */ (function (_super) {
        __extends(HistoryCtrl, _super);
        function HistoryCtrl() {
            var _this = _super.call(this) || this;
            _this._selectTab = 0;
            _this._historyData = {};
            _this["name"] = "HistoryCtrl";
            return _this;
        }
        Object.defineProperty(HistoryCtrl, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new HistoryCtrl();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        HistoryCtrl.prototype.show = function () {
            this.showself();
        };
        /**
         * 这里完成new ui，添加注册监听等初始化工作
         */
        HistoryCtrl.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.bazhang.HistoryViewUI();
                this._ui._list.itemRender = bazhang.HistoryRender;
                this._ui._list.scrollBar.visible = false;
                this._ui._list.renderHandler = new Laya.Handler(this, this.updateListResult);
                EventManager.instance.registerOnObject(this, this._ui._last, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnClose, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._next, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, server, EventNames.GAME_REAL_TIME_RECORD_REP, this, this.onRealTimeRecordRepHandler);
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        /**
        * 开启监听，配置宽高，添加到舞台
        */
        HistoryCtrl.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            // server.realTimeRecordReq();
            this._currentHand = (BaseGameData.currHandCount - 1) > 0 ? (BaseGameData.currHandCount - 1) : BaseGameData.currHandCount;
            this._ui._hand.text = this._currentHand + "/" + BaseGameData.currHandCount;
            this._ui._list.array = [];
            if (this._historyData[this._currentHand]) {
                this._ui._list.array = this._historyData[this._currentHand];
            }
            else {
                server.historyReq(this._currentHand);
            }
            // this._ui._list.array = [{"seaid":1,"info":[{"name":1,"value":1},{"name":2,"value":2},{"name":3,"value":3},{"name":4,"value":4},{"name":5,"value":5},
            // {"name":6,"value":6},{"name":7,"value":7},{"name":8,"value":8},{"name":10,"value":10}],
            // "cards":[{"cards":[40,41,42,43,50,51,52,53,60,61,62,63,70],"opttype":1}]},
            // {"seaid":1,"info":[{"name":1,"value":1},{"name":2,"value":2},{"name":3,"value":3},{"name":4,"value":4},{"name":5,"value":5},
            // {"name":6,"value":6},{"name":7,"value":7},{"name":8,"value":8},{"name":10,"value":10}],
            // "cards":[{"cards":[40,41,42,43,50,51,52,53,60,61,62,63,70],"opttype":1}]},
            // {"seaid":1,"info":[{"name":1,"value":1},{"name":2,"value":2},{"name":3,"value":3},{"name":4,"value":4},{"name":5,"value":5},
            // {"name":6,"value":6},{"name":7,"value":7},{"name":8,"value":8},{"name":10,"value":10}],
            // "cards":[{"cards":[40,41,42,43,50,51,52,53,60,61,62,63,70],"opttype":1}]}]
            this.tweenSelf();
        };
        HistoryCtrl.prototype.updateData = function (info, index) {
            this._historyData[parseInt(index)] = info;
            this._ui._list.array = info;
        };
        HistoryCtrl.prototype.nextHand = function () {
            if ((this._currentHand + 1) > BaseGameData.currHandCount)
                return;
            if (BaseGameData.isGameing && (this._currentHand + 1) == BaseGameData.currHandCount)
                return;
            this._currentHand = this._currentHand + 1;
            this._ui._hand.text = this._currentHand + "/" + BaseGameData.currHandCount;
            if (this._historyData[this._currentHand]) {
                this._ui._list.array = this._historyData[this._currentHand];
            }
            else {
                server.historyReq(this._currentHand);
            }
        };
        HistoryCtrl.prototype.lastHand = function () {
            if ((this._currentHand - 1) <= 0)
                return;
            if (BaseGameData.currHandCount - this._currentHand > 9 && BaseGameData.currHandCount > 10)
                return;
            this._currentHand = this._currentHand - 1;
            this._ui._hand.text = this._currentHand + "/" + BaseGameData.currHandCount;
            if (this._historyData[this._currentHand]) {
                this._ui._list.array = this._historyData[this._currentHand];
            }
            else {
                server.historyReq(this._currentHand);
            }
        };
        /**
         * 离开时调度
         */
        HistoryCtrl.prototype.afterShow = function () {
            _super.prototype.afterShow.call(this);
        };
        HistoryCtrl.prototype.onTouch = function (e) {
            switch (e.currentTarget) {
                case this._ui._btnClose:
                    this.hide();
                    break;
                case this._ui._next:
                    this.nextHand();
                    break;
                case this._ui._last:
                    this.lastHand();
                    break;
            }
        };
        /***渲染单元格时的回调方法***/
        HistoryCtrl.prototype.updateListResult = function (cell, index) {
            if (index == this._ui._list.array.length - 1) {
                cell.updata(false);
            }
            else {
                cell.updata(true);
            }
        };
        HistoryCtrl.prototype.onRealTimeRecordRepHandler = function (msg) {
            if (msg) {
                this._ui._list.array = this._listScoreData;
            }
        };
        HistoryCtrl.TYPE_REAL_TIME = 1;
        HistoryCtrl.TYPE_GAME_END = 2;
        return HistoryCtrl;
    }(BaseCtrl));
    bazhang.HistoryCtrl = HistoryCtrl;
    // class HistoryRender extends ui.shisanshui.HistoryItemUI{
    //     constructor(){
    //         super()
    //     }
    //     protected setCard(card:ui.poker.CardBigUI, value){
    //             let baseUrl = "pokerCardBig/pokerCardBig_";
    //             card._imgBack.visible = false;
    //             card._imgFont.visible = true;
    //             card._imgNum.visible = true;
    //             card._imgFlowerBig.visible = true;
    //             if (card._imgFlowerSmall)
    //                 card._imgFlowerSmall.visible = true;
    //             if (!card._imgFont.texture)
    //                 card._imgFont.source = Laya.Loader.getRes(baseUrl + "front.png");
    //             // if (card._imgOver && !card._imgOver.texture)
    //             // {
    //             // 	card._imgOver.source = Laya.Loader.getRes(baseUrl + "mask.png");
    //             // 	card._imgOver.alpha=0.2;
    //             // }					
    //             // if (card._imgMask && !card._imgMask.texture)
    //             // 	card._imgMask.source = Laya.Loader.getRes(baseUrl + "mask.png");
    //             var flower: number = value % 10;
    //             var num: number = Math.floor(value / 10);
    //             card._imgFlowerBig.source = Laya.Loader.getRes(baseUrl + "flower_big_" + flower + ".png");
    //             if (card._imgFlowerSmall)
    //                 card._imgFlowerSmall.source = Laya.Loader.getRes(baseUrl + "flower_small_" + flower + ".png");
    //             var numUrl: string = baseUrl;
    //             if (this.isBlack(flower))
    //                 numUrl += "black_";
    //             else
    //                 numUrl += "red_";
    //             var imgNum: number = num;
    //             if (num == 14)
    //                 imgNum = 1;
    //             card._imgNum.source = Laya.Loader.getRes(numUrl + imgNum + ".png");
    //             if(value == 1){
    //                 card._imgFlowerBig.source = Laya.Loader.getRes(baseUrl + "flower_big_4.png");
    //                 card._imgFlowerSmall.source = null
    //                 card._imgNum.source = Laya.Loader.getRes(baseUrl + "red_14.png");
    //             }else if(value == 2){
    //                 card._imgFlowerBig.source = Laya.Loader.getRes(baseUrl + "flower_small_4.png");
    //                 card._imgFlowerSmall.source = null
    //                 card._imgNum.source = Laya.Loader.getRes(baseUrl + "black_14.png");
    //             }
    //     }
    //     private isBlack(flower: number): boolean {
    //         return (flower == poker.CardUI.FLOWER_CLUB || flower == poker.CardUI.FLOWER_SPADE);
    //     }
    //     public updata(show){
    //         this._name.text = Utils.getFitNickName(BaseGameData.getPlayerDataBySeatid(this.dataSource.seatid).nickname,20)
    //         if(show){
    //             this._line.visible = true
    //         }else
    //             this._line.visible = false
    //         for (var k in this.dataSource.cards){
    //             let v = this.dataSource.cards[k]
    //             if(v.opttype == GameDef.AREA_TYPE.HAND_CARD){
    //                 for(var m in v.cards){
    //                     this.setCard(this["_card_"+m], v.cards[m])
    //                 }
    //             }
    //         }
    //         this._spe.visible = false
    //         this._normal.visible = true
    //         for(var k in this.dataSource.info){
    //             let v = this.dataSource.info[k]
    //             let score = v.value || 0
    //             if(v.name == 9 ){
    //                 this["score_9"].skin = "shisanshui/special/"+v.value+"_1.png"
    //             }else if(v.name == 8 && v.value){
    //                 this["score_"+v.name].visible = true
    //                 if(score >= 0){
    //                     this["score_"+v.name].text = "全垒打+"+score
    //                     this["score_"+v.name].color = "#f77400"
    //                 }else{
    //                     this["score_"+v.name].text = "全垒打"+score
    //                     this["score_"+v.name].color = "#00a604"
    //                 }
    //             }else if(v.name == 7){
    //                 this["score_"+v.name].visible = true
    //                 if(score >= 0){
    //                     this["score_"+v.name].text = "打枪+"+score
    //                     this["score_"+v.name].color = "#f77400"
    //                 }else{
    //                     this["score_"+v.name].text = "打枪"+score
    //                     this["score_"+v.name].color = "#00a604"
    //                 }
    //             }else if(v.name == 10){
    //                 if(score >= 0){
    //                     this["score_"+v.name].text = "+"+score
    //                     this["score_"+v.name].color = "#f77400"
    //                 }else{
    //                     this["score_"+v.name].text = String(score)
    //                     this["score_"+v.name].color = "#00a604"
    //                 }
    //             }else{
    //                 if(score >= 0){
    //                     if(parseInt(v.name)%2 == 0){
    //                         this["score_"+v.name].text = "(+"+score+")"
    //                     }else{
    //                         this["score_"+v.name].text = "+"+score
    //                     }
    //                     this["score_"+v.name].color = "#f77400"
    //                 }else{
    //                     if(parseInt(v.name)%2 == 0){
    //                         this["score_"+v.name].text = "("+score+")"
    //                     }else{
    //                         this["score_"+v.name].text = score
    //                     }
    //                     this["score_"+v.name].color = "#00a604"
    //                 }
    //             }
    //             if (v.name == 9){
    //                this._spe.visible = true
    //                this._normal.visible = false
    //             }
    //         }
    //     }
    // }
})(bazhang || (bazhang = {}));
//# sourceMappingURL=HistoryCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var bazhang;
(function (bazhang) {
    var HistoryDialog = /** @class */ (function (_super) {
        __extends(HistoryDialog, _super);
        function HistoryDialog() {
            var _this = _super.call(this) || this;
            _this._selectTab = 0;
            _this._historyData = {};
            _this["name"] = "HistoryDialog";
            return _this;
        }
        HistoryDialog.prototype.show = function () {
            this.beforeShow();
        };
        /**
         * 这里完成new ui，添加注册监听等初始化工作
         */
        HistoryDialog.prototype.beforeShow = function () {
            this._list.itemRender = HistoryRender;
            this._list.scrollBar.visible = false;
            this._list.renderHandler = new Laya.Handler(this, this.updateListResult);
            // EventManager.instance.registerOnObject(this, 
            this._last.on(Laya.Event.CLICK, this, this.onTouch);
            // EventManager.instance.registerOnObject(this, 
            this._btnClose.on(Laya.Event.CLICK, this, this.onTouch);
            // EventManager.instance.registerOnObject(this, 
            this._next.on(Laya.Event.CLICK, this, this.onTouch);
            // EventManager.instance.registerOnObject(this, 
            server.on(EventNames.GAME_REAL_TIME_RECORD_REP, this, this.onRealTimeRecordRepHandler);
            this.onShow();
        };
        /**
        * 开启监听，配置宽高，添加到舞台
        */
        HistoryDialog.prototype.onShow = function () {
            this._currentHand = (BaseGameData.currHandCount - 1) > 0 ? (BaseGameData.currHandCount - 1) : BaseGameData.currHandCount;
            this._hand.text = this._currentHand + "/" + BaseGameData.currHandCount;
            this._list.array = [];
            if (this._historyData[this._currentHand]) {
                this._list.array = this._historyData[this._currentHand];
            }
            else {
                server.historyReq(this._currentHand);
            }
        };
        HistoryDialog.prototype.updateData = function (info, index) {
            this._historyData[parseInt(index)] = info;
            this._list.array = info;
        };
        HistoryDialog.prototype.nextHand = function () {
            if ((this._currentHand + 1) > BaseGameData.currHandCount)
                return;
            if (BaseGameData.isGameing && (this._currentHand + 1) == BaseGameData.currHandCount)
                return;
            this._currentHand = this._currentHand + 1;
            this._hand.text = this._currentHand + "/" + BaseGameData.currHandCount;
            if (this._historyData[this._currentHand]) {
                this._list.array = this._historyData[this._currentHand];
            }
            else {
                server.historyReq(this._currentHand);
            }
        };
        HistoryDialog.prototype.lastHand = function () {
            if ((this._currentHand - 1) <= 0)
                return;
            if (BaseGameData.currHandCount - this._currentHand > 9 && BaseGameData.currHandCount > 10)
                return;
            this._currentHand = this._currentHand - 1;
            this._hand.text = this._currentHand + "/" + BaseGameData.currHandCount;
            if (this._historyData[this._currentHand]) {
                this._list.array = this._historyData[this._currentHand];
            }
            else {
                server.historyReq(this._currentHand);
            }
        };
        HistoryDialog.prototype.onTouch = function (e) {
            switch (e.currentTarget) {
                case this._btnClose:
                    this.hide();
                    break;
                case this._next:
                    this.nextHand();
                    break;
                case this._last:
                    this.lastHand();
                    break;
            }
        };
        /***渲染单元格时的回调方法***/
        HistoryDialog.prototype.updateListResult = function (cell, index) {
            if (index == this._list.array.length - 1) {
                cell.updata(false);
            }
            else {
                cell.updata(true);
            }
        };
        HistoryDialog.prototype.onRealTimeRecordRepHandler = function (msg) {
            if (msg) {
                this._list.array = this._listScoreData;
            }
        };
        HistoryDialog.prototype.hide = function () {
            DialogManager.instance.removeDialog("HISTORY");
        };
        HistoryDialog.TYPE_REAL_TIME = 1;
        HistoryDialog.TYPE_GAME_END = 2;
        return HistoryDialog;
    }(ui.bazhang.HistoryViewUI));
    bazhang.HistoryDialog = HistoryDialog;
    var HistoryRender = /** @class */ (function (_super) {
        __extends(HistoryRender, _super);
        function HistoryRender() {
            return _super.call(this) || this;
        }
        HistoryRender.prototype.setCard = function (card, value) {
            var baseUrl = "pokerCardBig/pokerCardBig_";
            card._imgBack.visible = false;
            card._imgFont.visible = true;
            card._imgNum.visible = true;
            card._imgFlowerBig.visible = true;
            if (card._imgFlowerSmall)
                card._imgFlowerSmall.visible = true;
            if (!card._imgFont.texture)
                card._imgFont.source = Laya.Loader.getRes(baseUrl + "front.png");
            // if (card._imgOver && !card._imgOver.texture)
            // {
            // 	card._imgOver.source = Laya.Loader.getRes(baseUrl + "mask.png");
            // 	card._imgOver.alpha=0.2;
            // }					
            // if (card._imgMask && !card._imgMask.texture)
            // 	card._imgMask.source = Laya.Loader.getRes(baseUrl + "mask.png");
            var flower = value % 10;
            var num = Math.floor(value / 10);
            card._imgFlowerBig.source = Laya.Loader.getRes(baseUrl + "flower_big_" + flower + ".png");
            if (card._imgFlowerSmall)
                card._imgFlowerSmall.source = Laya.Loader.getRes(baseUrl + "flower_small_" + flower + ".png");
            var numUrl = baseUrl;
            if (this.isBlack(flower))
                numUrl += "black_";
            else
                numUrl += "red_";
            var imgNum = num;
            if (num == 14)
                imgNum = 1;
            card._imgNum.source = Laya.Loader.getRes(numUrl + imgNum + ".png");
            if (value == 1) {
                card._imgFlowerBig.source = Laya.Loader.getRes(baseUrl + "flower_big_4.png");
                card._imgFlowerSmall.source = null;
                card._imgNum.source = Laya.Loader.getRes(baseUrl + "red_14.png");
            }
            else if (value == 2) {
                card._imgFlowerBig.source = Laya.Loader.getRes(baseUrl + "flower_small_4.png");
                card._imgFlowerSmall.source = null;
                card._imgNum.source = Laya.Loader.getRes(baseUrl + "black_14.png");
            }
        };
        HistoryRender.prototype.isBlack = function (flower) {
            return (flower == poker.CardUI.FLOWER_CLUB || flower == poker.CardUI.FLOWER_SPADE);
        };
        HistoryRender.prototype.updata = function (show) {
            this._name.text = Utils.getFitNickName(BaseGameData.getPlayerDataBySeatid(this.dataSource.seatid).nickname, 20);
            if (show) {
                this._line.visible = true;
            }
            else
                this._line.visible = false;
            for (var k in this.dataSource.cards) {
                var v = this.dataSource.cards[k];
                if (v.opttype == GameDef.AREA_TYPE.HAND_CARD) {
                    for (var m in v.cards) {
                        this.setCard(this["_card_" + m], v.cards[m]);
                    }
                }
            }
            this._spe.visible = false;
            this._normal.visible = true;
            for (var k in this.dataSource.info) {
                var v = this.dataSource.info[k];
                var score = v.value || 0;
                if (v.name == 9) {
                    this["score_9"].skin = "bazhang/special/" + v.value + "_1.png";
                }
                else if (v.name == 8 && v.value) {
                    this["score_" + v.name].visible = true;
                    if (score >= 0) {
                        this["score_" + v.name].text = "全垒打+" + score;
                        this["score_" + v.name].color = "#f77400";
                    }
                    else {
                        this["score_" + v.name].text = "全垒打" + score;
                        this["score_" + v.name].color = "#00a604";
                    }
                }
                else if (v.name == 7) {
                    this["score_" + v.name].visible = true;
                    if (score >= 0) {
                        this["score_" + v.name].text = "打枪+" + score;
                        this["score_" + v.name].color = "#f77400";
                    }
                    else {
                        this["score_" + v.name].text = "打枪" + score;
                        this["score_" + v.name].color = "#00a604";
                    }
                }
                else if (v.name == 10) {
                    if (score >= 0) {
                        this["score_" + v.name].text = "+" + score;
                        this["score_" + v.name].color = "#f77400";
                    }
                    else {
                        this["score_" + v.name].text = String(score);
                        this["score_" + v.name].color = "#00a604";
                    }
                }
                else {
                    if (score >= 0) {
                        if (parseInt(v.name) % 2 == 0) {
                            this["score_" + v.name].text = "(+" + score + ")";
                        }
                        else {
                            this["score_" + v.name].text = "+" + score;
                        }
                        this["score_" + v.name].color = "#f77400";
                    }
                    else {
                        if (parseInt(v.name) % 2 == 0) {
                            this["score_" + v.name].text = "(" + score + ")";
                        }
                        else {
                            this["score_" + v.name].text = score;
                        }
                        this["score_" + v.name].color = "#00a604";
                    }
                }
                if (v.name == 9) {
                    this._spe.visible = true;
                    this._normal.visible = false;
                }
            }
        };
        return HistoryRender;
    }(ui.bazhang.HistoryItemUI));
    bazhang.HistoryRender = HistoryRender;
})(bazhang || (bazhang = {}));
//# sourceMappingURL=HistoryDialog.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var bazhang;
(function (bazhang) {
    var OptCardView = /** @class */ (function (_super) {
        __extends(OptCardView, _super);
        function OptCardView() {
            var _this = _super.call(this) || this;
            _this._uiPos = {}; //展示牌的位置
            _this._handCardPos = {}; //手牌位置
            _this._commitCards = []; //提交的牌数据
            _this._full = [0, 0, 0]; //三道是否展示的状态
            _this._MouseDownX = 0; //鼠标落下后
            _this._startIndex = 0;
            _this._selectNum = 0;
            _this._isWuPaoPai = false;
            _this._duizi_list = []; //对子列表
            _this._shunzi_list = []; //顺子列表
            _this._zhadan_list = []; //炸弹列表
            _this._tonghuashun_list = []; //同花顺列表
            _this._duizi_index = 0;
            _this._shunzi_index = 0;
            _this._zhadan_index = 0;
            _this._tonghuashun_index = 0;
            _this._autoHide = false;
            _this["name"] = "OptCardView";
            return _this;
        }
        Object.defineProperty(OptCardView, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new OptCardView();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        OptCardView.prototype.show = function (cards, timeout, isWupaopai) {
            //this._cardsTypes = new AutoSeleCards(cards).typeChoice()
            this._algorithm = new bazhang.AutoSeleCards();
            this._data = cards;
            this._cards = cards;
            log(this._cards);
            this._cards = bazhang.AutoSeleCards.sortCardByRank(this._cards);
            this._data = this._cards;
            log(this._cards);
            this._timeout = timeout;
            this._isWuPaoPai = isWupaopai;
            this.clearCommitCard();
            this.showself();
        };
        /**
     * 这里完成new ui，添加注册监听等初始化工作
     */
        OptCardView.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.bazhang.CardViewUI();
                for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                    this._ui["_card_" + i].on(Laya.Event.CLICK, this, this.click);
                    this._uiPos[i] = { x: this._ui["_card_" + i].x, y: this._ui["_card_" + i].y };
                }
                for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                    this._ui["hand_card_" + i].on(Laya.Event.CLICK, this, this.handCardclick);
                    this._handCardPos[i] = { x: this._ui["hand_card_" + i].x, y: this._ui["hand_card_" + i].y };
                }
                // log(this._handCardPos)
                this._ui._confirm.on(Laya.Event.CLICK, this, this.confirm);
                this._ui._btnCancel.on(Laya.Event.CLICK, this, this.onAllCancel);
                this._mask = new Laya.Sprite();
                //this._ui._circle.mask = this._mask;
                this._ui._typeList.hScrollBar.visible = false;
                this._ui._touchpanel.visible = false;
                for (var i = 0; i < this._ui._btnTypeBox.numChildren; i++) {
                    var child = this._ui._btnTypeBox.getChildAt(i);
                    EventManager.instance.registerOnObject(this, child, Laya.Event.CLICK, this, this.onTypeTouch);
                }
                EventManager.instance.registerOnObject(this, this._ui._typeList, Laya.Event.CLICK, this, this.onClick);
                EventManager.instance.registerOnObject(this, this._ui._touch_tou, Laya.Event.CLICK, this, this.ontouchFlyCard);
                EventManager.instance.registerOnObject(this, this._ui._touch_zhong, Laya.Event.CLICK, this, this.ontouchFlyCard);
                EventManager.instance.registerOnObject(this, this._ui._touch_wei, Laya.Event.CLICK, this, this.ontouchFlyCard);
                EventManager.instance.registerOnObject(this, this._ui._btnCancel1, Laya.Event.CLICK, this, this.onCancel);
                EventManager.instance.registerOnObject(this, this._ui._btnCancel2, Laya.Event.CLICK, this, this.onCancel);
                EventManager.instance.registerOnObject(this, this._ui._btnCancel3, Laya.Event.CLICK, this, this.onCancel);
                this._ui._sliderTouchLayer.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        OptCardView.prototype.onMouseDown = function (e) {
            this._MouseDownX = e.currentTarget.mouseX;
            this._startIndex = Math.floor(this._MouseDownX / 150);
            if (this._startIndex >= 7)
                this._startIndex = 7;
            //添加鼠标移到侦听
            this._ui._sliderTouchLayer.on(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
            //console.info(e.currentTarget.mouseX, e.currentTarget.mouseY)
            this._ui._sliderTouchLayer.on(Laya.Event.MOUSE_UP, this, this.onMouseUp);
            this._ui._sliderTouchLayer.on(Laya.Event.MOUSE_OUT, this, this.onMouseUp);
        };
        /**移到事件处理*/
        OptCardView.prototype.onMouseMove = function (e) {
            // this.button.x = Math.max(Math.min(Laya.stage.mouseX, this.endPosition), this.beginPosition);
            //log("onMouseMove" + e.currentTarget.mouseX)
            var length = e.currentTarget.mouseX - this._MouseDownX;
            var isright = true;
            if (length < 0) {
                isright = false;
            }
            var num = Math.floor(length / 10);
            if (this._selectNum != num) {
                this._selectNum = num;
                for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                    if (this._ui["hand_card_" + i]["isUp"] == false) {
                        if (isright) {
                            if (this._MouseDownX <= this._ui["hand_card_" + i].x + 188 && e.currentTarget.mouseX >= this._ui["hand_card_" + i].x + 40) {
                                this._ui["hand_card_" + i]._mask.visible = true;
                            }
                            else {
                                this._ui["hand_card_" + i]._mask.visible = false;
                            }
                        }
                        else {
                            if (this._MouseDownX >= this._ui["hand_card_" + i].x + 40 && e.currentTarget.mouseX <= this._ui["hand_card_" + i].x + 188) {
                                this._ui["hand_card_" + i]._mask.visible = true;
                            }
                            else {
                                this._ui["hand_card_" + i]._mask.visible = false;
                            }
                        }
                    }
                }
            }
        };
        /**抬起事件处理*/
        OptCardView.prototype.onMouseUp = function (e) {
            //let index = Math.floor((e.currentTarget.mouseX + 10) / this._divide)
            //log("onMouseUp" + e.currentTarget.mouseX)
            this._ui._sliderTouchLayer.off(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
            this._ui._sliderTouchLayer.off(Laya.Event.MOUSE_UP, this, this.onMouseUp);
            this._ui._sliderTouchLayer.off(Laya.Event.MOUSE_OUT, this, this.onMouseUp);
            //
            var showOne = true;
            for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                if (this._ui["hand_card_" + i]._mask.visible) {
                    this.handCardclick(this._ui["hand_card_" + i]);
                    this._ui["hand_card_" + i]._mask.visible = false;
                    showOne = false;
                }
            }
            if (showOne) {
                for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                    if (this._ui["hand_card_" + i]["isUp"] == false) {
                        if (e.currentTarget.mouseX <= (this._ui["hand_card_" + i].x + 188) && e.currentTarget.mouseX >= this._ui["hand_card_" + i].x + 40) {
                            // this._ui["hand_card_" + i]._mask.visible = true;
                            this.handCardclick(this._ui["hand_card_" + i]);
                            this._ui["hand_card_" + i]._mask.visible = false;
                        }
                    }
                }
            }
            // 滑动到目的地
            // var dist: number = Laya.stage.mouseX - this.buttonPosition;
            // var targetX = this.beginPosition;
            // if (dist > this.TOGGLE_DIST)
            //     targetX = this.endPosition;
            // Laya.Tween.to(this.button, { x: targetX }, 100);
        };
        OptCardView.prototype.copyCards = function (cards) {
            var newCards = [];
            for (var k in cards) {
                var v = cards[k];
                newCards.push(v);
            }
            return newCards;
        };
        OptCardView.prototype.onTypeTouch = function (e) {
            switch (e.currentTarget) {
                case this._ui._btnduizi:
                    this.resetSelectedStatus();
                    //对子
                    if (this._duizi_index >= this._duizi_list.length) {
                        this._duizi_index = 0;
                    }
                    for (var i = 0; i < this._duizi_list[this._duizi_index].length; i++) {
                        this.selectCardByNumber(this._duizi_list[this._duizi_index][i].toNumber());
                    }
                    this._duizi_index++;
                    break;
                case this._ui._btnshunzi:
                    //顺子
                    this.resetSelectedStatus();
                    if (this._shunzi_index >= this._shunzi_list.length) {
                        this._shunzi_index = 0;
                    }
                    for (var i = 0; i < this._shunzi_list[this._shunzi_index].length; i++) {
                        this.selectCardByNumber(this._shunzi_list[this._shunzi_index][i].toNumber());
                    }
                    this._shunzi_index++;
                    break;
                case this._ui._btnzhadan:
                    //炸弹
                    this.resetSelectedStatus();
                    if (this._zhadan_index >= this._zhadan_list.length) {
                        this._zhadan_index = 0;
                    }
                    for (var i = 0; i < this._zhadan_list[this._zhadan_index].length; i++) {
                        this.selectCardByNumber(this._zhadan_list[this._zhadan_index][i].toNumber());
                    }
                    this._zhadan_index++;
                    break;
                case this._ui._btntonghuashun:
                    //同花顺
                    this.resetSelectedStatus();
                    if (this._tonghuashun_index >= this._tonghuashun_list.length) {
                        this._tonghuashun_index = 0;
                    }
                    for (var i = 0; i < this._tonghuashun_list[this._tonghuashun_index].length; i++) {
                        this.selectCardByNumber(this._tonghuashun_list[this._tonghuashun_index][i].toNumber());
                    }
                    this._tonghuashun_index++;
                    break;
                case this._ui._btnpaopai:
                    //抛牌
                    this.checkSpecial();
                    break;
            }
        };
        OptCardView.prototype.onCancel = function (e) {
            switch (e.target) {
                case this._ui._btnCancel1:
                    this.cancelCardGroupByType(1);
                    break;
                case this._ui._btnCancel2:
                    this.cancelCardGroupByType(2);
                    break;
                case this._ui._btnCancel3:
                    this.cancelCardGroupByType(3);
                    break;
            }
        };
        OptCardView.prototype.ontouchFlyCard = function (e) {
            var count;
            if (e.target == this._ui._touch_tou) {
                count = bazhang.GameData.MAX_TOU_DAO;
            }
            else {
                count = bazhang.GameData.MAX_ZHONG_WEI_DAO;
            }
            if (this.getSelectHandCardNum() != count) {
                //log("这个位置摆牌数量不对")
                HintCtrl.instance.show("摆牌数量不对");
                return;
            }
            switch (e.target) {
                case this._ui._touch_tou:
                    if (this._ui["_card_" + (bazhang.GameData.MAX_HAND - bazhang.GameData.MAX_TOU_DAO)].visible) {
                        HintCtrl.instance.show("头道有牌了!");
                        return;
                    }
                    this.flyHandCardToShowAreaByIndex(1);
                    break;
                case this._ui._touch_zhong:
                    if (this._ui["_card_" + (bazhang.GameData.MAX_ZHONG_WEI_DAO)].visible) {
                        HintCtrl.instance.show("中道有牌了!");
                        return;
                    }
                    this.flyHandCardToShowAreaByIndex(2);
                    break;
                case this._ui._touch_wei:
                    if (this._ui["_card_" + 0].visible) {
                        HintCtrl.instance.show("尾道有牌了!");
                        return;
                    }
                    this.flyHandCardToShowAreaByIndex(3);
                    break;
            }
        };
        //清除提交的牌数据
        OptCardView.prototype.clearCommitCard = function () {
            for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                this._commitCards[i] = 0;
            }
        };
        //撤销
        //
        OptCardView.prototype.cancelCardGroupByType = function (type) {
            var srcIndex = 0;
            var desIndex = 0;
            if (type == 1) {
                srcIndex = bazhang.GameData.MAX_HAND - bazhang.GameData.MAX_TOU_DAO;
                desIndex = bazhang.GameData.MAX_HAND - 1;
                this._ui._des_1.visible = false;
            }
            else if (type == 2) {
                srcIndex = bazhang.GameData.MAX_HAND - bazhang.GameData.MAX_TOU_DAO - bazhang.GameData.MAX_ZHONG_WEI_DAO;
                desIndex = bazhang.GameData.MAX_HAND - bazhang.GameData.MAX_TOU_DAO - 1;
                this._ui._des_2.visible = false;
            }
            else if (type == 3) {
                srcIndex = 0;
                desIndex = bazhang.GameData.MAX_ZHONG_WEI_DAO - 1;
                this._ui._des_3.visible = false;
            }
            this._full[type - 1] = 0;
            this._ui["_btnCancel" + type].visible = false;
            for (var i = srcIndex; i <= desIndex; i++) {
                var card = this._ui["_card_" + i];
                for (var j = 0; j < bazhang.GameData.MAX_HAND; j++) {
                    var handcard = this._ui["hand_card_" + j];
                    if (card["cardValue"] == handcard["cardValue"]) {
                        card.visible = false;
                        card["cardValue"] = 0;
                        this._commitCards[i] = 0;
                        //log(this._commitCards)
                        handcard.visible = true;
                        this._ui["hand_card_" + j]["isUp"] = false;
                    }
                }
            }
            this.resetSelectedStatus();
            this.checkTouchArea();
            this.checkCompelete();
            this.checkNormalType();
        };
        //重置选择状态
        OptCardView.prototype.resetSelectedStatus = function () {
            for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                this._ui["hand_card_" + i]["isSelect"] = false;
                Utils.injectProp(this._ui["hand_card_" + i], this._handCardPos[i]);
                this.setCard(this._ui["hand_card_" + i], this._cards[i]);
                //setCardValue(i, m_cardValue[i]);
            }
            this.sortCardPos();
        };
        //
        OptCardView.prototype.sortCardPos = function () {
            var num = 0;
            for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                if (this._ui["hand_card_" + i]["isUp"] == false) {
                    num++;
                }
            }
            var index = 0;
            for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                if (this._ui["hand_card_" + i]["isUp"] == false) {
                    var x = Math.ceil((bazhang.GameData.MAX_HAND - num) / 2);
                    Utils.injectProp(this._ui["hand_card_" + i], this._handCardPos[x + index]);
                    //log(this._handCardPos[x + index])
                    index++;
                }
            }
            //log("sortCardPos")
            //log(this._handCardPos)
        };
        OptCardView.prototype.flyHandCardToShowAreaByIndex = function (type) {
            this._lastCard = null;
            for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                this._ui["_card_" + i]._mask.visible = false;
            }
            var index = 0;
            var cards = [];
            if (type == 1) {
                index = bazhang.GameData.MAX_HAND - bazhang.GameData.MAX_TOU_DAO;
            }
            else if (type == 2) {
                index = bazhang.GameData.MAX_HAND - bazhang.GameData.MAX_TOU_DAO - bazhang.GameData.MAX_ZHONG_WEI_DAO;
            }
            else if (type == 3) {
                index = 0;
            }
            this._full[type - 1] = 1;
            for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                if (this._ui["hand_card_" + i]["isSelect"]) {
                    var posx = this._ui["_card_" + index].x;
                    var posy = this._ui["_card_" + index].y;
                    Laya.Tween.to(this._ui["hand_card_" + i], { x: posx, y: posy, scaleX: bazhang.GameData.SHOWCARD_SCALE_RATE, scaleY: bazhang.GameData.SHOWCARD_SCALE_RATE }, 200, null, Laya.Handler.create(this, function (index, i) {
                        if (this._ui["hand_card_" + i]) {
                            //log("i:" + i)
                            this._ui["hand_card_" + i].x = this._handCardPos[i].x;
                            this._ui["hand_card_" + i].y = this._handCardPos[i].y;
                            this._ui["hand_card_" + i].visible = false;
                            this._ui["hand_card_" + i].scaleX = bazhang.GameData.HANDCARD_SCALE_RATE;
                            this._ui["hand_card_" + i].scaleY = bazhang.GameData.HANDCARD_SCALE_RATE;
                            this.setCard(this._ui["_card_" + index], this._ui["hand_card_" + i]["cardValue"]);
                            //更新需要提交的数据
                            this._commitCards[index] = this._ui["_card_" + index]["cardValue"];
                            cards.push(this._commitCards[index]);
                            log(this._commitCards);
                        }
                        if (this._ui["_card_" + index]) {
                            this._ui["_card_" + index].visible = true;
                            //log("index:" + index)
                        }
                        if (index == bazhang.GameData.MAX_ZHONG_WEI_DAO - 1 || index == bazhang.GameData.MAX_ZHONG_WEI_DAO + bazhang.GameData.MAX_ZHONG_WEI_DAO - 1 || index == bazhang.GameData.MAX_HAND - 1) {
                            Laya.timer.once(100, this, function () {
                                var t_cards = [];
                                var normalType = this._algorithm.normalType(cards).type;
                                if (type == 2 && (normalType == 5 || normalType == 4)) {
                                    this._ui["_des_" + type].skin = "bazhang/selectCardLayer/shoubai/img_shoupai_cardType_" + normalType + "_1.png";
                                }
                                else {
                                    this._ui["_des_" + type].skin = "bazhang/selectCardLayer/shoubai/img_shoupai_cardType_" + normalType + ".png";
                                }
                                this._ui["_des_" + type].visible = true;
                                this.resetSelectedStatus();
                                this.checkTouchArea();
                                this.checkCompelete();
                                this.checkLastDao();
                                this.checkCardType();
                                this.checkNormalType();
                            });
                        }
                        this._ui["_btnCancel" + type].visible = true;
                    }, [index, i, type, cards]));
                    //表示手牌已经摆在展示区
                    this._ui["hand_card_" + i]["isUp"] = true;
                    index++;
                }
            }
        };
        /**
         *
         * @param index 头道中道味道 1,2,3
         */
        OptCardView.prototype.checkCardTypeByIndex = function (index) {
            var cards = [];
            for (var i = 0; i < 8; i++) {
                if (this._commitCards[i] == 0)
                    continue;
                if (index == 1) {
                    if (i > 5) {
                        cards.push(this._commitCards[i]);
                    }
                }
                else if (index == 2) {
                    if (i >= 3 && i <= 5) {
                        cards.push(this._commitCards[i]);
                    }
                }
                else {
                    if (i < 3) {
                        cards.push(this._commitCards[i]);
                    }
                }
            }
            var t_cards = [];
            var normalType = this._algorithm.normalType(cards).type;
            if (index == 2 && (normalType == 5 || normalType == 4)) {
                this._ui["_des_" + index].skin = "bazhang/selectCardLayer/shoubai/img_shoupai_cardType_" + normalType + "_1.png";
            }
            else {
                this._ui["_des_" + index].skin = "bazhang/selectCardLayer/shoubai/img_shoupai_cardType_" + normalType + ".png";
            }
        };
        OptCardView.prototype.checkLastDao = function () {
            var num = 0;
            var index = 0;
            for (var i = 0; i < 3; i++) {
                if (this._full[i] == 0) {
                    num++;
                    index = i;
                }
            }
            //还剩一道的时候，自动补牌
            if (num == 1) {
                for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                    if (this._ui["hand_card_" + i]["isUp"] == false) {
                        this._ui["hand_card_" + i]["isSelect"] = true;
                        this.flyHandCardToShowAreaByIndex(index + 1);
                    }
                }
            }
        };
        OptCardView.prototype.checkCompelete = function () {
            for (var i = 0; i < 3; i++) {
                if (this._full[i] == 0) {
                    //仍有没满的道，则return
                    this._ui._btnBox.visible = false;
                    return;
                }
            }
            //全部摆满后展示按钮
            this._ui._btnBox.visible = true;
        };
        OptCardView.prototype.onClick = function (e) {
            // switch (e.target.name) {
            //     case "special":
            //         if (this._lastChoose)
            //             this._lastChoose._choose.selected = false
            //         this._selectType = GameDef.OptType.PA_MAKE_S;
            //         let view1 = e.target.parent as SpecialCard
            //         view1._choose.selected = true
            //         this._lastChoose = view1
            //         this.resetCards()
            //         for (var k in view1._cards) {
            //             let card = this._ui["_card_" + k]
            //             this.setCard(card, view1._cards[k])
            //         }
            //         let cards1 = this.copyCards(view1._cards)
            //         this._cards = cards1
            //         break;
            //     case "normal":
            //         if (this._lastChoose)
            //             this._lastChoose._choose.selected = false
            //         this._selectType = GameDef.OptType.PA_MAKE_N;
            //         let view = e.target.parent as NormalCard
            //         view._choose.selected = true
            //         this._lastChoose = view
            //         this.resetCards()
            //         console.info(view._cards)
            //         for (var k in view._cards) {
            //             let card = this._ui["_card_" + k]
            //             this.setCard(card, view._cards[k])
            //         }
            //         let cards = this.copyCards(view._cards)
            //         this._cards = cards
            //         break;
            // }
        };
        OptCardView.prototype.start = function () {
            if (!this._timeCirleView) {
                this._timeCirleView = new bazhang.TimeCircleView();
                this._timeCirleView.top = 20;
                this._timeCirleView.right = 20;
                this._ui._showBoxImg.addChild(this._timeCirleView);
            }
            this._timeCirleView.start(this._timeout);
            // this._angle = 0;
            // this._maxTime = time;
            // this._time = time
            // this._startTime = Laya.Browser.now();
            // Laya.timer.loop(1000, this, this.onTimer);
            // this.onTimer();
        };
        OptCardView.prototype.onTimer = function () {
            this._time = this._time - 1;
            this._ui._time.text = String(this._time);
            var time = Laya.Browser.now();
            var multiple = (this._maxTime - this._time) / this._maxTime;
            var angle = Math.min(360, multiple * 360);
            this.changeGraphics(angle);
            if (multiple >= 1) {
                this.stop();
            }
        };
        OptCardView.prototype.stop = function () {
            Laya.timer.clear(this, this.onTimer);
        };
        OptCardView.prototype.changeGraphics = function (angle) {
            this._mask.graphics.clear();
            this._mask.graphics.drawPie(63.5, 63.5, 75, -90 + angle, 270, "#ffffff");
        };
        OptCardView.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            this._selectType = GameDef.OptType.PA_MAKE_N;
            console.info(this._cards);
            this.init(this._data);
            this._mask.graphics.clear();
            this.start();
        };
        // this.isSpecial = isSpecial;
        //         this.types = types;
        //         this.cards = cards;
        OptCardView.prototype.resetCards = function () {
            for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                this._ui["_card_" + i].x = this._uiPos[i].x;
                this._ui["_card_" + i].y = this._uiPos[i].y;
            }
        };
        OptCardView.prototype.init = function (cards) {
            for (var k in cards) {
                var card = this._ui["_card_" + k];
                card.visible = false;
                this.setCard(card, 0);
            }
            this._full = [0, 0, 0];
            this._ui._btnBox.visible = false;
            for (var i = 1; i <= 3; i++) {
                this._ui["_btnCancel" + i].visible = false;
            }
            for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                var card = this._ui["hand_card_" + i];
                card["isSelect"] = false;
                card["isUp"] = false;
                this.setCard(card, cards[i]);
            }
            this._ui._des_1.visible = false;
            this._ui._des_2.visible = false;
            this._ui._des_3.visible = false;
            this.checkSpecial();
            this.checkNormalType();
        };
        OptCardView.prototype.checkNormalType = function () {
            var handCards = [];
            for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                if (this._ui["hand_card_" + i]["isUp"] == false) {
                    handCards.push(this._ui["hand_card_" + i]["cardValue"]);
                }
            }
            //test
            // let handCards = [31,32,63,81,101,131,140,2]
            // this._algorithm = new AutoSeleCards()
            this._duizi_list = [];
            this._shunzi_list = [];
            this._tonghuashun_list = [];
            this._zhadan_list = [];
            this._duizi_list = this._algorithm.getAllDuiZi(handCards);
            //log(this._duizi_list)
            this._shunzi_list = this._algorithm.getAllShunzi(handCards);
            // log(this._shunzi_list)
            this._tonghuashun_list = this._algorithm.getAllTongHuaShun(handCards);
            // log(this._tonghuashun_list)
            this._zhadan_list = this._algorithm.getAllZhaDan(handCards);
            // log(this._zhadan_list)
            if (this._duizi_list.length > 0) {
                //有对子
                this._ui._btnduizi.skin = "bazhang/selectCardLayer/btn_canSelect.png";
                this._ui._img_duizi.skin = "bazhang/selectCardLayer/btnWord1/img_duizi_green.png";
                this._ui._btnduizi.mouseEnabled = true;
            }
            else {
                //无对子
                this._ui._btnduizi.skin = "bazhang/selectCardLayer/btn_unselect.png";
                this._ui._img_duizi.skin = "bazhang/selectCardLayer/btnWord1/img_duizi_gray.png";
                this._ui._btnduizi.mouseEnabled = false;
            }
            if (this._shunzi_list.length > 0) {
                //有顺子
                this._ui._btnshunzi.skin = "bazhang/selectCardLayer/btn_canSelect.png";
                this._ui._img_shunzi.skin = "bazhang/selectCardLayer/btnWord1/img_shunzi_green.png";
                this._ui._btnshunzi.mouseEnabled = true;
            }
            else {
                //无顺子
                this._ui._btnshunzi.skin = "bazhang/selectCardLayer/btn_unselect.png";
                this._ui._img_shunzi.skin = "bazhang/selectCardLayer/btnWord1/img_shunzi_gray.png";
                this._ui._btnshunzi.mouseEnabled = false;
            }
            if (this._tonghuashun_list.length > 0) {
                //有同花顺
                this._ui._btntonghuashun.skin = "bazhang/selectCardLayer/btn_canSelect.png";
                this._ui._img_tonghuashun.skin = "bazhang/selectCardLayer/btnWord1/img_tonghuashun_green.png";
                this._ui._btntonghuashun.mouseEnabled = true;
            }
            else {
                //无同花顺
                this._ui._btntonghuashun.skin = "bazhang/selectCardLayer/btn_unselect.png";
                this._ui._img_tonghuashun.skin = "bazhang/selectCardLayer/btnWord1/img_tonghuashun_gray.png";
                this._ui._btntonghuashun.mouseEnabled = false;
            }
            if (this._zhadan_list.length > 0) {
                //有对子
                this._ui._btnzhadan.skin = "bazhang/selectCardLayer/btn_canSelect.png";
                this._ui._img_zhadan.skin = "bazhang/selectCardLayer/btnWord1/img_zhadan_green.png";
                this._ui._btnzhadan.mouseEnabled = true;
            }
            else {
                //无对子
                this._ui._btnzhadan.skin = "bazhang/selectCardLayer/btn_unselect.png";
                this._ui._img_zhadan.skin = "bazhang/selectCardLayer/btnWord1/img_zhadan_gray.png";
                this._ui._btnzhadan.mouseEnabled = false;
            }
        };
        OptCardView.prototype.checkSpecial = function () {
            var _this = this;
            this._ui._btnpaopai.skin = "bazhang/selectCardLayer/btn_unselect.png";
            this._ui._img_paopai.skin = "bazhang/selectCardLayer/btnWord1/img_paopai_gray.png";
            this._ui._btnpaopai.mouseEnabled = false;
            if (this._isWuPaoPai) {
                //log("当前为无抛牌规则，不可抛牌")
                return;
            }
            var specialType = this._algorithm.specialType(this._cards);
            log("specialType:" + specialType);
            if (specialType > 0) {
                this._ui._btnpaopai.skin = "bazhang/selectCardLayer/btn_paopai_di.png";
                this._ui._img_paopai.skin = "bazhang/selectCardLayer/btnWord1/img_paopai_yellow.png";
                this._ui._btnpaopai.mouseEnabled = true;
                AlertInGameCtrl.instance.show("出现特殊牌型" + bazhang.GameDataLayOut.typeName[specialType] + ",<br>预计赢取每家" + bazhang.GameDataLayOut.typeScore[specialType] + "<br>是否按照特殊牌型出牌", function (code) {
                    if (code == AlertCtrl.CONFIRM) {
                        _this._selectType = GameDef.OptType.PA_MAKE_S;
                        var cards = _this.copyCards(_this._cards);
                        _this._commitCards = cards;
                        _this.confirm();
                    }
                    else {
                        _this._selectType = GameDef.OptType.PA_MAKE_N;
                    }
                });
            }
            else {
                //普通牌型 检测按钮
                //this.checkNormalType()
            }
        };
        OptCardView.prototype.setCard = function (card, value) {
            var baseUrl = "pokerCardBig/pokerCardBig_";
            card._imgBack.visible = false;
            card._imgFont.visible = true;
            card._imgNum.visible = true;
            card._imgFlowerBig.visible = true;
            card["cardValue"] = value;
            if (card._imgFlowerSmall)
                card._imgFlowerSmall.visible = true;
            if (!card._imgFont.texture)
                card._imgFont.source = Laya.Loader.getRes(baseUrl + "front.png");
            var flower = value % 10;
            var num = Math.floor(value / 10);
            card._imgFlowerBig.source = Laya.Loader.getRes(baseUrl + "flower_big_" + flower + ".png");
            if (card._imgFlowerSmall)
                card._imgFlowerSmall.source = Laya.Loader.getRes(baseUrl + "flower_small_" + flower + ".png");
            var numUrl = baseUrl;
            if (this.isBlack(flower))
                numUrl += "black_";
            else
                numUrl += "red_";
            var imgNum = num;
            if (num == 14)
                imgNum = 1;
            card._imgNum.source = Laya.Loader.getRes(numUrl + imgNum + ".png");
            if (value == 1) {
                card._imgFlowerBig.source = Laya.Loader.getRes(baseUrl + "flower_big_4.png");
                card._imgFlowerSmall.source = null;
                card._imgNum.source = Laya.Loader.getRes(baseUrl + "red_14.png");
            }
            else if (value == 2) {
                card._imgFlowerBig.source = Laya.Loader.getRes(baseUrl + "flower_small_4.png");
                card._imgFlowerSmall.source = null;
                card._imgNum.source = Laya.Loader.getRes(baseUrl + "black_14.png");
            }
        };
        OptCardView.prototype.isBlack = function (flower) {
            return (flower == poker.CardUI.FLOWER_CLUB || flower == poker.CardUI.FLOWER_SPADE);
        };
        OptCardView.prototype.selectCardByNumber = function (card) {
            for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                if (this._ui["hand_card_" + i]["cardValue"] == card) {
                    this.handCardclick(this._ui["hand_card_" + i]);
                    break;
                }
            }
        };
        OptCardView.prototype.handCardclick = function (card) {
            //手牌点击
            // let card = e.currentTarget
            if (card["isSelect"]) {
                //已选择的情况
                Laya.Tween.to(card, { x: card.x, y: card.y + 20 }, 50, null, Laya.Handler.create(this, function () {
                    card["isSelect"] = false;
                    this.checkTouchArea();
                }));
                //移除不选择的项目
            }
            else {
                Laya.Tween.to(card, { x: card.x, y: card.y - 20 }, 50, null, Laya.Handler.create(this, function () {
                    card["isSelect"] = true;
                    this.checkTouchArea();
                }));
            }
        };
        OptCardView.prototype.getSelectHandCardNum = function () {
            var num = 0;
            for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                var card = this._ui["hand_card_" + i];
                if (card["isSelect"]) {
                    num++;
                }
            }
            return num;
        };
        OptCardView.prototype.checkTouchArea = function () {
            if (this.getSelectHandCardNum() >= 1) {
                this._ui._touchpanel.visible = true;
                for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                    this._ui["_card_" + i].mouseEnabled = false;
                }
            }
            else {
                this._ui._touchpanel.visible = false;
                for (var i = 0; i < bazhang.GameData.MAX_HAND; i++) {
                    this._ui["_card_" + i].mouseEnabled = true;
                }
            }
        };
        OptCardView.prototype.click = function (e) {
            if (!this._lastCard) {
                this._lastCard = e.currentTarget;
                this._lastCard._mask.visible = true;
            }
            else {
                if (this._changeing)
                    return;
                var card_1 = e.currentTarget;
                var toX_1 = card_1.x;
                var toY_1 = card_1.y;
                var lastCard = this._lastCard;
                var fromX_1 = lastCard.x;
                var fromY_1 = lastCard.y;
                this._changeing = true;
                var srcValue_1 = this._lastCard["cardValue"];
                var desValue_1 = card_1["cardValue"];
                Laya.Tween.to(card_1, { x: this._lastCard.x, y: this._lastCard.y }, 200, null, Laya.Handler.create(this, function () {
                    this.setCard(card_1, srcValue_1);
                    card_1.x = toX_1;
                    card_1.y = toY_1;
                    this._commitCards[card_1.name] = srcValue_1;
                }, [toX_1, toY_1, srcValue_1]));
                Laya.Tween.to(this._lastCard, { x: toX_1, y: toY_1 }, 200, null, Laya.Handler.create(this, function () {
                    this.setCard(this._lastCard, desValue_1);
                    this._lastCard.x = fromX_1;
                    this._lastCard.y = fromY_1;
                    this._commitCards[this._lastCard.name] = desValue_1;
                    this._lastCard._mask.visible = false;
                    //this._lastCard.name = name
                    this._lastCard = null;
                    //console.info(this._cards)
                    this._changeing = false;
                    this.checkCardType();
                }, [fromX_1, fromY_1, desValue_1]));
            }
        };
        OptCardView.prototype.onAllCancel = function () {
            for (var i = 1; i <= 3; i++) {
                this.cancelCardGroupByType(i);
            }
        };
        OptCardView.prototype.confirm = function () {
            if (this._selectType == GameDef.OptType.PA_MAKE_N && this.checkBadBeat(this._commitCards)) {
                // this._ui._baopai.alpha = 1
                // Laya.Tween.to(this._ui._baopai, { alpha: 0 }, 1000, null, null, 1000)
            }
            else {
                server.playerOptReq({ opttype: this._selectType, cards: this._commitCards || [] });
                this.hide();
            }
        };
        OptCardView.prototype.checkBadBeat = function (_commitCards) {
            //test
            //this._algorithm = new AutoSeleCards()
            //true 为不可提交  false 为可提交
            var card_tou = [];
            var card_zhong = [];
            var card_wei = [];
            for (var i = 0; i < _commitCards.length; i++) {
                if (i < 3) {
                    card_wei.push(_commitCards[i]);
                }
                else if (i < 6) {
                    card_zhong.push(_commitCards[i]);
                }
                else {
                    card_tou.push(_commitCards[i]);
                }
            }
            var result_wei = this._algorithm.normalType(card_wei);
            var result_zhong = this._algorithm.normalType(card_zhong);
            var result_tou = this._algorithm.normalType(card_tou);
            if (bazhang.AutoSeleCards.compareTypeCards(result_wei.type, result_wei.cards, result_zhong.type, result_zhong.cards) == 1) {
                //log("尾道比中道小" + "交换")
                HintCtrl.instance.show("尾道比中道小，自动交换");
                this.changgeZhongWei();
                return true;
            }
            if (bazhang.AutoSeleCards.compareTypeCards(result_wei.type, result_wei.cards, result_tou.type, result_tou.cards) == 1) {
                //log("尾道比头道小" + "报错")
                HintCtrl.instance.show("尾道比头道小，请重新摆牌");
                return true;
            }
            if (bazhang.AutoSeleCards.compareTypeCards(result_zhong.type, result_zhong.cards, result_tou.type, result_tou.cards) == 1) {
                //log("中道比头道小比头道小" + "报错")
                HintCtrl.instance.show("中道比头道小，请重新摆牌");
                return true;
            }
            return false;
        };
        OptCardView.prototype.changgeZhongWei = function () {
            if (this._changeing)
                return;
            for (var i = 0; i < 3; i++) {
                var srcCard = this._ui["_card_" + i];
                var x = i + 3;
                var desCard = this._ui["_card_" + x];
                var toX = desCard.x;
                var toY = desCard.y;
                var fromX = srcCard.x;
                var fromY = srcCard.y;
                this._changeing = true;
                var srcValue = srcCard["cardValue"];
                var desValue = desCard["cardValue"];
                // Laya.Tween.to(srcCard, { x: toX, y: toX }, 0, null, Laya.Handler.create(this, function () {
                this.setCard(srcCard, desValue);
                srcCard.x = fromX;
                srcCard.y = fromY;
                this._commitCards[srcCard.name] = desValue;
                // }, [fromX, fromY, desValue, srcCard]))
                // Laya.Tween.to(desCard, { x: fromX, y: fromY }, 0, null, Laya.Handler.create(this, function () {
                this.setCard(desCard, srcValue);
                desCard.x = toX;
                desCard.y = toY;
                this._commitCards[desCard.name] = srcValue;
                this._changeing = false;
                // }, [toX, toY, srcValue, desCard]))
            }
            this.checkCardType();
            log(this._commitCards);
        };
        OptCardView.prototype.checkCardType = function () {
            for (var i = 1; i <= 3; i++) {
                this.checkCardTypeByIndex(i);
            }
        };
        OptCardView.prototype.hide = function () {
            if (this._ui) {
                this._lastCard = null;
                if (this._timeCirleView) {
                    this._timeCirleView.clear();
                    this._timeCirleView = null;
                }
                if (this._uiMask)
                    this._uiMask.removeSelf();
                this._ui.removeSelf();
                this._ui = null;
                this.stop();
                this._changeing = false;
            }
        };
        OptCardView.prototype.onResize = function () {
            _super.prototype.onResize.call(this);
            if (AppControl.getInstance().stage.width / AppControl.getInstance().stage.height > 1.8) {
                this._ui.scaleY = 0.9;
                this._ui.scaleX = 0.9;
                this._ui.bottom = 0;
            }
        };
        return OptCardView;
    }(BaseCtrl));
    bazhang.OptCardView = OptCardView;
})(bazhang || (bazhang = {}));
//# sourceMappingURL=OptCardView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var bazhang;
(function (bazhang) {
    var TimeCircleView = /** @class */ (function (_super) {
        __extends(TimeCircleView, _super);
        function TimeCircleView() {
            var _this = _super.call(this) || this;
            _this._mask = new Laya.Sprite();
            _this._circle.mask = _this._mask;
            return _this;
        }
        TimeCircleView.prototype.start = function (time) {
            if (time === void 0) { time = 15; }
            this._angle = 0;
            this._maxTime = time;
            this.time = time;
            this._lefttime = time;
            this._startTime = Laya.Browser.now();
            this._mask.graphics.clear();
            Laya.timer.loop(100, this, this.onTimer);
            this.onTimer();
        };
        TimeCircleView.prototype.onTimer = function () {
            this._lefttime = this._lefttime - 0.1;
            this.time = Math.ceil(this._lefttime) > 0 ? Math.ceil(this._lefttime) : 0;
            this._time.text = String(this.time);
            var time = Laya.Browser.now();
            var multiple = (this._maxTime - this._lefttime) / this._maxTime;
            var angle = Math.min(360, multiple * 360);
            this.changeGraphics(angle);
            if (multiple >= 1) {
                this.stop();
            }
        };
        TimeCircleView.prototype.stop = function () {
            Laya.timer.clear(this, this.onTimer);
        };
        TimeCircleView.prototype.changeGraphics = function (angle) {
            this._mask.graphics.clear();
            this._mask.graphics.drawPie(63.5, 63.5, 75, -90 + angle, 270, "#ffffff");
        };
        TimeCircleView.prototype.clear = function () {
            Laya.timer.clearAll(this);
        };
        return TimeCircleView;
    }(ui.bazhang.TimeCircleUI));
    bazhang.TimeCircleView = TimeCircleView;
})(bazhang || (bazhang = {}));
//# sourceMappingURL=TimeCircleView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var bazhang;
(function (bazhang) {
    var WinSpecialView = /** @class */ (function (_super) {
        __extends(WinSpecialView, _super);
        function WinSpecialView() {
            var _this = _super.call(this) || this;
            _this._autoHide = false;
            _this["name"] = "WinSpecialView";
            return _this;
        }
        Object.defineProperty(WinSpecialView, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new WinSpecialView();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        WinSpecialView.prototype.show = function (data) {
            this._data = data;
            this.showself();
        };
        /**
  * 这里完成new ui，添加注册监听等初始化工作
  */
        WinSpecialView.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.bazhang.showspecialUI();
                this._head = new HeadUI();
                this._ui._avatar.addChild(this._head);
                this._head.nameLimit = 10;
                this._head.setImageBounds(73, 73);
                this._head._labInfo.visible = false;
                // this._head._labName.visible = false
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        WinSpecialView.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            this.playEffect();
        };
        WinSpecialView.prototype.playEffect = function () {
            var info = this._data.shift();
            if (info) {
                if (bazhang.GameDataLayOut.typeList[info.info[0].name]) {
                    var player = BaseGameData.getPlayerDataBySeatid(info.seatid);
                    //SoundManager.instance.playEffect(info.info[0].name,player.sex)
                    this._head.getInfo(player.uid);
                    this._head.setLabName({ x: 106, y: 25, align: "left", color: "#0d0d0d", fontSize: 24 });
                    for (var k in player.handCards) {
                        var v = player.handCards[k];
                        this.setCard(this._ui["_card_" + k], v);
                    }
                    var score = bazhang.GameDataLayOut.typeScore[info.info[0].name]; //info.info[0].value
                    if (score > 0) {
                        this._ui._score.text = "+" + score;
                        this._ui._score.font = "font_num_14";
                    }
                    else {
                        this._ui._score.text = score;
                        this._ui._score.font = "font_num_15";
                    }
                    this._ui._type.skin = bazhang.GameDataLayOut.typeList[info.info[0].name];
                    this._ui.ani1.play(1, false);
                    Laya.timer.once(2000, this, function () {
                        this.playEffect();
                    });
                }
                else {
                    this.playEffect();
                }
            }
            else {
                this.hide();
                AnimationManager.instance.animationOver();
            }
        };
        WinSpecialView.prototype.setCard = function (card, value) {
            var baseUrl = "pokerCardBig/pokerCardBig_";
            card._imgBack.visible = false;
            card._imgFont.visible = true;
            card._imgNum.visible = true;
            card._imgFlowerBig.visible = true;
            if (card._imgFlowerSmall)
                card._imgFlowerSmall.visible = true;
            if (!card._imgFont.texture)
                card._imgFont.source = Laya.Loader.getRes(baseUrl + "front.png");
            // if (card._imgOver && !card._imgOver.texture)
            // {
            // 	card._imgOver.source = Laya.Loader.getRes(baseUrl + "mask.png");
            // 	card._imgOver.alpha=0.2;
            // }					
            // if (card._imgMask && !card._imgMask.texture)
            // 	card._imgMask.source = Laya.Loader.getRes(baseUrl + "mask.png");
            var flower = value % 10;
            var num = Math.floor(value / 10);
            card._imgFlowerBig.source = Laya.Loader.getRes(baseUrl + "flower_big_" + flower + ".png");
            if (card._imgFlowerSmall)
                card._imgFlowerSmall.source = Laya.Loader.getRes(baseUrl + "flower_small_" + flower + ".png");
            var numUrl = baseUrl;
            if (this.isBlack(flower))
                numUrl += "black_";
            else
                numUrl += "red_";
            var imgNum = num;
            if (num == 14)
                imgNum = 1;
            card._imgNum.source = Laya.Loader.getRes(numUrl + imgNum + ".png");
            if (value == 1) {
                card._imgFlowerBig.source = Laya.Loader.getRes(baseUrl + "flower_big_4.png");
                card._imgFlowerSmall.source = null;
                card._imgNum.source = Laya.Loader.getRes(baseUrl + "red_14.png");
            }
            else if (value == 2) {
                card._imgFlowerBig.source = Laya.Loader.getRes(baseUrl + "flower_small_4.png");
                card._imgFlowerSmall.source = null;
                card._imgNum.source = Laya.Loader.getRes(baseUrl + "black_14.png");
            }
        };
        WinSpecialView.prototype.isBlack = function (flower) {
            return (flower == poker.CardUI.FLOWER_CLUB || flower == poker.CardUI.FLOWER_SPADE);
        };
        return WinSpecialView;
    }(BaseCtrl));
    bazhang.WinSpecialView = WinSpecialView;
})(bazhang || (bazhang = {}));
//# sourceMappingURL=WinSpecialView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
* name
*/
var guanpai;
(function (guanpai) {
    var GuanPaiGameEndInfoRenderer = /** @class */ (function (_super) {
        __extends(GuanPaiGameEndInfoRenderer, _super);
        function GuanPaiGameEndInfoRenderer() {
            return _super.call(this) || this;
        }
        GuanPaiGameEndInfoRenderer.prototype.onDataChanged = function (uid) {
            if (this.dataSource && !this.dataSource.nickname && this.dataSource.hasOwnProperty("uid") && this.dataSource.uid == uid) {
                var player = BaseGameData.getPlayerDataByUid(uid);
                this.dataSource.nickname = player.nickname;
                this.updata();
                Dispatcher.off(EventNames.PLAYER_DATA_CHANGED, this, this.onDataChanged);
            }
        };
        //nickname leftCards boom score
        GuanPaiGameEndInfoRenderer.prototype.updata = function () {
            if (this.dataSource) {
                this._labNickname.text = Utils.getFitNickName(this.dataSource.nickname, 10);
                if (!this.dataSource.nickname)
                    Dispatcher.on(EventNames.PLAYER_DATA_CHANGED, this, this.onDataChanged);
                else
                    Dispatcher.off(EventNames.PLAYER_DATA_CHANGED, this, this.onDataChanged);
                var isGrab;
                var i;
                if (this.dataSource.info[0].value == 0 && BaseGameData.btnSeatid) {
                    isGrab = true;
                    for (i = 0; i < this.dataSource.othersCards.length; i++) {
                        if (this.dataSource.othersCards[i] != guanpai.GuanPaiGameData.maxCards) {
                            isGrab = false;
                            break;
                        }
                    }
                }
                var isPoGuan;
                if (BaseGameData.btnSeatid && BaseGameData.btnSeatid != this.dataSource.info[4].value && this.dataSource.seatid == this.dataSource.info[4].value)
                    isPoGuan = true;
                this._imgPo.visible = isPoGuan;
                this._imgGrab.visible = isGrab;
                if (this.dataSource.info[0].value == guanpai.GuanPaiGameData.maxCards && BaseGameData.btnSeatid && BaseGameData.btnSeatid == this.dataSource.info[4])
                    this._imgQuan.visible = true;
                else if (this.dataSource.info[0].value == guanpai.GuanPaiGameData.maxCards && !BaseGameData.btnSeatid)
                    this._imgQuan.visible = true;
                else
                    this._imgQuan.visible = false;
                this._labLeftCount.text = this.dataSource.info[0].value;
                if (this.dataSource.info[1].hasOwnProperty("value")) {
                    this._labBomb.text = "×" + this.dataSource.info[1].value;
                    this._imgBomb.visible = true;
                }
                else {
                    this._labBomb.text = "";
                    this._imgBomb.visible = false;
                }
                if (this.dataSource.info[2].hasOwnProperty("value")) {
                    if (this.dataSource.info[2].value >= 0) {
                        this._labScore.font = "font_num_14";
                        this._labScore.text = "+" + this.dataSource.info[2].value;
                    }
                    else {
                        this._labScore.font = "font_num_15";
                        this._labScore.text = this.dataSource.info[2].value;
                    }
                }
                else {
                    this._labScore.text = "+0";
                    this._labScore.font = "font_num_14";
                }
                var color = "";
                if (this.dataSource.seatid == BaseGameData.selfSeatid)
                    color = "#ffe00d";
                else
                    color = "#fff4d0";
                this._labNickname.color = color;
                this._labLeftCount.color = color;
                this._labBomb.color = color;
            }
        };
        return GuanPaiGameEndInfoRenderer;
    }(ui.guanpai.GuanPaiGameEndInfoRendererUI));
    guanpai.GuanPaiGameEndInfoRenderer = GuanPaiGameEndInfoRenderer;
})(guanpai || (guanpai = {}));
//# sourceMappingURL=GuanPaiGameEndInfoRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 扑克游戏基础类;
*/
var BasePokerPage = /** @class */ (function (_super) {
    __extends(BasePokerPage, _super);
    function BasePokerPage() {
        var _this = _super.call(this) || this;
        _this._moveCardTime = 100;
        _this._myHandCardPosiY = 546;
        _this._myFoldCardPosiY = 386;
        _this._myFoldCardUpPosiY = 347;
        _this._testIdx = 10;
        _this.name = "BasePokerPage";
        _this._loadDatas = _this._loadDatas.concat([{ url: ResourceConfig.SHEET_POKER_CARD_BIG, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_POKER_CARD_SMALL, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_POKER, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_GAME_END, type: Laya.Loader.ATLAS }]);
        return _this;
    }
    BasePokerPage.prototype.init = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        _super.prototype.init.apply(this, params);
        if (!this._pokerCon) {
            this._pokerCon = new ui.poker.PokerConUI();
            this._table.addChild(this._pokerCon);
        }
    };
    BasePokerPage.prototype.initEvent = function () {
        _super.prototype.initEvent.call(this);
        EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.POKER_SELECTED_CHANGE, this, this.onCheckCanUse);
        EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.POKER_OVER_CHANGE, this, this.onCheckMouseOverCards);
        EventManager.instance.registerOnObject(this, this._pokerCon._boxCards, Laya.Event.MOUSE_UP, this, this.onMouseUp);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_PLAYER_OPT_NTF, this, this.onPlayerOptNtfHandler);
        // EventManager.instance.registerOnObject(this, server, EventNames.GAME_PLAYER_OPT_REP, this, this.onPlayerOptRepHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_CARD_MOVE_NTF, this, this.onCardMoveNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_GAME_END_NTF, this, this.onGameEndNtfHandler); //
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_SHOW_CARDS_NTF, this, this.onShowCardsNtfHandler); //
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_RECONNECT_INFO, this, this.onReconnectInfoHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_SHOW_INFO_NTF, this, this.onShowInfoNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_DETAIL_NTF, this, this.onDetailNtfHandler);
    };
    BasePokerPage.prototype.clearData = function (needCheckIsGameing) {
        if (needCheckIsGameing === void 0) { needCheckIsGameing = true; }
        _super.prototype.clearData.call(this, needCheckIsGameing);
        this.removeAll();
    };
    BasePokerPage.prototype.removeAll = function () {
        this._lastSeatid = 0;
        this._lastPlayCards = [];
        this._helpCards = [];
        this._helpIdx = 0;
        this._selfPlayCards = [];
        this.removeAllCards();
        poker.GameEndWinCtrl.instance.hide();
        poker.GameEndLoseCtrl.instance.hide();
    };
    BasePokerPage.prototype.removeAllCards = function () {
        this.removeSelfHandCards();
        this.removeSelfFoldCards();
        this.removeRightFoldCards();
        this.removeLeftFoldCards();
        this.removePublicCards();
        this.removeSendCards();
    };
    BasePokerPage.prototype.removeSelfHandCards = function () {
        if (!this._selfHandCards)
            this._selfHandCards = [];
        else {
            while (this._selfHandCards.length) {
                var card = this._selfHandCards.pop();
                card.removeSelf();
                poker.CardBigUI.returnCard(card);
            }
        }
    };
    BasePokerPage.prototype.removeSelfFoldCards = function () {
        if (!this._selfFoldCards)
            this._selfFoldCards = [];
        else {
            while (this._selfFoldCards.length) {
                var card = this._selfFoldCards.pop();
                card.removeSelf();
                poker.CardBigUI.returnCard(card);
            }
        }
    };
    BasePokerPage.prototype.removeRightFoldCards = function () {
        if (!this._rightFoldCards)
            this._rightFoldCards = [];
        else {
            while (this._rightFoldCards.length) {
                var card = this._rightFoldCards.pop();
                card.removeSelf();
                poker.CardSmallUI.returnCard(card);
            }
        }
    };
    BasePokerPage.prototype.removeLeftFoldCards = function () {
        if (!this._leftFoldCards)
            this._leftFoldCards = [];
        else {
            while (this._leftFoldCards.length) {
                var card = this._leftFoldCards.pop();
                card.removeSelf();
                poker.CardSmallUI.returnCard(card);
            }
        }
    };
    BasePokerPage.prototype.removePublicCards = function () {
        if (!this._publicCards)
            this._publicCards = [];
        else {
            while (this._publicCards.length) {
                var card = this._publicCards.pop();
                card.removeSelf();
                poker.CardSmallUI.returnCard(card);
            }
        }
    };
    BasePokerPage.prototype.removeSendCards = function () {
        if (!this._sendCards)
            this._sendCards = [];
        else {
            while (this._sendCards.length) {
                var card = this._sendCards.pop();
                card.removeSelf();
                poker.CardSmallUI.returnCard(card);
            }
        }
    };
    BasePokerPage.prototype.onGameStartNtfHandler = function (msg) {
        _super.prototype.onGameStartNtfHandler.call(this, msg);
        this.removeAll();
    };
    BasePokerPage.prototype.test = function () {
        var _this = this;
        //询问黑挖
        Laya.timer.once(300, this, function () {
            _this.onPlayerOptNtfHandler({
                seatid: BaseGameData.selfSeatid, timeout: 15, opts: [{ opttype: GameDef.OptType.CALL_SCORE, cards: [0, 4] }]
            });
        });
        //每个人发16张牌
        Laya.timer.once(800, this, function () {
            _this.onShowInfoNtfHandler({
                type: GameDef.ShowInfoType.DEAL_CARDS, info: [16, 16, 16]
            });
        });
        //我的手牌
        var cards = [];
        for (var i = 0; i < 20; i++) {
            var ran = Math.floor(Math.random() * WaKengCardsType.cards.length);
            cards.push(WaKengCardsType.cards[ran]);
            WaKengCardsType.cards.splice(ran, 1);
        }
        cards = [40, 41, 42, 43, 51, 52, 53, 72, 73, 70, 80, 81, 82, 90, 91, 92, 93, 100, 101, 110];
        Laya.timer.once(1300, this, function () {
            _this.onCardMoveNtfHandler({
                cards: cards, fromSeatid: 0,
                toSeatid: BaseGameData.selfSeatid, areaid: GameDef.AREA_TYPE.HAND_CARD, opttype: GameDef.OptType.MJ_DEAL, count: 20
            });
        });
        //上家挖1分
        Laya.timer.once(1800, this, function () {
            _this.onShowInfoNtfHandler({
                type: GameDef.ShowInfoType.CALL_SCORE, info: [0, 3, 1]
            });
        });
        //询问挖坑
        Laya.timer.once(2300, this, function () {
            _this.onPlayerOptNtfHandler({
                seatid: BaseGameData.selfSeatid, timeout: 15, opts: [{ opttype: GameDef.OptType.CALL_SCORE2, cards: [0, 2, 3] }]
            });
        });
        //下家挖3分
        Laya.timer.once(2800, this, function () {
            _this.onShowInfoNtfHandler({
                type: GameDef.ShowInfoType.CALL_SCORE, info: [1, 2, 3]
            });
        });
        //公共牌
        Laya.timer.once(3300, this, function () {
            _this.onCardMoveNtfHandler({
                cards: [61, 62, 71, 41], fromSeatid: 0,
                toSeatid: BaseGameData.selfSeatid, areaid: GameDef.AREA_TYPE.HAND_CARD, opttype: GameDef.OptType.SHOW_CARDS, count: 4
            });
        });
        // Laya.timer.once(500, this, () => {
        //     this.onCardMoveNtfHandler({
        //         cards: [61, 62, 63, 71], fromSeatid: 0,
        //         toSeatid: BaseGameData.selfSeatid, areaid: GameDef.AREA_TYPE.HAND_CARD, opttype: GameDef.OptType.SHOW_CARDS, count: 4
        //     });
        // });
        //下家出了炸弹
        Laya.timer.once(3800, this, function () {
            _this.onCardMoveNtfHandler({
                cards: [60, 61], fromSeatid: 2,
                toSeatid: 2, areaid: GameDef.AREA_TYPE.FOLD_CARD, opttype: GameDef.OptType.MJ_DISCARD, count: 3
            });
        });
        Laya.timer.once(4300, this, function () {
            _this.onPlayerOptNtfHandler({
                seatid: BaseGameData.selfSeatid, timeout: 15, opts: [{ opttype: GameDef.OptType.MJ_DISCARD, cards: [] }]
            });
        });
        // var playerData: PlayerData = BaseGameData.getPlayerDataBySeatid(BaseGameData.selfSeatid);
        // playerData.handCards = [40, 41, 42, 43, 51, 52, 53, 61, 62, 63, 71, 72, 73];
        // this.addCards(playerData.handCards);
    };
    BasePokerPage.prototype.onCheckCanUse = function (card) {
        if (card === void 0) { card = 0; }
    };
    BasePokerPage.prototype.onCardMoveNtfHandler = function (msg) {
        BaseGameData.cardMove(msg);
    };
    BasePokerPage.prototype.onShowCardsNtfHandler = function (msg) {
    };
    /**
     * 发牌动画
     */
    BasePokerPage.prototype.sendCards = function () {
        server.startCache();
        if (BaseGameData.selfSeatid)
            this.setMyCards(true);
        else
            this.setVisitCards(true);
        this.sendOthersCards();
        this.sendPublicCards();
        Laya.timer.clear(this, this.stopCache);
        this.timer.once(800, this, this.stopCache);
    };
    BasePokerPage.prototype.stopCache = function () {
        server.stopCache();
    };
    BasePokerPage.prototype.setPublicCards = function (needTween, cards) {
    };
    BasePokerPage.prototype.sendPublicCards = function () {
    };
    /**
     * 发边上玩家的牌
     */
    BasePokerPage.prototype.sendOthersCards = function () {
        var player;
        var count;
        var card;
        var scale = 1;
        var delay;
        var p1;
        var p2;
        if (BaseGameData.selfSeatid) {
            player = BaseGameData.getPlayerDataBySeatid(BaseGameData.selfSeatid);
            count = player.handCards.length;
        }
        else {
            player = BaseGameData.getPlayerDataBySeatid(1);
            count = player.handCardCount;
        }
        for (var i = 0; i < count * 2; i++) {
            card = poker.CardSmallUI.borrowCard();
            card.init(false, { scaleX: 1, scaleY: 1, visible: false });
            card.pos(this._pokerCon.width * 0.5, this._pokerCon.height * 0.5);
            card.card = 0;
            delay = Math.floor(i * 0.5) * 30 + 10 * (i % 2 + 1);
            if (i % 2 == 0)
                p1 = PlayerManager.instance._players[BaseGameData.nextSeatId].localToGlobal(new Laya.Point(card.width * scale * 0.5, card.height * scale * 0.5));
            else
                p1 = PlayerManager.instance._players[BaseGameData.preSeatId].localToGlobal(new Laya.Point(card.width * scale * 0.5, card.height * scale * 0.5));
            p2 = this._pokerCon._boxCards.globalToLocal(p1);
            this._sendCards.push(card);
            this._pokerCon.addChild(card);
            card.move({ x: p2.x, y: p2.y }, true, true, true, this._moveCardTime, function (endCard) {
                endCard.removeSelf();
                poker.CardSmallUI.returnCard(endCard);
            }, this, [card], delay);
        }
    };
    BasePokerPage.prototype.onSendEnd = function (card) {
        card.removeSelf();
        poker.CardSmallUI.returnCard(card);
    };
    BasePokerPage.prototype.setVisitCards = function (isSendCards) {
        if (isSendCards === void 0) { isSendCards = false; }
        var player = BaseGameData.getPlayerDataBySeatid(1);
        var card;
        for (var i = 0; i < player.handCardCount; i++) {
            if (this._selfHandCards.length > i) {
                card = this._selfHandCards[i];
                card.card = 0;
            }
            else {
                card = poker.CardBigUI.borrowCard();
                card.init(false, { scaleX: 1, scaleY: 1, visible: false });
                card.card = 0;
                card.pos(this._pokerCon.width * 0.5, this._pokerCon.height * 0.5);
                this._selfHandCards.push(card);
                this._pokerCon._boxCards.addChild(card);
            }
        }
        this.layoutMyHandCards(isSendCards ? true : false, isSendCards);
    };
    /**
     * 设置我的手牌
     * @param isSendCards 是否是一开始的发牌
     */
    BasePokerPage.prototype.setMyCards = function (isSendCards) {
        if (isSendCards === void 0) { isSendCards = false; }
        var player = BaseGameData.getPlayerDataBySeatid(BaseGameData.selfSeatid);
        var cards = player.handCards;
        var card;
        for (var i = 0; i < cards.length; i++) {
            if (this._selfHandCards.length > i) {
                card = this._selfHandCards[i];
                card.card = cards[i];
            }
            else {
                card = poker.CardBigUI.borrowCard();
                card.init(true, { scaleX: 1, scaleY: 1, visible: false });
                card.card = cards[i];
                card.pos(this._pokerCon.width * 0.5, this._pokerCon.height * 0.5);
                this._selfHandCards.push(card);
                this._pokerCon._boxCards.addChild(card);
            }
        }
        this.layoutMyHandCards(isSendCards ? true : false, isSendCards);
    };
    BasePokerPage.prototype.layoutMyHandCards = function (needTween, isSendCards) {
        if (isSendCards === void 0) { isSendCards = false; }
        // return;
        var dis = (AppControl.getInstance().stage.width - 280) / this._selfHandCards.length;
        if (dis > 50)
            dis = 50;
        var centerX = this._pokerCon.width * 0.5;
        var half = Math.ceil(this._selfHandCards.length * 0.5) - 1;
        var pX;
        var pY;
        var time = this._moveCardTime;
        var delay = 0;
        for (var i = 0; i < this._selfHandCards.length; i++) {
            pX = centerX + dis * (i - half);
            this._selfHandCards[i].selected = false;
            if (isSendCards)
                delay = i * 30;
            this._selfHandCards[i].move({ x: pX, y: AppControl.getInstance().stage.height - 640 + this._myHandCardPosiY, visible: true }, true, false, needTween, time, null, null, null, delay);
            if (i == (this._selfHandCards.length - 1))
                this.setKengZhu(this._selfHandCards[i], BaseGameData.selfSeatid ? BaseGameData.selfSeatid : 1);
            else
                this.setKengZhu(this._selfHandCards[i], -1);
        }
        this.onCheckCanUse();
    };
    BasePokerPage.prototype.clearSelectedCards = function () {
        for (var i = 0; i < this._selfHandCards.length; i++) {
            this._selfHandCards[i].selected = false;
        }
    };
    BasePokerPage.prototype.autoDisconnect = function (cards) {
        console.warn("not match usecards." + cards + " ; " + this._selfPlayCards);
        server.close();
    };
    BasePokerPage.prototype.useVisiterCards = function (cards, seatid, isReconnect, noAni) {
        if (noAni === void 0) { noAni = false; }
        var i;
        this.removeSelfFoldCards();
        if (cards.length) {
            this._lastSeatid = BaseGameData.selfSeatid;
            this._lastPlayCards = cards.concat();
            this._lastPlayCards = this._lastPlayCards.reverse();
        }
        else
            PlayerManager.instance._players[1].pass = true;
        var card;
        for (i = 0; i < cards.length; i++) {
            if (isReconnect) {
                card = poker.CardBigUI.borrowCard();
                card.init(false, { scaleX: 1, scaleY: 1 });
                card.card = cards[i];
            }
            else {
                if (this._selfHandCards.length) {
                    card = this._selfHandCards.shift();
                    card.card = cards[i];
                    this._selfFoldCards.push(card);
                }
            }
            if (i == (cards.length - 1))
                this.setKengZhu(card, seatid);
            else
                this.setKengZhu(card, -1);
        }
        this.layoutMyFoldCards(true, cards, noAni);
        this.layoutMyHandCards(true);
    };
    BasePokerPage.prototype.showCardsEffect = function (cards, x, y, scale, noAni) {
        if (noAni === void 0) { noAni = false; }
    };
    BasePokerPage.prototype.useSelfCards = function (cards, needSend, isReconnect, noAni) {
        if (needSend === void 0) { needSend = true; }
        if (isReconnect === void 0) { isReconnect = false; }
        if (noAni === void 0) { noAni = false; }
        var i;
        if (this._selfPlayCards.length) {
            if (this._selfPlayCards.length != cards.length) {
                this.autoDisconnect(cards);
                return;
            }
            for (i = 0; i < cards.length; i++) {
                if (cards[i] != this._selfPlayCards[i]) {
                    this.autoDisconnect(cards);
                    return;
                }
            }
        }
        else {
            this.removeSelfFoldCards();
            var player = BaseGameData.getPlayerDataBySeatid(BaseGameData.selfSeatid);
            if (!isReconnect)
                this.playCardTypeSound(cards, player ? player.sex : 0, this._lastSeatid == 0 || this._lastSeatid == BaseGameData.selfSeatid, noAni);
            if (cards.length) {
                this._lastSeatid = BaseGameData.selfSeatid;
                this._lastPlayCards = cards.concat();
                this._lastPlayCards = this._lastPlayCards.reverse();
            }
            else
                PlayerManager.instance._players[BaseGameData.selfSeatid].pass = true;
            var card;
            for (i = 0; i < cards.length; i++) {
                card = this.getSelfCardById(cards[i], true);
                //20171221 09:59 修改断线重连情况下，自己上次出的牌不存在的bug
                if (!card && isReconnect) {
                    card = poker.CardBigUI.borrowCard();
                    card.init(false, { scaleX: 1, scaleY: 1 });
                    card.card = cards[i];
                    this._pokerCon._boxCards.addChild(card);
                }
                //--------------------------------------
                if (card) {
                    this._selfFoldCards.push(card);
                }
            }
            this.layoutMyFoldCards(isReconnect ? false : true, cards, noAni);
            this.layoutMyHandCards(true);
            if (needSend) {
                this._selfPlayCards = cards.concat();
                server.playerOptReq({ opttype: GameDef.OptType.MJ_DISCARD, cards: cards });
            }
        }
    };
    BasePokerPage.prototype.layoutMyFoldCards = function (needTween, cards, noAni) {
        if (cards === void 0) { cards = null; }
        if (noAni === void 0) { noAni = false; }
        if (this._selfFoldCards.length) {
            var dis = 33;
            var centerX = this._pokerCon.width * 0.5;
            var half = Math.ceil(this._selfFoldCards.length * 0.5) - 1;
            if (half > 4)
                half = 4;
            var pX;
            var pY;
            for (var i = 0; i < this._selfFoldCards.length; i++) {
                if (this._selfFoldCards.length > 10) {
                    if (i < 10) {
                        pX = centerX + dis * (i - half);
                        pY = AppControl.getInstance().stage.height - 640 + this._myFoldCardUpPosiY;
                    }
                    else {
                        pX = centerX + dis * (i - 10 - half);
                        pY = AppControl.getInstance().stage.height - 640 + this._myFoldCardPosiY;
                    }
                }
                else {
                    pX = centerX + dis * (i - half);
                    pY = AppControl.getInstance().stage.height - 640 + this._myFoldCardPosiY;
                }
                if (i == (this._selfFoldCards.length - 1))
                    this.setKengZhu(this._selfFoldCards[i], BaseGameData.selfSeatid ? BaseGameData.selfSeatid : 1);
                else
                    this.setKengZhu(this._selfFoldCards[i], -1);
                this._selfFoldCards[i].move({ x: pX, y: pY, scaleX: 0.75, scaleY: 0.75 }, true, true, needTween, this._moveCardTime);
            }
            if (needTween && cards)
                this.showCardsEffect(cards, centerX, pY, 1, noAni);
        }
    };
    BasePokerPage.prototype.useCards = function (seatid, cards, isReconnect, noAni, isShowCard) {
        if (noAni === void 0) { noAni = false; }
        if (isShowCard === void 0) { isShowCard = false; }
        var idx = Utils.getDir(seatid);
        var player = BaseGameData.getPlayerDataBySeatid(seatid);
        if (!isReconnect && !isShowCard)
            this.playCardTypeSound(cards, player ? player.sex : 0, this._lastSeatid == 0 || this._lastSeatid == seatid, noAni);
        if (cards.length) {
            this._lastSeatid = seatid;
            this._lastPlayCards = cards.concat();
            this._lastPlayCards = this._lastPlayCards.reverse();
        }
        else {
            if (!isShowCard)
                PlayerManager.instance._players[seatid].pass = true;
        }
        if (isShowCard)
            noAni = true;
        if (BaseGameData.maxPlayer == 3) {
            if (idx == 1)
                this.useVisiterCards(cards, seatid, isReconnect, noAni);
            else if (idx == 2)
                this.useRightCards(cards, seatid, isReconnect, noAni);
            else if (idx == 4)
                this.useLeftCards(cards, seatid, isReconnect, noAni);
        }
        else if (BaseGameData.maxPlayer == 2) {
            if (idx == 1)
                this.useVisiterCards(cards, seatid, isReconnect, noAni);
            else if (idx == 3)
                this.useRightCards(cards, seatid, isReconnect, noAni);
        }
    };
    BasePokerPage.prototype.useRightCards = function (cards, seatid, isReconnect, noAni) {
        if (noAni === void 0) { noAni = false; }
        this.removeRightFoldCards();
        var card;
        for (var i = 0; i < cards.length; i++) {
            card = poker.CardSmallUI.borrowCard();
            card.init(false, { scaleX: 1, scaleY: 1, visible: true });
            if (i == (cards.length - 1))
                this.setKengZhu(card, seatid);
            else
                this.setKengZhu(card, -1);
            card.card = cards[i];
            this._rightFoldCards.push(card);
            this._pokerCon._boxCards.addChild(card);
        }
        this.layoutRightCards(true, cards, isReconnect, noAni);
    };
    BasePokerPage.prototype.layoutRightCards = function (needTween, cards, isReconnect, noAni) {
        if (cards === void 0) { cards = null; }
        if (isReconnect === void 0) { isReconnect = false; }
        if (noAni === void 0) { noAni = false; }
        if (this._rightFoldCards.length) {
            var card = this._rightFoldCards[0];
            var dis;
            var pX;
            var pY;
            var scale;
            if (this._rightFoldCards.length > 10) {
                dis = 24;
                scale = 0.75;
            }
            else {
                dis = 33;
                scale = 1;
            }
            var right = Math.min(1280, this._pokerCon.width * 0.5 + AppControl.getInstance().stage.width * 0.5) - 183 - card.width * scale * 0.5;
            var upY = PlayerManager.instance._players[BaseGameData.nextSeatId].y + card.height * scale * 0.5 + 0; //+20
            var downY = PlayerManager.instance._players[BaseGameData.nextSeatId].y + card.height * scale * 0.5 + 56; //+76
            var middleY = PlayerManager.instance._players[BaseGameData.nextSeatId].y + card.height * scale * 0.5 + 25;
            var p1 = PlayerManager.instance._players[BaseGameData.nextSeatId].localToGlobal(new Laya.Point(card.width * scale * 0.5, card.height * scale * 0.5));
            var p2 = this._pokerCon._boxCards.globalToLocal(p1);
            for (var i = 0; i < this._rightFoldCards.length; i++) {
                card = this._rightFoldCards[i];
                card.pos(p2.x, p2.y);
                if (this._rightFoldCards.length > 10) {
                    if (i < 10) {
                        pX = right - (10 - 1 - i) * dis;
                        pY = upY;
                    }
                    else {
                        pX = right - (20 - 1 - i) * dis;
                        pY = downY;
                    }
                }
                else {
                    pX = right - (this._rightFoldCards.length - 1 - i) * dis;
                    pY = middleY;
                }
                card.move({ x: pX, y: pY, scaleX: scale, scaleY: scale }, true, true, needTween, this._moveCardTime);
            }
            if (!isReconnect && needTween && cards) {
                var len;
                if (this._rightFoldCards.length > 10)
                    len = 10;
                else
                    len = this._rightFoldCards.length;
                this.showCardsEffect(cards, right - Math.floor(len / 2) * dis, pY, 0.8, noAni);
            }
        }
    };
    BasePokerPage.prototype.useLeftCards = function (cards, seatid, isReconnect, noAni) {
        if (noAni === void 0) { noAni = false; }
        this.removeLeftFoldCards();
        var card;
        for (var i = 0; i < cards.length; i++) {
            card = poker.CardSmallUI.borrowCard();
            card.init(false, { scaleX: 1, scaleY: 1, visible: true });
            if (i == (cards.length - 1))
                this.setKengZhu(card, seatid);
            else
                this.setKengZhu(card, -1);
            card.card = cards[i];
            this._leftFoldCards.push(card);
            this._pokerCon._boxCards.addChild(card);
        }
        this.layoutLeftCards(true, cards, isReconnect, noAni);
    };
    BasePokerPage.prototype.layoutLeftCards = function (needTween, cards, isReconnect, noAni) {
        if (cards === void 0) { cards = null; }
        if (isReconnect === void 0) { isReconnect = false; }
        if (noAni === void 0) { noAni = false; }
        if (this._leftFoldCards.length) {
            var card = this._leftFoldCards[0];
            var dis;
            var pX;
            var pY;
            var scale;
            if (this._leftFoldCards.length > 10) {
                dis = 24;
                scale = 0.75;
            }
            else {
                dis = 33;
                scale = 1;
            }
            var left = Math.max(0, this._pokerCon.width * 0.5 - AppControl.getInstance().stage.width * 0.5) + 183 + card.width * scale * 0.5;
            var upY = PlayerManager.instance._players[BaseGameData.preSeatId].y + card.height * scale * 0.5 + 20;
            var downY = PlayerManager.instance._players[BaseGameData.preSeatId].y + card.height * scale * 0.5 + 76;
            var middleY = PlayerManager.instance._players[BaseGameData.preSeatId].y + card.height * scale * 0.5 + 25;
            var p1 = PlayerManager.instance._players[BaseGameData.preSeatId].localToGlobal(new Laya.Point(card.width * scale * 0.5, card.height * scale * 0.5));
            var p2 = this._pokerCon._boxCards.globalToLocal(p1);
            for (var i = 0; i < this._leftFoldCards.length; i++) {
                card = this._leftFoldCards[i];
                card.pos(p2.x, p2.y);
                if (this._leftFoldCards.length > 10) {
                    if (i < 10) {
                        pX = left + i * dis;
                        pY = upY;
                    }
                    else {
                        pX = left + (i - 10) * dis;
                        pY = downY;
                    }
                }
                else {
                    pX = left + i * dis;
                    pY = middleY;
                }
                card.move({ x: pX, y: pY, scaleX: scale, scaleY: scale }, true, true, needTween, this._moveCardTime);
            }
            if (!isReconnect && needTween && cards) {
                var len;
                if (this._leftFoldCards.length > 10)
                    len = 10;
                else
                    len = this._leftFoldCards.length;
                this.showCardsEffect(cards, left + Math.floor(len / 2) * dis, pY, 0.8, noAni);
            }
        }
    };
    BasePokerPage.prototype.getSelfCardById = function (id, needDelete) {
        for (var i = 0; i < this._selfHandCards.length; i++) {
            if (this._selfHandCards[i].card == id) {
                if (needDelete)
                    return this._selfHandCards.splice(i, 1)[0];
                else
                    return this._selfHandCards[i];
            }
        }
        return null;
    };
    BasePokerPage.prototype.getSelectedCards = function () {
        var tmp = [];
        for (var i = 0; i < this._selfHandCards.length; i++) {
            if (this._selfHandCards[i].selected)
                tmp.push(this._selfHandCards[i].card);
        }
        tmp.sort(WaKengCardsType.onSort);
        return tmp;
    };
    BasePokerPage.prototype.onTableInfoNtfHandler = function (msg) {
        // BaseGameData.isGameing = true;
        // msg.maxPlayer = 3;//测试代码
        // msg.playerinfo = [{ "uid": 10066, "seatid": 1, "status": 1 }, { "uid": 10002, "seatid": 2, "status": 1 }, { "uid": 10003, "seatid": 3, "status": 1 }];
        _super.prototype.onTableInfoNtfHandler.call(this, msg);
        // this.test();
    };
    BasePokerPage.prototype.onPlayerOptNtfHandler = function (msg) {
    };
    BasePokerPage.prototype.onMouseUp = function (e) {
        if (poker.CardUI.mouseDownEndCard && poker.CardUI.mouseDownStartCard && poker.CardUI.mouseDownStartCard != poker.CardUI.mouseDownEndCard) {
            this.onCheckMouseOverCards(false);
            e.stopPropagation();
        }
        else {
            for (var i = 0; i < this._selfHandCards.length; i++) {
                this._selfHandCards[i].isOver = false;
            }
        }
        poker.CardUI.clearMouseOver();
    };
    /**
     * 当鼠标滑过手牌时检测
     */
    BasePokerPage.prototype.onCheckMouseOverCards = function (isOver) {
        var card1;
        var card2;
        if (poker.CardUI.mouseDownEndCard > poker.CardUI.mouseDownStartCard) {
            card1 = poker.CardUI.mouseDownEndCard;
            card2 = poker.CardUI.mouseDownStartCard;
        }
        else {
            card1 = poker.CardUI.mouseDownStartCard;
            card2 = poker.CardUI.mouseDownEndCard;
        }
        var overCards = [];
        for (var i = 0; i < this._selfHandCards.length; i++) {
            if (this._selfHandCards[i].card >= card2 && this._selfHandCards[i].card <= card1) {
                if (isOver)
                    this._selfHandCards[i].isOver = true;
                else
                    this._selfHandCards[i].isOver = false;
                overCards.push(this._selfHandCards[i].card);
            }
            else
                this._selfHandCards[i].isOver = false;
        }
        if (!isOver)
            this.onMouseOverHelp(overCards);
    };
    BasePokerPage.prototype.onMouseOverHelp = function (overCards) {
    };
    BasePokerPage.prototype.setKengZhu = function (card, seatid) {
    };
    BasePokerPage.prototype.onReconnectInfoHandler = function (msg) {
        _super.prototype.onReconnectInfoHandler.call(this, msg);
    };
    BasePokerPage.prototype.playCardTypeSound = function (cards, sex, isFirstSend, noAni) {
    };
    BasePokerPage.prototype.onPlayerReadyNtfHandler = function (msg) {
        _super.prototype.onPlayerReadyNtfHandler.call(this, msg);
        if (msg.seatid == BaseGameData.selfSeatid) {
            this.removeAllCards();
        }
    };
    BasePokerPage.prototype.onResize = function (e) {
        _super.prototype.onResize.call(this, e);
        log("onResize:" + Laya.stage.width / Laya.stage.height);
        if (!this._scale || Laya.stage.width / Laya.stage.height != this._scale) {
            if (!this._scale)
                this._scale = Laya.stage.width / Laya.stage.height;
            if (Laya.stage.width / Laya.stage.height < 8 / 5) {
                Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_WIDTH;
                AppControl.getInstance().stage.width = 1024;
            }
            else {
                Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_HEIGHT;
                AppControl.getInstance().stage.height = 640;
            }
            this._scale = Laya.stage.width / Laya.stage.height;
            Laya.stage.setScreenSize(Laya.Browser.clientWidth * Laya.Browser.pixelRatio, Laya.Browser.clientHeight * Laya.Browser.pixelRatio);
        }
        this.layoutMyHandCards(false);
        this.layoutMyFoldCards(false);
        this.layoutRightCards(false);
        this.layoutLeftCards(false);
        this.removeSendCards();
    };
    return BasePokerPage;
}(TablePage));
//# sourceMappingURL=BasePokerPage.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
* name
*/
var GuanPaiPage = /** @class */ (function (_super) {
    __extends(GuanPaiPage, _super);
    function GuanPaiPage() {
        var _this = _super.call(this) || this;
        _this.btnTypeHide = -1;
        _this.btnTypeCall = 1;
        _this.btnTypeDiscard = 2;
        _this.name = "GuanPaiPage";
        _this._loadDatas = _this._loadDatas.concat([{ url: "res/config/guanpai.json", type: Laya.Loader.JSON }, { url: ResourceConfig.SHEET_GUANPAI, type: Laya.Loader.ATLAS }, { url: ResourceConfig.BITMAP_FONT_GUANPAI1_JSON, type: Laya.Loader.JSON },
            { url: ResourceConfig.BITMAP_FONT_GUANPAI1_PNG, type: Laya.Loader.IMAGE }, { url: ResourceConfig.SHEET_EFFECT_BOOM, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_EFFECT_SHUANGSHUN, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_GUANPAI_CHAT, type: Laya.Loader.ATLAS }, { url: ResourceConfig.BG_GUANPAI, type: Laya.Loader.IMAGE }]);
        AppPage.register(GuanPaiPage, _this._loadDatas);
        return _this;
    }
    GuanPaiPage.prototype.init = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        Utils.injectProp(GameConfig.cfgAudio, Laya.loader.getRes("res/config/guanpai.json"));
        BaseGameData.tablelayout = GuanPaiLayOut;
        _super.prototype.init.apply(this, params);
        if (!this._ui) {
            this._ui = new ui.guanpai.GuanPaiUI();
            this._pokerCon.addChild(this._ui);
            this._table._bg.skin = ResourceConfig.BG_GUANPAI;
            // this._logo = new Laya.Image();
            // this._logo.source = Laya.Loader.getRes(ResourceConfig.WAKENG_LOGO);
            // this._logo.centerX = 0;
            // this._logo.y = 240;
            // this._table.addChildAt(this._logo, 1);
            this._ui._imgNoCard.y = this._myHandCardPosiY - 20;
            this._ui._imgNoCard.visible = false;
            //闹钟
            this._clock = new poker.Clock();
            this._ui.addChild(this._clock);
        }
        PlayerManager.instance.registerClass(guanpai.GuanPaiPlayer);
        this.btnType = this.btnTypeHide;
        this._ui._labMultiple.text = "";
        this.setClock(null);
        this.initEvent();
        if (BaseGameData.isRecord) {
            this.removeSeatViews();
            this.initSeatViews();
            this.PlaySheet();
        }
    };
    GuanPaiPage.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        Laya.timer.clear(this, this.onShowCardsNtfHandler);
    };
    GuanPaiPage.prototype.initEvent = function () {
        _super.prototype.initEvent.call(this);
        EventManager.instance.registerOnObject(this, AppControl.getInstance().stage, Laya.Event.MOUSE_UP, this, this.onStageDoubleTouch);
        EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.TIME_CHANGE, this, this.onTimeChange);
        EventManager.instance.registerOnObject(this, this._ui._btnDiscard, Laya.Event.CLICK, this, this.onOperationTouch);
        EventManager.instance.registerOnObject(this, this._ui._btnPass, Laya.Event.CLICK, this, this.onOperationTouch);
        EventManager.instance.registerOnObject(this, this._ui._btnTips, Laya.Event.CLICK, this, this.onOperationTouch);
        EventManager.instance.registerOnObject(this, this._ui._btnCall, Laya.Event.CLICK, this, this.onOperationTouch);
        EventManager.instance.registerOnObject(this, this._ui._btnNotCall, Laya.Event.CLICK, this, this.onOperationTouch);
        EventManager.instance.registerOnObject(this, server, "game.updateTable", this, this.updateTable);
    };
    GuanPaiPage.prototype.clearData = function (needCheckIsGameing) {
        if (needCheckIsGameing === void 0) { needCheckIsGameing = true; }
        _super.prototype.clearData.call(this, needCheckIsGameing);
        if (this._ui)
            this._ui._imgNoCard.visible = false;
        this._clockSeat = 0;
        this.setClock(null);
    };
    Object.defineProperty(GuanPaiPage.prototype, "btnType", {
        set: function (value) {
            if (!this._ui)
                return;
            if (value == this.btnTypeHide) {
                this._ui._btnDiscard.visible = false;
                this._ui._btnPass.visible = false;
                this._ui._btnTips.visible = false;
                this._ui._btnCall.visible = false;
                this._ui._btnNotCall.visible = false;
                this._ui._imgCall.visible = false;
                this._ui._imgWaitCall.visible = false;
            }
            else if (value == this.btnTypeDiscard) {
                this._ui._btnDiscard.visible = true;
                // this._ui._btnPass.visible = true;
                this._ui._btnTips.visible = true;
                this._ui._btnCall.visible = false;
                this._ui._btnNotCall.visible = false;
                this._ui._imgCall.visible = false;
                this._ui._imgWaitCall.visible = false;
            }
            else if (value == this.btnTypeCall) {
                this._ui._btnDiscard.visible = false;
                this._ui._btnPass.visible = false;
                this._ui._btnTips.visible = false;
                this._ui._btnCall.visible = true;
                this._ui._btnNotCall.visible = true;
                this._ui._imgCall.visible = true;
                this._ui._imgWaitCall.visible = false;
            }
            this.setClock(null);
        },
        enumerable: true,
        configurable: true
    });
    /**
    * 显示房号等信息
    */
    GuanPaiPage.prototype.setTableInfo = function () {
        // this._tablePop._labInfo.text = "";
        _super.prototype.setTableInfo.call(this);
        this._ui._labRoom.text = StringUtils.format(GameConfig.language.room_id, BaseGameData.tableid);
        this._ui._labCount.text = StringUtils.format(GameConfig.language.hand_count, BaseGameData.currHandCount ? BaseGameData.currHandCount : 1, BaseGameData.totalHandCount);
        this.onTimeChange();
    };
    GuanPaiPage.prototype.onTimeChange = function () {
        this._ui._labTime.text = TimeUtils.getSystemTimeHM(true);
    };
    GuanPaiPage.prototype.setBtnPos = function () {
        this._ui._btnPass.centerX = 0;
        this._ui._btnTips.centerX = -150;
        this._ui._btnDiscard.centerX = 150;
    };
    GuanPaiPage.prototype.onPlayerOptNtfHandler = function (msg) {
        if (msg.opts && msg.opts.length) {
            this._clockSeat = 0;
            this._currentOptSeatid = msg.seatid;
            //黑挖
            if (msg.opts[0].opttype == GameDef.OptType.CALL_SCORE) {
                if (BaseGameData.selfSeatid && msg.seatid == BaseGameData.selfSeatid) {
                    this.btnType = this.btnTypeCall;
                    this.setClock(msg.timeout ? msg.timeout : 1, { centerX: 0, bottom: this._ui._btnCall.bottom });
                }
                else {
                    this.btnType = this.btnTypeHide;
                    this._ui._imgWaitCall.visible = true;
                    this.setOthersClock(msg.seatid, msg.timeout);
                }
            }
            //出牌
            else if (msg.opts[0].opttype == GameDef.OptType.MJ_DISCARD) {
                this._ui._imgNoCard.visible = false;
                for (i = 0; i < this._selfHandCards.length; i++) {
                    var card = this._selfHandCards[i];
                    card.isMask = false;
                }
                //新的一轮出牌时，清场
                if (this._lastSeatid == msg.seatid) {
                    this._lastSeatid = 0;
                    this._lastPlayCards = [];
                    this.removeSelfFoldCards();
                    this.removeLeftFoldCards();
                    this.removeRightFoldCards();
                    for (var i = 1; i < PlayerManager.instance._players.length; i++) {
                        PlayerManager.instance._players[i].pass = false;
                    }
                }
                //自己出牌
                if (BaseGameData.selfSeatid && msg.seatid == BaseGameData.selfSeatid) {
                    if (msg.opts[0].hasOwnProperty("cards"))
                        guanpai.GuanPaiGameData.firstCard = msg.opts[0].cards[0];
                    else
                        guanpai.GuanPaiGameData.firstCard = 0;
                    this._isMouseUpHelped = false;
                    this._selfPlayCards = [];
                    this.btnType = this.btnTypeDiscard;
                    this.removeSelfFoldCards();
                    PlayerManager.instance._players[BaseGameData.selfSeatid].pass = false;
                    this.getHelper();
                    this.onCheckCanUse();
                    this.setClock(msg.timeout ? msg.timeout : 1, { centerX: 0, bottom: this._ui._btnDiscard.bottom + 90 });
                    //自己第一个出牌
                    if (this._lastPlayCards.length == 0 || this._lastSeatid == BaseGameData.selfSeatid) {
                        this._ui._btnPass.disabled = true;
                        this._ui._btnTips.disabled = true;
                        this._ui._btnTips.visible = true;
                        this._ui._btnDiscard.visible = true;
                        this._ui._btnPass.centerX = -256;
                        this._ui._btnPass.visible = false;
                    }
                    else {
                        this._ui._btnPass.disabled = false;
                        this._ui._btnTips.disabled = false;
                        //有大过上家的牌
                        if (this._helpCards && this._helpCards.length) {
                            if (guanpai.GuanPaiGameData.isMustPress)
                                this._ui._btnPass.disabled = true;
                            this._ui._btnTips.visible = true;
                            this._ui._btnDiscard.visible = true;
                            this._ui._btnPass.centerX = -256;
                            this._ui._btnPass.visible = false;
                        }
                        else {
                            this._ui._btnTips.visible = false;
                            this._ui._btnDiscard.visible = false;
                            this._ui._btnPass.centerX = 0;
                            this._ui._btnPass.visible = true;
                            this._ui._imgNoCard.visible = true;
                            for (i = 0; i < this._selfHandCards.length; i++) {
                                var card = this._selfHandCards[i];
                                card.isMask = true;
                            }
                        }
                    }
                    this.setBtnPos();
                }
                else {
                    this.btnType = this.btnTypeHide;
                    this.setOthersClock(msg.seatid, msg.timeout);
                    var index = Utils.getDir(msg.seatid);
                    if (index) {
                        PlayerManager.instance._players[msg.seatid].pass = false;
                        if (BaseGameData.maxPlayer == 3) {
                            if (index == 1)
                                this.removeSelfFoldCards();
                            else if (index == 2)
                                this.removeRightFoldCards();
                            else if (index == 4)
                                this.removeLeftFoldCards();
                        }
                        else if (BaseGameData.maxPlayer == 2) {
                            if (index == 1)
                                this.removeSelfFoldCards();
                            else if (index == 3)
                                this.removeRightFoldCards();
                        }
                    }
                }
            }
        }
    };
    GuanPaiPage.prototype.onStageDoubleTouch = function (e) {
        if (e.target == this._pokerCon._boxCards) {
            this.clearSelectedCards();
            this.canUse = false;
            // this.playCardTypeSound([41],1);
            // this.onDetailNtfHandler({"detailType":1,"playerInfo":[{"seatid":1,"info":[{"name":1},{"name":2},{"name":3,"value":6}]},{"seatid":2,"info":[{"name":1,"value":16},{"name":2},{"name":3,"value":-3}]},{"seatid":3,"info":[{"name":1,"value":16},{"name":2},{"name":3,"value":-3}]}]});
            // BaseGameData.clearPlayData();
            // this.removeAll();
            // BaseGameData.selfSeatid=1;
            // BaseGameData.maxPlayer=3;
            // var cards: Array<number> = [];
            // for (var i: number = 0; i < 20; i++) {
            //     var ran: number = Math.floor(Math.random() * guanpai.GuanPaiCardsType.cards.length);
            //     cards.push(guanpai.GuanPaiCardsType.cards[ran]);
            //     guanpai.GuanPaiCardsType.cards.splice(ran, 1);
            // }
            // cards = [40, 41, 42, 43, 51, 61, 60, 71, 73, 70, 80, 81, 82, 90, 91, 92, 93, 100, 101, 110];
            //     this.onCardMoveNtfHandler({
            //         cards: cards, fromSeatid: 0,
            //         toSeatid: BaseGameData.selfSeatid, areaid: GameDef.AREA_TYPE.HAND_CARD, opttype: GameDef.OptType.MJ_DEAL, count: 20
            //     });
            // // this.showCardsEffect([61,62,63,60]);
            // this.onCardMoveNtfHandler({
            //     cards: [60,61,70,71,81,82], fromSeatid: 2,//61, 71, 82, 62, 72, 82
            //     toSeatid: 2, areaid: GameDef.AREA_TYPE.FOLD_CARD, opttype: GameDef.OptType.MJ_DISCARD, count: 3
            // });
        }
    };
    GuanPaiPage.prototype.onOperationTouch = function (e) {
        var callScore = -1;
        switch (e.currentTarget) {
            case this._ui._btnDiscard:
                this.onBtnDiscard();
                break;
            case this._ui._btnPass:
                // this.showCardsEffect([83,31,41,53,80,82,90,91,93,100],0,0,1);
                server.playerOptReq({ opttype: GameDef.OptType.MJ_DISCARD, cards: [] });
                // this.useLeftCards([40, 41, 42, 43, 51, 52, 53, 61, 62, 63, 71, 72, 73]);
                // this.useRightCards([40, 41, 42, 43,\ 51, 52, 53, 61, 62, 63, 71, 72, 73]);
                break;
            case this._ui._btnTips:
                this.onHelp();
                break;
            case this._ui._btnNotCall:
                callScore = 0;
                break;
            case this._ui._btnCall:
                callScore = 1;
                break;
        }
        if (callScore != -1)
            this.callScore(callScore);
    };
    GuanPaiPage.prototype.callScore = function (value) {
        server.playerOptReq({ opttype: GameDef.OptType.CALL_SCORE, cards: [value] });
        this.btnType = this.btnTypeHide;
    };
    /**
    * 使用卡牌按钮点击
    */
    GuanPaiPage.prototype.onBtnDiscard = function () {
        this.btnType = this.btnTypeHide;
        var selectCards = this.getSelectedCards();
        this.useSelfCards(selectCards);
    };
    /**
     * 提示
     */
    GuanPaiPage.prototype.onHelp = function () {
        if (this._helpCards && this._helpCards.length) {
            var helpCards = this._helpCards[this._helpIdx];
            this.autoSelectCards(helpCards);
            this.canUse = true;
            this._helpIdx++;
            if (this._helpIdx >= this._helpCards.length)
                this._helpIdx = 0;
        }
    };
    /**
     * 根据提示或单张牌的选取自动选择卡牌
     */
    GuanPaiPage.prototype.autoSelectCards = function (helpCards) {
        this.clearSelectedCards();
        for (var i = 0; i < helpCards.length; i++) {
            var card = this.getSelfCardById(helpCards[i], false);
            if (card)
                card.selected = true;
        }
    };
    /**
     * 检查当前能否能出牌
     */
    GuanPaiPage.prototype.onCheckCanUse = function (card) {
        if (card === void 0) { card = 0; }
        if (BaseGameData.selfSeatid && this._currentOptSeatid == BaseGameData.selfSeatid && this._ui._btnDiscard.visible) {
            var selectCards = this.getSelectedCards();
            // if (selectCards)
            // 	SoundManager.instance.playEffect("touch_card_p", 0);
            var flag;
            var playerData = BaseGameData.getPlayerDataBySeatid(BaseGameData.selfSeatid);
            //单张牌和两张牌立起时检测自动选取
            if (card && (selectCards.length == 1 || selectCards.length == 2)) {
                var autoSelectedCards;
                //单张牌立起时检测自动选取
                if (selectCards.length == 1)
                    autoSelectedCards = guanpai.GuanPaiCardsType.getAutoSelectedCardsByOneCard(this._helpCards, playerData.handCards, card);
                //两张牌立起时检测自动选取
                else if (selectCards.length == 2) {
                    //自己出牌
                    if (this._lastPlayCards.length == 0 || this._lastSeatid == BaseGameData.selfSeatid)
                        autoSelectedCards = guanpai.GuanPaiCardsType.getAutoSelectedCardsByTwoCards(selectCards, playerData.handCards);
                }
                if (autoSelectedCards) {
                    this.autoSelectCards(autoSelectedCards);
                    selectCards = this.getSelectedCards();
                    flag = true;
                    this.canUse = true;
                }
            }
            if (!flag) {
                var myCardTmp = guanpai.GuanPaiCardsType.getType(selectCards, guanpai.GuanPaiGameData.isBoomAAA, playerData.handCards.length);
                var myCardType = myCardTmp[0];
                //自己出牌
                if (this._lastPlayCards.length == 0 || this._lastSeatid == BaseGameData.selfSeatid) {
                    if (myCardType > 0) {
                        if (guanpai.GuanPaiGameData.firstCard)
                            // this.canUse = selectCards.indexOf(guanpai.GuanPaiGameData.firstCard) != -1;
                            this.canUse = true;
                        else
                            this.canUse = true;
                    }
                    else
                        this.canUse = false;
                }
                //别人出牌，需要接大过他的牌
                else
                    this.canUse = guanpai.GuanPaiCardsType.checkCanUse(this._lastPlayCards, selectCards, guanpai.GuanPaiGameData.isBoomAAA, playerData.handCards.length, this._helpCards);
            }
        }
    };
    /**
     * 获取所有提示中可选的牌
     */
    GuanPaiPage.prototype.getHelper = function () {
        var playerData = BaseGameData.getPlayerDataBySeatid(BaseGameData.selfSeatid);
        this._helpIdx = 0;
        this._helpCards = guanpai.GuanPaiCardsType.getHelper(this._lastPlayCards, playerData.handCards, guanpai.GuanPaiGameData.isBoomAAA);
    };
    Object.defineProperty(GuanPaiPage.prototype, "canUse", {
        /**
         * 出牌按钮是否亮
         */
        set: function (value) {
            if (this._ui._btnDiscard)
                this._ui._btnDiscard.disabled = !value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 拖拽选择智能选取
     */
    GuanPaiPage.prototype.onMouseOverHelp = function (overCards) {
        var i;
        var tmpArr;
        for (i = 0; i < overCards.length; i++) {
            var card = this.getSelfCardById(overCards[i], false);
            card.isOver = false;
        }
        //自己出牌
        if (this._currentOptSeatid == BaseGameData.selfSeatid) {
            //第一手出牌
            if (this._lastPlayCards.length == 0 || this._lastSeatid == BaseGameData.selfSeatid) {
                var playerData = BaseGameData.getPlayerDataBySeatid(BaseGameData.selfSeatid);
                tmpArr = guanpai.GuanPaiCardsType.getDragHelp(overCards, playerData.handCards.length);
                if (!this._isMouseUpHelped && tmpArr && tmpArr.length) {
                    this._isMouseUpHelped = true;
                    for (i = 0; i < this._selfHandCards.length; i++) {
                        this._selfHandCards[i].selected = false;
                    }
                    for (i = 0; i < tmpArr.length; i++) {
                        var card = this.getSelfCardById(tmpArr[i], false);
                        card.selected = true;
                    }
                }
                //选中拖取选中的牌
                else
                    this.reverseCardSelected(overCards);
            }
            //选中拖取选中的牌
            else
                this.reverseCardSelected(overCards);
        }
        //选中拖取选中的牌
        else
            this.reverseCardSelected(overCards);
        this.onCheckCanUse();
        SoundManager.instance.playEffect("touch_card_p", 0);
    };
    //反选卡牌
    GuanPaiPage.prototype.reverseCardSelected = function (overCards) {
        var i;
        for (i = 0; i < overCards.length; i++) {
            var card = this.getSelfCardById(overCards[i], false);
            card.selected = !card.selected;
        }
    };
    GuanPaiPage.prototype.onShowInfoNtfHandler = function (msg) {
        var i;
        var playerData;
        var player;
        var index;
        //通知当前是几倍
        if (msg.type == GameDef.ShowInfoType.CALL_SCORE) {
            var seatid = msg.info[1];
            var score = msg.info[2];
            //确定叫分
            if (msg.info[0] == 1) {
                BaseGameData.setMaster(seatid);
                this.currentScore = 1;
                this.layoutMyHandCards(false);
            }
            else {
                player = PlayerManager.instance._players[seatid];
                player.showDug(score);
                this.playDugSound(score, seatid, msg.hasOwnProperty("noAni"));
            }
        }
        //通知每个人发多少牌
        else if (msg.type == GameDef.ShowInfoType.DEAL_CARDS) {
            if (!msg.hasOwnProperty("noAni"))
                SoundManager.instance.playEffect("dealcard", 0);
            BaseGameData.setHandCardCount(msg);
            if (!BaseGameData.selfSeatid) {
                if (msg.hasOwnProperty("noAni"))
                    this.setVisitCards();
                else
                    this.sendCards();
            }
        }
    };
    GuanPaiPage.prototype.checkMultiple = function () {
    };
    Object.defineProperty(GuanPaiPage.prototype, "currentScore", {
        set: function (value) {
            if (!this._ui)
                return;
            if (value) {
                if (BaseGameData.btnSeatid)
                    this._ui._labMultiple.text = "×2";
                else
                    this._ui._labMultiple.text = "×1";
            }
            else
                this._ui._labMultiple.text = "×1";
        },
        enumerable: true,
        configurable: true
    });
    GuanPaiPage.prototype.setOthersClock = function (seatid, timeout) {
        this._clockSeat = seatid;
        this.setClock(timeout ? timeout : 1);
        this.layoutClock();
    };
    GuanPaiPage.prototype.layoutClock = function () {
        if (this._clockSeat && this._clock.visible) {
            var index = Utils.getDir(this._clockSeat);
            if (index) {
                var player = PlayerManager.instance._players[this._clockSeat];
                var p1 = player.localToGlobal(new Laya.Point(0, 0));
                var p2 = this._ui.globalToLocal(p1);
                this._clock.bottom = NaN;
                if (BaseGameData.maxPlayer == 3) {
                    this._clock.centerX = NaN;
                    if (index == 1 || index == 4) {
                        this._clock.x = p2.x + 138;
                        this._clock.y = p2.y + 16;
                    }
                    else {
                        this._clock.x = p2.x - 130;
                        this._clock.y = p2.y + 16;
                    }
                }
                else if (BaseGameData.maxPlayer == 2) {
                    this._clock.centerX = NaN;
                    if (index == 1) {
                        this._clock.centerX = 0;
                        this._clock.y = p2.y + 116;
                    }
                    else {
                        this._clock.x = p2.x - 130;
                        this._clock.y = p2.y + 16;
                    }
                }
            }
        }
    };
    GuanPaiPage.prototype.setClock = function (value, pos) {
        if (pos === void 0) { pos = null; }
        if (this._clock) {
            if (value) {
                this._clock.visible = true;
                this._clock.centerX = NaN;
                if (pos)
                    Utils.injectProp(this._clock, pos);
                this._clock.time = value;
            }
            else {
                this._clock.stop();
                this._clock.visible = false;
            }
        }
    };
    GuanPaiPage.prototype.onCardMoveNtfHandler = function (msg) {
        _super.prototype.onCardMoveNtfHandler.call(this, msg);
        if (msg.cards)
            msg.cards.sort(guanpai.GuanPaiCardsType.onSort);
        var playerData;
        //公牌
        if (msg.opttype == GameDef.OptType.SHOW_CARDS) {
            if (msg.areaid == GameDef.AREA_TYPE.HAND_CARD) {
                if (msg.hasOwnProperty("noAni"))
                    this.setPublicCards(false, msg.cards.concat());
                else
                    this.setPublicCards(true, msg.cards.concat());
                if (BaseGameData.selfSeatid) {
                    if (msg.toSeatid == BaseGameData.selfSeatid) {
                        playerData = BaseGameData.getPlayerDataBySeatid(BaseGameData.selfSeatid);
                        playerData.sortHandCards();
                        this.setMyCards();
                    }
                }
                else {
                    if (msg.toSeatid == 1)
                        this.setVisitCards();
                }
            }
            //断线重连
            else
                this.setPublicCards(false, msg.cards.concat());
        }
        //手牌
        else if (msg.opttype == GameDef.OptType.MJ_DEAL) {
            //我在桌子上
            if (BaseGameData.selfSeatid && BaseGameData.selfSeatid == msg.toSeatid) {
                playerData = BaseGameData.getPlayerDataBySeatid(BaseGameData.selfSeatid);
                playerData.sortHandCards();
                if (msg.hasOwnProperty("noAni"))
                    this.setMyCards();
                else
                    this.sendCards();
            }
        }
        //出牌
        else if (msg.opttype == GameDef.OptType.MJ_DISCARD || msg.opttype == GameDef.OptType.RECONNECT) {
            if (!msg.hasOwnProperty("noAni"))
                msg.noAni = false;
            this.setClock(null);
            if (msg.fromSeatid == BaseGameData.selfSeatid) {
                this.useSelfCards(msg.cards, false, msg.opttype == GameDef.OptType.RECONNECT, msg.noAni);
            }
            else
                this.useCards(msg.fromSeatid, msg.cards, msg.opttype == GameDef.OptType.RECONNECT, msg.noAni);
        }
        // //我在桌子上
        // if (BaseGameData.selfSeatid) {
        //     var playerData: PlayerData = BaseGameData.getPlayerDataBySeatid(BaseGameData.selfSeatid);
        //     if (msg.opttype == GameDef.OptType.MJ_DEAL || msg.opttype == GameDef.OptType.SHOW_CARDS) {
        //         playerData.sortHandCards();
        //         this.setMyCards();
        //     }
        //     else if (msg.opttype == GameDef.OptType.MJ_DISCARD) {
        //         if (msg.from_seatid == BaseGameData.selfSeatid) {
        //         }
        //         else
        //             this.useCards(msg.fromSeatid, msg.cards);
        //     }
        // }
    };
    GuanPaiPage.prototype.showCardsEffect = function (cards, x, y, scale, noAni) {
        if (noAni === void 0) { noAni = false; }
        if (!noAni) {
            var tmp = guanpai.GuanPaiCardsType.getType(cards, guanpai.GuanPaiGameData.isBoomAAA, cards.length);
            var type = tmp[0];
            var middle;
            var offsetY = -303;
            switch (type) {
                case guanpai.GuanPaiCardsType.ZHADAN:
                    poker.EffectBoom.instance.show(this._pokerCon);
                    break;
                case guanpai.GuanPaiCardsType.FEIJI:
                    poker.EffectFeiji.instance.show(this._pokerCon);
                    break;
                case guanpai.GuanPaiCardsType.DANSHUN:
                    var effectDauShun = poker.EffectDanShun.borrow();
                    effectDauShun.pos(x - 480 * scale, y + offsetY * scale);
                    this._pokerCon.addChild(effectDauShun);
                    effectDauShun.play(scale);
                    break;
                case guanpai.GuanPaiCardsType.SHUANGSHUN:
                    var effectShuangShun = poker.EffectShuangShun.borrow();
                    effectShuangShun.pos(x - 480 * scale, y + offsetY * scale);
                    this._pokerCon.addChild(effectShuangShun);
                    effectShuangShun.play(scale);
                    break;
                case guanpai.GuanPaiCardsType.SIDAISAN:
                    var effectSiDaiSan = poker.EffectSiDaiSan.borrow();
                    effectSiDaiSan.pos(x - 480 * scale, y + offsetY * scale);
                    this._pokerCon.addChild(effectSiDaiSan);
                    effectSiDaiSan.play(scale);
                    break;
                case guanpai.GuanPaiCardsType.SANDAIER:
                    var effectSanDaiEr = poker.EffectSanDaiEr.borrow();
                    effectSanDaiEr.pos(x - 480 * scale, y + offsetY * scale);
                    this._pokerCon.addChild(effectSanDaiEr);
                    effectSanDaiEr.play(scale);
                    break;
            }
        }
    };
    GuanPaiPage.prototype.onShowCardsNtfHandler = function (msg, needDelay) {
        var _this = this;
        if (needDelay === void 0) { needDelay = true; }
        if (needDelay) {
            server.startCache();
            Laya.timer.once(700, this, function () {
                _this.onShowCardsNtfHandler(msg, false);
            });
        }
        else {
            _super.prototype.onShowCardsNtfHandler.call(this, msg);
            this.btnType = this.btnTypeHide;
            this.setClock(null);
            for (var i = 0; i < msg.showncards.length; i++) {
                var seatid = msg.showncards[i].seatid;
                var cards = msg.showncards[i].handcards;
                cards.sort(guanpai.GuanPaiCardsType.onSort);
                if (seatid == BaseGameData.selfSeatid) {
                }
                else
                    this.useCards(seatid, cards, false, false, true);
            }
            Laya.timer.once(1000, this, function () {
                server.stopCache();
            });
        }
    };
    GuanPaiPage.prototype.onReconnectInfoHandler = function (msg) {
        _super.prototype.onReconnectInfoHandler.call(this, msg);
        this.setTableInfo();
        this.currentScore = 1;
        var playerData;
        //我在桌子上
        if (BaseGameData.selfSeatid) {
            playerData = BaseGameData.getPlayerDataBySeatid(BaseGameData.selfSeatid);
            playerData.sortHandCards();
            this.setMyCards();
        }
        else
            this.setVisitCards();
        // for (var i: number = 1; i < this._playerUis.length; i++) {
        // 	this._playerUis[i].checkIsGameing(true);
        // }
        if (!BaseGameData.isGameing)
            this.removeAllCards();
    };
    GuanPaiPage.prototype.removeAll = function () {
        _super.prototype.removeAll.call(this);
        for (var i = 1; i <= BaseGameData.players.length; i++) {
            var player = BaseGameData.getPlayerDataBySeatid(i);
            if (player)
                player.boomCount = 0;
        }
        this.btnType = this.btnTypeHide;
        this.setClock(null);
        this.currentScore = 0;
    };
    GuanPaiPage.prototype.onGameEndNtfHandler = function (msg) {
        _super.prototype.onGameEndNtfHandler.call(this, msg);
    };
    GuanPaiPage.prototype.onDetailNtfHandler = function (msg) {
        // DetailNtf {"detailType":101,"playerInfo":[{"info":[{"name":1,"value":1},{"name":2},{"name":3,"value":3}]}]}//黑挖 炸弹 炸弹倍数
        _super.prototype.onDetailNtfHandler.call(this, msg);
        var i;
        var players = msg.playerInfo;
        //挖坑结算信息
        if (msg.detailType == 100) {
            var isWin;
            for (i = 0; i < players.length; i++) {
                var player = BaseGameData.getPlayerDataBySeatid(players[i].seatid);
                if (player) {
                    players[i].uid = player.uid;
                    players[i].nickname = player.nickname;
                }
                else
                    players[i].nickname = "";
                players[i].info[0].value = players[i].info[0].value ? players[i].info[0].value : 0;
                if (BaseGameData.selfSeatid) {
                    if (players[i].seatid == BaseGameData.selfSeatid)
                        isWin = players[i].info[4].value == players[i].seatid;
                }
                else {
                    if (players[i].seatid == 1)
                        isWin = players[i].info[4].value == players[i].seatid;
                }
                players[i].othersCards = [];
                for (var j = 0; j < players.length; j++) {
                    if (j != i)
                        players[i].othersCards.push(players[j].info[0].value);
                }
            }
            players.sort(function (a, b) {
                if (a.seatid < b.seatid)
                    return -1;
                else
                    return 1;
            });
            if (isWin)
                poker.GameEndWinCtrl.instance.show(msg);
            else
                poker.GameEndLoseCtrl.instance.show(msg);
        }
        else if (msg.detailType == 101) {
            for (i = 0; i < players[0].info.length; i++) {
                //code
                if (players[0].info[i].name == 1) {
                    if (players[0].info[i].hasOwnProperty("value"))
                        BaseGameData.tableid = players[0].info[i].value;
                }
                //max_hand_count
                else if (players[0].info[i].name == 2) {
                    if (players[0].info[i].hasOwnProperty("value"))
                        BaseGameData.totalHandCount = players[0].info[i].value;
                }
                else if (players[0].info[i].name == 3) {
                    if (players[0].info[i].hasOwnProperty("value") && players[0].info[i].value == 1)
                        guanpai.GuanPaiGameData.isBoomReward = true;
                    else
                        guanpai.GuanPaiGameData.isBoomReward = false;
                }
                else if (players[0].info[i].name == 4) {
                    if (players[0].info[i].hasOwnProperty("value") && players[0].info[i].value == 1)
                        guanpai.GuanPaiGameData.isCallScore = true;
                    else
                        guanpai.GuanPaiGameData.isCallScore = false;
                }
                else if (players[0].info[i].name == 5) {
                    if (players[0].info[i].hasOwnProperty("value"))
                        guanpai.GuanPaiGameData.maxCards = players[0].info[i].value;
                    else
                        guanpai.GuanPaiGameData.maxCards = 0;
                }
                else if (players[0].info[i].name == 6) {
                    if (players[0].info[i].hasOwnProperty("value") && players[0].info[i].value == 1)
                        guanpai.GuanPaiGameData.isBoomAAA = true;
                    else
                        guanpai.GuanPaiGameData.isBoomAAA = false;
                }
                else if (players[0].info[i].name == 7) {
                    if (players[0].info[i].hasOwnProperty("value") && players[0].info[i].value == 1)
                        guanpai.GuanPaiGameData.isHideCardCnt = true;
                    else
                        guanpai.GuanPaiGameData.isHideCardCnt = false;
                }
                else if (players[0].info[i].name == 8) {
                    if (players[0].info[i].hasOwnProperty("value") && players[0].info[i].value == 1)
                        guanpai.GuanPaiGameData.isMustPress = true;
                    else
                        guanpai.GuanPaiGameData.isMustPress = false;
                }
                else if (players[0].info[i].name == 9) {
                    if (players[0].info[i].hasOwnProperty("value") && players[0].info[i].value == 1)
                        guanpai.GuanPaiGameData.isWinerFirst = true;
                    else
                        guanpai.GuanPaiGameData.isWinerFirst = false;
                }
                this._ui._labRule.text = guanpai.GuanPaiGameData.getGameRule();
            }
            this.setTableInfo();
        }
    };
    GuanPaiPage.prototype.setKengZhu = function (card, seatid) {
        card.isMaster = seatid == BaseGameData.btnSeatid;
    };
    GuanPaiPage.prototype.playCardTypeSound = function (cards, sex, isFirstSend, noAni) {
        if (noAni)
            return;
        var ran = 100;
        if (cards.length) {
            if (!isFirstSend)
                ran = Math.floor(Math.random() * 100);
            var tmp = guanpai.GuanPaiCardsType.getType(cards, guanpai.GuanPaiGameData.isBoomAAA, cards.length);
            var type = tmp[0];
            if (type == guanpai.GuanPaiCardsType.ZHADAN)
                ran = 100;
            if (ran > 50) {
                switch (type) {
                    case guanpai.GuanPaiCardsType.DAN:
                        SoundManager.instance.playEffect("one_" + Math.floor(cards[0] / 10), sex);
                        break;
                    case guanpai.GuanPaiCardsType.DUIZI:
                        SoundManager.instance.playEffect("double_" + Math.floor(cards[0] / 10), sex);
                        break;
                    case guanpai.GuanPaiCardsType.SAN:
                        SoundManager.instance.playEffect("tuple_" + Math.floor(cards[0] / 10), sex);
                        break;
                    case guanpai.GuanPaiCardsType.SIDAISAN:
                        SoundManager.instance.playEffect("fourAndThree", sex);
                        break;
                    case guanpai.GuanPaiCardsType.SANDAIER:
                        SoundManager.instance.playEffect("threeAndTwo", sex);
                        break;
                    case guanpai.GuanPaiCardsType.SANDAIYI:
                        SoundManager.instance.playEffect("threeAndOne", sex);
                        break;
                    case guanpai.GuanPaiCardsType.ZHADAN:
                        SoundManager.instance.playEffect("ebomb", sex);
                        SoundManager.instance.playEffect("bomb", sex);
                        break;
                    case guanpai.GuanPaiCardsType.FEIJI:
                        SoundManager.instance.playEffect("eplane", sex);
                        SoundManager.instance.playEffect("plane", sex);
                        break;
                    case guanpai.GuanPaiCardsType.DANSHUN:
                        SoundManager.instance.playEffect("shunzi", sex);
                        break;
                    case guanpai.GuanPaiCardsType.SHUANGSHUN:
                        SoundManager.instance.playEffect("liandui", sex);
                        break;
                    case guanpai.GuanPaiCardsType.SANSHUN:
                        SoundManager.instance.playEffect("sanshunzi", sex);
                        break;
                    case guanpai.GuanPaiCardsType.SIDAIER:
                        SoundManager.instance.playEffect("fourAndTwo", sex);
                        break;
                    case guanpai.GuanPaiCardsType.SIDAIYI:
                        SoundManager.instance.playEffect("fourAndOne", sex);
                        break;
                }
            }
            else if (ran > 20 && ran <= 50) {
                SoundManager.instance.playEffect("ya1", sex);
                SoundManager.instance.playEffect("outcard", 0);
            }
            else {
                SoundManager.instance.playEffect("ya2", sex);
                SoundManager.instance.playEffect("outcard", 0);
            }
        }
        else {
            ran = Math.floor(Math.random() * 100);
            if (ran > 25) {
                if (ran > 62)
                    SoundManager.instance.playEffect("pass_1", sex);
                else
                    SoundManager.instance.playEffect("pass_2", sex);
            }
            else {
                if (ran > 12)
                    SoundManager.instance.playEffect("pass_3", sex);
                else
                    SoundManager.instance.playEffect("pass_4", sex);
            }
        }
    };
    GuanPaiPage.prototype.playDugSound = function (score, seatid, noAni) {
        if (noAni)
            return;
        var player = BaseGameData.getPlayerDataBySeatid(seatid);
        var sex = player ? player.sex : 0;
        if (score == 0)
            SoundManager.instance.playEffect("grab_no", sex);
        else
            SoundManager.instance.playEffect("grab_yes", sex);
        // else if (score == 2)
        // 	SoundManager.instance.playEffect("2wa", sex);
        // else if (score == 3)
        // 	SoundManager.instance.playEffect("3wa", sex);
        // else if (score == 1)
        // 	SoundManager.instance.playEffect("heiwa", sex);
    };
    GuanPaiPage.prototype.onResize = function (e) {
        _super.prototype.onResize.call(this, e);
        Laya.timer.callLater(this, this.layoutClock);
    };
    GuanPaiPage.prototype.updateTable = function () {
        // this.removePublicCards();        
    };
    return GuanPaiPage;
}(BasePokerPage));
//# sourceMappingURL=GuanPaiPage.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 关牌游戏中玩家UI
*/
var guanpai;
(function (guanpai) {
    var GuanPaiPlayer = /** @class */ (function (_super) {
        __extends(GuanPaiPlayer, _super);
        function GuanPaiPlayer(p) {
            return _super.call(this, p) || this;
        }
        GuanPaiPlayer.prototype.init = function (p) {
            this._seatid = p.seatid;
            this._dir = p.dir || 1;
            this.name = "PlayerInGameUI" + this._seatid;
            this.view = new ui.guanpai.GuanPaiPlayerViewUI();
            this.addChild(this.view);
            this.view._btnSit.on(Laya.Event.CLICK, this, this.onSitTouch);
            this._head = new HeadUI();
            this._head.setLabName({ visible: false });
            this._head.setImageBounds(86, 86);
            this._head.x = -1;
            this._head.y = 1;
            this._head._labName.fontSize = 20;
            this.view._box.addChildAt(this._head, 1);
            this._chatContent = new ChatContent();
            this._chatContent.visible = false;
            this.view._box.addChild(this._chatContent);
            this._chatContent.pos(-70, -7);
            this.view._box.on(Laya.Event.CLICK, this, this.onPlayerInfo);
            if (Native.instance.isNative) {
                this._chatRecord = new ui.components.chat.ChatRecordUI();
                this._chatRecord.y = 73;
                this._chatRecord.visible = false;
                this.view._box.addChild(this._chatRecord);
                this._chatRecordCh = new Laya.Image("table/table_chat_record.png");
                this._chatRecordCh.y = 73;
                this.view._box.addChild(this._chatRecordCh);
            }
            // Dispatcher.on(EventNames.PLAYER_DATA_CHANGED, this.view, this.test)
            EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.PLAYER_DATA_CHANGED, this, this.onDataChange);
            EventManager.instance.registerOnObject(this, AppControl.getInstance().stage, Laya.Event.RESIZE, this, this.setSelfActionPos);
            this.initView(p);
            this.hideAll();
        };
        Object.defineProperty(GuanPaiPlayer.prototype, "dir", {
            set: function (value) {
                this._dir = value;
                this.setChildPos(value);
                if (this._chatContent) {
                    this._chatContent.popleft = GameDef.CHAT_POS[BaseGameData.maxPlayer - 1][this._dir - 1];
                    if (this._chatRecord)
                        this._chatRecord.visible = this._chatRecordCh.visible = false;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 1左2右
         */
        GuanPaiPlayer.prototype.setChildPos = function (dir) {
            var isChildLeft;
            if (BaseGameData.maxPlayer == 2) {
                if (dir == 3)
                    isChildLeft = true;
            }
            else if (BaseGameData.maxPlayer == 3) {
                if (dir == 2)
                    isChildLeft = true;
            }
            if (isChildLeft) {
                this.view._imgMaster.x = -11;
                this.view._imgWarn.x = -65;
                this.view._boxCard.x = -60;
                this.view._imgReady.x = -184;
                this.view._imgNotGrab.x = this.view._imgPass.x = -134;
                this.view._imgNotGrab.y = this.view._imgPass.y = 32;
            }
            else {
                this.view._imgMaster.x = 70;
                this.view._imgWarn.x = 96;
                this.view._boxCard.x = 107;
                this.view._imgReady.x = 99;
                if (dir == 1)
                    this.setSelfActionPos();
                else {
                    this.view._imgNotGrab.x = this.view._imgPass.x = 143;
                    this.view._imgNotGrab.y = this.view._imgPass.y = 32;
                }
            }
        };
        GuanPaiPlayer.prototype.setSelfActionPos = function () {
            if (this.view && this.view.parent && this._dir == 1) {
                var p1 = this.view.globalToLocal(new Laya.Point(Laya.stage.width * 0.5, Laya.stage.height - 214));
                this.view._imgNotGrab.x = this.view._imgPass.x = p1.x - this.view._imgNotGrab.width * 0.5;
                this.view._imgNotGrab.y = this.view._imgPass.y = p1.y - this.view._imgNotGrab.height * 0.5;
            }
        };
        GuanPaiPlayer.prototype.hideAll = function () {
            this.view._imgPass.visible = this.view._imgNotGrab.visible = this.view._boxMultiple.visible = this.view._imgMaster.visible = this.view._imgWarn.visible = this.view._boxCard.visible = false;
        };
        GuanPaiPlayer.prototype.showDug = function (score) {
            var _this = this;
            Laya.Tween.clearTween(this.view._imgNotGrab);
            if (score == 0) {
                this.view._imgNotGrab.visible = true;
                this.setSelfActionPos();
                TweenUtils.get(this.view._imgNotGrab).to({ alpha: 1 }, 200).delay(1000).to({ alpha: 0 }, 200, null, Laya.Handler.create(this, function () {
                    _this.view._imgNotGrab.visible = false;
                }));
            }
        };
        Object.defineProperty(GuanPaiPlayer.prototype, "pass", {
            set: function (value) {
                if (this.view._imgPass) {
                    this.view._imgPass.visible = value;
                    if (value)
                        this.setSelfActionPos();
                }
            },
            enumerable: true,
            configurable: true
        });
        GuanPaiPlayer.prototype.checkAll = function () {
            this.setReady();
        };
        GuanPaiPlayer.prototype.setReady = function () {
            _super.prototype.setReady.call(this);
            if (this.view._imgReady.visible)
                this.hideAll();
        };
        GuanPaiPlayer.prototype.checkMaster = function () {
            if (this._data)
                this.view._imgMaster.visible = this._data.seatid == BaseGameData.btnSeatid; //this.view._boxMultiple.visible =
            else
                this.view._imgMaster.visible = false;
        };
        GuanPaiPlayer.prototype.onDataChange = function (uid) {
            _super.prototype.onDataChange.call(this, uid);
            if (this._data) {
                this.view._boxCard.visible = this._data.uid != server.uid;
                if (this._data.uid == uid) {
                    var cnt;
                    if (this._data.uid == server.uid)
                        cnt = this._data.handCards.length;
                    else
                        cnt = this._data.handCardCount;
                    if (guanpai.GuanPaiGameData.isHideCardCnt) {
                        if (this._data.uid == server.uid)
                            this.view._labCard.text = cnt + "";
                        else
                            this.view._labCard.text = "";
                    }
                    else {
                        this.view._labCard.text = cnt + "";
                    }
                    if (cnt == 1) {
                        this.view._imgWarn.visible = true;
                        this.view._imgWarn.play(1, true);
                    }
                    else {
                        this.view._imgWarn.visible = false;
                        this.view._imgWarn.stop();
                    }
                }
            }
        };
        return GuanPaiPlayer;
    }(component.BasePlayer));
    guanpai.GuanPaiPlayer = GuanPaiPlayer;
})(guanpai || (guanpai = {}));
//# sourceMappingURL=GuanPaiPlayer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 炸弹数量界面;
*/
var poker;
(function (poker) {
    var BoomCountUI = /** @class */ (function (_super) {
        __extends(BoomCountUI, _super);
        function BoomCountUI() {
            var _this = _super.call(this) || this;
            //倍数美术字
            _this._fontData = new FontData();
            _this._fontData.init(FontConfig.FONT_WAKENG_1, Laya.loader.getRes(ResourceConfig.BITMAP_FONT_WAKENG1_JSON), Laya.loader.getRes(ResourceConfig.BITMAP_FONT_WAKENG1_PNG), 50, BPFont.LEFT);
            _this._bpFont = FontManager.instance.addFont(_this._fontData);
            _this.addChild(_this._bpFont);
            _this._bpFont.pos(41, 12);
            _this._bpFont.text = "*1";
            return _this;
        }
        Object.defineProperty(BoomCountUI.prototype, "count", {
            set: function (value) {
                this._bpFont.text = "*" + value + "";
            },
            enumerable: true,
            configurable: true
        });
        return BoomCountUI;
    }(ui.poker.PokerBoomUI));
    poker.BoomCountUI = BoomCountUI;
})(poker || (poker = {}));
//# sourceMappingURL=BoomCountUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
* @author seacole
* 基础手牌
*/
var poker;
(function (poker) {
    var CardUI = /** @class */ (function (_super) {
        __extends(CardUI, _super);
        function CardUI() {
            var _this = _super.call(this) || this;
            _this._imgFront = _this.addChild(new Laya.Image());
            _this._imgNumber = _this.addChild(new Laya.Image());
            _this._imgFlowerBig = _this.addChild(new Laya.Image());
            _this._imgBack = _this.addChild(new Laya.Image());
            _this.anchorX = 0.5;
            _this.anchorY = 0.5;
            return _this;
        }
        Object.defineProperty(CardUI.prototype, "card", {
            get: function () {
                return this._card;
            },
            set: function (value) {
                this._card = value;
                var baseUrl = "";
                if (this._cardType == CardUI.CARD_TYPE_BIG)
                    baseUrl = "pokerCardBig/pokerCardBig_";
                else
                    baseUrl = "pokerCardSmall/pokerCardSmall_";
                if (BaseGameData.gameType == GameDef.GAME_TYPE.WAKENG)
                    this._imgKengZhu.source = Laya.Loader.getRes(baseUrl + "kengZhu" + ".png");
                else if (BaseGameData.gameType == GameDef.GAME_TYPE.GUANPAI)
                    this._imgKengZhu.source = Laya.Loader.getRes(baseUrl + "GuanPai" + ".png");
                if (value) {
                    this._imgBack.visible = false;
                    this._imgFront.visible = true;
                    this._imgNumber.visible = true;
                    this._imgFlowerBig.visible = true;
                    if (this._imgFlowerSmall)
                        this._imgFlowerSmall.visible = true;
                    if (!this._imgFront.texture)
                        this._imgFront.source = Laya.Loader.getRes(baseUrl + "front.png");
                    if (this._imgOver && !this._imgOver.texture) {
                        this._imgOver.source = Laya.Loader.getRes(baseUrl + "mask.png");
                        this._imgOver.alpha = 0.2;
                    }
                    if (this._imgMask && !this._imgMask.texture)
                        this._imgMask.source = Laya.Loader.getRes(baseUrl + "mask.png");
                    var flower = value % 10;
                    var num = Math.floor(value / 10);
                    this._imgFlowerBig.source = Laya.Loader.getRes(baseUrl + "flower_big_" + flower + ".png");
                    if (this._imgFlowerSmall)
                        this._imgFlowerSmall.source = Laya.Loader.getRes(baseUrl + "flower_small_" + flower + ".png");
                    var numUrl = baseUrl;
                    if (this.isBlack(flower))
                        numUrl += "black_";
                    else
                        numUrl += "red_";
                    switch (BaseGameData.gameType) {
                        case GameDef.GAME_TYPE.WAKENG:
                            this.setWaKeng(num, numUrl);
                            break;
                        case GameDef.GAME_TYPE.SHISANSHUI:
                            this.setShiSanShui(num, numUrl);
                            break;
                        case GameDef.GAME_TYPE.GUANPAI:
                            this.setGuanPai(num, numUrl);
                            break;
                    }
                }
                else {
                    if (!this._imgBack.texture)
                        this._imgBack.source = Laya.Loader.getRes(baseUrl + "back.png");
                    this._imgBack.visible = true;
                    this._imgFront.visible = false;
                    this._imgNumber.visible = false;
                    this._imgFlowerBig.visible = false;
                    if (this._imgFlowerSmall)
                        this._imgFlowerSmall.visible = false;
                }
            },
            enumerable: true,
            configurable: true
        });
        CardUI.clearMouseOver = function () {
            CardUI.isMouseDown = false;
            CardUI.mouseDownStartCard = 0;
            CardUI.mouseDownEndCard = 0;
        };
        CardUI.prototype.init = function (canTouch, data) {
            CardUI.clearMouseOver();
            this.isOver = false;
            this.isMask = false;
            this.isMaster = false;
            this._selected = false;
            this.move(data, true, false, false);
            if (canTouch)
                this.addListener();
            else
                this.removeListener();
        };
        CardUI.prototype.setShiSanShui = function (num, numUrl) {
            var imgNum = num;
            if (num == 14)
                imgNum = 1;
            // else if (num == 1)
            //  	imgNum = 14;
            // else if (num == 2)
            //  	imgNum = 14;
            this._imgNumber.source = Laya.Loader.getRes(numUrl + imgNum + ".png");
        };
        CardUI.prototype.setWaKeng = function (num, numUrl) {
            var imgNum = num;
            if (num == 15)
                imgNum = 1;
            else if (num == 17)
                imgNum = 2;
            else if (num == 19)
                imgNum = 3;
            this._imgNumber.source = Laya.Loader.getRes(numUrl + imgNum + ".png");
        };
        CardUI.prototype.setGuanPai = function (num, numUrl) {
            var imgNum = num;
            if (num == 16)
                imgNum = 2;
            else if (num == 14)
                imgNum = 1;
            this._imgNumber.source = Laya.Loader.getRes(numUrl + imgNum + ".png");
        };
        CardUI.prototype.isBlack = function (flower) {
            return (flower == CardUI.FLOWER_CLUB || flower == CardUI.FLOWER_SPADE);
        };
        Object.defineProperty(CardUI.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            set: function (value) {
                if (this._selected != value) {
                    this._selected = value;
                    this.move({ y: this._selected ? this._endY - 20 : this._endY }, false, false);
                }
            },
            enumerable: true,
            configurable: true
        });
        CardUI.prototype.move = function (data, isEndPosi, needRemoveTouch, needTween, duration, callback, thisObj, args, delay) {
            if (isEndPosi === void 0) { isEndPosi = false; }
            if (needRemoveTouch === void 0) { needRemoveTouch = true; }
            if (needTween === void 0) { needTween = true; }
            if (duration === void 0) { duration = 100; }
            if (callback === void 0) { callback = null; }
            if (thisObj === void 0) { thisObj = null; }
            if (args === void 0) { args = null; }
            if (delay === void 0) { delay = 0; }
            if (isEndPosi)
                this.setEndPosi(data.x, data.y);
            if (needRemoveTouch) {
                this._selected = false;
                this.removeListener();
            }
            // Laya.Tween.clearTween(this);
            if (this._tweenUtil)
                this._tweenUtil.clear();
            if (needTween) {
                if (!this._tweenUtil)
                    this._tweenUtil = TweenUtils.get(this);
                this._tweenUtil.delay(delay).set({ visible: true }).to(data, duration, null, Laya.Handler.create(thisObj, callback, args));
            }
            // Laya.Tween.to(this, data, duration, null, Laya.Handler.create(thisObj, callback, args),delay);
            else
                Utils.injectProp(this, data);
        };
        Object.defineProperty(CardUI.prototype, "isOver", {
            get: function () {
                if (this._imgOver)
                    return this._imgOver.visible;
                else
                    return false;
            },
            set: function (value) {
                if (this._imgOver)
                    this._imgOver.visible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CardUI.prototype, "isMask", {
            get: function () {
                if (this._imgMask)
                    return this._imgMask.visible;
                else
                    return false;
            },
            set: function (value) {
                if (this._imgMask)
                    this._imgMask.visible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CardUI.prototype, "isMaster", {
            get: function () {
                if (this._imgKengZhu)
                    return this._imgKengZhu.visible;
                else
                    return false;
            },
            set: function (value) {
                if (this._imgKengZhu)
                    this._imgKengZhu.visible = value;
            },
            enumerable: true,
            configurable: true
        });
        CardUI.prototype.setEndPosi = function (x, y) {
            this._endX = x;
            this._endY = y;
        };
        CardUI.prototype.addListener = function () {
            this.on(Laya.Event.CLICK, this, this.onMouseEvent);
            this.on(Laya.Event.MOUSE_DOWN, this, this.onMouseEvent);
            this.on(Laya.Event.MOUSE_UP, this, this.onMouseEvent);
            this.on(Laya.Event.MOUSE_OVER, this, this.onMouseEvent);
        };
        CardUI.prototype.removeListener = function () {
            this.off(Laya.Event.CLICK, this, this.onMouseEvent);
            this.off(Laya.Event.MOUSE_DOWN, this, this.onMouseEvent);
            this.off(Laya.Event.MOUSE_UP, this, this.onMouseEvent);
            this.off(Laya.Event.MOUSE_OVER, this, this.onMouseEvent);
        };
        CardUI.prototype.onMouseEvent = function (e) {
            switch (e.type) {
                case Laya.Event.MOUSE_OVER:
                    if (CardUI.isMouseDown) {
                        CardUI.mouseDownEndCard = this.card;
                        Dispatcher.dispatch(EventNames.POKER_OVER_CHANGE, [true]);
                    }
                    break;
                case Laya.Event.MOUSE_DOWN:
                    CardUI.isMouseDown = true;
                    CardUI.mouseDownStartCard = this.card;
                    this.isOver = true;
                    break;
                // case Laya.Event.MOUSE_UP:
                // 	if (CardUI.isMouseDown) {
                // 		if (this.card != CardUI.mouseDownStartCard) {
                // 			CardUI.mouseDownEndCard = this.card;
                // 			Dispatcher.dispatch(EventNames.POKER_OVER_CHANGE, [false]);
                // 		}
                // 		CardUI.clearMouseOver();
                // 	}
                // 	break;
                case Laya.Event.CLICK:
                    this.selected = !this.selected;
                    SoundManager.instance.playEffect("touch_card_p", 0);
                    if (this.selected) {
                        Dispatcher.dispatch(EventNames.POKER_SELECTED_CHANGE, this.card);
                    }
                    else
                        Dispatcher.dispatch(EventNames.POKER_SELECTED_CHANGE);
                    break;
            }
        };
        CardUI.borrowCard = function () {
            return;
        };
        CardUI.returnCard = function (card) {
        };
        CardUI.prototype.play = function () {
            this._imgFront.visible = false;
            this._imgNumber.visible = false;
            this._imgFlowerBig.visible = false;
            this._imgFlowerSmall.visible = false;
            var fanpai = new ui.bazhang.fanpaiUI();
            fanpai._imgFlowerSmall.skin = this._imgFlowerSmall.source.url;
            fanpai._imgNum.skin = this._imgNumber.source.url;
            fanpai._imgFlowerBig.skin = this._imgFlowerBig.source.url;
            this.addChild(fanpai);
            fanpai.ani1.play(1, false);
            Laya.timer.once(1000, this, function () {
                fanpai.ani1.stop();
                fanpai.removeSelf();
                this._imgFront.visible = true;
                this._imgNumber.visible = true;
                this._imgFlowerBig.visible = true;
                this._imgFlowerSmall.visible = true;
            });
        };
        CardUI.CARD_TYPE_BIG = 1;
        CardUI.CARD_TYPE_SMALL = 2;
        /**
         * 黑桃
         */
        CardUI.FLOWER_SPADE = 3;
        /**
         * 红心
         */
        CardUI.FLOWER_HEART = 2;
        /**
         * 草花
         */
        CardUI.FLOWER_CLUB = 1;
        /**
         * 方片
         */
        CardUI.FLOWER_DIAMOND = 0;
        return CardUI;
    }(Laya.View));
    poker.CardUI = CardUI;
})(poker || (poker = {}));
//# sourceMappingURL=CardUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
* @author seacole
* 基础大号手牌
*/
var poker;
(function (poker) {
    var CardBigUI = /** @class */ (function (_super) {
        __extends(CardBigUI, _super);
        function CardBigUI() {
            var _this = _super.call(this) || this;
            _this._cardType = poker.CardUI.CARD_TYPE_BIG;
            _this._imgFlowerSmall = _this.addChild(new Laya.Image());
            _this._imgKengZhu = _this.addChild(new Laya.Image());
            _this._imgOver = _this.addChild(new Laya.Image());
            _this._imgOver.alpha = 0.6;
            _this._imgMask = _this.addChild(new Laya.Image());
            _this._imgMask.alpha = 0.4;
            return _this;
        }
        CardBigUI.borrowCard = function () {
            if (!CardBigUI._pool)
                CardBigUI._pool = ObjectPool.getInstance("poker.CardBigUI", Laya.ClassUtils.getClass(poker.CardBigUI));
            return CardBigUI._pool.borrowObject();
        };
        CardBigUI.returnCard = function (card) {
            if (CardBigUI._pool)
                CardBigUI._pool.returnObject(card);
        };
        return CardBigUI;
    }(poker.CardUI));
    poker.CardBigUI = CardBigUI;
})(poker || (poker = {}));
//# sourceMappingURL=CardBigUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
* @author seacole
* 基础小号手牌
*/
var poker;
(function (poker) {
    var CardSmallUI = /** @class */ (function (_super) {
        __extends(CardSmallUI, _super);
        function CardSmallUI() {
            var _this = _super.call(this) || this;
            _this._imgKengZhu = _this.addChild(new Laya.Image());
            _this._cardType = poker.CardUI.CARD_TYPE_SMALL;
            return _this;
        }
        CardSmallUI.borrowCard = function () {
            if (!CardSmallUI._pool)
                CardSmallUI._pool = ObjectPool.getInstance("poker.CardSmallUI", Laya.ClassUtils.getClass(poker.CardSmallUI));
            return CardSmallUI._pool.borrowObject();
        };
        CardSmallUI.returnCard = function (card) {
            if (CardSmallUI._pool)
                CardSmallUI._pool.returnObject(card);
        };
        return CardSmallUI;
    }(poker.CardUI));
    poker.CardSmallUI = CardSmallUI;
})(poker || (poker = {}));
//# sourceMappingURL=CardSmallUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 倒计时的钟;
*/
var poker;
(function (poker) {
    var Clock = /** @class */ (function (_super) {
        __extends(Clock, _super);
        function Clock() {
            var _this = _super.call(this) || this;
            _this.init();
            return _this;
        }
        Clock.prototype.init = function () {
            this._num.value = "0";
            // this._fontData = new laya.ui.FontClip("poker/daojishi.png","0123456789")
            // // new FontData();
            // // this._fontData.init(FontConfig.FONT_GUANPAI_1, Laya.loader.getRes(ResourceConfig.BITMAP_FONT_GUANPAI1_JSON),
            // // 	Laya.loader.getRes(ResourceConfig.BITMAP_FONT_GUANPAI1_PNG), 50, BPFont.CENTER, FontData.TYPE_TIME, false);
            // // this._fontData.text = "0";
            // // this._bpFont = FontManager.instance.addFont(this._fontData);
            // // this.addChild(this._bpFont);
            // this.addChild(this._fontData)
            // this._fontData.pos(25, 28);
        };
        Object.defineProperty(Clock.prototype, "time", {
            set: function (value) {
                this.ani1.stop();
                // this._bpFont.start(value);
                this._num.value = String(value);
                this._time = value;
                Laya.timer.loop(1000, this, this.showtime);
                // this._fontData.value = value
                if (value > 5) {
                    Laya.timer.clear(this, this.onWarn);
                    Laya.timer.once(value * 1000 - 5000, this, this.onWarn);
                }
                else
                    this.ani1.play(0, true);
            },
            enumerable: true,
            configurable: true
        });
        Clock.prototype.showtime = function () {
            this._time--;
            if (this._time < 0)
                this._time = 0;
            this._num.value = String(this._time);
            if (this._time == 0) {
                Laya.timer.clear(this, this.showtime);
            }
        };
        Clock.prototype.onWarn = function () {
            SoundManager.instance.playEffect("timeup", 0);
            this.ani1.play(0, true);
        };
        Clock.prototype.stop = function () {
            Laya.timer.clear(this, this.onWarn);
            // this._bpFont.stop();
            Laya.timer.clear(this, this.showtime);
            this._num.value = "0";
            this.ani1.stop();
            console.log("000000000000000");
        };
        return Clock;
    }(ui.poker.PokerClockUI));
    poker.Clock = Clock;
})(poker || (poker = {}));
//# sourceMappingURL=Clock.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * @author seacole
 * 炸弹动画
*/
var poker;
(function (poker) {
    var EffectBoom = /** @class */ (function (_super) {
        __extends(EffectBoom, _super);
        function EffectBoom() {
            var _this = _super.call(this) || this;
            _this.centerX = 0;
            _this.centerY = 0;
            return _this;
        }
        Object.defineProperty(EffectBoom, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new EffectBoom();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        EffectBoom.prototype.show = function (parent) {
            if (!this.parent)
                parent.addChild(this);
            this.ani1.play(1, false);
            this.ani1.on(Laya.Event.COMPLETE, this, this.onPlayEnd);
        };
        EffectBoom.prototype.onPlayEnd = function () {
            this.ani1.off(Laya.Event.COMPLETE, this, this.onPlayEnd);
            this.removeSelf();
        };
        return EffectBoom;
    }(ui.poker.boomUI));
    poker.EffectBoom = EffectBoom;
})(poker || (poker = {}));
//# sourceMappingURL=EffectBoom.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * @author seacole
 * 单顺动画
*/
var poker;
(function (poker) {
    var EffectDanShun = /** @class */ (function (_super) {
        __extends(EffectDanShun, _super);
        function EffectDanShun() {
            return _super.call(this) || this;
        }
        EffectDanShun.borrow = function () {
            if (!EffectDanShun._pool)
                EffectDanShun._pool = ObjectPool.getInstance("poker.EffectDanShun", Laya.ClassUtils.getClass(poker.EffectDanShun));
            return EffectDanShun._pool.borrowObject();
        };
        EffectDanShun.return = function (effect) {
            if (EffectDanShun._pool)
                EffectDanShun._pool.returnObject(effect);
        };
        EffectDanShun.prototype.play = function (scale) {
            this.scale(scale, scale);
            this.ani1.play(1, false);
            this.ani1.on(Laya.Event.COMPLETE, this, this.onComplete);
        };
        EffectDanShun.prototype.onComplete = function () {
            this.ani1.off(Laya.Event.COMPLETE, this, this.onComplete);
            this.ani1.stop();
            this.removeSelf();
        };
        return EffectDanShun;
    }(ui.poker.shunziUI));
    poker.EffectDanShun = EffectDanShun;
})(poker || (poker = {}));
//# sourceMappingURL=EffectDanShun.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * @author seacole
 * 飞机动画
*/
var poker;
(function (poker) {
    var EffectFeiji = /** @class */ (function (_super) {
        __extends(EffectFeiji, _super);
        function EffectFeiji() {
            var _this = _super.call(this) || this;
            _this.centerX = 0;
            _this.centerY = 0;
            return _this;
        }
        Object.defineProperty(EffectFeiji, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new EffectFeiji();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        EffectFeiji.prototype.show = function (parent) {
            if (!this.parent)
                parent.addChild(this);
            this.ani1.play(1, false);
            this.ani1.on(Laya.Event.COMPLETE, this, this.onPlayEnd);
        };
        EffectFeiji.prototype.onPlayEnd = function () {
            this.ani1.off(Laya.Event.COMPLETE, this, this.onPlayEnd);
            this.removeSelf();
        };
        return EffectFeiji;
    }(ui.poker.palneUI));
    poker.EffectFeiji = EffectFeiji;
})(poker || (poker = {}));
//# sourceMappingURL=EffectFeiJi.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * @author seacole
 * 双顺动画
*/
var poker;
(function (poker) {
    var EffectShuangShun = /** @class */ (function (_super) {
        __extends(EffectShuangShun, _super);
        function EffectShuangShun() {
            return _super.call(this) || this;
        }
        EffectShuangShun.borrow = function () {
            if (!EffectShuangShun._pool)
                EffectShuangShun._pool = ObjectPool.getInstance("poker.EffectShuangShun", Laya.ClassUtils.getClass(poker.EffectShuangShun));
            return EffectShuangShun._pool.borrowObject();
        };
        EffectShuangShun.return = function (effect) {
            if (EffectShuangShun._pool)
                EffectShuangShun._pool.returnObject(effect);
        };
        EffectShuangShun.prototype.play = function (scale) {
            this.scale(scale, scale);
            this.ani1.play(1, false);
            this.ani1.on(Laya.Event.COMPLETE, this, this.onComplete);
        };
        EffectShuangShun.prototype.onComplete = function () {
            this.ani1.off(Laya.Event.COMPLETE, this, this.onComplete);
            this.ani1.stop();
            this.removeSelf();
        };
        return EffectShuangShun;
    }(ui.poker.lianduiUI));
    poker.EffectShuangShun = EffectShuangShun;
})(poker || (poker = {}));
//# sourceMappingURL=EffectShuangShun.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 手牌数量界面;
*/
var poker;
(function (poker) {
    var PokerCountUI = /** @class */ (function (_super) {
        __extends(PokerCountUI, _super);
        function PokerCountUI() {
            var _this = _super.call(this) || this;
            _this._fontData = new FontData();
            _this._fontData.init(FontConfig.FONT_WAKENG_3, Laya.loader.getRes(ResourceConfig.BITMAP_FONT_WAKENG3_JSON), Laya.loader.getRes(ResourceConfig.BITMAP_FONT_WAKENG3_PNG), 42, BPFont.CENTER);
            // this._fontData.text = "10";
            _this._bpFont = FontManager.instance.addFont(_this._fontData);
            _this.addChild(_this._bpFont);
            _this._bpFont.pos(7, 22);
            return _this;
        }
        Object.defineProperty(PokerCountUI.prototype, "count", {
            set: function (value) {
                this._bpFont.text = value + "";
            },
            enumerable: true,
            configurable: true
        });
        return PokerCountUI;
    }(ui.poker.PokerCountUI));
    poker.PokerCountUI = PokerCountUI;
})(poker || (poker = {}));
//# sourceMappingURL=PokerCountUI.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * @author seacole
 * 三带二动画
*/
var poker;
(function (poker) {
    var EffectSanDaiEr = /** @class */ (function (_super) {
        __extends(EffectSanDaiEr, _super);
        function EffectSanDaiEr() {
            return _super.call(this) || this;
        }
        EffectSanDaiEr.borrow = function () {
            if (!EffectSanDaiEr._pool)
                EffectSanDaiEr._pool = ObjectPool.getInstance("poker.EffectSanDaiEr", Laya.ClassUtils.getClass(poker.EffectSanDaiEr));
            return EffectSanDaiEr._pool.borrowObject();
        };
        EffectSanDaiEr.return = function (effect) {
            if (EffectSanDaiEr._pool)
                EffectSanDaiEr._pool.returnObject(effect);
        };
        EffectSanDaiEr.prototype.play = function (scale) {
            this.scale(scale, scale);
            this.ani1.play(1, false);
            this.ani1.on(Laya.Event.COMPLETE, this, this.onComplete);
        };
        EffectSanDaiEr.prototype.onComplete = function () {
            this.ani1.off(Laya.Event.COMPLETE, this, this.onComplete);
            this.ani1.stop();
            this.removeSelf();
        };
        return EffectSanDaiEr;
    }(ui.poker.sandaierUI));
    poker.EffectSanDaiEr = EffectSanDaiEr;
})(poker || (poker = {}));
//# sourceMappingURL=SanDaiEr.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * @author seacole
 * 四带三动画
*/
var poker;
(function (poker) {
    var EffectSiDaiSan = /** @class */ (function (_super) {
        __extends(EffectSiDaiSan, _super);
        function EffectSiDaiSan() {
            return _super.call(this) || this;
        }
        EffectSiDaiSan.borrow = function () {
            if (!EffectSiDaiSan._pool)
                EffectSiDaiSan._pool = ObjectPool.getInstance("poker.EffectSiDaiSan", Laya.ClassUtils.getClass(poker.EffectSiDaiSan));
            return EffectSiDaiSan._pool.borrowObject();
        };
        EffectSiDaiSan.return = function (effect) {
            if (EffectSiDaiSan._pool)
                EffectSiDaiSan._pool.returnObject(effect);
        };
        EffectSiDaiSan.prototype.play = function (scale) {
            this.scale(scale, scale);
            this.ani1.play(1, false);
            this.ani1.on(Laya.Event.COMPLETE, this, this.onComplete);
        };
        EffectSiDaiSan.prototype.onComplete = function () {
            this.ani1.off(Laya.Event.COMPLETE, this, this.onComplete);
            this.ani1.stop();
            this.removeSelf();
        };
        return EffectSiDaiSan;
    }(ui.poker.sidaisanUI));
    poker.EffectSiDaiSan = EffectSiDaiSan;
})(poker || (poker = {}));
//# sourceMappingURL=SiDaiSan.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var tonglu_mj;
(function (tonglu_mj) {
    var CardView = /** @class */ (function (_super) {
        __extends(CardView, _super);
        function CardView(card, dir, optcallback) {
            var _this = _super.call(this, card, dir, optcallback) || this;
            _this.setGod(dir);
            return _this;
        }
        CardView.prototype.setGod = function (dir) {
            switch (dir) {
                case 1:
                    this.view._god.skin = "card/caishen_big.png";
                    break;
                case 2:
                    this.view._god.skin = "card/caishen_small_left.png";
                    break;
                case 3:
                    this.view._god.skin = "card/caishen_small_top.png";
                    break;
                case 4:
                    this.view._god.skin = "card/caishen_small_right.png";
                    break;
            }
        };
        return CardView;
    }(BaseCardView));
    tonglu_mj.CardView = CardView;
})(tonglu_mj || (tonglu_mj = {}));
//# sourceMappingURL=CardView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var tonglu_mj;
(function (tonglu_mj) {
    var FoldCardView = /** @class */ (function (_super) {
        __extends(FoldCardView, _super);
        function FoldCardView(seatid, dir) {
            return _super.call(this, seatid, dir) || this;
        }
        FoldCardView.prototype.getFoldView = function () {
            return this.foldView;
        };
        return FoldCardView;
    }(BaseFoldCardView));
    tonglu_mj.FoldCardView = FoldCardView;
})(tonglu_mj || (tonglu_mj = {}));
//# sourceMappingURL=FoldCardView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var tonglu_mj;
(function (tonglu_mj) {
    var GameEndDialog = /** @class */ (function (_super) {
        __extends(GameEndDialog, _super);
        function GameEndDialog() {
            var _this = _super.call(this) || this;
            _this["name"] = "GameEndDialog";
            _this._cardView = tonglu_mj.CardView;
            return _this;
        }
        GameEndDialog.prototype.addWinItem = function (player, score) {
            var view = _super.prototype.addWinItem.call(this, player, score);
            view._detail.visible = false;
            return view;
        };
        GameEndDialog.prototype.addLoseItem = function (player, score) {
            var view = _super.prototype.addLoseItem.call(this, player, score);
            view._detail.visible = false;
            return view;
        };
        return GameEndDialog;
    }(BaseGameEndDialog));
    tonglu_mj.GameEndDialog = GameEndDialog;
})(tonglu_mj || (tonglu_mj = {}));
//# sourceMappingURL=GameEndDialog.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var tonglu_mj;
(function (tonglu_mj) {
    var HandCardView = /** @class */ (function (_super) {
        __extends(HandCardView, _super);
        function HandCardView(seatid, dir, callback) {
            var _this = _super.call(this, seatid, dir, callback) || this;
            _this.registerCardView(tonglu_mj.CardView);
            return _this;
        }
        HandCardView.prototype.onPiao = function () {
            if (this.dir != 1)
                return;
            var start = 14 == this.cardsViews.length ? 1 : 0;
            for (var i = start; i < this.cardsViews.length; i++) {
                var view = this.cardsViews[i];
                view.view._mask.visible = true;
                view.view._ting.visible = false;
            }
        };
        HandCardView.prototype.showArrorOnly = function (cards) {
            if (this.dir != 1)
                return;
            for (var k in this.cardsViews) {
                var view = this.cardsViews[k];
                var arror = false;
                for (var _i = 0, cards_1 = cards; _i < cards_1.length; _i++) {
                    var i = cards_1[_i];
                    if (view.card % 100 == i) {
                        arror = true;
                    }
                }
                view.view._ting.visible = arror;
            }
        };
        HandCardView.prototype.clearTouchBut = function (cards) {
            if (this.dir != 1)
                return;
            for (var k in this.cardsViews) {
                var view = this.cardsViews[k];
                var clear = true;
                var card = view.card % 100;
                if (cards.length) {
                    for (var _i = 0, cards_2 = cards; _i < cards_2.length; _i++) {
                        var i = cards_2[_i];
                        if (card == i) {
                            clear = false;
                        }
                    }
                }
                else {
                    clear = false;
                }
                view.view._mask.visible = clear;
            }
            this._maskCardsBut = cards;
        };
        HandCardView.prototype.canTouch = function (view) {
            if (this._maskCardsBut.length) {
                for (var _i = 0, _a = this._maskCardsBut; _i < _a.length; _i++) {
                    var c = _a[_i];
                    if (c == view.card % 100)
                        return true;
                }
            }
            else {
                return !view.view._mask.visible;
            }
            return false;
        };
        HandCardView.prototype.onMouseDown = function (e) {
            if (!BaseGameData.isGameing)
                return;
            if (BaseGameData.isRecord == 1)
                return;
            if (this.cards.length <= 0) {
                return false;
            }
            if (!Utils.checkSeatid(BaseGameData.selfSeatid)) {
                return;
            }
            var compareX = e.currentTarget.mouseX;
            var compareY = e.currentTarget.mouseY;
            if (!this.touchRect.contains(e.currentTarget.mouseX, e.currentTarget.mouseY)) {
                this.unSelectCards();
                BaseTingCardManager.instance.clearAll();
                Dispatcher.dispatch("clear_same_card");
            }
            else {
                var count = this.cards.length;
                var touchFlag = false;
                for (var i = count; i > 0; i--) {
                    var view = this.cardsViews[i - 1];
                    if (!this.canTouch(view))
                        continue;
                    var point = view.localToGlobal(new laya.maths.Point(0, 0));
                    var rect = view.getBounds();
                    var newRect = new Laya.Rectangle(point.x, point.y, rect.width, rect.height + 50);
                    if (view && newRect.contains(compareX, compareY)) {
                        this.touchIndex = i;
                        this.beginX = e.currentTarget.mouseX;
                        this.beginY = e.currentTarget.mouseY;
                        touchFlag = true;
                        break;
                    }
                }
                if (!touchFlag) {
                    // return false
                    this.touchIndex = null;
                    return;
                }
                if (this.touchIndex && this.touchIndex > 0) {
                    var view = this.cardsViews[this.touchIndex - 1];
                    if (!this.canTouch(view))
                        return;
                    if (this._isting) {
                        var index = BaseGameData.tingCards.indexOf((view.card % 100));
                        if (index >= 0) {
                        }
                        else {
                            return;
                        }
                    }
                    this.onClickCard(view);
                    this.changeArrowByIndex(this.touchIndex - 1);
                }
            }
        };
        return HandCardView;
    }(BaseHandCardView));
    tonglu_mj.HandCardView = HandCardView;
})(tonglu_mj || (tonglu_mj = {}));
//# sourceMappingURL=HandCardView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var tonglu_mj;
(function (tonglu_mj) {
    var HoldCardView = /** @class */ (function (_super) {
        __extends(HoldCardView, _super);
        function HoldCardView(seatid, dir) {
            return _super.call(this, seatid, dir) || this;
        }
        return HoldCardView;
    }(BaseHoldCardView));
    tonglu_mj.HoldCardView = HoldCardView;
})(tonglu_mj || (tonglu_mj = {}));
//# sourceMappingURL=HoldCardView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var tonglu_mj;
(function (tonglu_mj) {
    var TingCardView = /** @class */ (function (_super) {
        __extends(TingCardView, _super);
        function TingCardView(info) {
            return _super.call(this, info) || this;
        }
        return TingCardView;
    }(BaseTingCardView));
    tonglu_mj.TingCardView = TingCardView;
})(tonglu_mj || (tonglu_mj = {}));
//# sourceMappingURL=TingCardView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var MatchPage = /** @class */ (function (_super) {
    __extends(MatchPage, _super);
    function MatchPage() {
        var _this = _super.call(this) || this;
        _this.name = "MatchPage";
        _this._loadDatas = _this._loadDatas.concat([{ url: ResourceConfig.SHEET_SHISANSHUI_ANI, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_MATCH, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_MATCHSIGN_ANI, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.BG_MATCH_SHARE, type: Laya.Loader.IMAGE }
        ]);
        AppPage.register(BaseMJPage, _this._loadDatas);
        return _this;
        // GameConfig.IS_MATCH = true
    }
    MatchPage.prototype.init = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        BaseGameData.tablelayout = MaJiangLayOut;
        _super.prototype.init.apply(this, params);
        // this.initEvent()
        DialogManager.instance.addDialog("MATCH_WAIT", MatchWaitDialog);
        DialogManager.instance.addDialog("MATCH_RECORD", MatchRecordDialog);
        DialogManager.instance.addDialog("MATCH_OVER", MatchOverDialog);
        DialogManager.instance.addDialog("MATCH_OUT_WIN", MatchOutWinDialog);
        DialogManager.instance.addDialog("MATCH_OUT_LOSE", MatchOutLoseDialog);
        DialogManager.instance.addDialog("MATCH_SHARE", MatchShareDialog);
        this.isOver = false;
    };
    MatchPage.prototype.initEvent = function () {
        _super.prototype.initEvent.call(this);
        if (GameConfig.IS_MATCH) {
            EventManager.instance.registerOnObject(this, server, EventNames.MATCH_START, this, this.onMatchStartNtf);
            EventManager.instance.registerOnObject(this, server, EventNames.MATCH_INFO, this, this.onMatchInfoNtf);
            EventManager.instance.registerOnObject(this, server, EventNames.MATCH_KICK_OUT, this, this.onMatchKickOutNtf);
            EventManager.instance.registerOnObject(this, server, EventNames.MATCH_SCORE_NTF, this, this.onMatchBaseScoreNtf);
            EventManager.instance.registerOnObject(this, server, EventNames.MATCH_RANK, this, this.onMatchUpdateRankNtf);
            EventManager.instance.registerOnObject(this, server, EventNames.MATCH_OVER, this, this.onMatchOverNtf);
            EventManager.instance.registerOnObject(this, server, EventNames.MATCH_RECORD_REP, this, this.onMatchRecordRep);
            EventManager.instance.registerOnObject(this, server, EventNames.MATCH_MSG_INFO, this, this.onMsgMatchInfoNtf);
            this.serverCode = server.code;
        }
        //     message PlayerInfo {
        // 	required uint32 uid = 1;
        // 	optional uint32 ranking = 2;
        // 	optional int32 score = 3;
        // }
        Laya.timer.once(3000, this, function () {
            // this.onMatchOverNtf({playerInfo:[{uid:10001,ranking:1,score:3,nickname:"1111"},{uid:10002,ranking:2,score:3,nickname:"2222"},{uid:10003,ranking:3,score:3,nickname:"3333"}]})
            //          optional uint32 waiting = 1; 		//等待状态 0 不等待 1等待
            // optional uint32 stage = 2; 			//阶段 1初赛 2初赛进复赛等待 3复赛 4 决赛 
            // optional uint32 ranking = 3;
            // optional uint32 hands_cnt = 4;  	//初赛一共打了几局
            // optional uint32 rounds = 5;    		//复赛轮数
            // optional uint32 left_table = 6;
            // optional uint32 player_cnt = 7;
            // repeated uint32 swiss_player = 8;
            // optional uint32 total_player = 9;
            // optional uint32 match_score = 10;
            // optional uint32 swiss_round = 11;
            // this.onMatchStartNtf({"stage":4,"playerCnt":25})
            // this.onMatchInfoNtf({"waiting":1,"stage":3,"handsCnt":4,"lefttable":10,"ranking":10,"playerCnt":48,"swissPlayer":[25,18,12,4],"totalPlayer":25,"matchScore":10})
            // this.onShowInfoNtfHandler({"type":GameDef.ShowInfoType.START_GAME,"info":[]})
            // this.onShowInfoNtfHandler({"type":GameDef.ShowInfoType.DEAL_CARDS,"info":[13,13,13,13]})
            // this.onCardMoveNtfHandler({"toSeatid":1,"cards":[40,41,42,43,50,51,52,60,61,82,93,70,101],"opttype":GameDef.OptType.MJ_DEAL})
            // this.onPlayerOptNtfHandler({"seatid":1,"cards":[40,41,42,43,50,51,52,60,61,82,93,70,101]})
            // this.onShowCardsNtfHandler({"showncards":[{"seatid":1,"handcards":[40,41,42,43,50,51,52,60,61,82,93,70,101]},{"seatid":2,"handcards":[112,62,91,82,102,110,101,41,42,111,131,143,51]},{"seatid":3,"handcards":[53,142,30,71,40,141,23,33,121,140,22,73,123]},{"seatid":4,"handcards":[72,103,122,130,113,61,60,80,63,31,81,133,32]}]})
            // this.onDetailNtfHandler({"detailType":1,"playerInfo":[{"seatid":1,"info":[{"name":2,"value":3},{"name":4,"value":5},{"name":1,"value":-3},{"name":8},{"name":1,"value":-3},{"name":1}]},{"seatid":2,"info":[{"name":1,"value":-3},{"name":1},{"name":3,"value":1},{"name":3},{"name":1,"value":3},{"name":1}]},{"seatid":3,"info":[{"name":1,"value":1},{"name":1},{"name":2,"value":-1},{"name":2},{"name":1,"value":-1},{"name":1}]},{"seatid":4,"info":[{"name":1,"value":-1},{"name":1},{"name":4,"value":3},{"name":8},{"name":1,"value":1},{"name":1}]}]})
            // this.onDetailNtfHandler({"detailType":3,"playerInfo":[{"seatid":1,"info":[{"name":1000,"value":3}]}]})
            // this.onDetailNtfHandler({"detailType":4,"playerInfo":[{"seatid":1,"info":[{"name":2,"value":3}]}]})
            // this.onGameEndNtfHandler({"win_type":1,"scores":[{"seatid":1,"winScore":20,"score":20},{"seatid":2,"winScore":-40,"score":20},{"seatid":3,"winScore":30,"score":20},{"seatid":4,"winScore":-20,"score":20}]})
            // this.onMatchKickOutNtf({uid:969726,ranking:1})
        });
    };
    MatchPage.prototype.layoutChild = function () {
        _super.prototype.layoutChild.call(this);
        if (!GameConfig.IS_MATCH) {
            if (this.matchTopBg) {
                this.matchTopBg.removeSelf();
                this.matchTopBg = null;
            }
            if (this.matchStage) {
                this.matchStage.removeSelf();
                this.matchStage = null;
            }
        }
    };
    MatchPage.prototype.onGameStartNtfHandler = function (msg) {
        _super.prototype.onGameStartNtfHandler.call(this, msg);
        if (GameConfig.IS_MATCH) {
            this.updateMatchTopInfo();
        }
    };
    MatchPage.prototype.onMatchStartNtf = function (msg) {
        BaseGameData.matchInfo.matchStage = msg.stage;
        if (msg.stage == 3) {
            BaseGameData.matchInfo.matchRounds = 1;
        }
        if (msg.stage == 1 && !BaseGameData.matchInfo.matchHandCnt) {
            BaseGameData.matchInfo.matchHandCnt = 1;
        }
        BaseGameData.matchInfo.matchPlayer = msg.playerCnt;
        if (BaseGameData.matchInfo.matchRank && BaseGameData.matchInfo.matchRank > BaseGameData.matchInfo.matchPlayer) {
            BaseGameData.matchInfo.matchPlayer = BaseGameData.matchInfo.matchRank;
        }
        if (this.matchTopBg && BaseGameData.matchInfo.matchRank && BaseGameData.selfSeatid) {
            this.matchTopBg._rank.text = "当前排名" + BaseGameData.matchInfo.matchRank + "/" + BaseGameData.matchInfo.matchPlayer;
        }
        AnimationManager.instance.addAnimation(function () {
            DialogManager.instance.clearAll();
            this.showMatchStart();
        }.bind(this), function () {
            this.clearMatchStart();
        }.bind(this));
    };
    MatchPage.prototype.showJinji = function () {
        this.JinJiAni = new ui.matchSign.MatchJinjiUI();
        this.JinJiAni._rank.text = BaseGameData.matchInfo.matchRank;
        this.JinJiAni._total.text = BaseGameData.matchInfo.totalPlayer;
        this.JinJiAni.zOrder = GameZorder.Ani;
        this._table.addChild(this.JinJiAni);
        this.JinJiAni.centerX = 0;
        this.JinJiAni.centerY = 0;
        var width = 0;
        for (var k in BaseGameData.matchInfo.matchSwissPlayer) {
            var v = BaseGameData.matchInfo.matchSwissPlayer[k];
            var res = "res/match/swiss_2.png";
            var fontSize = 24;
            var fontcolor = "#beb2ab";
            if (v >= BaseGameData.matchInfo.matchSwissPlayer[BaseGameData.matchInfo.matchRounds - 1 || 0]) {
                res = "res/match/swiss_1.png";
                fontcolor = "#820400";
            }
            var view = new laya.ui.Image(res);
            var label = new laya.ui.Label(v);
            var line = new laya.ui.Image("match/lianjiexian.png");
            view.addChild(label);
            if (parseInt(k) != BaseGameData.matchInfo.matchSwissPlayer.length - 2) {
                view.addChild(line);
                line.pos(91, 20);
                width = width + 100;
            }
            label.centerX = 0;
            label.y = 5;
            label.fontSize = fontSize;
            label.color = fontcolor;
            this.JinJiAni._swiss.addChild(view);
            width = width + 91;
            view.x = parseInt(k) * 191;
        }
        this.JinJiAni._swiss.width = width;
        this.JinJiAni._swiss.centerX = 0;
        Laya.timer.once(2100, this, this.removeJinjiAni);
    };
    MatchPage.prototype.removeJinjiAni = function () {
        if (this.JinJiAni) {
            // this.startAni.stop()
            this.JinJiAni.removeSelf();
            this.JinJiAni = null;
        }
        AnimationManager.instance.animationOver();
    };
    MatchPage.prototype.showMatchStart = function () {
        this.startAni = new ui.matchSign.MatchstartUI();
        var res = "matchSign/ani/matchrstart.png";
        if (BaseGameData.matchInfo.matchStage == 3 && BaseGameData.matchInfo.totalPlayer > BaseGameData.matchInfo.matchSwissPlayer[0]) {
            res = "matchSign/ani/matchrestart.png";
        }
        else if (BaseGameData.matchInfo.matchStage == 4) {
            res = "matchSign/ani/matchfinal.png";
        }
        this.startAni._title.skin = res;
        // this.startAni.loadAnimation(res);
        this.startAni.zOrder = GameZorder.Ani;
        this._table.addChild(this.startAni);
        this.startAni.centerX = 0;
        this.startAni.centerY = 0;
        // this.startAni.pos(Laya.stage.width / 2, Laya.stage.height / 2)
        // this.startAni.play(1, false)
        console.info(BaseGameData.matchInfo.matchSwissPlayer);
        console.info(BaseGameData.matchInfo.matchRounds);
        var width = 0;
        for (var k in BaseGameData.matchInfo.matchSwissPlayer) {
            var v = BaseGameData.matchInfo.matchSwissPlayer[k];
            if (v == 0)
                continue;
            var res_1 = "match/swiss_2.png";
            var fontSize = 24;
            var fontcolor = "#beb2ab";
            console.log("BaseGameData.matchInfo.matchSwissPlayer[BaseGameData.matchInfo.matchRounds || 0]" + BaseGameData.matchInfo.matchSwissPlayer[BaseGameData.matchInfo.matchRounds || 0]);
            if (v >= BaseGameData.matchInfo.matchSwissPlayer[BaseGameData.matchInfo.matchRounds - 1 || 0]) {
                res_1 = "match/swiss_1.png";
                fontcolor = "#820400";
            }
            var view = new laya.ui.Image(res_1);
            var label = new laya.ui.Label(v);
            var line = new laya.ui.Image("match/lianjiexian.png");
            view.addChild(label);
            if (parseInt(k) != BaseGameData.matchInfo.matchSwissPlayer.length - 2) {
                view.addChild(line);
                line.pos(91, 20);
                width = width + 100;
            }
            label.centerX = 0;
            label.y = 5;
            label.fontSize = fontSize;
            label.color = fontcolor;
            this.startAni._swiss.addChild(view);
            width = width + 91;
            view.x = parseInt(k) * 191;
        }
        this.startAni._swiss.width = width;
        this.startAni._swiss.centerX = 0;
        Laya.timer.once(2100, this, this.removeStartAni);
    };
    MatchPage.prototype.removeStartAni = function () {
        if (this.startAni) {
            // this.startAni.stop()
            this.startAni.removeSelf();
            this.startAni = null;
        }
        AnimationManager.instance.animationOver();
    };
    MatchPage.prototype.clearMatchStart = function () {
        Laya.timer.clear(this, this.removeStartAni);
        if (this.startAni) {
            // this.startAni.stop()
            this.startAni.removeSelf();
            this.startAni = null;
        }
        // AnimationManager.instance.animationOver()
    };
    MatchPage.prototype.updateMatchTopInfo = function () {
        if (!BaseGameData.matchInfo.matchStage)
            return;
        if (this.matchTopBg) {
            this.matchTopBg.removeSelf();
            this.matchTopBg = null;
        }
        if (!this.matchTopBg) {
            this.matchTopBg = new ui.match.MatchTopUI();
            this._table.addChild(this.matchTopBg);
        }
        this.matchTopBg.centerX = 0;
        var node = new Laya.Box();
        var offset = 0;
        var xoffset = 20;
        var size = this.matchTopBg.getBounds();
        var yoffset = size.height / 2;
        var stageTxt = ["[预赛]", "[预赛]", "[复赛]", "[决赛]"];
        var stage = BaseGameData.matchInfo.matchStage;
        if (BaseGameData.matchInfo.matchSwissPlayer) {
            if (BaseGameData.matchInfo.totalPlayer == BaseGameData.matchInfo.matchSwissPlayer[0] && stage == 3)
                stage = 1;
            if (!this.matchStage) {
                this.matchStage = new Laya.Label(stageTxt[stage - 1]);
                this.matchStage.width = 200;
                this.matchStage.align = "center";
                this._table.addChild(this.matchStage);
                this.matchStage.centerX = 0;
                this.matchStage.bottom = 200;
                this.matchStage.fontSize = 32;
                this.matchStage.alpha = 0.32;
            }
            else {
                this.matchStage.text = stageTxt[stage - 1];
            }
        }
        if (BaseGameData.matchInfo.matchRounds &&
            BaseGameData.matchInfo.matchRounds > 0 &&
            BaseGameData.matchInfo.matchStage < 4) {
            this.matchStage.text = stageTxt[stage - 1] + " 第" + BaseGameData.matchInfo.matchRounds + "轮";
        }
        if (BaseGameData.matchInfo.matchScore) {
            console.log("BaseGameData.matchInfo.matchScore===============================" + BaseGameData.matchInfo.matchScore);
            this.matchTopBg._score.text = "当前底分：" + BaseGameData.matchInfo.matchScore;
        }
        // if(BaseGameData.matchInfo.matchHandCnt && BaseGameData.selfSeatid){
        //     if(BaseGameData.matchInfo.matchStage < 3){
        //         this.matchHandCnt = new Laya.Label("第"+BaseGameData.matchInfo.matchHandCnt+"局")
        //             node.addChild(this.matchHandCnt)
        //             this.matchHandCnt.pos(offset,yoffset)
        //         size = this.matchHandCnt.getBounds()
        //         offset = offset + size.width + xoffset
        //     }else{
        //         this.matchHandCnt = new Laya.Label("第"+BaseGameData.currHandCount+"/"+BaseGameData.matchInfo.swissRound+"局")
        //             node.addChild(this.matchHandCnt)
        //             this.matchHandCnt.pos(offset,yoffset)
        //         size = this.matchHandCnt.getBounds()
        //         offset = offset + size.width + xoffset
        //     }
        // }
        if (BaseGameData.matchInfo.matchStage < 4) {
            if (BaseGameData.matchInfo.matchStage > 2) {
                // if(BaseGameData.matchInfo.matchRounds && BaseGameData.matchInfo.matchRounds > 0){
                this.matchTopBg._taotai.text = "前" + BaseGameData.matchInfo.matchSwissPlayer[BaseGameData.matchInfo.matchRounds || 1] + "名晋级";
                // }
            }
            else {
                if (BaseGameData.matchInfo.baseScore && BaseGameData.matchInfo.multiple) {
                    this.matchTopBg._taotai.text = "低于" + String(BaseGameData.matchInfo.baseScore * BaseGameData.matchInfo.multiple) + "分将被淘汰";
                }
            }
        }
        else {
            this.matchTopBg._taotai.text = "决赛中";
        }
        if (BaseGameData.matchInfo.matchPlayer > 0) {
            // if(BaseGameData.selfSeatid){
            if (BaseGameData.matchInfo.matchRank && BaseGameData.matchInfo.matchRank > BaseGameData.matchInfo.matchPlayer)
                BaseGameData.matchInfo.matchPlayer = BaseGameData.matchInfo.matchRank;
            this.matchTopBg._rank.text = "当前排名" + (BaseGameData.matchInfo.matchRank || 1) + "/" + BaseGameData.matchInfo.matchPlayer;
            // }else{
            //     this.matchTopBg._rank.text = "剩余"+BaseGameData.matchInfo.matchPlayer+"人对战中"
            // }
        }
    };
    MatchPage.prototype.onMatchInfoNtf = function (msg) {
        // this.joinTableOk = true
        BaseGameData.onMatchInfo(msg);
        if (msg.handsCnt) {
            BaseGameData.matchInfo.matchHandCnt = msg.handsCnt;
        }
        else
            BaseGameData.matchInfo.matchHandCnt = BaseGameData.matchInfo.matchHandCnt;
        if (msg.matchScore)
            BaseGameData.matchInfo.baseScore = msg.matchScore;
        if (msg.swissRound) {
            if (BaseGameData.matchInfo.swissRound && msg.swissRound > BaseGameData.matchInfo.swissRound) {
                AnimationManager.instance.addAnimation(function () {
                    this.showJinji();
                }.bind(this), null);
            }
            BaseGameData.matchInfo.swissRound = msg.swissRound;
        }
        if (!BaseGameData.matchInfo.waiting || BaseGameData.matchInfo.waiting <= 0)
            this.updateMatchTopInfo();
        this.showMatchWait();
    };
    MatchPage.prototype.showMatchWait = function () {
        if (!BaseGameData.matchInfo.waiting || BaseGameData.matchInfo.waiting == 0 || this.isOver
            || DialogManager.instance.hasDialog("MATCH_OUT_WIN") || DialogManager.instance.hasDialog("MATCH_OUT_LOSE"))
            return;
        if (!BaseGameData.matchInfo.matchSwissPlayer)
            return;
        if (BaseGameData.isGameing)
            return;
        BaseGameData.tableid = 0;
        // if self.menuButton then
        //     self.menuButton:setLocalZOrder(DIALOG_ZORDER + 1)
        // end
        if (DialogManager.instance.hasDialog("MATCH_WAIT"))
            DialogManager.instance._dialogList["MATCH_WAIT"].updateMatchInfo();
        else
            AnimationManager.instance.addAnimation(function () {
                var dialog = DialogManager.instance.callDialog("MATCH_WAIT");
                dialog.show();
                if (DialogManager.instance.hasDialog("GAME_END") && DialogManager.instance._dialogList["GAME_END"].updateMatchRoundEnd) {
                    DialogManager.instance._dialogList["GAME_END"].updateMatchRoundEnd();
                    dialog.visible = false;
                }
                AnimationManager.instance.animationOver();
            }, null);
    };
    MatchPage.prototype.onMatchBaseScoreNtf = function (msg) {
        console.log("onMatchBaseScoreNtf=======================");
        BaseGameData.matchInfo.baseScore = msg.score || 0;
        BaseGameData.matchInfo.multiple = msg.multiple || 1;
        BaseGameData.matchInfo.nextUpdateTime = parseInt(msg.nextUpdateTime) || 0;
        BaseGameData.matchInfo.nextBaseScore = parseInt(msg.nextBaseScore) || 0;
        HintCtrl.instance.show("淘汰分涨至 " + BaseGameData.matchInfo.baseScore * BaseGameData.matchInfo.multiple + "  底分涨至" + BaseGameData.matchInfo.baseScore);
        if (this.matchTopBg) {
            this.matchTopBg._taotai.text = "低于" + String(BaseGameData.matchInfo.baseScore * BaseGameData.matchInfo.multiple) + "分将被淘汰";
        }
        // if (!this.matchTimerHandler then
        //     this.matchTimerHandler = scheduler.scheduleGlobal(handler(self, this.checkLeftTimer), 1)
        // end
        //  console.log(msg.nextUpdateTime-server.serverTime)
        //  if(msg.nextUpdateTime-server.serverTime > 0){
        //     Laya.timer.once(Math.abs(msg.nextUpdateTime-server.serverTime)*1000, this, function(){
        //         HintCtrl.instance.show("淘汰分涨至 "+BaseGameData.matchInfo.nextBaseScore*BaseGameData.matchInfo.multiple+"  底分涨至"+BaseGameData.matchInfo.nextBaseScore)
        //         if (this.matchTopBg){
        //             this.matchTopBg._taotai.text = "低于"+String(BaseGameData.matchInfo.baseScore*BaseGameData.matchInfo.multiple)+"分将被淘汰"
        //             // this.matchTopBg._score.text = "当前底分: "+msg.nextBaseScore
        //         }    
        //     })
        //  }
    };
    MatchPage.prototype.onMatchUpdateRankNtf = function (msg) {
        BaseGameData.matchInfo.matchRank = msg.ranking;
        if (BaseGameData.matchInfo.matchRank && BaseGameData.matchInfo.matchRank > BaseGameData.matchInfo.matchPlayer)
            BaseGameData.matchInfo.matchPlayer = msg.ranking;
        if (this.matchTopBg && BaseGameData.selfSeatid)
            this.matchTopBg._rank.text = "当前排名" + BaseGameData.matchInfo.matchRank + "/" + BaseGameData.matchInfo.matchPlayer;
        this.showMatchWait();
    };
    MatchPage.prototype.onMatchKickOutNtf = function (msg) {
        if (msg.uid == server.uid) {
            if (DialogManager.instance.hasDialog("MATCH_WAIT")) {
                DialogManager.instance.removeDialog("MATCH_WAIT");
            }
            this.isOver = true;
            BaseGameData.matchInfo.matchRank = msg.ranking;
            AnimationManager.instance.addAnimation(function () {
                // let dialog = DialogManager.instance.callDialog("MATCH_OUT",msg.ranking)
                // dialog.show(msg.ranking)
                // dialog.onCloseView(this.exitGame)
                if (DialogManager.instance.hasDialog("MATCH_WAIT")) {
                    DialogManager.instance.removeDialog("MATCH_WAIT");
                }
                if (DialogManager.instance.hasDialog("GAME_END")) {
                    //  DialogManager.instance._dialogList["GAME_END"].updateMatchRoundEnd()
                    //  dialog.visible = false
                    if (BaseGameData.matchInfo.matchStage > 2) {
                        Laya.timer.once(2000, this, function () {
                            this.playMathOut(msg);
                            DialogManager.instance.removeDialog("GAME_END");
                        });
                    }
                    else {
                        this.playMathOut(msg);
                        DialogManager.instance.removeDialog("GAME_END");
                    }
                }
                else {
                    this.playMathOut(msg);
                }
            }.bind(this), null);
        }
        BaseGameData.matchInfo.matchPlayer = msg.playerCnt;
        if (BaseGameData.matchInfo.matchRank && BaseGameData.matchInfo.matchRank > BaseGameData.matchInfo.matchPlayer) {
            BaseGameData.matchInfo.matchPlayer = BaseGameData.matchInfo.matchRank;
        }
    };
    MatchPage.prototype.playMathOut = function (msg) {
        DialogManager.instance.removeDialog("MATCH_WAIT");
        var player = RoleManager.getRole(server.uid);
        BaseGameData.matchReward = msg.reward || 0;
        BaseGameData.matchTitle = matchSign.MatchSignData.getInfoByCode(parseInt(this.serverCode)).mrule.title;
        var info = { a: "", u: "", n: "", r: 0, t: "", s: 1, d: 0 };
        if (player) {
            info.a = player.avatar;
            info.n = player.nickname;
            info.u = String(server.uid);
            info.r = BaseGameData.matchInfo.matchRank;
            info.t = BaseGameData.matchTitle;
            info.s = BaseGameData.matchInfo.matchStage;
            info.d = BaseGameData.matchReward;
        }
        var text = JSON.stringify(info);
        msg.info = text;
        msg.code = this.serverCode;
        msg.title = BaseGameData.matchTitle;
        if (BaseGameData.matchInfo.matchStage < 3) {
            var dialog = DialogManager.instance.callDialog("MATCH_OUT_LOSE");
            dialog.show(msg);
            AnimationManager.instance.animationOver();
            server.code = "";
            server.close();
            LoadingUI.instance.hide();
        }
        else {
            var dialog = DialogManager.instance.callDialog("MATCH_OUT_WIN");
            dialog.show(msg);
            Laya.timer.once(4000, this, function () {
                AnimationManager.instance.animationOver();
            });
        }
    };
    MatchPage.prototype.back = function () {
        if (this.matchOut) {
            this.matchOut.removeSelf();
            this.matchOut = null;
        }
        _super.prototype.back.call(this);
    };
    MatchPage.prototype.share = function () {
        Native.instance.share(2, 0);
    };
    MatchPage.prototype.onMatchOverNtf = function (msg) {
        AnimationManager.instance.addAnimation(function () {
            var dialog = DialogManager.instance.callDialog("MATCH_OVER");
            msg.code = this.serverCode;
            var player = RoleManager.getRole(server.uid);
            var info = { a: "", u: "", n: "", r: 0, t: "", s: 1, d: 0 };
            if (player) {
                info.a = player.avatar;
                info.n = player.nickname;
                info.u = String(server.uid);
                info.r = BaseGameData.matchInfo.matchRank;
                info.t = BaseGameData.matchTitle;
                info.s = BaseGameData.matchInfo.matchStage;
                info.d = BaseGameData.matchReward;
            }
            var text = JSON.stringify(info);
            msg.info = text;
            dialog.show(msg);
            if (DialogManager.instance.hasDialog("MATCH_OUT_WIN")) {
                dialog.visible = false;
                DialogManager.instance._dialogList["MATCH_OUT_WIN"].matchOver();
            }
            server.code = "";
            server.close();
            LoadingUI.instance.hide();
            AnimationManager.instance.animationOver();
        }.bind(this), null);
        //--------------------------主动断开连接 zhc新增-------------
    };
    MatchPage.prototype.onMsgMatchInfoNtf = function (msg) {
        if (msg.type == 1) {
        }
        if (msg.type == 2) {
            HintCtrl.instance.show("请勿消极比赛，可能被直接淘汰");
        }
    };
    MatchPage.prototype.onMatchRecordRep = function (msg) {
        if (!msg.playerInfo)
            return;
        var playersInfo = msg.playerInfo;
        // self:checkPlayer(playersInfo)
        if (DialogManager.instance.hasDialog("MATCH_RECORD")) {
            DialogManager.instance._dialogList["MATCH_RECORD"].show(msg);
        }
    };
    return MatchPage;
}(TablePage));
//# sourceMappingURL=MatchPage.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BaseMJPage = /** @class */ (function (_super) {
    __extends(BaseMJPage, _super);
    function BaseMJPage() {
        var _this = _super.call(this) || this;
        _this.name = "BaseMJPage";
        _this._loadDatas = _this._loadDatas.concat([{ url: ResourceConfig.SHEET_OPT, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_TIME_LIMIT, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_CARD, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_CARD_1, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_CARD_2, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_CARD_3, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_CARD_4, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_CARD_5, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_DICE, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_GAME_END, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_TING, type: Laya.Loader.ATLAS }
        ]);
        AppPage.register(BaseMJPage, _this._loadDatas);
        DialogManager.instance.addDialog("GPS_TIP", BaseGpsTip);
        return _this;
    }
    BaseMJPage.prototype.init = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        BaseGameData.tablelayout = MaJiangLayOut;
        _super.prototype.init.apply(this, params);
        // this.initGameUI()
        this.initEvent();
        if (BaseGameData.isRecord) {
            this.PlaySheet();
        }
        // BaseFoldCardManager.instance._foldType = 0
        // if(Laya.stage.width/Laya.stage.height < 8/5){
        //     Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_WIDTH;
        //     AppControl.getInstance().stage.width = 1024;
        // }else{
        //     Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_HEIGHT;
        //     AppControl.getInstance().stage.height = 640;
        // }
        // Laya.stage.setScreenSize(Laya.Browser.clientWidth * Laya.Browser.pixelRatio, Laya.Browser.clientHeight * Laya.Browser.pixelRatio);
        //this.setBg();
        Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_WIDTH;
        AppControl.getInstance().stage.width = 1280;
        Laya.stage.setScreenSize(Laya.Browser.clientWidth * Laya.Browser.pixelRatio, Laya.Browser.clientHeight * Laya.Browser.pixelRatio);
        this._tablePop.centerY = 0;
        this._tablePop.anchorX = 0.5;
        this._tablePop.anchorY = 0.5;
        this._table.anchorX = 0.5;
        this._table.anchorY = 0.5;
        this._table.centerY = 0;
        EventManager.instance.registerOnObject(this, AppControl.getInstance().stage, Laya.Event.RESIZE, this, this.onResize);
    };
    BaseMJPage.prototype.initGameUI = function () {
        this.initCardLayout();
        this.initGameView();
    };
    BaseMJPage.prototype.initGameView = function () {
        this.clearGameUI();
        this.clearGame();
        this.initCardsView();
        if (!this._leftView) {
            this._leftView = new LeftCardView();
            this._table.addChild(this._leftView);
            this._leftView.centerX = -250;
            this._leftView.centerY = -180;
            if (!BaseGameData.isTableStart)
                this._leftView.visible = false;
        }
    };
    BaseMJPage.prototype.showDice = function (dices) {
        SoundManager.instance.playEffect("saizi", 0, 1, false, 1, true);
        this._dice = new ui.mj.DiceViewUI();
        this._table.addChild(this._dice);
        this._dice.pos(Laya.stage.width / 2, Laya.stage.height / 2);
        this._dice.ani1.play(1, false);
        this._dice._dice_1.play();
        this._dice._dice_2.play();
        Laya.timer.once(1000, this, function () {
            this._dice.ani1.stop();
            this._dice._dice_1.stop();
            this._dice._dice_1.visible = false;
            var dice1 = new Laya.Image("dice/Dice_" + dices[0] + ".png");
            this._dice.addChild(dice1);
            dice1.pos(this._dice._dice_1.x, this._dice._dice_1.y);
            this._dice._dice_2.stop();
            this._dice._dice_2.visible = false;
            var dice2 = new Laya.Image("dice/Dice_" + dices[1] + ".png");
            this._dice.addChild(dice2);
            dice2.pos(this._dice._dice_2.x, this._dice._dice_2.y);
            Laya.timer.once(1000, this, function () {
                this._dice.removeChildren();
                this._dice.removeSelf();
                AnimationManager.instance.animationOver();
            });
        });
    };
    BaseMJPage.prototype.clearGameUI = function () {
        // GameEndCtrl.instance.hide()
        DialogManager.instance.clearAll();
        //DialogManager.instance.clearAllBut("GPS_TIP")
        this.clearCardsView();
        if (this._liuju) {
            this._liuju.ani1.stop();
            this._liuju.removeSelf();
            this._liuju = null;
        }
        if (this._foldBigCard) {
            this._foldBigCard.removeSelf();
            this._foldBigCard = null;
        }
        if (this._timeLimit) {
            this._timeLimit.clean();
            this._timeLimit.removeSelf();
            this._timeLimit = null;
        }
        if (this._arror) {
            this._arror.stop();
            this._arror.removeSelf();
            this._arror = null;
        }
        if (this._optChoice) {
            this._optChoice.clearUI();
            this._optChoice.removeSelf();
            this._optChoice = null;
        }
        if (this._foldBigCard) {
            this._foldBigCard.removeSelf();
            this._foldBigCard = null;
        }
        if (this._chooseView) {
            this._chooseView.removeSelf();
            this._chooseView = null;
        }
        if (BaseGameData.moveCard) {
            BaseGameData.moveCard.removeSelf();
            BaseGameData.moveCard = null;
        }
        if (this._waitTips) {
            this._waitTips.removeSelf();
            this._waitTips = null;
        }
        // if(this._ruleView){
        //     this._ruleView.removeSelf()
        //     this._ruleView = null
        // }
    };
    BaseMJPage.prototype.clearGame = function () {
        BaseGameData.optSeatid = 0;
        BaseGameData.winDetailArr = [];
        BaseGameData.winDetailObj = {};
        BaseGameData.loseDetailArr = [];
        BaseGameData.loseDetailObj = {};
        BaseGameData.winCard = 0;
        BaseGameData.winSeatid = 0;
        this._lastCard = null;
        this._lastSeatid = null;
    };
    BaseMJPage.prototype.optCardReq = function (opttype, cardsInfo) {
        // if _gameDataMgr.clearTingCard then
        //     _gameDataMgr:clearTingCard()
        // end
        if (opttype == GameDef.OptType.MJ_TING) {
            var handCards = BaseGameData.getPlayerDataBySeatid(BaseGameData.selfSeatid).handCards;
            for (var k in handCards) {
                var card = handCards[k];
                if (card % 100 == cardsInfo[0] % 100) {
                    cardsInfo[0] = card;
                    break;
                }
            }
        }
        BaseTingCardManager.instance.clearAll();
        BaseHandCardManager.instance.clearArror(BaseGameData.selfSeatid);
        if (this._optChoice) {
            this._optChoice.clearUI();
        }
        this.hideFoldBigCard();
        server.playerOptReq({ opttype: opttype, cards: cardsInfo || [] });
    };
    BaseMJPage.prototype.foldCard = function (opttype, card) {
        if (!BaseGameData.optSeatid)
            return;
        console.log(BaseHandCardManager.instance.getHandCardViews(BaseGameData.optSeatid) % 3);
        if (opttype == GameDef.OptType.MJ_DISCARD) {
            if (BaseHandCardManager.instance.getHandCardViews(BaseGameData.optSeatid) % 3 == 2) {
                this.foldCardAni(BaseGameData.optSeatid, card);
                this.optCardReq(0, [card]);
                BaseGameData.optSeatid = null;
            }
        }
        else {
            this.optCardReq(opttype, [card]);
        }
    };
    BaseMJPage.prototype.initCardLayout = function () {
        TableLayout.foldCardLayouts = [[], [{ x: 0, y: 127.5 },
                { x: 169.5, y: -130 },
                { x: 0, y: -160 },
                { x: -179, y: 98.5 },],
            [{ x: 135, y: 134 },
                { x: 161, y: -134 },
                { x: -126, y: -160 },
                { x: -160, y: 105 },], [
                { x: 135, y: 134 },
                { x: 161, y: -134 },
                { x: -134, y: -166 },
                { x: -160, y: 105 },
            ]
        ];
        TableLayout.handCardLayouts = [
            { x: 900, y: 20 },
            { x: 106, y: -100 },
            { x: -20, y: 40 },
            { x: 127, y: 300 },
        ];
        TableLayout.holdCardLayouts = [
            { x: -270, y: 20 },
            { x: 110, y: Laya.stage.height - 150 },
            { x: 320, y: 33 },
            { x: 102, y: 40 },
        ];
        TableLayout.winCardLayouts = [
            { x: 890, y: 20 },
            { x: 106, y: 23 },
            { x: -20, y: 40 },
            { x: 127, y: 300 },
        ];
        TableLayout.FOLD_BIG_CARD = [
            { x: 360, y: Laya.stage.height / 2 - 100 },
            { x: 0, y: 100 },
            { x: -340, y: Laya.stage.height / 2 - 100 },
        ];
        TableLayout.OTHER_OPT_POS = [
            { x: 0, y: Laya.stage.height - 200 },
            { x: 350, y: Laya.stage.height / 2 },
            { x: 0, y: 100 },
            { x: -340, y: Laya.stage.height / 2 },
        ];
    };
    BaseMJPage.prototype.clearCardsView = function () {
        BaseHandCardManager.instance.clearAll();
        BaseFoldCardManager.instance.clearAll();
        BaseHoldCardManager.instance.clearAll();
        BaseWinCardManager.instance.clearAll();
        // WinCardManager:clearAll()
        // TingCardManager:clearAll()
        // FlowerCardManager:clearAll()
    };
    BaseMJPage.prototype.initCardsView = function () {
        if (BaseFoldCardManager.instance._foldType > 0) {
            var foldView = BaseFoldCardManager.instance.addFoldCardView(0, 0);
            if (foldView) {
                this._table.addChild(foldView);
                foldView.centerX = 0;
                foldView.centerY = 2;
                foldView.zOrder = GameZorder.HandCardView1 - 1;
                // foldView.pos(foldPos.x, foldPos.y)
                // foldView:addTo(self,FOLD_CARD_ZORDER):pos(foldCardLayouts[v.dir].x, foldCardLayouts[v.dir].y)
            }
        }
        for (var k in BaseGameData.players) {
            var player = BaseGameData.players[k];
            var handPos = TableLayout.handCardLayouts[player.dir - 1];
            var foldPos = TableLayout.foldCardLayouts[BaseGameData.maxPlayer - 1][player.dir - 1];
            var holdPos = TableLayout.holdCardLayouts[player.dir - 1];
            var winPos = TableLayout.winCardLayouts[player.dir - 1];
            if (BaseFoldCardManager.instance._foldType == 0) {
                var foldView = BaseFoldCardManager.instance.addFoldCardView(player.seatid, player.dir);
                if (foldView) {
                    this._table.addChild(foldView);
                    foldView.centerX = foldPos.x;
                    foldView.centerY = foldPos.y;
                    foldView.zOrder = 6 - player.dir;
                    if (player.dir == 4) {
                        foldView.zOrder = 6;
                    }
                    // foldView.pos(foldPos.x, foldPos.y)
                    // foldView:addTo(self,FOLD_CARD_ZORDER):pos(foldCardLayouts[v.dir].x, foldCardLayouts[v.dir].y)
                }
            }
            var handView = BaseHandCardManager.instance.addHandCardView(player.seatid, player.dir, this.foldCard.bind(this));
            if (handView) {
                this._table.addChild(handView);
                if (player.dir == 1) {
                    if (Laya.stage.width / Laya.stage.height < 8 / 5) {
                        // handView.scale(0.8,0.8)
                        // let scale = Laya.stage.width/1024
                        var scale = 1;
                        handView.bottom = handPos.y;
                        handView.centerX = handPos.x * (1 - (1 - scale) / 2);
                    }
                    else {
                        handView.centerX = handPos.x;
                        handView.bottom = handPos.y;
                    }
                    handView.zOrder = GameZorder.HandCardView1;
                }
                else if (player.dir == 2) {
                    handView.right = Laya.stage.width > 1280 ? (Laya.stage.width - 1280) / 2 + handPos.x : handPos.x;
                    handView.centerY = handPos.y;
                }
                else if (player.dir == 3) {
                    handView.centerX = handPos.x;
                    handView.y = handPos.y;
                    var index = this._table.getChildIndex(handView);
                    // this._table.setChildIndex(handView,index-9)
                }
                else {
                    handView.left = Laya.stage.width > 1280 ? (Laya.stage.width - 1280) / 2 + handPos.x : handPos.x;
                    handView.centerY = handPos.y;
                }
                if (player.dir == 1 && BaseGameData.isRecord == 0) {
                    handView.initTouch();
                }
                // handView.pos(handPos.x,handPos.y)
                // handView.pos()
                // handView:addTo(self,HAND_CARD_ZORDER):pos(handCardLayouts[v.dir].x, handCardLayouts[v.dir].y)
            }
            var holdView = BaseHoldCardManager.instance.addHoldCardView(player.seatid, player.dir);
            if (holdView) {
                this._table.addChild(holdView);
                // holdView.centerX = holdPos.x
                // holdView.y = holdPos.y
                if (player.dir == 1) {
                    if (Laya.stage.width / Laya.stage.height < 8 / 5) {
                        // handView.scale(0.8,0.8)
                        var scale = Laya.stage.width / 1024;
                        holdView.left = Laya.stage.width > 1280 ? (Laya.stage.width - 1280) / 2 + 10 : 10;
                    }
                    else {
                        holdView.centerX = holdPos.x;
                    }
                    holdView.bottom = holdPos.y;
                }
                else if (player.dir == 2) {
                    holdView.right = Laya.stage.width > 1280 ? (Laya.stage.width - 1280) / 2 + holdPos.x : holdPos.x;
                    holdView.y = holdPos.y;
                }
                else if (player.dir == 3) {
                    holdView.centerX = holdPos.x;
                    holdView.y = holdPos.y;
                }
                else {
                    holdView.left = Laya.stage.width > 1280 ? (Laya.stage.width - 1280) / 2 + holdPos.x : holdPos.x;
                    holdView.y = holdPos.y;
                }
                // let order = v.dir == 4 and FOLD_CARD_ZORDER or HAND_CARD_ZORDER
                // holdView:addTo(self,order):pos(holdCardLayouts[v.dir].x, holdCardLayouts[v.dir].y)
            }
            var winView = BaseWinCardManager.instance.addWinCardView(player.seatid, player.dir);
            if (winView) {
                this._table.addChild(winView);
                if (player.dir == 1) {
                    if (Laya.stage.width / Laya.stage.height < 8 / 5) {
                        // handView.scale(0.8,0.8)
                        // let scale = Laya.stage.width/1024
                        var scale = 1;
                        winView.bottom = handPos.y;
                        winView.centerX = winPos.x * (1 - (1 - scale) / 2);
                    }
                    else {
                        winView.centerX = winPos.x;
                        winView.bottom = winPos.y;
                    }
                }
                else if (player.dir == 2) {
                    if (Laya.stage.width <= 1280) {
                        winView.right = winPos.x;
                        winView.y = winPos.y;
                    }
                    else {
                        winView.centerX = 512;
                        winView.y = winPos.y;
                    }
                }
                else if (player.dir == 3) {
                    winView.centerX = winPos.x;
                    winView.y = winPos.y;
                }
                else {
                    winView.left = Laya.stage.width > 1280 ? (Laya.stage.width - 1280) / 2 + winPos.x : winPos.x;
                    winView.centerY = handPos.y;
                }
            }
        }
        BaseTingCardManager.instance.initBaseView(this._table);
    };
    BaseMJPage.prototype.initEvent = function () {
        _super.prototype.initEvent.call(this);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_PLAYER_OPT_NTF, this, this.onPlayerOptNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_PLAYER_OPT_REP, this, this.onPlayerOptRepHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_CARD_MOVE_NTF, this, this.onCardMoveNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_GAME_START_NTF, this, this.onGameStartNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_GAME_END_NTF, this, this.onGameEndNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_SHOW_CARDS_NTF, this, this.onShowCardsNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_RECONNECT_INFO, this, this.onReconnectNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_SHOW_INFO_NTF, this, this.onShowInfoNtfHandler);
        EventManager.instance.registerOnObject(this, server, EventNames.GAME_DETAIL_NTF, this, this.onDetailNtfHandler);
        EventManager.instance.registerOnObject(this, server, "game.updateTable", this, this.updateTable);
        // EventManager.instance.registerOnObject(this, AppControl.getInstance().stage, Laya.Event.RESIZE, this, this.onResize);
    };
    BaseMJPage.prototype.onResize = function (e) {
        _super.prototype.onResize.call(this, e);
        // if (this._ruleView) {
        //     this._ruleView.width = this._table.width
        //     this._ruleView.height = this._table.height
        // }
        if (!this._scale || Laya.stage.width / Laya.stage.height != this._scale) {
            if (!this._scale)
                this._scale = Laya.stage.width / Laya.stage.height;
            if (Laya.stage.width / Laya.stage.height < 8 / 5) {
                Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_WIDTH;
                //20180322  屏蔽麻将重新设置舞台宽，保证分辨率为1280X720
                AppControl.getInstance().stage.width = 1024;
            }
            else {
                Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_HEIGHT;
                AppControl.getInstance().stage.height = 640;
            }
            this._scale = Laya.stage.width / Laya.stage.height;
            Laya.stage.setScreenSize(Laya.Browser.clientWidth * Laya.Browser.pixelRatio, Laya.Browser.clientHeight * Laya.Browser.pixelRatio);
        }
        this.updateArrorPos(BaseGameData.lastSeatid);
        for (var k in BaseGameData.players) {
            var player = BaseGameData.players[k];
            if (player.dir == 2) {
                var handview2 = BaseHandCardManager.instance.handCardsViews[player.seatid];
                if (handview2) {
                    var handPos = TableLayout.handCardLayouts[1];
                    handview2.right = Laya.stage.width > 1280 ? (Laya.stage.width - 1280) / 2 + handPos.x : handPos.x;
                    console.log("handview2===================" + handview2.right);
                }
                var holdview2 = BaseHoldCardManager.instance.holdCardsViews[player.seatid];
                if (holdview2) {
                    var holdPos = TableLayout.holdCardLayouts[1];
                    holdview2.right = Laya.stage.width > 1280 ? (Laya.stage.width - 1280) / 2 + holdPos.x : holdPos.x;
                }
                var winview2 = BaseWinCardManager.instance.winCardsViews[player.seatid];
                if (winview2) {
                    var winPos = TableLayout.winCardLayouts[1];
                    winview2.right = Laya.stage.width > 1280 ? (Laya.stage.width - 1280) / 2 + winPos.x : winPos.x;
                }
            }
            if (player.dir == 4) {
                var handview4 = BaseHandCardManager.instance.handCardsViews[player.seatid];
                if (handview4) {
                    var handPos = TableLayout.handCardLayouts[3];
                    handview4.left = Laya.stage.width > 1280 ? (Laya.stage.width - 1280) / 2 + handPos.x : handPos.x;
                    console.log("handview4===================" + handview4.left);
                }
                var holdview4 = BaseHoldCardManager.instance.holdCardsViews[player.seatid];
                if (holdview4) {
                    var holdPos = TableLayout.holdCardLayouts[3];
                    holdview4.left = Laya.stage.width > 1280 ? (Laya.stage.width - 1280) / 2 + holdPos.x : holdPos.x;
                }
                var winview4 = BaseWinCardManager.instance.winCardsViews[player.seatid];
                if (winview4) {
                    var winPos = TableLayout.winCardLayouts[3];
                    winview4.left = Laya.stage.width > 1280 ? (Laya.stage.width - 1280) / 2 + winPos.x : winPos.x;
                }
            }
            if (this._ruleView) {
                this._ruleView.left = AppControl.getInstance().stage.width > TableLayout.STAGE.width ? (AppControl.getInstance().stage.width - TableLayout.STAGE.width) / 2 + 10 : 10;
            }
            //  let holdview1 = BaseHoldCardManager.instance.holdCardsViews[1]
            // if(holdview1){
            //     let holdPos = TableLayout.holdCardLayouts[0]
            //      if (Laya.stage.width/Laya.stage.height < 8/5){
            //         // handView.scale(0.8,0.8)
            //         let scale = Laya.stage.width/1024
            //         holdview1.centerX = NaN
            //         holdview1.left = 10
            //     }else{
            //         holdview1.left = NaN
            //         holdview1.centerX = holdPos.x
            //     }
            // }
        }
        // let handView = BaseHandCardManager.instance.handCardsViews[1]
        // if(handView){
        //     let handPos = TableLayout.handCardLayouts[0]
        //     if (Laya.stage.width/Laya.stage.height < 8/5){
        //         let scale = Laya.stage.width/1024
        //         handView.bottom = 0
        //         handView.centerX = handPos.x*(1-(1-scale)/2)
        //     }else{
        //         handView.centerX = handPos.x
        //         handView.bottom = handPos.y
        //     }
        // }
        this._menu._btnMatchRecord.right = this._menu._btnMenu.right;
        this._menu._btnMatchRecord.top = this._menu._btnChat.top;
    };
    BaseMJPage.prototype.onTableInfoNtfHandler = function (msg) {
        if (!BaseGameData.isRecord) {
            _super.prototype.onTableInfoNtfHandler.call(this, msg);
        }
        if (this._timeLimit) {
            this._timeLimit.clean();
            this._timeLimit.removeSelf();
            this._timeLimit = null;
        }
        // if(this._ruleView){
        //     this._ruleView.removeSelf()
        //     this._ruleView = null
        // }
        AnimationManager.instance.endAnimations();
    };
    BaseMJPage.prototype.onGameStartNtfHandler = function (msg) {
        _super.prototype.onGameStartNtfHandler.call(this, msg);
        this.setTableInfo(); //zhc新增
        AnimationManager.instance.endAnimations();
        if (this._ruleView) {
            this._ruleView.updateRound();
        }
        this.initGameUI();
        if (this._leftView) {
            this._leftView.visible = false;
        }
    };
    BaseMJPage.prototype.onGameEndNtfHandler = function (msg) {
        _super.prototype.onGameEndNtfHandler.call(this, msg);
        if (this._waitTips) {
            this._waitTips.alpha = 0;
        }
        if (this._timeLimit) {
            this._timeLimit.clean();
            this._timeLimit.removeSelf();
            this._timeLimit = null;
        }
        if (this._foldBigCard) {
            this._foldBigCard.removeSelf();
            this._foldBigCard = null;
        }
        Laya.timer.once(150, this, function () {
            var dialog = DialogManager.instance.callDialog("GAME_END", msg.scores, msg.tableEnd, msg.winType);
            dialog.show(msg.scores, msg.tableEnd, msg.winType);
            dialog.left = 10;
            dialog.right = 10;
            dialog.top = 10;
            dialog.bottom = 10;
            dialog.centerX = 0;
            dialog.centerY = 0;
        });
    };
    BaseMJPage.prototype.setHandCards = function () {
        for (var k in BaseGameData.players) {
            var player = BaseGameData.players[k];
            if (player.handCards) {
                // if (player.seatid == BaseGameData.selfSeatid || BaseGameData.isRecord == 1){
                BaseHandCardManager.instance.updateHandCards(player.seatid, player.handCards, player.handCards.length);
                // }else
                //     _handCardManager:updateHandCards(v.seatid,_gameDataMgr:getHandCardsCount(v.seatid))
                // end
            }
        }
    };
    BaseMJPage.prototype.setFoldCards = function () {
        if (BaseFoldCardManager.instance._foldType > 0) {
            BaseFoldCardManager.instance.updateFoldCards(0, BaseGameData.discards);
        }
        else {
            for (var k in BaseGameData.players) {
                var player = BaseGameData.players[k];
                if (player.foldCards && player.foldCards.length > 0) {
                    BaseFoldCardManager.instance.updateFoldCards(player.seatid, player.foldCards);
                }
            }
        }
    };
    BaseMJPage.prototype.setHoldCards = function () {
        for (var k in BaseGameData.players) {
            var player = BaseGameData.players[k];
            if (player.holdCards && player.holdCards.length > 0) {
                BaseHoldCardManager.instance.updateHoldCards(player.seatid, player.holdCards);
            }
        }
    };
    BaseMJPage.prototype.onShowInfoNtfHandler = function (msg) {
        var _this = this;
        switch (msg.type) {
            case GameDef.ShowInfoType.SHOW_DICE:
                if (msg.animation == 1 && !msg.noAni) {
                    AnimationManager.instance.addAnimation(function () {
                        _this.showDice(msg.info);
                    }, null);
                }
                else {
                }
                break;
            case GameDef.ShowInfoType.SHUFFLE_CARD:
                if (msg.noAni)
                    return;
                if (BaseGameData.selfSeatid == msg.seatid[0]) {
                    AnimationManager.instance.addAnimation(function () {
                        BaseHandCardManager.instance.shuffleCards(BaseGameData.selfSeatid, function () {
                            AnimationManager.instance.animationOver();
                        });
                    }, null);
                }
                break;
            case GameDef.ShowInfoType.DEAL_CARDS:
                this.playDealCard(msg);
                break;
            case GameDef.ShowInfoType.WIN_DEATIL:
                this.playWinDetail(msg);
                break;
            case GameDef.ShowInfoType.WIN_TYPE:
                this.playWinType(msg.info);
                break;
            case GameDef.ShowInfoType.CALL_SCORE:
                this.updatePao(msg.info);
                break;
            case GameDef.ShowInfoType.DRAW_SHIFTER:
                this.showDrawShifter(msg);
                break;
            case GameDef.ShowInfoType.GEN_PAI:
                if (msg.animation) {
                    this.genpai(msg.info);
                }
                break;
            case GameDef.ShowInfoType.ZUIHOU4:
                HintCtrl.instance.show("最后四张");
                break;
            case GameDef.ShowInfoType.MNGANG:
                break;
            case GameDef.ShowInfoType.ANGANG:
                break;
            case GameDef.ShowInfoType.PENGGANG:
                break;
            case GameDef.ShowInfoType.CANCELGANG:
                break;
            case GameDef.ShowInfoType.BAO_TING:
                var index = msg.info.indexOf(BaseGameData.selfSeatid);
                if (index >= 0) {
                    BaseHandCardManager.instance.clearTouch(BaseGameData.selfSeatid);
                }
                for (var k in msg.info) {
                    var v = msg.info[k];
                    PlayerManager.instance._players[v].showTing();
                }
                if (msg.animation) {
                    this.playOptSound(GameDef.OptType.MJ_TING, msg.info[0]);
                    this.playOtherOptAni(GameDef.OptType.MJ_TING, msg.info[0]);
                }
                break;
        }
    };
    BaseMJPage.prototype.genpai = function (info) {
        var genpai = new Laya.Animation();
        var res = "";
        if (info[0] == 2) {
            // genpai.loadAnimation(ResourceConfig.ANI_GEN_PAI);
            res = ResourceConfig.ANI_GEN_PAI;
        }
        else if (info[0] == 1) {
            // genpai.loadAnimation(ResourceConfig.ANI_GEN_CAI_SHEN);
            res = ResourceConfig.ANI_GEN_CAI_SHEN;
        }
        // genpai.zOrder = GameZorder.Ani
        // this._table.addChild(genpai)
        // genpai.pos(Laya.stage.width/2,Laya.stage.height/2)
        // genpai.play(1,false)
        // Laya.timer.once(1000,this,function(){
        //     genpai.stop()
        //     genpai.removeSelf()
        // })
        AniEffectManager.instance.playEffectOnce(this._table, res, 1000, { x: Laya.stage.width / 2, y: Laya.stage.height / 2 }, function () {
            AnimationManager.instance.animationOver();
        }.bind(this));
        // HintCtrl.instance.show("跟圈")
    };
    BaseMJPage.prototype.showDrawShifter = function (info) {
        var _this = this;
        BaseGameData.SHIFTER_NUM = info.info[0] % 100;
        if (info.noAni) {
            if (this._leftView) {
                this._leftView.visible = true;
                this._leftView.updateShifter();
            }
            else {
                this._leftView = new LeftCardView();
                this._table.addChild(this._leftView);
                this._leftView.centerX = -250;
                this._leftView.centerY = -180;
                this._leftView.updateShifter();
            }
            return;
        }
        if (info.animation) {
            BaseGameData.leftCard = BaseGameData.leftCard - 1;
            AnimationManager.instance.addAnimation(function () {
                _this._drawShifter = new ui.mj.CaishenUI();
                _this._drawShifter._cai._bg.skin = "card/5/" + (info.info[0] % 100) + ".png";
                _this._drawShifter._cai._back.visible = false;
                _this._drawShifter.centerX = 0;
                _this._drawShifter.centerY = -100;
                _this._table.addChild(_this._drawShifter);
                _this._drawShifter.zOrder = GameZorder.Ani;
                _this._drawShifter.ani1.play(1, false);
                Laya.timer.once(1500, _this, function () {
                    this._leftView.visible = true;
                    this._leftView.updateShifter();
                    this._drawShifter.ani1.stop();
                    this._drawShifter.removeSelf();
                    AnimationManager.instance.animationOver();
                });
            }, null);
        }
        else {
            if (this._leftView) {
                this._leftView.visible = true;
                this._leftView.updateShifter();
            }
            else {
                this._leftView = new LeftCardView();
                this._table.addChild(this._leftView);
                this._leftView.centerX = -250;
                this._leftView.centerY = -180;
                this._leftView.updateShifter();
            }
        }
    };
    BaseMJPage.prototype.onDetailNtfHandler = function (msg) {
        if (msg.detailType == GameDef.DETAIL_TYPE.WIN_DEATIL) {
            this.playWinDetail(msg.playerInfo);
        }
        else if (msg.detailType == GameDef.DETAIL_TYPE.SHOW_RULE) {
            // if(!GameConfig.IS_MATCH)
            this.showRule(msg.playerInfo);
        }
        else if (msg.detailType == 101) {
            this.showRule(msg.playerInfo);
        }
        else if (msg.detailType == GameDef.DETAIL_TYPE.LOSE_DETAIL) {
            BaseGameData.saveLoseDetail(msg.playerInfo);
        }
    };
    BaseMJPage.prototype.onStageTouch = function (e) {
        _super.prototype.onStageTouch.call(this, e);
        if (e.type == Laya.Event.CLICK) {
            switch (e.target.name) {
                case "ruleBtn":
                    break;
                default:
                    if (this._ruleView) {
                        this._ruleView.hideRule();
                    }
                    break;
            }
        }
    };
    BaseMJPage.prototype.showRule = function (info) {
        if (BaseGameData.isRecord) {
            if (this._ruleView) {
                this._ruleView.removeSelf();
                this._ruleView = null;
            }
        }
        if (!this._ruleView) {
            this._ruleView = new RuleInfoView(info[0].info);
            this._ruleView.top = 10;
            this._ruleView.left = AppControl.getInstance().stage.width > TableLayout.STAGE.width ? (AppControl.getInstance().stage.width - TableLayout.STAGE.width) / 2 + 10 : 10;
            this._tablePop.addChild(this._ruleView);
            this._ruleView._ruleBtn.top = 10;
            this._ruleView._ruleBtn.centerX = -250;
        }
    };
    BaseMJPage.prototype.updatePao = function (msg) {
        if (this._chooseView) {
            this._chooseView.removeSelf();
            this._chooseView = null;
        }
        BaseGameData.updatePao(msg);
        // let view = new BaseChooseScore(this.optCardReq.bind(this), msg)
        // this._table.addChild(view)
    };
    BaseMJPage.prototype.playWinType = function (info) {
        var _this = this;
        AnimationManager.instance.addAnimation(function () {
            if (info[0] > 0) {
                if (info[0] == GameDef.MJ_WIN_TYPE.WIN_ALL) {
                    SoundManager.instance.playEffect("zimo", 1);
                }
                else {
                    SoundManager.instance.playEffect("hu", 1);
                }
                for (var i = 1; i < info.length; i++) {
                    var winSeatid = info[i];
                    // let hu = new Laya.Animation();
                    // hu.loadAnimation(ResourceConfig.ANI_HU);
                    // hu.zOrder = GameZorder.Ani
                    // this._table.addChild(hu)
                    var dir = Utils.getDir(winSeatid);
                    // hu.x = this._table.width/2 + TableLayout.OTHER_OPT_POS[dir-1].x
                    // hu.y = TableLayout.OTHER_OPT_POS[dir-1].y
                    // hu.play(1,false)
                    // Laya.timer.once(1000,this,function(){
                    //     hu.stop()
                    //     hu.removeSelf()
                    //     AnimationManager.instance.animationOver()
                    // })
                    AniEffectManager.instance.playEffectOnce(_this._table, ResourceConfig.ANI_HU, 1000, { x: _this._table.width / 2 + TableLayout.OTHER_OPT_POS[dir - 1].x, y: TableLayout.OTHER_OPT_POS[dir - 1].y }, function () {
                        AnimationManager.instance.animationOver();
                    }.bind(_this));
                }
            }
            else {
                _this._liuju = new ui.mj.HoldCard.liujuUI();
                _this._table.addChild(_this._liuju);
                // view.width = this._table.width
                // view.height = this._table.height
                _this._liuju.centerX = 0;
                _this._liuju.zOrder = GameZorder.Ani;
                _this._liuju.ani1.play();
                Laya.timer.once(1000, _this, function () {
                    if (this._liuju) {
                        this._liuju.ani1.stop();
                        this._liuju.removeSelf();
                        this._liuju = null;
                    }
                    AnimationManager.instance.animationOver();
                }.bind(_this));
            }
        }, null);
    };
    BaseMJPage.prototype.playWinDetail = function (info) {
        BaseGameData.saveWinDetail(info);
    };
    BaseMJPage.prototype.updateArrorPos = function (seatid) {
        if (!seatid)
            return;
        var posX = this._table.width / 2 + this._ArrorcenterX;
        var posY = this._table.height / 2 + this._ArrorcenterY;
        if (this._arror) {
            this._arror.pos(posX, posY);
        }
    };
    BaseMJPage.prototype.showArror = function (seatid) {
        if (!seatid)
            return;
        BaseGameData.lastSeatid = seatid;
        var pos = BaseFoldCardManager.instance.getFoldCardPos(seatid);
        console.info(pos);
        if (!pos)
            return;
        this._ArrorcenterX = pos.x - this._table.width / 2;
        this._ArrorcenterY = pos.y - this._table.height / 2;
        if (!this._arror) {
            this._arror = new Laya.Animation();
            this._arror.loadAnimation(ResourceConfig.ANI_ARROW);
            this._table.addChild(this._arror);
            this._arror.pos(pos.x, pos.y);
            this._arror.play();
            this._arror.zOrder = GameZorder.Ani;
        }
        else {
            this._arror.visible = true;
            this._arror.pos(pos.x, pos.y);
            this._arror.zOrder = GameZorder.Ani;
        }
    };
    BaseMJPage.prototype.hideArror = function () {
        if (this._arror) {
            this._arror.visible = false;
        }
    };
    BaseMJPage.prototype.onReconnectNtfHandler = function (msg) {
        _super.prototype.onReconnectInfoHandler.call(this, msg);
        this.initGameUI();
        this.setFoldCards();
        this.setHandCards();
        this.setHoldCards();
        // for (var i: number = 1; i < this._playerUis.length; i++) {
        //     this._playerUis[i].checkIsGameing(true);
        // }
        if (msg.lastSeatid) {
            // BaseGameData.optSeatid = msg.lastSeatid
            this.setTimer(msg.lastSeatid, 1, true);
            this.showArror(msg.lastSeatid);
            var cards = BaseGameData.getPlayerDataBySeatid(msg.lastSeatid).foldCards;
            this.showFoldBigCard(Utils.getDir(msg.lastSeatid), cards[cards.length - 1]);
        }
        // if(this._ruleView){
        //     this._ruleView.updateLeftCount()
        // }
        if (this._leftView) {
            this._leftView.visible = true;
            this._leftView.updateLeftCount();
            if (BaseGameData.SHIFTER_NUM && BaseGameData.SHIFTER_NUM > 0) {
                this._leftView.updateShifter();
            }
            else {
                this._leftView._card._back.visible = true;
            }
        }
        this.setTableInfo();
        // this.showRule({})
        // this.updatePao([1,2,3,4])
        // let view = new BaseChooseScore(this.optCardReq.bind(this))
        // this.addView(view)
        // view.y = 200
        // this.onCardMoveNtfHandler({"cards":[288],"fromSeatid":4,"toSeatid":4,"areaid":4,"opttype":11,"count":1})
        // this.onShowInfoNtfHandler({"type":5,"animation":1})
        // this.onShowCardsNtfHandler({"showncards":[{"seatid":1,"handcards":[201,302,3,203,4,104,6,148,348,48]},{"seatid":2,"handcards":[202,204,243,144,344,47,247]},{"seatid":3,"handcards":[2,303,304,341]},{"seatid":4,"handcards":[121,21,25,342,147,347,248]}]})
        // this.onGameEndNtfHandler({"scores":[{"seatid":1},{"seatid":2},{"seatid":3},{"seatid":4}]})
        //     optional int32 type = 1;
        // repeated int32 info = 2;
        // optional uint32 animation = 3;
        //         this.onShowInfoNtfHandler({type:1,info:[1,5],animation:1})
        // this.onShowInfoNtfHandler({type:2,info:[13,13,13,13],animation:1})
        // //         message CardMoveNtf {
        // // 	repeated uint32 cards = 1;
        // // 	optional uint32 from_seatid = 2;
        // // 	optional uint32 to_seatid = 3;
        // // 	optional uint32 areaid = 4;
        // // 	optional uint32 opttype = 5;
        // // 	optional uint32 count = 6;
        // // }
        // this.onCardMoveNtfHandler({"cards":[372,341,305,209,222,342,47,386,85,178,349,263,301],"fromSeatid":4,"toSeatid":4,"areaid":1,"opttype":17})
        // this.onCardMoveNtfHandler({"cards":[286,87],"fromSeatid":1,"toSeatid":1,"areaid":4,"opttype":11,"count":2})
        // this.onCardMoveNtfHandler({"fromSeatid":1,"toSeatid":1,"areaid":1,"opttype":11,"count":2})
        // this.onCardMoveNtfHandler({"cards":[288],"fromSeatid":1,"toSeatid":1,"areaid":4,"opttype":11,"count":1})
        // this.onCardMoveNtfHandler({"fromSeatid":1,"toSeatid":1,"areaid":1,"opttype":11,"count":1})
        // this.onCardMoveNtfHandler({"cards":[186,287],"fromSeatid":2,"toSeatid":2,"areaid":4,"opttype":11,"count":2})
        // this.onCardMoveNtfHandler({"fromSeatid":2,"toSeatid":2,"areaid":1,"opttype":11,"count":2})
        // this.onCardMoveNtfHandler({"cards":[385],"fromSeatid":3,"toSeatid":3,"areaid":4,"opttype":11,"count":1})
        // this.onCardMoveNtfHandler({"fromSeatid":3,"toSeatid":3,"areaid":1,"opttype":11,"count":1})
        // this.onCardMoveNtfHandler({"cards":[386,85],"fromSeatid":4,"toSeatid":4,"areaid":4,"opttype":11,"count":2})
        // this.onCardMoveNtfHandler({"cards":[269,201],"fromSeatid":4,"toSeatid":4,"areaid":1,"opttype":11,"count":2})
        // this.onShowInfoNtfHandler({"type":3,"animation":1})
        // this.onCardMoveNtfHandler({"cards":[0],"toSeatid":2,"areaid":1,"opttype":1,"count":1})
        // this.onPlayerOptNtfHandler({"seatid":1,"timeout":15,"opts":[{"opttype":7,"cards":[6,4,3,4,5,6,7,3,9,4,5,3,24,4,5,3,26,4,5]},{"opttype":2,"cards":[1,2,3,4,5,6,7,8,9]}]})
        // this.onCardMoveNtfHandler({"cards":[22],"fromSeatid":2,"toSeatid":2,"areaid":2,"count":1})
        // this.onCardMoveNtfHandler({"cards":[0],"toSeatid":3,"areaid":1,"opttype":1,"count":1})
        // this.onPlayerOptNtfHandler({"seatid":3,"timeout":15,"opts":[{"opttype":0}]})
        // this.onCardMoveNtfHandler({"cards":[109],"fromSeatid":3,"toSeatid":3,"areaid":2,"count":1})
        // this.onCardMoveNtfHandler({"cards":[28],"toSeatid":4,"areaid":1,"opttype":1,"count":1})
        // this.onPlayerOptNtfHandler({"seatid":4,"timeout":15,"opts":[{"opttype":0}]})
        // this.onCardMoveNtfHandler({"cards":[28],"fromSeatid":4,"toSeatid":4,"areaid":2,"count":1})
        // this.onCardMoveNtfHandler({"cards":[0],"toSeatid":1,"areaid":1,"opttype":1,"count":1})
        // this.onPlayerOptNtfHandler({"seatid":1,"timeout":15,"opts":[{"opttype":0}]})
        // this.onCardMoveNtfHandler({"cards":[101],"fromSeatid":1,"toSeatid":1,"areaid":2,"count":1})
        // this.onCardMoveNtfHandler({"cards":[0],"toSeatid":2,"areaid":1,"opttype":1,"count":1})
        // this.onPlayerOptNtfHandler({"seatid":2,"timeout":15,"opts":[{"opttype":0}]})
        // this.onCardMoveNtfHandler({"cards":[75],"fromSeatid":2,"toSeatid":2,"areaid":2,"count":1})
        // this.onCardMoveNtfHandler({"cards":[0],"toSeatid":3,"areaid":1,"opttype":1,"count":1})
        // this.onPlayerOptNtfHandler({"seatid":3,"timeout":15,"opts":[{"opttype":0}]})
        // this.onCardMoveNtfHandler({"cards":[66],"fromSeatid":3,"toSeatid":3,"areaid":2,"count":1})
        // this.onCardMoveNtfHandler({"cards":[81],"toSeatid":4,"areaid":1,"opttype":1,"count":1})
        // this.onCardMoveNtfHandler({"cards":[81],"fromSeatid":4,"toSeatid":4,"areaid":4,"opttype":11,"count":1})
        // this.onCardMoveNtfHandler({"cards":[46],"toSeatid":4,"areaid":1,"opttype":1,"count":1})
        // this.onPlayerOptNtfHandler({"seatid":4,"timeout":15,"opts":[{"opttype":0}]})
        // this.onCardMoveNtfHandler({"cards":[46],"fromSeatid":4,"toSeatid":4,"areaid":2,"count":1})
        // this.onCardMoveNtfHandler({"cards":[0],"toSeatid":1,"areaid":1,"opttype":1,"count":1})
        // this.onPlayerOptNtfHandler({"seatid":1,"timeout":15,"opts":[{"opttype":0}]})
        // this.onCardMoveNtfHandler({"cards":[123],"fromSeatid":1,"toSeatid":1,"areaid":2,"count":1})
        // this.onCardMoveNtfHandler({"cards":[0],"toSeatid":2,"areaid":1,"opttype":1,"count":1})
        // this.onPlayerOptNtfHandler({"seatid":2,"timeout":15,"opts":[{"opttype":0}]})
        // this.onCardMoveNtfHandler({"cards":[163],"fromSeatid":2,"toSeatid":2,"areaid":2,"count":1})
        // this.onCardMoveNtfHandler({"cards":[0],"toSeatid":3,"areaid":1,"opttype":1,"count":1})
        // this.onPlayerOptNtfHandler({"seatid":3,"timeout":15,"opts":[{"opttype":0}]})
        //         this.onCardMoveNtfHandler({"cards":[307,206,304,6,275,87,342,260,281,141,107,244,144],"fromSeatid":4,"toSeatid":4,"areaid":1,"opttype":17})
        //         this.onCardMoveNtfHandler({cards:[388,184,287,188],fromSeatid:1,toSeatid:1,areaid:4,opttype:11,count:4})
        //         this.onCardMoveNtfHandler({"fromSeatid":1,"toSeatid":1,"areaid":1,"opttype":11,"count":4})
        //         this.onCardMoveNtfHandler({"cards":[81,83,283],"fromSeatid":2,"toSeatid":2,"areaid":4,"opttype":11,"count":3})
        //         this.onCardMoveNtfHandler({"fromSeatid":2,"toSeatid":2,"areaid":1,"opttype":11,"count":3})
        // this.onCardMoveNtfHandler({"cards":[383,286],"fromSeatid":3,"toSeatid":3,"areaid":4,"opttype":11,"count":2})
        // this.onCardMoveNtfHandler({"fromSeatid":3,"toSeatid":3,"areaid":1,"opttype":11,"count":2})
        // this.onCardMoveNtfHandler({"cards":[87,281],"fromSeatid":4,"toSeatid":4,"areaid":4,"opttype":11,"count":2})
        // this.onCardMoveNtfHandler({"cards":[24,26],"fromSeatid":4,"toSeatid":4,"areaid":1,"opttype":11,"count":2})
        // this.onCardMoveNtfHandler({cards:[0],"toSeatid":1,"areaid":1,"opttype":1,"count":1})
        // this.onPlayerOptNtfHandler({"seatid":1,"timeout":15,"opts":[{"opttype":0}]})
        // this.onShowInfoNtfHandler({type:3,info:[],animation:1})
        // this.onCardMoveNtfHandler({cards:[81,82],fromSeatid:2,toSeatid:2,areaid:4,opttype:11,count:2})
        // this.onCardMoveNtfHandler({cards:[44],fromSeatid:1,toSeatid:1,areaid:1,opttype:1,count:1})
        //         message Opt {
        // 	required uint32 opttype = 1;  //0出牌 1摸牌 2吃 3碰 4明杠 5暗杠 6碰杠 7听牌 8胡牌 9弃牌
        // 	repeated uint32 cards = 2;
        // }
        // //玩家操作通知
        // message PlayerOptNtf {
        // 	required uint32 seatid = 1;
        // 	optional uint32 timeout = 2;
        // 	repeated Opt opts = 3;
        // }
        // this.onPlayerOptNtfHandler({seatid:1,timeout:15,opts:[{opttype:1,cards:[]}]})
        // this.onCardMoveNtfHandler({cards:[44],fromSeatid:1,toSeatid:1,areaid:2,opttype:0,count:1})
        // this.onCardMoveNtfHandler({cards:[0],fromSeatid:2,toSeatid:2,areaid:1,opttype:1,count:1})
        // this.onPlayerOptNtfHandler({seatid:2,timeout:15,opts:[{opttype:1,cards:[]}]})
        // this.onCardMoveNtfHandler({cards:[0],fromSeatid:2,toSeatid:2,areaid:2,opttype:0,count:1})
    };
    BaseMJPage.prototype.setTimer = function (seatid, duration, isShow) {
        if (!this._timeLimit) {
            this._timeLimit = new TimeLimitView();
            this._table.addChild(this._timeLimit);
            this._timeLimit.zOrder = 1;
            this._timeLimit.centerX = -10;
            this._timeLimit.centerY = -14;
            // this._timeLimit.pos(Laya.stage.width/2,Laya.stage.height/2+5)
            this._timeLimit.updatePos();
        }
        else {
            this._timeLimit.visible = true;
        }
        this._timeLimit.startCount(duration);
    };
    /**
     * 玩家操作通知 游戏自己处理逻辑
     */
    BaseMJPage.prototype.askPlayerOpt = function (seatid, timeout, opt) {
        if (!seatid) {
            AnimationManager.instance.animationOver();
            return;
        }
        BaseGameData.optSeatid = seatid;
        console.info(opt);
        if (opt && opt.length > 0) {
            if (opt[0].opttype == GameDef.OptType.MJ_DRAW) {
                this.hideFoldBigCard();
                if (BaseGameData.isRecord == 1 && opt[0].cards.length == 0) {
                    if (BaseGameData.optSeatid && BaseGameData.optSeatid > 0) {
                        // let duration = Utils.getRealDuration(timeout)
                        this.setTimer(BaseGameData.optSeatid, timeout, true);
                    }
                    AnimationManager.instance.animationOver();
                    return;
                }
            }
            if (opt[0].opttype == GameDef.OptType.CALL_SCORE) {
                if (!this._chooseView) {
                    this._chooseView = new BaseChooseScore(this.optCardReq.bind(this), opt[0].cards);
                    this._table.addChild(this._chooseView);
                    this._chooseView.centerX = 0;
                    this._chooseView.bottom = 150;
                    this._chooseView.zOrder = GameZorder.ChooseView;
                    this.setTimer(BaseGameData.selfSeatid, timeout, true);
                }
                AnimationManager.instance.animationOver();
                return;
            }
            if (Utils.checkSeatid(BaseGameData.selfSeatid)) {
                var optFlag = false;
                var showLast = false;
                for (var k in opt) {
                    var v = opt[k];
                    if (v.opttype > GameDef.OptType.MJ_DRAW && v.opttype < GameDef.OptType.MJ_MISS_HU) {
                        optFlag = true;
                    }
                    if (v.opttype == GameDef.OptType.MJ_CHI || v.opttype == GameDef.OptType.MJ_PENG || v.opttype == GameDef.OptType.MJ_MNGANG) {
                        showLast = true;
                    }
                    if (v.opttype == GameDef.OptType.MJ_HU && BaseGameData.optSeatid != BaseGameData.selfSeatid) {
                        showLast = true;
                    }
                    if (v.opttype == GameDef.OptType.POINT_OUT) {
                        BaseGameData.tingCards = [];
                        BaseGameData.tingInfo = {};
                        var length_1 = 0;
                        var i = 0;
                        var tingKey = void 0;
                        var count = 0;
                        var winIndex = void 0;
                        for (var j in v.cards) {
                            var info = v.cards[j];
                            if (j == "0" || parseInt(j) == count + length_1 + 1) {
                                length_1 = info;
                                i = 0;
                                count = parseInt(j);
                            }
                            else if (parseInt(j) < count + length_1 + 1) {
                                if (i == 0) {
                                    tingKey = info % 100;
                                    BaseGameData.tingCards.push(tingKey);
                                    BaseGameData.tingInfo[tingKey] = [];
                                }
                                else {
                                    BaseGameData.tingInfo[tingKey].push(info);
                                }
                                i++;
                            }
                        }
                        BaseHandCardManager.instance.showArror(BaseGameData.selfSeatid);
                    }
                }
                if (seatid == BaseGameData.selfSeatid) {
                    // _handCardManager:tingCard()
                    if (optFlag) {
                        // _handCardManager:clearCurrentOpt()
                        if (!this._optChoice) {
                            this._optChoice = new BaseOptChoiceView(this.optCardReq.bind(this));
                            this._table.addChild(this._optChoice);
                            this._optChoice.bottom = 250;
                            this._optChoice.right = 300;
                            this._optChoice.zOrder = GameZorder.ChooseView;
                        }
                        console.info(opt);
                        this._optChoice.showOptChoice(opt);
                    }
                    if (showLast) {
                        this.showLastFoldBigCard();
                    }
                }
            }
            // let duration = Utils.getRealDuration(timeout)
        }
        this.setTimer(seatid, timeout, true);
        AnimationManager.instance.animationOver();
    };
    BaseMJPage.prototype.showLastFoldBigCard = function () {
    };
    BaseMJPage.prototype.onPlayerOptNtfHandler = function (msg) {
        var animation_func = function () {
            if (Utils.checkSeatid(msg.seatid) && BaseGameData.selfSeatid == msg.seatid) {
                // _dialogManager:removeDialog("OTHER_PLAYER")
                // _dialogManager:removeDialog("RECORD")
                // SoundManager.instance.play(SoundConfig.SOUND_QIEHUAN_PAOTAI)
            }
            if (msg.opts[0] && msg.opts[0].opttype == GameDef.OptType.MJ_MISS_HU) {
                // _tipsManager:showTips("漏胡")
                HintCtrl.instance.show("漏胡");
                if (msg.opts.length == 1) {
                    AnimationManager.instance.animationOver();
                    return;
                }
            }
            this.askPlayerOpt(msg.seatid, msg.timeout, msg.opts);
        }.bind(this);
        if (this._optChoice && msg.seatid != BaseGameData.selfSeatid) {
            this._optChoice.clearUI();
        }
        AnimationManager.instance.addAnimation(animation_func, null);
    };
    BaseMJPage.prototype.onPlayerOptRepHandler = function (msg) {
        if (msg.result == 1) {
            var player = BaseGameData.getPlayerDataBySeatid(BaseGameData.selfSeatid);
            if (player && player.handCards && player.handCards.length % 3 != 2) {
                if (!this._waitTips) {
                    this._waitTips = new Laya.Image("table/tips_waiting_paly.png");
                    this._table.addChild(this._waitTips);
                    this._waitTips.alpha = 1;
                    this._waitTips.centerX = 0;
                    this._waitTips.bottom = 140;
                    this._waitTips.zOrder = GameZorder.ChooseView;
                    // Laya.Tween.to(this._waitTips,{alpha:1},500)
                }
                else {
                    this._waitTips.alpha = 1;
                }
            }
        }
        else if (msg.result == 2) {
            if (this._optChoice && this._optChoice._optNode)
                return;
            var player = BaseGameData.getPlayerDataBySeatid(BaseGameData.selfSeatid);
            if (player && player.handCards && player.handCards.length % 3 != 2) {
                if (!this._waitTips) {
                    this._waitTips = new Laya.Image("table/tips_waiting_paly.png");
                    this._table.addChild(this._waitTips);
                    this._waitTips.alpha = 1;
                    this._waitTips.centerX = 0;
                    this._waitTips.bottom = 140;
                    this._waitTips.zOrder = GameZorder.ChooseView;
                    // Laya.Tween.to(this._waitTips,{alpha:1},500)
                }
                else {
                    this._waitTips.alpha = 1;
                }
            }
        }
        // HintCtrl.instance.show(GameConfig.language.player_opt_fail);
    };
    BaseMJPage.prototype.playDealCard = function (info) {
        var _this = this;
        AnimationManager.instance.addAnimation(function () {
            _this.dealCards(info);
        }, null);
    };
    BaseMJPage.prototype.dealCards = function (info) {
        this._dealCardsView = new BaseDealCardsView();
        this._table.addChild(this._dealCardsView);
        this._dealCardsView.pos(Laya.stage.width / 2, Laya.stage.height / 2);
        var callback = function () {
            this._dealCardsView = null;
            for (var k in info.info) {
                var count = info.info[k];
                BaseHandCardManager.instance.updateHandCards(parseInt(k) + 1, [], count);
            }
            if (!BaseGameData.isRecord) {
                if (BaseGameData.selfSeatid) {
                    BaseGameData.leftCard = BaseGameData.leftCard - 13 * (BaseGameData.maxPlayer - 1);
                }
                else {
                    BaseGameData.leftCard = BaseGameData.leftCard - 13 * BaseGameData.maxPlayer;
                }
            }
            // if(this._ruleView){
            //     this._ruleView.updateLeftCount()
            // }
            if (this._leftView) {
                this._leftView.updateLeftCount();
            }
            AnimationManager.instance.animationOver();
        }.bind(this);
        if (info.noAni) {
            callback();
        }
        else {
            this._dealCardsView.dealCards(BaseGameData.btnSeatid, callback);
        }
    };
    BaseMJPage.prototype.showFoldBigCard = function (dir, card) {
        if (!GameConfig.bigcard)
            return;
        if (dir == 1)
            return;
        if (!this._foldBigCard) {
            this._foldBigCard = new BaseCardView(card, 1);
            this._foldBigCard.showFoldBg();
            this._foldBigCard.zOrder = GameZorder.Ani + 1;
            this._table.addChild(this._foldBigCard);
        }
        else {
            this._foldBigCard.visible = true;
            this._foldBigCard.updateFront(card);
        }
        if (!card) {
            this._foldBigCard.view._back.visible = true;
        }
        else {
            this._foldBigCard.view._back.visible = false;
        }
        this._foldBigCard.view._god.visible = false;
        this._foldBigCard.centerX = TableLayout.FOLD_BIG_CARD[dir - 2].x;
        this._foldBigCard.y = TableLayout.FOLD_BIG_CARD[dir - 2].y;
    };
    BaseMJPage.prototype.hideFoldBigCard = function () {
        if (this._foldBigCard) {
            this._foldBigCard.visible = false;
        }
    };
    BaseMJPage.prototype.moveFoldCard = function (seatid, cardid, optcallback) {
        if (!BaseGameData.moveCard) {
            var beginPos = BaseHandCardManager.instance.getHandCardPosition(seatid, cardid);
            var targetPos = BaseFoldCardManager.instance.getFoldPosition(seatid);
            this._lastSeatid = seatid;
            this._lastCard = cardid;
            this.hideArror();
            var dir = Utils.getDir(seatid);
            if (BaseFoldCardManager.instance._foldType > 0) {
                BaseGameData.moveCard = new ui.mj.FoldCard.Card_1UI();
                BaseGameData.moveCard._bg.skin = "card/1/" + (cardid % 100) + ".png";
                BaseGameData.moveCard.zOrder = GameZorder.Ani;
            }
            else {
                switch (dir) {
                    case 1:
                        BaseGameData.moveCard = new ui.mj.FoldCard.Card_1UI();
                        BaseGameData.moveCard._bg.skin = "card/1/" + (cardid % 100) + ".png";
                        // targetPos.x = targetPos.x + 20
                        // targetPos.y = targetPos.y + 20
                        break;
                    case 2:
                        BaseGameData.moveCard = new ui.mj.FoldCard.Card_2UI();
                        BaseGameData.moveCard._bg.skin = "card/2/" + (cardid % 100) + ".png";
                        // targetPos.x = targetPos.x + 20
                        // targetPos.y = targetPos.y - 20
                        break;
                    case 3:
                        BaseGameData.moveCard = new ui.mj.FoldCard.Card_3UI();
                        BaseGameData.moveCard._bg.skin = "card/3/" + (cardid % 100) + ".png";
                        // targetPos.x = targetPos.x - 20
                        // targetPos.y = targetPos.y - 20
                        break;
                    case 4:
                        BaseGameData.moveCard = new ui.mj.FoldCard.Card_4UI();
                        BaseGameData.moveCard._bg.skin = "card/4/" + (cardid % 100) + ".png";
                        // targetPos.x = targetPos.x - 20
                        // targetPos.y = targetPos.y + 20
                        break;
                }
            }
            // BaseGameData.moveCard = new BaseCardView(cardid,dir,null)
            if (dir == 2 || dir == 3) {
            }
            else {
                BaseGameData.moveCard.zOrder = GameZorder.Ani;
            }
            this._table.addChild(BaseGameData.moveCard);
            BaseGameData.moveCard.pos(beginPos.x, beginPos.y);
            BaseHandCardManager.instance.removeCard(seatid, cardid);
            var callback = function () {
                SoundManager.instance.playEffect("card_out", 0, 1, false, 1, true);
                // BaseFoldCardManager.instance.addFoldCard(seatid,cardid)
                // if (BaseGameData.moveCard){
                //     BaseGameData.moveCard.removeSelf()
                //     BaseGameData.moveCard = null
                // }
                // this.showArror(seatid)
                if (BaseGameData.moveCard) {
                    var arror = new Laya.Animation();
                    arror.loadAnimation(ResourceConfig.ANI_ARROW);
                    BaseGameData.moveCard.addChild(arror);
                    arror.pos(BaseGameData.moveCard.width / 2, BaseGameData.moveCard.height / 2);
                    arror.play();
                    arror.zOrder = 100;
                }
                AnimationManager.instance.animationOver();
            }.bind(this);
            SoundManager.instance.playEffect("card_out", 0, 1, false, 1, true);
            Laya.Tween.to(BaseGameData.moveCard, { x: targetPos.x, y: targetPos.y }, 200, null, Laya.Handler.create(this, callback));
        }
        else {
            var targetPos = BaseFoldCardManager.instance.getFoldPosition(seatid);
            var callback = function () {
                // SoundManager.instance.playEffect("card_out", 0, 1, false, 1, true);
                // BaseHandCardManager.instance.removeCard(seatid,cardid)
                BaseFoldCardManager.instance.addFoldCard(seatid, cardid);
                if (BaseGameData.moveCard) {
                    BaseGameData.moveCard.removeSelf();
                    BaseGameData.moveCard = null;
                }
                this.showArror(seatid);
                if (optcallback) {
                    optcallback();
                }
                else
                    AnimationManager.instance.animationOver();
            }.bind(this);
            Laya.Tween.to(BaseGameData.moveCard, { x: targetPos.x, y: targetPos.y }, 0, null, Laya.Handler.create(this, callback));
        }
    };
    /**
     * 卡牌移动 游戏自己处理逻辑
     */
    BaseMJPage.prototype.foldCardAni = function (seatid, cardid) {
        var _this = this;
        AnimationManager.instance.addAnimation(function () {
            if (seatid == BaseGameData.selfSeatid && _this._lastCard && _this._lastSeatid == BaseGameData.selfSeatid) {
                if (cardid != _this._lastCard) {
                    console.log("paibudui  zhudong duankai");
                    server.close();
                }
            }
            if (BaseHandCardManager.instance.getHandCardViews(seatid) % 3 == 2) {
                SoundManager.instance.playEffect(String(cardid % 100), BaseGameData.getPlayerSexBySeatid(seatid));
                if (seatid != BaseGameData.selfSeatid) {
                    _this.showFoldBigCard(Utils.getDir(seatid), cardid);
                }
                _this.moveFoldCard(seatid, cardid);
                // // if (!self.moveCard then
                //     let beginPos = BaseHandCardManager.instance.getHandCardPosition(seatid,cardid)
                //     let dir = Utils.getDir(seatid)
                //     let flag = dir == 1 ? true : false
                //     flag = false
                //     BaseGameData.moveCard = new BaseCardView(cardid,dir,null)
                //     this.addView(BaseGameData.moveCard)
                //     BaseGameData.moveCard.pos(beginPos.x, beginPos.y)
                // // else
                // //     let x,y = self.moveCard:getPosition()
                // //     self.moveCard:removeSelf()
                // //     self.moveCard = nil
                // //     let dir = getDir(seatid)
                // //     self.moveCard = CardView.new(card,dir,false,true):addTo(self,MOVECARD_ZORDER):pos(x,y):setScale(0.62)
                // // end
                // let targetPos = BaseFoldCardManager.instance.getFoldPosition(seatid)
                // let callback = function(){
                //     SoundManager.instance.playEffect("card_out",BaseGameData.getPlayerDataBySeatid(seatid).sex || 1);
                //     BaseHandCardManager.instance.removeCard(seatid,cardid)
                //     BaseFoldCardManager.instance.addFoldCard(seatid,cardid)
                //     if (BaseGameData.moveCard){
                //         BaseGameData.moveCard.removeSelf()
                //         BaseGameData.moveCard = null
                //     }
                //     this.showArror(seatid)
                //     AnimationManager.instance.animationOver()
                // }.bind(this)
                // Laya.Tween.to(BaseGameData.moveCard,{x:targetPos.x,y:targetPos.y,scaleX:0.5,scaleY:0.5},200,null,Laya.Handler.create(this,callback))
            }
            else {
                // if self.moveCard then
                //     self.moveCard:removeSelf()
                //     self.moveCard = nil
                // end
                AnimationManager.instance.animationOver();
            }
        }, null);
    };
    BaseMJPage.prototype.playCardOpt = function (opttype, cards, callback) {
        var optAni = new ui.mj.OptAcionUI();
        var newCards = cards;
        if (opttype == GameDef.OptType.MJ_CHI) {
            newCards = [cards[2], cards[0], cards[1]];
        }
        for (var i = 1; i < 5; i++) {
            optAni["_card_" + i]._back.visible = false;
            var card = newCards[i - 1] || 1;
            optAni["_card_" + i]._bg.skin = "card/" + optAni["_card_" + i].name + "/" + (card % 100) + ".png";
            if (opttype < GameDef.OptType.MJ_MNGANG && i == 4) {
                optAni["_card_" + i].visible = false;
            }
        }
        optAni.zOrder = 30;
        this._table.addChild(optAni);
        optAni.pos(Laya.stage.width / 2, Laya.stage.height / 2);
        optAni.ani1.play(1, false);
        Laya.timer.once(500, this, function () {
            optAni.ani1.stop();
            optAni.removeSelf();
            callback();
            console.log("playCardOpt   AnimationManager.instance.animationOver()===================");
            AnimationManager.instance.animationOver();
        });
    };
    BaseMJPage.prototype.playOtherOptAni = function (opttype, seatid) {
        if (opttype > GameDef.OptType.MJ_TING)
            return;
        var dir = Utils.getDir(seatid);
        // let ac = new Laya.Animation()
        var res = "";
        if (opttype == GameDef.OptType.MJ_TING) {
            // ac.loadAnimation(ResourceConfig.ANI_PENG)
            res = ResourceConfig.ANI_TING;
        }
        else if (opttype == GameDef.OptType.MJ_PENG) {
            // ac.loadAnimation(ResourceConfig.ANI_PENG)
            res = ResourceConfig.ANI_PENG;
        }
        else if (opttype == GameDef.OptType.MJ_CHI) {
            // ac.loadAnimation(ResourceConfig.ANI_CHI)
            res = ResourceConfig.ANI_CHI;
        }
        else if (opttype > GameDef.OptType.MJ_PENG) {
            // ac.loadAnimation(ResourceConfig.ANI_GANG)
            res = ResourceConfig.ANI_GANG;
        }
        // this._table.addChild(ac)
        // ac.zOrder = 30
        // ac.x = Laya.stage.width/2+TableLayout.OTHER_OPT_POS[dir-1].x
        // ac.y = TableLayout.OTHER_OPT_POS[dir-1].y
        // ac.play(1,false)
        // Laya.timer.once(1000,this,function(){
        //     ac.stop()
        //     ac.removeSelf()
        //     // AnimationManager.instance.animationOver()
        // })
        AniEffectManager.instance.playEffectOnce(this._table, res, 1000, { x: Laya.stage.width / 2 + TableLayout.OTHER_OPT_POS[dir - 1].x, y: TableLayout.OTHER_OPT_POS[dir - 1].y });
    };
    BaseMJPage.prototype.playOptSound = function (opttype, seatid) {
        if (opttype == GameDef.OptType.MJ_PENG) {
            SoundManager.instance.playEffect("peng", BaseGameData.getPlayerSexBySeatid(seatid));
        }
        else if (opttype == GameDef.OptType.MJ_CHI) {
            SoundManager.instance.playEffect("chi", BaseGameData.getPlayerSexBySeatid(seatid));
        }
        else if (opttype == GameDef.OptType.MJ_TING) {
            SoundManager.instance.playEffect("baoting", BaseGameData.getPlayerSexBySeatid(seatid));
        }
        else if (opttype == GameDef.OptType.MJ_TING) {
            SoundManager.instance.playEffect("liang", BaseGameData.getPlayerSexBySeatid(seatid));
        }
        else if (opttype > GameDef.OptType.MJ_PENG && opttype < GameDef.OptType.MJ_TING) {
            if (opttype == GameDef.OptType.MJ_ANGANG) {
                SoundManager.instance.playEffect("angang", BaseGameData.getPlayerSexBySeatid(seatid));
            }
            else {
                SoundManager.instance.playEffect("gang", BaseGameData.getPlayerSexBySeatid(seatid));
            }
        }
    };
    BaseMJPage.prototype.holdCardAni = function (info) {
        // BaseHoldCardManager.instance.addHoldCards(info.toSeatid, info)
        var position = BaseHoldCardManager.instance.getHoldPos(info.toSeatid);
        var dir = Utils.getDir(info.toSeatid);
        var count = info.cards.length - 1;
        if (info.opttype > GameDef.OptType.MJ_MNGANG) {
            count = info.cards.length;
        }
        if (BaseGameData.moveCard) {
            BaseGameData.moveCard.removeSelf();
            BaseGameData.moveCard = null;
        }
        // if (info.opttype == GameDef.OptType.MJ_PENGGANG){
        //     count = 1
        // }
        var removeCards = [];
        for (var i = 0; i < count; i++) {
            removeCards.push(info.cards[i]);
        }
        if (info.opttype == GameDef.OptType.MJ_PENGGANG && info.toSeatid != BaseGameData.selfSeatid) {
            removeCards = [0];
        }
        var callback = function () {
            if (info.opttype == GameDef.OptType.MJ_PENGGANG) {
                BaseHoldCardManager.instance.pengGang(info.toSeatid, info.cards);
            }
            else {
                BaseHoldCardManager.instance.addHoldCards(info.toSeatid, info);
            }
            // _handCardManager:tingCard()
        }.bind(this);
        AnimationManager.instance.addAnimation(function () {
            BaseHandCardManager.instance.removeCards(info.toSeatid, removeCards);
            if (info.opttype < GameDef.OptType.MJ_ANGANG) {
                this.hideFoldBigCard();
                this.hideArror();
                BaseFoldCardManager.instance.removeCard(info.fromSeatid, info.cards[info.cards.length - 1]);
            }
            if (dir == 1) {
                this.playOptSound(info.opttype, info.toSeatid);
                this.playCardOpt(info.opttype, info.cards, callback.bind(this));
            }
            else {
                // let pos = self.tableLayout.optAniLayouts[dir]
                // _animationPlay:playOptLabel(OPT_ANIMATION[info.opttype],pos,info.opttype,info.to_seatid)
                this.playOptSound(info.opttype, info.toSeatid);
                this.playOtherOptAni(info.opttype, info.toSeatid);
                callback();
                Laya.timer.once(500, this, function () {
                    console.log("playOtherOptAni ================AnimationManager.instance.animationOver()");
                    AnimationManager.instance.animationOver();
                });
            }
        }.bind(this), null);
    };
    BaseMJPage.prototype.onCardMoveNtfHandler = function (msg) {
        var _this = this;
        // if(msg) return
        // _gameDataMgr:cardMove(msg)
        BaseGameData.cardMove(msg);
        if (this._optChoice) {
            this._optChoice.clearUI();
        }
        if (this._waitTips) {
            this._waitTips.alpha = 0;
        }
        BaseHandCardManager.instance.clearArror(BaseGameData.selfSeatid);
        BaseTingCardManager.instance.clearAll();
        if (msg.toSeatid == BaseGameData.selfSeatid) {
            BaseHandCardManager.instance.unSelectCards();
        }
        if (msg.noAni)
            return;
        if (msg.areaid == GameDef.AREA_TYPE.HAND_CARD) {
            // this.playDealCard(msg.cards)
            if (msg.opttype == GameDef.OptType.MJ_DEAL) {
                AnimationManager.instance.addAnimation(function () {
                    BaseHandCardManager.instance.showHandCards(msg.toSeatid, msg.cards);
                    AnimationManager.instance.animationOver();
                }, null);
            }
            else if (msg.opttype == GameDef.OptType.MJ_FLOWER) {
                AnimationManager.instance.addAnimation(function () {
                    BaseHandCardManager.instance.updateFlower(msg.toSeatid, msg.cards, msg.count);
                    AnimationManager.instance.animationOver();
                }, null);
            }
            else if (msg.opttype == GameDef.OptType.MJ_DRAW) {
                AnimationManager.instance.addAnimation(function () {
                    SoundManager.instance.playEffect("player_opt", BaseGameData.getPlayerSexBySeatid(msg.toSeatid));
                    if (BaseGameData.moveCard) {
                        _this.moveFoldCard(_this._lastSeatid, _this._lastCard, function () {
                            BaseHandCardManager.instance.setCatchCard(msg.toSeatid, msg.cards[0]);
                            AnimationManager.instance.animationOver();
                        });
                    }
                    else {
                        BaseHandCardManager.instance.setCatchCard(msg.toSeatid, msg.cards[0]);
                        AnimationManager.instance.animationOver();
                    }
                }, null);
            }
            if (this._leftView) {
                this._leftView.updateLeftCount();
            }
        }
        else if (msg.areaid == GameDef.AREA_TYPE.FOLD_CARD) {
            BaseGameData.tingCards = [];
            BaseGameData.tingInfo = {};
            if (msg.toSeatid == BaseGameData.selfSeatid) {
                if (this._optChoice) {
                    this._optChoice.clearUI();
                }
            }
            Dispatcher.dispatch("clear_same_card");
            this.foldCardAni(msg.toSeatid, msg.cards[0]);
            // if (BaseGameData.selfSeatid == msg.toSeatid){
            //     AnimationManager.instance.addAnimation(()=>{
            //         //刷牌
            //         // BaseHandCardManager.instance.updateFrame()
            //         // BaseFoldCardManager.instance.updateFrame()
            //         AnimationManager.instance.animationOver()
            //     },null)
            // }
        }
        else if (msg.areaid == GameDef.AREA_TYPE.HOLD_CARD) {
            if (msg.toSeatid == BaseGameData.selfSeatid) {
                if (this._optChoice) {
                    this._optChoice.clearUI();
                }
            }
            this.holdCardAni(msg);
            //刷牌
            // AnimationManager:getInstance():addAnimation(function()
            //     _foldCardManager:updateFrame(msg)
            //     AnimationManager:getInstance():animationOver()
            // end)
        }
        else if (msg.areaid == GameDef.AREA_TYPE.FLOWER_CARD) {
            AnimationManager.instance.addAnimation(function () {
                Laya.timer.once(1000, _this, function () {
                    console.log("补花----------------------------");
                    SoundManager.instance.playEffect("buhua", BaseGameData.getPlayerSexBySeatid(msg.toSeatid));
                    this.flowerCardAni(msg);
                    AnimationManager.instance.animationOver();
                });
            }, null);
        }
        else if (msg.areaid == GameDef.AREA_TYPE.TING_CARD) {
            this.tingCardAni(msg);
        }
        else if (msg.areaid == GameDef.AREA_TYPE.WIN_CARD) {
            this.winCardAni(msg);
        }
    };
    BaseMJPage.prototype.flowerCardAni = function (msg) {
        if (msg.opttype == GameDef.OptType.MJ_FLOWER) {
            BaseHandCardManager.instance.removeCards(msg.toSeatid, msg.cards, true);
        }
    };
    BaseMJPage.prototype.tingCardAni = function (msg) {
    };
    BaseMJPage.prototype.winCardAni = function (msg) {
        // BaseHandCardManager.instance.setCatchCard(msg.toSeatid, msg.cards[0])\
        if (BaseGameData.moveCard) {
            BaseGameData.moveCard.removeSelf();
            BaseGameData.moveCard = null;
        }
        if (msg.toSeatid != msg.fromSeatid && BaseGameData.isGameing) {
            BaseFoldCardManager.instance.removeCard(msg.toSeatid, msg.cards[0]);
        }
        if (msg.toSeatid == msg.fromSeatid && BaseGameData.isGameing) {
            BaseHandCardManager.instance.removeCard(msg.toSeatid, msg.cards[0]);
        }
        BaseWinCardManager.instance.addWinCards(msg.toSeatid, msg.cards[0]);
    };
    /**
    * 展示牌型，游戏自己处理逻辑
    */
    BaseMJPage.prototype.onShowCardsNtfHandler = function (msg) {
        BaseGameData.onShowCardsNtfHandler(msg);
        AnimationManager.instance.addAnimation(function () {
            for (var k in BaseGameData.players) {
                var player = BaseGameData.players[k];
                BaseHandCardManager.instance.showHandCards(player.seatid, player.handCards);
                BaseHoldCardManager.instance.updateHoldCards(player.seatid, player.holdCards);
            }
            AnimationManager.instance.animationOver();
        }, null);
    };
    BaseMJPage.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        Laya.Tween.clearAll(this);
        Laya.timer.clearAll(this);
        if (this._ruleView) {
            this._ruleView.removeSelf();
            this._ruleView = null;
        }
        if (this._leftView) {
            this._leftView.removeSelf();
            this._leftView = null;
        }
        if (this._foldBigCard) {
            this._foldBigCard.removeSelf();
            this._foldBigCard = null;
        }
        this.clearGame();
        this.clearGameUI();
    };
    BaseMJPage.prototype.clearData = function (needCheckIsGameing) {
        if (needCheckIsGameing === void 0) { needCheckIsGameing = true; }
        if (this._timeLimit) {
            this._timeLimit.clean();
        }
        if (this._dealCardsView) {
            Laya.Tween.clearAll(this._dealCardsView);
            this._dealCardsView.removeSelf();
        }
        if (this._dice) {
            this._dice.removeChildren();
            this._dice.removeSelf();
        }
        if (this._foldBigCard) {
            this._foldBigCard.removeSelf();
            this._foldBigCard = null;
        }
        if (this._drawShifter) {
            this._drawShifter.ani1.stop();
            if (this._drawShifter.parent) {
                this._drawShifter.removeSelf();
            }
        }
        Laya.timer.clearAll(this);
        Laya.Tween.clearAll(this);
        AnimationManager.instance.endAnimations();
        _super.prototype.clearData.call(this, needCheckIsGameing);
    };
    BaseMJPage.prototype.updateTable = function () {
        AnimationManager.instance.endAnimations();
        if (this._dealCardsView) {
            this._dealCardsView.visible = false;
        }
        this.initGameUI();
        // this.removeSeatViews()
        // this.initSeatViews()
        this.setFoldCards();
        this.setHandCards();
        this.setHoldCards();
        if (this._timeLimit) {
            this._timeLimit.clean();
            this._timeLimit.removeSelf();
            this._timeLimit = null;
        }
        // for (var i: number = 1; i < this._playerUis.length; i++) {
        //     this._playerUis[i].checkIsGameing(true);
        // }
        if (BaseGameData.lastSeatid) {
            this.hideArror();
        }
        // if(this._ruleView){
        //     this._ruleView.updateLeftCount()
        // }
        if (this._leftView) {
            this._leftView.updateLeftCount();
        }
        DialogManager.instance.removeDialog("gameend");
    };
    BaseMJPage.prototype.setBg = function (idx) {
        if (idx === void 0) { idx = -1; }
        var key = "table_bg" + BaseGameData.gameType;
        if (-1 === idx) {
            idx = parseInt(localStorage.getItem(key) || "0");
        }
        var bgSources = GameDef.GAME_BG[BaseGameData.gameType];
        var len = bgSources.length;
        idx %= len;
        var bg = bgSources[idx];
        this._table._bg.skin = bg;
        localStorage.setItem(key, idx.toString());
    };
    BaseMJPage.prototype.setGps = function () {
        if (!GameConfig.IS_IOS_EXAMINE) {
            var gpsTip = DialogManager.instance.callDialog("GPS_TIP");
            gpsTip.show();
        }
    };
    return BaseMJPage;
}(MatchPage));
//# sourceMappingURL=BaseMJPage.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var TongluMjPage = /** @class */ (function (_super) {
    __extends(TongluMjPage, _super);
    function TongluMjPage() {
        var _this = _super.call(this) || this;
        _this.name = "TongluMjPage";
        _this._loadDatas = _this._loadDatas.concat([
            { url: "res/config/tonglu_mj.json", type: Laya.Loader.JSON },
            { url: ResourceConfig.SHEET_JINYUN_MJ_CHAT, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_SMALLEND, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SMALLEND_BG, type: Laya.Loader.IMAGE },
            { url: ResourceConfig.SMALLEND_LINE, type: Laya.Loader.IMAGE },
            { url: ResourceConfig.GPS_BG, type: Laya.Loader.IMAGE },
            { url: ResourceConfig.SHEET_GPS, type: Laya.Loader.ATLAS },
        ]);
        AppPage.register(TongluMjPage, _this._loadDatas);
        return _this;
    }
    TongluMjPage.prototype.init = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        GameDef.CHAT_POS = [
            [],
            [2, 1],
            [2, 1, 2],
            [2, 1, 1, 2]
        ];
        Utils.injectProp(GameConfig.cfgAudio, Laya.loader.getRes("res/config/tonglu_mj.json"));
        _super.prototype.init.apply(this, params);
        BaseHandCardManager.instance.registerClass(tonglu_mj.HandCardView);
        BaseFoldCardManager.instance.registerClass(tonglu_mj.FoldCardView);
        BaseWinCardManager.instance.registerClass(tonglu_mj.WinCardView);
        BaseTingCardManager.instance.registerClass(tonglu_mj.TingCardView);
        BaseHoldCardManager.instance.registerClass(tonglu_mj.HoldCardView);
        PlayerManager.instance.registerClass(component.BasePlayer);
        DialogManager.instance.addDialog("GAME_END", tonglu_mj.GameEndDialog, [
            { url: ResourceConfig.SHEET_GAME_END, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_FENSHU, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_FENSHU_FNT, type: Laya.Loader.XML }
        ]);
        SoundManager.instance.language = 0;
        BaseFoldCardManager.instance._foldType = 0;
        this.setBg();
        EventManager.instance.registerOnObject(this, AppControl.getInstance().stage, Laya.Event.RESIZE, this, this.onResize);
    };
    TongluMjPage.prototype.onResize = function (e) {
        _super.prototype.onResize.call(this, e);
    };
    TongluMjPage.prototype.initLeftView = function () {
        // if (!this._leftView) {
        //     this._leftView = new LeftCardView()
        //     this._table.addChild(this._leftView)
        //     this._leftView.centerX = -250
        //     this._leftView.centerY = -180
        //     if (!BaseGameData.isTableStart)
        //         this._leftView.visible = false
        // }
        // this._leftView._card._god.skin = "card/caishen_small_top.png"
        // this._leftView._card._god.visible = true
    };
    TongluMjPage.prototype.replace_card = function (cardid) {
        if (cardid % 100 == BaseGameData.SHIFTER_NUM) {
            cardid = 78;
        }
        else if (cardid % 100 == 78) {
            cardid = BaseGameData.SHIFTER_NUM;
        }
        return cardid;
    };
    TongluMjPage.prototype.moveFoldCard = function (seatid, cardid, optcallback) {
        if (!BaseGameData.moveCard) {
            var beginPos = BaseHandCardManager.instance.getHandCardPosition(seatid, cardid);
            var targetPos = BaseFoldCardManager.instance.getFoldPosition(seatid);
            this._lastSeatid = seatid;
            this._lastCard = cardid;
            this.hideArror();
            var dir = Utils.getDir(seatid);
            if (BaseFoldCardManager.instance._foldType > 0) {
                BaseGameData.moveCard = new ui.mj.FoldCard.Card_1UI();
                BaseGameData.moveCard._bg.skin = "card/1/" + (this.replace_card(cardid) % 100) + ".png";
                BaseGameData.moveCard.zOrder = GameZorder.Ani;
            }
            else {
                switch (dir) {
                    case 1:
                        BaseGameData.moveCard = new ui.mj.FoldCard.Card_1UI();
                        BaseGameData.moveCard._bg.skin = "card/1/" + (this.replace_card(cardid) % 100) + ".png";
                        // targetPos.x = targetPos.x + 20
                        // targetPos.y = targetPos.y + 20
                        break;
                    case 2:
                        BaseGameData.moveCard = new ui.mj.FoldCard.Card_2UI();
                        BaseGameData.moveCard._bg.skin = "card/2/" + (this.replace_card(cardid) % 100) + ".png";
                        // targetPos.x = targetPos.x + 20
                        // targetPos.y = targetPos.y - 20
                        break;
                    case 3:
                        BaseGameData.moveCard = new ui.mj.FoldCard.Card_3UI();
                        BaseGameData.moveCard._bg.skin = "card/3/" + (this.replace_card(cardid) % 100) + ".png";
                        // targetPos.x = targetPos.x - 20
                        // targetPos.y = targetPos.y - 20
                        break;
                    case 4:
                        BaseGameData.moveCard = new ui.mj.FoldCard.Card_4UI();
                        BaseGameData.moveCard._bg.skin = "card/4/" + (this.replace_card(cardid) % 100) + ".png";
                        // targetPos.x = targetPos.x - 20
                        // targetPos.y = targetPos.y + 20
                        break;
                }
            }
            // BaseGameData.moveCard = new BaseCardView(cardid,dir,null)
            this._table.addChild(BaseGameData.moveCard);
            if (dir == 2 || dir == 3) {
            }
            else {
                BaseGameData.moveCard.zOrder = GameZorder.Ani;
            }
            BaseGameData.moveCard.pos(beginPos.x, beginPos.y);
            BaseHandCardManager.instance.removeCard(seatid, cardid);
            var callback = function () {
                var arror = new Laya.Animation();
                arror.loadAnimation(ResourceConfig.ANI_ARROW);
                if (BaseGameData.moveCard) {
                    BaseGameData.moveCard.addChild(arror);
                    arror.pos(BaseGameData.moveCard.width / 2, BaseGameData.moveCard.height / 2);
                    arror.play();
                    arror.zOrder = 100;
                }
                AnimationManager.instance.animationOver();
            }.bind(this);
            SoundManager.instance.playEffect("card_out", 0, 1, false, 1, true);
            Laya.Tween.to(BaseGameData.moveCard, { x: targetPos.x, y: targetPos.y }, 100, null, Laya.Handler.create(this, callback));
        }
        else {
            var targetPos = BaseFoldCardManager.instance.getFoldPosition(seatid);
            var callback = function () {
                var player = BaseGameData.getPlayerDataBySeatid(seatid);
                var sex = player ? player.sex : 1;
                // SoundManager.instance.playEffect("card_out", 0, 1, false, 1, true);
                // BaseHandCardManager.instance.removeCard(seatid,cardid)
                //BaseFoldCardManager.instance._foldType = 0
                BaseFoldCardManager.instance.addFoldCard(seatid, cardid);
                if (BaseGameData.moveCard) {
                    BaseGameData.moveCard.removeSelf();
                    BaseGameData.moveCard = null;
                }
                this.showArror(seatid);
                if (optcallback) {
                    optcallback();
                }
                else {
                    AnimationManager.instance.animationOver();
                }
                // AnimationManager.instance.animationOver()
            }.bind(this);
            Laya.Tween.to(BaseGameData.moveCard, { x: targetPos.x, y: targetPos.y }, 0, null, Laya.Handler.create(this, callback));
        }
    };
    TongluMjPage.prototype.foldCardAni = function (seatid, cardid) {
        var _this = this;
        AnimationManager.instance.addAnimation(function () {
            if (seatid == BaseGameData.selfSeatid && _this._lastCard && _this._lastSeatid == BaseGameData.selfSeatid) {
                if (cardid != _this._lastCard) {
                    server.close();
                }
            }
            if (BaseHandCardManager.instance.getHandCardViews(seatid) % 3 == 2) {
                var player = BaseGameData.getPlayerDataBySeatid(seatid);
                var sex = player ? player.sex : 1;
                SoundManager.instance.playEffect(String(_this.replace_card(cardid) % 100), sex);
                if (seatid != BaseGameData.selfSeatid) {
                    _this.showFoldBigCard(Utils.getDir(seatid), cardid);
                }
                _this.moveFoldCard(seatid, cardid);
            }
            else {
                AnimationManager.instance.animationOver();
            }
        }, null);
    };
    TongluMjPage.prototype.clearData = function (needCheckIsGameing) {
        if (needCheckIsGameing === void 0) { needCheckIsGameing = true; }
        Laya.timer.clearAll(this);
        Laya.Tween.clearAll(this);
        AnimationManager.instance.endAnimations();
        _super.prototype.clearData.call(this, needCheckIsGameing);
    };
    TongluMjPage.prototype.showFoldBigCard = function (dir, card) {
        if (!GameConfig.bigcard)
            return;
        if (dir == 1)
            return;
        if (!this._foldBigCard) {
            this._foldBigCard = new BaseCardView(this.replace_card(card) % 100, 1);
            this._foldBigCard.showFoldBg();
            this._foldBigCard.zOrder = GameZorder.Ani + 1;
            this._table.addChild(this._foldBigCard);
            this._foldBigCard.alpha = 0;
            Laya.Tween.to(this._foldBigCard, { alpha: 1 }, 200);
        }
        else {
            this._foldBigCard.visible = true;
            this._foldBigCard.alpha = 0;
            Laya.Tween.to(this._foldBigCard, { alpha: 1 }, 200);
            this._foldBigCard.updateFront(this.replace_card(card) % 100);
        }
        this._foldBigCard.view._god.visible = false;
        this._foldBigCard.centerX = TableLayout.FOLD_BIG_CARD[dir - 2].x;
        this._foldBigCard.y = TableLayout.FOLD_BIG_CARD[dir - 2].y;
    };
    /**
     * 一般按钮touch
     */
    TongluMjPage.prototype.onBtnTouch = function (e) {
        _super.prototype.onBtnTouch.call(this, e);
        this.test();
    };
    /**
     * 设置背景
     */
    TongluMjPage.prototype.test = function () {
        // let p = PlayerManager.instance._players[1]
        // let leave = p.viewUI._imgLeave
        // let disc = p.viewUI._imgDisconnect
        // leave.width = 86
        // leave.height = 86
        // disc.width = 86
        // disc.height = 86
        // leave.pos(11,4)
        // disc.pos(11,4)
        // log("_imgLeave XY:" + leave.x + "," + leave.y)
        // log("_imgLeave WH:" + leave.width + "," + leave.height)
        // log("_imgLeave anchor:" + leave.anchorX + "," + leave.anchorY)
        // log("_imgDisconnect XY:" + disc.x + "," + disc.y)
        // log("_imgDisconnect WH:" + disc.width + "," + disc.height)
        // log("_imgDisconnect anchor:" + disc.anchorX + "," + disc.anchorY)
        // leave.visible = true
        // disc.visible = true
        // super.initGameUI()
        // for (let i = 1; i < 2; i++) {
        //     let foldView = BaseFoldCardManager.instance.foldCardsViews[i].getFoldView()
        //     if (foldView) {
        //         for (var j = 1; j < 34; j++) {
        //             let card = foldView["card_" + j]
        //             if (card)
        //                 card.visible = true
        //         }
        //     }
        // }
        // this._tablePop.visible = true
        // this._tablePop._btnMatchRecord.visible = false
        // this._menu._btnMatchRecord.visible = true
        //this._tablePop._btnMatchRecord.top = 120
        console.log("Browser.width", Laya.Browser.width);
        console.log("Browser.height", Laya.Browser.height);
        console.log("stage.width", Laya.stage.width);
        console.log("stage.height", Laya.stage.height);
        console.log("html canvas width", Laya.Render.canvas.getAttribute("width"));
        console.log("html canvas height", Laya.Render.canvas.getAttribute("height"));
        console.log("bg.width", this._table._bg.width);
        console.log("bg.height", this._table._bg.height);
        console.log("_btnMatchRecord.right", this._tablePop._btnMatchRecord.right);
        console.log("_btnMatchRecord.x", this._tablePop._btnMatchRecord.x);
        console.log("_btnChat.right", this._menu._btnChat.right);
        console.log("_btnChat.x", this._menu._btnChat.x);
    };
    TongluMjPage.prototype.onTableInfoNtfHandler = function (msg) {
        _super.prototype.onTableInfoNtfHandler.call(this, msg);
        this.setGps();
    };
    TongluMjPage.prototype.onSitdownNtfHandler = function (msg) {
        _super.prototype.onSitdownNtfHandler.call(this, msg);
        this.setGps();
    };
    TongluMjPage.prototype.onStandupNtfHandler = function (msg) {
        _super.prototype.onStandupNtfHandler.call(this, msg);
        this.setGps();
    };
    TongluMjPage.prototype.onPlayerOptNtfHandler = function (msg) {
        _super.prototype.onPlayerOptNtfHandler.call(this, msg);
        for (var _i = 0, _a = msg.opts; _i < _a.length; _i++) {
            var opt = _a[_i];
            this.handlerOpt(msg.seatid, opt);
        }
    };
    TongluMjPage.prototype.handlerOpt = function (seatid, opt) {
        if (seatid != BaseGameData.selfSeatid)
            return;
        if (opt && opt.opttype == GameDef.OptType.POINT_OUT) {
            if (this.threeTan()) {
                var allCardIds = [];
                for (var _i = 0, _a = opt.cards; _i < _a.length; _i++) {
                    var cardid = _a[_i];
                    var info = BaseGameData.tingInfo[cardid % 100];
                    if (info && 34 <= info.length) {
                        allCardIds.push(cardid);
                    }
                }
                if (allCardIds.length) {
                    this.onlyCanOut(allCardIds);
                }
            }
            //BaseHandCardManager.instance.handCardsViews[BaseGameData.selfSeatid].onPiao()
        }
        // if (opt && opt.opttype == GameDef.OptType.MJ_DRAW) {
        //     let cards = opt.cards
        // }
        if (opt && opt.opttype == GameDef.OptType.MJ_PIAO) {
            BaseHandCardManager.instance.handCardsViews[BaseGameData.selfSeatid].onPiao();
        }
    };
    TongluMjPage.prototype.threeTan = function () {
        var count = 0;
        var holds = BaseHoldCardManager.instance.holdCardsViews[BaseGameData.selfSeatid].cardsView;
        for (var _i = 0, holds_1 = holds; _i < holds_1.length; _i++) {
            var cardUi = holds_1[_i];
            if (cardUi instanceof ui.mj.HoldCard.Card_2_1UI) {
                count++;
            }
            else if (cardUi instanceof ui.mj.HoldCard.Card_3_1UI) {
                count++;
            }
            else if (cardUi instanceof ui.mj.HoldCard.Card_4_1UI) {
                count++;
            }
        }
        return 3 <= count;
    };
    TongluMjPage.prototype.onlyCanOut = function (cards) {
        BaseHandCardManager.instance.handCardsViews[BaseGameData.selfSeatid].showArrorOnly(cards);
        BaseHandCardManager.instance.handCardsViews[BaseGameData.selfSeatid].clearTouchBut(cards);
    };
    TongluMjPage.prototype.onCardMoveNtfHandler = function (msg) {
        _super.prototype.onCardMoveNtfHandler.call(this, msg);
        this.onlyCanOut([]);
    };
    //财神非翻牌，不用减1
    TongluMjPage.prototype.showDrawShifter = function (info) {
        var _this = this;
        BaseGameData.SHIFTER_NUM = info.info[0] % 100;
        if (info.noAni) {
            if (this._leftView) {
                this._leftView.visible = true;
                this._leftView.updateShifter();
            }
            else {
                this._leftView = new LeftCardView();
                this._table.addChild(this._leftView);
                this._leftView.centerX = -250;
                this._leftView.centerY = -180;
                this._leftView.updateShifter();
            }
            return;
        }
        if (info.animation) {
            //BaseGameData.leftCard = BaseGameData.leftCard - 1
            AnimationManager.instance.addAnimation(function () {
                _this._drawShifter = new ui.mj.CaishenUI();
                _this._drawShifter._cai._bg.skin = "card/5/" + (info.info[0] % 100) + ".png";
                _this._drawShifter._cai._back.visible = false;
                _this._drawShifter.centerX = 0;
                _this._drawShifter.centerY = -100;
                _this._table.addChild(_this._drawShifter);
                _this._drawShifter.zOrder = GameZorder.Ani;
                _this._drawShifter.ani1.play(1, false);
                Laya.timer.once(1500, _this, function () {
                    this._leftView.visible = true;
                    this._leftView.updateShifter();
                    this._drawShifter.ani1.stop();
                    this._drawShifter.removeSelf();
                    AnimationManager.instance.animationOver();
                });
            }, null);
        }
        else {
            if (this._leftView) {
                this._leftView.visible = true;
                this._leftView.updateShifter();
            }
            else {
                this._leftView = new LeftCardView();
                this._table.addChild(this._leftView);
                this._leftView.centerX = -250;
                this._leftView.centerY = -180;
                this._leftView.updateShifter();
            }
        }
    };
    TongluMjPage.prototype.initCardLayout = function () {
        _super.prototype.initCardLayout.call(this);
    };
    return TongluMjPage;
}(BaseMJPage));
//# sourceMappingURL=TongLuMjPage.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var tonglu_mj;
(function (tonglu_mj) {
    var WinCardView = /** @class */ (function (_super) {
        __extends(WinCardView, _super);
        function WinCardView(seatid, dir, callback) {
            var _this = _super.call(this, seatid, dir) || this;
            _this.registerCardView(tonglu_mj.CardView);
            return _this;
        }
        return WinCardView;
    }(BaseWinCardView));
    tonglu_mj.WinCardView = WinCardView;
})(tonglu_mj || (tonglu_mj = {}));
//# sourceMappingURL=WinCardView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
*遮罩
*/
var PanelMask = /** @class */ (function (_super) {
    __extends(PanelMask, _super);
    function PanelMask() {
        return _super.call(this) || this;
    }
    PanelMask.prototype.reset = function () {
        if (this._lastWidth == AppControl.getInstance().stage.width && this._lastHeight == AppControl.getInstance().stage.height) {
        }
        else {
            this._lastWidth = AppControl.getInstance().stage.width;
            this._lastHeight = AppControl.getInstance().stage.height;
            this.graphics.clear();
            this.graphics.drawRect(0, 0, AppControl.getInstance().stage.width, AppControl.getInstance().stage.height, "#000000", "#000000", 1);
            this.alpha = 0.7;
        }
    };
    return PanelMask;
}(Laya.Sprite));
//# sourceMappingURL=PanelMask.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 比赛奖励Renderer;
*/
var matchSign;
(function (matchSign) {
    var MatchHisRenderer = /** @class */ (function (_super) {
        __extends(MatchHisRenderer, _super);
        function MatchHisRenderer() {
            return _super.call(this) || this;
        }
        MatchHisRenderer.prototype.updata = function () {
            if (this.dataSource) {
                this._time.text = TimeUtils.timeChange(this.dataSource.end_time * 1000);
                this._award.visible = false;
                this._award.label = "";
                this._labRank.text = this.dataSource.title + "中获得第" + this.dataSource.rank + "名";
                if (this.dataSource.sys) {
                    matchSign.MatchSignData.getReward(this.dataSource.sys, function (data) {
                        var hasreward = false;
                        for (var k in data) {
                            var v = data[k];
                            if (this.dataSource.rank <= v.end_rank) {
                                hasreward = true;
                                if (v.type == 2) {
                                    this._labRank.text = this._labRank.text + "获得" + v.amount + "元红包";
                                }
                                else {
                                    this._labRank.text = this._labRank.text + "获得" + v.amount + "颗钻石";
                                }
                                break;
                            }
                        }
                        if (hasreward) {
                            this._award.visible = true;
                            if (this.dataSource.award == 0) {
                                this._award.skin = "matchSign/award_1.png";
                            }
                            else {
                                this._award.skin = "matchSign/award_2.png";
                            }
                        }
                        else {
                            this._award.visible = false;
                        }
                    }.bind(this));
                }
            }
        };
        return MatchHisRenderer;
    }(ui.matchSign.MatchHistoryRendererUI));
    matchSign.MatchHisRenderer = MatchHisRenderer;
})(matchSign || (matchSign = {}));
//# sourceMappingURL=MatchHisRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 比赛奖励Renderer;
*/
var matchSign;
(function (matchSign) {
    var MatchRewardRenderer = /** @class */ (function (_super) {
        __extends(MatchRewardRenderer, _super);
        function MatchRewardRenderer() {
            return _super.call(this) || this;
        }
        MatchRewardRenderer.prototype.updata = function (index, max) {
            if (this.dataSource) {
                if (index <= 3) {
                    this._labRank.text = "";
                    this._imgRank.visible = true;
                    this._imgRank.source = Laya.loader.getRes("matchSign/matchSign_rank_" + index + ".png");
                }
                else {
                    this._labRank.text = index + "";
                    this._imgRank.visible = false;
                }
                this._labReward.text = this.dataSource;
                this._imgLine.visible = index != max;
            }
        };
        return MatchRewardRenderer;
    }(ui.matchSign.MatchRewardRendererUI));
    matchSign.MatchRewardRenderer = MatchRewardRenderer;
})(matchSign || (matchSign = {}));
//# sourceMappingURL=MatchRewardRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 比赛报名所需Renderer;
*/
var matchSign;
(function (matchSign) {
    var MatchSignCostRenderer = /** @class */ (function (_super) {
        __extends(MatchSignCostRenderer, _super);
        function MatchSignCostRenderer() {
            return _super.call(this) || this;
        }
        MatchSignCostRenderer.prototype.updata = function () {
            if (this.dataSource) {
                this._btn.label = this.dataSource + "钻石";
            }
        };
        Object.defineProperty(MatchSignCostRenderer.prototype, "selected", {
            set: function (value) {
                this._btn.selected = value;
            },
            enumerable: true,
            configurable: true
        });
        return MatchSignCostRenderer;
    }(ui.matchSign.MatchSignCostRendererUI));
    matchSign.MatchSignCostRenderer = MatchSignCostRenderer;
})(matchSign || (matchSign = {}));
//# sourceMappingURL=MatchSignCostRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 创建比赛;
*/
var matchSign;
(function (matchSign) {
    var MatchSignCreateCtrl = /** @class */ (function (_super) {
        __extends(MatchSignCreateCtrl, _super);
        function MatchSignCreateCtrl() {
            var _this = _super.call(this) || this;
            _this._costArr = [1, 2, 3, 4, 5];
            _this["name"] = "MatchSignCreateCtrl";
            return _this;
        }
        Object.defineProperty(MatchSignCreateCtrl, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new MatchSignCreateCtrl();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        MatchSignCreateCtrl.prototype.show = function (gameType, param, cid, paytype) {
            if (cid === void 0) { cid = 0; }
            if (paytype === void 0) { paytype = 0; }
            this._gameType = gameType;
            this._cid = cid;
            this._data = param;
            this._paytype = paytype;
            this.showself();
        };
        /**
         * 这里完成new ui，添加注册监听等初始化工作
         */
        MatchSignCreateCtrl.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.matchSign.MatchSignCreateUI();
                // this._ui._pan.hScrollBar.visible=false;
                // this._signKind = new MatchSignKind();
                // this._ui.addChild(this._signKind);
                // this._signKind.x = this._ui._btnCreate.x + (this._ui._btnCreate.width - this._signKind.width) * 0.5;
                // this._signKind.bottom = this._ui._btnCreate.bottom + this._ui._btnCreate.height + 10;
                // this._signKind.visible = false;
                EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.hide);
                EventManager.instance.registerOnObject(this, this._ui._btnCreate, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._inputName, Laya.Event.INPUT, this, this.onInputChange);
                EventManager.instance.registerOnObject(this, this._ui._box, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnRule, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._imgCount, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._imgDiamond, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._radType, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.KEYBOARD_NUM, this, this.onInputCountChanged);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.MATCH_RULE_CHANGE, this, this.setRule);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.MATCH_CREATE_TIME_CHANGE, this, this.removeDate);
                this._ui._panel.vScrollBar.visible = false;
                this._ui._radType.selectHandler = new Laya.Handler(this, this.onSelectRadTypeChange);
                this._ui._inputName.text = StringUtils.format(GameConfig.language.match_name, Utils.getFitNickName(GameLogic.selfData.nickname, 10));
                if (GameLogic.selfData.permit) {
                    this._ui._boxRule.y = 455;
                    this._ui._inputDiamond.visible = this._ui._imgDiamond.visible = true;
                }
                else {
                    this._ui._boxRule.y = 380;
                    this._ui._inputDiamond.visible = this._ui._imgDiamond.visible = false;
                }
                // this._ui._tab.selectHandler = new Laya.Handler(this, this.checkTab);
                // this._ui._tab.selectedIndex = 0;
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        /**
        * 开启监听，配置宽高，添加到舞台
        */
        MatchSignCreateCtrl.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            this._ui._inputCount.text = "";
            this._ui._radType.selectedIndex = 0;
            matchSign.MatchSignRuleCtrl.instance.show(this._gameType.toString());
            if (String(this._gameType) == GameDef.GAME_TYPE.JINYUN_MJ) {
                matchSign.MatchSignRuleCtrl.instance.show(GameDef.GAME_TYPE.JINYUN_GS_MJ);
                matchSign.MatchSignRuleCtrl.instance.show(GameDef.GAME_TYPE.JINYUN_HZ_MJ);
            }
            matchSign.MatchSignRuleCtrl.instance.hide();
            this.checkTab();
            this.setRule();
            this._ui._imgInputBack.visible = false;
            this.tweenSelf();
        };
        /**
         * 离开时调度
         */
        MatchSignCreateCtrl.prototype.afterShow = function () {
            _super.prototype.afterShow.call(this);
            this._inputCount = "";
            this._inputTime = "";
            this.removeKeyboard();
        };
        MatchSignCreateCtrl.prototype.checkTab = function () {
            if (this._data.length > 1) {
                this._ui._panel.top = 169;
                this._ui._wanfa.removeChildren();
                this._tabBtns = [];
                for (var k in this._data) {
                    var btn = new component.BaseButton("createTable/gameTab.png", GameDef.GAME_NAME_CH[parseInt(this._data[k]) - 1]);
                    btn.stateNum = 3;
                    btn.labelSize = 28;
                    btn.labelColors = "#fff7b2,#fff7b2,#fff7b2,#fff7b2";
                    btn.labelStrokeColor = "#cb5a20";
                    btn.on(Laya.Event.CLICK, this, this.chooseWanFa, [this._data[k]]);
                    if (k == "0") {
                        btn.selected = true;
                        btn.labelStroke = 3;
                    }
                    else {
                        btn.labelStroke = 0;
                    }
                    this._ui._wanfa.addChild(btn);
                    this._tabBtns.push(btn);
                    btn.pos(172 * parseInt(k) + 30, 5);
                }
                // this.showCreateInfo(this._data[0])
            }
            else {
                this._ui._panel.top = 99;
                this._ui._wanfa.removeChildren();
                // this.showCreateInfo(this._gameType)
            }
        };
        MatchSignCreateCtrl.prototype.chooseWanFa = function (type, e) {
            for (var k in this._tabBtns) {
                var v = this._tabBtns[k];
                if (v == e.currentTarget) {
                    v.selected = true;
                    v.labelStroke = 3;
                }
                else {
                    v.selected = false;
                    v.labelStroke = 0;
                }
            }
            this._gameType = type;
            this.setRule();
            // this.showCreateInfo(type)
        };
        MatchSignCreateCtrl.prototype.onInputChange = function (e) {
            var flag;
            while (Utils.getCharCodeLength(this._ui._inputName.text) > 20) {
                flag = true;
                this._ui._inputName.text = this._ui._inputName.text.substring(0, this._ui._inputName.text.length - 1);
            }
            if (flag)
                HintCtrl.instance.show(GameConfig.language.match_name_too_long);
        };
        MatchSignCreateCtrl.prototype.onBoxTouch = function (e) {
            if (this._keyboard) {
                if (e.target != this._ui._imgCount && e.target != this._keyboard) {
                    this._keyboard.removeSelf();
                }
            }
        };
        MatchSignCreateCtrl.prototype.onTouch = function (e) {
            switch (e.currentTarget) {
                case this._keyboard:
                case this._date:
                    e.stopPropagation();
                    break;
                case this._ui._imgCount:
                    if (this._ui._radType.selectedIndex == 0) {
                        this.showKeyboard(1);
                    }
                    else {
                        this.removeKeyboard();
                        this.showDate();
                    }
                    e.stopPropagation();
                    break;
                case this._ui._imgDiamond:
                    this.removeDate(0);
                    this.showKeyboard(2);
                    e.stopPropagation();
                    break;
                case this._ui._btnRule:
                    matchSign.MatchSignRuleCtrl.instance.show(this._gameType.toString());
                    break;
                case this._ui._btnCreate:
                    this.create();
                    break;
                case this._ui._radType:
                    e.stopPropagation();
                    break;
                default:
                    this.removeKeyboard();
                    // this.removeDate();
                    break;
            }
        };
        MatchSignCreateCtrl.prototype.setRule = function () {
            var text = localStorage.getItem("matchRule_" + GameDef.GAME_NAME[this._gameType - 1]);
            if (text) {
                var tmp = JSON.parse(text);
                this._ui._labRule.text = tmp["desc"] == "" ? GameConfig.language.match_classical : tmp["desc"];
            }
        };
        MatchSignCreateCtrl.prototype.onSelectRadTypeChange = function (index) {
            if (index == 0) {
                this._ui._inputCount.prompt = "设定比赛人数";
                this._ui._inputCount.text = this._inputCount ? this._inputCount : "";
                this.removeDate(0);
                this.showKeyboard(1);
            }
            else {
                this._ui._inputCount.prompt = "设定比赛时间";
                this._ui._inputCount.text = this._inputTime ? this._inputTime : "";
                this.removeKeyboard();
                this.showDate();
            }
        };
        MatchSignCreateCtrl.prototype.onInputCountChanged = function (key) {
            var input;
            if (this._currentKeyboard == 1)
                input = this._ui._inputCount;
            else
                input = this._ui._inputDiamond;
            var num;
            switch (key) {
                case "10":
                    input.text = "";
                    break;
                case "12":
                    input.text = input.text.substr(0, input.text.length - 1);
                    break;
                case "11":
                    input.text += "0";
                    break;
                default:
                    input.text += key;
                    break;
            }
            if (this._currentKeyboard == 1)
                this._inputCount = input.text;
        };
        MatchSignCreateCtrl.prototype.showKeyboard = function (value) {
            this._currentKeyboard = value;
            this._ui._imgInputBack.visible = true;
            if (!this._keyboard) {
                this._keyboard = new KeyBoardNumUI();
                this._keyboard.centerX = 0;
                this._keyboard.bottom = 20;
            }
            this._ui._box.addChild(this._keyboard);
            this._keyboard.on(Laya.Event.CLICK, this, this.onTouch);
        };
        MatchSignCreateCtrl.prototype.removeKeyboard = function () {
            if (this._keyboard && this._keyboard.parent) {
                this._keyboard.removeSelf();
                this._keyboard.off(Laya.Event.CLICK, this, this.onTouch);
                if (!this._date || !this._date.parent)
                    this._ui._imgInputBack.visible = false;
            }
        };
        MatchSignCreateCtrl.prototype.showDate = function () {
            this._ui._imgInputBack.visible = true;
            if (!this._date) {
                this._date = new DateUI();
                this._date.centerX = 0;
                this._date.bottom = 0;
            }
            this._date.getDate();
            if (!this._date.parent) {
                this._date.start();
                this._ui._box.addChild(this._date);
            }
        };
        MatchSignCreateCtrl.prototype.removeDate = function (value) {
            if (this._date && this._date.parent) {
                if (value == 1) {
                    this._startTime = this._date.getTime();
                    var now = server.serverTime ? server.serverTime * 1000 : new Date().getTime();
                    if (this._startTime < (now + 2000 * 60)) {
                        AlertInGameCtrl.instance.show(GameConfig.language.create_match_error_1, null, 0, false);
                        return;
                    }
                    this._date.removeSelf();
                    this._date.off(Laya.Event.CLICK, this, this.onTouch);
                    this._date.stop();
                    var d = new Date(this._startTime);
                    var h = d.getHours();
                    var m = d.getMinutes();
                    if (this._ui._radType.selectedIndex == 1)
                        this._ui._inputCount.text = StringUtils.format(GameConfig.language.format_m_d_h_m, "", d.getMonth() + 1, d.getDate(), h < 10 ? "0" + h : h, m < 10 ? "0" + m : m);
                    this._inputTime = this._ui._inputCount.text;
                }
                else {
                    this._date.removeSelf();
                    this._date.off(Laya.Event.CLICK, this, this.onTouch);
                    this._date.stop();
                }
                if (!this._keyboard || !this._keyboard.parent)
                    this._ui._imgInputBack.visible = false;
            }
        };
        MatchSignCreateCtrl.prototype.create = function () {
            var _this = this;
            if (!this._ui._inputName.text) {
                HintCtrl.instance.show(GameConfig.language.matchsign_noname);
                return;
            }
            var matchmode;
            var starttime;
            var playercnt;
            if (this._ui._radType.selectedIndex == 0) {
                matchmode = MatchConfig.MATCH_MODE_MEMBER;
                if (!this._ui._inputCount.text) {
                    HintCtrl.instance.show(GameConfig.language.matchsign_no_member);
                    return;
                }
                if (Number(this._ui._inputCount.text) < 8 || Number(this._ui._inputCount.text) > 3000) {
                    HintCtrl.instance.show(GameConfig.language.match_member_limit);
                    return;
                }
                playercnt = this._ui._inputCount.text;
            }
            else {
                matchmode = MatchConfig.MATCH_MODE_TIME;
                if (!this._ui._inputCount.text) {
                    HintCtrl.instance.show(GameConfig.language.matchsign_no_time);
                    return;
                }
                var now = new Date().getTime();
                if (this._startTime < (now + 2000 * 60)) {
                    AlertInGameCtrl.instance.show(GameConfig.language.create_match_error_1, null, 0, false);
                    this.showDate();
                    return;
                }
                starttime = Math.floor(this._startTime * 0.001) + "";
            }
            var title = Utils.getFitNickName(this._ui._inputName.text, 20);
            var cost = this._ui._inputDiamond.text ? this._ui._inputDiamond.text : "0";
            var desc = "第一名10元红包";
            var matchRule = JSON.stringify({ matchmode: matchmode, title: title, cost: cost, playercnt: playercnt, starttime: starttime, desc: desc });
            var text = localStorage.getItem("matchRule_" + GameDef.GAME_NAME[this._gameType - 1]);
            if (text) {
                var tmp = JSON.parse(text);
                var rule = {};
                for (var i in tmp) {
                    if (i != "desc")
                        rule[i] = tmp[i];
                }
                // if (String(this._gameType) == GameDef.GAME_TYPE.JINYUN_MJ || String(this._gameType) == GameDef.GAME_TYPE.JINYUN_HZ_MJ)
                // rule.xia_zhuang = 0;
                // rule.gps = 0;
                // rule.charge_type = 0;
                // rule.max_hand_cnt = matchSign.JinYunMJ.maxHandCnt;
                // tmp.desc=null;
            }
            var str = JSON.stringify(rule);
            if (matchmode == MatchConfig.MATCH_MODE_TIME) {
                AlertInGameCtrl.instance.show(GameConfig.language.create_match_tip_1, function (value) {
                    if (value == AlertCtrl.CONFIRM)
                        _this.gotoCreate(tmp.max_player, str, matchRule);
                });
            }
            else
                this.gotoCreate(tmp.max_player, str, matchRule);
            // console.info(this._desc)
            // var score: string = "0"
            // var count: string = this._newCreateInfo["max_hand_cnt"]
            // webService.createTable(this._gameType, this._name, count, this._newCreateInfo["max_player"], str, (response: any) => {
            // }
            // );
        };
        MatchSignCreateCtrl.prototype.gotoCreate = function (maxPlayer, str, matchRule) {
            var _this = this;
            matchSignService.createMatch(this._cid, this._gameType + "", GameDef.GAME_NAME[this._gameType - 1], "0", maxPlayer, str, matchRule, function (response) {
                if (response.code == 0) {
                    matchSign.MatchSignData.getMatchList();
                    HintCtrl.instance.show(GameConfig.language.create_succ);
                    _this.hide();
                    Dispatcher.dispatch(EventNames.CREATE_MATCH_SUCC);
                }
                else {
                    HintCtrl.instance.show("创建失败");
                }
            });
        };
        return MatchSignCreateCtrl;
    }(BaseCtrl));
    matchSign.MatchSignCreateCtrl = MatchSignCreateCtrl;
})(matchSign || (matchSign = {}));
//# sourceMappingURL=MatchSignCreateCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 比赛报名;
*/
var matchSign;
(function (matchSign) {
    var MatchSignCtrl = /** @class */ (function (_super) {
        __extends(MatchSignCtrl, _super);
        function MatchSignCtrl() {
            var _this = _super.call(this) || this;
            _this["name"] = "MatchSignCtrl";
            return _this;
        }
        Object.defineProperty(MatchSignCtrl, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new MatchSignCtrl();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        MatchSignCtrl.prototype.show = function () {
            this.showself();
        };
        /**
         * 这里完成new ui，添加注册监听等初始化工作
         */
        MatchSignCtrl.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.matchSign.MatchSignUI();
                this._signKind = new matchSign.MatchSignKind();
                this._ui.addChild(this._signKind);
                this._signKind.x = this._ui._btnCreate.x + (this._ui._btnCreate.width - this._signKind.width) * 0.5;
                this._signKind.bottom = this._ui._btnCreate.bottom + this._ui._btnCreate.height + 10;
                this._signKind.visible = false;
                EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.hide);
                EventManager.instance.registerOnObject(this, this._ui._btnCreate, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnJoin, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnHelp, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._hisclose, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._matchhistory, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._box, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.MATCH_LIST_CHANGE, this, this.onListChange);
                this._ui._list.itemRender = matchSign.MatchSignMatchListRenderer;
                this._ui._list.scrollBar.elasticDistance = 100;
                this._ui._list.scrollBar.visible = false;
                this._ui._list.renderHandler = new Laya.Handler(this, this.updateList);
                this._ui._list.array = [];
                this._ui._list.mouseHandler = new Laya.Handler(this, this.selectList);
                this._ui._hislist.itemRender = matchSign.MatchHisRenderer;
                this._ui._hislist.scrollBar.visible = false;
                this._ui._hislist.scrollBar.elasticDistance = 100;
                this._ui._hislist.selectEnable = true;
                this._ui._hislist.renderHandler = new Laya.Handler(this, this.updateHisList);
                this._ui._hislist.mouseHandler = new Laya.Handler(this, this.onSelect);
                this._ui._hislist.scrollBar.on(Laya.Event.CHANGE, this, this.onScrollListsChanged);
                this._ui._hislist.array = [];
                // this._ui._tab.selectHandler = new Laya.Handler(this, this.checkTab);
                // this._ui._tab.selectedIndex = 0;
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        /***渲染单元格时的回调方法***/
        MatchSignCtrl.prototype.updateHisList = function (cell, index) {
            cell.updata();
        };
        MatchSignCtrl.prototype.getReward = function (gid) {
            webService.getMatchReward(server.uid, gid, function (data) {
                if (data.code == 0) {
                    for (var k in this._listArr) {
                        var v = this._listArr[k];
                        if (v.gid == gid) {
                            v.award = 1;
                            break;
                        }
                    }
                }
            }.bind(this));
        };
        /***选择单元格回调***/
        MatchSignCtrl.prototype.onSelect = function (e) {
            if (e.type == Laya.Event.CLICK) {
                if (e.target.name == "award") {
                    var gid = e.target.parent.dataSource.gid;
                    this.getReward(gid);
                }
                else {
                    var gid = e.target.dataSource.gid;
                    this.getReward(gid);
                }
            }
            // else if (e.type == Laya.Event.MOUSE_OUT) {
            //     if (this._list.scrollBar.value >= this._list.scrollBar.max)
            //         this.getNextPage();
            // }
        };
        MatchSignCtrl.prototype.onScrollListsChanged = function () {
            if (this._ui._list.scrollBar.value < 0)
                this._refreshFirstPage = true;
            else if (this._ui._hislist.scrollBar.value > 0)
                this._refreshFirstPage = false;
            if (this._refreshFirstPage && this._ui._hislist.scrollBar.value == 0)
                this.getFirstPage(true);
            if (this._ui._hislist.scrollBar.value > this._ui._hislist.scrollBar.max)
                this._refreshListsMore = true;
            else if (this._ui._hislist.scrollBar.value < this._ui._hislist.scrollBar.max)
                this._refreshListsMore = false;
            if (this._refreshListsMore && this._ui._hislist.scrollBar.value == this._ui._hislist.scrollBar.max)
                this.getNextPage();
        };
        Object.defineProperty(MatchSignCtrl.prototype, "lastGInfo", {
            get: function () {
                if (this._lastGid && this._lastGtype)
                    return true;
                else
                    return false;
            },
            enumerable: true,
            configurable: true
        });
        MatchSignCtrl.prototype.getFirstPage = function (isRefresh) {
            if (isRefresh === void 0) { isRefresh = false; }
            if (!this._isFirstPageGet || isRefresh) {
                if (!this._isFirstPageGet)
                    webService.getMatchHistoryList(1, 3, this.onGetHistoryList.bind(this));
                this._isFirstPageGet = true;
            }
        };
        MatchSignCtrl.prototype.getNextPage = function () {
            if (this._currRefreshPage < this._maxPageCount)
                webService.getMatchHistoryList(this._currRefreshPage + 1, 3, this.onGetHistoryList.bind(this));
        };
        MatchSignCtrl.prototype.clear = function () {
            this._isFirstPageGet = false;
            this._currRefreshPage = 0;
            this._maxPageCount = 0;
            this._listArr = [];
            // this._dicDetail = {};
            // this._detailTotal = {};
        };
        MatchSignCtrl.prototype.onGetHistoryList = function (response) {
            if (response.code == 0) {
                if (this._currRefreshPage < response.page)
                    this._currRefreshPage = response.page;
                this._maxPageCount = response.page_cnt;
                for (var i = 0; i < response.data.length; i++) {
                    var flag = true;
                    for (var j = 0; j < this._listArr.length; j++) {
                        if (this._listArr[j].gid == response.data[i].gid) {
                            flag = false;
                            break;
                        }
                    }
                    if (flag)
                        this._listArr.push(response.data[i]);
                }
                this._listArr.sort(this.onSort);
                this._ui._hislist.array = this._listArr;
            }
        };
        MatchSignCtrl.prototype.onSort = function (a, b) {
            if (!a.hasOwnProperty("end_time"))
                a.end_time = 0;
            if (!b.hasOwnProperty("end_time"))
                b.end_time = 0;
            if (a.end_time > b.end_time)
                return -1;
            else if (a.end_time < b.end_time)
                return 1;
            else
                return 0;
        };
        /**
        * 开启监听，配置宽高，添加到舞台
        */
        MatchSignCtrl.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            this._signKind.visible = false;
            this._ui._hisbox.visible = false;
            this.checkTab();
            this.startTimer();
        };
        /**
         * 离开时调度
         */
        MatchSignCtrl.prototype.afterShow = function () {
            _super.prototype.afterShow.call(this);
            for (var i = 0; i < this._ui._list.cells.length; i++) {
                this._ui._list.cells[i].stopTimer();
            }
            this.stopTimer();
        };
        MatchSignCtrl.prototype.onTouch = function (e) {
            switch (e.currentTarget) {
                case this._ui._btnHelp:
                    HelpCtrl.instance.show(true, [1]);
                    e.stopPropagation();
                    break;
                case this._ui._btnCreate:
                    this._signKind.visible = !this._signKind.visible;
                    e.stopPropagation();
                    break;
                case this._ui._btnJoin:
                    JoinTableCtrl.instance.show();
                    e.stopPropagation();
                    break;
                case this._ui._matchhistory:
                    this._ui._hisbox.visible = true;
                    this.clear();
                    this.getFirstPage(true);
                    break;
                case this._ui._hisclose:
                    this._ui._hisbox.visible = false;
                    break;
                default:
                    this._signKind.visible = false;
                    break;
            }
        };
        /***渲染单元格时的回调方法***/
        MatchSignCtrl.prototype.updateList = function (cell, index) {
            cell.updata();
        };
        MatchSignCtrl.prototype.selectList = function (e, index) {
            var _this = this;
            if (e.type == Laya.Event.CLICK) {
                if (e.target instanceof Laya.Button && e.target.name != "returnMatch") {
                }
                else {
                    webService.joinTable(String(this._ui._list.getItem(index).code), function (response) {
                        if (response.code == 0) {
                            GameConfig.setServerUrl(response.ip);
                            GameConfig.joinTable(response);
                        }
                        else {
                            AlertInGameCtrl.instance.show(GameConfig.language.match_not_exist, null, 0, false);
                            _this.checkTab();
                        }
                    });
                }
            }
        };
        MatchSignCtrl.prototype.checkTab = function () {
            matchSign.MatchSignData.getMatchList();
            this._ui._list.scrollBar.value = 0;
        };
        MatchSignCtrl.prototype.onListChange = function () {
            this._ui._labNoHistory.visible = matchSign.MatchSignData._matchShowList.length == 0;
            this._ui._list.array = matchSign.MatchSignData._matchShowList;
        };
        MatchSignCtrl.prototype.startTimer = function () {
            this.stopTimer();
            Laya.timer.loop(10 * 1000, this, this.onTimer);
        };
        MatchSignCtrl.prototype.stopTimer = function () {
            Laya.timer.clear(this, this.onTimer);
        };
        MatchSignCtrl.prototype.onTimer = function () {
            if (!matchSign.MatchSignInfoCtrl.instance.parent)
                matchSign.MatchSignData.getStatus();
        };
        return MatchSignCtrl;
    }(BaseCtrl));
    matchSign.MatchSignCtrl = MatchSignCtrl;
})(matchSign || (matchSign = {}));
//# sourceMappingURL=MatchSignCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 比赛信息页面;
*/
var matchSign;
(function (matchSign) {
    var MatchSignInfoCtrl = /** @class */ (function (_super) {
        __extends(MatchSignInfoCtrl, _super);
        function MatchSignInfoCtrl() {
            var _this = _super.call(this) || this;
            _this._canRefreshUserList = true;
            _this["name"] = "MatchSignInfoCtrl";
            return _this;
        }
        Object.defineProperty(MatchSignInfoCtrl, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new MatchSignInfoCtrl();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        MatchSignInfoCtrl.prototype.show = function (code) {
            this._match = matchSign.MatchSignData.getInfoByCode(code);
            matchSign.MatchSignData.backCode = 0;
            this.showself();
        };
        /**
         * 这里完成new ui，添加注册监听等初始化工作
         */
        MatchSignInfoCtrl.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.matchSign.MatchSignInfoUI();
                this._ui._rulebox.zOrder = 10;
                var fontData1 = new FontData();
                fontData1.init(FontConfig.FONT_MATCHSIGN_1, Laya.loader.getRes(ResourceConfig.BITMAP_FONT_MATCHSIGN1_JSON), Laya.loader.getRes(ResourceConfig.BITMAP_FONT_MATCHSIGN1_PNG), 200, BPFont.LEFT);
                var fontData2 = new FontData();
                fontData2.init(FontConfig.FONT_MATCHSIGN_1, Laya.loader.getRes(ResourceConfig.BITMAP_FONT_MATCHSIGN1_JSON), Laya.loader.getRes(ResourceConfig.BITMAP_FONT_MATCHSIGN1_PNG), 264, BPFont.CENTER);
                var fontData3 = new FontData();
                fontData3.init(FontConfig.FONT_MATCHSIGN_1, Laya.loader.getRes(ResourceConfig.BITMAP_FONT_MATCHSIGN1_JSON), Laya.loader.getRes(ResourceConfig.BITMAP_FONT_MATCHSIGN1_PNG), 200, BPFont.RIGHT);
                // this._fontMember = FontManager.instance.addFont(fontData1);
                // this._fontMember.text = "1/1";
                // this._ui._box.addChild(this._fontMember);
                // this._fontMember.pos(300, 142);
                // this._fontCode = FontManager.instance.addFont(fontData1);
                // this._fontCode.text = "1/1";
                // this._ui._box.addChild(this._fontCode);
                // this._fontCode.pos(318, 190);
                this._fontRank = FontManager.instance.addFont(fontData1);
                this._fontRank.text = "1名";
                this._ui._box.addChild(this._fontRank);
                this._fontRank.x = 287;
                this._fontRank.bottom = 50;
                this._fontCost = FontManager.instance.addFont(fontData3);
                this._fontCost.text = "";
                this._ui._box.addChild(this._fontCost);
                this._fontCost.x = this._ui._imgDiamond.x - 210;
                this._fontCost.y = 170;
                this._fontTime = FontManager.instance.addFont(fontData2);
                this._fontTime.text = "00:00";
                this._ui._box.addChild(this._fontTime);
                this._fontTime.centerX = 350;
                this._fontTime.y = 180;
                // this._fontTime.zOrder = 1;
                this._fontNotStart = FontManager.instance.addFont(fontData2);
                this._fontNotStart.text = "11";
                this._ui._box.addChild(this._fontNotStart);
                this._fontNotStart.centerX = 260;
                this._fontNotStart.y = 235;
                this._fontNotStart.zOrder = 1;
                EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, server, EventNames.CONNECT_SERVER, this, this.onConnectToServer);
                EventManager.instance.registerOnObject(this, server, EventNames.SERVER_ERROR, this, this.onServerError);
                EventManager.instance.registerOnObject(this, server, EventNames.SHOW_DISCONNECT, this, this.onDisconnectServer);
                EventManager.instance.registerOnObject(this, server, EventNames.GAME_MATCH_HALL_STATUS_REP, this, this.onMatchHallStatusRepHandler);
                EventManager.instance.registerOnObject(this, server, EventNames.GAME_MATCH_HALL_USER_LIST_REP, this, this.onMatchHallUserListRepHandler);
                EventManager.instance.registerOnObject(this, server, EventNames.GAME_MATCH_HALL_SIGNIN_NTF, this, this.onMatchHallSigninNtfHandler);
                EventManager.instance.registerOnObject(this, server, EventNames.GAME_MATCH_HALL_STATUS_NTF, this, this.onMatchHallStatusNtfHandler);
                EventManager.instance.registerOnObject(this, server, EventNames.GAME_MATCH_SIGNUP_REP, this, this.onMatchSignupRepHandler);
                EventManager.instance.registerOnObject(this, server, EventNames.GAME_MATCH_SIGNOUT_REP, this, this.onMatchSignoutRepHandler);
                EventManager.instance.registerOnObject(this, server, EventNames.GAME_MATCH_HALL_WILL_START_NTF, this, this.onMatchHallWillStartNtfHandler);
                EventManager.instance.registerOnObject(this, server, EventNames.GAME_MATCH_HALL_START_NTF, this, this.onMatchHallStartNtfHandler);
                EventManager.instance.registerOnObject(this, server, EventNames.MATCH_OVER, this, this.onMatchOverNtfHandler);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.MATCH_NEW_LIST, this, this.onListChange);
                EventManager.instance.registerOnObject(this, this._ui._btnSign, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnCancelSign, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnReturnMatch, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnManager, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnTab, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnTab2, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnShare, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._labHelp, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._tab1, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._tab2, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._tab3, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._box, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnback, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnDetail, Laya.Event.CLICK, this, this.onTouch);
                this._ui._listUser.itemRender = matchSign.MatchSignUserListRenderer;
                this._ui._listUser.scrollBar.elasticDistance = 100;
                this._ui._listUser.scrollBar.visible = false;
                this._ui._listUser.renderHandler = new Laya.Handler(this, this.updateList);
                this._ui._listUser.array = [];
                this._ui._listUser2.itemRender = matchSign.MatchSignUserList2Renderer;
                this._ui._listUser2.scrollBar.elasticDistance = 100;
                this._ui._listUser2.scrollBar.visible = false;
                this._ui._listUser2.renderHandler = new Laya.Handler(this, this.updateList);
                this._ui._listUser2.array = [];
                // this._ui._listReward.itemRender = MatchRewardRenderer;
                // this._ui._listReward.scrollBar.elasticDistance = 100;
                // this._ui._listReward.scrollBar.visible = false;
                // this._ui._listReward.renderHandler = new Laya.Handler(this, this.updateRewardList);
                // this._ui._listReward.array = [];
                // this._ui._btnTab.visible = true;
                // this._ui._btnTab2.visible = false;
                // this._ui._btnTab.hitArea = new Laya.Rectangle(204, 0, 162, 57);
                // this._ui._btnTab2.hitArea = new Laya.Rectangle(0, 0, 162, 57);
                this._ui._panel.vScrollBar.visible = false;
                this._ui._rulepanel.vScrollBar.visible = false;
                this._ui._rewardpanel.itemRender = matchSign.MatchSignRewardRenderer;
                this._ui._rewardpanel.scrollBar.visible = false;
                this._ui._rewardpanel.renderHandler = new Laya.Handler(this, this.updateRewardList);
                this._ui._rewardpanel.array = [];
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        // private updateListDetail(cell: laya.ui.Label, index: number): void {
        // 	cell.text = cell.dataSource;
        // }
        /**
        * 开启监听，配置宽高，添加到舞台
        */
        MatchSignInfoCtrl.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            this._ui._boxWarn.visible = false;
            this._isBoxWarnShow = false;
            this._match.sequence = 0;
            this.update();
            if (this.isFreeMatch) {
                // this._ui._btnTab.visible = true;
                // this._ui._btnTab2.visible = false;
                // this._ui._boxTab.visible = false;
            }
            else {
                // this._ui._btnTab.visible = false;
                // this._ui._btnTab2.visible = false;
                // this._ui._boxTab.visible = true;
                // this._ui._imgTab1.visible = true;
                // this._ui._imgTab2.visible = this._ui._imgTab3.visible = false;
            }
            this._ui._boxUserTitle.visible = false;
            if (this._match.mrule.cost && Number(this._match.mrule.cost)) {
                this._ui._labCost.visible = true;
                this._ui._imgFree.visible = false;
                this._ui._labCost.text = this._match.mrule.cost + "钻石";
            }
            else {
                this._ui._labCost.visible = false;
                this._ui._imgFree.visible = true;
            }
            this.checkTab();
            server.code = this._match.code;
            matchSign.MatchSignData.currentMatchCode = this._match.code;
            BaseGameData.gameType = this._match.gtype;
            WxWeb.instance.onShare();
            LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_ATONCE);
            server.connect();
        };
        /**
         * 离开时调度
         */
        MatchSignInfoCtrl.prototype.afterShow = function () {
            _super.prototype.afterShow.call(this);
            this.stopTimer();
            this.stopRefreshUserList();
            this.clearMatchList();
            matchSign.MatchSignData.getStatus();
        };
        /**
        * 连接上服务器
        */
        MatchSignInfoCtrl.prototype.onConnectToServer = function () {
            LoadingUI.instance.hide();
            server.matchHallStatusReq();
            // MatchSignData.getReward(this._match.code, null);
        };
        /**
         * 连接失败
         */
        MatchSignInfoCtrl.prototype.onServerError = function () {
        };
        /**
        * 断开连接
        */
        MatchSignInfoCtrl.prototype.onDisconnectServer = function (code) {
            if (code) {
                LoadingUI.instance.hide();
                AlertInGameCtrl.instance.show(GameConfig.language.socket_disconnect[code], this.back, 0, false);
            }
            else
                LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_ATONCE);
            this.clearMatchList();
        };
        MatchSignInfoCtrl.prototype.clearMatchList = function () {
            this._canRefreshUserList = true;
            this._match.sequence = 0;
            if (this._match.userlist) {
                while (this._match.userlist.length) {
                    this._match.userlist.pop();
                }
            }
        };
        MatchSignInfoCtrl.prototype.back = function () {
            MatchSignInfoCtrl.instance.hide();
        };
        /***渲染单元格时的回调方法***/
        MatchSignInfoCtrl.prototype.updateList = function (cell, index) {
            cell.updata();
        };
        /***渲染单元格时的回调方法***/
        MatchSignInfoCtrl.prototype.updateRewardList = function (cell, index) {
            cell.updata();
        };
        MatchSignInfoCtrl.prototype.update = function () {
            if (this.parent) {
                this.updateTop();
                this.updateMiddle();
                this.updateBottom();
            }
        };
        MatchSignInfoCtrl.prototype.updateTop = function () {
            this._ui._imgName.skin = "res/gameIcon/gameIcon_matchInfo_" + this._match.gtype + ".png";
            // this._fontCode.text = this._match.code + "";
            this._ui._roomcode.text = "比赛邀请码:" + this._match.code;
            this._ui._labTitle.text = this._match.mrule.title;
            this._ui._labTitle1.text = this._match.mrule.title;
            var matchrule = this._match.mrule;
            this._ui._imgTime.visible = false;
            this._ui._imgWillStart.visible = false;
            this._ui._imgMatching.visible = false;
            this._ui._imgMember.visible = false;
            this._ui._fontMember.visible = false;
            this._ui._labTotalMember.visible = false;
            this._fontTime.visible = false;
            this._fontNotStart.visible = false;
            this._ui._imgTimeNotStart.visible = false;
            //定时赛
            if (MatchConfig.isModeTime(matchrule.matchmode)) {
                //已开赛
                if (MatchConfig.isMatchStart(this._match.status)) {
                    this._ui._imgMatching.visible = true;
                    this._fontTime.visible = true;
                    this.startTimer();
                }
                //未开赛
                else {
                    var now = server.serverTime ? server.serverTime * 1000 : new Date().getTime();
                    var starttime = Number(matchrule.starttime) * 1000;
                    var leftTime = starttime - now;
                    if (leftTime < 0) {
                        this._ui._imgWillStart.visible = true;
                        this._fontTime.visible = true;
                        this._fontNotStart.visible = this._ui._imgTimeNotStart.visible = true;
                        if (!this._isBoxWarnShow) {
                            this._ui._boxWarn.visible = true;
                            this._isBoxWarnShow = true;
                        }
                        this._fontNotStart.text = this._match.mrule.min_player ? this._match.mrule.min_player + "" : "0";
                        this._ui._labWarn.text = StringUtils.format("比赛人数未满{0}人,暂时无法开赛", this._match.mrule.min_player ? this._match.mrule.min_player : 0);
                    }
                    // 距离开赛时间30分钟以内
                    else if (leftTime < (30 * 60 * 1000)) {
                        this._ui._imgWillStart.visible = true;
                        this.startTimer();
                        this._fontTime.visible = true;
                    }
                    else {
                        // this._ui._imgTime.visible = true;
                        // this._ui._imgTime.skin = "matchSign/matchSign_img_17.png";
                        var d = new Date(starttime);
                        var h = d.getHours();
                        var m = d.getMinutes();
                        this._fontTime.text = StringUtils.format(GameConfig.language.format_m_d_h_m, "", d.getMonth() + 1, d.getDate(), h < 10 ? "0" + h : h, m < 10 ? "0" + m : m);
                        this._fontTime.visible = true;
                    }
                }
            }
            else if (MatchConfig.isModeMember(matchrule.matchmode)) {
                //已开赛
                if (MatchConfig.isMatchStart(this._match.status)) {
                    this._ui._imgMatching.visible = true;
                    if (this._match.mrule.starttime > 0) {
                        this.startTimer();
                        this._fontTime.visible = true;
                    }
                }
                //未开赛
                else {
                    // this._ui._imgTime.visible = true;
                    // this._ui._imgTime.skin = "matchSign/matchSign_img_27.png";
                    this._ui._imgMember.visible = true;
                    this._ui._labTotalMember.visible = true;
                    this._ui._labTotalMember.text = "满" + matchrule.playercnt + "人开赛";
                    this._ui._fontMember.visible = true;
                    this._ui._fontMember.text = (this._match.cnt ? this._match.cnt : 0) + "/" + matchrule.playercnt;
                }
            }
        };
        MatchSignInfoCtrl.prototype.updateMiddle = function () {
            var isSignin = Number(this._match.signin) != 0;
            if (MatchConfig.isMatchStart(this._match.status)) {
                this._ui._labMemberCount1.text = this._ui._labMemberCount2.text = "";
                //定时赛
                if (MatchConfig.isModeTime(this._match.mrule.matchmode))
                    this._ui._labCurrentMember1.text = this._ui._labCurrentMember2.text = StringUtils.format(GameConfig.language.current_member, this._match.leftcnt ? this._match.leftcnt : this._match.cnt, this._match.cnt);
                else if (MatchConfig.isModeMember(this._match.mrule.matchmode))
                    this._ui._labCurrentMember1.text = this._ui._labCurrentMember2.text = StringUtils.format(GameConfig.language.current_member, this._match.leftcnt ? this._match.leftcnt : this._match.mrule.playercnt, this._match.mrule.playercnt);
                if (isSignin)
                    this._ui._labMyRank1.text = this._ui._labMyRank2.text = StringUtils.format(GameConfig.language.my_rank, this._match.rank ? this._match.rank : 1);
                else
                    this._ui._labMyRank1.text = this._ui._labMyRank2.text = "";
            }
            else {
                this._ui._labMemberCount1.text = this._ui._labMemberCount2.text = StringUtils.format(GameConfig.language.matchsign_min_member3, this._match.cnt ? this._match.cnt : 0);
                this._ui._labCurrentMember1.text = this._ui._labCurrentMember2.text = "";
                this._ui._labMyRank1.text = this._ui._labMyRank2.text = "";
            }
            if (this._match.hasOwnProperty("userlist")) {
                if (this._match.userlist.length && this._match.userlist[0].hasOwnProperty("rank")) {
                    this._ui._listUser.visible = this._ui._boxUserTitle.visible = true;
                    this._ui._listUser2.visible = false;
                    this._ui._listUser.array = this._match.userlist;
                }
                else {
                    this._ui._listUser.visible = this._ui._boxUserTitle.visible = false;
                    this._ui._listUser2.visible = true;
                    this._ui._listUser2.array = this._match.userlist;
                }
            }
            this._ui._labRule.text = GameConfig.DESC[this._match.code] == "" ? GameConfig.language.match_classical : GameConfig.DESC[this._match.code];
        };
        MatchSignInfoCtrl.prototype.updateBottom = function () {
            this._ui._labBottom.text = "";
            this._fontRank.visible = false;
            if (this._match.hasOwnProperty("status")) {
                var isSignin = Number(this._match.signin) != 0;
                var isOut = Number(this._match.signin) == 2;
                this._ui._btnSign.disabled = false;
                this._ui._labFinalRank.visible = false;
                this._ui._labSignOver.visible = false;
                //管理者
                if (this._match.owner == server.uid) {
                    // this._ui._btnSign.centerX = this._ui._btnCancelSign.centerX = this._ui._btnReturnMatch.centerX = -120;
                    // this._ui._btnManager.centerX = 120;
                    // this._ui._btnManager.visible = true;
                    // this._ui._labBottom.centerX = NaN;
                    // this._ui._labBottom.x = 44;
                    // this._ui._labBottom.bottom = 70;
                    // this._ui._labFinalRank.centerX = -120;
                    // this._ui._labSignOver.centerX = -154;
                }
                else {
                    // this._ui._btnSign.centerX = this._ui._btnCancelSign.centerX = this._ui._btnReturnMatch.centerX = 0;
                    // this._ui._btnManager.centerX = 120;
                    // this._ui._btnManager.visible = false;
                    // this._ui._labBottom.centerX = 0;
                    // this._ui._labBottom.bottom = 94;
                    // this._ui._labFinalRank.centerX = -30;
                    // this._ui._labSignOver.centerX = 0;
                }
                //比赛已开始
                if (MatchConfig.isMatchStart(this._match.status)) { //MatchConfig.isMatchStart(this._match.status)
                    this._ui._btnCancelSign.visible = false;
                    //已报名
                    if (isSignin) { //isSignin
                        //已淘汰
                        if (isOut) { //isOut
                            if (this._match.owner == server.uid) {
                                this._ui._labBottom.text = GameConfig.language.knock_out2;
                                this._fontRank.x = this._ui._labBottom.x + this._ui._labBottom.width + 5;
                                this._fontRank.bottom = 64;
                            }
                            else {
                                this._ui._labBottom.text = GameConfig.language.knock_out;
                                this._fontRank.x = this._ui._labFinalRank.x + this._ui._labFinalRank.width + 5;
                                this._fontRank.bottom = 48;
                                this._ui._labFinalRank.visible = true;
                            }
                            this._fontRank.text = this._match.rank ? this._match.rank + "" : "1";
                            this._fontRank.visible = true;
                            this._ui._btnReturnMatch.visible = false;
                            this._ui._btnSign.visible = false;
                        }
                        else {
                            // this._ui._labBottom.text = GameConfig.language.in_match;
                            this._ui._btnReturnMatch.visible = true;
                            this._ui._btnReturnMatch.alpha = 0;
                            this._ui._btnSign.visible = false;
                        }
                    }
                    //未报名
                    else {
                        this._ui._btnReturnMatch.visible = false;
                        this._ui._btnSign.visible = true;
                        //定时赛
                        if (MatchConfig.isModeTime(this._match.mrule.matchmode)) {
                            //不能报名
                            if (this._match.status == MatchConfig.MATCH_STATUS_BEGIN_CAN_NOT_SIGNIN) {
                                this._ui._btnSign.disabled = true;
                                this._ui._labSignOver.visible = true;
                                // this._ui._labBottom.text = GameConfig.language.can_not_signin;
                            }
                        }
                        else if (MatchConfig.isModeMember(this._match.mrule.matchmode)) {
                            //已经不能报名
                            if (this._match.status >= MatchConfig.MATCH_STATUS_BEGIN_CAN_SIGNIN) {
                                this._ui._btnSign.disabled = true;
                                this._ui._labSignOver.visible = true;
                                // this._ui._labBottom.text = GameConfig.language.can_not_signin;
                            }
                        }
                    }
                }
                //比赛未开始
                else {
                    this._ui._btnReturnMatch.visible = false;
                    //已报名
                    if (isSignin) {
                        this._ui._btnSign.visible = false;
                        this._ui._btnCancelSign.visible = true;
                        // this._ui._labBottom.text = GameConfig.language.wait_match
                    }
                    else {
                        this._ui._btnSign.visible = true;
                        this._ui._btnCancelSign.visible = false;
                    }
                }
            }
            else {
                this._ui._btnSign.visible = false;
                this._ui._btnCancelSign.visible = false;
                this._ui._btnReturnMatch.visible = false;
                this._ui._btnManager.visible = false;
            }
        };
        MatchSignInfoCtrl.prototype.onTouch = function (e) {
            switch (e.currentTarget) {
                case this._ui._btnSign:
                    var str;
                    if (this._match.mrule.cost && Number(this._match.mrule.cost) > 0)
                        str = StringUtils.format(GameConfig.language.match_signin_2, this._match.mrule.cost);
                    else
                        str = GameConfig.language.match_signin;
                    AlertInGameCtrl.instance.show(str, function (value) {
                        if (value == AlertCtrl.CONFIRM)
                            server.matchSignupReq();
                    });
                    break;
                case this._ui._btnCancelSign:
                    AlertInGameCtrl.instance.show(GameConfig.language.match_signout, function (value) {
                        if (value == AlertCtrl.CONFIRM)
                            server.matchSignoutReq();
                    });
                    break;
                case this._ui._btnReturnMatch:
                    this.gotoTable();
                    break;
                case this._ui._close:
                    EventManager.instance.disableOnObject(this);
                    server.code = "";
                    server.close();
                    this.hide();
                    this.afterShow();
                    matchSign.MatchSignData.getMatchList();
                    break;
                case this._ui._btnTab:
                    this._ui._btnTab.visible = false;
                    this._ui._btnTab2.visible = true;
                    this.checkTab();
                    break;
                case this._ui._btnTab2:
                    this._ui._btnTab.visible = true;
                    this._ui._btnTab2.visible = false;
                    this.checkTab();
                    break;
                case this._ui._tab1:
                    // this._ui._imgTab1.visible = true;
                    // this._ui._imgTab2.visible = this._ui._imgTab3.visible = false;
                    // this.checkTab();
                    this._ui._tab1.selected = true;
                    this._ui._tab2.selected = this._ui._tab3.selected = false;
                    this._ui._rewardpanel.visible = true;
                    this._ui._rulepanel.visible = false;
                    this._ui._boxPlayerList.visible = false;
                    matchSign.MatchSignData.getReward(this._match.sys, function (data) {
                        console.info(data);
                        var reward = [];
                        for (var k in data) {
                            var v = data[k];
                            if (v.start_rank == v.end_rank) {
                                reward.push({ "amount": v.amount, "name": v.name, "type": v.type, "is_mul_num": v.is_mul_num });
                            }
                            else {
                                for (var i = v.start_rank; v.start_rank < v.end_rank; i++) {
                                    reward.push({ "amount": v.amount, "name": "第" + i + "名", "type": v.type, "is_mul_num": v.is_mul_num });
                                }
                            }
                        }
                        console.info(reward);
                        this._ui._rewardpanel.array = reward;
                    }.bind(this));
                    break;
                // case this._ui._tab2:
                // 	this._ui._imgTab2.visible = true;
                // 	this._ui._imgTab1.visible = this._ui._imgTab3.visible = false;
                // 	this.checkTab();
                // 	break;
                case this._ui._btnback:
                    this._ui._rulebox.visible = false;
                    break;
                case this._ui._btnDetail:
                    this._ui._rulebox.visible = true;
                    this._ui._tab1.selected = true;
                    this._ui._tab2.selected = this._ui._tab3.selected = false;
                    this._ui._rewardpanel.visible = true;
                    this._ui._rulepanel.visible = false;
                    this._ui._boxPlayerList.visible = false;
                    matchSign.MatchSignData.getReward(this._match.sys, function (data) {
                        console.info(data);
                        var reward = [];
                        for (var k in data) {
                            var v = data[k];
                            if (v.start_rank == v.end_rank) {
                                reward.push({ "amount": v.amount, "name": v.name, "type": v.type, "is_mul_num": v.is_mul_num });
                            }
                            else {
                                for (var i = v.start_rank; v.start_rank < v.end_rank; i++) {
                                    reward.push({ "amount": v.amount, "name": "第" + i + "名", "type": v.type, "is_mul_num": v.is_mul_num });
                                }
                            }
                        }
                        console.info(reward);
                        this._ui._rewardpanel.array = reward;
                    }.bind(this));
                    break;
                case this._ui._tab3:
                    // this._ui._imgTab3.visible = true;
                    // this._ui._imgTab1.visible = this._ui._imgTab2.visible = false;
                    this._ui._tab3.selected = true;
                    this._ui._tab1.selected = this._ui._tab2.selected = false;
                    this._ui._rulepanel.visible = false;
                    this._ui._rewardpanel.visible = false;
                    this._ui._boxPlayerList.visible = true;
                    if (MatchConfig.isMatchStart(this._match.status)) {
                        if (this._canRefreshUserList) {
                            this.refreshUserList();
                        }
                    }
                    else {
                        if (this._match.sequence <= 0)
                            server.matchHallUserListReq(this._match.sequence);
                    }
                    break;
                case this._ui._btnShare:
                    Native.instance.share();
                    break;
                case this._ui._tab2:
                case this._ui._labHelp:
                    this._ui._tab2.selected = true;
                    this._ui._tab1.selected = this._ui._tab3.selected = false;
                    this._ui._ruleimg.on(Laya.Event.LOADED, this, this.onComplete);
                    this._ui._ruleimg.visible = true;
                    this._ui._ruleimg.skin = "res/rule/ruler_match_1.png";
                    this._ui._rulepanel.visible = true;
                    this._ui._rewardpanel.visible = false;
                    this._ui._boxPlayerList.visible = false;
                    // HelpCtrl.instance.show(true, [1]);
                    break;
                case this._ui._btnManager:
                    AlertInGameCtrl.instance.show("该功能暂未开启", null, 0, false);
                    break;
                case this._ui._box:
                    this._ui._boxWarn.visible = false;
                    break;
            }
        };
        MatchSignInfoCtrl.prototype.onComplete = function () {
            this._ui._rulepanel.vScrollBar.stopScroll();
            this._ui._rulepanel.vScrollBar.setScroll(0, this._ui._ruleimg.height - this._ui._panel.height, 0);
        };
        MatchSignInfoCtrl.prototype.checkTab = function () {
            var _this = this;
            if (this.isFreeMatch) {
                this._ui._boxInfo.visible = this._ui._btnTab.visible;
                this._ui._boxPlayerList.visible = this._ui._btnTab2.visible;
                this._ui._boxReward.visible = false;
            }
            else {
                this._ui._boxInfo.visible = this._ui._imgTab1.visible;
                this._ui._boxPlayerList.visible = this._ui._imgTab2.visible;
                this._ui._boxReward.visible = this._ui._imgTab3.visible;
            }
            if (this._ui._boxPlayerList.visible) {
                if (MatchConfig.isMatchStart(this._match.status)) {
                    if (this._canRefreshUserList) {
                        this.refreshUserList();
                    }
                }
                else {
                    if (this._match.sequence <= 0)
                        server.matchHallUserListReq(this._match.sequence);
                }
            }
            if (this._ui._boxReward.visible) {
                matchSign.MatchSignData.getReward(this._match.code, function (list) {
                    _this._rewardList = list;
                    _this._ui._listReward.array = _this._rewardList;
                });
            }
        };
        MatchSignInfoCtrl.prototype.onRefreshUserListCd = function () {
            this._canRefreshUserList = true;
            if (this._ui._boxPlayerList.visible) {
                this.refreshUserList();
            }
        };
        MatchSignInfoCtrl.prototype.refreshUserList = function () {
            this._canRefreshUserList = false;
            Laya.timer.once(10 * 1000, this, this.onRefreshUserListCd);
            server.matchHallUserListReq(this._match.sequence);
        };
        MatchSignInfoCtrl.prototype.stopRefreshUserList = function () {
            Laya.timer.clear(this, this.onRefreshUserListCd);
        };
        MatchSignInfoCtrl.prototype.startTimer = function () {
            Laya.timer.loop(1000, this, this.onTimer);
            this.onTimer();
        };
        MatchSignInfoCtrl.prototype.stopTimer = function () {
            // this._fontTime.text = " ";
            Laya.timer.clear(this, this.onTimer);
        };
        MatchSignInfoCtrl.prototype.onTimer = function () {
            var now = server.serverTime ? server.serverTime * 1000 : new Date().getTime();
            if (this._match.mrule.starttime * 1000 > now) {
                this._fontTime.text = TimeUtils.timeFormat(this._match.mrule.starttime - Math.floor(now * 0.001));
                if ((this._match.mrule.starttime * 1000 - now) < 5 * 60 * 1000 && (this._match.mrule.starttime * 1000 - now) > (5 * 60 * 1000 - 1000)) {
                    if (MatchConfig.isModeTime(this._match.mrule.matchmode) && this._match._cnt < 8)
                        AlertInGameCtrl.instance.show(GameConfig.language.match_will_start_2, null, 0, false);
                    else
                        AlertInGameCtrl.instance.show(StringUtils.format(GameConfig.language.match_will_start, 5), null, 0, false);
                }
            }
            else {
                if (MatchConfig.isMatchStart(this._match.status))
                    this._fontTime.text = TimeUtils.timeFormat(-this._match.mrule.starttime + Math.floor(now * 0.001));
                else {
                    this.stopTimer();
                    Laya.timer.once(1000, this, this.update);
                    // this.update();
                }
            }
        };
        MatchSignInfoCtrl.prototype.onMatchHallStatusRepHandler = function (msg) {
            // 		   optional int32 signin = 1;          // 0 未报名 1 已报名、 2淘汰
            // optional int32 status = 2;            //比赛状态 0为开赛 1已开赛 2已开赛，不能报名
            // optional int32 total = 3;               //报名总人数
            // optional int32 begintime = 4;         //真实开始时间 大于0有效
            // optional int32 rank = 5;                //自己排名
            this._match.signin = msg.signin;
            if (msg.hasOwnProperty("status"))
                this._match.status = msg.status;
            else
                this._match.status = 0;
            this._match.owner = msg.owner;
            this._match.cnt = msg.total;
            if (msg.hasOwnProperty("leftcnt"))
                this._match.leftcnt = msg.leftcnt;
            if (msg.hasOwnProperty("begintime"))
                this._match.mrule.starttime = msg.begintime;
            if (msg.hasOwnProperty("rank"))
                this._match.rank = msg.rank;
            this.update();
            if (this._ui._btnReturnMatch.visible) {
                var e = new Laya.Event;
                e.currentTarget = this._ui._btnReturnMatch;
                this.onTouch(e);
            }
        };
        MatchSignInfoCtrl.prototype.onMatchHallUserListRepHandler = function (msg) {
            if (this._match.sequence != msg.sequence) {
                this._match.sequence = msg.sequence;
                this._match.cnt = msg.total;
                this._match.userlist = msg.userlist;
                if (msg.hasOwnProperty("leftcnt")) {
                    this._match.leftcnt = msg.leftcnt;
                    if (this._match.userlist) {
                        for (var i = 0; i < this._match.userlist.length; i++) {
                            this._match.userlist[i].leftcnt = msg.leftcnt;
                        }
                    }
                }
                this.update();
            }
        };
        MatchSignInfoCtrl.prototype.onMatchHallSigninNtfHandler = function (msg) {
            if (!this._match.userlist)
                this._match.userlist = [];
            if (msg.signin == 1) {
                this._match.userlist.unshift({ uid: msg.uid, nickname: msg.nickname });
                if (this._match.hasOwnProperty("cnt"))
                    this._match.cnt++;
            }
            else {
                for (var i = 0; i < this._match.userlist.length; i++) {
                    if (this._match.userlist[i].uid == msg.uid) {
                        this._match.userlist.splice(i, 1);
                        break;
                    }
                }
                if (this._match.hasOwnProperty("cnt"))
                    this._match.cnt--;
            }
            this.update();
        };
        MatchSignInfoCtrl.prototype.onMatchHallStatusNtfHandler = function (msg) {
            this._match.status = msg.status;
            this.update();
        };
        MatchSignInfoCtrl.prototype.onMatchSignupRepHandler = function (msg) {
            if (msg.result == 0) {
                GameLogic.selfData.getInfo(true);
                this._match.signin = 1;
                this.update();
                Dispatcher.dispatch(EventNames.MATCH_LIST_CHANGE);
                var desc;
                if (MatchConfig.isModeTime(this._match.mrule.matchmode)) {
                    var now = server.serverTime ? server.serverTime * 1000 : new Date().getTime();
                    var starttime = Number(this._match.mrule.starttime) * 1000;
                    if (now > starttime && this._match.mrule.min_player)
                        desc = StringUtils.format(GameConfig.language.matchsign_member_count, this._match.mrule.min_player);
                    else {
                        var d = new Date(starttime);
                        var hour = d.getHours();
                        var min = d.getMinutes();
                        if (TimeUtils.isToday(starttime, now))
                            desc = StringUtils.format(GameConfig.language.matchsign_start_time_2, hour < 10 ? "0" + hour : hour, min < 10 ? "0" + min : min);
                        else if (TimeUtils.isTomorrow(starttime, now))
                            desc = StringUtils.format(GameConfig.language.matchsign_start_time_3, hour < 10 ? "0" + hour : hour, min < 10 ? "0" + min : min);
                        else
                            desc = StringUtils.format(GameConfig.language.matchsign_start_time, "", d.getMonth() + 1, d.getDate(), hour < 10 ? "0" + hour : hour, min < 10 ? "0" + min : min);
                    }
                }
                else
                    desc = StringUtils.format(GameConfig.language.matchsign_member_count, this._match.mrule.playercnt);
                // AlertInGameCtrl.instance.show(StringUtils.format(GameConfig.language.match_signin_3, this._match.mrule.title, desc), null, 0, false, "tongyong/tongyong_tishi_2.png", null, ["tongyong/tongyong_btn_zhidao.png"]);
                if (MatchConfig.isMatchStart(this._match.status))
                    this.gotoTable();
            }
            else {
                server.matchHallStatusReq();
                var str = GameConfig.language.match_signin_fail[msg.result];
                if (!str)
                    str = GameConfig.language.match_signin_fail[-1];
                AlertInGameCtrl.instance.show(str, null, 0, false);
            }
        };
        MatchSignInfoCtrl.prototype.onMatchSignoutRepHandler = function (msg) {
            if (msg.result == 0) {
                GameLogic.selfData.getInfo(true);
                this._match.signin = 0;
                this.update();
                Dispatcher.dispatch(EventNames.MATCH_LIST_CHANGE);
            }
            else {
                server.matchHallStatusReq();
                AlertInGameCtrl.instance.show(GameConfig.language.match_signout_fail, null, 0, false);
            }
        };
        MatchSignInfoCtrl.prototype.onMatchHallWillStartNtfHandler = function (msg) {
        };
        MatchSignInfoCtrl.prototype.onMatchHallStartNtfHandler = function (msg) {
            if (this._match.signin == 1)
                this.gotoTable();
            else {
                server.matchHallStatusReq();
            }
        };
        MatchSignInfoCtrl.prototype.onMatchOverNtfHandler = function (msg) {
            var _this = this;
            if (!msg.overType)
                msg.overType = 0;
            AlertInGameCtrl.instance.show(GameConfig.language.match_disband[msg.overType], function () {
                EventManager.instance.disableOnObject(_this);
                server.code = "";
                server.close();
                _this.hide();
                _this.afterShow();
            }, 0, false);
        };
        MatchSignInfoCtrl.prototype.gotoTable = function () {
            GameConfig.IS_MATCH = true;
            BaseGameData.isFreeMatch = this.isFreeMatch;
            AppControl.getInstance().showPage(GameConfig.getGamePage(this._match.gname));
        };
        Object.defineProperty(MatchSignInfoCtrl.prototype, "isFreeMatch", {
            get: function () {
                if (this._match.mrule.cost && Number(this._match.mrule.cost) > 0)
                    return false;
                else
                    return true;
            },
            enumerable: true,
            configurable: true
        });
        MatchSignInfoCtrl.prototype.onListChange = function () {
            this._match = matchSign.MatchSignData.getInfoByCode(Number(this._match.code));
        };
        return MatchSignInfoCtrl;
    }(BaseCtrl));
    matchSign.MatchSignInfoCtrl = MatchSignInfoCtrl;
})(matchSign || (matchSign = {}));
//# sourceMappingURL=MatchSignInfoCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 比赛类型;
*/
var matchSign;
(function (matchSign) {
    var MatchSignKind = /** @class */ (function (_super) {
        __extends(MatchSignKind, _super);
        function MatchSignKind() {
            var _this = _super.call(this) || this;
            _this._btns = [];
            _this._games = GameDef.currentMatchs.concat();
            // var daboluoIdx:number=this._games.indexOf(Number(GameDef.GAME_TYPE.SHISANSHUI));
            // if (daboluoIdx!=-1)
            //     this._games.splice(daboluoIdx,1);
            for (var i = 0; i < _this._games.length; i++) {
                var btn = new component.BaseButton();
                btn.loadImage("res/gameIcon/gameIcon_kind_" + _this._games[i] + ".png");
                btn.stateNum = 1;
                _this.addChild(btn);
                btn.centerX = 0;
                btn.y = 24 + (46 + 22) * i;
                btn.on(Laya.Event.CLICK, _this, _this.onTouch);
                _this._btns.push(btn);
                if (i != (_this._games.length - 1)) {
                    var img = new Laya.Image();
                    img.source = Laya.loader.getRes("matchSign/matchSign_img_3.png");
                    img.mouseEnabled = false;
                    img.centerX = 0;
                    img.y = btn.y + 46 + 10;
                    _this.addChild(img);
                }
            }
            _this.height = _this._bg.height = (22 + 46) * _this._games.length + 40;
            return _this;
        }
        MatchSignKind.prototype.onTouch = function (e) {
            var index = this._btns.indexOf(e.currentTarget);
            if (index != -1) {
                matchSign.MatchSignCreateCtrl.instance.show(this._games[index], GameDef.showGames[String(this._games[index])]);
                this.visible = false;
            }
        };
        return MatchSignKind;
    }(ui.matchSign.MatchKindUI));
    matchSign.MatchSignKind = MatchSignKind;
})(matchSign || (matchSign = {}));
//# sourceMappingURL=MatchSignKind.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 比赛列表Renderer;
*/
var matchSign;
(function (matchSign) {
    var MatchSignMatchListRenderer = /** @class */ (function (_super) {
        __extends(MatchSignMatchListRenderer, _super);
        function MatchSignMatchListRenderer() {
            return _super.call(this) || this;
        }
        //  matchmode, title, cost, playercnt, starttime
        MatchSignMatchListRenderer.prototype.updata = function () {
            if (this.dataSource) {
                this._btnSign.on(Laya.Event.CLICK, this, this.onTouch);
                this._btnCancelSign.on(Laya.Event.CLICK, this, this.onTouch);
                this._btnReturnMatch.on(Laya.Event.CLICK, this, this.onTouch);
                this.stopTimer();
                // this._imgIcon.skin = "res/gameIcon/gameIcon_" + this.dataSource.gtype + ".png";
                // this._imgIcon2.skin = "res/gameIcon/gameIcon_match_" + this.dataSource.gtype + ".png";
                var matchrule = this.dataSource.mrule;
                this._labTitle.text = matchrule.title;
                this._match_desc.text = matchrule.desc || "";
                if (Number(matchrule.cost) == 0) {
                    this._labCost.text = "";
                    this._labFree.visible = true;
                    this._imgDiamond.visible = false;
                }
                else {
                    this._labCost.text = matchrule.cost;
                    this._labFree.visible = false;
                    this._imgDiamond.visible = true;
                }
                //管理按钮
                if (this.dataSource.hasOwnProperty("status")) {
                    var isSignin;
                    if (this.dataSource.hasOwnProperty("signin"))
                        isSignin = Number(this.dataSource.signin) != 0;
                    else
                        isSignin = false;
                    if (MatchConfig.isMatchStart(this.dataSource.status)) {
                        // this._btnReturnMatch.visible = isSignin;
                        // this._imgAlreadyStart.visible = !isSignin;
                        this._btnSign.visible = false;
                        this._btnCancelSign.visible = false;
                    }
                    else {
                        // this._btnSign.visible = !isSignin;
                        // this._btnCancelSign.visible = isSignin;
                        this._btnReturnMatch.visible = false;
                        this._imgAlreadyStart.visible = false;
                    }
                }
                else {
                    this._btnSign.visible = false;
                    this._btnCancelSign.visible = false;
                    this._btnReturnMatch.visible = false;
                    this._imgAlreadyStart.visible = false;
                }
                if (MatchConfig.isModeTime(matchrule.matchmode)) {
                    this._boxMember.visible = true;
                    this._labMemberCount.text = this.dataSource.cnt ? this.dataSource.cnt : 0;
                    var now = server.serverTime ? server.serverTime * 1000 : new Date().getTime();
                    var starttime = Number(matchrule.starttime) * 1000;
                    var leftTime = starttime - now;
                    var d = new Date(starttime);
                    //未开赛 
                    // if (leftTime > 0) {
                    // 距离开赛时间30分钟以内
                    if (leftTime > 0 && leftTime < (30 * 60 * 1000)) {
                        // this._imgLeftTimeBack.visible = true;
                        this.startTimer();
                        this._labInfo.text = "";
                    }
                    else {
                        this._imgLeftTimeBack.visible = false;
                        this._labLeftTime.text = "";
                        if (leftTime < 0 && !MatchConfig.isMatchStart(this.dataSource.status))
                            this._labInfo.text = this._labInfo.text = StringUtils.format(GameConfig.language.matchsign_member_count, matchrule.min_player ? matchrule.min_player : 0);
                        else {
                            var hour = d.getHours();
                            var min = d.getMinutes();
                            if (TimeUtils.isToday(starttime, now))
                                this._labInfo.text = StringUtils.format(GameConfig.language.matchsign_start_time_2, hour < 10 ? "0" + hour : hour, min < 10 ? "0" + min : min);
                            else if (TimeUtils.isTomorrow(starttime, now))
                                this._labInfo.text = StringUtils.format(GameConfig.language.matchsign_start_time_3, hour < 10 ? "0" + hour : hour, min < 10 ? "0" + min : min);
                            else
                                this._labInfo.text = StringUtils.format(GameConfig.language.matchsign_start_time, "", d.getMonth() + 1, d.getDate(), hour < 10 ? "0" + hour : hour, min < 10 ? "0" + min : min);
                        }
                    }
                    // }
                    // else {
                    //     this._imgLeftTimeBack.visible = false;
                    //     this._labLeftTime.text = "";
                    //     var hour: number = d.getHours();
                    //     var min: number = d.getMinutes();
                    //     this._labInfo.text = StringUtils.format(GameConfig.language.matchsign_start_time, "", d.getMonth() + 1, d.getDate(), hour < 10 ? "0" + hour : hour, min < 10 ? "0" + min : min);
                    // }
                }
                else {
                    this._boxMember.visible = true;
                    this._imgLeftTimeBack.visible = false;
                    this._labLeftTime.text = "";
                    this._labInfo.text = StringUtils.format(GameConfig.language.matchsign_member_count, matchrule.playercnt);
                    this._labMemberCount.text = this.dataSource.cnt ? this.dataSource.cnt : 0;
                }
            }
        };
        MatchSignMatchListRenderer.prototype.startTimer = function () {
            Laya.timer.loop(1000, this, this.onTimer);
            this.onTimer();
        };
        MatchSignMatchListRenderer.prototype.stopTimer = function () {
            // this._btnSign.off(Laya.Event.CLICK, this, this.onTouch);
            // this._btnCancelSign.off(Laya.Event.CLICK, this, this.onTouch);
            // this._btnReturnMatch.off(Laya.Event.CLICK, this, this.onTouch);
            Laya.timer.clear(this, this.onTimer);
        };
        MatchSignMatchListRenderer.prototype.onTimer = function () {
            if (this.dataSource) {
                var now = server.serverTime ? server.serverTime * 1000 : new Date().getTime();
                if (this.dataSource.mrule.starttime * 1000 > now)
                    this._labLeftTime.text = StringUtils.format(GameConfig.language.left_time, TimeUtils.timeFormat(this.dataSource.mrule.starttime - Math.floor(now * 0.001)));
                else {
                    this.stopTimer();
                    Laya.timer.once(1000, this, this.updata);
                    // this.updata();
                }
            }
            else
                this.stopTimer();
        };
        MatchSignMatchListRenderer.prototype.onTouch = function (e) {
            var _this = this;
            switch (e.currentTarget) {
                case this._btnSign:
                    var str;
                    if (this.dataSource.mrule.cost && Number(this.dataSource.mrule.cost) > 0)
                        str = StringUtils.format(GameConfig.language.match_signin_2, this.dataSource.mrule.cost);
                    else
                        str = GameConfig.language.match_signin;
                    AlertInGameCtrl.instance.show(str, function (value) {
                        if (value == AlertCtrl.CONFIRM) {
                            matchSignService.matchSignin(_this.dataSource.code, function (response) {
                                if (response.code == 0) {
                                    if (response.result == 0) {
                                        matchSign.MatchSignData.setSignin(_this.dataSource.code, 1);
                                        GameLogic.selfData.getInfo(true);
                                        var desc;
                                        if (MatchConfig.isModeTime(_this.dataSource.mrule.matchmode)) {
                                            var now = server.serverTime ? server.serverTime * 1000 : new Date().getTime();
                                            var starttime = Number(_this.dataSource.mrule.starttime) * 1000;
                                            if (now > starttime && _this.dataSource.mrule.min_player)
                                                desc = StringUtils.format(GameConfig.language.matchsign_member_count, _this.dataSource.mrule.min_player);
                                            else {
                                                var d = new Date(starttime);
                                                var hour = d.getHours();
                                                var min = d.getMinutes();
                                                if (TimeUtils.isToday(starttime, now))
                                                    desc = StringUtils.format(GameConfig.language.matchsign_start_time_2, hour < 10 ? "0" + hour : hour, min < 10 ? "0" + min : min);
                                                else if (TimeUtils.isTomorrow(starttime, now))
                                                    desc = StringUtils.format(GameConfig.language.matchsign_start_time_3, hour < 10 ? "0" + hour : hour, min < 10 ? "0" + min : min);
                                                else
                                                    desc = StringUtils.format(GameConfig.language.matchsign_start_time, "", d.getMonth() + 1, d.getDate(), hour < 10 ? "0" + hour : hour, min < 10 ? "0" + min : min);
                                            }
                                        }
                                        else
                                            desc = StringUtils.format(GameConfig.language.matchsign_member_count, _this.dataSource.mrule.playercnt);
                                        AlertInGameCtrl.instance.show(StringUtils.format(GameConfig.language.match_signin_3, _this.dataSource.mrule.title, desc), null, 0, false, "tongyong/tongyong_tishi_2.png", null, ["tongyong/tongyong_btn_zhidao.png"]);
                                    }
                                    else {
                                        var str = GameConfig.language.match_signin_fail[response.result];
                                        if (!str)
                                            str = GameConfig.language.match_signin_fail[-1];
                                        AlertInGameCtrl.instance.show(str, null, 0, false);
                                    }
                                    matchSign.MatchSignData.getStatus();
                                }
                            });
                        }
                    });
                    break;
                case this._btnCancelSign:
                    AlertInGameCtrl.instance.show(GameConfig.language.match_signout, function (value) {
                        if (value == AlertCtrl.CONFIRM) {
                            matchSignService.matchSignout(_this.dataSource.code, function (response) {
                                if (response.code == 0) {
                                    if (response.result == 0) {
                                        matchSign.MatchSignData.setSignin(_this.dataSource.code, 0);
                                        GameLogic.selfData.getInfo(true);
                                    }
                                    else
                                        AlertInGameCtrl.instance.show(GameConfig.language.match_signout_fail, null, 0, false);
                                }
                            });
                        }
                    });
                    break;
                case this._btnReturnMatch:
                    break;
            }
        };
        return MatchSignMatchListRenderer;
    }(ui.matchSign.MatchSignMatchListRendererUI));
    matchSign.MatchSignMatchListRenderer = MatchSignMatchListRenderer;
})(matchSign || (matchSign = {}));
//# sourceMappingURL=MatchSignMatchListRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 比赛报名奖励Renderer;
*/
var matchSign;
(function (matchSign) {
    var MatchSignRewardRenderer = /** @class */ (function (_super) {
        __extends(MatchSignRewardRenderer, _super);
        function MatchSignRewardRenderer() {
            var _this = _super.call(this) || this;
            _this.HB = 2;
            _this.ZS = 1;
            return _this;
        }
        MatchSignRewardRenderer.prototype.updata = function () {
            if (this.dataSource) {
                this._no.text = this.dataSource.name;
                this._desc.text = "";
                if (this.dataSource.type == this.HB) {
                    this._desc.text = this._desc.text + this.dataSource.amount + "元红包";
                }
                if (this.dataSource.type == this.ZS) {
                    this._desc.text = this._desc.text + this.dataSource.amount + "颗钻石";
                }
            }
        };
        Object.defineProperty(MatchSignRewardRenderer.prototype, "selected", {
            set: function (value) {
                // this._btn.selected = value;
            },
            enumerable: true,
            configurable: true
        });
        return MatchSignRewardRenderer;
    }(ui.matchSign.MatchSignRewardRendererUI));
    matchSign.MatchSignRewardRenderer = MatchSignRewardRenderer;
})(matchSign || (matchSign = {}));
//# sourceMappingURL=MatchSignRewardRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 比赛规则
*/
var matchSign;
(function (matchSign) {
    var MatchSignRuleCtrl = /** @class */ (function (_super) {
        __extends(MatchSignRuleCtrl, _super);
        function MatchSignRuleCtrl() {
            var _this = _super.call(this) || this;
            _this._createInfo = {};
            _this._newCreateInfo = {};
            _this._desc = {};
            _this["name"] = "MatchSignRuleCtrl";
            return _this;
        }
        Object.defineProperty(MatchSignRuleCtrl, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new MatchSignRuleCtrl();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        MatchSignRuleCtrl.prototype.show = function (type) {
            Laya.MouseManager.multiTouchEnabled = false;
            this._gameType = type;
            this.showself();
        };
        /**
         * 这里完成new ui，添加注册监听等初始化工作
         */
        MatchSignRuleCtrl.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.matchSign.MatchSignRuleUI();
                EventManager.instance.registerOnObject(this, this._ui._btnConfirm, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnCancel, Laya.Event.CLICK, this, this.hide);
                this._ui._close.on(Laya.Event.CLICK, this, this.hide);
                this._ui._panel.vScrollBar.visible = false;
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        /**
        * 开启监听，配置宽高，添加到舞台
        */
        MatchSignRuleCtrl.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            this.checkTab();
            this.tweenSelf();
        };
        /**
         * 离开时调度
         */
        MatchSignRuleCtrl.prototype.afterShow = function () {
            _super.prototype.afterShow.call(this);
        };
        MatchSignRuleCtrl.prototype.onTouch = function (e) {
            switch (e.currentTarget) {
                case this._ui._btnConfirm:
                    this.save();
                    HintCtrl.instance.show(GameConfig.language.modify_succ);
                    Dispatcher.dispatch(EventNames.MATCH_RULE_CHANGE);
                    this.hide();
                    break;
            }
        };
        MatchSignRuleCtrl.prototype.checkTab = function () {
            this._ui._panel.removeChildren();
            this._name = GameDef.GAME_NAME[this._gameType - 1];
            var info;
            switch (this._gameType) {
                case GameDef.GAME_TYPE.SHANXI_MJ:
                    info = ShanxiMJ.createInfo;
                    this._cost = ShanxiMJ.cost;
                    this._costDivide = ShanxiMJ.costDivide;
                    this._costs = ShanxiMJ.costs;
                    break;
                case GameDef.GAME_TYPE.WAKENG:
                    info = WaKeng.createInfo;
                    this._cost = WaKeng.cost;
                    this._costDivide = WaKeng.costDivide;
                    this._costs = WaKeng.costs;
                    break;
                case GameDef.GAME_TYPE.SHISANSHUI:
                    info = ShiSanShui.createInfo;
                    this._cost = ShiSanShui.cost;
                    this._costDivide = ShiSanShui.costDivide;
                    this._costs = ShiSanShui.costs;
                    break;
                case GameDef.GAME_TYPE.JINYUN_MJ:
                    info = JinYunMJ.createInfo;
                    this._cost = JinYunMJ.cost;
                    this._costDivide = JinYunMJ.costDivide;
                    this._costs = JinYunMJ.costs;
                    break;
                case GameDef.GAME_TYPE.JINYUN_GS_MJ:
                    info = JinYunGsMJ.createInfo;
                    this._cost = JinYunGsMJ.cost;
                    this._costDivide = JinYunGsMJ.costDivide;
                    this._costs = JinYunGsMJ.costs;
                    break;
                case GameDef.GAME_TYPE.JINYUN_HZ_MJ:
                    info = JinYunHzMJ.createInfo;
                    this._cost = JinYunHzMJ.cost;
                    this._costDivide = JinYunHzMJ.costDivide;
                    this._costs = JinYunHzMJ.costs;
                    break;
                case GameDef.GAME_TYPE.SHANGQIU_MJ:
                    info = ShangQiuMJ.createInfo;
                    this._cost = ShangQiuMJ.cost;
                    this._costDivide = ShangQiuMJ.costDivide;
                    this._costs = ShangQiuMJ.costs;
                    break;
                case GameDef.GAME_TYPE.GUANPAI:
                    info = GuanPai.createInfo;
                    this._cost = GuanPai.cost;
                    this._costDivide = GuanPai.costDivide;
                    this._costs = GuanPai.costs;
                    break;
                case GameDef.GAME_TYPE.TONGLU_MJ:
                    info = TongluMj.createInfo;
                    this._cost = TongluMj.cost;
                    this._costDivide = TongluMj.costDivide;
                    this._costs = TongluMj.costs;
                    break;
            }
            if (GameConfig.IS_BANSHU)
                this._ui._gamename.skin = "banshu/create_gameType_" + this._gameType + ".png";
            else
                this._ui._gamename.skin = "createTable/" + this._gameType + ".png";
            var text = localStorage.getItem("matchRule_" + this._name);
            this._createInfo = JSON.parse(text) || {};
            this._newCreateInfo = {};
            this._desc = {};
            var y = 0;
            for (var k in info) {
                if (info[k].matchvalue >= 0) {
                    this._createInfo[info[k]["key"]] = info[k].matchvalue;
                    this._newCreateInfo[info[k]["key"]] = info[k].matchvalue;
                    continue;
                }
                var view = new CreateItem();
                view.dataSource = info[k];
                view.updata(this.updateKey.bind(this), this._createInfo, this._newCreateInfo, this._desc);
                view.y = y;
                view.x = 10;
                y = y + view.height;
                this._ui._panel.addChild(view);
            }
            // if (!text)
            this.save();
        };
        MatchSignRuleCtrl.prototype.updateKey = function (key, value) {
            this._newCreateInfo[key] = value;
            console.info(this._newCreateInfo);
        };
        MatchSignRuleCtrl.prototype.save = function () {
            var desc = "";
            for (var k in this._desc) {
                if (k != "undefined" && this._desc[k] != "") {
                    desc = desc + this._desc[k] + ",";
                }
            }
            if (desc.length)
                desc = desc.substr(0, desc.length - 1);
            this._newCreateInfo["desc"] = desc;
            var storeStr = JSON.stringify(this._newCreateInfo);
            localStorage.setItem("matchRule_" + this._name, storeStr);
            console.log("desc================" + desc);
        };
        return MatchSignRuleCtrl;
    }(BaseCtrl));
    matchSign.MatchSignRuleCtrl = MatchSignRuleCtrl;
})(matchSign || (matchSign = {}));
//# sourceMappingURL=MatchSignRuleCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 比赛报名规则Renderer;
*/
var matchSign;
(function (matchSign) {
    var MatchSignRuleRenderer = /** @class */ (function (_super) {
        __extends(MatchSignRuleRenderer, _super);
        function MatchSignRuleRenderer() {
            return _super.call(this) || this;
        }
        MatchSignRuleRenderer.prototype.updata = function () {
            if (this.dataSource) {
                this._btn.label = "玩法" + this.dataSource;
            }
        };
        Object.defineProperty(MatchSignRuleRenderer.prototype, "selected", {
            set: function (value) {
                this._btn.selected = value;
            },
            enumerable: true,
            configurable: true
        });
        return MatchSignRuleRenderer;
    }(ui.matchSign.MatchSignRuleRendererUI));
    matchSign.MatchSignRuleRenderer = MatchSignRuleRenderer;
})(matchSign || (matchSign = {}));
//# sourceMappingURL=MatchSignRuleRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 比赛玩家列表Renderer;
*/
var matchSign;
(function (matchSign) {
    var MatchSignUserList2Renderer = /** @class */ (function (_super) {
        __extends(MatchSignUserList2Renderer, _super);
        function MatchSignUserList2Renderer() {
            return _super.call(this) || this;
        }
        MatchSignUserList2Renderer.prototype.updata = function () {
            if (this.dataSource) {
                this._labNickname.text = Utils.getFitNickName(this.dataSource.nickname, 20);
            }
        };
        return MatchSignUserList2Renderer;
    }(ui.matchSign.MatchSignUser2RendererUI));
    matchSign.MatchSignUserList2Renderer = MatchSignUserList2Renderer;
})(matchSign || (matchSign = {}));
//# sourceMappingURL=MatchSignUserList2Renderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 比赛玩家列表Renderer;
*/
var matchSign;
(function (matchSign) {
    var MatchSignUserListRenderer = /** @class */ (function (_super) {
        __extends(MatchSignUserListRenderer, _super);
        function MatchSignUserListRenderer() {
            return _super.call(this) || this;
        }
        MatchSignUserListRenderer.prototype.updata = function () {
            if (this.dataSource) {
                if (this.dataSource.hasOwnProperty("rank")) {
                    if (this._dataSource.rank <= 3) {
                        this._labRank.text = "";
                        this._imgRank.visible = true;
                        this._imgRank.source = Laya.loader.getRes("matchSign/matchSign_rank_" + this.dataSource.rank + ".png");
                    }
                    else {
                        this._labRank.text = this.dataSource.rank;
                        this._imgRank.visible = false;
                    }
                    if (this._dataSource.rank > this._dataSource.leftcnt)
                        this._labScore.text = "已淘汰";
                    else
                        this._labScore.text = this.dataSource.score ? this.dataSource.score : 0;
                }
                else {
                    this._labRank.text = "";
                    this._imgRank.visible = false;
                    this._labScore.text = "";
                }
                this._labNickname.text = Utils.getFitNickName(this.dataSource.nickname, 20);
            }
        };
        return MatchSignUserListRenderer;
    }(ui.matchSign.MatchSignUserRendererUI));
    matchSign.MatchSignUserListRenderer = MatchSignUserListRenderer;
})(matchSign || (matchSign = {}));
//# sourceMappingURL=MatchSignUserListRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
*日历中文本Renderer灰色;
*/
var DateLabelGrayRenderer = /** @class */ (function (_super) {
    __extends(DateLabelGrayRenderer, _super);
    function DateLabelGrayRenderer() {
        var _this = _super.call(this) || this;
        _this.anchorY = 0.5;
        _this.bold = true;
        _this.fontSize = 30;
        _this.y = 15;
        _this.color = "#c89b7e";
        _this.width = 100;
        _this.align = "center";
        _this.height = _this.fontSize;
        return _this;
    }
    DateLabelGrayRenderer.prototype.updata = function () {
        if (this.dataSource) {
            this.text = this.dataSource;
        }
    };
    return DateLabelGrayRenderer;
}(Laya.Label));
//# sourceMappingURL=DateLabelGrayRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
*日历中文本Renderer;
*/
var DateLabelRenderer = /** @class */ (function (_super) {
    __extends(DateLabelRenderer, _super);
    function DateLabelRenderer() {
        var _this = _super.call(this) || this;
        _this.anchorY = 0.5;
        _this.bold = true;
        _this.fontSize = 30;
        _this.y = 15;
        _this.color = "#9b5036";
        _this.width = 100;
        _this.align = "center";
        _this.height = _this.fontSize;
        return _this;
    }
    DateLabelRenderer.prototype.updata = function () {
        if (this.dataSource) {
            this.text = this.dataSource;
        }
    };
    return DateLabelRenderer;
}(Laya.Label));
//# sourceMappingURL=DateLabelRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 日历滑动器
*/
var DateScroll = /** @class */ (function (_super) {
    __extends(DateScroll, _super);
    function DateScroll() {
        var _this = _super.call(this) || this;
        _this._cellHeight = 40;
        _this._frameCount = 0;
        _this._listBack.itemRender = DateLabelGrayRenderer;
        _this._listBack.renderHandler = new Laya.Handler(_this, _this.updateHourBackList);
        _this._listBack.scrollBar.visible = false;
        _this._list.itemRender = DateLabelRenderer;
        _this._list.renderHandler = new Laya.Handler(_this, _this.updateHourList);
        _this._list.scrollBar.visible = false;
        return _this;
    }
    DateScroll.prototype.start = function (index) {
        if (index < 2)
            index += this._dataArray.length / 3;
        this._listBack.scrollBar.value = this._cellHeight * (index - 2);
        Laya.timer.frameLoop(1, this, this.onLoop);
    };
    DateScroll.prototype.stop = function () {
        Laya.timer.clear(this, this.onLoop);
    };
    Object.defineProperty(DateScroll.prototype, "date", {
        set: function (value) {
            this._dataArray = value;
            this._dataArray = this._dataArray.concat(value);
            this._dataArray = this._dataArray.concat(value);
            this._list.array = this._listBack.array = this._dataArray;
        },
        enumerable: true,
        configurable: true
    });
    /***渲染单元格时的回调方法***/
    DateScroll.prototype.updateHourList = function (cell, index) {
        cell.updata();
        // log(this._list.scrollBar.value);
    };
    /***渲染单元格时的回调方法***/
    DateScroll.prototype.updateHourBackList = function (cell, index) {
        if (cell)
            cell.updata();
        if (!this._isAutoAdsorption) {
            var height = this._cellHeight * this._dataArray.length / 3;
            if (this._listBack.scrollBar.value < height)
                this._listBack.scrollBar.value += height;
            else if (this._listBack.scrollBar.value > height * 2)
                this._listBack.scrollBar.value -= height;
        }
    };
    DateScroll.prototype.onLoop = function () {
        this._list.scrollBar.value = this._listBack.scrollBar.value + this._cellHeight * 2;
        if (this._lastHourScrollValue == this._listBack.scrollBar.value) {
            this._frameCount++;
            if (this._frameCount == 5)
                this.autoAdsorption();
        }
        else {
            if (!this._isAutoAdsorption) {
                this._frameCount = 0;
            }
            if (this._lastHourScrollValue < this._listBack.scrollBar.value)
                this._direct = "ceil";
            else
                this._direct = "floor";
            this._lastHourScrollValue = this._listBack.scrollBar.value;
        }
        this.setScale();
    };
    /**
     * 吸附
     */
    DateScroll.prototype.autoAdsorption = function () {
        var _this = this;
        this._isAutoAdsorption = true;
        var value;
        if (this._direct == "ceil")
            value = Math.ceil(this._listBack.scrollBar.value / this._cellHeight) * this._cellHeight;
        else
            value = Math.floor(this._listBack.scrollBar.value / this._cellHeight) * this._cellHeight;
        var time = 500;
        if (Math.abs(this._listBack.scrollBar.value - value) / this._cellHeight > 0.8) {
            this._isAutoAdsorption = false;
            this._frameCount = 0;
        }
        else {
            Laya.Tween.clearTween(this._listBack.scrollBar);
            Laya.Tween.to(this._listBack.scrollBar, { value: value }, time);
            Laya.timer.once(time, this, function () {
                _this._isAutoAdsorption = false;
                _this._frameCount = 0;
                _this.updateHourBackList(null, 0);
            });
        }
    };
    DateScroll.prototype.setScale = function () {
        for (var i = 0; i < this._listBack.cells.length; i++) {
            var renderer = this._listBack.cells[i];
            var dis = Math.abs(renderer.y - this._listBack.scrollBar.value - (this._cellHeight * 2));
            var per = (this._cellHeight * 3 - dis) / (this._cellHeight * 3);
            renderer.scaleY = per;
        }
    };
    DateScroll.prototype.getIndex = function () {
        var index = Math.round(this._list.scrollBar.value / this._cellHeight);
        var tmp = this._dataArray.length / 3;
        while (index >= tmp) {
            index -= tmp;
        }
        return index;
    };
    return DateScroll;
}(ui.matchSign.date.DateScrollUI));
//# sourceMappingURL=DateScroll.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 日历
*/
var DateUI = /** @class */ (function (_super) {
    __extends(DateUI, _super);
    function DateUI() {
        var _this = _super.call(this) || this;
        _this._day = new DateScroll();
        _this._day.centerX = -180;
        _this._day.y = 120;
        _this.addChild(_this._day);
        _this._hour = new DateScroll();
        _this._hour.centerX = 0;
        _this._hour.y = 120;
        _this._hour.date = _this.getHourDate();
        _this.addChild(_this._hour);
        _this._min = new DateScroll();
        _this._min.centerX = 180;
        _this._min.y = 120;
        _this._min.date = _this.getMinDate();
        _this.addChild(_this._min);
        _this._labCancel.hitArea = new Laya.Rectangle(-20, -15, 100, 60);
        _this._labConfirm.hitArea = new Laya.Rectangle(-20, -15, 100, 60);
        _this._labCancel.on(Laya.Event.CLICK, _this, _this.onTouch);
        _this._labConfirm.on(Laya.Event.CLICK, _this, _this.onTouch);
        return _this;
    }
    DateUI.prototype.getDate = function () {
        this._day.date = this.getDayDate();
    };
    DateUI.prototype.getDayDate = function () {
        var now = new Date().getTime();
        var tmpDate = new Date(now);
        now = now - tmpDate.getHours() * 60 * 60 * 1000 - tmpDate.getMinutes() * 60 * 1000 - tmpDate.getSeconds() * 1000;
        this._days = [];
        var tmp = [];
        for (var i = 0; i < 4; i++) {
            var d = new Date(now + 1000 * 60 * 60 * 24 * i);
            this._days.push(d.getTime());
            if (i == 0)
                tmp.push(StringUtils.format(GameConfig.language.today, ""));
            else if (i == 1)
                tmp.push(StringUtils.format(GameConfig.language.tomorrow, ""));
            else
                tmp.push(StringUtils.format(GameConfig.language.format_m_d, "", d.getMonth() + 1, d.getDate()));
        }
        tmp = tmp.concat(tmp);
        this._days = this._days.concat(this._days);
        return tmp;
    };
    DateUI.prototype.getHourDate = function () {
        this._hours = [];
        var tmp = [];
        for (var i = 0; i < 24; i++) {
            this._hours.push(i);
            if (i < 10)
                tmp.push("0" + i);
            else
                tmp.push("" + i);
        }
        return tmp;
    };
    DateUI.prototype.getMinDate = function () {
        this._mins = [];
        var tmp = [];
        for (var i = 0; i < 60; i++) {
            this._mins.push(i);
            if (i < 10)
                tmp.push("0" + i);
            else
                tmp.push("" + i);
        }
        return tmp;
    };
    DateUI.prototype.start = function () {
        var now = new Date();
        this._day.start(0);
        this._hour.start(now.getHours());
        this._min.start(now.getMinutes() + 5);
    };
    DateUI.prototype.stop = function () {
        this._day.stop();
        this._hour.stop();
        this._min.stop();
    };
    DateUI.prototype.getTime = function () {
        var dayIdx = this._day.getIndex();
        var hourIdx = this._hour.getIndex();
        var minIdx = this._min.getIndex();
        return this._days[dayIdx] + hourIdx * 60 * 60 * 1000 + minIdx * 60 * 1000;
    };
    DateUI.prototype.onTouch = function (e) {
        switch (e.currentTarget) {
            case this._labCancel:
                Dispatcher.dispatch(EventNames.MATCH_CREATE_TIME_CHANGE, 0);
                break;
            case this._labConfirm:
                Dispatcher.dispatch(EventNames.MATCH_CREATE_TIME_CHANGE, 1);
                break;
        }
    };
    return DateUI;
}(ui.matchSign.date.DateUI));
//# sourceMappingURL=DateUI.js.map
/*
* @author seacole
* 大厅界面;
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var HallPage = /** @class */ (function (_super) {
    __extends(HallPage, _super);
    function HallPage() {
        var _this = _super.call(this) || this;
        _this._loadDatas = _this._loadDatas.concat([{ url: ResourceConfig.SHEET_HALL, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_CREATEROOM, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.BG_HALL, type: Laya.Loader.IMAGE }, { url: ResourceConfig.SHEET_TONGYONG, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.PART_MENU_BG2, type: Laya.Loader.IMAGE },
            { url: ResourceConfig.HISTORY_BG, type: Laya.Loader.IMAGE }, { url: ResourceConfig.CREATE_ROOM_BG, type: Laya.Loader.IMAGE },
            { url: ResourceConfig.HISTORY_LIST_ITEM_BG, type: Laya.Loader.IMAGE },
            { url: ResourceConfig.HISTORY_LIST_DETAIL_BG, type: Laya.Loader.IMAGE },
            { url: ResourceConfig.HISTORY_END_BG, type: Laya.Loader.IMAGE },
            { url: ResourceConfig.SHEET_HISTORY_JSON, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_SHARE_JSON, type: Laya.Loader.ATLAS }
        ], { url: ResourceConfig.SHEET_COMMON, type: Laya.Loader.ATLAS });
        var games = GameDef.currentGames;
        AppPage.register(HallPage, _this._loadDatas);
        _this.name = "HallPage";
        _this.screenMode = Laya.Stage.SCREEN_HORIZONTAL;
        Laya.stage.bgColor = "#000000";
        Dispatcher.on("show_share", _this, _this.showShare.bind(_this));
        return _this;
    }
    HallPage.prototype.createChild = function () {
        _super.prototype.createChild.call(this);
    };
    HallPage.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        if (this._tabs) {
            for (var i = 0; i < this._tabs.length; i++) {
                if (this._tabs[i])
                    this._tabs[i]["removeListener"]();
            }
        }
        AnnounceManager.instance.stop();
        Laya.timer.clear(this, this.catlikeLoad);
        Laya.timer.clear(this, this.refreshInfo);
        this.stopTimer();
    };
    HallPage.prototype.init = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        _super.prototype.init.call(this);
        AppControl.getInstance().AppStage.registUnauthorized();
        Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_WIDTH;
        // AppControl.getInstance().stage.width = 640;
        if (!this._menuUi) {
            this._menuUi = new ui.page.HallUI();
            this._hallTopUI = new HallTopUI();
            this._menuUi.addChild(this._hallTopUI);
            //this._hallTopUI.zOrder = 2
            this._hallTopUI.left = 0;
            this._hallTopUI.top = 0;
            //添加点击事件
            for (var i = 0; i < this._menuUi._bottomUI.numChildren; i++) {
                var child = this._menuUi._bottomUI.getChildAt(i);
                EventManager.instance.registerOnObject(this, child, Laya.Event.CLICK, this, this.onTouch);
            }
            EventManager.instance.registerOnObject(this, this._menuUi._btnRank, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._menuUi._btnCreateRoom, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._menuUi._btnJoinRoom, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._menuUi._btnRedBagMatch, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._menuUi._btnMatch, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._menuUi._touchPanel, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.MATCH_START_WARN, this, this.onMatchWarn);
            Native.instance.deepLinkCallback();
        }
        if (!Native.instance.isNative) {
            WxWeb.instance.onShare();
        }
        this.addView(this._menuUi);
        if (!GameConfig.IS_IOS_EXAMINE) {
            this.initPaoMaDeng();
        }
        else {
            this._menuUi._label_match.text = "暂未开放";
        }
        Native.instance.checkNewVer();
        AnnounceManager.instance.start();
        if (matchSign.MatchSignData.backCode) {
            webService.joinTable(String(matchSign.MatchSignData.backCode), function (response) {
                if (response.code == 0) {
                    GameConfig.setServerUrl(response.ip);
                    GameConfig.joinTable(response);
                }
            });
        }
        if (params && params.length && params[0].match_code) {
            matchSign.MatchSignInfoCtrl.instance.show(params[0].match_code);
        }
        else if (params && params.length && params[0].room_code) {
            LoginManager.instance.checkJoinTable();
        }
        //比赛出来的返回到比赛列表
        else if (GameConfig.IS_MATCH) {
            matchSign.MatchSignCtrl.instance.show();
        }
        else
            this.getMatchList();
    };
    HallPage.prototype.initPaoMaDeng = function () {
        //Laya.timer.loop(5000, this, function () {
        if (!this._paomadengLabel) {
            this._paomadengLabel = new Laya.Label();
            this._paomadengLabel.text = "桐江游戏代理火爆招募中，详情请咨询官方微信客服：tongjiang78";
            this._paomadengLabel.fontSize = 30;
            this._paomadengLabel.color = "#ffffff";
            this._paomadengLabel.font = "Microsoft YaHei";
            this._menuUi._mask.addChild(this._paomadengLabel);
            this._paomadengLabel.centerX = 800,
                this._paomadengLabel.centerY = 0;
            Laya.Tween.to(this._paomadengLabel, { centerX: -800, centerY: 0 }, 15000, null, Laya.Handler.create(this, this.onTween1));
        }
        //})
    };
    HallPage.prototype.onTween1 = function () {
        // TODO Auto Generated method stub
        // num++;
        // trace(num);
        this._paomadengLabel.centerX = 800,
            this._paomadengLabel.centerY = 0;
        Laya.Tween.clearTween(this.onTween1);
        Laya.Tween.to(this._paomadengLabel, { centerX: -800, centerY: 0 }, 15000, null, Laya.Handler.create(this, this.onTween2));
    };
    HallPage.prototype.onTween2 = function () {
        // TODO Auto Generated method stub
        this._paomadengLabel.centerX = 800,
            this._paomadengLabel.centerY = 0;
        Laya.Tween.clearTween(this.onTween2);
        Laya.Tween.to(this._paomadengLabel, { centerX: -800, centerY: 0 }, 15000, null, Laya.Handler.create(this, this.onTween1));
    };
    HallPage.prototype.initTabs = function () {
        this._curretnSelectIdx = 0;
        this._tabFind = new MenuFindUI();
        this._tabScore = new MenuScoreUI();
        this._tabPerson = new MenuPersonUI();
        this._menuUi.addChild(this._tabPerson);
        this._menuUi.addChild(this._tabScore);
        this._menuUi.addChild(this._tabFind);
        // this._tabPerson.zOrder = 1
        // this._tabScore.zOrder = 1
        // this._tabFind.zOrder = 1
        this._tabPerson.visible = false;
        this._tabScore.visible = false;
        this._tabFind.visible = false;
        // this._menuUi.addChildAt(this._tabLobby, 2);
        // this._tabs = [this._tabLobby, this._tabFind, this._tabScore,this._tabPerson];
        this._tabs = [this._tabFind, null, this._tabScore, this._tabPerson];
        // EventManager.instance.registerOnObject(this, this._menuUi._btnDdz, Laya.Event.CLICK, this, this.onTouch);
        // EventManager.instance.registerOnObject(this, this._menuUi._btnMj, Laya.Event.CLICK, this, this.onTouch);
        // EventManager.instance.registerOnObject(this, this._menuUi._btnJoin, Laya.Event.CLICK, this, this.onTouch);
        Native.instance.deepLinkCallback();
        this.checkTab();
    };
    HallPage.prototype.layoutChild = function () {
        _super.prototype.layoutChild.call(this);
        SoundManager.instance.playBg("bg1");
        Laya.timer.once(5000, this, this.catlikeLoad);
        Laya.timer.frameOnce(3, this, this.refreshInfo);
    };
    HallPage.prototype.refreshInfo = function () {
        // GameLogic.selfData.getInfo(true);
        GameLogic.selfData.startQuery();
        //获取个人信息，刷新信息
        GameLogic.selfData.getInfo(true);
    };
    HallPage.prototype.loadRes = function (key) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        this.playBgm();
        this.initParams = params[0];
        if (AppPage._loadData[key]) {
            if (PreLoadingUI.instance.parent)
                PreLoadingUI.instance.show(AppPage._loadData[key], this, this.loadComplete);
            else
                LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, AppPage._loadData[key], this, this.loadComplete);
        }
        else
            this.loadComplete();
    };
    HallPage.prototype.loadComplete = function () {
        AppControl.getInstance().AppStage.clear();
        AppControl.getInstance().screenMode = this.screenMode;
        this.addToStage.apply(this, this.initParams);
        this.updateDisplayObjectList();
        PreLoadingUI.instance.hide();
        LoadingUI.instance.hide();
    };
    HallPage.prototype.onResize = function () {
        // if (Laya.stage.width / Laya.stage.height < 8 / 5) {
        //         //Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_WIDTH;
        //          AppControl.getInstance().stage.width = 1280
        // }
        this.setTabPos();
        // this._tabLobby.width = AppControl.getInstance().stage.width;
        if (!this._scale || Laya.stage.width / Laya.stage.height != this._scale) {
            if (!this._scale)
                this._scale = Laya.stage.width / Laya.stage.height;
            if (Laya.stage.width / Laya.stage.height < 1280 / 720) {
                Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_WIDTH;
                AppControl.getInstance().stage.width = 1280;
            }
            else {
                Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_HEIGHT;
                AppControl.getInstance().stage.height = 720;
            }
            this._scale = Laya.stage.width / Laya.stage.height;
            Laya.stage.setScreenSize(Laya.Browser.clientWidth * Laya.Browser.pixelRatio, Laya.Browser.clientHeight * Laya.Browser.pixelRatio);
        }
        this._menuUi.height = AppControl.getInstance().stage.height;
        this._menuUi.width = AppControl.getInstance().stage.width > 1280 ? 1280 : AppControl.getInstance().stage.width;
        this._menuUi.centerX = AppControl.getInstance().stage.width > 1280 ? 1 : 0;
        AppControl.getInstance().resetScreen();
    };
    //左右各留50. tab的宽度为屏幕宽度，最大为640，居中显示
    HallPage.prototype.setTabPos = function () {
    };
    HallPage.prototype.onTouch = function (e) {
        switch (e.currentTarget) {
            /*****************************/
            //下方按钮
            case this._menuUi._btnShop:
                //商城
                log("商城");
                ShopCtrl.instance.show();
                break;
            case this._menuUi._btnActivity:
                //活动
                log("活动");
                //测试骨骼动画
                //     SkeletonAniManager.instance.playSkeletonAni(Laya.stage,"res/skeletonAni/kaishi.sk",false,0,{x:600,y:350},function(){
                //     log("动画播放了")
                // })
                AlertInGameCtrl.instance.show(GameConfig.language.common_tip_unopen, null, 0, false);
                break;
            case this._menuUi._btnClub:
                //俱乐部
                log("俱乐部");
                AlertInGameCtrl.instance.show(GameConfig.language.common_tip_unopen, null, 0, false);
                break;
            case this._menuUi._btnRecord:
                //战绩
                log("战绩");
                this.showHistory();
                break;
            case this._menuUi._btnKefu:
                //客服
                if (GameConfig.IS_IOS_EXAMINE) {
                    AlertInGameCtrl.instance.show(GameConfig.language.common_tip_unopen, null, 0, false);
                    return;
                }
                log("客服");
                KeFuCtrl.instance.show("本游戏仅供休闲娱乐使用，游戏中有任何问题请联系客服微信<br>微信号：tongjiang78");
                break;
            case this._menuUi._btnSet:
                //设置
                log("设置");
                SetupCtrl.instance.show(true);
                break;
            case this._menuUi._btnShare:
                //分享
                if (GameConfig.IS_IOS_EXAMINE) {
                    AlertInGameCtrl.instance.show(GameConfig.language.common_tip_unopen, null, 0, false);
                    return;
                }
                log("分享");
                Dispatcher.dispatch("show_share");
                break;
            /*****************************/
            //左侧按钮
            case this._menuUi._btnRank:
                //排行榜
                log("排行榜");
                AlertInGameCtrl.instance.show(GameConfig.language.common_tip_unopen, null, 0, false);
                break;
            /*****************************/
            //中间按钮
            case this._menuUi._btnCreateRoom:
                //创建房间
                log("创建房间");
                this.createRoom();
                break;
            case this._menuUi._btnJoinRoom:
                //加入房间
                log("加入房间");
                this.join();
                break;
            case this._menuUi._btnMatch:
                //竞技场即比赛场
                log("比赛场");
                if (GameConfig.IS_IOS_EXAMINE) {
                    AlertInGameCtrl.instance.show(GameConfig.language.common_tip_unopen, null, 0, false);
                    return;
                }
                matchSign.MatchSignCtrl.instance.show();
                break;
            case this._menuUi._btnRedBagMatch:
                //红包场即金币场
                log("红包场");
                AlertInGameCtrl.instance.show(GameConfig.language.common_tip_unopen, null, 0, false);
                break;
        }
    };
    HallPage.prototype.showShare = function () {
        ShareDlalog.instance.show();
    };
    HallPage.prototype.catlikeLoad = function () {
        Laya.loader.load([{ url: ResourceConfig.SHEET_CREATE_TABLE, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_GAME_END, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_CHAT, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_SETUP, type: Laya.Loader.ATLAS }]);
    };
    HallPage.prototype.getMatchList = function () {
        matchSign.MatchSignData.getMatchList();
        this.startTimer();
    };
    HallPage.prototype.startTimer = function () {
        this.stopTimer();
        Laya.timer.loop(10 * 1000, this, this.onTimer);
    };
    HallPage.prototype.stopTimer = function () {
        Laya.timer.clear(this, this.onTimer);
    };
    HallPage.prototype.onTimer = function () {
        if (!matchSign.MatchSignInfoCtrl.instance.parent && !matchSign.MatchSignCtrl.instance.parent)
            matchSign.MatchSignData.getStatus();
    };
    HallPage.prototype.onMatchWarn = function (match, type) {
        if (!matchSign.MatchSignInfoCtrl.instance.parent) {
            if (!matchSign.MatchSignData._matchWarn[type][match.code]) {
                matchSign.MatchSignData._matchWarn[type][match.code] = true;
                AlertInGameCtrl.instance.show(StringUtils.format(GameConfig.language.match_start_warn[type], match.mrule.title), function (value) {
                    if (value == AlertCtrl.CONFIRM) {
                        webService.joinTable(String(match.code), function (response) {
                            if (response.code == 0) {
                                GameConfig.setServerUrl(response.ip);
                                GameConfig.joinTable(response);
                            }
                        });
                    }
                }, 0, true, "提示", null, ["tongyong/tongyong_btn_qianwang.png"]);
            }
        }
    };
    //创建房间
    HallPage.prototype.createRoom = function () {
        CreateRoomCtrl.instance.show();
    };
    //加入房间
    HallPage.prototype.join = function () {
        var _this = this;
        if (GameLogic.selfData.game_code > 0) {
            webService.joinTable(String(GameLogic.selfData.game_code), function (response) {
                if (response.code == 0) {
                    // this._ui._labRoom.focus = false;
                    GameConfig.setServerUrl(response.ip);
                    GameConfig.joinTable(response);
                }
                else {
                    GameLogic.selfData.game_code = 0;
                    _this.onRefreshRoleInfo();
                    AlertInGameCtrl.instance.show(GameConfig.language.join_fail, null, 0, false);
                    GameLogic.selfData.getInfo(true);
                }
            });
        }
        else {
            JoinTableCtrl.instance.show();
        }
    };
    HallPage.prototype.onRefreshRoleInfo = function () {
    };
    /**
     * 战绩
     */
    HallPage.prototype.showHistory = function () {
        if (!this._tabScore)
            this.initTabs();
        this._curretnSelectIdx = 2;
        this._tabScore.clearLastInfo();
        this.checkTab();
    };
    HallPage.prototype.checkTab = function () {
        // if (this._curretnSelectIdx==this._menuUi._tab.selectedIndex)
        //     return;
        // this._curretnSelectIdx = this._menuUi._tab.selectedIndex;
        if (this._tabs[this._curretnSelectIdx] == this._tabScore)
            this._tabScore.getFirstPage();
        //this._tabLobby.visible = selectIdx == 0;
        //let toCenterX = this._menuUi["_item" + this._curretnSelectIdx].centerX
        this._tabFind.visible = this._curretnSelectIdx == 0;
        this._tabScore.visible = this._curretnSelectIdx == 2;
        this._tabPerson.visible = this._curretnSelectIdx == 3;
        if (this._tabScore.visible)
            this._tabScore.currentTag = MenuScoreUI.TAG_LIST;
        if (this._curretnSelectIdx == 1)
            club.ClubCtrl.instance.show(this._menuUi);
        else
            club.ClubCtrl.instance.hide();
    };
    return HallPage;
}(AppPage));
//# sourceMappingURL=HallPage.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 登录界面;
*/
var LoginPage = /** @class */ (function (_super) {
    __extends(LoginPage, _super);
    function LoginPage() {
        var _this = _super.call(this) || this;
        _this._loadDatas = _this._loadDatas.concat([
            { url: ResourceConfig.SHEET_LOGIN, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_TONGYONG, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_GAME_NAME, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_COMMON, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_GAME_NAME, type: Laya.Loader.ATLAS }
        ]);
        AppPage.register(LoginPage, _this._loadDatas);
        _this.name = "LoginPage";
        _this.screenMode = Laya.Stage.SCREEN_HORIZONTAL;
        return _this;
    }
    LoginPage.prototype.createChild = function () {
        _super.prototype.createChild.call(this);
    };
    LoginPage.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
    };
    LoginPage.prototype.init = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        _super.prototype.init.call(this);
        Dispatcher.dispatch(EventNames.BACK_TO_LOGIN);
        GameLogic.selfData.clear();
        if (!this._loginUi) {
            this._loginUi = new ui.page.LoginUI();
            this._loginUi.width = AppControl.getInstance().stage.width;
            this._loginUi.height = AppControl.getInstance().stage.height;
            //this._loginUi._imgLogo.skin = "login/login_logo_" + GameConfig.APPAREA + ".png";
            EventManager.instance.registerOnObject(this, this._loginUi._btnAccount, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._loginUi._btnGuest, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._loginUi._btnWx, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._loginUi._cheProtocol, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._loginUi._labProtocol, Laya.Event.CLICK, this, this.onTouch);
            // this._loginUi._htmlTxt.width = 640;
            // this._loginUi._htmlTxt.style.fontSize = 16;
            // this._loginUi._htmlTxt.style.color = "#ffffff";
            // this._loginUi._htmlTxt.style.leading = 4;
            // this._loginUi._htmlTxt.style.letterSpacing = 3;
            // this._loginUi._htmlTxt.style.valign = "middle";
            // this._loginUi._htmlTxt.style.align = "center";
            // // this._loginUi._htmlTxt.innerHTML = "抵制不良游戏，拒绝盗版游戏，注意自我保护，谨防受骗上当<br>适度游戏益脑，沉迷游戏伤身，合理安排时间，享受健康生活<br>本游戏仅供娱乐，禁止赌博，禁止以任何形式私下转账，<br>发红包赌博等非法行为，请文明健康游戏";
            // this._loginUi._htmlTxt.innerHTML = "<span style='font-size:18'>抵制不良游戏，拒绝盗版游戏，注意自我保护，谨防受骗上当</span><br><span style='font-size:18'>适度游戏益脑，沉迷游戏伤身，合理安排时间，享受健康生活</span><br>新广出审[2018]885号  ISBN 978-7-498-04290-3<br>著作权人：杭州浩游科技有限公司<br>出版单位：杭州润趣科技有限公司"
            if (!GameConfig.IS_TEST) {
                if (!GameConfig.IS_IOS_EXAMINE && !GameConfig.IS_BANSHU) {
                    this._loginUi._btnGuest.removeSelf();
                    this._loginUi._btnAccount.removeSelf();
                }
                else
                    this._loginUi._btnWx.removeSelf();
            }
        }
        this.checkProtocol();
        this.addView(this._loginUi);
        this.setAllNoSee();
        Native.instance.checkNewVer();
        club.ClubManager.clearAll();
        // AppControl.getInstance().AppStage.registUnauthorized();
        var isAutoLogin = LoginManager.instance.orderedLogin(false);
        if (!isAutoLogin)
            this.LoginAccountVis = false;
        // LoadingUI.instance.show(2);
    };
    LoginPage.prototype.layoutChild = function () {
        _super.prototype.layoutChild.call(this);
    };
    LoginPage.prototype.loadRes = function (key) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        this.playBgm();
        this.initParams = params[0];
        if (AppPage._loadData[key]) {
            if (this.initParams && this.initParams.length && this.initParams[0] == LoginPage.PARAMS0_FIRST_ENTER)
                PreLoadingUI.instance.show(AppPage._loadData[key], this, this.loadComplete);
            else
                LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, AppPage._loadData[key], this, this.loadComplete);
        }
        else
            this.loadComplete();
    };
    LoginPage.prototype.loadComplete = function () {
        AppControl.getInstance().AppStage.clear();
        AppControl.getInstance().screenMode = this.screenMode;
        this.addToStage.apply(this, this.initParams);
        this.updateDisplayObjectList();
        PreLoadingUI.instance.hide();
        LoadingUI.instance.hide();
    };
    LoginPage.prototype.onResize = function (e) {
        this._loginUi.width = AppControl.getInstance().stage.width;
        this._loginUi.height = AppControl.getInstance().stage.height;
        this._loginUi._imgLogo.bottom = AppControl.getInstance().stage.height * 0.57;
        this._loginUi._btnWx.bottom = AppControl.getInstance().stage.height * 0.20;
        this._loginUi._box.bottom = AppControl.getInstance().stage.height * 0.10;
        this._loginUi._btnGuest.bottom = this._loginUi._btnWx.bottom;
        this._loginUi._btnAccount.bottom = this._loginUi._btnWx.bottom;
        // this._loginUi._htmlTxt.x = AppControl.getInstance().stage.width - this._loginUi._htmlTxt.width >> 1;
        // this._loginUi._htmlTxt.y = AppControl.getInstance().stage.height - this._loginUi._htmlTxt.contextHeight - 35;
        AppControl.getInstance().resetScreen();
    };
    /**
     * 鼠标点击事件
     */
    LoginPage.prototype.onTouch = function (e) {
        switch (e.currentTarget) {
            case this._loginUi._btnAccount:
                AccountLoginCtrl.instance.show();
                // for (var i = 0; i < 100; i++) {
                //    LoginManager.instance.regist("zhc"+(i+100),"123456","zhc"+(i+100));
                // }
                break;
            case this._loginUi._btnGuest:
                LoginManager.instance.touristLogin();
                break;
            case this._loginUi._btnWx:
                if (Native.instance.isNative) {
                    LoginManager.instance.appWxLogin();
                }
                else {
                    Laya.Browser.window.location.href = webService.getWxLoginUrl();
                }
                break;
            case this._loginUi._cheProtocol:
                this.checkProtocol();
                break;
            case this._loginUi._labProtocol:
                AgreementCtrl.instance.show();
                break;
        }
    };
    LoginPage.prototype.checkProtocol = function () {
        this._loginUi._btnWx.disabled = !this._loginUi._cheProtocol.selected;
        this._loginUi._btnAccount.disabled = !this._loginUi._cheProtocol.selected;
        this._loginUi._btnGuest.disabled = !this._loginUi._cheProtocol.selected;
    };
    Object.defineProperty(LoginPage.prototype, "LoginAccountVis", {
        /**
         * 设置游客登录的输入页面是否可见
         */
        set: function (value) {
            this._loginUi._btnAccount.visible = !value;
            this._loginUi._btnWx.visible = !value;
            this._loginUi._btnGuest.visible = !value;
            this._loginUi._labProtocol.visible = !value;
            this._loginUi._cheProtocol.visible = !value;
            if (Native.instance.isIOS || Native.instance.isAndroid || Native.instance.isWeiXin) {
                this._loginUi._btnGuest.visible = false;
                this._loginUi._btnAccount.visible = false;
            }
            else {
                this._loginUi._btnWx.visible = false;
            }
            //  if (GameConfig.IS_IOS_EXAMINE){
            this._loginUi._btnGuest.visible = true;
            this._loginUi._btnAccount.visible = true;
            //  }
        },
        enumerable: true,
        configurable: true
    });
    LoginPage.prototype.setAllNoSee = function () {
        this._loginUi._btnAccount.visible = false;
        this._loginUi._btnWx.visible = false;
        this._loginUi._btnGuest.visible = false;
        this._loginUi._labProtocol.visible = false;
        this._loginUi._cheProtocol.visible = false;
    };
    LoginPage.PARAMS0_FIRST_ENTER = 1;
    return LoginPage;
}(AppPage));
//# sourceMappingURL=LoginPage.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 大厅界面;
*/
var MenuPage = /** @class */ (function (_super) {
    __extends(MenuPage, _super);
    function MenuPage() {
        var _this = _super.call(this) || this;
        _this._loadDatas = _this._loadDatas.concat([{ url: ResourceConfig.SHEET_GAMEICON, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_MENU, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_CREATE_TABLE, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.BG_MENU, type: Laya.Loader.IMAGE }, { url: ResourceConfig.SHEET_TONGYONG, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_GAME_NAME, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_COMMON, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.PART_MENU_BG, type: Laya.Loader.JSON }, { url: ResourceConfig.PART_MENU_BG2, type: Laya.Loader.IMAGE }]);
        if (GameConfig.IS_BANSHU)
            _this._loadDatas = _this._loadDatas.concat([{ url: ResourceConfig.SHEET_BANSHU, type: Laya.Loader.ATLAS }]);
        var games = GameDef.currentGames;
        for (var k in games) {
            var v = games[k];
            _this._loadDatas.push({ url: "res/menu/create_" + v + ".png", type: Laya.Loader.IMAGE });
        }
        AppPage.register(MenuPage, _this._loadDatas);
        _this.name = "MenuPage";
        _this.screenMode = Laya.Stage.SCREEN_VERTICAL;
        Laya.stage.bgColor = "#000000";
        Dispatcher.on("show_share", _this, _this.showShare.bind(_this));
        return _this;
    }
    MenuPage.prototype.createChild = function () {
        _super.prototype.createChild.call(this);
    };
    MenuPage.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        if (this._partBg) {
            if (!Native.instance.isNative)
                this._partBg.emitter.stop();
            this._partBg.stop();
        }
        if (this._tabs) {
            for (var i = 0; i < this._tabs.length; i++) {
                if (this._tabs[i])
                    this._tabs[i]["removeListener"]();
            }
        }
        AnnounceManager.instance.stop();
        Laya.timer.clear(this, this.catlikeLoad);
        Laya.timer.clear(this, this.refreshInfo);
        this.stopTimer();
    };
    MenuPage.prototype.init = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        _super.prototype.init.call(this);
        AppControl.getInstance().AppStage.registUnauthorized();
        Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_WIDTH;
        AppControl.getInstance().stage.width = 640;
        if (!this._menuUi) {
            this._menuUi = new ui.page.MenuUI();
            // this._tabLobby = new MenuLobbyUI();
            this._tabFind = new MenuFindUI();
            this._tabScore = new MenuScoreUI();
            this._tabPerson = new MenuPersonUI();
            this._menuUi.addChild(this._tabPerson);
            this._menuUi.addChild(this._tabScore);
            this._menuUi.addChild(this._tabFind);
            this._menuUi._tab.zOrder = 2;
            this._tabPerson.zOrder = 1;
            this._tabScore.zOrder = 1;
            this._tabFind.zOrder = 1;
            this._menuUi._mask.zOrder = 3;
            this._menuUi._shareBg.zOrder = 4;
            MarqueeText.instance.selfParent = this._tabFind;
            // this._menuUi.addChildAt(this._tabLobby, 2);
            // this._tabs = [this._tabLobby, this._tabFind, this._tabScore,this._tabPerson];
            this._tabs = [this._tabFind, null, this._tabScore, this._tabPerson];
            EventManager.instance.registerOnObject(this, this._menuUi, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._menuUi._tab, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._menuUi._wechat, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._menuUi._pyq, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.MATCH_START_WARN, this, this.onMatchWarn);
            // EventManager.instance.registerOnObject(this, this._menuUi._btnDdz, Laya.Event.CLICK, this, this.onTouch);
            // EventManager.instance.registerOnObject(this, this._menuUi._btnMj, Laya.Event.CLICK, this, this.onTouch);
            // EventManager.instance.registerOnObject(this, this._menuUi._btnJoin, Laya.Event.CLICK, this, this.onTouch);
            var part = new ParticleEffect();
            var effectData = new EffectData();
            effectData.loop = true;
            effectData.url = ResourceConfig.PART_MENU_BG;
            effectData.posX = this._menuUi.width * 0.5;
            this._partBg = part.show(effectData);
            this._partBg.rotation = 200;
            this._menuUi.addChildAt(this._partBg, 2);
            Native.instance.deepLinkCallback();
        }
        if (!Native.instance.isNative) {
            this._partBg.emitter.start();
            WxWeb.instance.onShare();
        }
        this._menuUi._mask.visible = false;
        this._partBg.play();
        this.addView(this._menuUi);
        if (this._tabScore.lastGInfo)
            this._menuUi._tab.selectedIndex = 2;
        else if (club.ClubCtrl.instance.lastCid)
            this._menuUi._tab.selectedIndex = 1;
        else
            this._menuUi._tab.selectedIndex = 0;
        this.checkTab();
        Native.instance.checkNewVer();
        AnnounceManager.instance.start();
        if (matchSign.MatchSignData.backCode) {
            webService.joinTable(String(matchSign.MatchSignData.backCode), function (response) {
                if (response.code == 0) {
                    GameConfig.setServerUrl(response.ip);
                    GameConfig.joinTable(response);
                }
            });
        }
        if (params && params.length && params[0].match_code) {
            matchSign.MatchSignInfoCtrl.instance.show(params[0].match_code);
        }
        else if (params && params.length && params[0].room_code) {
            LoginManager.instance.checkJoinTable();
        }
        //比赛出来的返回到比赛列表
        else if (GameConfig.IS_MATCH) {
            matchSign.MatchSignCtrl.instance.show();
        }
        else
            this.getMatchList();
    };
    MenuPage.prototype.layoutChild = function () {
        _super.prototype.layoutChild.call(this);
        SoundManager.instance.playBg("bg1");
        for (var i = 0; i < this._tabs.length; i++) {
            if (this._tabs[i])
                this._tabs[i]["addListener"]();
        }
        Laya.timer.once(5000, this, this.catlikeLoad);
        Laya.timer.frameOnce(3, this, this.refreshInfo);
        // var t:Array<number>=guanpai.GuanPaiCardsType.getType([50, 52, 53, 60, 61, 62, 70],true,8);
        // log("牌型1："+t) ;
        //  var t:Array<number>=guanpai.GuanPaiCardsType.getType([130,131,132,133,140,141,142,70],true);
        // log("牌型2："+t) ;
        //  var t:Array<number>=guanpai.GuanPaiCardsType.getType([130,131,132,133,70],true);
        // log("牌型3："+t) ;
        // var helper:Array<Array<number>>=guanpai.GuanPaiCardsType.getHelper([51,52,53,61,62,63,31,32,33],[42,41,61,71,81,82,91,100,101,102,103,111,112,113,121,131,132,133,140,141,142],true);
        // log(helper);
        // var helper:Array<Array<number>>=guanpai.GuanPaiCardsType.getHelper([51,52,53,61,62,63,31,32,33],[140,141,142],true);
        // log(helper);
        // var helper:Array<Array<number>>=guanpai.GuanPaiCardsType.getHelper([51,52,53,61,62,63,31,32,33],[120,121,122,130,131,132,133,140],true);
        // log(helper);
        // var helpCards: Array<Array<number>> = guanpai.GuanPaiCardsType.getHelper([30, 31, 41, 42, 43], [141, 142, 143, 91, 92], guanpai.GuanPaiGameData.isBoomAAA);
        // log(helpCards);
        // var helper: boolean = guanpai.GuanPaiCardsType.checkCanUse([30, 31, 32, 40, 41, 42, 43], [141, 142, 143, 91, 92], true, 5, helpCards);
        // log(helper);
        // var helper: boolean = guanpai.GuanPaiCardsType.checkCanUse([30, 31, 41, 42, 43], [141, 142, 143, 91, 92], true, 5, helpCards);
        // log(helper);
    };
    MenuPage.prototype.refreshInfo = function () {
        // GameLogic.selfData.getInfo(true);
        GameLogic.selfData.startQuery();
    };
    MenuPage.prototype.loadRes = function (key) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        this.playBgm();
        this.initParams = params[0];
        if (AppPage._loadData[key]) {
            if (PreLoadingUI.instance.parent)
                PreLoadingUI.instance.show(AppPage._loadData[key], this, this.loadComplete);
            else
                LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, AppPage._loadData[key], this, this.loadComplete);
        }
        else
            this.loadComplete();
    };
    MenuPage.prototype.loadComplete = function () {
        AppControl.getInstance().AppStage.clear();
        AppControl.getInstance().screenMode = this.screenMode;
        this.addToStage.apply(this, this.initParams);
        this.updateDisplayObjectList();
        PreLoadingUI.instance.hide();
        LoadingUI.instance.hide();
    };
    MenuPage.prototype.onResize = function () {
        this._menuUi.width = AppControl.getInstance().stage.width;
        this._menuUi.height = AppControl.getInstance().stage.height > 1280 ? 1280 : AppControl.getInstance().stage.height;
        this._menuUi.centerY = AppControl.getInstance().stage.height > 1280 ? 1 : 0;
        this._partBg.x = this._menuUi.width * 0.5;
        this._partBg.y = -50;
        this.setTabPos();
        // this._tabLobby.width = AppControl.getInstance().stage.width;
        AppControl.getInstance().resetScreen();
    };
    //左右各留50. tab的宽度为屏幕宽度，最大为640，居中显示
    MenuPage.prototype.setTabPos = function () {
        this._menuUi._tab.width = AppControl.getInstance().stage.width;
        if (this._menuUi._tab.width > 640)
            this._menuUi._tab.width = 640;
        // var tab1: Laya.Button = this._menuUi._tab.getChildAt(0) as Laya.Button;
        // var w: number = tab1.width;
        // var left: number = 50;
        // var len: number = this._menuUi._tab.numChildren;
        // var dis: number = (this._menuUi._tab.width - left * 2 - w * 4) * 0.33;
        // for (var i = 0; i < len; i++) {
        //     (this._menuUi._tab.getChildAt(i) as Laya.Button).x = left + (w + dis) * i;
        // }
    };
    /**
    * 鼠标点击事件
    */
    MenuPage.prototype.onTouch = function (e) {
        switch (e.currentTarget) {
            case this._menuUi._tab:
                if (this._tabScore.visible && this._tabScore.isDetailShowing) {
                    this._menuUi._tab.selectedIndex = 2;
                    return;
                }
                this._tabScore.clearLastInfo();
                this.checkTab();
                break;
            case this._menuUi._wechat:
                Native.instance.share(1, 0);
                break;
            case this._menuUi._pyq:
                Native.instance.share(1, 1);
                break;
        }
        if (this._menuUi._shareBg.bottom == 0) {
            switch (e.target) {
                case this._tabFind:
                case this._tabScore:
                case this._tabPerson:
                case this._menuUi._mask:
                    this._menuUi._shareBg.bottom = -185;
                    this._menuUi._shareBg.alpha = 0;
                    this._menuUi._mask.visible = false;
                    break;
            }
        }
    };
    MenuPage.prototype.showShare = function () {
        this._menuUi._mask.visible = true;
        Laya.Tween.to(this._menuUi._shareBg, { bottom: 0, alpha: 1 }, 150);
    };
    MenuPage.prototype.checkTab = function () {
        // if (this._curretnSelectIdx==this._menuUi._tab.selectedIndex)
        //     return;
        this._curretnSelectIdx = this._menuUi._tab.selectedIndex;
        if (this._tabs[this._curretnSelectIdx] == this._tabScore)
            this._tabScore.getFirstPage();
        // this._tabLobby.visible = selectIdx == 0;
        var toCenterX = this._menuUi["_item" + this._curretnSelectIdx].centerX;
        this._tabFind.visible = this._curretnSelectIdx == 0;
        this._tabScore.visible = this._curretnSelectIdx == 2;
        this._tabPerson.visible = this._curretnSelectIdx == 3;
        if (this._tabScore.visible)
            this._tabScore.currentTag = MenuScoreUI.TAG_LIST;
        if (this._curretnSelectIdx == 1)
            club.ClubCtrl.instance.show(this._menuUi);
        else
            club.ClubCtrl.instance.hide();
    };
    MenuPage.prototype.catlikeLoad = function () {
        Laya.loader.load([{ url: ResourceConfig.SHEET_CREATE_TABLE, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_GAME_END, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_CHAT, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_SETUP, type: Laya.Loader.ATLAS }]);
    };
    MenuPage.prototype.getMatchList = function () {
        matchSign.MatchSignData.getMatchList();
        this.startTimer();
    };
    MenuPage.prototype.startTimer = function () {
        this.stopTimer();
        Laya.timer.loop(10 * 1000, this, this.onTimer);
    };
    MenuPage.prototype.stopTimer = function () {
        Laya.timer.clear(this, this.onTimer);
    };
    MenuPage.prototype.onTimer = function () {
        if (!matchSign.MatchSignInfoCtrl.instance.parent && !matchSign.MatchSignCtrl.instance.parent)
            matchSign.MatchSignData.getStatus();
    };
    MenuPage.prototype.onMatchWarn = function (match, type) {
        if (!matchSign.MatchSignInfoCtrl.instance.parent) {
            if (!matchSign.MatchSignData._matchWarn[type][match.code]) {
                matchSign.MatchSignData._matchWarn[type][match.code] = true;
                AlertInGameCtrl.instance.show(StringUtils.format(GameConfig.language.match_start_warn[type], match.mrule.title), function (value) {
                    if (value == AlertCtrl.CONFIRM) {
                        webService.joinTable(String(match.code), function (response) {
                            if (response.code == 0) {
                                GameConfig.setServerUrl(response.ip);
                                GameConfig.joinTable(response);
                            }
                        });
                    }
                }, 0, true, "提示", null, ["tongyong/tongyong_btn_qianwang.png"]);
            }
        }
    };
    return MenuPage;
}(AppPage));
//# sourceMappingURL=MenuPage.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * @author seacole
 * 顶层弹窗
*/
var AlertCtrl = /** @class */ (function (_super) {
    __extends(AlertCtrl, _super);
    function AlertCtrl() {
        var _this = _super.call(this) || this;
        _this["name"] = "AlertCtrl";
        return _this;
    }
    Object.defineProperty(AlertCtrl, "instance", {
        get: function () {
            // if (!this._instance)
            //     this._instance = new AlertCtrl();
            // return this._instance;
            return null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * show
     * @param msg 具体内容
     * @param callBack 回调
     * @param leftTime 倒计时 默认为0
     * @param needCancel 是否需要取消 默认需要
     * @param title 标题
     */
    AlertCtrl.prototype.show = function (msg, callBack, leftTime, needCancel, title, params, btnName) {
        if (callBack === void 0) { callBack = null; }
        if (leftTime === void 0) { leftTime = 0; }
        if (needCancel === void 0) { needCancel = true; }
        if (title === void 0) { title = GameConfig.language.alert_title_normal; }
        if (params === void 0) { params = null; }
        if (btnName === void 0) { btnName = ["common/sBtn_confrm.png", "common/sBtn_cancel.png"]; }
        var id = Number(msg);
        // if (!isNaN(id)) {
        //     var tmp: any = U3dPosiUtils.getInfoFromU3dHint(id, params);
        //     this._msg = tmp.msg;
        //     if (tmp.hasOwnProperty("size") && tmp.size)
        //         this._size = tmp.size;
        //     else
        //         this._size = 40;
        // }
        // else {
        this._params = params;
        this._msg = msg;
        this._size = 40;
        // }
        this._title = title;
        this._callBack = callBack;
        this._leftTime = leftTime;
        this._needCancel = needCancel;
        this._btnName = btnName;
        this.showself();
    };
    AlertCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.panel.AlertUI();
            this._ui._labMsg.style.align = "center";
            this._ui._labMsg.style.color = "#45483e";
            var btnArr = [this._ui._btnConfirm, this._ui._btnCancel];
            for (var i = 0; i < btnArr.length; i++) {
                btnArr[i].label = this._btnName[i];
            }
            EventManager.instance.registerOnObject(this, this._ui._btns, Laya.Event.CLICK, this, this.onTouch);
            this._autoHide = false;
        }
        _super.prototype.beforeShow.call(this);
        this.onShow();
    };
    AlertCtrl.prototype.onShow = function () {
        _super.prototype.onShow.call(this, 2);
        if (this._ui._labTitle)
            this._ui._labTitle.text = this._title;
        this._ui._labMsg.style.fontSize = 40;
        this._ui._labMsg.style.leading = 10;
        this._ui._labMsg.style.valign = "middle";
        this._ui._labMsg.innerHTML = this._msg;
        this._ui._labMsg.y = 68 + (110 - this._ui._labMsg.contextHeight) * 0.5;
        if (this._needCancel) {
            this._ui._btnConfirm.centerX = 120;
            this._ui._btnCancel.visible = true;
            if (this._btnName && this._btnName.length)
                this._ui._btnConfirm.skin = this._btnName[0];
            if (this._btnName && this._btnName.length > 1)
                this._ui._btnCancel.skin = this._btnName[1];
        }
        else {
            this._ui._btnConfirm.centerX = 0;
            this._ui._btnCancel.visible = false;
            if (this._btnName && this._btnName.length)
                this._ui._btnConfirm.skin = this._btnName[0];
        }
        if (this._leftTime <= 0) {
            this._ui._labTime.visible = false;
            Laya.timer.clear(this, this.onTimer);
        }
        else {
            this._ui._labTime.visible = true;
            this.setLabTime();
            Laya.timer.loop(1000, this, this.onTimer);
        }
        LoadingUI.instance.hide();
    };
    AlertCtrl.prototype.afterShow = function () {
        _super.prototype.afterShow.call(this);
        Laya.timer.clear(this, this.onTimer);
    };
    AlertCtrl.prototype.onMouseDown = function (e) {
    };
    AlertCtrl.prototype.onTouch = function (e) {
        switch (e.target.name) {
            case "close":
                this.cancel();
                break;
            case "confirm":
                this.confirm();
                break;
            case "cancel":
                this.cancel();
                break;
        }
    };
    AlertCtrl.prototype.confirm = function () {
        if (this._callBack)
            this._callBack(AlertCtrl.CONFIRM);
        this.hide();
    };
    AlertCtrl.prototype.cancel = function () {
        if (this._callBack)
            this._callBack(AlertCtrl.CANCEL);
        this.hide();
    };
    /**
     * 设置倒计时
     */
    AlertCtrl.prototype.setLabTime = function () {
        this._ui._labTime.text = StringUtils.format(GameConfig.language.alert_time, this._leftTime);
    };
    /**
     * 倒计时timer
     */
    AlertCtrl.prototype.onTimer = function (e) {
        this._leftTime--;
        this.setLabTime();
        if (this._leftTime <= 0) {
            this._leftTime = 0;
            Laya.timer.clear(this, this.onTimer);
            if (this._needCancel)
                this.cancel();
            else
                this.confirm();
        }
    };
    AlertCtrl.CONFIRM = 1;
    AlertCtrl.CANCEL = 2;
    return AlertCtrl;
}(BaseCtrl));
//# sourceMappingURL=AlertCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var PlayerInfoCtrl = /** @class */ (function (_super) {
    __extends(PlayerInfoCtrl, _super);
    function PlayerInfoCtrl() {
        var _this = _super.call(this) || this;
        _this["name"] = "PlayerInfoCtrl";
        return _this;
    }
    Object.defineProperty(PlayerInfoCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new PlayerInfoCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    PlayerInfoCtrl.prototype.show = function (data) {
        this._data = data;
        this.showself();
    };
    PlayerInfoCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.components.PlayerInfoUI();
            this._head = new HeadUI();
            this._head.setImageBounds(73, 73);
            this._head.setLabInfo(HeadUI.TYPE_SCORE);
            this._head._labName.visible = false;
            this._head._labInfo.visible = false;
            this._ui._box.addChild(this._head);
            this._ui._close.on(Laya.Event.CLICK, this, this.hide);
            EventManager.instance.registerOnObject(this, server, EventNames.GAME_USER_INFO_REP, this, this.onUserInfoRep);
            EventManager.instance.registerOnObject(this, this._ui._btnVoice, Laya.Event.CLICK, this, this.onTouch);
        }
        _super.prototype.beforeShow.call(this);
        this.onShow();
    };
    /**
    * 开启监听，配置宽高，添加到舞台
    */
    PlayerInfoCtrl.prototype.onShow = function () {
        _super.prototype.onShow.call(this);
        var player = BaseGameData.getPlayerDataByUid(this._data.uid);
        if (player.ip == "") {
            server.userInfoReq([this._data.uid]);
        }
        this._head.getInfo(this._data.uid);
        this._ui._name.text = Utils.getFitNickName(this._data.nickname, 20);
        this._ui._ip.text = this._data.ip;
        this._ui._gps.text = this._data.gps || "该玩家定位未开启";
        this._ui._ID.text = this._data.uid;
        this._ui._btnVoice.visible = (Native.instance.isNative && this._data.uid != server.uid && !GameConfig.IS_MATCH);
        this.checkFobbiden();
        this.tweenSelf();
    };
    PlayerInfoCtrl.prototype.checkFobbiden = function () {
        var player = BaseGameData.getPlayerDataByUid(this._data.uid);
        if (player.isVoiceForbidden)
            this._ui._btnVoice.selected = true;
        else
            this._ui._btnVoice.selected = false;
    };
    PlayerInfoCtrl.prototype.onUserInfoRep = function (info) {
        for (var k in info.info) {
            var v = info.info[k];
            var player = BaseGameData.getPlayerDataByUid(v.uid);
            player.ip = v.ip;
            player.gps = v.addr;
            this._ui._ip.text = v.ip;
            this._ui._gps.text = v.addr || "该玩家定位未开启";
        }
    };
    PlayerInfoCtrl.prototype.onTouch = function () {
        var _this = this;
        var player = BaseGameData.getPlayerDataByUid(this._data.uid);
        if (player) {
            if (player.isVoiceForbidden)
                Native.instance.voiceForbidMemberVoice(BaseGameData.voiceRoomName, player.voiceMemberID, 0, function () {
                    _this.checkFobbiden();
                });
            else
                Native.instance.voiceForbidMemberVoice(BaseGameData.voiceRoomName, player.voiceMemberID, 1, function () {
                    _this.checkFobbiden();
                });
        }
    };
    /**
     * 离开时调度
     */
    PlayerInfoCtrl.prototype.afterShow = function () {
        _super.prototype.afterShow.call(this);
    };
    return PlayerInfoCtrl;
}(BaseCtrl));
//# sourceMappingURL=PlayerInfoCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 帮助页面
*/
var AgreementCtrl = /** @class */ (function (_super) {
    __extends(AgreementCtrl, _super);
    function AgreementCtrl() {
        var _this = _super.call(this) || this;
        _this["name"] = "AgreementCtrl";
        return _this;
    }
    Object.defineProperty(AgreementCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new AgreementCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    AgreementCtrl.prototype.show = function () {
        this.showself();
    };
    /**
     * 这里完成new ui，添加注册监听等初始化工作
     */
    AgreementCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.panel.AgreeMentUI();
            EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.hide);
            // EventManager.instance.registerOnObject(this, this._ui._tab, Laya.Event.CLICK, this, this.checkTab);
            this._ui._close.on(Laya.Event.CLICK, this, this.hide);
            this._ui._panel.vScrollBar.visible = false;
            // this._ui._lab.style.fontSize = 18;
            // this._ui._lab.color = "#925b3d";
            // this._ui._lab.style.leading = 10;
            this.iHtml = new Laya.HTMLIframeElement(); //span.normal {color : #925b3d;font-size : 24;font-family:"PingFangSC-Ruglar";line-height:18px}
            this.iHtml.style.fontSize = 24;
            this.iHtml.style.color = "#925b3d";
            this.iHtml.style.fontFamily = "PingFangSC-Ruglar";
            this.iHtml.style.leading = 20;
            this._ui._panel.addChild(this.iHtml);
            this.iHtml.width = this._ui._panel.width;
            this.iHtml.href = "res/html/agreement.html";
            Laya.timer.loop(300, this, this.onLoop);
            Laya.timer.once(60000, this, this.clearTimer);
            // this._ui.addChild(iHtml);
        }
        _super.prototype.beforeShow.call(this);
        this.onShow();
    };
    /**
    * 开启监听，配置宽高，添加到舞台
    */
    AgreementCtrl.prototype.onShow = function () {
        _super.prototype.onShow.call(this);
        // this.tweenSelf();
        // if (!this.cfg)
        // this.cfg = Laya.loader.getRes(ResourceConfig.CONFIG_HELP);
        // this._ui._lab.innerHTML = this.cfg["0"];
        // this._ui._lab.size(this._ui._lab.width, this._ui._lab.contextHeight);
    };
    /**
     * 离开时调度
     */
    AgreementCtrl.prototype.afterShow = function () {
        _super.prototype.afterShow.call(this);
    };
    AgreementCtrl.prototype.onLoop = function () {
        if (this.iHtml.height > this._ui._panel.height) {
            this._ui._panel.vScrollBar.stopScroll();
            this._ui._panel.vScrollBar.setScroll(0, this.iHtml.height - this._ui._panel.height, 0);
            this.clearTimer();
        }
    };
    AgreementCtrl.prototype.clearTimer = function () {
        Laya.timer.clear(this, this.onLoop);
        Laya.timer.clear(this, this.clearTimer);
    };
    return AgreementCtrl;
}(BaseCtrl));
//# sourceMappingURL=AgreementCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * @author seacole
 * 顶层弹窗 游戏中
*/
var AlertInGameCtrl = /** @class */ (function (_super) {
    __extends(AlertInGameCtrl, _super);
    function AlertInGameCtrl() {
        var _this = _super.call(this) || this;
        _this["name"] = "AlertInGameCtrl";
        return _this;
    }
    Object.defineProperty(AlertInGameCtrl, "instance", {
        get: function () {
            if (!this._instanceInGame)
                this._instanceInGame = new AlertInGameCtrl();
            return this._instanceInGame;
        },
        enumerable: true,
        configurable: true
    });
    AlertInGameCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.panel.AlertInGameUI();
            this._ui._labMsg.style.align = "center";
            this._ui._labMsg.style.color = "#9b5036";
            // this._ui._labMsg.style.strokeColor = "#3b6374";
            // this._ui._labMsg.style.stroke = 3;
            EventManager.instance.registerOnObject(this, this._ui._btns, Laya.Event.CLICK, this, this.onTouch);
            this._autoHide = false;
            this._ui._dissloveBox.visible = false;
        }
        EventManager.instance.registerOnObject(this, AppControl.getInstance().stage, Laya.Event.RESIZE, this, this.onResize);
        EventManager.instance.registerOnObject(this, this._ui, Laya.Event.REMOVED, this, this.afterShow);
        this._size = 24;
        this.onShow();
    };
    AlertInGameCtrl.prototype.onShow = function () {
        _super.prototype.onShow.call(this);
        var a;
        if (this._title == "提示")
            this._ui._imgTitle.source = Laya.Loader.getRes(ResourceConfig.ALERT_TISHI);
        else
            this._ui._imgTitle.source = Laya.Loader.getRes(this._title);
        this._ui._imgTitle.centerX = 0;
        if (this._needCancel) {
            this._ui._btnConfirm.centerX = -136;
            this._ui._btnCancel.visible = true;
        }
        else {
            this._ui._btnConfirm.centerX = 0;
            this._ui._btnCancel.visible = false;
        }
    };
    return AlertInGameCtrl;
}(AlertCtrl));
//# sourceMappingURL=AlertInGameCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * @author seacole
 * 顶层弹窗 游戏中
*/
var AlertDissolveCtrl = /** @class */ (function (_super) {
    __extends(AlertDissolveCtrl, _super);
    function AlertDissolveCtrl() {
        var _this = _super.call(this) || this;
        _this._dissloveItemLayout = [];
        _this._index = 0;
        _this["name"] = "AlertDissolveCtrl";
        return _this;
    }
    Object.defineProperty(AlertDissolveCtrl, "instance", {
        get: function () {
            if (!this._instanceDissolve)
                this._instanceDissolve = new AlertDissolveCtrl();
            return this._instanceDissolve;
        },
        enumerable: true,
        configurable: true
    });
    AlertDissolveCtrl.prototype.beforeShow = function () {
        console.log("beforeShow==================================");
        if (!this._ui) {
            this._ui = new ui.panel.AlertInGameUI();
            this._ui._labMsg.style.align = "center";
            this._ui._labMsg.style.color = "#423016";
            // this._ui._labMsg.style.strokeColor = "#3b6374";
            // this._ui._labMsg.style.stroke = 3;
            EventManager.instance.registerOnObject(this, this._ui._btns, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, AppControl.getInstance().stage, Laya.Event.RESIZE, this, this.onResize);
            EventManager.instance.registerOnObject(this, this._ui, Laya.Event.REMOVED, this, this.afterShow);
            this._autoHide = false;
            this._size = 22;
            this._ui._dissloveBox.visible = true;
        }
        this.initLayout();
        this.onShow();
    };
    AlertDissolveCtrl.prototype.isVisiable = function () {
        if (this._ui) {
            return this._ui.visible;
        }
        else {
            return false;
        }
    };
    AlertDissolveCtrl.prototype.initLayout = function () {
        this._dissloveItemLayout = [[], [{ left: 25, centerY: 0 }, { right: 25, centerY: 0 }],
            [{ left: 25, centerY: -50 }, { right: 25, centerY: -50 }, { centerX: 25, centerY: 50 }],
            [{ left: 25, centerY: -50 }, { right: 25, centerY: -50 }, { left: 25, centerY: 50 }, { right: 25, centerY: 50 }],
            [{ left: 25, centerY: -80 }, { right: 25, centerY: -80 }, { left: 25, centerY: 0 }, { right: 25, centerY: 0 }, { centerX: 0, centerY: 80 }],
            [{ left: 25, centerY: -80 }, { right: 25, centerY: -80 }, { left: 25, centerY: 0 }, { right: 25, centerY: 0 }, { left: 25, centerY: 80 }, { right: 25, centerY: 80 }]];
    };
    AlertDissolveCtrl.prototype.onShow = function () {
        console.log("onShow==================================");
        _super.prototype.onShow.call(this);
        this._ui._imgTitle.source = Laya.Loader.getRes(this._title);
        this._ui._imgTitle.skin = "common/title_disglove.png";
        this._ui._btnConfirm.skin = "common/sBtn_agree.png";
        this._ui._btnCancel.skin = "common/sBtn_reject.png";
        if (this._needCancel) {
            this._ui._btnConfirm.centerX = -136;
            this._ui._btnCancel.visible = true;
        }
        else {
            this._ui._btnConfirm.centerX = 0;
            this._ui._btnCancel.visible = false;
        }
        log("AlertDissolveCtrl");
        log(this._params);
        if (this._params) {
            this.update(this._params);
        }
    };
    AlertDissolveCtrl.prototype.update = function (info) {
        console.log("update==================================");
        var has = true;
        var refusePlayer;
        for (var k in info) {
            var player = info[k];
            if (BaseGameData.getPlayerDataByUid(player.uid) && BaseGameData.getPlayerDataByUid(player.uid).seatid == BaseGameData.selfSeatid) {
                this.waitDis(info);
                if (player.result > 0) {
                    has = false;
                }
                break;
            }
            if (player.result == 2) {
                this.showRefuse(BaseGameData.getPlayerDataByUid(player.uid));
                has = false;
            }
        }
        if (has) {
            this.waitDis(info);
            this._ui._btnCancel.visible = true;
            this._ui._btnConfirm.visible = true;
            this._ui._btnConfirm.centerX = -138;
        }
    };
    AlertDissolveCtrl.prototype.waitDis = function (info) {
        this._ui._btnCancel.visible = false;
        this._ui._btnConfirm.visible = false;
        this._ui._labMsg.visible = false;
        this._ui._itemBox.visible = true;
        this._ui._label_tip.visible = true;
        // this._index++;
        // log(this._index)
        var player;
        if (info[0]) {
            player = BaseGameData.getPlayerDataByUid(info[0].uid);
            this._ui._label_tip.text = "玩家" + Utils.getFitNickName(player.nickname, 10) + "申请解散房间,是否同意?";
        }
        //log(player.nickname)
        this._ui._itemBox.removeChildren();
        var index = 0;
        //log(BaseGameData.players)
        for (var k in BaseGameData.players) {
            var player_1 = BaseGameData.players[k];
            var item = new ui.panel.AlertDissloveItemUI();
            item._name.text = Utils.getFitNickName(player_1.nickname, 10);
            this._ui._itemBox.addChild(item);
            Utils.injectProp(item, this._dissloveItemLayout[BaseGameData.maxPlayer - 1][index]);
            index++;
            for (var m in info) {
                var v = info[m];
                if (v.uid == player_1.uid) {
                    if (v.result == 1) {
                        item._status.skin = "common/img_gg.png";
                    }
                    else if (v.result == 2) {
                        item._status.skin = "common/img_xx.png";
                        Laya.timer.once(1000, this, this.showRefuse, [player_1]);
                    }
                    else {
                        item._status.skin = "common/img_wenhao.png";
                    }
                }
            }
        }
    };
    AlertDissolveCtrl.prototype.showRefuse = function (player) {
        this._ui._label_tip.visible = false;
        this._ui._labMsg.visible = true;
        this._ui._itemBox.visible = false;
        this._ui._imgTitle.skin = "common/title_disglove.png";
        this._ui._labMsg.innerHTML = "玩家" + player.nickname + "已拒绝,<br />房间解散失败,继续游戏";
        this._ui._btnConfirm.visible = true;
        this._ui._btnConfirm.centerX = 0;
        this._ui._btnConfirm.skin = "common/sBtn_agree.png";
        this._ui._btnCancel.skin = "common/sBtn_reject.png";
        this._ui._btnCancel.visible = false;
        if (this._list) {
            this._list.visible = false;
        }
    };
    AlertDissolveCtrl.prototype.chooseDis = function (info) {
        if (info.length == 0)
            return;
        var player = BaseGameData.getPlayerDataByUid(info[0].uid);
        if (this._list) {
            this._list.visible = false;
        }
        if (player) {
            this._ui._btnConfirm.centerX = -138;
            this._ui._btnConfirm.visible = true;
            this._ui._btnCancel.visible = true;
            this._ui._labMsg.innerHTML = "玩家" + player.nickname + "申请解散房间,<br />是否同意,<br />超过3分钟默认同意";
            this._ui._btnCancel.skin = "common/sBtn_reject.png";
            this._ui._btnConfirm.skin = "common/sBtn_agree.png";
        }
    };
    return AlertDissolveCtrl;
}(AlertInGameCtrl));
//# sourceMappingURL=AlertDissolveCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * @author seacole
 * 顶层弹窗 大厅中
*/
var AlertMenuCtrl = /** @class */ (function (_super) {
    __extends(AlertMenuCtrl, _super);
    function AlertMenuCtrl() {
        return _super.call(this) || this;
    }
    Object.defineProperty(AlertMenuCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new AlertMenuCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    return AlertMenuCtrl;
}(AlertCtrl));
//# sourceMappingURL=AlertMenuCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ChatContent = /** @class */ (function (_super) {
    __extends(ChatContent, _super);
    function ChatContent() {
        var _this = _super.call(this) || this;
        // private rotationList = [[], [], [0, 0, 0], [0, 0, 0, 0]]
        // private contentRotation = [[], [], [0, 0, 0], [0, 0, 0, 0]]
        _this.emojiCenterXList = [[], [0, 0], [100, -10, 100], [100, -10, -100, 3]];
        _this.emojiCenterYList = [[], [0, 0], [20, -30, 20], [20, -30, -10, -5]];
        _this.mesCenterXList = [[], [0, 0], [0, 0, 0], [0, 0, -120, 0]];
        _this.mesCenterYList = [[], [0, 0], [0, 0, 0], [0, 0, -200, 0]];
        _this.centerXList = [[], [0, 0], [0, 0, 3], [0, 0, 0, 3]];
        _this.centerYList = [[], [-7, -3], [-7, -8, -8], [-7, -8, -8, -8]];
        Dispatcher.on(EventNames.PLAY_RECORD_END, _this, _this.onPlayRecordEnd);
        return _this;
        // this.init(info)
    }
    Object.defineProperty(ChatContent.prototype, "popleft", {
        set: function (position) {
            this._popleft = position;
            if (position == 1) {
                this._bg.visible = false;
                this._bgEmoji.visible = false;
            }
            else {
                this._bgEmojiLeft.visible = false;
                this._bgLeft.visible = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    ChatContent.prototype.init = function (info, dir, seatid) {
        Laya.timer.clearAll(this);
        this.dir = dir;
        this._seatid = seatid;
        switch (info.chatType) {
            case GameDef.CHAT_TYPE.EMOJI:
                Laya.timer.clear(this, this.clear);
                this._bg.visible = false;
                this._bgLeft.visible = false;
                if (!this._emojiAni) {
                    this._emojiAni = new ui.panel.EmojiUI();
                    this._bgEmoji.visible = false;
                    this.addChild(this._emojiAni);
                    this._emoji.visible = false;
                    this._bgEmojiLeft.visible = false;
                }
                if (this._popleft == 1) {
                    this._emojiAni.x = this._bgEmojiLeft.x;
                    this._emojiAni.y = this._bgEmojiLeft.y;
                }
                else {
                    this._emojiAni.x = this._bgEmoji.x;
                    this._emojiAni.y = this._bgEmoji.y;
                }
                this._emojiAni._ani.stop();
                this._emojiAni._ani.source = GameDef.CHAT_EMOJI[parseInt(info.chatContent)];
                this._emojiAni.visible = true;
                this._emojiAni._ani.play();
                this.clear();
                break;
            case GameDef.CHAT_TYPE.QUICK_MESSAGE:
                Laya.timer.clear(this, this.clear);
                // this._bg.skin = "chat/messagePop.png"
                // let text = new Laya.Label()
                // text.text = GameDef.CHAT_MESSAGE[BaseGameData.gameType][parseInt(info.chatContent)]
                // text.fontSize = 26
                // text.color = "#000000"
                // this._bg.addChild(text)
                // this._bg.width = text.width + 45
                // this._bg.height = 74;
                // text.anchorX = 0.5
                // text.anchorY = 0.5
                // this._bg.scaleX = 1
                // text.scaleX = 1
                // if (this.dir == 2 && BaseGameData.maxPlayer> 2) {
                //     this._bg.scaleX = -1
                //     text.scaleX = -1
                // }
                // if(BaseGameData.maxPlayer == 4 && this.dir == 3){
                //     this._bg.scaleX = -1
                //     text.scaleX = -1
                // }
                // // text.rotation = this.contentRotation[BaseGameData.maxPlayer - 1][this.dir - 1]
                // text.centerX = this.centerXList[BaseGameData.maxPlayer - 1][this.dir - 1]
                // text.centerY = this.centerYList[BaseGameData.maxPlayer - 1][this.dir - 1]
                // this._bg.x = this.mesCenterXList[BaseGameData.maxPlayer - 1][this.dir - 1]
                // this._bg.y = this.mesCenterYList[BaseGameData.maxPlayer - 1][this.dir - 1]
                this._bgEmoji.visible = false;
                this._bgEmojiLeft.visible = false;
                if (!!this._emojiAni) {
                    this._emojiAni.visible = false;
                }
                if (this._popleft == 1) {
                    this._bgLeft.visible = true;
                    this._messageLeft.text = GameDef.CHAT_MESSAGE[BaseGameData.gameType][parseInt(info.chatContent)];
                    this._messageLeft.right = 21 + this._messageLeft.width;
                    this._bgLeft.width = this._messageLeft.width + 45;
                }
                else {
                    this._bg.visible = true;
                    this._bgLeft.visible = false;
                    this._message.text = GameDef.CHAT_MESSAGE[BaseGameData.gameType][parseInt(info.chatContent)];
                    this._bg.width = this._message.width + 45;
                }
                var player = BaseGameData.getPlayerDataBySeatid(this._seatid);
                var sex = player ? player.sex : 1;
                SoundManager.instance.playEffect("message_" + info.chatContent, sex);
                this.clear();
                break;
            case GameDef.CHAT_TYPE.RECORD:
                Laya.timer.clear(this, this.clear);
                this._bgEmoji.visible = false;
                this._bgEmojiLeft.visible = false;
                if (!this._chatRecord)
                    this._chatRecord = new ui.components.chat.ChatRecordUI();
                this._chatRecord.ani1.play(1, true);
                if (this._popleft == 1) {
                    this._bgLeft.visible = true;
                    this._messageLeft.text = "";
                    this._bgLeft.width = 70;
                    this._bgLeft.addChild(this._chatRecord);
                }
                else {
                    this._bg.visible = true;
                    this._message.text = "";
                    this._bg.width = 70;
                    this._bg.addChild(this._chatRecord);
                }
                this._chatRecord.centerX = 0;
                this._chatRecord.centerY = 0;
                break;
        }
    };
    ChatContent.prototype.getContentBox = function () {
        // this._bg.rotation = this.rotationList[BaseGameData.maxPlayer - 1][this.dir - 1]
        if (this.dir == 2)
            this._bg.scaleX = -1;
    };
    ChatContent.prototype.onPlayRecordEnd = function () {
        if (this._chatRecord)
            this._chatRecord.ani1.stop();
        this._chatRecord.removeSelf();
        this.visible = false;
    };
    ChatContent.prototype.clear = function () {
        Laya.timer.once(2000, this, function () {
            this.visible = false;
        });
    };
    return ChatContent;
}(ui.panel.ChatContentUI));
//# sourceMappingURL=ChatContent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 创建桌子
*/
var ChatCtrl = /** @class */ (function (_super) {
    __extends(ChatCtrl, _super);
    function ChatCtrl() {
        var _this = _super.call(this) || this;
        _this._selectTab = 0;
        _this["name"] = "ChatCtrl";
        return _this;
    }
    Object.defineProperty(ChatCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new ChatCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    ChatCtrl.prototype.test = function (e) {
        this.hide();
    };
    ChatCtrl.prototype.show = function () {
        this._selectTab = 0;
        this.showself();
    };
    ChatCtrl.prototype.hide = function () {
        if (this._ui) {
            this._ui.removeSelf();
            return true;
        }
        if (this._uiMask) {
            this._uiMask.removeSelf();
            return true;
        }
        return false;
    };
    /**
     * 这里完成new ui，添加注册监听等初始化工作
     */
    ChatCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.panel.ChatNUI();
            this._ui._emoList.itemRender = emojiRender;
            this._ui._emoList.scrollBar.visible = false;
            this._ui._emoList.renderHandler = new Laya.Handler(this, this.updateListResult);
            this._ui._mesList.itemRender = mesRender;
            this._ui._mesList.scrollBar.visible = false;
            this._ui._mesList.renderHandler = new Laya.Handler(this, this.updateListVisiter);
            EventManager.instance.registerOnObject(this, this._ui._emoji, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._ui._message, Laya.Event.CLICK, this, this.onTouch);
            this._ui._emoList.selectEnable = true;
            //this._ui._emoList.mouseHandler = new Laya.Handler(this, this.onEmoji);
            this._ui._mesList.selectEnable = true;
            this._ui._mesList.mouseHandler = new Laya.Handler(this, this.onMessage);
            //this._ui._close.visible = false;
            //this._ui._close.on(Laya.Event.CLICK, this, this.hide)
            // this._ui.on(Laya.Event.CLICK, AppControl.getInstance().AppStage.BGLevel, this.test)
            // this._ui.on(Laya.Event.CLICK, AppControl.getInstance().AppStage.MainLevel, this.test)
            //this._ui.on(Laya.Event.CLICK, AppControl.getInstance().AppStage.GUILevel, this.test)
            // this._ui.on(Laya.Event.CLICK, AppControl.getInstance().AppStage.ToolTipLevel, this.test)
            // this._ui.on(Laya.Event.CLICK, AppControl.getInstance().AppStage.SystemLevel, this.test)
            // this._ui.on(Laya.Event.CLICK, AppControl.getInstance().AppStage.LoadingLevel, this.test)
            // EventManager.instance.registerOnObject(this, this._ui._btnClose, Laya.Event.CLICK, this, this.onTouch);
            this._ui._uiMask.visible = false;
            this._ui._mesList.repeatY = 14;
        }
        _super.prototype.beforeShow.call(this);
        this.onShow();
    };
    ChatCtrl.prototype.onEmoji = function (e, index) {
        if (e.type == "click") {
            console.log("index=============" + index);
            server.playerChatReq(GameDef.CHAT_TYPE.EMOJI, String(index));
            this.hide();
        }
    };
    ChatCtrl.prototype.onMessage = function (e, index) {
        if (e.type == "click") {
            console.log("index=============" + index);
            server.playerChatReq(GameDef.CHAT_TYPE.QUICK_MESSAGE, String(index));
            this.hide();
        }
    };
    /**
    * 开启监听，配置宽高，添加到舞台
    */
    ChatCtrl.prototype.onShow = function () {
        this._ui._tabBtn.selectedIndex = 0;
        //Utils.injectProp(this._ui._chatbox, BaseGameData.tablelayout.CHAT_CONTENT_LAYOUT)
        this._ui._chatbox.right = AppControl.getInstance().stage.width > TableLayout.STAGE.width ? (AppControl.getInstance().stage.width - TableLayout.STAGE.width) / 2 + 0 : 0;
        this._ui._chatbox.centerY = 0;
        this.checkTab();
        this._ui._mesList.array = GameDef.CHAT_MESSAGE[BaseGameData.gameType];
        var len = GameDef.CHAT_EMOJI.length;
        var arr = [];
        for (var i = 0; i < len; i += 2) {
            var data = [];
            data.push({
                source: "emoji/e" + (i + 1) + ".png",
                index: i
            });
            if (i + 1 < len)
                data.push({
                    source: "emoji/e" + (i + 2) + ".png",
                    index: i + 1
                });
            arr.push(data);
        }
        this._ui._emoList.array = arr;
        this._ui._mesList.array = GameDef.CHAT_MESSAGE[BaseGameData.gameType];
        _super.prototype.onShow.call(this);
        // this.tweenSelf();
    };
    // protected tweenSelf():void
    // {
    //     this._ui.right=414;
    //     this._ui.bottom=155;
    //     this._ui.scale(0,0);
    //     Laya.Tween.clearTween(this._ui);
    //     Laya.Tween.to(this._ui,{scaleX:1,scaleY:1,right:120,bottom:0},200,Laya.Ease.backOut);
    // }
    /**
     * 离开时调度
     */
    ChatCtrl.prototype.afterShow = function () {
        _super.prototype.afterShow.call(this);
    };
    ChatCtrl.prototype.onTouch = function (e) {
        switch (e.currentTarget) {
            // case this._ui._btnClose:
            //     this.hide();
            //     break;
            case this._ui._emoji:
                this.selectTab = 1;
                break;
            case this._ui._message:
                this.selectTab = 0;
                break;
        }
    };
    Object.defineProperty(ChatCtrl.prototype, "selectTab", {
        set: function (value) {
            if (this._selectTab != value) {
                this._selectTab = value;
                this.checkTab();
            }
        },
        enumerable: true,
        configurable: true
    });
    ChatCtrl.prototype.onresize = function () {
        _super.prototype.onResize.call(this);
        this._ui._chatbox.right = AppControl.getInstance().stage.width > TableLayout.STAGE.width ? (AppControl.getInstance().stage.width - TableLayout.STAGE.width) / 2 + 0 : 0;
    };
    ChatCtrl.prototype.checkTab = function () {
        // if (this._selectTab == 0) {
        //     this._ui._emoji.alpha = 1;
        //     this._ui._message.alpha = 0.01;
        // }else {
        //     this._ui._emoji.alpha = 0.01;
        //     this._ui._message.alpha = 1;
        // }
        this._ui._emojiBox.visible = this._selectTab == 1;
        this._ui._mesBox.visible = this._selectTab == 0;
        if (this._selectTab == 0) {
            this._ui._message.skin = "chat/tab_msg_selected_bg.png";
            this._ui._msg_s1.visible = false;
            this._ui._msg_us1.visible = true;
            this._ui._emoji.skin = "chat/tab_emoj_unselected_bg.png";
            this._ui._e_s1.visible = true;
            this._ui._e_us1.visible = false;
        }
        else {
            this._ui._message.skin = "chat/tab_msg_unselected_bg.png";
            this._ui._msg_s1.visible = true;
            this._ui._msg_us1.visible = false;
            this._ui._emoji.skin = "chat/tab_emoj_selected_bg.png";
            this._ui._e_s1.visible = false;
            this._ui._e_us1.visible = true;
        }
    };
    /***渲染单元格时的回调方法***/
    ChatCtrl.prototype.updateListResult = function (cell, index) {
        cell.update(index);
    };
    /***渲染单元格时的回调方法***/
    ChatCtrl.prototype.updateListVisiter = function (cell, index) {
        cell.update(index);
    };
    ChatCtrl.TYPE_REAL_TIME = 1;
    ChatCtrl.TYPE_GAME_END = 2;
    return ChatCtrl;
}(BaseCtrl));
var emojiRender = /** @class */ (function (_super) {
    __extends(emojiRender, _super);
    function emojiRender() {
        var _this = _super.call(this) || this;
        _this.init();
        return _this;
    }
    emojiRender.prototype.init = function () {
        this._e1.on(Laya.Event.CLICK, this, this.onEmoji);
        this._e2.on(Laya.Event.CLICK, this, this.onEmoji);
    };
    emojiRender.prototype.onEmoji = function (e) {
        var idx = this._index1;
        if (this._e1 == e.target) {
            log("e1" + this._index1);
        }
        else if (this._e2 == e.target) {
            log("e2" + this._index2);
            idx = this._index2;
        }
        server.playerChatReq(GameDef.CHAT_TYPE.EMOJI, String(idx));
        ChatCtrl.instance.hide();
    };
    emojiRender.prototype.update = function (index) {
        var len = this.dataSource.length;
        this._index1 = this.dataSource[0].index;
        this._e1.skin = this.dataSource[0].source;
        if (1 == len) {
            this._e2.visible = false;
            this._index1 = -1;
        }
        else {
            this._index2 = this.dataSource[1].index;
            this._e2.skin = this.dataSource[1].source;
        }
    };
    return emojiRender;
}(ui.panel.EmojiItemUI));
var mesRender = /** @class */ (function (_super) {
    __extends(mesRender, _super);
    function mesRender() {
        var _this = _super.call(this) || this;
        _this.init();
        return _this;
    }
    mesRender.prototype.init = function () {
        this._line = new Laya.Image("chat/icon_line.png");
        this.addChild(this._line);
        this._line.centerX = 0;
        this._line.bottom = 1;
    };
    mesRender.prototype.update = function (index) {
        this._msg.text = this.dataSource;
    };
    return mesRender;
}(ui.panel.MsgItemUI));
//# sourceMappingURL=ChatCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var CreateItem = /** @class */ (function (_super) {
    __extends(CreateItem, _super);
    function CreateItem(ismatch) {
        if (ismatch === void 0) { ismatch = false; }
        var _this = _super.call(this) || this;
        _this["name"] = "CreateItem";
        _this._match = ismatch;
        return _this;
    }
    CreateItem.prototype.getGpsView = function (info) {
        var view = new ui.panel.CreateItemUI();
        var check = this.getChooseView(info);
        check.mouseThrough = false;
        view._content.addChild(check);
        check.x = 35;
        check.y = 5;
        // check.centerY = 0
        view._content.height = view._content.height + 40;
        view.height = view.height + 40;
        return view;
    };
    CreateItem.prototype.getCountView = function (info) {
        var view = new Laya.RadioGroup();
        view.labels = info.texts;
        view.skin = "createRoom/radio_rule.png";
        view.stateNum = 2;
        view.labelPadding = "0,0,0,10";
        view.labelColors = "#9B5036,#9B5036";
        view.labelFont = "Microsoft YaHei";
        view.labelBold = true;
        view.labelSize = 35;
        view.space = 150;
        view.mouseThrough = false;
        view.hitTestPrior = true;
        // view..selectedIndex
        if (info.itemSpace) {
            view.space = info.itemSpace;
        }
        if (this._createInfo[info.key] >= 0) {
            info.value = this._createInfo[info.key];
        }
        else {
            info.value = info.value;
        }
        if (info.value >= 0) {
            var index = info.values.indexOf(info.value);
            // console.info(info.values.indexof(info.value))
            view.selectedIndex = index;
            if (info.cost && CreateRoomCtrl.instance._costs && CreateRoomCtrl.instance._costs.length) {
                CreateRoomCtrl.instance._cost = CreateRoomCtrl.instance._costs[index];
            }
            if (info.costDivide && CreateRoomCtrl.instance._costDivide && CreateRoomCtrl.instance._costDivide.length) {
                CreateRoomCtrl.instance._costPeopleNum = CreateRoomCtrl.instance._costDivide[index];
                CreateRoomCtrl.instance._totalCost = CreateRoomCtrl.instance._cost * CreateRoomCtrl.instance._costPeopleNum;
            }
        }
        this._createInfo[info.key] = info.value;
        this._newCreateInfo[info.key] = info.value;
        this._desc[info.key] = info.des[view.selectedIndex];
        view.selectHandler = new Laya.Handler(this, this.onCountChange, [info]);
        //this.addLisitener(view)
        return view;
    };
    CreateItem.prototype.getSelectView = function (info) {
        var view = new Laya.RadioGroup();
        view.labels = info.texts;
        view.skin = "createRoom/radio_rule.png";
        view.stateNum = 2;
        view.labelPadding = "0,0,0,10";
        view.space = 150;
        view.labelColors = "#9B5036,#9B5036";
        view.labelFont = "Microsoft YaHei";
        view.labelBold = true;
        view.labelSize = 35;
        view.mouseThrough = false;
        if (this._createInfo[info.key] >= 0) {
            info.value = this._createInfo[info.key];
        }
        else {
            info.value = info.value;
        }
        if (info.value >= 0) {
            view.selectedIndex = info.value;
        }
        this._createInfo[info.key] = info.value;
        this._newCreateInfo[info.key] = info.value;
        this._desc[info.key] = info.des[info.value];
        view.selectHandler = new Laya.Handler(this, this.onSelectChange, [info]);
        if (info.changeOn) {
            for (var k in info.changeOn) {
                var v = info.changeOn[k];
                Dispatcher.on(k, view, this.dispatchChange.bind(this, [view, v]));
                for (var j in v) {
                    var att = v[j];
                    if (j == "selectedIndex") {
                        if (view.numChildren >= view.selectedIndex + 1) {
                            continue;
                        }
                    }
                    view[j] = att[this._newCreateInfo[k]];
                }
            }
        }
        return view;
    };
    CreateItem.prototype.getChooseView = function (info) {
        var box = new Laya.Box();
        var view = new Laya.CheckBox();
        view.skin = "createRoom/checkBox_rule.png";
        view.stateNum = 2;
        view.label = info.texts;
        view.labelColors = "#9B5036,#9B5036";
        view.labelPadding = "0,0,0,10";
        view.labelFont = "Microsoft YaHei";
        view.labelBold = true;
        view.labelSize = 35;
        view.mouseThrough = false;
        if (this._createInfo[info.key] >= 0) {
            info.value = this._createInfo[info.key];
        }
        else {
            info.value = info.value;
        }
        if (info.value >= 0) {
            if (info.value == 1) {
                view.selected = true;
            }
            else {
                view.selected = false;
            }
        }
        this._createInfo[info.key] = info.value;
        this._newCreateInfo[info.key] = info.value;
        this._desc[info.key] = info.des[info.value];
        view.on("change", this, this.updateLabel, [view, info]);
        if (info.changeOn) {
            for (var k in info.changeOn) {
                var v = info.changeOn[k];
                Dispatcher.on(k, view, this.dispatchChange.bind(this, [view, v]));
                for (var j in v) {
                    var att = v[j];
                    view[j] = att[this._newCreateInfo[k]];
                }
            }
        }
        box.addChild(view);
        return box;
    };
    CreateItem.prototype.dispatchChange = function (value, info) {
        var target = value[0];
        var obj = value[1];
        for (var k in obj) {
            var v = obj[k];
            if (k == "selectedIndex") {
                //防止减少数量时重置了亿选择的单选项
                if (target.numChildren >= target.selectedIndex + 1) {
                    continue;
                }
            }
            target[k] = v[info];
        }
    };
    CreateItem.prototype.updata = function (callback, createInfo, newCreateInfo, desc) {
        this.callback = callback;
        this._createInfo = createInfo;
        this._newCreateInfo = newCreateInfo;
        this._desc = desc;
        if (this.dataSource && this.dataSource) {
            var content = void 0;
            if (this.dataSource.title) {
                content = new ui.panel.CreateRuleIteamUI();
                content._name.text = this.dataSource.title;
                this.addChild(content);
                content.x = 30;
                content.y = 20;
            }
            if (this.dataSource.name == "select") {
                var view = this.getSelectView(this.dataSource);
                view.x = 150;
                view.y = 15;
                content._content.addChild(view);
                content._content.height = view.height + 30;
                content.height = view.height + 40;
            }
            else if (this.dataSource.name == "choose") {
                var view = this.getChooseView(this.dataSource);
                view.x = 150;
                view.y = 15;
                content._content.addChild(view);
                content._content.height = view.height + 65;
                content.height = view.height + 75;
            }
            else if (this.dataSource.name == "chooseAndSelect") {
                var y = 15;
                var x = 150;
                var i = 0;
                for (var k in this.dataSource.info) {
                    var info = this.dataSource.info[k];
                    if (info.name == "select") {
                        var view = this.getSelectView(info);
                        content._content.addChild(view);
                        if (info.itemSpace) {
                            view.space = info.itemSpace;
                        }
                        view.x = x;
                        view.y = y;
                        y = y + 60;
                    }
                    else if (info.name == "choose") {
                        if (info.matchvalue >= 0) {
                            this._createInfo[info.key] = info.matchvalue;
                            this._newCreateInfo[info.key] = info.matchvalue;
                            continue;
                        }
                        var view = this.getChooseView(info);
                        content._content.addChild(view);
                        if (i == this.dataSource.space) {
                            i = 0;
                            x = 150;
                            y = y + 60;
                        }
                        else {
                            x = 150 + i * (1100 - 60) / this.dataSource.space;
                        }
                        i++;
                        view.x = x;
                        view.y = y;
                    }
                }
                content._content.height = y + 60;
                content.height = y + 70;
                // this.height = y
            }
            else if (this.dataSource.name == "countSelect") {
                var view = this.getCountView(this.dataSource);
                view.x = 150;
                view.y = 15;
                content._content.addChild(view);
                content._content.height = view.height + 30;
                content.height = view.height + 40;
            }
            else if (this.dataSource.name == "chooseSelect") {
                var view = new ChooseAndSelect(this.dataSource, this._createInfo, this._newCreateInfo, this._desc, content);
                view.x = 5;
                this.addChild(view);
            }
            else if (this.dataSource.name == "switchAndSelect") {
                var view = new SwitchAndSelect(this.dataSource, this._createInfo, this._newCreateInfo, this._desc);
                view.x = 5;
                this.addChild(view);
            }
            else if (this.dataSource.name == "chargeSelect") {
                //隐藏收费方式 
                // let view = new ChargeSelect(this.dataSource, this._createInfo, this._newCreateInfo, this._desc, content)
                // view.y = 30
                // content._content.addChild(view)
                // content._content.height = view.height + 45
                // content.height = view.height + 55
            }
            else if (this._dataSource.name == "gps") {
                // let view = this.getGpsView(this.dataSource)
                // // view.x = 5
                // this.addChild(view)
                // view.height = view.height + 5
                //  if (!GameConfig.IS_TEST) {
                //     //默认gps 为开启
                //     this._createInfo[this._dataSource.name] = 1
                //     this._newCreateInfo[this._dataSource.name] = 1
                //     this._desc[this._dataSource.name] = this._dataSource.des
                //  }
                //  else
                //  {
                //      this._createInfo[this._dataSource.name] = 0
                //     this._newCreateInfo[this._dataSource.name] = 0
                //     this._desc[this._dataSource.name] = this._dataSource.des
                //  }
            }
            else if (this._dataSource.name == "hbar") {
                // let view = new HBar(this.dataSource, this._createInfo, this._newCreateInfo, this._desc)
                // view.x = 40
                // view.y = 140
                // content._content.addChild(view)
                // content._content.height = view.height + 140
                // content.height = view.height + 160
            }
            else if (this._dataSource.name == "hbuttons") {
                // let view = new HButtons(this.dataSource, this._createInfo, this._newCreateInfo, this._desc)
                // view.centerX = 0
                // view.y = 120
                // content._content.addChild(view)
                // content._content.height = view.height + 140
                // content.height = view.height + 150
            }
            else {
                this._createInfo[this.dataSource.key] = this.dataSource.value;
                this._newCreateInfo[this.dataSource.key] = this.dataSource.value;
            }
        }
    };
    CreateItem.prototype.updateLabel = function (checkBox, info) {
        SoundManager.instance.playBtnEffect(SoundConfig.SOUND_BTN_NORMAL);
        var value = 0;
        if (checkBox.selected == true) {
            value = 1;
        }
        this._createInfo[info.key] = info.values[value];
        this._newCreateInfo[info.key] = info.values[value];
        this._desc[info.key] = info.des[value];
        // this.callback(info.key, info.values[value])
        if (info.changeDispatch) {
            Dispatcher.dispatch(info.key, [this._newCreateInfo[info.key], info]);
        }
    };
    CreateItem.prototype.onSelectChange = function (info, index) {
        console.log("你选择了第 " + (index + 1) + " 项");
        SoundManager.instance.playBtnEffect(SoundConfig.SOUND_BTN_NORMAL);
        this._createInfo[info.key] = info.values[index];
        this._newCreateInfo[info.key] = info.values[index];
        this._desc[info.key] = info.des[index];
        //this.callback(info.key, info.values[index])
    };
    CreateItem.prototype.onCountChange = function (info, index) {
        console.log("你选择了第 " + (index + 1) + " 项");
        SoundManager.instance.playBtnEffect(SoundConfig.SOUND_BTN_NORMAL);
        this._createInfo[info.key] = info.values[index];
        this._newCreateInfo[info.key] = info.values[index];
        this._desc[info.key] = info.des[index];
        if (info.cost) {
            CreateRoomCtrl.instance._cost = CreateRoomCtrl.instance._costs[index];
            var _index = CreateRoomCtrl.instance._costDivide.indexOf(CreateRoomCtrl.instance._costPeopleNum);
            CreateRoomCtrl.instance._costPeopleNum = CreateRoomCtrl.instance._costDivide[_index];
            CreateRoomCtrl.instance._totalCost = CreateRoomCtrl.instance._cost * CreateRoomCtrl.instance._costPeopleNum;
            Dispatcher.dispatch("costchange");
            Dispatcher.dispatch("costdividechange");
        }
        if (info.costDivide) {
            CreateRoomCtrl.instance._costPeopleNum = CreateRoomCtrl.instance._costDivide[index];
            CreateRoomCtrl.instance._totalCost = CreateRoomCtrl.instance._cost * CreateRoomCtrl.instance._costPeopleNum;
            //CreateRoomCtrl.instance._costDivide = info.values[index]
            Dispatcher.dispatch("costchange");
            Dispatcher.dispatch("costdividechange");
        }
        if (info.changeDispatch) {
            Dispatcher.dispatch(info.key, [this._newCreateInfo[info.key], info]);
        }
        // this.callback(info.key, info.values[index])
    };
    return CreateItem;
}(Laya.View));
var ChooseAndSelect = /** @class */ (function (_super) {
    __extends(ChooseAndSelect, _super);
    function ChooseAndSelect(info, createInfo, newCreateInfo, desc, content) {
        var _this = _super.call(this) || this;
        _this._values = {};
        _this._views = {};
        _this._info = info;
        _this._createInfo = createInfo;
        _this._newCreateInfo = newCreateInfo;
        _this._desc = desc;
        _this._values = {};
        _this._views = [];
        _this._checks = [];
        _this._selects = [];
        //this._line.visible = false
        var view = new Laya.CheckBox();
        view.skin = "createRoom/checkBox_rule.png";
        view.stateNum = 2;
        view.label = info.texts;
        view.labelSize = 35;
        view.labelColors = "#9B5036,#9B5036";
        view.labelPadding = "0,0,0,0";
        view.labelFont = "Microsoft YaHei";
        view.labelBold = true;
        view.mouseThrough = false;
        view.x = 30;
        if (_this._createInfo[info.key] >= 0) {
            info.value = _this._createInfo[info.key];
        }
        else {
            info.value = info.value;
        }
        if (info.value >= 0) {
            if (info.value == 1) {
                view.selected = true;
            }
            else {
                view.selected = false;
            }
        }
        _this._createInfo[info.key] = info.value;
        _this._newCreateInfo[info.key] = info.value;
        _this._desc[info.key] = info.des[info.value];
        _this._content.addChild(view);
        _this._content.height = _this._content.height + 40;
        view.on("change", _this, _this.updateLabel, [view, info]);
        for (var k in info.info) {
            var v = info.info[k];
            if (v.name == "select") {
                var select = _this.getSelectView(v);
                _this._content.addChild(select);
                select.pos(30, parseInt(k) * 40 + 45);
                _this._content.height = _this._content.height + 40;
                _this._selects.push(select);
                if (view.selected == false) {
                    select.visible = false;
                }
            }
        }
        //this._line.visible = true
        _this.height = _this._content.height + 10;
        return _this;
    }
    ChooseAndSelect.prototype.onSelectChange = function (info, index) {
        console.log("你选择了第 " + (index + 1) + " 项");
        this._createInfo[info.key] = info.values[index];
        this._newCreateInfo[info.key] = info.values[index];
        this._desc[info.key] = info.des[index];
        // this.callback(info.key, info.values[index])
    };
    ChooseAndSelect.prototype.getSelectView = function (info) {
        var view = new Laya.RadioGroup();
        view.labels = info.texts;
        view.skin = "createRoom/radio_rule.png";
        view.stateNum = 2;
        view.labelPadding = "0,0,0,5";
        view.labelSize = 35;
        view.labelFont = "Microsoft YaHei";
        view.labelBold = true;
        view.space = 100;
        view.labelColors = "#9B5036,#9B5036";
        view.mouseThrough = false;
        if (this._createInfo[info.key] >= 0) {
            info.value = this._createInfo[info.key];
        }
        else {
            info.value = info.value;
        }
        if (info.value >= 0) {
            view.selectedIndex = info.value;
        }
        this._createInfo[info.key] = info.value;
        this._newCreateInfo[info.key] = info.value;
        this._desc[info.key] = info.des[info.value];
        view.selectHandler = new Laya.Handler(this, this.onSelectChange, [info]);
        return view;
    };
    ChooseAndSelect.prototype.updateLabel = function (checkBox, info) {
        var value = 0;
        if (checkBox.selected == true) {
            value = 1;
            for (var k in this._selects) {
                var v = this._selects[k];
                v.visible = true;
            }
        }
        else {
            for (var k in this._selects) {
                var v = this._selects[k];
                v.visible = false;
            }
        }
        this._createInfo[info.key] = info.values[value];
        this._newCreateInfo[info.key] = info.values[value];
        this._desc[info.key] = info.des[value];
    };
    return ChooseAndSelect;
}(ui.panel.CreateItemUI));
var ChargeSelect = /** @class */ (function (_super) {
    __extends(ChargeSelect, _super);
    function ChargeSelect(info, createInfo, newCreateInfo, desc, content, labelCostUI) {
        var _this = _super.call(this) || this;
        _this._values = {};
        _this._views = {};
        _this._info = info;
        _this._createInfo = createInfo;
        _this._newCreateInfo = newCreateInfo;
        _this._desc = desc;
        _this._values = {};
        _this._views = [];
        _this._checks = [];
        _this._labelCostNew = labelCostUI;
        //this._line.visible = false
        //info.value = this._createInfo[info.key] || info.value
        if (_this._createInfo[info.key] == 0) {
            info.value = 0;
        }
        else if (_this._createInfo[info.key] == 1) {
            info.value = 1;
        }
        if (info.discount) {
            //content._huodong.visible = true
            //content.ani1.play()
        }
        else {
            //content._huodong.visible = false
        }
        if (info.texts && info.value >= info.texts.length)
            info.value = info.texts.length - 1;
        for (var k in info.texts) {
            var v = info.texts[k];
            var box = new Laya.Box();
            var view = new Laya.CheckBox();
            view.skin = "createRoom/radio_rule.png";
            view.stateNum = 2;
            view.label = v;
            view.mouseThrough = false;
            view.labelColors = "#9C573A,#9C573A";
            view.labelPadding = "0,0,0,5";
            view.labelFont = "Microsoft YaHei";
            view.labelBold = true;
            view.labelSize = 35;
            if (info.value == parseInt(k)) {
                view.selected = true;
                _this._createInfo[info.key] = info.value;
                _this._newCreateInfo[info.key] = info.value;
                _this._desc[info.key] = info.des[info.value];
            }
            else {
                view.selected = false;
            }
            _this._views[k] = box;
            _this._checks[k] = view;
            box.addChild(view);
            box.y = 10;
            _this._content.addChild(box);
            box.x = 590 / info.texts.length * parseInt(k) + 30;
            // view.centerY = 0
            box.on(Laya.Event.CLICK, _this, _this.updateLabel, [view]);
            _this._createInfo[v.key] = v.value;
            _this._newCreateInfo[v.key] = v.value;
            _this._desc[v.key] = info.des[v.value];
            var costLable = new Laya.Label(k == "0" ? String(CreateRoomCtrl.instance._totalCost) : String(Math.ceil(CreateRoomCtrl.instance._totalCost / CreateRoomCtrl.instance._costPeopleNum)));
            box.addChild(costLable);
            if (CreateRoomCtrl.instance._totalCost == 0) {
                content._huodong.visible = true;
                var freeLable = new Laya.Label("(限时免费)");
                box.addChild(freeLable);
                freeLable.color = "#9b5036";
                freeLable.fontSize = 20;
                freeLable.pos(70, 45);
            }
            costLable.fontSize = 25;
            costLable.x = view.x + view.width + 34;
            costLable.y = 12;
            costLable.color = "#9b5036";
            costLable.visible = false;
            // let diamond = new Laya.Image("createTable/diamond.png")
            // box.addChild(diamond)
            //diamond.pos(view.x + view.width + 5, 16)
            if (k == "0") {
                _this._costLabel = costLable;
                Dispatcher.on("costchange", costLable, _this.updateCost.bind(_this));
            }
            else {
                _this._costDivideLable = costLable;
                Dispatcher.on("costdividechange", costLable, _this.updateCostDivide.bind(_this));
            }
        }
        _this.updateRealCost();
        return _this;
        // this._content.height = this._content.height + 30
        // this.height = this.height + 40
    }
    ChargeSelect.prototype.updateRealCost = function () {
        if (this._checks["0"].selected) {
            this._labelCostNew.text = "X" + this._costLabel.text;
        }
        else {
            this._labelCostNew.text = "X" + this._costDivideLable.text;
        }
    };
    ChargeSelect.prototype.updateCost = function (text) {
        this._costLabel.text = String(CreateRoomCtrl.instance._totalCost);
        if (this._costDivideLable)
            this._costDivideLable.text = Math.ceil(CreateRoomCtrl.instance._totalCost / CreateRoomCtrl.instance._costPeopleNum);
        this.updateRealCost();
    };
    ChargeSelect.prototype.updateCostDivide = function (text) {
        this._costDivideLable.text = Math.ceil(CreateRoomCtrl.instance._totalCost / CreateRoomCtrl.instance._costPeopleNum);
        this.updateRealCost();
    };
    ChargeSelect.prototype.updateLabel = function (checkBox) {
        SoundManager.instance.playBtnEffect(SoundConfig.SOUND_BTN_NORMAL);
        for (var k in this._views) {
            var view = this._views[k];
            if (view == checkBox.parent || view == checkBox) {
                this._checks[k].selected = true;
                if (k == "0") {
                    this._createInfo[this._info.key] = 0;
                    this._newCreateInfo[this._info.key] = 0;
                    this._desc[this._info.key] = this._info.des[0];
                    this._labelCostNew.text = "X" + this._costLabel.text;
                }
                else {
                    this._createInfo[this._info.key] = 1;
                    this._newCreateInfo[this._info.key] = 1;
                    this._desc[this._info.key] = this._info.des[1];
                    this._labelCostNew.text = "X" + this._costDivideLable.text;
                }
            }
            else {
                this._checks[k].selected = false;
            }
        }
    };
    return ChargeSelect;
}(ui.panel.CreateItemUI));
var SwitchAndSelect = /** @class */ (function (_super) {
    __extends(SwitchAndSelect, _super);
    function SwitchAndSelect(info, createInfo, newCreateInfo, desc) {
        var _this = _super.call(this) || this;
        _this._values = {};
        _this._views = {};
        _this._createInfo = createInfo;
        _this._newCreateInfo = newCreateInfo;
        _this._desc = desc;
        _this._values = {};
        for (var k in info.info) {
            var v = info.info[k];
            var view = new Laya.CheckBox();
            view.skin = "createRoom/checkBox_rule.png";
            view.stateNum = 2;
            view.label = v.texts;
            view.labelSize = 35;
            view.labelColors = "#9C573A,#9C573A";
            view.labelPadding = "0,0,0,5";
            view.labelFont = "Microsoft YaHei";
            view.labelBold = true;
            if (_this._createInfo[v.key] >= 0) {
                v.value = _this._createInfo[v.key];
            }
            else {
                v.value = v.value;
            }
            if (v.value >= 0) {
                if (v.value == 1) {
                    view.selected = true;
                }
                else {
                    view.selected = false;
                }
            }
            _this._values[v.key] = v.value;
            _this._views[v.key] = view;
            _this._content.addChild(view);
            view.x = 590 / info.info.length * parseInt(k) + 30;
            // view.centerY = 0
            view.on("change", _this, _this.updateLabel, [view, v]);
            _this._createInfo[v.key] = v.value;
            _this._newCreateInfo[v.key] = v.value;
            _this._desc[v.key] = v.des[v.value];
        }
        _this._content.height = _this._content.height + 30;
        _this.height = _this.height + 30;
        return _this;
    }
    SwitchAndSelect.prototype.updateLabel = function (checkBox, info) {
        var value = 0;
        if (checkBox.selected == true) {
            value = 1;
        }
        this._createInfo[info.key] = info.values[value];
        this._newCreateInfo[info.key] = info.values[value];
        this._desc[info.key] = info.des[info.values[value]];
        for (var k in this._values) {
            if (k != info.key && value == 1) {
                this._createInfo[k] = 0;
                this._views[k].selected = false;
            }
        }
    };
    return SwitchAndSelect;
}(ui.panel.CreateItemUI));
var HBar = /** @class */ (function (_super) {
    __extends(HBar, _super);
    function HBar(info, tableInfo, newCreateInfo, desc) {
        var _this = _super.call(this) || this;
        _this._imgList = [];
        _this._info = info;
        _this._createInfo = tableInfo;
        _this._newCreateInfo = newCreateInfo;
        _this._desc = desc;
        _this._bg = new Laya.Image("createTable/line.png");
        _this._bg.sizeGrid = "2,2,2,2";
        _this._bg.width = 530;
        _this._bg.anchorY = 0.5;
        _this.addChild(_this._bg);
        var texts = info.texts.split(",");
        _this._divide = 530 / (info.divide - 1);
        for (var i = 0; i < info.divide; i++) {
            var text = new Laya.Label(texts[i]);
            text.anchorX = 0.5;
            text.fontSize = 22;
            text.align = "center";
            _this.addChild(text);
            text.x = i * 530 / (info.divide - 1);
            text.y = -80;
            var img = new Laya.Image("createTable/radio.png");
            img.anchorX = 0.5;
            img.anchorY = 0.5;
            _this._bg.addChild(img);
            img.x = i * 530 / (info.divide - 1); //+10
            img.y = 4;
            _this._imgList.push(img);
        }
        _this._createInfo[info.key] = _this._createInfo[info.key] || info.value;
        _this._bg.on(Laya.Event.MOUSE_DOWN, _this, _this.onMouseDown);
        _this._button = new Laya.Image("createTable/count.png");
        _this.addChild(_this._button);
        _this._button.x = _this._createInfo[info.key] * 530 / (info.divide - 1); //+10
        _this._button.anchorX = 0.5;
        _this._button.anchorY = 0.5;
        _this._newCreateInfo[info.key] = _this._createInfo[info.key];
        _this._desc[info.key] = info.des[_this._createInfo[info.key]];
        return _this;
    }
    /**按下事件处理*/
    HBar.prototype.onMouseDown = function (e) {
        //添加鼠标移到侦听
        this._bg.on(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
        console.info(e.currentTarget.mouseX, e.currentTarget.mouseY);
        this._bg.on(Laya.Event.MOUSE_UP, this, this.onMouseUp);
        this._bg.on(Laya.Event.MOUSE_OUT, this, this.onMouseUp);
    };
    /**移到事件处理*/
    HBar.prototype.onMouseMove = function (e) {
        // this.button.x = Math.max(Math.min(Laya.stage.mouseX, this.endPosition), this.beginPosition);
    };
    /**抬起事件处理*/
    HBar.prototype.onMouseUp = function (e) {
        var index = Math.floor((e.currentTarget.mouseX + 10) / this._divide);
        console.log(index);
        this._createInfo[this._info.key] = index;
        this._newCreateInfo[this._info.key] = index;
        this._button.x = index * this._divide; //+10
        this._bg.off(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
        this._bg.off(Laya.Event.MOUSE_UP, this, this.onMouseUp);
        this._bg.off(Laya.Event.MOUSE_OUT, this, this.onMouseUp);
        // 滑动到目的地
        // var dist: number = Laya.stage.mouseX - this.buttonPosition;
        // var targetX = this.beginPosition;
        // if (dist > this.TOGGLE_DIST)
        //     targetX = this.endPosition;
        // Laya.Tween.to(this.button, { x: targetX }, 100);
    };
    return HBar;
}(Laya.View));
var HButtons = /** @class */ (function (_super) {
    __extends(HButtons, _super);
    function HButtons(info, tableInfo, newCreateInfo, desc) {
        var _this = _super.call(this) || this;
        _this._imgList = [];
        _this._info = info;
        _this._createInfo = tableInfo;
        _this._newCreateInfo = newCreateInfo;
        _this._desc = desc;
        // this._bg = new Laya.Image("createTable/line.png")
        // this._bg.sizeGrid = "2,2,2,2"
        // this._bg.width = 530
        // this._bg.anchorY = 0.5
        // this.addChild(this._bg)
        _this._buttons = [];
        var texts = info.texts.split(",");
        _this._divide = 530 / (info.divide - 1);
        for (var i = 0; i < info.divide; i++) {
            var text = new component.BaseButton("createTable/bar.png");
            text.label = texts[i];
            text.stateNum = 3;
            text.labelSize = 25;
            text.labelColors = "#9C573A,#705E40,#705E40,#705E40";
            _this.addChild(text);
            text.x = i * 530 / info.divide;
            text.y = -60;
            text.name = String(i);
            _this._buttons.push(text);
            var value = void 0;
            if (_this._createInfo[info.key] >= 0) {
                value = _this._createInfo[info.key];
            }
            else {
                value = info.value;
            }
            if (i == value) {
                text.selected = true;
                _this._createInfo[info.key] = i;
                _this._newCreateInfo[info.key] = i;
                _this._desc[info.key] = info.des[i];
            }
            // let img = new Laya.Image("createTable/radio.png")
            // img.anchorX = 0.5
            // img.anchorY = 0.5
            // this._bg.addChild(img)
            // img.x = i* 530 /(info.divide-1)//+10
            // img.y = 4
            // this._imgList.push(img)
        }
        _this.on(Laya.Event.CLICK, _this, _this.onMouseDown);
        return _this;
    }
    /**按下事件处理*/
    HButtons.prototype.onMouseDown = function (e) {
        //添加鼠标移到侦听
        // this._bg.on(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
        // console.info(e.currentTarget.mouseX,e.currentTarget.mouseY)
        // this._bg.on(Laya.Event.MOUSE_UP, this, this.onMouseUp);
        // this._bg.on(Laya.Event.MOUSE_OUT, this, this.onMouseUp);
        for (var i = 0; i < this._info.divide; i++) {
            if (e.target.name == String(i)) {
                this._buttons[i].selected = true;
                this._createInfo[this._info.key] = i;
                this._newCreateInfo[this._info.key] = i;
                this._desc[this._info.key] = this._info.des[i];
            }
            else {
                this._buttons[i].selected = false;
            }
        }
    };
    return HButtons;
}(Laya.View));
//# sourceMappingURL=CreateItem.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 创建桌子
*/
var CreateRoomCtrl = /** @class */ (function (_super) {
    __extends(CreateRoomCtrl, _super);
    function CreateRoomCtrl() {
        var _this = _super.call(this) || this;
        _this._createInfo = {};
        _this._newCreateInfo = {};
        _this._desc = {};
        _this._type = "-1"; //游戏类型
        _this._tabIndex = 0; //0是创建房间 1是玩法介绍
        _this.arrayCreateRoomGame = {};
        _this["name"] = "CreateRoomCtrl";
        return _this;
    }
    Object.defineProperty(CreateRoomCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new CreateRoomCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    CreateRoomCtrl.prototype.show = function (cid, paytype) {
        if (cid === void 0) { cid = 0; }
        if (paytype === void 0) { paytype = 0; }
        Laya.MouseManager.multiTouchEnabled = false;
        //this._gameType = type
        //this._data = param
        this._games = GameDef.showGames;
        this._cid = cid;
        this._paytype = paytype;
        this.showself();
    };
    /**
     * 这里完成new ui，添加注册监听等初始化工作
     */
    CreateRoomCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.panel.CreateRoomUI();
            EventManager.instance.registerOnObject(this, this._ui._btnCreate, Laya.Event.CLICK, this, this.onTouch);
            this._ui._btnBack.on(Laya.Event.CLICK, this, this.hide);
            //this._ui._btnCreate.on(Laya.Event.CLICK, this, this.onTouch)
            this._ui._rulePanel.vScrollBar.visible = false;
            this._ui._wanfaPanel.vScrollBar.visible = false;
            this._ui._rulePanel.content.hitTestPrior = false;
            this._ui._rulePanel.hitTestPrior = false;
        }
        _super.prototype.beforeShow.call(this);
        this.initView();
        this.onShow();
    };
    //初始化界面
    CreateRoomCtrl.prototype.initView = function () {
        for (var k in GameConfig.SHOW_GAME) {
            for (var n in GameDef.GAME_NAME) {
                if (GameDef.GAME_NAME[n] == k) {
                    var type = parseInt(n) + 1;
                    var gameName = GameDef.GAME_NAME[type - 1];
                    var view = new ui.panel.CreateRoomGameUI();
                    view._gameName.text = GameDef.GAME_NAME_CH[type - 1];
                    this.arrayCreateRoomGame[type] = view;
                    view._tabClick.name = String(type);
                    this._ui._gamelist.addChild(view);
                    EventManager.instance.registerOnObject(this, view._tabClick, Laya.Event.CLICK, this, this.tabTouch);
                }
            }
        }
        // for (var k in this._games) {
        //     let v = this._games[k]
        //     let type = v[0]
        //     let gameName = GameDef.GAME_NAME[type - 1]
        //     let view = new ui.panel.CreateRoomGameUI()
        //     view._gameName.text = GameDef.GAME_NAME_CH[type - 1]
        //     this.arrayCreateRoomGame[k] = view;
        //     view._tabClick.name = String(k)
        //     this._ui._gamelist.addChild(view);
        //     EventManager.instance.registerOnObject(this, view._tabClick, Laya.Event.CLICK, this, this.tabTouch);
        // }
        EventManager.instance.registerOnObject(this, this._ui._title_create, Laya.Event.CLICK, this, this.topTabTouch);
        EventManager.instance.registerOnObject(this, this._ui._title_wanfa, Laya.Event.CLICK, this, this.topTabTouch);
    };
    /**
    * 开启监听，配置宽高，添加到舞台
    */
    CreateRoomCtrl.prototype.onShow = function () {
        _super.prototype.onShow.call(this);
        //始终展示规则页面
        this._ui._wanfaUI.visible = false;
        this._ui._ruleUI.visible = true;
        Laya.Tween.to(this._ui._title_selectSlider, { x: 128, y: 36 }, 0, null);
        //this.checkTab();
        this.checkLocal();
        this.tweenSelf();
    };
    /**
     * 离开时调度
     */
    CreateRoomCtrl.prototype.afterShow = function () {
        _super.prototype.afterShow.call(this);
    };
    CreateRoomCtrl.prototype.onTouch = function (e) {
        switch (e.currentTarget) {
            case this._ui._btnCreate:
                this.create();
                break;
        }
    };
    CreateRoomCtrl.prototype.topTabTouch = function (e) {
        SoundManager.instance.playBtnEffect(SoundConfig.SOUND_BTN_NORMAL);
        if (e.currentTarget == this._ui._title_create) {
            this._ui._wanfaUI.visible = false;
            this._ui._ruleUI.visible = true;
            Laya.Tween.to(this._ui._title_selectSlider, { x: 128, y: 36 }, 100, null);
        }
        else if (e.currentTarget == this._ui._title_wanfa) {
            this._ui._wanfaUI.visible = true;
            this._ui._ruleUI.visible = false;
            Laya.Tween.to(this._ui._title_selectSlider, { x: 380, y: 36 }, 100, null);
        }
    };
    CreateRoomCtrl.prototype.tabTouch = function (e) {
        for (var k in this.arrayCreateRoomGame) {
            var v = this.arrayCreateRoomGame[k];
            if (v._tabClick.name == e.currentTarget.name) {
                SoundManager.instance.playBtnEffect(SoundConfig.SOUND_BTN_NORMAL);
                this.setTabStatus(v, true);
            }
            else {
                this.setTabStatus(v, false);
            }
        }
        log(e.currentTarget.name);
    };
    //设置标签页状态
    CreateRoomCtrl.prototype.setTabStatus = function (view, isSelect) {
        view._select.visible = isSelect;
        view._unselect.visible = !isSelect;
        if (isSelect) {
            view._gameName.color = "#c85200";
        }
        else {
            view._gameName.color = "#8a4e2c";
        }
        if (isSelect) {
            this._gameType = view._tabClick.name;
            //展示玩法内容
            this.showCreateInfo(view._tabClick.name);
            //展示规则
            this.showGameRule(view._tabClick.name);
        }
    };
    CreateRoomCtrl.prototype.selectByIndex = function (index) {
        var i = 0;
        for (var k in this.arrayCreateRoomGame) {
            var v = this.arrayCreateRoomGame[k];
            if (i == index) {
                this.setTabStatus(v, true);
            }
            else {
                this.setTabStatus(v, false);
            }
            i++;
        }
    };
    CreateRoomCtrl.prototype.showGameRule = function (type) {
        this._ui._wanfaPanel.removeChildren();
        var _href = "";
        switch (type) {
            case GameDef.GAME_TYPE.BAZHANG:
                _href = "res/html/bazhang.html";
                break;
            case GameDef.GAME_TYPE.GUANPAI:
                _href = "res/html/paodekuai.html";
                break;
            case GameDef.GAME_TYPE.TONGLU_MJ:
                _href = "res/html/tonglumajiang.html";
                break;
            default:
                break;
        }
        this.iHtml = new Laya.HTMLIframeElement(); //span.normal {color : #925b3d;font-size : 24;font-family:"PingFangSC-Ruglar";line-height:18px}
        this.iHtml.style.fontSize = 24;
        this.iHtml.style.color = "#925b3d";
        this.iHtml.style.fontFamily = "PingFangSC-Ruglar";
        this.iHtml.style.leading = 20;
        this._ui._wanfaPanel.addChild(this.iHtml);
        this.iHtml.width = this._ui._wanfaPanel.width;
        Laya.timer.loop(300, this, this.onLoop);
        Laya.timer.once(60000, this, this.clearTimer);
        this.iHtml.href = _href;
    };
    CreateRoomCtrl.prototype.onLoop = function () {
        if (this.iHtml.height > this._ui._wanfaPanel.height) {
            this._ui._wanfaPanel.vScrollBar.stopScroll();
            this._ui._wanfaPanel.vScrollBar.setScroll(0, this.iHtml.height - this._ui._wanfaPanel.height, 0);
            this.clearTimer();
        }
    };
    CreateRoomCtrl.prototype.clearTimer = function () {
        Laya.timer.clear(this, this.onLoop);
        Laya.timer.clear(this, this.clearTimer);
    };
    CreateRoomCtrl.prototype.showCreateInfo = function (type) {
        this._ui._rulePanel.removeChildren();
        this._ui._chargePos.removeChildren();
        this._type = type;
        this._name = GameDef.GAME_NAME[type - 1];
        var info;
        switch (String(type)) {
            case GameDef.GAME_TYPE.SHANXI_MJ:
                info = ShanxiMJ.createInfo;
                this._cost = ShanxiMJ.cost;
                this._costDivide = ShanxiMJ.costDivide;
                this._costs = ShanxiMJ.costs;
                break;
            case GameDef.GAME_TYPE.WAKENG:
                info = WaKeng.createInfo;
                this._cost = WaKeng.cost;
                this._costDivide = WaKeng.costDivide;
                this._costs = WaKeng.costs;
                break;
            case GameDef.GAME_TYPE.SHISANSHUI:
                info = ShiSanShui.createInfo;
                this._cost = ShiSanShui.cost;
                this._costDivide = ShiSanShui.costDivide;
                this._costs = ShiSanShui.costs;
                break;
            case GameDef.GAME_TYPE.JINYUN_MJ:
                info = JinYunMJ.createInfo;
                this._cost = JinYunMJ.cost;
                this._costDivide = JinYunMJ.costDivide;
                this._costs = JinYunMJ.costs;
                break;
            case GameDef.GAME_TYPE.JINYUN_GS_MJ:
                info = JinYunGsMJ.createInfo;
                this._cost = JinYunGsMJ.cost;
                this._costDivide = JinYunGsMJ.costDivide;
                this._costs = JinYunGsMJ.costs;
                break;
            case GameDef.GAME_TYPE.JINYUN_HZ_MJ:
                info = JinYunHzMJ.createInfo;
                this._cost = JinYunHzMJ.cost;
                this._costDivide = JinYunHzMJ.costDivide;
                this._costs = JinYunHzMJ.costs;
                break;
            case GameDef.GAME_TYPE.SHANGQIU_MJ:
                info = ShangQiuMJ.createInfo;
                this._cost = ShangQiuMJ.cost;
                this._costDivide = ShangQiuMJ.costDivide;
                this._costs = ShangQiuMJ.costs;
                break;
            case GameDef.GAME_TYPE.GUANPAI:
                info = GuanPai.createInfo;
                this._cost = GuanPai.cost;
                this._costDivide = GuanPai.costDivide;
                this._costs = GuanPai.costs;
                break;
            case GameDef.GAME_TYPE.BAZHANG:
                info = BaZhang.createInfo;
                this._cost = BaZhang.cost;
                this._costDivide = BaZhang.costDivide;
                this._costs = BaZhang.costs;
                break;
            case GameDef.GAME_TYPE.TONGLU_MJ:
                info = TongluMj.createInfo;
                this._cost = TongluMj.cost;
                this._costDivide = TongluMj.costDivide;
                this._costs = TongluMj.costs;
                break;
        }
        var text = localStorage.getItem(this._name);
        this._createInfo = JSON.parse(text) || {};
        this._newCreateInfo = {};
        this._desc = {};
        var y = 0;
        for (var k in info) {
            var view = new CreateItem();
            var data = void 0;
            if (info[k].key == "charge_type" && this._cid && this._paytype == 1) {
                var tmp = {};
                Utils.deepCopy(info[k], tmp);
                tmp.des = ["俱乐部支付"];
                tmp.texts = ["俱乐部支付"];
                tmp.values = [2];
                view.dataSource = tmp;
                data = tmp;
            }
            else {
                view.dataSource = info[k];
                data = info[k];
            }
            if (info[k].key == "charge_type") {
                var view_1 = new ChargeSelect(data, this._createInfo, this._newCreateInfo, this._desc, this._ui._chargePos, this._ui._labelCost);
                view_1.x = -10;
                view_1.y = -20;
                this._ui._chargePos.addChild(view_1);
            }
            else {
                view.updata(this.updateKey.bind(this), this._createInfo, this._newCreateInfo, this._desc);
                view.y = y;
                view.x = 10;
                y = y + view.height;
                this._ui._rulePanel.addChild(view);
            }
            this.addLisitener(view);
        }
    };
    CreateRoomCtrl.prototype.addLisitener = function (view) {
        view.on(Laya.Event.MOUSE_DOWN, this, this.onViewTouch);
        view.on(Laya.Event.MOUSE_MOVE, this, this.onViewTouch);
        view.on(Laya.Event.MOUSE_UP, this, this.onViewTouch);
        view.on(Laya.Event.MOUSE_OUT, this, this.onViewTouch);
    };
    CreateRoomCtrl.prototype.onViewTouch = function (e) {
        // log(e.type)
        switch (e.type) {
        }
        if (e.type == "mousedown") {
            this._ui._rulePanel.vScrollBar.touchScrollEnable = false;
            this._ui._rulePanel.vScrollBar.mouseWheelEnable = false;
        }
        if (e.type == "mouseout") {
            this._ui._rulePanel.vScrollBar.touchScrollEnable = true;
            this._ui._rulePanel.vScrollBar.mouseWheelEnable = true;
        }
        if (e.type == "mouseup") {
            this._ui._rulePanel.vScrollBar.touchScrollEnable = true;
            this._ui._rulePanel.vScrollBar.mouseWheelEnable = true;
        }
    };
    CreateRoomCtrl.prototype.updateKey = function (key, value) {
        this._newCreateInfo[key] = value;
        console.info(this._newCreateInfo);
    };
    CreateRoomCtrl.prototype.checkLocal = function () {
        var text = localStorage.getItem("creatable");
        if (text) {
            //let  text = localStorage.getItem("creatable");
            for (var k in this.arrayCreateRoomGame) {
                var v = this.arrayCreateRoomGame[k];
                if (v._tabClick.name == text) {
                    this.setTabStatus(v, true);
                }
                else {
                    this.setTabStatus(v, false);
                }
            }
        }
        else {
            this.selectByIndex(1);
        }
    };
    CreateRoomCtrl.prototype.create = function () {
        var _this = this;
        var desc = "";
        for (var k in this._desc) {
            if (k != "undefined" && this._desc[k] != "") {
                desc = desc + this._desc[k] + ",";
            }
        }
        if (desc.length)
            desc = desc.substr(0, desc.length - 1);
        console.log("desc================" + desc);
        var str = JSON.stringify(this._newCreateInfo);
        console.info(this._desc);
        var score = "0";
        var count = this._newCreateInfo["max_hand_cnt"];
        webService.createTable(this._cid, this._gameType, this._name, count, this._newCreateInfo["max_player"], str, function (response) {
            if (response.code == 0) {
                _this._newCreateInfo["desc"] = desc;
                var storeStr = JSON.stringify(_this._newCreateInfo);
                localStorage.setItem(_this._name, storeStr);
                localStorage.setItem("creatable", _this._type);
                GameConfig.DESC[response.game_code] = desc;
                GameConfig.setServerUrl(response.ip);
                GameConfig.joinTable(response);
            }
            else {
                if (!club.ClubManager.dealClubErrorCode(response.code)) {
                    if (response.code == 1005) {
                        AlertInGameCtrl.instance.show(GameConfig.language.diamond_out, function (type) {
                            if (type == AlertCtrl.CONFIRM) {
                                ShopCtrl.instance.show();
                            }
                        });
                    }
                    else if (response.code == 9001) {
                        HintCtrl.instance.show("操作太过频繁");
                    }
                    else {
                        HintCtrl.instance.show(GameConfig.language.create_table_fail + " code:" + response.code);
                    }
                }
            }
        });
    };
    CreateRoomCtrl.prototype.onResize = function () {
        this._ui.width = AppControl.getInstance().stage.width > 1280 ? 1280 : AppControl.getInstance().stage.width;
        this._ui.height = AppControl.getInstance().stage.height;
        //this._ui.centerY = AppControl.getInstance().stage.height > 1280 ? 1 : 0
        this._ui.centerX = AppControl.getInstance().stage.width > 1280 ? 1 : 0;
        //this.setTabPos();
        //this._tabLobby.width = AppControl.getInstance().stage.width;
        AppControl.getInstance().resetScreen();
    };
    return CreateRoomCtrl;
}(BaseCtrl));
//# sourceMappingURL=CreateRoomCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 创建桌子
*/
var CreateTableCtrl = /** @class */ (function (_super) {
    __extends(CreateTableCtrl, _super);
    function CreateTableCtrl() {
        var _this = _super.call(this) || this;
        _this._createInfo = {};
        _this._newCreateInfo = {};
        _this._desc = {};
        _this["name"] = "CreateTableCtrl";
        return _this;
    }
    Object.defineProperty(CreateTableCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new CreateTableCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    CreateTableCtrl.prototype.show = function (type, param, cid, paytype) {
        if (cid === void 0) { cid = 0; }
        if (paytype === void 0) { paytype = 0; }
        Laya.MouseManager.multiTouchEnabled = false;
        this._gameType = type;
        this._data = param;
        this._cid = cid;
        this._paytype = paytype;
        this.showself();
    };
    /**
     * 这里完成new ui，添加注册监听等初始化工作
     */
    CreateTableCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.panel.CreateTableUI();
            EventManager.instance.registerOnObject(this, this._ui._btnCreate, Laya.Event.CLICK, this, this.onTouch);
            this._ui._close.on(Laya.Event.CLICK, this, this.hide);
            this._ui._panel.vScrollBar.visible = false;
        }
        _super.prototype.beforeShow.call(this);
        this.onShow();
    };
    /**
    * 开启监听，配置宽高，添加到舞台
    */
    CreateTableCtrl.prototype.onShow = function () {
        _super.prototype.onShow.call(this);
        this.checkTab();
        this.tweenSelf();
    };
    /**
     * 离开时调度
     */
    CreateTableCtrl.prototype.afterShow = function () {
        _super.prototype.afterShow.call(this);
    };
    CreateTableCtrl.prototype.onTouch = function (e) {
        switch (e.currentTarget) {
            case this._ui._btnCreate:
                this.create();
                break;
        }
    };
    CreateTableCtrl.prototype.showCreateInfo = function (type) {
        this._ui._panel.removeChildren();
        this._name = GameDef.GAME_NAME[type - 1];
        var info;
        switch (String(type)) {
            case GameDef.GAME_TYPE.SHANXI_MJ:
                info = ShanxiMJ.createInfo;
                this._cost = ShanxiMJ.cost;
                this._costDivide = ShanxiMJ.costDivide;
                this._costs = ShanxiMJ.costs;
                break;
            case GameDef.GAME_TYPE.WAKENG:
                info = WaKeng.createInfo;
                this._cost = WaKeng.cost;
                this._costDivide = WaKeng.costDivide;
                this._costs = WaKeng.costs;
                break;
            case GameDef.GAME_TYPE.SHISANSHUI:
                info = ShiSanShui.createInfo;
                this._cost = ShiSanShui.cost;
                this._costDivide = ShiSanShui.costDivide;
                this._costs = ShiSanShui.costs;
                break;
            case GameDef.GAME_TYPE.JINYUN_MJ:
                info = JinYunMJ.createInfo;
                this._cost = JinYunMJ.cost;
                this._costDivide = JinYunMJ.costDivide;
                this._costs = JinYunMJ.costs;
                break;
            case GameDef.GAME_TYPE.JINYUN_GS_MJ:
                info = JinYunGsMJ.createInfo;
                this._cost = JinYunGsMJ.cost;
                this._costDivide = JinYunGsMJ.costDivide;
                this._costs = JinYunGsMJ.costs;
                break;
            case GameDef.GAME_TYPE.JINYUN_HZ_MJ:
                info = JinYunHzMJ.createInfo;
                this._cost = JinYunHzMJ.cost;
                this._costDivide = JinYunHzMJ.costDivide;
                this._costs = JinYunHzMJ.costs;
                break;
            case GameDef.GAME_TYPE.SHANGQIU_MJ:
                info = ShangQiuMJ.createInfo;
                this._cost = ShangQiuMJ.cost;
                this._costDivide = ShangQiuMJ.costDivide;
                this._costs = ShangQiuMJ.costs;
                break;
            case GameDef.GAME_TYPE.GUANPAI:
                info = GuanPai.createInfo;
                this._cost = GuanPai.cost;
                this._costDivide = GuanPai.costDivide;
                this._costs = GuanPai.costs;
                break;
            case GameDef.GAME_TYPE.TONGLU_MJ:
                info = TongluMj.createInfo;
                this._cost = TongluMj.cost;
                this._costDivide = TongluMj.costDivide;
                this._costs = TongluMj.costs;
                break;
        }
        if (GameConfig.IS_BANSHU)
            this._ui._gamename.skin = "banshu/create_gameType_" + this._gameType + ".png";
        else
            this._ui._gamename.skin = "createTable/" + this._gameType + ".png";
        var text = localStorage.getItem(this._name);
        this._createInfo = JSON.parse(text) || {};
        this._newCreateInfo = {};
        this._desc = {};
        var y = 0;
        for (var k in info) {
            var view = new CreateItem();
            if (info[k].key == "charge_type" && this._cid && this._paytype == 1) {
                var tmp = {};
                Utils.deepCopy(info[k], tmp);
                tmp.des = ["俱乐部支付"];
                tmp.texts = ["俱乐部支付"];
                tmp.values = [2];
                view.dataSource = tmp;
            }
            else
                view.dataSource = info[k];
            view.updata(this.updateKey.bind(this), this._createInfo, this._newCreateInfo, this._desc);
            view.y = y;
            view.x = 10;
            y = y + view.height;
            this._ui._panel.addChild(view);
        }
    };
    CreateTableCtrl.prototype.checkTab = function () {
        if (this._data.length > 1) {
            this._ui._panel.top = 160;
            this._ui._wanfa.removeChildren();
            this._tabBtns = [];
            for (var k in this._data) {
                var btn = new component.BaseButton("createTable/gameTab.png", GameDef.GAME_NAME_CH[parseInt(this._data[k]) - 1]);
                btn.stateNum = 3;
                btn.labelSize = 28;
                btn.labelColors = "#fff7b2,#fff7b2,#fff7b2,#fff7b2";
                btn.labelStrokeColor = "#cb5a20";
                btn.on(Laya.Event.CLICK, this, this.chooseWanFa, [this._data[k]]);
                if (k == "0") {
                    btn.selected = true;
                    btn.labelStroke = 3;
                }
                else {
                    btn.labelStroke = 0;
                }
                this._ui._wanfa.addChild(btn);
                this._tabBtns.push(btn);
                btn.pos(172 * parseInt(k) + 30, 5);
            }
            this.showCreateInfo(this._data[0]);
        }
        else {
            this._ui._panel.top = 110;
            this._ui._wanfa.removeChildren();
            this.showCreateInfo(this._gameType);
        }
        this._ui._diamond.text = "当前剩余钻石：" + GameLogic.selfData.diamond;
    };
    CreateTableCtrl.prototype.chooseWanFa = function (type, e) {
        for (var k in this._tabBtns) {
            var v = this._tabBtns[k];
            if (v == e.currentTarget) {
                v.selected = true;
                v.labelStroke = 3;
            }
            else {
                v.selected = false;
                v.labelStroke = 0;
            }
        }
        this._gameType = type;
        this.showCreateInfo(type);
    };
    CreateTableCtrl.prototype.updateKey = function (key, value) {
        this._newCreateInfo[key] = value;
        console.info(this._newCreateInfo);
    };
    CreateTableCtrl.prototype.create = function () {
        var _this = this;
        var desc = "";
        for (var k in this._desc) {
            if (k != "undefined" && this._desc[k] != "") {
                desc = desc + this._desc[k] + ",";
            }
        }
        if (desc.length)
            desc = desc.substr(0, desc.length - 1);
        console.log("desc================" + desc);
        var str = JSON.stringify(this._newCreateInfo);
        console.info(this._desc);
        var score = "0";
        var count = this._newCreateInfo["max_hand_cnt"];
        webService.createTable(this._cid, this._gameType, this._name, count, this._newCreateInfo["max_player"], str, function (response) {
            if (response.code == 0) {
                _this._newCreateInfo["desc"] = desc;
                var storeStr = JSON.stringify(_this._newCreateInfo);
                localStorage.setItem(_this._name, storeStr);
                GameConfig.DESC[response.game_code] = desc;
                GameConfig.setServerUrl(response.ip);
                GameConfig.joinTable(response);
            }
            else {
                if (!club.ClubManager.dealClubErrorCode(response.code)) {
                    if (response.code == 1005) {
                        AlertInGameCtrl.instance.show(GameConfig.language.diamond_out, function (type) {
                            if (type == AlertCtrl.CONFIRM) {
                                ShopCtrl.instance.show();
                            }
                        }, 0, true, "", null, ["tongyong/tongyong_btn_buy.png"]);
                    }
                    else if (response.code == 9001) {
                        HintCtrl.instance.show("操作太过频繁");
                    }
                    else {
                        HintCtrl.instance.show(GameConfig.language.create_table_fail + " code:" + response.code);
                    }
                }
            }
        });
    };
    return CreateTableCtrl;
}(BaseCtrl));
//# sourceMappingURL=CreateTableCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 加入桌子
*/
var JoinTableCtrl = /** @class */ (function (_super) {
    __extends(JoinTableCtrl, _super);
    function JoinTableCtrl() {
        var _this = _super.call(this) || this;
        _this["name"] = "JoinTableCtrl";
        return _this;
    }
    Object.defineProperty(JoinTableCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new JoinTableCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    JoinTableCtrl.prototype.show = function () {
        this.showself();
    };
    /**
     * 这里完成new ui，添加注册监听等初始化工作
     */
    JoinTableCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.panel.JoinRoomUI();
            this._labs = [];
            for (var i = 1; i <= 6; i++) {
                var text = new Laya.Label();
                text.text = "";
                text.fontSize = 30;
                text.color = "#833228";
                text.font = "Microsoft YaHei";
                this._ui["_img" + i].addChild(text);
                text.centerX = 0;
                text.centerY = 0;
                this._labs.push(text);
            }
            for (var i = 0; i <= 9; i++) {
                var text = new Laya.Label();
                text.text = "";
                text.fontSize = 50;
                text.color = "#833228";
                text.font = "Microsoft YaHei";
                var btn = this._ui["_btnNum_" + i];
                btn.addChild(text);
                text.centerX = 0;
                text.centerY = -7;
                // text.x=100;
                // text.y=50;
                text.text = "" + i;
                this._ui["_btnNum_" + i].name = i;
                EventManager.instance.registerOnObject(this, this._ui["_btnNum_" + i], Laya.Event.CLICK, this, this.onKeyBordClick);
            }
            var namesArr = ["delete", "retry"];
            var namesArr_ch = ["删除", "重输"];
            for (var i = 0; i <= 1; i++) {
                var text = new Laya.Label();
                text.text = namesArr_ch[i];
                text.fontSize = 45;
                text.color = "#fffefe";
                text.font = "Microsoft YaHei";
                var btn = this._ui["_btnNum_" + namesArr[i]];
                btn.addChild(text);
                text.centerX = 0;
                text.centerY = -7;
            }
        }
        _super.prototype.beforeShow.call(this);
        EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.KEYBOARD_NUM, this, this.onChanged);
        EventManager.instance.registerOnObject(this, this._ui._btnClose, Laya.Event.CLICK, this, this.onTouch);
        this._ui._btnNum_delete.name = "12";
        this._ui._btnNum_retry.name = "10";
        EventManager.instance.registerOnObject(this, this._ui._btnNum_delete, Laya.Event.CLICK, this, this.onKeyBordClick);
        EventManager.instance.registerOnObject(this, this._ui._btnNum_retry, Laya.Event.CLICK, this, this.onKeyBordClick);
        this.onShow();
    };
    JoinTableCtrl.prototype.onKeyBordClick = function (e) {
        switch (e.type) {
            case Laya.Event.CLICK:
                log(e.currentTarget.name);
                Dispatcher.dispatch(EventNames.KEYBOARD_NUM, e.currentTarget.name);
                break;
        }
    };
    /**
    * 开启监听，配置宽高，添加到舞台
    */
    JoinTableCtrl.prototype.onShow = function () {
        _super.prototype.onShow.call(this);
        //this._ui._lab.text = GameConfig.language.join_table_1;
        this._ui._boxTips.visible = false;
        this.clear();
        this.tweenSelf();
    };
    /**
     * 离开时调度
     */
    JoinTableCtrl.prototype.afterShow = function () {
        _super.prototype.afterShow.call(this);
    };
    JoinTableCtrl.prototype.onChanged = function (key) {
        var num;
        switch (key) {
            case "10":
                this._input = "";
                break;
            case "12":
                this._input = this._input.substr(0, this._input.length - 1);
                break;
            case "11":
                if (this._input.length >= 6)
                    return;
                this._input += "0";
                break;
            default:
                if (this._input.length >= 6)
                    return;
                this._input += key;
                break;
        }
        if (this._input.length > 6)
            this._input = this._input.substr(0, 6);
        var i;
        for (i = 0; i < 6; i++) {
            this._labs[i].text = "";
            this._labs[i].visible = false;
        }
        for (i = 0; i < this._input.length; i++) {
            this._labs[i].text = this._input[i];
            this._labs[i].visible = true;
        }
        if (this._input.length == 6) {
            this.join();
        }
        else {
            //this._ui._lab.text = GameConfig.language.join_table_1;
            this._ui._boxTips.visible = false;
        }
    };
    JoinTableCtrl.prototype.join = function () {
        var _this = this;
        if (this._input) {
            webService.joinTable(this._input, function (response) {
                if (response.code == 0) {
                    // this._ui._labRoom.focus = false;
                    GameConfig.setServerUrl(response.ip);
                    GameConfig.joinTable(response);
                    _this.hide();
                }
                else {
                    //HintCtrl.instance.show(GameConfig.language.join_table_fail + " code:" + response.code);                    
                    _this.clear();
                    //this._ui._lab.text = GameConfig.language.join_table_2;
                    HintCtrl.instance.show(GameConfig.language.join_table_2);
                    // this._ui._boxTips.alpha=0;
                    // Laya.Tween.to(this._ui._boxTips, { alpha: 1 }, 500);
                    // this._ui._boxTips.visible=true;
                    GameLogic.selfData.game_code = 0;
                }
            });
        }
    };
    JoinTableCtrl.prototype.onTouch = function (e) {
        switch (e.currentTarget) {
            case this._ui._btnClose:
                this.hide();
                break;
        }
    };
    //回退
    JoinTableCtrl.prototype.fallback = function () {
        this._input = this._input.substr(0, this._input.length - 1);
        var i;
        this._labs[this._labs.length - 1].text = "";
        this._labs[this._labs.length - 1].visible = false;
    };
    //清空
    JoinTableCtrl.prototype.clear = function () {
        this._input = "";
        var i;
        for (i = 0; i < 6; i++) {
            this._labs[i].text = "";
            this._labs[i].visible = false;
        }
    };
    return JoinTableCtrl;
}(BaseCtrl));
//# sourceMappingURL=JoinTableCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GameEndCtrl = /** @class */ (function (_super) {
    __extends(GameEndCtrl, _super);
    function GameEndCtrl() {
        var _this = _super.call(this) || this;
        _this.signList = ["+", "-", "*", "/"];
        _this["name"] = "GameEndCtrl";
        return _this;
    }
    Object.defineProperty(GameEndCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new GameEndCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    GameEndCtrl.prototype.show = function (data, endType, winType) {
        if (data === void 0) { data = null; }
        this._data = data;
        this._data.sort(this.onSort);
        this._endType = endType;
        this._winType = winType;
        this.showself();
    };
    GameEndCtrl.prototype.getHoldModel = function (target_dir) {
        if (target_dir == 2) {
            return ui.mj.HoldCard.Card_2_1UI;
        }
        else if (target_dir == 3) {
            return ui.mj.HoldCard.Card_3_1UI;
        }
        else if (target_dir == 4) {
            return ui.mj.HoldCard.Card_4_1UI;
        }
        else if (target_dir == 1) {
            return ui.mj.HoldCard.Card_3_1UI;
        }
    };
    GameEndCtrl.prototype.getDir = function (seatid) {
        var dirList = [
            [[1]],
            [[1, 3], [3, 1]],
            [[1, 2, 4], [4, 1, 2], [2, 4, 1]],
            [[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]
        ];
        var dir = seatid;
        if (!BaseGameData.winSeatid) {
            return dirList[BaseGameData.maxPlayer - 1][0][seatid - 1];
        }
        return dirList[BaseGameData.maxPlayer - 1][BaseGameData.winSeatid - 1][seatid - 1];
    };
    GameEndCtrl.prototype.addHoldCard = function (info) {
        var target_dir = this.getDir(info.fromSeatid);
        var view = this.getHoldModel(target_dir);
        var hold_card = new view();
        for (var i = 0; i < 4; i++) {
            var v = info.cards[i];
            if (v) {
                hold_card["card_" + (i + 1)]._bg.skin = "card/" + hold_card["card_" + (i + 1)].name + "/" + (v % 100) + ".png";
            }
            else {
                hold_card["card_" + (i + 1)].visible = false;
            }
        }
        return hold_card;
    };
    GameEndCtrl.prototype.nextRound = function () {
        if (this._endType) {
            this.hide();
            TableEndCtrl.instance.show(BaseGameData.tableEndInfo);
        }
        else {
            server.playerReadyReq();
            this.hide();
        }
    };
    /**
     * 这里完成new ui，添加注册监听等初始化工作
     */
    GameEndCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.mj.GameEndUI();
        }
        _super.prototype.beforeShow.call(this);
        this.onShow();
    };
    /**
    * 开启监听，配置宽高，添加到舞台
    */
    GameEndCtrl.prototype.onShow = function () {
        _super.prototype.onShow.call(this);
        // if (BaseGameData.winDetailArr[BaseGameData.winSeatid] && BaseGameData.winDetailArr[BaseGameData.winSeatid].length) {
        //     this._ui._detail.array = BaseGameData.winDetailArr[BaseGameData.winSeatid];
        // }else{
        //     this._ui._detail.array = BaseGameData.winDetailArr[BaseGameData.selfSeatid];
        // }
        var index = 1;
        var posX = 30;
        var posY = 550;
        // this._ui._selfView.removeChildren()
        // for(var k in BaseGameData.players){
        //     let player = BaseGameData.players[k]
        //     if(player.seatid == BaseGameData.winSeatid || (!BaseGameData.winSeatid && player.seatid ==BaseGameData.selfSeatid)){
        //         this._ui._winner._labName.text = player.nickname
        //         this._ui._winner._imgHead.loadImage(player.avatar, 0, 0, 86, 86);
        //         this._ui._win_score.text = this._data[player.seatid-1].winScore || 0
        //         this._ui._gang.text = BaseGameData.winDetailObj[player.seatid][9].value
        //         this._ui._total.text = String(parseInt(this._ui._win_score.text) - parseInt(this._ui._gang.text))
        //         if(BaseGameData.winSeatid){
        //             this._ui._hu.skin = "gameEnd/hu.png"
        //         }else{
        //             this._ui._hu.skin = "gameEnd/liuju.png"
        //         }
        //         for(var j in player.holdCards){
        //             let holdInfo = player.holdCards[j]
        //             let holdCard = this.addHoldCard(holdInfo)
        //             this._ui._selfView.addChild(holdCard)
        //             holdCard.scale(0.5,0.5)
        //             holdCard.pos(posX, posY+10)
        //             posX = posX + holdCard.width*0.5 + 5
        //             console.log("posX======================"+posX)
        //         }
        //         for(var m in player.handCards){
        //             let cardid = player.handCards[m]
        //             let handCard = new BaseCardView(cardid,1,null)
        //             handCard.scale(0.5,0.5)
        //             this._ui._selfView.addChild(handCard)
        //             handCard.pos(posX, posY)
        //             posX = posX + 35
        //         }
        //         if (BaseGameData.winSeatid){
        //             let handCard = new BaseCardView(BaseGameData.winCard,1,null)
        //             handCard.scale(0.5,0.5)
        //             this._ui._selfView.addChild(handCard)
        //             handCard.pos(posX+15, posY)
        //         }
        //     }else{
        //         this._ui["_loser_"+index]._loser._labName.text = player.nickname
        //         this._ui["_loser_"+index]._loser._imgHead.loadImage(player.avatar, 0, 0, 86, 86);
        //         this._ui["_loser_"+index]._score.text = this._data[player.seatid-1].winScore || 0
        //         this._ui["_loser_"+index]._gang.text = BaseGameData.winDetailObj[player.seatid][9].value
        //         index ++
        //     }
        // }
        this._ui._bg.removeChildren();
        if (this._winType == 0) {
            this._ui._liuju.visible = true;
        }
        else {
            this._ui._liuju.visible = false;
        }
        for (var k in this._data) {
            var v = this._data[k];
            if (v.winScore <= 0) {
                var view = this.addLoseItem(BaseGameData.getPlayerDataBySeatid(v.seatid), v.winScore);
                this._ui._bg.addChild(view);
                view.pos(posX, posY - view.height - 20);
                posY = view.y;
            }
            else {
                var view = this.addWinItem(BaseGameData.getPlayerDataBySeatid(v.seatid), v.winScore);
                this._ui._bg.addChild(view);
                view.pos(posX, posY - view.height - 5);
                posY = view.y;
                if (k == "3") {
                    view._line.visible = false;
                }
            }
        }
        this._ui._next.on(Laya.Event.CLICK, this, this.nextRound);
        if (this._endType) {
            this._ui._next.skin = "gameEnd/tableEnd.png";
        }
        else {
            this._ui._next.skin = "table/next_round.png";
        }
    };
    GameEndCtrl.prototype.onSort = function (a, b) {
        if (a.winScore > b.winScore)
            return 1;
        else
            return -1;
    };
    GameEndCtrl.prototype.addLoseItem = function (player, score) {
        var view = new ui.mj.GameEndLoseItemUI();
        var head = new HeadUI();
        view._avatar.addChild(head);
        head.getInfo(player.uid || 0);
        head._labInfo.visible = false;
        head._labName.visible = false;
        view._score.text = score;
        view._name.text = Utils.getFitNickName(player.nickname, 20);
        var arr = BaseGameData.winDetailObj[player.seatid];
        var toX = 10;
        for (var k in arr) {
            var v = arr[k];
            var detail = this.addDetail(v.name, v.value, v.sign);
            view._detail.addChild(detail);
            detail.x = toX;
            toX = detail.width + detail.x + 10;
        }
        view._pao.skin = "card/tag_" + player.pao + ".png";
        return view;
    };
    GameEndCtrl.prototype.sortCards = function (cards) {
        var length = cards.length;
        for (var i = 0; i < length - 1; i++) {
            for (var j = i + 1; j < length; j++) {
                if (BaseGameData.SHIFTER_NUM == (cards[i] % 100) || BaseGameData.SHIFTER_NUM == (cards[j] % 100)) {
                    if (BaseGameData.SHIFTER_NUM == (cards[i] % 100) && BaseGameData.SHIFTER_NUM != (cards[j] % 100)) {
                        var a = cards[j];
                        cards[j] = cards[i];
                        cards[i] = a;
                    }
                }
                else if ((cards[i] % 100) < (cards[j] % 100)) {
                    var a = cards[i];
                    cards[i] = cards[j];
                    cards[j] = a;
                }
            }
        }
    };
    GameEndCtrl.prototype.addWinItem = function (player, score) {
        var view = new ui.mj.GameEndWinItenUI();
        var head = new HeadUI();
        view._avatar.addChild(head);
        head._labInfo.visible = false;
        head._labName.visible = false;
        head.getInfo(player.uid);
        view._name.text = Utils.getFitNickName(player.nickname, 20);
        var index = 1;
        var posX = 10;
        var posY = 0;
        for (var j in player.holdCards) {
            var holdInfo = player.holdCards[j];
            var holdCard = this.addHoldCard(holdInfo);
            view._card.addChild(holdCard);
            holdCard.scale(0.5, 0.5);
            holdCard.pos(posX, posY + 12);
            posX = posX + holdCard.width * 0.5 + 5;
            console.log("posX======================" + posX);
        }
        var cards = player.handCards;
        this.sortCards(cards);
        for (var m = cards.length - 1; m >= 0; m--) {
            var cardid = player.handCards[m];
            var handCard = new BaseCardView(cardid, 1, null);
            handCard.scale(0.5, 0.5);
            view._card.addChild(handCard);
            handCard.pos(posX, posY);
            posX = posX + 35;
        }
        if (BaseGameData.winSeatid) {
            var handCard = new BaseCardView(BaseGameData.winCard, 1, null);
            handCard.scale(0.5, 0.5);
            view._card.addChild(handCard);
            handCard.pos(posX + 15, posY);
        }
        var arr = BaseGameData.winDetailObj[player.seatid];
        var toX = 10;
        for (var k in arr) {
            var v = arr[k];
            var detail = this.addDetail(v.name, v.value, v.sign);
            view._detail.addChild(detail);
            detail.x = toX;
            toX = detail.width + detail.x + 10;
        }
        view._pao.skin = "card/tag_" + player.pao + ".png";
        view._score.text = "+" + score;
        return view;
    };
    GameEndCtrl.prototype.addDetail = function (type, value, sign) {
        var view = new Laya.View();
        var typeImg = new Laya.Image("gameEnd/" + type + ".png");
        view.addChild(typeImg);
        var text = this.signList[sign - 1] + value;
        var num = new Laya.Label(text);
        num.font = "font_num_5";
        view.addChild(num);
        num.x = typeImg.width + 10;
        num.y = 3;
        return view;
    };
    /**
     * 离开时调度
     */
    GameEndCtrl.prototype.afterShow = function () {
        _super.prototype.afterShow.call(this);
    };
    /***渲染单元格时的回调方法***/
    GameEndCtrl.prototype.updateListResult = function (cell, index) {
        cell.updata();
    };
    GameEndCtrl.prototype.hide = function () {
        _super.prototype.hide.call(this);
        if (this._endType) {
            TableEndCtrl.instance.show(BaseGameData.tableEndInfo);
        }
        else {
            Laya.timer.once(100, this, function () {
                Dispatcher.dispatch(EventNames.CHECK_READY);
            });
        }
    };
    return GameEndCtrl;
}(BaseCtrl));
//# sourceMappingURL=GameEndCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 帮助页面
*/
var HelpCtrl = /** @class */ (function (_super) {
    __extends(HelpCtrl, _super);
    function HelpCtrl() {
        var _this = _super.call(this) || this;
        _this["name"] = "HelpCtrl";
        return _this;
    }
    Object.defineProperty(HelpCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new HelpCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    HelpCtrl.prototype.show = function (isMatch, ids) {
        if (ids && ids.length) {
            this._isMatch = isMatch;
            this._ids = ids;
            this.showself();
        }
    };
    /**
     * 这里完成new ui，添加注册监听等初始化工作
     */
    HelpCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.panel.HelperUI();
            EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.hide);
            this._ui._close.on(Laya.Event.CLICK, this, this.hide);
            this._ui._panel.vScrollBar.visible = false;
            this._ui._panTab.hScrollBar.visible = false;
        }
        _super.prototype.beforeShow.call(this);
        this.onShow();
    };
    /**
    * 开启监听，配置宽高，添加到舞台
    */
    HelpCtrl.prototype.onShow = function () {
        _super.prototype.onShow.call(this);
        if (this._ids.length > 1) {
            this._ui._panel.top = 154;
            this._ui._panTab.visible = true;
            this._ui._tab.removeChildren();
            this._ui._tab.initItems();
            for (var i = 0; i < this._ids.length; i++) {
                var btn = new component.BaseButton();
                btn.skin = "tongyong/tongyong_help_btn.png";
                btn.stateNum = 3;
                btn.label = GameConfig.language.game_name[this._ids[i]];
                btn.labelColors = "#674422,#674422,#9b5036";
                btn.labelSize = 24;
                btn.name = "item" + i;
                this._ui._tab.addItem(btn);
                btn.x = (btn.width + 10) * i;
            }
            this._ui._tab.selectHandler = new Laya.Handler(this, this.checkTab);
        }
        else {
            this._ui._panel.top = 98;
            this._ui._panTab.visible = false;
        }
        this._ui._tab.selectedIndex = 0;
        this.checkTab();
        this.tweenSelf();
    };
    /**
     * 离开时调度
     */
    HelpCtrl.prototype.afterShow = function () {
        _super.prototype.afterShow.call(this);
    };
    HelpCtrl.prototype.checkTab = function () {
        this._ui._img.on(Laya.Event.LOADED, this, this.onComplete);
        if (this._isMatch)
            this._ui._img.skin = "res/rule/ruler_match_" + this._ids[this._ui._tab.selectedIndex] + ".png";
        else
            this._ui._img.skin = "res/rule/ruler_" + this._ids[this._ui._tab.selectedIndex] + ".png";
        // this._ui._panel.vScrollBar.stopScroll();
        // this._ui._panel.vScrollBar.setScroll(0, this._ui._img.height - this._ui._panel.height, 0);
    };
    HelpCtrl.prototype.onComplete = function (e) {
        // log("onComplete");
        this._ui._panel.vScrollBar.stopScroll();
        this._ui._panel.vScrollBar.setScroll(0, this._ui._img.height - this._ui._panel.height, 0);
    };
    return HelpCtrl;
}(BaseCtrl));
//# sourceMappingURL=HelpCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
*  @author seacole
* 检测更新;
*/
var KeFuCtrl = /** @class */ (function (_super) {
    __extends(KeFuCtrl, _super);
    function KeFuCtrl() {
        return _super.call(this) || this;
    }
    Object.defineProperty(KeFuCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new KeFuCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    KeFuCtrl.prototype.show = function (tips) {
        this._tips = tips;
        this.showself();
    };
    KeFuCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.panel.KeFuPanelUI();
            this._ui._title.skin = "common/title_lianxiKefu.png";
            this._ui._labMsg.style.align = "center";
            this._ui._labMsg.style.color = "#9b5036";
            this._ui._labMsg.style.fontSize = 26;
            //  this._ui._labMsg.style.valign = "middle"; 
            this._ui._btnConfirm.skin = "common/sBtn_copy.png";
            this._ui._close.visible = true;
            this._ui._close.on(Laya.Event.CLICK, this, this.hide);
            if (Native.instance.isNative) {
                this._ui._btnConfirm.visible = true;
                this._ui._btnConfirm.skin = "common/sBtn_copy.png";
                EventManager.instance.registerOnObject(this, this._ui._btnConfirm, Laya.Event.CLICK, this, this.onTouch);
            }
            else {
                this._ui._btnConfirm.visible = false;
                this.form = new Laya.Sprite();
                this.form.size(156, 58);
                var point = this._ui._box.localToGlobal(new laya.maths.Point(0, 0));
                this.form.pos(Laya.stage.width / 2 - 78, point.y + 680);
                Laya.stage.addChild(this.form);
            }
        }
        _super.prototype.beforeShow.call(this);
        this.onShow();
    };
    /**
    * 开启监听，配置宽高，添加到舞台
    */
    KeFuCtrl.prototype.onShow = function () {
        _super.prototype.onShow.call(this, 1);
        LoadingUI.instance.hide();
        this._ui._labMsg.innerHTML = this._tips;
        this._ui._labMsg.y = 100 + (210 - this._ui._labMsg.contextHeight) * 0.5;
        this.tweenSelf();
        if (!Native.instance.isNative) {
            var view = this.createInputElement();
            Laya.Utils.fitDOMElementInArea(view, this.form, 0, -100, 156, 58);
        }
    };
    KeFuCtrl.prototype.createInputElement = function () {
        this.input = Laya.Browser.createElement("img");
        this.input.type = "image";
        this.input.src = "res/menu/copy.png";
        this.input.style.zIndex = Laya.Render.canvas.zIndex + 1;
        this.input.onclick = function () {
            if (Native.instance.isNative) {
                NativeHelper.instance.clipboardCopy("tongjiang78");
                HintCtrl.instance.show("复制成功");
            }
            else {
                try {
                    Laya.Browser.document.getElementById("test").click();
                }
                catch (error) {
                }
            }
        };
        Laya.Browser.document.body.appendChild(this.input);
        return this.input;
    };
    /**
     * 离开时调度
     */
    KeFuCtrl.prototype.afterShow = function () {
        _super.prototype.afterShow.call(this);
    };
    KeFuCtrl.prototype.hide = function () {
        _super.prototype.hide.call(this);
        if (!Native.instance.isNative) {
            this.form.removeSelf();
            Laya.Browser.document.body.removeChild(this.input);
        }
    };
    KeFuCtrl.prototype.onTouch = function (e) {
        if (Native.instance.isNative) {
            NativeHelper.instance.clipboardCopy("tongjiang78");
            HintCtrl.instance.show("复制成功");
        }
        // Laya.Browser.window.clipboardData.setData("Text",this._tips);
    };
    KeFuCtrl.prototype.onResize = function () {
        this._ui.width = AppControl.getInstance().stage.width / 2;
        this._ui.height = AppControl.getInstance().stage.height > 1280 ? 1280 : AppControl.getInstance().stage.height;
        if (this._uiMask) {
            this._uiMask.width = AppControl.getInstance().stage.width;
            this._uiMask.height = AppControl.getInstance().stage.height > 1280 ? 1280 : AppControl.getInstance().stage.height;
        }
    };
    return KeFuCtrl;
}(BaseCtrl));
//# sourceMappingURL=KefuCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
*  @author seacole
* 账号登录;
*/
var AccountLoginCtrl = /** @class */ (function (_super) {
    __extends(AccountLoginCtrl, _super);
    function AccountLoginCtrl() {
        return _super.call(this) || this;
    }
    Object.defineProperty(AccountLoginCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new AccountLoginCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    AccountLoginCtrl.prototype.show = function () {
        this.showself();
    };
    AccountLoginCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.panel.AccountLoginUI();
            this._ui._inputPassword.type = "password";
            EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._ui._btnLogin, Laya.Event.CLICK, this, this.onTouch);
        }
        _super.prototype.beforeShow.call(this);
        this.onShow();
        this._ui.x = AppControl.getInstance().stage.width / 2;
        this._ui.y = (AppControl.getInstance().stage.height - this._ui.height) / 2;
    };
    /**
    * 开启监听，配置宽高，添加到舞台
    */
    AccountLoginCtrl.prototype.onShow = function () {
        _super.prototype.onShow.call(this);
        LoadingUI.instance.hide();
        this.tweenSelf();
    };
    /**
     * 离开时调度
     */
    AccountLoginCtrl.prototype.afterShow = function () {
        _super.prototype.afterShow.call(this);
    };
    AccountLoginCtrl.prototype.onTouch = function (e) {
        switch (e.currentTarget) {
            case this._ui._btnLogin:
                if (!this._ui._inputAccount.text)
                    HintCtrl.instance.show(GameConfig.language.account_input_fail1);
                else if (!this._ui._inputPassword.text)
                    HintCtrl.instance.show(GameConfig.language.account_input_fail2);
                else
                    LoginManager.instance.passportLogin(this._ui._inputAccount.text, this._ui._inputPassword.text);
                break;
            case this._ui._close:
                this.hide();
                break;
        }
    };
    AccountLoginCtrl.prototype.onResize = function () {
        this._ui.width = AppControl.getInstance().stage.width / 2;
        this._ui.height = AppControl.getInstance().stage.height > 1280 ? 1280 : AppControl.getInstance().stage.height;
        if (this._uiMask) {
            this._uiMask.width = AppControl.getInstance().stage.width;
            this._uiMask.height = AppControl.getInstance().stage.height > 1280 ? 1280 : AppControl.getInstance().stage.height;
        }
    };
    return AccountLoginCtrl;
}(BaseCtrl));
//# sourceMappingURL=AccountLoginCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 挖坑单局结算;
*/
var poker;
(function (poker) {
    var GameEndCtrl = /** @class */ (function (_super) {
        __extends(GameEndCtrl, _super);
        function GameEndCtrl() {
            var _this = _super.call(this) || this;
            _this._infos = {};
            _this._autoHide = false;
            return _this;
        }
        GameEndCtrl.prototype.show = function (data) {
            this._listData = data.playerInfo;
            if (data.hasOwnProperty("globalInfo"))
                BaseGameData.globalInfo = data.globalInfo;
            else
                BaseGameData.globalInfo = "";
            this.showself();
        };
        /**
         * 这里完成new ui，添加注册监听等初始化工作
         */
        GameEndCtrl.prototype.beforeShow = function () {
            _super.prototype.beforeShow.call(this);
        };
        /**
        * 开启监听，配置宽高，添加到舞台
        */
        GameEndCtrl.prototype.onShow = function () {
            if (this._info)
                this._info.removeSelf();
            if (BaseGameData.gameType == GameDef.GAME_TYPE.GUANPAI) {
                if (!this._infos[BaseGameData.gameType]) {
                    this._info = new ui.guanpai.GuanPaiGameEndUI();
                    this._info.centerX = 0;
                    this._info.y = 213;
                    this._info._list.itemRender = guanpai.GuanPaiGameEndInfoRenderer;
                    this._info._list.renderHandler = new Laya.Handler(this, this.updateList);
                    this._infos[BaseGameData.gameType] = this._info;
                }
                else
                    this._info = this._infos[BaseGameData.gameType];
            }
            else if (BaseGameData.gameType == GameDef.GAME_TYPE.WAKENG) {
                if (!this._infos[BaseGameData.gameType]) {
                    this._info = new ui.wakeng.WaKengGameEndUI();
                    this._info.centerX = 0;
                    this._info.y = 213;
                    this._info._list.itemRender = WaKengGameEndInfoRenderer;
                    this._info._list.renderHandler = new Laya.Handler(this, this.updateList);
                    this._infos[BaseGameData.gameType] = this._info;
                }
                else
                    this._info = this._infos[BaseGameData.gameType];
            }
            this._ui._box.addChild(this._info);
            this._info._btnNext.on(Laya.Event.CLICK, this, this.onTouch);
            this._info._btnScore.on(Laya.Event.CLICK, this, this.onTouch);
            _super.prototype.onShow.call(this);
            this._ani.play(1, false);
            this._info._list.array = this._listData;
            // if (this._info._labInfo)
            // 	this._info._labInfo.text = this._globalInfo;
            if (BaseGameData.currHandCount == BaseGameData.totalHandCount) {
                this._info._btnNext.visible = false;
                this._info._btnScore.visible = true;
            }
            else {
                this._info._btnScore.visible = false;
                if (BaseGameData.selfSeatid)
                    this._info._btnNext.visible = true;
                else
                    this._info._btnNext.visible = false;
            }
        };
        /**
         * 离开时调度
         */
        GameEndCtrl.prototype.afterShow = function () {
            _super.prototype.afterShow.call(this);
            this._info._list.array = [];
        };
        /***渲染单元格时的回调方法***/
        GameEndCtrl.prototype.updateList = function (cell, index) {
            cell.updata();
        };
        GameEndCtrl.prototype.onTouch = function (e) {
            this.hide();
            switch (e.currentTarget) {
                case this._info._btnNext:
                    server.playerReadyReq();
                    break;
                case this._info._btnScore:
                    TableEndCtrl.instance.show(BaseGameData.tableEndInfo);
                    break;
            }
        };
        return GameEndCtrl;
    }(BaseCtrl));
    poker.GameEndCtrl = GameEndCtrl;
})(poker || (poker = {}));
//# sourceMappingURL=GameEndCrtl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 扑克结算个人信息renderer
*/
var poker;
(function (poker) {
    var GameEndInfoRenderer = /** @class */ (function (_super) {
        __extends(GameEndInfoRenderer, _super);
        function GameEndInfoRenderer() {
            return _super.call(this) || this;
        }
        GameEndInfoRenderer.prototype.onDataChanged = function (uid) {
            if (this.dataSource && !this.dataSource.nickname && this.dataSource.hasOwnProperty("uid") && this.dataSource.uid == uid) {
                var player = BaseGameData.getPlayerDataByUid(uid);
                this.dataSource.nickname = player.nickname;
                this.updata();
                Dispatcher.off(EventNames.PLAYER_DATA_CHANGED, this, this.onDataChanged);
            }
        };
        //nickname leftCards boom score
        GameEndInfoRenderer.prototype.updata = function () {
            if (this.dataSource) {
                this._labNickname.text = this.dataSource.nickname;
                if (!this.dataSource.nickname)
                    Dispatcher.on(EventNames.PLAYER_DATA_CHANGED, this, this.onDataChanged);
                else
                    Dispatcher.off(EventNames.PLAYER_DATA_CHANGED, this, this.onDataChanged);
                if (this.dataSource.info[0].hasOwnProperty("value"))
                    this._labLeftCards.text = this.dataSource.info[0].value;
                else
                    this._labLeftCards.text = "0";
                if (this.dataSource.info[1].hasOwnProperty("value"))
                    this._labBoom.text = this.dataSource.info[1].value;
                else
                    this._labBoom.text = "0";
                if (this.dataSource.info[2].hasOwnProperty("value"))
                    this._labScore.text = this.dataSource.info[2].value;
                else
                    this._labScore.text = "0";
                this._imgMaster.visible = this.dataSource.seatid == BaseGameData.btnSeatid;
                var color = "";
                if (this.dataSource.seatid == BaseGameData.selfSeatid)
                    color = "#D05A33";
                else
                    color = "#EBCF71";
                this._labNickname.color = color;
                this._labLeftCards.color = color;
                this._labBoom.color = color;
                this._labScore.color = color;
                // console.warn(this._labNickname.displayWidth);
                this._imgMaster.x = this._labNickname.x + this._labNickname.width * 0.5 - this._labNickname.getChildAt(0).textWidth * 0.5 - 10 - this._imgMaster.width * this._imgMaster.scaleX;
            }
        };
        return GameEndInfoRenderer;
    }(ui.poker.GameEndInfoRendererUI));
    poker.GameEndInfoRenderer = GameEndInfoRenderer;
})(poker || (poker = {}));
//# sourceMappingURL=GameEndInfoRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 挖坑单局结算失败;
*/
var poker;
(function (poker) {
    var GameEndLoseCtrl = /** @class */ (function (_super) {
        __extends(GameEndLoseCtrl, _super);
        function GameEndLoseCtrl() {
            var _this = _super.call(this) || this;
            _this["name"] = "GameEndLoseCtrl";
            return _this;
        }
        Object.defineProperty(GameEndLoseCtrl, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new GameEndLoseCtrl();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        GameEndLoseCtrl.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.poker.shibaiUI();
                this._ani = this._ui.ani1;
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        GameEndLoseCtrl.prototype.show = function (data) {
            _super.prototype.show.call(this, data);
            if (BaseGameData.gameType == GameDef.GAME_TYPE.GUANPAI)
                SoundManager.instance.playEffect("sound_lose", 0);
            else if (BaseGameData.gameType == GameDef.GAME_TYPE.WAKENG)
                SoundManager.instance.playEffect("result_lose", 0);
        };
        return GameEndLoseCtrl;
    }(poker.GameEndCtrl));
    poker.GameEndLoseCtrl = GameEndLoseCtrl;
})(poker || (poker = {}));
//# sourceMappingURL=GameEndLoseCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 挖坑单局结算胜利;
*/
var poker;
(function (poker) {
    var GameEndWinCtrl = /** @class */ (function (_super) {
        __extends(GameEndWinCtrl, _super);
        function GameEndWinCtrl() {
            var _this = _super.call(this) || this;
            _this["name"] = "GameEndWinCtrl";
            return _this;
        }
        Object.defineProperty(GameEndWinCtrl, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new GameEndWinCtrl();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        GameEndWinCtrl.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.poker.shengliUI();
                this._ani = this._ui.ani1;
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        GameEndWinCtrl.prototype.show = function (data) {
            _super.prototype.show.call(this, data);
            if (BaseGameData.gameType == GameDef.GAME_TYPE.GUANPAI)
                SoundManager.instance.playEffect("sound_win", 0);
            else if (BaseGameData.gameType == GameDef.GAME_TYPE.WAKENG)
                SoundManager.instance.playEffect("result_win", 0);
        };
        return GameEndWinCtrl;
    }(poker.GameEndCtrl));
    poker.GameEndWinCtrl = GameEndWinCtrl;
})(poker || (poker = {}));
//# sourceMappingURL=GameEndWinCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 创建桌子
*/
var ReportCtrl = /** @class */ (function (_super) {
    __extends(ReportCtrl, _super);
    function ReportCtrl() {
        var _this = _super.call(this) || this;
        _this._selectTab = 0;
        _this["name"] = "ReportCtrl";
        return _this;
    }
    Object.defineProperty(ReportCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new ReportCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    ReportCtrl.prototype.show = function (type, data) {
        if (type === void 0) { type = ReportCtrl.TYPE_REAL_TIME; }
        if (data === void 0) { data = null; }
        this._type = type;
        this._data = data;
        this._selectTab = 0;
        this.showself();
    };
    /**
     * 这里完成new ui，添加注册监听等初始化工作
     */
    ReportCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.panel.ReportUI();
            this._ui._listResult.itemRender = ReportRenderer;
            this._ui._listResult.scrollBar.visible = false;
            this._ui._listResult.renderHandler = new Laya.Handler(this, this.updateListResult);
            this._ui._listVisiter.itemRender = HeadRenderer;
            this._ui._listVisiter.scrollBar.visible = false;
            this._ui._listVisiter.renderHandler = new Laya.Handler(this, this.updateListVisiter);
            EventManager.instance.registerOnObject(this, this._ui._btnClose, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._ui._btnResult, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._ui._btnVisiter, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, server, EventNames.GAME_REAL_TIME_RECORD_REP, this, this.onRealTimeRecordRepHandler);
        }
        _super.prototype.beforeShow.call(this);
        this.onShow();
    };
    /**
    * 开启监听，配置宽高，添加到舞台
    */
    ReportCtrl.prototype.onShow = function () {
        this.checkType();
        this.checkTab();
        _super.prototype.onShow.call(this);
        if (this._type == ReportCtrl.TYPE_REAL_TIME) {
            server.realTimeRecordReq();
            // this.onRealTimeRecordRepHandler({
            //     playerInfo: [{ uid: 10001, score: 1, info: ["自摸次数", "2", "接炮次数", "3", "自摸次数", "4", "接炮次数", "5", "自摸次数", "222", "自摸次数", "222"] }
            //         , { uid: 10002, score: 12345, info: ["自摸次数", "22", "接炮次数", "3", "自摸次数", "4", "接炮次数", "5", "自摸次数", "222"] }
            //         , { uid: 10003, score: -54321, info: ["自摸次数", "2", "接炮次数", "333", "自摸次数", "4", "接炮次数", "5", "自摸次数", "222"] }
            //         , { uid: 10004, score: 1900, info: ["自摸次数", "2", "接炮次数", "3", "自摸次数", "41", "接炮次数", "52", "自摸次数", "222"] }
            //     ], visiters: [10001, 10002, 10003, 10004, 10005, 10006, 10007, 10008, 10009, 10010, 10011, 10001, 10002, 10003, 10004, 10005, 10006, 10007, 10008, 10009, 10010, 10011]
            // });
        }
        else
            this.onRealTimeRecordRepHandler(this._data);
    };
    /**
     * 离开时调度
     */
    ReportCtrl.prototype.afterShow = function () {
        _super.prototype.afterShow.call(this);
    };
    ReportCtrl.prototype.onTouch = function (e) {
        switch (e.currentTarget) {
            case this._ui._btnClose:
                this.hide();
                break;
            case this._ui._btnResult:
                this.selectTab = 0;
                break;
            case this._ui._btnVisiter:
                this.selectTab = 1;
                break;
        }
    };
    Object.defineProperty(ReportCtrl.prototype, "selectTab", {
        set: function (value) {
            if (this._selectTab != value) {
                this._selectTab = value;
                this.checkTab();
            }
        },
        enumerable: true,
        configurable: true
    });
    ReportCtrl.prototype.checkType = function () {
        this._ui._boxRealtime.visible = this._type == ReportCtrl.TYPE_REAL_TIME;
        this._ui._imgGameEnd.visible = this._type == ReportCtrl.TYPE_GAME_END;
    };
    ReportCtrl.prototype.checkTab = function () {
        if (this._selectTab == 0) {
            this._ui._btnResult.alpha = 1;
            this._ui._btnVisiter.alpha = 0.01;
        }
        else {
            this._ui._btnResult.alpha = 0.01;
            this._ui._btnVisiter.alpha = 1;
        }
        this._ui._boxResult.visible = this._selectTab == 0;
        this._ui._boxVisiter.visible = this._selectTab == 1;
    };
    /***渲染单元格时的回调方法***/
    ReportCtrl.prototype.updateListResult = function (cell, index) {
        cell.updata();
    };
    /***渲染单元格时的回调方法***/
    ReportCtrl.prototype.updateListVisiter = function (cell, index) {
        cell.updata();
        cell.scale(0.8, 0.8);
    };
    ReportCtrl.prototype.onRealTimeRecordRepHandler = function (msg) {
        if (msg) {
            if (msg.playerInfo)
                this._listScoreData = msg.playerInfo;
            else
                this._listScoreData = [];
            if (msg.visiters)
                this._listVisitData = msg.visiters;
            else
                this._listVisitData = [];
            this._ui._imgNoResult.visible = this._listScoreData.length == 0;
            this._ui._imgNoVisiter.visible = this._listVisitData.length == 0;
            this._ui._listResult.array = this._listScoreData;
            this._ui._listVisiter.array = this._listVisitData;
        }
    };
    ReportCtrl.TYPE_REAL_TIME = 1;
    ReportCtrl.TYPE_GAME_END = 2;
    return ReportCtrl;
}(BaseCtrl));
//# sourceMappingURL=ReportCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
*  @author seacole
* 结算 每个人的具体内容
*/
var ReportDescRenderer = /** @class */ (function (_super) {
    __extends(ReportDescRenderer, _super);
    function ReportDescRenderer() {
        return _super.call(this) || this;
    }
    // {key value}
    ReportDescRenderer.prototype.updata = function () {
        if (this.dataSource) {
            this._labKey.text = this.dataSource.key;
            this._labValue.text = this.dataSource.value;
        }
    };
    return ReportDescRenderer;
}(ui.components.report.ReportDescRendererUI));
//# sourceMappingURL=ReportDescRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
*  @author seacole
* 结算 每个人的信息
*/
var ReportRenderer = /** @class */ (function (_super) {
    __extends(ReportRenderer, _super);
    function ReportRenderer() {
        var _this = _super.call(this) || this;
        _this._list.itemRender = ReportDescRenderer;
        _this._list.scrollBar.visible = false;
        _this._list.renderHandler = new Laya.Handler(_this, _this.updateItem);
        _this._head = new HeadUI();
        _this._head.scale(0.8, 0.8);
        _this._head.centerX = 0;
        _this._head.y = 12;
        _this.addChildAt(_this._head, 1);
        return _this;
    }
    // {uid,info,score}
    ReportRenderer.prototype.updata = function () {
        if (this.dataSource && this.dataSource.info.length) {
            this._labScore.text = this.dataSource.score;
            var tmp = [];
            for (var i = 0; i < this.dataSource.info.length; i += 2) {
                tmp.push({ key: this.dataSource.info[i], value: this.dataSource.info[i + 1] });
            }
            this._list.array = tmp;
            this._head.getInfo(this.dataSource.uid);
        }
    };
    /***渲染单元格时的回调方法***/
    ReportRenderer.prototype.updateItem = function (cell, index) {
        //用获得的数据给图片更换皮肤
        cell.updata();
        // cell.img.skin = cell.dataSource;
    };
    return ReportRenderer;
}(ui.components.report.ReportRenderUI));
//# sourceMappingURL=ReportRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 设置
*/
var SetupCtrl = /** @class */ (function (_super) {
    __extends(SetupCtrl, _super);
    function SetupCtrl() {
        var _this = _super.call(this) || this;
        _this["name"] = "SetupCtrl";
        return _this;
    }
    Object.defineProperty(SetupCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new SetupCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    SetupCtrl.prototype.show = function (hasBtnExit) {
        this._hasBtnExit = hasBtnExit;
        this.showself();
    };
    /**
     * 这里完成new ui，添加注册监听等初始化工作
     */
    SetupCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.panel.SetupUI();
            // EventManager.instance.registerOnObject(this, this._ui._btnMusicOn, Laya.Event.CLICK, this, this.onTouch);
            // EventManager.instance.registerOnObject(this, this._ui._btnMusicOff, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._ui._sliMusic, Laya.Event.CHANGED, this, this.onMusicChange);
            EventManager.instance.registerOnObject(this, this._ui._sliSound, Laya.Event.CHANGED, this, this.onSoundChange);
            // EventManager.instance.registerOnObject(this, this._ui._btnSound, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._ui._btnExit, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._ui._btnCardBigClose, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, this._ui._btnCardBigOpen, Laya.Event.CLICK, this, this.onTouch);
            this._ui._labVerApp.text = "";
            this._ui._labVerRes.text = "";
            this._ui._sliMusic.showLabel = false;
            this._ui._sliMusic.allowClickBack = false;
            this._ui._sliSound.showLabel = false;
            this._ui._sliSound.allowClickBack = false;
            // this._ui._btnCardBigClose.hitArea = new Laya.Rectangle(95, 9, 75, 51);
            // this._ui._btnCardBigOpen.hitArea = new Laya.Rectangle(15, 9, 75, 51);
            if (Native.instance.isNative) {
                if (GameConfig.APP_VER)
                    this._ui._labVerApp.text = StringUtils.format(GameConfig.language.ver1, GameConfig.APP_VER);
                if (GameConfig.RES_VER)
                    this._ui._labVerRes.text = StringUtils.format(GameConfig.language.ver2, GameConfig.RES_VER);
            }
            else {
                if (GameConfig.RES_VER)
                    this._ui._labVerRes.text = StringUtils.format(GameConfig.language.ver3, GameConfig.RES_VER);
            }
        }
        _super.prototype.beforeShow.call(this);
        this.onShow();
    };
    /**
    * 开启监听，配置宽高，添加到舞台
    */
    SetupCtrl.prototype.onShow = function () {
        _super.prototype.onShow.call(this);
        this._ui._btnExit.visible = this._hasBtnExit;
        this._ui._boxBig.visible = BaseGameData.gameType && GameDef.isMaJiang(BaseGameData.gameType);
        this.checkBigCard();
        this.checkMusic();
        this.checkSound();
        this.tweenSelf();
    };
    /**
     * 离开时调度
     */
    SetupCtrl.prototype.afterShow = function () {
        _super.prototype.afterShow.call(this);
    };
    SetupCtrl.prototype.onTouch = function (e) {
        switch (e.currentTarget) {
            // case this._ui._btnMusicOn:
            // case this._ui._btnMusicOff:
            //     SoundManager.instance.switchMusic();
            //     this.checkMusic();
            //     break;
            // case this._ui._btnSoundOn:
            // case this._ui._btnSoundOff:
            //     SoundManager.instance.switchEffect();
            //     this.checkSound();
            //     break;
            case this._ui._btnCardBigOpen:
                this._ui._btnCardBigOpen.visible = false;
                this._ui._btnCardBigClose.visible = true;
                GameConfig.bigcard = 1;
                break;
            case this._ui._btnCardBigClose:
                this._ui._btnCardBigClose.visible = false;
                this._ui._btnCardBigOpen.visible = true;
                GameConfig.bigcard = 0;
                break;
            case this._ui._close:
                this.hide();
                break;
            case this._ui._btnExit:
                AlertInGameCtrl.instance.show("确定退出登录", function (code) {
                    if (code == AlertCtrl.CONFIRM) {
                        localStorage.clear();
                        server.code = "";
                        AppControl.getInstance().showPage(LoginPage);
                        server.close();
                    }
                    else {
                    }
                });
                // server.code = "";
                // AppControl.getInstance().showPage(LoginPage);
                // server.close();
                break;
        }
    };
    SetupCtrl.prototype.checkBigCard = function () {
        var value = GameConfig.bigcard;
        this._ui._btnCardBigOpen.visible = value == 1 ? false : true;
        this._ui._btnCardBigClose.visible = value == 1 ? true : false;
    };
    SetupCtrl.prototype.checkMusic = function () {
        var value = SoundManager.instance.musicVolume;
        this._ui._sliMusic.value = value * 100;
    };
    SetupCtrl.prototype.checkSound = function () {
        var value = SoundManager.instance.soundVolume;
        this._ui._sliSound.value = value * 100;
    };
    SetupCtrl.prototype.onMusicChange = function (e) {
        SoundManager.instance.musicVolume = this._ui._sliMusic.value / 100;
        // log(this._ui._sliMusic.value);
    };
    SetupCtrl.prototype.onSoundChange = function (e) {
        SoundManager.instance.soundVolume = this._ui._sliSound.value / 100;
        // log(this._ui._sliMusic.value);
    };
    return SetupCtrl;
}(BaseCtrl));
//# sourceMappingURL=SetupCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
*  @author seacole
* 商场;
*/
var ShopCtrl = /** @class */ (function (_super) {
    __extends(ShopCtrl, _super);
    function ShopCtrl() {
        return _super.call(this) || this;
    }
    Object.defineProperty(ShopCtrl, "instance", {
        get: function () {
            if (!this._shopCtrl)
                this._shopCtrl = new ShopCtrl();
            return this._shopCtrl;
        },
        enumerable: true,
        configurable: true
    });
    ShopCtrl.prototype.show = function () {
        if (Laya.stage.screenMode == Laya.Stage.SCREEN_HORIZONTAL)
            ShopHCtrl.instance.showself();
        else
            ShopVCtrl.instance.showself();
    };
    /**
    * 开启监听，配置宽高，添加到舞台
    */
    ShopCtrl.prototype.onShow = function () {
        _super.prototype.onShow.call(this);
        this.onRefreshRoleInfo();
        GameLogic.selfData.query();
        this.setList();
        this.tweenSelf();
    };
    /**
     * 离开时调度
     */
    ShopCtrl.prototype.afterShow = function () {
        _super.prototype.afterShow.call(this);
    };
    ShopCtrl.prototype.setList = function () {
        if (!this._listData) {
            this._listData = [];
            var cfg = GameConfig.cfgShop;
            this._ui._labDesc.text = "";
            for (var key in cfg) {
                if (key == "tips") {
                    this._ui._labDesc.text = cfg[key];
                }
                if (key == "isBind") {
                }
                else {
                    cfg[key].id = key;
                    this._listData.push(cfg[key]);
                }
            }
            this._ui._list.array = this._listData[0];
        }
    };
    ShopCtrl.prototype.onTouch = function (e) {
        switch (e.currentTarget) {
            case this._ui._close:
                this.hide();
                break;
        }
    };
    /***渲染单元格时的回调方法***/
    ShopCtrl.prototype.updateList = function (cell, index) {
        this.addLisitener(cell);
        cell.updata();
    };
    ShopCtrl.prototype.selectList = function (e, index) {
        if (e.type == Laya.Event.CLICK) {
            SoundManager.instance.playBtnEffect(SoundConfig.SOUND_BTN_NORMAL);
            if (GameConfig.IS_BANSHU)
                HintCtrl.instance.show("该功能未开放");
            else
                Native.instance.recharge(this._listData[0][index].pid, this._listData[0][index].pkey);
        }
    };
    ShopCtrl.prototype.onRefreshRoleInfo = function () {
        this._ui._labDiamond.text = StringUtils.format(GameConfig.language.diamond, GameLogic.selfData.diamond);
    };
    ShopCtrl.prototype.addLisitener = function (view) {
        view.on(Laya.Event.MOUSE_DOWN, this, this.onViewTouch);
        view.on(Laya.Event.MOUSE_MOVE, this, this.onViewTouch);
        view.on(Laya.Event.MOUSE_UP, this, this.onViewTouch);
        view.on(Laya.Event.MOUSE_OUT, this, this.onViewTouch);
    };
    ShopCtrl.prototype.onViewTouch = function (e) {
        // log(e.type)
        switch (e.type) {
        }
        if (e.type == "mousedown") {
            this._ui._list.scrollBar.touchScrollEnable = false;
            this._ui._list.scrollBar.mouseWheelEnable = false;
        }
        if (e.type == "mouseout") {
            this._ui._list.scrollBar.touchScrollEnable = true;
            this._ui._list.scrollBar.mouseWheelEnable = true;
        }
        if (e.type == "mouseup") {
            this._ui._list.scrollBar.touchScrollEnable = true;
            this._ui._list.scrollBar.mouseWheelEnable = true;
        }
    };
    return ShopCtrl;
}(BaseCtrl));
//# sourceMappingURL=ShopCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
*  @author seacole
* 商场横;
*/
var ShopHCtrl = /** @class */ (function (_super) {
    __extends(ShopHCtrl, _super);
    function ShopHCtrl() {
        var _this = _super.call(this) || this;
        _this["name"] = "ShopHCtrl";
        return _this;
    }
    Object.defineProperty(ShopHCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new ShopHCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    /**
    * 这里完成new ui，添加注册监听等初始化工作
    */
    ShopHCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.panel.ShopHUI();
            this._ui._list.itemRender = ShopRenderer;
            this._ui._list.scrollBar.visible = false;
            this._ui._list.renderHandler = new Laya.Handler(this, this.updateList);
            this._ui._list.mouseHandler = new Laya.Handler(this, this.selectList);
            EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.SHOP_CFG_GET, this, this.setList);
            EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.REFRESH_ROLE_INFO, this, this.onRefreshRoleInfo);
            EventManager.instance.registerOnObject(this, this._ui._touch_diomand, Laya.Event.CLICK, this, this.onTabSlider);
            EventManager.instance.registerOnObject(this, this._ui._touch_gold, Laya.Event.CLICK, this, this.onTabSlider);
            EventManager.instance.registerOnObject(this, this._ui._touch_prop, Laya.Event.CLICK, this, this.onTabSlider);
        }
        _super.prototype.beforeShow.call(this);
        this.onShow();
    };
    ShopHCtrl.prototype.onTabSlider = function (e) {
        switch (e.currentTarget) {
            case this._ui._touch_diomand:
                Laya.Tween.to(this._ui._tab_slider, { x: 5, y: 0 }, 100, null);
                break;
            case this._ui._touch_gold:
                HintCtrl.instance.show("暂未开放");
                //Laya.Tween.to(this._ui._tab_slider, { x: 250, y: 0 }, 100, null);
                break;
            case this._ui._touch_prop:
                HintCtrl.instance.show("暂未开放");
                //Laya.Tween.to(this._ui._tab_slider, { x: 495, y: 0 }, 100, null);
                break;
            default:
                break;
        }
    };
    return ShopHCtrl;
}(ShopCtrl));
//# sourceMappingURL=ShopHCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
*  @author seacole
* 商场 每个商品
*/
var ShopRenderer = /** @class */ (function (_super) {
    __extends(ShopRenderer, _super);
    function ShopRenderer() {
        var _this = _super.call(this) || this;
        _this._fontData = new FontData();
        _this._fontData.init(FontConfig.FONT_SHOP_1, Laya.loader.getRes(ResourceConfig.BITMAP_FONT_SHOP1_JSON), Laya.loader.getRes(ResourceConfig.BITMAP_FONT_SHOP_PNG), 0, BPFont.LEFT);
        // this._fontData.text = "10";
        _this._bpFont = FontManager.instance.addFont(_this._fontData);
        _this._bpFont.padding = 2;
        _this._box.addChild(_this._bpFont);
        _this._bpFont.pos(30, 1);
        _this._bpFont.centerY = 0;
        return _this;
    }
    // "money": 20,
    // "diamond": 200,
    // "extra": 0,
    // "icon": "0"
    ShopRenderer.prototype.updata = function () {
        if (this.dataSource) {
            this._labName.text = this.dataSource.desc;
            this._label_rmb.text = this.dataSource.payMoney + ""; //StringUtils.format(GameConfig.language.shop_money, this.dataSource.money);
            //this._bpFont.width=this._bpFont.width+10;
            var iconType = 0;
            if (this._dataSource.pid > 1) {
                iconType = 1;
            }
            this._imgIcon.source = Laya.loader.getRes("shop/img_goods_" + iconType + ".png");
            this._imgIcon.centerY = -20;
            //this._box.width=this._bpFont.x+this._bpFont.width-10;
            // this._dataSource.extra=Math.floor(Math.random()*20);
            if (this._dataSource.sendDiamond > 0) {
                this._labExtra.visible = this._imgExtra.visible = true;
                this._labExtra.text = "送" + this._dataSource.sendDiamond + "颗";
            }
            else
                this._labExtra.visible = this._imgExtra.visible = false;
        }
    };
    return ShopRenderer;
}(ui.components.shop.GoodsRendererUI));
//# sourceMappingURL=ShopRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
*  @author seacole
* 商场竖;
*/
var ShopVCtrl = /** @class */ (function (_super) {
    __extends(ShopVCtrl, _super);
    function ShopVCtrl() {
        var _this = _super.call(this) || this;
        _this["name"] = "ShopVCtrl";
        return _this;
    }
    Object.defineProperty(ShopVCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new ShopVCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    /**
    * 这里完成new ui，添加注册监听等初始化工作
    */
    ShopVCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.panel.ShopVUI();
            this._ui._list.itemRender = ShopRenderer;
            this._ui._list.scrollBar.visible = false;
            this._ui._list.renderHandler = new Laya.Handler(this, this.updateList);
            this._ui._list.mouseHandler = new Laya.Handler(this, this.selectList);
            EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.onTouch);
            EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.SHOP_CFG_GET, this, this.setList);
            EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.REFRESH_ROLE_INFO, this, this.onRefreshRoleInfo);
        }
        _super.prototype.beforeShow.call(this);
        this.onShow();
    };
    return ShopVCtrl;
}(ShopCtrl));
//# sourceMappingURL=ShopVCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var TableEndCtrl = /** @class */ (function (_super) {
    __extends(TableEndCtrl, _super);
    function TableEndCtrl() {
        var _this = _super.call(this) || this;
        _this["name"] = "TableEndCtrl";
        return _this;
    }
    Object.defineProperty(TableEndCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new TableEndCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    //private _endLayout = {headProp:{size:73}}
    TableEndCtrl.prototype.show = function (data) {
        this._data = data;
        this.showself();
    };
    TableEndCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.components.TableEndUI();
            this._ui._back.on(Laya.Event.CLICK, this, this.back);
            this._ui._btnShare.visible = true;
            this._ui._btnDownload.visible = false;
            EventManager.instance.registerOnObject(this, this._ui._btnShare, Laya.Event.CLICK, this, this.onShare);
            EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.onClose);
            if (Native.instance.isNative) {
                //判断是原生app，则无需下载
                this._ui._ani.removeSelf();
                this._ui._btnShare.centerX = 240;
                this._ui._btnDownload.visible = false;
            }
            else {
                this._ui._btnShare.centerX = 0;
                this._ui._btnDownload.visible = true;
                this._ui._ani.hitArea = new Laya.Rectangle(-111, -28, 222, 56);
                EventManager.instance.registerOnObject(this, this._ui._btnDownload, Laya.Event.CLICK, this, this.onDownload);
                EventManager.instance.registerOnObject(this, this._ui._ani, Laya.Event.CLICK, this, this.onDownload);
                this._ui._ani.play(1, true);
            }
        }
        this._autoHide = false;
        _super.prototype.beforeShow.call(this);
        this.onShow();
    };
    TableEndCtrl.prototype.back = function () {
        server.code = "";
        AppControl.getInstance().showPage(HallPage);
        server.close();
    };
    TableEndCtrl.prototype.addTableEndItem = function (info, index) {
        // let height = BaseGameData.maxPlayer == 4 ? 98 : 124
        // let offset = BaseGameData.maxPlayer == 4 ? 12 : 25
        // BaseGameData.maxPlayer = this._data.length
        //BaseGameData.gameType = GameDef.GAME_TYPE.BAZHANG
        var headSize; //头像大小
        var kuangProp = { width: 0, height: 0, top: 0, bottom: 0 }; //大框的属性
        var headPos = {}; //头像的位置
        var headBgPos = {}; //头像背景
        var nameProp = {}; //名字的属性
        var uidProp = {}; //uid的属性
        var viewPos = []; //人物框位置
        var _top = 0;
        //let kuangPos = {}
        switch (BaseGameData.gameType) {
            case GameDef.GAME_TYPE.BAZHANG:
                headSize = 100;
                kuangProp = { width: 185, height: 400, top: 10, bottom: 10 };
                headPos = { centerX: 0, centerY: -145 };
                headBgPos = { centerX: 0, centerY: -142 };
                nameProp = { centerX: 0, centerY: -70 };
                uidProp = { centerX: 0, centerY: -40 };
                _top = 180;
                //八张2-6个人玩
                viewPos = [[],
                    [{ centerX: -300, centerY: 0 }, { centerX: 300, centerY: 0 }],
                    [{ centerX: -350, centerY: 0 }, { centerX: 0, centerY: 0 }, { centerX: 350, centerY: 0 }],
                    [{ centerX: -450, centerY: 0 }, { centerX: -150, centerY: 0 }, { centerX: 150, centerY: 0 }, { centerX: 450, centerY: 0 }],
                    [{ centerX: -450, centerY: 0 }, { centerX: -225, centerY: 0 }, { centerX: 0, centerY: 0 }, { centerX: 225, centerY: 0 }, { centerX: 450, centerY: 0 }],
                    [{ centerX: -480, centerY: 0 }, { centerX: -288, centerY: 0 }, { centerX: -96, centerY: 0 }, { centerX: 96, centerY: 0 }, { centerX: 288, centerY: 0 }, { centerX: 480, centerY: 0 }]];
                break;
            case GameDef.GAME_TYPE.TONGLU_MJ:
                headSize = 100;
                kuangProp = { width: 275, height: 420, top: 10, bottom: 10 };
                headPos = { centerX: -65, centerY: -145 };
                headBgPos = { centerX: -62, centerY: -142 };
                nameProp = { centerX: 60, centerY: -170 };
                uidProp = { centerX: 60, centerY: -130 };
                _top = 130;
                //麻将2 ，4 人玩
                viewPos = [[],
                    [{ centerX: -300, centerY: 0 }, { centerX: 300, centerY: 0 }],
                    [],
                    [{ centerX: -450, centerY: 0 }, { centerX: -150, centerY: 0 }, { centerX: 150, centerY: 0 }, { centerX: 450, centerY: 0 }]];
                break;
            case GameDef.GAME_TYPE.GUANPAI:
                headSize = 100;
                kuangProp = { width: 275, height: 420, top: 10, bottom: 10 };
                headPos = { centerX: -65, centerY: -145 };
                headBgPos = { centerX: -62, centerY: -142 };
                nameProp = { centerX: 60, centerY: -170 };
                uidProp = { centerX: 60, centerY: -130 };
                _top = 130;
                //跑的快2 ，3 人玩
                viewPos = [[],
                    [{ centerX: -300, centerY: 0 }, { centerX: 300, centerY: 0 }],
                    [{ centerX: -400, centerY: 0 }, { centerX: 0, centerY: 0 }, { centerX: 400, centerY: 0 }]];
                break;
            default:
                headSize = 100;
                kuangProp = { width: 275, height: 420, top: 10, bottom: 10 };
                headPos = { centerX: -65, centerY: -145 };
                headBgPos = { centerX: -62, centerY: -142 };
                nameProp = { centerX: 60, centerY: -170 };
                uidProp = { centerX: 60, centerY: -130 };
                _top = 130;
                viewPos = [[],
                    [{ centerX: -300, centerY: 0 }, { centerX: 300, centerY: 0 }],
                    [{ centerX: -350, centerY: 0 }, { centerX: 0, centerY: 0 }, { centerX: 350, centerY: 0 }],
                    [{ centerX: -450, centerY: 0 }, { centerX: -150, centerY: 0 }, { centerX: 150, centerY: 0 }, { centerX: 450, centerY: 0 }],
                    [{ centerX: -450, centerY: 0 }, { centerX: -225, centerY: 0 }, { centerX: 0, centerY: 0 }, { centerX: 225, centerY: 0 }, { centerX: 450, centerY: 0 }],
                    [{ centerX: -480, centerY: 0 }, { centerX: -288, centerY: 0 }, { centerX: -96, centerY: 0 }, { centerX: 96, centerY: 0 }, { centerX: 288, centerY: 0 }, { centerX: 480, centerY: 0 }]];
                break;
        }
        var view = new ui.components.TableEndItemUI();
        var head = new HeadUI();
        head.setImageBounds(headSize, headSize);
        view._avatar.addChild(head);
        head.getInfo(info.uid);
        Utils.injectProp(head, { top: 3, left: 3, right: 3, bottom: 3 });
        Utils.injectProp(view, kuangProp);
        Utils.injectProp(view, { anchorX: 0.5, anchorY: 0.5 });
        Utils.injectProp(view._avatar, { width: headSize, height: headSize });
        Utils.injectProp(view._avatar, headPos);
        Utils.injectProp(view._headBg, headBgPos);
        Utils.injectProp(view._headBg, { width: headSize + 15, height: headSize + 15 });
        // Utils.injectProp(view.headBg,{width:headSize,height:headSize})
        Utils.injectProp(view._name, nameProp);
        Utils.injectProp(view._userid, uidProp);
        head._labInfo.visible = false;
        head._labName.visible = false;
        var player = BaseGameData.getPlayerDataByUid(info.uid);
        if (player) {
            view._name.text = Utils.getFitNickName(player.nickname, 10);
        }
        else {
            view._name.text = Utils.getFitNickName("未知", 10);
        }
        view._userid.text = "ID:" + info.uid;
        //view.pos(viewPos[BaseGameData.maxPlayer-1][index].x, index * height + index * offset + 100)
        Utils.injectProp(view, viewPos[this._data.length - 1][index]);
        this._ui._box.addChild(view);
        //根据不同的字段添加
        //八张   最大输赢,胜利局数,总分
        //桐庐麻将 大胡次数，胡牌次数,点炮次数,最大翻数,总分
        //跑的快 最高得分,炸弹数,胜负局数,总分
        if (info.info) {
            view._info.top = _top;
            var arr_1 = [];
            // arr.push(info.score)
            Utils.deepCopy(info.info, arr_1);
            arr_1.push(info.score);
            var length_1 = arr_1.length;
            view._list.repeatY = length_1;
            var xx = (kuangProp.height - _top - 68 * length_1) / (length_1 - 1);
            view._list.spaceY = xx;
            view._list.array = arr_1;
            view._list.scrollBar.visible = false;
            view._list.itemRender = InfoRender;
            view._list.scrollBar.visible = false;
            view._list.renderHandler = new Laya.Handler(this, function (cell, index) {
                if (index == arr_1.length - 1) {
                    cell.updata(true);
                    // info.info.pop()
                }
                else {
                    cell.updata(false);
                }
            });
        }
    };
    /**
     *
     * @param name 字段名称
     * @param value 字段值
     */
    TableEndCtrl.prototype.getOtherView = function (name, value) {
        var view = new ui.components.TableEndItemChildUI();
        //测试
        view._des.text = "总积分:" + value;
        return view;
    };
    /**
    * 开启监听，配置宽高，添加到舞台
    */
    TableEndCtrl.prototype.onShow = function () {
        _super.prototype.onShow.call(this);
        console.info(this._data);
        var shareInfo = [];
        this._shareText = "";
        this._ui._box.removeChildren();
        for (var k in this._data) {
            var v = this._data[k];
            this.addTableEndItem(v, k);
            var player = BaseGameData.getPlayerDataByUid(v.uid);
            var info_1 = { a: "", n: "", s: 1 };
            info_1.a = player.avatar;
            info_1.n = Utils.getFitNickName(player.nickname, 16);
            info_1.s = v.score;
            shareInfo.push(info_1);
            if (v.score >= 0) {
                this._shareText += Utils.getFitNickName(info_1.n, 16) + " +" + info_1.s + " | ";
            }
            else {
                this._shareText += Utils.getFitNickName(info_1.n, 16) + " " + info_1.s + " | ";
            }
        }
        var info = { "g": BaseGameData.gameType, "t": TimeUtils.Format("yyyy-MM-dd hh:mm"), "c": BaseGameData.totalHandCount, "p": shareInfo };
        this._shareInfo = JSON.stringify(info);
        // if (GameConfig.IS_BANSHU)
        //     this._ui._gamename.skin = "banshu/history_" + BaseGameData.gameType + ".png";
        // else
        //     this._ui._gamename.skin = "createTable/" + GameDef.GAME_LOGO[BaseGameData.gameType] + ".png"
        this._ui._gamename.skin = "common/title_gameType_" + GameDef.GAME_LOGO[BaseGameData.gameType] + ".png";
        this._ui._round.text = "局数:" + BaseGameData.currHandCount + "/" + BaseGameData.totalHandCount;
        var time = Laya.Browser.now();
        var d = new Date(time);
        this._ui._time.text = TimeUtils.Format("yyyy-MM-dd hh:mm");
        WxWeb.instance.onShareInfo(4, 0, "战绩" + BaseGameData.tableid, this._shareText, this._shareInfo);
    };
    /**
     * 离开时调度
     */
    TableEndCtrl.prototype.afterShow = function () {
        _super.prototype.afterShow.call(this);
        if (this._ui._ani)
            this._ui._ani.stop();
    };
    TableEndCtrl.prototype.onClose = function () {
        this.hide();
    };
    TableEndCtrl.prototype.onShare = function () {
        if (Native.instance.isNative) {
            Native.instance.share(2, 0);
        }
        else {
            Native.instance.share(4, 0, "战绩" + BaseGameData.tableid, this._shareText, this._shareInfo);
        }
    };
    TableEndCtrl.prototype.onDownload = function () {
        Native.instance.gotoDownload();
    };
    return TableEndCtrl;
}(BaseCtrl));
var InfoRender = /** @class */ (function (_super) {
    __extends(InfoRender, _super);
    //private _lable : Laya.Label
    function InfoRender() {
        return _super.call(this) || this;
        // this.init()
    }
    InfoRender.prototype.updata = function (isLast) {
        //log(this.dataSource.toString())
        //   this._score_5.font = "font_num_12"
        //             score1 = "+"+score1
        //         }else{
        //             this._score_5.font = "font_num_13"
        if (isLast) {
            this._total.visible = true;
            this._des.visible = false;
            var score = parseInt(this.dataSource.toString());
            if (score >= 0) {
                this._score.font = "font_num_12";
            }
            else {
                this._score.font = "font_num_13";
            }
            log(this.dataSource.toString());
            this._score.text = this.dataSource.toString();
        }
        else {
            this._total.visible = false;
            this._des.text = this.dataSource.toString();
        }
    };
    return InfoRender;
}(ui.components.TableEndItemChildUI));
//# sourceMappingURL=TableEndCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var TableEndShuCtrl = /** @class */ (function (_super) {
    __extends(TableEndShuCtrl, _super);
    function TableEndShuCtrl() {
        var _this = _super.call(this) || this;
        _this["name"] = "TableEndShuCtrl";
        return _this;
    }
    Object.defineProperty(TableEndShuCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new TableEndShuCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    TableEndShuCtrl.prototype.show = function (data) {
        this._data = data;
        this.showself();
    };
    TableEndShuCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.components.TableEndShuViewUI();
            this._ui._back.on(Laya.Event.CLICK, this, this.back);
            this._ui._btnShare.visible = true;
            EventManager.instance.registerOnObject(this, this._ui._btnShare, Laya.Event.CLICK, this, this.onShare);
            if (Native.instance.isNative) {
                this._ui._download.visible = false;
                this._ui._ani.removeSelf();
            }
            else {
                this._ui._download.visible = true;
                this._ui._area.skin = "gameLogo/" + GameConfig.APPAREA + ".png";
                this._ui._ani.hitArea = new Laya.Rectangle(-111, -28, 222, 56);
                EventManager.instance.registerOnObject(this, this._ui._area, Laya.Event.CLICK, this, this.onDownload);
                EventManager.instance.registerOnObject(this, this._ui._ani, Laya.Event.CLICK, this, this.onDownload);
            }
        }
        this._autoHide = false;
        _super.prototype.beforeShow.call(this);
        this.onShow();
    };
    TableEndShuCtrl.prototype.back = function () {
        server.code = "";
        AppControl.getInstance().showPage(HallPage);
        server.close();
    };
    TableEndShuCtrl.prototype.addTableEndItem = function (info, index) {
        var height = BaseGameData.maxPlayer == 4 ? 98 : 124;
        var offset = BaseGameData.maxPlayer == 4 ? 12 : 25;
        var view = new ui.components.TableEndItemUI();
        view._bg.width = 560;
        var head = new HeadUI();
        head.setImageBounds(73, 73);
        view.height = height;
        view._bg.height = height;
        view._avatar.addChild(head);
        head.getInfo(info.uid);
        head._labInfo.visible = false;
        head._labName.visible = false;
        var player = BaseGameData.getPlayerDataByUid(info.uid);
        view._name.text = Utils.getFitNickName(player.nickname, 20);
        if (info.score >= 0) {
            view._score.font = "font_num_10";
        }
        else {
            view._score.font = "font_num_9";
        }
        if (Number(info.score) >= 0)
            view._score.text = "+" + info.score;
        else
            view._score.text = info.score;
        this._ui._bg.addChild(view);
        view.pos(30, index * height + index * offset + 100);
        if (info.info) {
            var peace = view._info.width / info.info.length;
            for (var k in info.info) {
                var text = info.info[k];
                var lableInfo = new Laya.Label(text);
                lableInfo.fontSize = 22;
                lableInfo.align = "center";
                view._info.addChild(lableInfo);
                lableInfo.x = peace * parseInt(k) + peace / 2;
                lableInfo.centerY = 0;
            }
        }
    };
    /**
    * 开启监听，配置宽高，添加到舞台
    */
    TableEndShuCtrl.prototype.onShow = function () {
        _super.prototype.onShow.call(this);
        console.info(this._data);
        this._ui._ani.play(1, true);
        this._ui._bg.removeChildren();
        var shareInfo = [];
        this._shareText = "";
        for (var k in this._data) {
            var v = this._data[k];
            this.addTableEndItem(v, k);
            var player = BaseGameData.getPlayerDataByUid(v.uid);
            var info_1 = { a: "", n: "", s: 1 };
            info_1.a = player.avatar;
            info_1.n = Utils.getFitNickName(player.nickname, 16);
            info_1.s = v.score;
            shareInfo.push(info_1);
            if (v.score >= 0) {
                this._shareText += Utils.getFitNickName(info_1.n, 16) + " +" + info_1.s + " | ";
            }
            else {
                this._shareText += Utils.getFitNickName(info_1.n, 16) + " " + info_1.s + " | ";
            }
        }
        var info = { "g": BaseGameData.gameType, "t": TimeUtils.Format("yyyy-MM-dd hh:mm"), "c": BaseGameData.totalHandCount, "p": shareInfo };
        this._shareInfo = JSON.stringify(info);
        if (GameConfig.IS_BANSHU)
            this._ui._gamename.skin = "banshu/history_" + BaseGameData.gameType + ".png";
        else
            this._ui._gamename.skin = "createTable/" + GameDef.GAME_LOGO[BaseGameData.gameType] + ".png";
        this._ui._round.text = "局数:" + BaseGameData.currHandCount + "/" + BaseGameData.totalHandCount;
        var time = Laya.Browser.now();
        var d = new Date(time);
        this._ui._time.text = TimeUtils.Format("yyyy-MM-dd hh:mm");
        WxWeb.instance.onShareInfo(4, 0, "战绩" + BaseGameData.tableid, this._shareText, this._shareInfo);
    };
    /**
     * 离开时调度
     */
    TableEndShuCtrl.prototype.afterShow = function () {
        _super.prototype.afterShow.call(this);
        if (this._ui._ani)
            this._ui._ani.stop();
    };
    TableEndShuCtrl.prototype.onShare = function () {
        if (Native.instance.isNative) {
            Native.instance.share(2, 0);
        }
        else {
            Native.instance.share(4, 0, "战绩" + BaseGameData.tableid, this._shareText, this._shareInfo);
        }
    };
    TableEndShuCtrl.prototype.onDownload = function () {
        Native.instance.gotoDownload();
    };
    return TableEndShuCtrl;
}(BaseCtrl));
//# sourceMappingURL=TableEndShuCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
*  @author seacole
* 检测更新;
*/
var UpdateCtrl = /** @class */ (function (_super) {
    __extends(UpdateCtrl, _super);
    function UpdateCtrl() {
        return _super.call(this) || this;
    }
    Object.defineProperty(UpdateCtrl, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new UpdateCtrl();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    UpdateCtrl.prototype.show = function (newVer, url, tips) {
        this._newVer = newVer;
        this._url = url;
        this._tips = tips;
        this.showself();
    };
    UpdateCtrl.prototype.beforeShow = function () {
        if (!this._ui) {
            this._ui = new ui.panel.UpdateUI();
            this._ui._labMsg.style.align = "center";
            this._ui._labMsg.style.color = "#45483e";
            this._ui._labMsg.style.fontSize = 26;
            this._ui._labMsg.style.valign = "middle";
            EventManager.instance.registerOnObject(this, this._ui._btnConfirm, Laya.Event.CLICK, this, this.onTouch);
            this._autoHide = false;
        }
        _super.prototype.beforeShow.call(this);
        this.onShow();
    };
    /**
    * 开启监听，配置宽高，添加到舞台
    */
    UpdateCtrl.prototype.onShow = function () {
        _super.prototype.onShow.call(this, 3);
        LoadingUI.instance.hide();
        this._ui._labMsg.innerHTML = this._tips;
        this._ui._labMsg.y = 100 + (210 - this._ui._labMsg.contextHeight) * 0.5;
        this.tweenSelf();
    };
    /**
     * 离开时调度
     */
    UpdateCtrl.prototype.afterShow = function () {
        _super.prototype.afterShow.call(this);
    };
    UpdateCtrl.prototype.onTouch = function (e) {
        switch (e.currentTarget) {
            case this._ui._btnConfirm:
                NativeHelper.instance.appUpdate(this._newVer, this._url);
                break;
        }
    };
    return UpdateCtrl;
}(BaseCtrl));
//# sourceMappingURL=UpdateCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BUTTON_POS_X = 75;
var BUTTON_POS_Y = 70;
var TIMER_LINE_ZORDER = 1;
var BUTTON_ZORDER = 2;
var PlaySheetView = /** @class */ (function (_super) {
    __extends(PlaySheetView, _super);
    function PlaySheetView() {
        var _this = _super.call(this) || this;
        _this.name = "PlaySheetView";
        Laya.stage.on(Laya.Event.RESIZE, _this, _this.onResize);
        Laya.timer.once(100, _this, _this.onResize);
        return _this;
        // this.init()
    }
    PlaySheetView.prototype.onResize = function () {
        this.width = Laya.stage.width;
        this.height = Laya.stage.height;
        this._exit.left = Laya.stage.width > 1280 ? (Laya.stage.width - 1280) / 2 + 30 : 30;
    };
    PlaySheetView.prototype.onMouseDown = function (e) {
        this.pause();
        // this._thumb.on(Laya.Event.MOUSE_MOVE, this, this.onTouchMoved);
        // this._thumb.on(Laya.Event.MOUSE_UP, this, this.onMouseUp);
        Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.onTouchMoved);
        Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onMouseUp);
        this._lastX = Laya.stage.mouseX;
        // console.info(this._progress._childs)
        console.log("onMouseDown " + Laya.stage.mouseX + "," + Laya.stage.mouseY);
    };
    PlaySheetView.prototype.onTouchMoved = function (e) {
        if (Math.abs(e.currentTarget.mouseX - this._lastX) < 5) {
            return;
        }
        console.log("onMouseMove1 " + e.stageX + "," + e.stageY);
        console.log("onMouseMove2 " + e.currentTarget.mouseX + "," + e.currentTarget.mouseY);
        this._thumb.x = this._thumb.x + e.currentTarget.mouseX - this._lastX;
        if (this._thumb.x <= 0) {
            this._thumb.x = 0;
            this._fg.width = this._thumb.x;
            return;
        }
        if (this._thumb.x > this._progress.width) {
            this._thumb.x = this._progress.width;
            this._fg.width = this._thumb.x;
            return;
        }
        this._lastX = e.currentTarget.mouseX;
        // let percentage = Math.abs(this._thumb.x / 701)*100
        this._fg.width = this._thumb.x;
    };
    PlaySheetView.prototype.onMouseUp = function (e) {
        var percentage = this._thumb.x / this._progress.width;
        var time = this.totalTime * percentage;
        PlaySheet.instance.stopAndGoToTime(time);
        this.resume();
        this._thumb.off(Laya.Event.MOUSE_MOVE, this, this.onTouchMoved);
        Laya.stage.off(Laya.Event.MOUSE_MOVE, this, this.onTouchMoved);
        Laya.stage.off(Laya.Event.MOUSE_UP, this, this.onMouseUp);
        Laya.stage.off(Laya.Event.MOUSE_OUT, this, this.onMouseUp);
    };
    PlaySheetView.prototype.isValid = function () {
        if (PlaySheet.instance.netmsgs) {
            return true;
        }
        else {
            return false;
        }
    };
    PlaySheetView.prototype.init = function (sheetData) {
        this._sheetData = sheetData;
        this.hideAllBtns();
        PlaySheet.instance.init(this._sheetData);
        this.totalTime = PlaySheet.instance.getTotalTime();
        PlaySheet.instance.onUpdateCallBack(this.update.bind(this));
        this.showPlayBtn();
        this._playing = false;
        this.updateView();
        // this.showTimerLine()
        Laya.timer.loop(1000, this, this.updateShow);
        this.on(Laya.Event.CLICK, this, this.show);
        this._thumb.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);
        this._play.on(Laya.Event.CLICK, this, this.play);
        this._exit.on(Laya.Event.CLICK, this, this.onExitClicked);
        this._last.on(Laya.Event.CLICK, this, this.gotoLast);
        this._next.on(Laya.Event.CLICK, this, this.gotoNext);
    };
    PlaySheetView.prototype.gotoLast = function () {
        PlaySheet.instance.gotoLast();
        this.resume();
    };
    PlaySheetView.prototype.gotoNext = function () {
        PlaySheet.instance.gotoNext();
        this.resume();
    };
    PlaySheetView.prototype.showPlayBtn = function () {
        this._play.skin = "sheet/sheet_play_button_1.png";
    };
    PlaySheetView.prototype.updateShow = function () {
        if (!this._playing) {
            return;
        }
        if (this.playtime && this.playtime > 0) {
            this.playtime = this.playtime - 1;
            if (this.playtime == 0) {
                this.hide();
            }
        }
    };
    PlaySheetView.prototype.show = function () {
        this._view.visible = true;
        this.showing = true;
    };
    PlaySheetView.prototype.hide = function () {
        this._view.visible = false;
        this.showing = false;
    };
    PlaySheetView.prototype.updateView = function () {
        // this.stopAllActions()
        if (this._playing) {
            this.playtime = 3;
        }
        else {
            this.show();
        }
    };
    PlaySheetView.prototype.update = function (time) {
        this.time = time;
        this.updateTimerLine();
        if (this.time >= this.totalTime) {
            this.ended();
        }
    };
    PlaySheetView.prototype.updateTimerLine = function () {
        this.time = this.time || 0;
        var percentage = this.time / this.totalTime;
        if (percentage > 1) {
            percentage = 1;
        }
        if (percentage < 0) {
            percentage = 0;
        }
        if (this._fg) {
            this._fg.width = Math.abs(percentage * this._progress.width);
            this._thumb.x = Math.abs(percentage * this._progress.width);
        }
    };
    PlaySheetView.prototype.showTimerLine = function () {
        this.updateTimerLine();
    };
    PlaySheetView.prototype.onSheetBgTouch = function (event) {
        // let name = event.name
        // if name == "began" then
        // 	return true
        // elseif name == "ended" then
        // 	this.playtime = 3
        // end
    };
    PlaySheetView.prototype.hideTimerLine = function () {
    };
    PlaySheetView.prototype.hidePlayBtn = function () {
        // if not this.playBtn then
        // 	return
        // end
        // this.playBtn:setVisible(false)
    };
    PlaySheetView.prototype.showPauseBtn = function () {
        this._play.skin = "sheet/sheet_pause_button_1.png";
    };
    PlaySheetView.prototype.hidePauseBtn = function () {
        // if not this.pauseBtn then
        // 	return
        // end
        // this.pauseBtn:setVisible(false)
    };
    PlaySheetView.prototype.showResumeBtn = function () {
        // if this.resumeBtn then
        // 	this.resumeBtn:setVisible(true)
        // 	return
        // end
        // let images = {normal = "sheet/sheet_play_button_1.png", pressed = "sheet/sheet_play_button_2.png"}
        // this.resumeBtn = ht.ui.HTPushButton.new(images)
        // 	:pos(BUTTON_POS_X, BUTTON_POS_Y)
        // 	:addTo(this.view, BUTTON_ZORDER)
        // 	:onButtonClicked(handler(self, this.resume))
    };
    PlaySheetView.prototype.hideResumeBtn = function () {
        // if not this.resumeBtn then
        // 	return
        // end
        // this.resumeBtn:setVisible(false)
    };
    PlaySheetView.prototype.showReplayBtn = function () {
        // this._replay.visible = true
        // this._replay.on(Laya.Event.CLICK,this,this.replay)
        this.showPlayBtn();
    };
    PlaySheetView.prototype.hideReplayBtn = function () {
        this._replay.visible = false;
        this._replay.off(Laya.Event.CLICK, this, this.replay);
    };
    PlaySheetView.prototype.play = function () {
        if (!this._playing) {
            if (this.time >= this.totalTime) {
                this.replay();
            }
            else {
                this._playing = true;
                // this.hideAllBtns()
                this.showPauseBtn();
                this.showTimerLine();
                PlaySheet.instance.play();
                this.updateView();
            }
        }
        else {
            this._playing = false;
            // this.hideAllBtns()
            this.showPlayBtn();
            this.showTimerLine();
            PlaySheet.instance.pause();
            // this.updateView()
        }
    };
    PlaySheetView.prototype.pause = function () {
        this._playing = false;
        this.hideAllBtns();
        this.showResumeBtn();
        PlaySheet.instance.pause();
        this.updateView();
    };
    PlaySheetView.prototype.resume = function () {
        this._playing = true;
        this.hideAllBtns();
        this.showPauseBtn();
        this.showTimerLine();
        PlaySheet.instance.resume();
        this.updateView();
    };
    PlaySheetView.prototype.ended = function () {
        this._playing = false;
        this.hideAllBtns();
        this.showReplayBtn();
        this.hideTimerLine();
        PlaySheet.instance.stop();
        this.updateView();
    };
    PlaySheetView.prototype.replay = function () {
        this.time = 0;
        this.init(this._sheetData);
        this.play();
    };
    PlaySheetView.prototype.hideAllBtns = function () {
        this.hidePlayBtn();
        this.hidePauseBtn();
        this.hideResumeBtn();
        this.hideReplayBtn();
    };
    PlaySheetView.prototype.onExitClicked = function (callback) {
        AppControl.getInstance().showPage(HallPage);
    };
    return PlaySheetView;
}(ui.panel.PlaySheetUI));
//# sourceMappingURL=PlaySheetView.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 俱乐部创建弹窗
*/
var club;
(function (club) {
    var ClubAlert = /** @class */ (function (_super) {
        __extends(ClubAlert, _super);
        function ClubAlert() {
            var _this = _super.call(this) || this;
            _this["name"] = "ClubAlert";
            _this._autoHide = false;
            return _this;
        }
        Object.defineProperty(ClubAlert, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new ClubAlert();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        ClubAlert.prototype.show = function (msg, thisObj, callback) {
            var params = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                params[_i - 3] = arguments[_i];
            }
            this._msg = msg;
            this._thisObj = thisObj;
            this._callBack = callback;
            this._params = params;
            this.showself();
        };
        ClubAlert.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.club.ClubAlertUI();
                EventManager.instance.registerOnObject(this, this._ui._btnConfirm, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnCancel, Laya.Event.CLICK, this, this.onTouch);
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        /**
        * 开启监听，配置宽高，添加到舞台
        */
        ClubAlert.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            this._ui._labMsg.style.align = "center";
            this._ui._labMsg.style.color = "#9b5036";
            this._ui._labMsg.style.fontSize = 24;
            this._ui._labMsg.style.leading = 10;
            this._ui._labMsg.style.valign = "middle";
            this._ui._labMsg.innerHTML = this._msg;
            this._ui._labMsg.y = 71 + (115 - this._ui._labMsg.contextHeight) * 0.5;
            this.tweenSelf();
        };
        /**
         * 离开时调度
         */
        ClubAlert.prototype.afterShow = function () {
            _super.prototype.afterShow.call(this);
        };
        ClubAlert.prototype.onTouch = function (e) {
            switch (e.currentTarget) {
                case this._ui._btnConfirm:
                    this.hide();
                    if (this._callBack)
                        this._callBack.call(this._thisObj, this._params);
                    break;
                case this._ui._btnCancel:
                    this.hide();
                    break;
            }
        };
        return ClubAlert;
    }(BaseCtrl));
    club.ClubAlert = ClubAlert;
})(club || (club = {}));
//# sourceMappingURL=ClubAlert.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 俱乐部创建
*/
var club;
(function (club) {
    var ClubCreate = /** @class */ (function (_super) {
        __extends(ClubCreate, _super);
        function ClubCreate() {
            var _this = _super.call(this) || this;
            _this["name"] = "ClubCreate";
            return _this;
        }
        Object.defineProperty(ClubCreate, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new ClubCreate();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        ClubCreate.prototype.show = function () {
            this.showself();
        };
        ClubCreate.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.club.ClubCreateUI();
                EventManager.instance.registerOnObject(this, this._ui._btnCreate, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.hide);
                EventManager.instance.registerOnObject(this, this._ui._mask, Laya.Event.CLICK, this, this.hide);
                EventManager.instance.registerOnObject(this, this._ui._input, Laya.Event.INPUT, this, this.onInputChange);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.CLUB_CREATE_SUCC, this, this.onCreateSucc);
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        /**
        * 开启监听，配置宽高，添加到舞台
        */
        ClubCreate.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            this._ui._input.text = "";
            this.tweenSelf();
        };
        /**
         * 离开时调度
         */
        ClubCreate.prototype.afterShow = function () {
            _super.prototype.afterShow.call(this);
        };
        ClubCreate.prototype.onInputChange = function (e) {
            var flag;
            while (Utils.getCharCodeLength(this._ui._input.text) > 20) {
                flag = true;
                this._ui._input.text = this._ui._input.text.substring(0, this._ui._input.text.length - 1);
            }
            if (flag)
                HintCtrl.instance.show(GameConfig.language.match_name_too_long);
        };
        ClubCreate.prototype.onTouch = function (e) {
            switch (e.currentTarget) {
                case this._ui._btnCreate:
                    var str = this._ui._input.text;
                    if (str) {
                        str = Utils.removeHeadAndEndSpace(str);
                        if (str)
                            club.ClubAlert.instance.show(StringUtils.format(GameConfig.language.club_create_1, str), this, this.create, str);
                        else
                            AlertInGameCtrl.instance.show(GameConfig.language.club_create_2, null, 0, false);
                    }
                    else
                        AlertInGameCtrl.instance.show(GameConfig.language.club_create_2, null, 0, false);
                    break;
            }
        };
        ClubCreate.prototype.create = function (params) {
            var title = params[0];
            club.ClubManager.createClub(title);
        };
        ClubCreate.prototype.onCreateSucc = function () {
            this.hide();
        };
        return ClubCreate;
    }(BaseCtrl));
    club.ClubCreate = ClubCreate;
})(club || (club = {}));
//# sourceMappingURL=ClubCreate.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 俱乐部
*/
var club;
(function (club) {
    var ClubCtrl = /** @class */ (function (_super) {
        __extends(ClubCtrl, _super);
        function ClubCtrl() {
            var _this = _super.call(this) || this;
            _this["name"] = "ClubCtrl";
            return _this;
        }
        Object.defineProperty(ClubCtrl, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new ClubCtrl();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        ClubCtrl.prototype.show = function (p) {
            this._p = p;
            this.showself();
        };
        /**
         * 这里完成new ui，添加注册监听等初始化工作
         */
        ClubCtrl.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.club.ClubUI();
                this._ui._list.itemRender = club.MyClubListRenderer;
                this._ui._list.scrollBar.elasticDistance = 100;
                this._ui._list.scrollBar.visible = false;
                this._ui._list.renderHandler = new Laya.Handler(this, this.updateList);
                this._ui._list.array = [];
                this._ui._list.mouseHandler = new Laya.Handler(this, this.selectList);
                EventManager.instance.registerOnObject(this, this._ui._btnCreate, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnJoin, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnAdd, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnCreate2, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnJoin2, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._boxMask, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.UPDATE_MY_CLUB_LIST, this, this.onUpdateClubList);
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        /**
        * 开启监听，配置宽高，添加到舞台
        */
        ClubCtrl.prototype.onShow = function () {
            var _this = this;
            if (!this._ui.parent) {
                this._p.addChild(this._ui);
                this._ui.zOrder = 1;
            }
            this.boxVis = false;
            _super.prototype.onShow.call(this, 4);
            this.onUpdateClubList();
            if (this._lastCid || !this._isGetMyClubCd) {
                this._ui._btnCreate.visible = this._ui._btnJoin.visible = false;
                club.ClubManager.getMyClub();
                this._isGetMyClubCd = true;
                Laya.timer.once(5000, this, function () {
                    _this._isGetMyClubCd = false;
                });
            }
            if (this._lastCid)
                club.MyClubCtrl.instance.show(this._lastCid);
        };
        /**
         * 离开时调度
         */
        ClubCtrl.prototype.afterShow = function () {
            _super.prototype.afterShow.call(this);
        };
        ClubCtrl.prototype.hide = function () {
            this._lastCid = 0;
            _super.prototype.hide.call(this);
        };
        ClubCtrl.prototype.onTouch = function (e) {
            switch (e.currentTarget) {
                case this._ui._btnCreate:
                case this._ui._btnCreate2:
                    if (club.ClubManager.isClubFull()) {
                        var str = GameConfig.language.club_web_error_code[1204];
                        if (str) {
                            AlertInGameCtrl.instance.show(str, null, 0, false);
                        }
                    }
                    else
                        club.ClubCreate.instance.show();
                    this.boxVis = false;
                    break;
                case this._ui._btnJoin:
                case this._ui._btnJoin2:
                    club.ClubJoin.instance.show();
                    this.boxVis = false;
                    break;
                case this._ui._btnAdd:
                    this.boxVis = !this._ui._boxAdd.visible;
                    break;
                case this._ui._boxMask:
                    this.boxVis = false;
                    break;
            }
        };
        Object.defineProperty(ClubCtrl.prototype, "boxVis", {
            set: function (value) {
                this._ui._boxAdd.visible = this._ui._boxMask.visible = value;
                this._ui.zOrder = value ? 4 : 1;
            },
            enumerable: true,
            configurable: true
        });
        ClubCtrl.prototype.addChild = function (node) {
            this._ui.addChild(node);
        };
        /***渲染单元格时的回调方法***/
        ClubCtrl.prototype.updateList = function (cell, index) {
            cell.updata();
        };
        ClubCtrl.prototype.selectList = function (e, index) {
            if (e.type == Laya.Event.CLICK) {
                this._lastCid = this._ui._list.array[index].cid;
                club.MyClubCtrl.instance.show(this._ui._list.array[index].cid);
            }
        };
        ClubCtrl.prototype.onUpdateClubList = function () {
            if (club.ClubManager.myClubs && club.ClubManager.myClubs.length) {
                this._ui._list.array = club.ClubManager.myClubs;
                this._ui._btnCreate.visible = this._ui._btnJoin.visible = false;
                this._ui._list.visible = true;
            }
            else {
                this._ui._list.array = [];
                this._ui._btnCreate.visible = this._ui._btnJoin.visible = true;
                this._ui._list.visible = false;
            }
        };
        Object.defineProperty(ClubCtrl.prototype, "lastCid", {
            get: function () {
                return this._lastCid;
            },
            enumerable: true,
            configurable: true
        });
        return ClubCtrl;
    }(BaseCtrl));
    club.ClubCtrl = ClubCtrl;
})(club || (club = {}));
//# sourceMappingURL=ClubCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 俱乐部信息 设置
*/
var club;
(function (club) {
    var ClubInfoCtrl = /** @class */ (function (_super) {
        __extends(ClubInfoCtrl, _super);
        function ClubInfoCtrl() {
            var _this = _super.call(this) || this;
            _this["name"] = "ClubInfoCtrl";
            return _this;
        }
        Object.defineProperty(ClubInfoCtrl, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new ClubInfoCtrl();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        ClubInfoCtrl.prototype.show = function (cid) {
            this._cid = cid;
            this._myClub = club.ClubManager.getClubByCid(this._cid);
            this.showself();
        };
        /**
         * 这里完成new ui，添加注册监听等初始化工作
         */
        ClubInfoCtrl.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.club.ClubInfoUI();
                this._ui._list.itemRender = club.ClubPlayerRenderer;
                this._ui._list.scrollBar.elasticDistance = 100;
                this._ui._list.scrollBar.visible = false;
                this._ui._list.renderHandler = new Laya.Handler(this, this.updateList);
                // this._ui._list.array = [];
                this._ui._list.mouseHandler = new Laya.Handler(this, this.selectList);
                this._ui._list.scrollBar.on(Laya.Event.CHANGE, this, this.onScrollMemberChanged);
                EventManager.instance.registerOnObject(this, this._ui._btnModify, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnExit, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnManager, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnDispose, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnBuy, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.hide);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.UPDATE_MY_CLUB_MEMBERS_LIST, this, this.onUpdateMembersList);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.UPDATE_MY_CLUB_DIAMOND, this, this.onUpdateDiamond);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.CLUB_RENAME_SUCC, this, this.onRenameSucc);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.CLUB_QUIT_SUCC, this, this.onQuitSucc);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.CLUB_DELETE_SUCC, this, this.onDeleteSucc);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.CLUB_RECHARGE_SUCC, this, this.onRechargeSucc);
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        /**
        * 开启监听，配置宽高，添加到舞台
        */
        ClubInfoCtrl.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            this._ui._list.array = [];
            this._ui._labTitle.text = this._myClub.title;
            this._ui._labId.text = StringUtils.format(GameConfig.language.club_search_1, this._myClub.cid);
            this._ui._labDiamond.text = this._myClub.diamond;
            var isCreator = club.ClubManager.isCreator(this._myClub.role);
            this._ui._boxDiamond.visible = this._ui._btnModify.visible = this._ui._btnDispose.visible = this._ui._btnManager.visible = isCreator;
            this._ui._btnExit.visible = !isCreator;
            this._ui._btnModify.x = this._ui._labTitle.x + this._ui._labTitle.displayWidth + 10;
            club.ClubManager.getMemberList(this._myClub.cid, 1);
            this.tweenSelf();
        };
        /**
         * 离开时调度
         */
        ClubInfoCtrl.prototype.afterShow = function () {
            _super.prototype.afterShow.call(this);
            club.ClubManager.removeMembers(this._cid);
        };
        ClubInfoCtrl.prototype.onUpdateDiamond = function (cid) {
            if (this._myClub.cid == cid)
                this._ui._labDiamond.text = this._myClub.diamond + "";
        };
        ClubInfoCtrl.prototype.onUpdateMembersList = function (cid) {
            if (this._myClub.cid == cid)
                this._ui._list.array = this._myClub.members;
        };
        ClubInfoCtrl.prototype.onRenameSucc = function (cid) {
            if (this._myClub.cid == cid)
                this._ui._labTitle.text = this._myClub.title;
        };
        /***渲染单元格时的回调方法***/
        ClubInfoCtrl.prototype.updateList = function (cell, index) {
            cell.updata();
        };
        /***选择单元格回调***/
        ClubInfoCtrl.prototype.selectList = function (e, index) {
            if (e.type == Laya.Event.CLICK) {
                club.ClubMember.instance.show(club.ClubManager.isCreator(this._myClub.role), this._myClub.cid, this._myClub.members[index]);
            }
        };
        ClubInfoCtrl.prototype.onScrollMemberChanged = function (e) {
            if (this._ui._list.scrollBar.value < 0)
                this._refreshMembersFirstPage = true;
            else if (this._ui._list.scrollBar.value > 0)
                this._refreshMembersFirstPage = false;
            if (this._refreshMembersFirstPage && this._ui._list.scrollBar.value == 0)
                club.ClubManager.getMemberList(this._myClub.cid, 1);
            if (this._ui._list.scrollBar.value > this._ui._list.scrollBar.max)
                this._refreshMembersMore = true;
            else if (this._ui._list.scrollBar.value < this._ui._list.scrollBar.max)
                this._refreshMembersMore = false;
            if (this._refreshMembersMore && this._ui._list.scrollBar.value == this._ui._list.scrollBar.max)
                club.ClubManager.getMemberList(this._myClub.cid);
        };
        ClubInfoCtrl.prototype.onTouch = function (e) {
            var _this = this;
            switch (e.currentTarget) {
                case this._ui._btnModify:
                    club.ClubRename.instance.show(this._myClub.cid);
                    break;
                case this._ui._btnExit:
                    club.ClubAlert.instance.show(StringUtils.format(GameConfig.language.club_quit, this._myClub.title), this, function () {
                        club.ClubManager.quitClub(_this._myClub.cid);
                    });
                    break;
                case this._ui._btnManager:
                    club.ClubPayType.instance.show(this._myClub.cid);
                    break;
                case this._ui._btnDispose:
                    club.ClubAlert.instance.show(StringUtils.format(GameConfig.language.club_delete, this._myClub.title), this, function () {
                        club.ClubManager.deleteClub(_this._myClub.cid);
                    });
                    break;
                case this._ui._btnBuy:
                    club.ClubRecharge.instance.show(this._myClub.cid);
                    break;
            }
        };
        ClubInfoCtrl.prototype.onQuitSucc = function (cid) {
            if (this._myClub.cid == cid)
                this.hide();
        };
        ClubInfoCtrl.prototype.onDeleteSucc = function (cid) {
            if (this._myClub.cid == cid)
                this.hide();
        };
        ClubInfoCtrl.prototype.onRechargeSucc = function (cid) {
            if (this._cid == cid)
                this._ui._labDiamond.text = this._myClub.diamond;
        };
        return ClubInfoCtrl;
    }(BaseCtrl));
    club.ClubInfoCtrl = ClubInfoCtrl;
})(club || (club = {}));
//# sourceMappingURL=ClubInfoCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 俱乐部创建
*/
var club;
(function (club) {
    var ClubJoin = /** @class */ (function (_super) {
        __extends(ClubJoin, _super);
        function ClubJoin() {
            var _this = _super.call(this) || this;
            _this["name"] = "ClubJoin";
            return _this;
        }
        Object.defineProperty(ClubJoin, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new ClubJoin();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        ClubJoin.prototype.show = function () {
            this.showself();
        };
        ClubJoin.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.club.ClubJoinUI();
                this._keyboard = new KeyBoardNumUI(2);
                this._keyboard.centerX = 0;
                this._keyboard.y = 192;
                this._ui._box.addChild(this._keyboard);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.KEYBOARD_NUM, this, this.onInputCountChanged);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.CLUB_SEARCH_SUCC, this, this.onSearchSucc);
                EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.hide);
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        /**
        * 开启监听，配置宽高，添加到舞台
        */
        ClubJoin.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            this._ui._input.text = "";
            this.tweenSelf();
        };
        /**
         * 离开时调度
         */
        ClubJoin.prototype.afterShow = function () {
            _super.prototype.afterShow.call(this);
        };
        ClubJoin.prototype.onInputCountChanged = function (key) {
            var num;
            switch (key) {
                case "10":
                    this._ui._input.text = "";
                    break;
                case "12":
                    this.search();
                    break;
                case "11":
                    this._ui._input.text += "0";
                    break;
                default:
                    this._ui._input.text += key;
                    break;
            }
            if (this._ui._input.text.length > 9)
                this._ui._input.text = this._ui._input.text.substr(0, 9);
            // if (this._ui._input.text.length == 6)
            // this.search();
        };
        ClubJoin.prototype.search = function () {
            if (this._ui._input.text) {
                var cid = Number(this._ui._input.text);
                club.ClubManager.searchClub(cid);
            }
            else {
                AlertInGameCtrl.instance.show(GameConfig.language.club_create_3, null, 0, false);
            }
        };
        ClubJoin.prototype.onSearchSucc = function (response) {
            club.ClubSearch.instance.show(response);
            this.hide();
        };
        return ClubJoin;
    }(BaseCtrl));
    club.ClubJoin = ClubJoin;
})(club || (club = {}));
//# sourceMappingURL=ClubJoin.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 俱乐部Renderer
*/
var club;
(function (club) {
    var ClubListRenderer = /** @class */ (function (_super) {
        __extends(ClubListRenderer, _super);
        function ClubListRenderer() {
            var _this = _super.call(this) || this;
            _this._btnJoin.on(Laya.Event.CLICK, _this, _this.onTouch);
            _this._btnLook.on(Laya.Event.CLICK, _this, _this.onTouch);
            return _this;
        }
        /**
     * cid
     * title
     * role 100创始人
     * cnt 总人数
     * currcnt 当前人数
     * gcnt 比赛数
     */
        ClubListRenderer.prototype.updata = function () {
            this._labId.text = StringUtils.format(GameConfig.language.club_search_1, this.dataSource.cid);
            this._labTitle.text = this._dataSource.title;
            this._labMember.text = StringUtils.format(GameConfig.language.club_search_2, this.dataSource.currmem ? this.dataSource.currmem : 0, this.dataSource.maxmem ? this.dataSource.maxmem : 0);
            var isInClub = club.ClubManager.isInClub(this.dataSource.cid);
            this._btnJoin.visible = !isInClub;
            this._btnLook.visible = isInClub;
        };
        ClubListRenderer.prototype.onTouch = function (e) {
            switch (e.currentTarget) {
                case this._btnJoin:
                    club.ClubAlert.instance.show(StringUtils.format(GameConfig.language.club_search_3, this.dataSource.title), this, this.ask, this.dataSource.cid);
                    break;
                case this._btnLook:
                    club.ClubSearch.instance.hide();
                    club.MyClubCtrl.instance.show(this.dataSource.cid);
                    break;
            }
        };
        ClubListRenderer.prototype.ask = function (params) {
            club.ClubManager.joinClub(params[0]);
        };
        return ClubListRenderer;
    }(ui.club.ClubListRendererUI));
    club.ClubListRenderer = ClubListRenderer;
})(club || (club = {}));
//# sourceMappingURL=ClubListRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 俱乐部成员
*/
var club;
(function (club) {
    var ClubMember = /** @class */ (function (_super) {
        __extends(ClubMember, _super);
        function ClubMember() {
            var _this = _super.call(this) || this;
            _this["name"] = "ClubMember";
            return _this;
        }
        Object.defineProperty(ClubMember, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new ClubMember();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        ClubMember.prototype.show = function (isCreator, cid, data) {
            this._data = data;
            this._cid = cid;
            this._isCreator = isCreator;
            this.showself();
        };
        ClubMember.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.club.ClubMemberUI();
                EventManager.instance.registerOnObject(this, this._ui._btnKick, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.hide);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.CLUB_KICK_OUT_SUCC, this, this.onKickOutSucc);
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        /**
        * 开启监听，配置宽高，添加到舞台
        // {"sex":"1","avatar":"","uid":363686,"nk":"zhc134"}
        */
        ClubMember.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            this._ui._labId.text = StringUtils.format(GameConfig.language.club_search_1, this._data.uid + "");
            this._ui._labNickname.text = this._data.nk ? this._data.nk : "";
            this._ui._btnKick.visible = this._isCreator && this._data.uid != GameLogic.selfData.uid;
            var sex = this._data.sex ? this._data.sex : 1;
            this._ui._imgMale.visible = sex != 2;
            this._ui._imgFemale.visible = sex == 2;
            if (this._data.avatar) {
                this._ui._imgHead.texture = null;
                this._ui._imgHead.source = null;
                this._ui._imgHead.loadImage(this._data.avatar, 0, 0, 78, 78);
            }
            else {
                this._ui._imgHead.texture = null;
                this._ui._imgHead.source = null;
            }
            this.tweenSelf();
        };
        /**
         * 离开时调度
         */
        ClubMember.prototype.afterShow = function () {
            _super.prototype.afterShow.call(this);
        };
        ClubMember.prototype.onTouch = function (e) {
            var _this = this;
            switch (e.currentTarget) {
                case this._ui._btnKick:
                    club.ClubAlert.instance.show(StringUtils.format(GameConfig.language.club_kick, this._data.nk ? this._data.nk : ""), this, function () {
                        club.ClubManager.kick(_this._cid, _this._data.uid);
                    });
                    break;
            }
        };
        ClubMember.prototype.onKickOutSucc = function (cid, uid) {
            if (this._cid == cid)
                this.hide();
        };
        return ClubMember;
    }(BaseCtrl));
    club.ClubMember = ClubMember;
})(club || (club = {}));
//# sourceMappingURL=ClubMember.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 俱乐部paytype
*/
var club;
(function (club) {
    var ClubPayType = /** @class */ (function (_super) {
        __extends(ClubPayType, _super);
        function ClubPayType() {
            var _this = _super.call(this) || this;
            _this["name"] = "ClubPayType";
            return _this;
        }
        Object.defineProperty(ClubPayType, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new ClubPayType();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        ClubPayType.prototype.show = function (cid) {
            this._cid = cid;
            this._myClub = club.ClubManager.getClubByCid(this._cid);
            this.showself();
        };
        ClubPayType.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.club.ClubPayTypeUI();
                EventManager.instance.registerOnObject(this, this._ui._btnConfirm, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.hide);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.CLUB_PAY_TYPE_CHANGE, this, this.onPayTypeChange);
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        /**
        * 开启监听，配置宽高，添加到舞台
        */
        ClubPayType.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            if (this._myClub.paytype == 1)
                this._ui._rad.selectedIndex = 0;
            else
                this._ui._rad.selectedIndex = 1;
        };
        /**
         * 离开时调度
         */
        ClubPayType.prototype.afterShow = function () {
            _super.prototype.afterShow.call(this);
        };
        ClubPayType.prototype.onTouch = function (e) {
            switch (e.currentTarget) {
                case this._ui._btnConfirm:
                    var paytype;
                    if (this._ui._rad.selectedIndex == 0)
                        paytype = 1;
                    else
                        paytype = 0;
                    club.ClubManager.setClubPaytype(this._myClub.cid, paytype);
                    break;
            }
        };
        ClubPayType.prototype.onPayTypeChange = function (cid) {
            if (this._myClub.cid == cid)
                this.hide();
        };
        return ClubPayType;
    }(BaseCtrl));
    club.ClubPayType = ClubPayType;
})(club || (club = {}));
//# sourceMappingURL=ClubPayType.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 俱乐部成员Renderer
*/
var club;
(function (club) {
    var ClubPlayerRenderer = /** @class */ (function (_super) {
        __extends(ClubPlayerRenderer, _super);
        function ClubPlayerRenderer() {
            return _super.call(this) || this;
        }
        // {"sex":"1","avatar":"","uid":363686,"nk":"zhc134"}
        ClubPlayerRenderer.prototype.updata = function () {
            // this._labNickname.width=1;
            this._labNickname.text = this.dataSource.nk ? this.dataSource.nk : "俱乐部成员对对对";
            this._pan.width = (this._labNickname.displayWidth > 78) ? 78 : this._labNickname.displayWidth;
            var sex = this.dataSource.sex ? this.dataSource.sex : 1;
            this._imgMale.visible = sex != 2;
            this._imgFemale.visible = sex == 2;
            // this.dataSource.avatar = "https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515770253325&di=47c9309c74a192b47bde773bcf2f135c&imgtype=0&src=http%3A%2F%2Fe.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F500fd9f9d72a6059099ccd5a2334349b023bbae5.jpg";
            if (this.dataSource.avatar) {
                this._imgHead.texture = null;
                this._imgHead.source = null;
                this._imgHead.loadImage(this.dataSource.avatar, 0, 0, 78, 78);
            }
            else {
                this._imgHead.texture = null;
                this._imgHead.source = null;
            }
        };
        return ClubPlayerRenderer;
    }(ui.club.ClubPlayerRenderUI));
    club.ClubPlayerRenderer = ClubPlayerRenderer;
})(club || (club = {}));
//# sourceMappingURL=ClubPlayerRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 俱乐部划账
*/
var club;
(function (club) {
    var ClubRecharge = /** @class */ (function (_super) {
        __extends(ClubRecharge, _super);
        function ClubRecharge() {
            var _this = _super.call(this) || this;
            _this["name"] = "ClubRecharge";
            return _this;
        }
        Object.defineProperty(ClubRecharge, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new ClubRecharge();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        ClubRecharge.prototype.show = function (cid) {
            this._cid = cid;
            this.showself();
        };
        ClubRecharge.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.club.ClubRechargeUI();
                this._ui._input.type = "TYPE_NUMBER";
                EventManager.instance.registerOnObject(this, this._ui._btnConfirm, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnCancel, Laya.Event.CLICK, this, this.hide);
                EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.hide);
                EventManager.instance.registerOnObject(this, this._ui._input, Laya.Event.INPUT, this, this.onInputChange);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.CLUB_RECHARGE_SUCC, this, this.onRechargeSucc);
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        /**
        * 开启监听，配置宽高，添加到舞台
        */
        ClubRecharge.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            club.ClubManager.getMyClub();
            this._ui._input.text = "";
            this._ui._labDiamond.text = StringUtils.format(GameConfig.language.my_diamond, GameLogic.selfData.diamond);
            this.tweenSelf();
        };
        /**
         * 离开时调度
         */
        ClubRecharge.prototype.afterShow = function () {
            _super.prototype.afterShow.call(this);
        };
        ClubRecharge.prototype.onInputChange = function (e) {
        };
        ClubRecharge.prototype.onTouch = function (e) {
            switch (e.currentTarget) {
                case this._ui._btnConfirm:
                    var value = Number(this._ui._input.text);
                    if (value) {
                        if (GameLogic.selfData.diamond >= value) {
                            club.ClubAlert.instance.show(StringUtils.format(GameConfig.language.club_recharge, value), this, this.recharge, value);
                        }
                        else
                            AlertInGameCtrl.instance.show(GameConfig.language.diamond_not_enough, function (value) {
                                if (value == AlertCtrl.CONFIRM)
                                    ShopCtrl.instance.show();
                            });
                    }
                    else
                        AlertInGameCtrl.instance.show(GameConfig.language.club_recharge_2, null, 0, false);
                    break;
            }
        };
        ClubRecharge.prototype.recharge = function (value) {
            club.ClubManager.recharge(this._cid, Number(value));
        };
        ClubRecharge.prototype.onRechargeSucc = function (cid) {
            if (this._cid == cid)
                this.hide();
        };
        return ClubRecharge;
    }(BaseCtrl));
    club.ClubRecharge = ClubRecharge;
})(club || (club = {}));
//# sourceMappingURL=ClubRecharge.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 俱乐部改名
*/
var club;
(function (club) {
    var ClubRename = /** @class */ (function (_super) {
        __extends(ClubRename, _super);
        function ClubRename() {
            var _this = _super.call(this) || this;
            _this["name"] = "ClubRename";
            return _this;
        }
        Object.defineProperty(ClubRename, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new ClubRename();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        ClubRename.prototype.show = function (cid) {
            this._cid = cid;
            this.showself();
        };
        ClubRename.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.club.ClubRenameUI();
                EventManager.instance.registerOnObject(this, this._ui._btnConfirm, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnCancel, Laya.Event.CLICK, this, this.hide);
                EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.hide);
                EventManager.instance.registerOnObject(this, this._ui._input, Laya.Event.INPUT, this, this.onInputChange);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.CLUB_RENAME_SUCC, this, this.onRenameSucc);
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        /**
        * 开启监听，配置宽高，添加到舞台
        */
        ClubRename.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            this._ui._input.text = "";
            this.tweenSelf();
        };
        /**
         * 离开时调度
         */
        ClubRename.prototype.afterShow = function () {
            _super.prototype.afterShow.call(this);
        };
        ClubRename.prototype.onInputChange = function (e) {
            var flag;
            while (Utils.getCharCodeLength(this._ui._input.text) > 20) {
                flag = true;
                this._ui._input.text = this._ui._input.text.substring(0, this._ui._input.text.length - 1);
            }
            if (flag)
                HintCtrl.instance.show(GameConfig.language.match_name_too_long);
        };
        ClubRename.prototype.onTouch = function (e) {
            switch (e.currentTarget) {
                case this._ui._btnConfirm:
                    if (this._ui._input.text)
                        club.ClubAlert.instance.show(StringUtils.format(GameConfig.language.club_rename, this._ui._input.text), this, this.modify, this._ui._input.text);
                    else
                        AlertInGameCtrl.instance.show(GameConfig.language.club_create_2, null, 0, false);
                    break;
            }
        };
        ClubRename.prototype.modify = function (params) {
            var title = params[0];
            club.ClubManager.renameClub(this._cid, title);
        };
        ClubRename.prototype.onRenameSucc = function () {
            this.hide();
        };
        return ClubRename;
    }(BaseCtrl));
    club.ClubRename = ClubRename;
})(club || (club = {}));
//# sourceMappingURL=ClubRename.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 俱乐部搜索
*/
var club;
(function (club) {
    var ClubSearch = /** @class */ (function (_super) {
        __extends(ClubSearch, _super);
        function ClubSearch() {
            var _this = _super.call(this) || this;
            _this["name"] = "ClubSearch";
            return _this;
        }
        Object.defineProperty(ClubSearch, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new ClubSearch();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        ClubSearch.prototype.show = function (data) {
            this._data = data;
            this.showself();
        };
        ClubSearch.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.club.ClubSearchListUI();
                this._ui._list.itemRender = club.ClubListRenderer;
                this._ui._list.scrollBar.visible = false;
                // this._ui._list.scrollBar.elasticDistance = 100;
                // this._ui._list.selectEnable = true;
                this._ui._list.renderHandler = new Laya.Handler(this, this.updateList);
                EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.hide);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.CLUB_JOIN_SUCC, this, this.onJoinSucc);
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        /**
        * 开启监听，配置宽高，添加到舞台
        */
        ClubSearch.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            this._ui._list.array = [this._data];
            this._ui._list.scrollBar.value = 0;
            this.tweenSelf();
        };
        /**
         * 离开时调度
         */
        ClubSearch.prototype.afterShow = function () {
            _super.prototype.afterShow.call(this);
        };
        ClubSearch.prototype.onTouch = function (e) {
            switch (e.currentTarget) {
                // case this._btnClose:
                //     this.hide();
                //     break;
            }
        };
        /***渲染单元格时的回调方法***/
        ClubSearch.prototype.updateList = function (cell, index) {
            cell.updata(index);
        };
        ClubSearch.prototype.onJoinSucc = function () {
            this.hide();
        };
        return ClubSearch;
    }(BaseCtrl));
    club.ClubSearch = ClubSearch;
})(club || (club = {}));
//# sourceMappingURL=ClubSearch.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 俱乐部游戏列表
*/
var club;
(function (club) {
    var GameListRenderer = /** @class */ (function (_super) {
        __extends(GameListRenderer, _super);
        function GameListRenderer() {
            return _super.call(this) || this;
        }
        GameListRenderer.prototype.updata = function () {
            this._imgIcon.skin = "res/gameIcon/gameIcon_matchInfo_" + this.dataSource.gtype + ".png";
            this._imgIng.visible = this.dataSource.status > 0;
            if (this.dataSource.hasOwnProperty("mrule")) {
                this._boxMatch.visible = true;
                this._boxNormal.visible = false;
                var mrule = JSON.parse(this.dataSource.mrule);
                this._labMatchTitle.text = mrule.title;
                this._labMatchMember.text = this.dataSource.cnt ? this.dataSource.cnt : 0;
                if (MatchConfig.isModeTime(mrule.matchmode)) {
                    var d = new Date(Number(mrule.starttime) * 1000);
                    var h = d.getHours();
                    var m = d.getMinutes();
                    this._labMatchRule.text = StringUtils.format(GameConfig.language.format_m_d_h_m, "", d.getMonth() + 1, d.getDate(), h < 10 ? "0" + h : h, m < 10 ? "0" + m : m);
                }
                else {
                    this._labMatchRule.text = StringUtils.format(GameConfig.language.matchsign_min_member2, mrule.playercnt);
                }
                this._imgReadying.visible = false;
                this._imgSignin.visible = !this._imgIng.visible;
            }
            else {
                this._boxMatch.visible = false;
                this._boxNormal.visible = true;
                var grule = JSON.parse(this.dataSource.grule);
                this._labMember.text = (this.dataSource.cnt ? this.dataSource.cnt : "0") + "/" + (grule.max_player ? grule.max_player : "0");
                this._labGameRule.text = GameConfig.getGameRule(GameDef.GAME_NAME[this.dataSource.gtype - 1], this.dataSource.grule, false, this.dataSource.diamond, this.dataSource.paytype);
                this._imgSignin.visible = false;
                this._imgReadying.visible = !this._imgIng.visible;
            }
        };
        return GameListRenderer;
    }(ui.club.GameListRendererUI));
    club.GameListRenderer = GameListRenderer;
})(club || (club = {}));
//# sourceMappingURL=GameListRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
* 我的俱乐部
*/
var club;
(function (club) {
    var MyClubCtrl = /** @class */ (function (_super) {
        __extends(MyClubCtrl, _super);
        function MyClubCtrl() {
            var _this = _super.call(this) || this;
            _this._dicDetail = {};
            return _this;
        }
        Object.defineProperty(MyClubCtrl, "instance", {
            get: function () {
                if (!this._instance)
                    this._instance = new MyClubCtrl();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        MyClubCtrl.prototype.show = function (cid) {
            this._cid = cid;
            this._myClub = club.ClubManager.getClubByCid(this._cid);
            if (this._myClub)
                this.showself();
        };
        /**
         * 这里完成new ui，添加注册监听等初始化工作
         */
        MyClubCtrl.prototype.beforeShow = function () {
            if (!this._ui) {
                this._ui = new ui.club.MyClubUI();
                this._ui._btnTab1.hitArea = new Laya.Rectangle(275, 0, 236, 80);
                this._ui._btnTab2.hitArea = new Laya.Rectangle(0, 0, 236, 80);
                this._ui._btnCreateTab1.hitArea = new Laya.Rectangle(320, 0, 320, 75);
                this._ui._btnCreateTab2.hitArea = new Laya.Rectangle(0, 0, 320, 75);
                this._ui._listGames.itemRender = club.GameListRenderer;
                this._ui._listGames.scrollBar.elasticDistance = 100;
                this._ui._listGames.scrollBar.visible = false;
                this._ui._listGames.renderHandler = new Laya.Handler(this, this.updateGameList);
                this._ui._listGames.mouseHandler = new Laya.Handler(this, this.selectGameList);
                this._ui._listGames.scrollBar.on(Laya.Event.CHANGE, this, this.onScrollGameChanged);
                this._ui._listResults.itemRender = MenuHistoryScoreRenderer;
                this._ui._listResults.scrollBar.visible = false;
                this._ui._listResults.scrollBar.elasticDistance = 100;
                this._ui._listResults.selectEnable = true;
                this._ui._listResults.renderHandler = new Laya.Handler(this, this.updateResultList);
                this._ui._listResults.mouseHandler = new Laya.Handler(this, this.selectResultList);
                this._ui._listResults.scrollBar.on(Laya.Event.CHANGE, this, this.onScrollResultChanged);
                this._ui._listDetail.itemRender = MenuHistoryDetailRenderer;
                this._ui._listDetail.scrollBar.visible = false;
                this._ui._listDetail.selectEnable = true;
                this._ui._listDetail.renderHandler = new Laya.Handler(this, this.updateDetailList);
                this._ui._listDetail.mouseHandler = new Laya.Handler(this, this.selectDetailList);
                this._games = GameDef.currentGames.concat();
                this._matchs = GameDef.currentMatchs.concat();
                this._btns = [];
                // var daboluoIdx: number = this._games.indexOf(Number(GameDef.GAME_TYPE.SHISANSHUI));
                // if (daboluoIdx != -1)
                // 	this._games.splice(daboluoIdx, 1);
                for (var i = 0; i < this._games.length; i++) {
                    var btn = new component.BaseButton();
                    btn.loadImage("res/gameIcon/gameIcon_club_" + this._games[i] + ".png", 0, 0, null, null, Laya.Handler.create(this, function (b, index) {
                        b.stateNum = 2;
                        b.skin = "res/gameIcon/gameIcon_club_" + index + ".png";
                        b.height = b.height * 0.5;
                    }, [btn, this._games[i]]));
                    this._ui._boxCreate.addChild(btn);
                    btn.centerX = 160 * (i % 2 == 0 ? -1 : 1);
                    btn.bottom = 50;
                    btn.on(Laya.Event.CLICK, this, this.onCreateTouch);
                    this._btns.push(btn);
                }
                EventManager.instance.registerOnObject(this, this._ui._close, Laya.Event.CLICK, this, this.hide);
                EventManager.instance.registerOnObject(this, this._ui._btnCreateTab1, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnCreateTab2, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnTab1, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnTab2, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnCreateTable, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnSetup, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnRecharge, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._boxMask, Laya.Event.CLICK, this, this.onTouch);
                EventManager.instance.registerOnObject(this, this._ui._btnBack, Laya.Event.CLICK, this, this.onBack);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.UPDATE_MY_CLUB_RESULTS_LIST, this, this.onUpdateResultList);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.UPDATE_MY_CLUB_GAMES_LIST, this, this.onUpdateGameList);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.UPDATE_MY_CLUB_DIAMOND, this, this.onUpdateDiamond);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.CLUB_RENAME_SUCC, this, this.onRenameSucc);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.UNAUTHORIZED, this, this.onUnauthorized);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.CLUB_QUIT_SUCC, this, this.onQuitSucc);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.CLUB_DELETE_SUCC, this, this.onDeleteSucc);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.CLUB_KICK_OUT_SUCC, this, this.onKickOutSucc);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.CLUB_RECHARGE_SUCC, this, this.onRechargeSucc);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.CREATE_MATCH_SUCC, this, this.onCreateSucc);
                EventManager.instance.registerOnObject(this, Dispatcher.eventDispatcher, EventNames.CREATE_ROOM_SUCC, this, this.onCreateSucc);
            }
            _super.prototype.beforeShow.call(this);
            this.onShow();
        };
        /**
         * cid
         * title
         * role 100创始人
         * cnt 总人数
         * currcnt 当前人数
         * gcnt 比赛数
         */
        /**
        * 开启监听，配置宽高，添加到舞台
        */
        MyClubCtrl.prototype.onShow = function () {
            _super.prototype.onShow.call(this);
            club.ClubManager.getInfo(this._myClub.cid);
            this.boxCreateVis = false;
            this._ui._btnCreateTab1.visible = true;
            this._ui._btnCreateTab2.visible = false;
            this._ui._listGames.array = [];
            this._ui._listResults.array = [];
            this._ui._labDiamond.text = "";
            this._ui._labTitle.text = this._ui._labClubTitle.text = this._myClub.title;
            this._ui._labMember.text = StringUtils.format(GameConfig.language.club_search_2, this._myClub.currmem ? this._myClub.currmem : 0, this._myClub.maxmem ? this._myClub.maxmem : 0);
            this._ui._btnRecharge.visible = this._ui._labDiamond.visible = club.ClubManager.isCreator(this._myClub.role);
            if (this.lastGInfo) {
                this._ui._btnTab1.visible = false;
                this._ui._btnTab2.visible = true;
            }
            else {
                this._ui._btnTab1.visible = true;
                this._ui._btnTab2.visible = false;
            }
            this.checkTab();
            this.checkCreateTab();
        };
        /**
         * 离开时调度
         */
        MyClubCtrl.prototype.afterShow = function () {
            _super.prototype.afterShow.call(this);
            Laya.timer.clear(this, this.onRefreshGameList);
            club.ClubManager.removeGames(this._myClub.cid);
            club.ClubManager.removeResults(this._myClub.cid);
        };
        MyClubCtrl.prototype.onTouch = function (e) {
            switch (e.currentTarget) {
                case this._ui._btnTab1:
                    this._ui._btnTab1.visible = false;
                    this._ui._btnTab2.visible = true;
                    this.checkTab();
                    e.stopPropagation();
                    break;
                case this._ui._btnTab2:
                    this._ui._btnTab1.visible = true;
                    this._ui._btnTab2.visible = false;
                    this.checkTab();
                    e.stopPropagation();
                    break;
                case this._ui._btnCreateTable:
                    this.boxCreateVis = true;
                    e.stopPropagation();
                    break;
                case this._ui._btnSetup:
                    club.ClubInfoCtrl.instance.show(this._myClub.cid);
                    e.stopPropagation();
                    break;
                case this._ui._btnRecharge:
                    club.ClubRecharge.instance.show(this._myClub.cid);
                    e.stopPropagation();
                    break;
                case this._ui._btnCreateTab1:
                    this._ui._btnCreateTab1.visible = false;
                    this._ui._btnCreateTab2.visible = true;
                    this.checkCreateTab();
                    e.stopPropagation();
                    break;
                case this._ui._btnCreateTab2:
                    this._ui._btnCreateTab1.visible = true;
                    this._ui._btnCreateTab2.visible = false;
                    this.checkCreateTab();
                    e.stopPropagation();
                    break;
                case this._ui._boxMask:
                    this.boxCreateVis = false;
                    break;
            }
        };
        MyClubCtrl.prototype.onCreateTouch = function (e) {
            var index = this._btns.indexOf(e.currentTarget);
            if (index != -1) {
                if (this._ui._btnCreateTab1.visible) {
                    CreateTableCtrl.instance.show(String(this._games[index]), GameDef.showGames[String(this._games[index])], this._myClub.cid, this._myClub.paytype);
                }
                else {
                    matchSign.MatchSignCreateCtrl.instance.show(this._games[index], GameDef.showGames[String(this._games[index])], this._myClub.cid, this._myClub.paytype);
                }
                this.boxCreateVis = false;
            }
            e.stopPropagation();
        };
        Object.defineProperty(MyClubCtrl.prototype, "boxCreateVis", {
            set: function (value) {
                this._ui._boxCreate.visible = this._ui._boxMask.visible = value;
                if (value)
                    this.showCreate();
                else
                    Laya.Tween.clearTween(this._ui._boxCreate);
            },
            enumerable: true,
            configurable: true
        });
        MyClubCtrl.prototype.showCreate = function () {
            this._ui._boxCreate.bottom = -this._ui._boxCreate.height;
            Laya.Tween.to(this._ui._boxCreate, { bottom: 0, }, 150);
        };
        MyClubCtrl.prototype.checkTab = function () {
            if (this._ui._btnTab1.visible) {
                this._currentTag = 0;
                this._ui._listGames.visible = true;
                this._ui._listResults.visible = this._ui._boxDetail.visible = this._ui._btnBack.visible = this._ui._labNoResults.visible = false;
                club.ClubManager.getGameList(this._myClub.cid, 1);
                Laya.timer.loop(10 * 1000, this, this.onRefreshGameList);
            }
            else {
                this._ui._listGames.visible = this._ui._labNoGames.visible = false;
                this.currentTag = 1;
                club.ClubManager.getResultList(this._myClub.cid, 1);
                Laya.timer.clear(this, this.onRefreshGameList);
            }
        };
        MyClubCtrl.prototype.checkCreateTab = function () {
            var i;
            if (this._ui._btnCreateTab1.visible) {
                this._currentCreateTag = 0;
                for (i = 0; i < this._btns.length; i++) {
                    this._btns[i].visible = true;
                    this._btns[i].centerX = 160 * (i % 2 == 0 ? -1 : 1);
                }
            }
            else {
                this._currentCreateTag = 1;
                for (i = 0; i < this._btns.length; i++) {
                    this._btns[i].visible = this._matchs.indexOf(this._games[i]) != -1;
                    //临时代码
                    if (this._btns[i].visible)
                        this._btns[i].centerX = 0;
                }
            }
        };
        MyClubCtrl.prototype.onUpdateGameList = function (cid) {
            if (this._myClub.cid == cid) {
                if (this._myClub.games) {
                    this._ui._listGames.array = this._myClub.games;
                    if (this._myClub.games.length)
                        this._ui._labNoGames.visible = false;
                    else
                        this._ui._labNoGames.visible = this._ui._btnTab1.visible;
                }
                else {
                    this._ui._labNoGames.visible = this._ui._btnTab1.visible;
                }
            }
        };
        MyClubCtrl.prototype.onUpdateResultList = function (cid) {
            if (this._myClub.cid == cid) {
                if (this._myClub.results) {
                    this._ui._listResults.array = this._myClub.results;
                    if (this._myClub.results.length)
                        this._ui._labNoResults.visible = false;
                    else
                        this._ui._labNoResults.visible = this._ui._btnTab2.visible;
                }
                else {
                    this._ui._labNoResults.visible = this._ui._btnTab2.visible;
                }
                if (this.lastGInfo) {
                    if (this._dicDetail && this._dicDetail[this._lastGid])
                        this.showDetail(this._lastGid, this._lastGtype);
                    else {
                        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY, null, null, null, 5000);
                        webService.getHistoryNoraml(this._lastGid, this._lastGtype, this.onGetHistoryDetail.bind(this));
                    }
                    this.clearLastInfo();
                }
            }
        };
        /***渲染单元格时的回调方法***/
        MyClubCtrl.prototype.updateGameList = function (cell, index) {
            cell.updata();
        };
        MyClubCtrl.prototype.selectGameList = function (e, index) {
            var _this = this;
            if (e.type == Laya.Event.CLICK) {
                var code = this._ui._listGames.getItem(index).code;
                webService.joinTable(String(code), function (response) {
                    if (response.code == 0) {
                        GameConfig.setServerUrl(response.ip);
                        GameConfig.joinTable(response);
                    }
                    else {
                        AlertInGameCtrl.instance.show(GameConfig.language.room_not_exist, null, 0, false);
                        club.ClubManager.removeGame(_this._myClub.cid, code);
                    }
                });
            }
        };
        MyClubCtrl.prototype.onScrollGameChanged = function (e) {
            if (this._ui._listGames.scrollBar.value < 0)
                this._refreshGamesFirstPage = true;
            else if (this._ui._listGames.scrollBar.value > 0)
                this._refreshGamesFirstPage = false;
            if (this._refreshGamesFirstPage && this._ui._listGames.scrollBar.value == 0)
                club.ClubManager.getGameList(this._myClub.cid, 1, true);
            if (this._ui._listGames.scrollBar.value > this._ui._listGames.scrollBar.max)
                this._refreshGamesMore = true;
            else if (this._ui._listGames.scrollBar.value < this._ui._listGames.scrollBar.max)
                this._refreshGamesMore = false;
            if (this._refreshGamesMore && this._ui._listGames.scrollBar.value == this._ui._listGames.scrollBar.max)
                club.ClubManager.getGameList(this._myClub.cid);
        };
        /***渲染单元格时的回调方法***/
        MyClubCtrl.prototype.updateResultList = function (cell, index) {
            cell.updata(index);
        };
        /***选择单元格回调***/
        MyClubCtrl.prototype.selectResultList = function (e) {
            if (e.type == Laya.Event.CLICK) {
                var className = Laya.ClassUtils.getClass(e.target);
                if (e.target.name == "share") {
                }
                else if (e.target.name == "video") {
                    var gid = e.target.parent.dataSource.gid;
                    var gtype = e.target.parent.dataSource.gtype;
                    if (this._dicDetail[gid]) {
                        this.showDetail(gid, gtype);
                    }
                    else {
                        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY);
                        webService.getHistoryNoraml(gid, gtype, this.onGetHistoryDetail.bind(this));
                    }
                }
                else {
                    if (!GameConfig.IS_BANSHU) {
                        var gid = e.target.dataSource.gid;
                        var gtype = e.target.dataSource.gtype;
                        if (this._dicDetail[gid]) {
                            if (MatchConfig.isMatch(e.target.dataSource.gmode))
                                this.showMatchHistory(gid);
                            else
                                this.showDetail(gid, gtype);
                        }
                        else {
                            LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY);
                            if (MatchConfig.isMatch(e.target.dataSource.gmode))
                                webService.getHistoryMatch(gid, 1, gtype, e.target.dataSource.title, e.target.dataSource.tplayer, e.target.dataSource.ttime, e.target.dataSource.rank, this.onGetHistoryMatchDetail.bind(this));
                            else
                                webService.getHistoryNoraml(gid, gtype, this.onGetHistoryDetail.bind(this));
                        }
                    }
                }
            }
        };
        MyClubCtrl.prototype.onScrollResultChanged = function (e) {
            if (this._ui._listResults.scrollBar.value < 0)
                this._refreshResultsFirstPage = true;
            else if (this._ui._listResults.scrollBar.value > 0)
                this._refreshResultsFirstPage = false;
            if (this._refreshResultsFirstPage && this._ui._listResults.scrollBar.value == 0)
                club.ClubManager.getResultList(this._myClub.cid, 1);
            if (this._ui._listResults.scrollBar.value > this._ui._listResults.scrollBar.max)
                this._refreshResultsMore = true;
            else if (this._ui._listResults.scrollBar.value < this._ui._listResults.scrollBar.max)
                this._refreshResultsMore = false;
            if (this._refreshResultsMore && this._ui._listResults.scrollBar.value == this._ui._listResults.scrollBar.max)
                club.ClubManager.getResultList(this._myClub.cid);
        };
        /***渲染单元格时的回调方法***/
        MyClubCtrl.prototype.updateDetailList = function (cell, index) {
            cell.updata();
        };
        /***选择单元格回调***/
        MyClubCtrl.prototype.selectDetailList = function (e, index) {
            if (e.type == Laya.Event.CLICK) {
                // goto播录像
                var vid;
                var gtype;
                if (e.target.name == "video") {
                    vid = e.target.parent.dataSource.vid;
                    gtype = e.target.parent.dataSource.gtype;
                }
                else {
                    vid = e.target.dataSource.vid;
                    gtype = e.target.dataSource.gtype;
                }
                LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY);
                var testPath = GameConfig.WEB_SERVICE_URL + "/history/video?vid=" + vid;
                Laya.loader.load(testPath, Laya.Handler.create(this, this.onGetVidoInfo, [gtype]), null, Laya.Loader.BUFFER);
                // webService.getVideoDetail(vid, gtype, this.onGetHistoryDetail.bind(this));
            }
        };
        MyClubCtrl.prototype.onGetVidoInfo = function (gtype, data) {
            LoadingUI.instance.hide();
            if (data) {
                if (String(gtype) == GameDef.GAME_TYPE.SHANXI_MJ || String(gtype) == GameDef.GAME_TYPE.WAKENG || String(gtype) == GameDef.GAME_TYPE.JINYUN_MJ || String(gtype) == GameDef.GAME_TYPE.SHISANSHUI) {
                    GameConfig.IS_MATCH = false;
                    AppControl.getInstance().showPage(GameConfig.getGamePage(GameDef.GAME_NAME[gtype - 1]), 1, String(gtype), data);
                }
            }
        };
        MyClubCtrl.prototype.onGetHistoryDetail = function (response, gid, gtype) {
            LoadingUI.instance.hide();
            if (response.code == 0) {
                if (!this._detailTotal)
                    this._detailTotal = {};
                if (this._detailTotal[gid])
                    return;
                if (!this._detailTotal[gid])
                    this._detailTotal[gid] = [];
                if (response.data) {
                    for (var i = 0; i < response.data.length; i++) {
                        var data = JSON.parse(response.data[i]);
                        data.gtype = gtype;
                        response.data[i] = data;
                        for (var k in data.ss) {
                            var v = data.ss[k];
                            if (!this._detailTotal[gid][k]) {
                                this._detailTotal[gid][k] = {
                                    "n": v.n,
                                    "s": v.s
                                };
                            }
                            else {
                                this._detailTotal[gid][k].s += v.s;
                            }
                        }
                    }
                }
                this._dicDetail[gid] = response.data;
                this.showDetail(gid, gtype);
            }
        };
        MyClubCtrl.prototype.onGetHistoryMatchDetail = function (response, gid, gtype, title, tplayer, ttime, rank) {
            LoadingUI.instance.hide();
            if (response.code == 0) {
                var data = { gid: gid, gtype: gtype, title: title, tplayer: tplayer, ttime: ttime };
                if (response.data)
                    data.list = response.data;
                this._dicDetail[gid] = { list: response.data, gid: gid, gtype: gtype, title: title, tplayer: tplayer, ttime: ttime, rank: rank, page: response.page, pageCnt: response.page_cnt };
                this.showMatchHistory(gid);
            }
        };
        MyClubCtrl.prototype.showDetail = function (gid, gtype) {
            this._lastGid = gid;
            this._lastGtype = gtype;
            this._ui._listDetail.array = this._dicDetail[gid];
            this._ui._luxiangname.skin = "createTable/" + gtype + ".png";
            this.currentTag = 2;
            this._ui._profit.removeChildren();
            var peace = this._ui._profit.width / this._detailTotal[gid].length;
            for (var k in this._detailTotal[gid]) {
                var v = this._detailTotal[gid][k];
                var name_1 = new Laya.Label(Utils.getFitNickName(v.n, 10));
                name_1.fontSize = 26;
                name_1.color = "#ffffff";
                name_1.align = "center";
                name_1.strokeColor = "#5c281f";
                name_1.stroke = 2;
                name_1.x = peace * parseInt(k) + peace / 2;
                name_1.y = 10;
                name_1.anchorX = 0.5;
                this._ui._profit.addChild(name_1);
                var text = new Laya.Label(String(v.s));
                text.align = "center";
                if (v.s >= 0) {
                    text.text = "+" + v.s;
                    text.font = "font_num_10";
                }
                else {
                    text.font = "font_num_9";
                }
                text.x = peace * parseInt(k) + peace / 2;
                text.y = 45;
                text.anchorX = 0.5;
                this._ui._profit.addChild(text);
            }
        };
        Object.defineProperty(MyClubCtrl.prototype, "currentTag", {
            set: function (value) {
                if (this._currentTag != value) {
                    this._currentTag = value;
                    if (this._currentTag == 1) {
                        this._ui._listResults.visible = true;
                        this._ui._boxDetail.visible = this._ui._btnBack.visible = false;
                    }
                    else {
                        this._ui._listResults.visible = false;
                        this._ui._boxDetail.visible = this._ui._btnBack.visible = true;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        MyClubCtrl.prototype.showMatchHistory = function (gid) {
            MatchHistoryCtrl.instance.show(this._dicDetail[gid]);
        };
        MyClubCtrl.prototype.onBack = function (e) {
            this.clearLastInfo();
            this.currentTag = 1;
        };
        MyClubCtrl.prototype.onUnauthorized = function (e) {
            this.clearLastInfo();
        };
        MyClubCtrl.prototype.clearLastInfo = function () {
            this._lastGid = 0;
            this._lastGtype = 0;
        };
        Object.defineProperty(MyClubCtrl.prototype, "lastGInfo", {
            get: function () {
                if (this._lastGid && this._lastGtype)
                    return true;
                else
                    return false;
            },
            enumerable: true,
            configurable: true
        });
        MyClubCtrl.prototype.onUpdateDiamond = function (cid) {
            if (this._myClub.cid == cid)
                this._ui._labDiamond.text = this._myClub.diamond + "";
        };
        MyClubCtrl.prototype.onRenameSucc = function (cid) {
            if (this._myClub.cid == cid)
                this._ui._labTitle.text = this._ui._labClubTitle.text = this._myClub.title;
        };
        MyClubCtrl.prototype.onQuitSucc = function (cid) {
            if (this._myClub.cid == cid)
                this.hide();
        };
        MyClubCtrl.prototype.onDeleteSucc = function (cid) {
            if (this._myClub.cid == cid)
                this.hide();
        };
        MyClubCtrl.prototype.onKickOutSucc = function (cid, uid) {
            if (this._cid == cid)
                this._ui._labMember.text = StringUtils.format(GameConfig.language.club_search_2, this._myClub.currmem ? this._myClub.currmem : 0, this._myClub.maxmem ? this._myClub.maxmem : 0);
        };
        MyClubCtrl.prototype.onRechargeSucc = function (cid) {
            if (this._cid == cid)
                this._ui._labDiamond.text = this._myClub.diamond;
        };
        MyClubCtrl.prototype.onCreateSucc = function () {
            this.onRefreshGameList();
        };
        MyClubCtrl.prototype.onRefreshGameList = function () {
            if (this._ui._btnTab1.visible)
                club.ClubManager.getGameList(this._myClub.cid, 1);
        };
        return MyClubCtrl;
    }(BaseCtrl));
    club.MyClubCtrl = MyClubCtrl;
})(club || (club = {}));
//# sourceMappingURL=MyClubCtrl.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole
 * 我的俱乐部Renderer
*/
var club;
(function (club) {
    var MyClubListRenderer = /** @class */ (function (_super) {
        __extends(MyClubListRenderer, _super);
        function MyClubListRenderer() {
            return _super.call(this) || this;
        }
        /**
     * cid
     * title
     * role 100创始人
     * cnt 总人数
     * currcnt 当前人数
     * gcnt 比赛数
     */
        MyClubListRenderer.prototype.updata = function () {
            this._labId.text = StringUtils.format(GameConfig.language.club_search_1, this.dataSource.cid);
            this._labTitle.text = this._dataSource.title;
            this._labMember.text = StringUtils.format(GameConfig.language.club_search_2, this.dataSource.currmem ? this.dataSource.currmem : 0, this.dataSource.maxmem ? this.dataSource.maxmem : 0);
            this._labCount.text = StringUtils.format(GameConfig.language.club_game_1, this.dataSource.gcnt ? this.dataSource.gcnt : 0);
            this._imgOwner.visible = club.ClubManager.isCreator(this.dataSource.role);
        };
        return MyClubListRenderer;
    }(ui.club.MyClubListRendererUI));
    club.MyClubListRenderer = MyClubListRenderer;
})(club || (club = {}));
//# sourceMappingURL=MyClubListRenderer.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* @author seacole;
*/
var LineRenderer = /** @class */ (function (_super) {
    __extends(LineRenderer, _super);
    function LineRenderer() {
        return _super.call(this) || this;
    }
    LineRenderer.prototype.init = function (effectData) {
        if (!this._images) {
            this._images = [];
            for (var i = 1; i <= 5; i++) {
                var img = new Laya.Image(effectData.url + i + ".png");
                img.anchorY = 0.5;
                if (effectData.blendMode)
                    img.blendMode = "lighter";
                this._images.push(img);
            }
        }
        this.setInfo(effectData.posX, effectData.posY, effectData.toPosX, effectData.toPosY);
        this._index = effectData.index;
        this.play();
        Laya.timer.once(effectData.duation, this, this.hide);
    };
    LineRenderer.prototype.setInfo = function (cX, cY, eX, eY) {
        this.x = cX;
        this.y = cY;
        var mX = eX - cX;
        var mY = eY - cY;
        this._ro = MathUtils.radiusToAngle(Math.atan(mY / mX));
        if (mX == 0) {
            if (mY < 0)
                this._ro = 90;
            else
                this._ro = -90;
        }
        else if (mY == 0) {
            if (mX > 0)
                this._ro = 0;
            else
                this._ro = -180;
        }
        else {
            if (mX < 0 && mY > 0)
                this._ro = 180 + this._ro;
            else if (mX < 0 && mY < 0)
                this._ro = -180 + this._ro;
        }
        this._imgWidth = Math.sqrt(mX * mX + mY * mY);
    };
    LineRenderer.prototype.play = function () {
        this.removeChildren();
        for (var i = 0; i < this._images.length; i++) {
            this._images[i].visible = false;
            this._images[i].rotation = this._ro;
            this._images[i].width = this._imgWidth;
            this.addChild(this._images[i]);
        }
        this._currentFrame = 0;
        Laya.timer.frameLoop(2, this, this.onFrame);
    };
    LineRenderer.prototype.onFrame = function () {
        this._images[this.perFrame()].visible = false;
        this._images[this._currentFrame].visible = true;
        this._currentFrame = this.nextFrame();
    };
    LineRenderer.prototype.perFrame = function () {
        if (this._currentFrame > 0)
            return this._currentFrame - 1;
        else
            return this._images.length - 1;
    };
    LineRenderer.prototype.nextFrame = function () {
        if (this._currentFrame >= (this._images.length - 1))
            return 0;
        else
            return this._currentFrame + 1;
    };
    Object.defineProperty(LineRenderer.prototype, "index", {
        get: function () {
            return this._index;
        },
        enumerable: true,
        configurable: true
    });
    LineRenderer.prototype.hide = function () {
        Laya.timer.clear(this, this.onFrame);
        Laya.timer.clear(this, this.hide);
        Dispatcher.dispatch(EventNames.REMOVE_LINE_RENDERER, [this]);
    };
    return LineRenderer;
}(Laya.Sprite));
//# sourceMappingURL=LineRenderer.js.map
/**
 * @author seacole
 * 交互类
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Native = /** @class */ (function (_super) {
    __extends(Native, _super);
    function Native() {
        var _this = _super.call(this) || this;
        _this._dicCall = {};
        _this.batteryLevel = 100;
        _this.batteryState = 0;
        return _this;
        // this.bridge = Bridge.getInstance();
        // SystemLog.getInstance().log('Bridge.enabled: ' + this.bridge.enabled);
        // egret.ExternalInterface.addCallback('nativeCall', this.nativeCall.bind(this));
    }
    Object.defineProperty(Native, "instance", {
        // private bridge:Bridge;
        get: function () {
            if (this._instance == undefined) {
                this._instance = new Native();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    /**
   * 获取设备唯一ID
   * @param callback
   * @param prefix
   * @param makeNew
   */
    Native.prototype.getDeviceUUID = function (callback, prefix, makeNew) {
        if (makeNew === void 0) { makeNew = false; }
        // if (this.isNative) {
        // 	this.call('getDeviceUUID', { makeNew }, callback);
        // } else {
        var uuid = localStorage.getItem('uuid');
        if (makeNew || !uuid) {
            uuid = StringUtils.makeRandomString(32);
            localStorage.setItem('uuid', uuid);
        }
        callback({ uuid: uuid });
        // }
    };
    Object.defineProperty(Native.prototype, "isNative", {
        get: function () {
            return Laya.Browser.window.conchConfig;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 直接调用native方法
     * @param method
     * @param params
     * @param callback
     */
    Native.call = function (method, params, callback) {
        if (params === void 0) { params = null; }
        if (callback === void 0) { callback = null; }
        this.instance.call(method, params, callback);
    };
    /**
     * 直接调用native方法
     * @param method
     * @param args
     * @param callback
     */
    Native.prototype.call = function (method, args, callback) {
        if (args === void 0) { args = null; }
        if (callback === void 0) { callback = null; }
        args = args || {};
        var params = {
            id: StringUtils.makeRandomIntString(10),
            method: method,
            args: args
        };
        if (callback) {
            this._dicCall[params.id] = callback;
        }
        // __JS__("alert('aaa')");
        // egret.ExternalInterface.call('egretCall', JSON.stringify(params));
    };
    Native.prototype.getUrlParams = function () {
        var params = {};
        var href = Laya.Browser.window.location.href;
        var index = href.indexOf("?");
        if (index < 0) {
            return params;
        }
        var hashes = href.substr(index + 1).split('&');
        for (var i = 0; i < hashes.length; i++) {
            var arr = hashes[i].split('=');
            params[arr[0]] = arr[1];
        }
        log(params);
        return params;
    };
    Object.defineProperty(Native.prototype, "isWeiXin", {
        get: function () {
            var ua = window.navigator.userAgent.toLowerCase();
            if (ua.indexOf('micromessenger') != -1) {
                return true;
            }
            else {
                return false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Native.prototype.getIOSType = function (callback) {
        if (Native.instance.isNative) {
            var osname = Laya.Browser.window.conchConfig.getOS();
            if (osname == "Conch-ios") {
                NativeHelper.instance.getBundleID(function (bundleID) {
                    bundleID = bundleID.toLowerCase();
                    if (bundleID.indexOf("inhouse") == -1)
                        Native.instance.iosBundleID = OSConfig.IOS_NATIVE_STORE;
                    else
                        Native.instance.iosBundleID = OSConfig.IOS_NATIVE_INHOUSE;
                    callback();
                });
            }
            else
                callback();
        }
        else
            callback();
    };
    Object.defineProperty(Native.prototype, "OS", {
        /**
         * return iOS1,andorid2,其他3
         */
        get: function () {
            if (Native.instance.isNative) {
                var osname = Laya.Browser.window.conchConfig.getOS();
                if (osname == "Conch-ios")
                    return Native.instance.iosBundleID > 0 ? Native.instance.iosBundleID : OSConfig.IOS_NATIVE_STORE;
                else if (osname == "Conch-android")
                    return OSConfig.ANDROID_NATIVE;
                else
                    return OSConfig.UNKNOWN;
            }
            else {
                var u = Laya.Browser.window.navigator.userAgent;
                var isAndroid = u.indexOf('Android') > -1 || u.indexOf('Adr') > -1; //android终端
                var isiOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端
                if (isiOS)
                    return OSConfig.IOS_WEB;
                else if (isAndroid)
                    return OSConfig.ANDROID_WEB;
                else
                    return OSConfig.OTHERS_WEB;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Native.prototype, "isIOS", {
        get: function () {
            return Laya.Browser.window.conchConfig && Laya.Browser.window.conchConfig.getOS() == "Conch-ios";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Native.prototype, "isAndroid", {
        get: function () {
            return Laya.Browser.window.conchConfig && Laya.Browser.window.conchConfig.getOS() == "Conch-android";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 设置Android的back键监听
     */
    Native.prototype.setAndroidBack = function () {
        if (Laya.Render.isConchApp) {
            if (Laya.Browser.window.conch && Laya.Browser.window.conch.setOnBackPressedFunction) {
                Laya.Browser.window.conch.setOnBackPressedFunction(function () {
                    // console.log('press back ' + n);
                    // if (n-- <= 0) {
                    // 	Laya.Browser.window.conch.exit();
                    // }
                });
            }
        }
    };
    /**
     * 获取当前网络状态
     */
    Native.prototype.getNet = function () {
        if (Native.instance.isNative) {
            var nType = Laya.Browser.window.conch.config.getNetworkType();
            // NET_NO = 0;
            // NET_WIFI = 1;
            // NET_2G = 2;
            // NET_3G = 3;
            // NET_4G = 4;
            // NET_UNKNOWN = 5
            if (nType == 1)
                return 1;
            else
                return 2;
        }
        else {
            if (Laya.Browser.window.navigator && Laya.Browser.window.navigator.connection && Laya.Browser.window.navigator.connection.type) {
                if (Laya.Browser.window.navigator.connection.type == "wifi")
                    return 1;
                else
                    return 2;
            }
            else
                return 2;
        }
    };
    Native.prototype.getMatchRankInfo = function (info, type, subTitle, des) {
        var link = GameConfig.GAME_URL + "agent/loadShare/index.html";
        var desc = "";
        var title = "";
        var imgUrl = GameConfig.WX_URL + "shareIcon/" + GameConfig.APPAREA + ".png";
        link += "?page=" + type + "&cmd=sharegame";
        link += "&pid=" + server.uid;
        // Base64.encode(text)
        if (type == 5) {
            link += "&info=" + info;
        }
        else {
            link += "&info=" + Base64.encode(info);
        }
        // link += "&info=" + Base64.encode(info)
        var data = matchSign.MatchSignData.getInfoByCode(matchSign.MatchSignData.currentMatchCode);
        var text = "";
        if (data) {
            if (data.gamemode >= 160) {
                text = "钻石赛";
            }
            else if (data.gamemode >= 150) {
                text = "官方赛";
            }
            else if (data.gamemode >= 100) {
                text = "比赛";
            }
        }
        title += StringUtils.format(GameConfig.language.share_3, GameConfig.language.share_game_name[BaseGameData.gameType] + text) + subTitle;
        desc += des;
        // alert(desc); 
        return { link: link, desc: desc, title: title, imgUrl: imgUrl };
    };
    /**
     * 分享
     * @param type 1 房号 2 截屏 3 战绩
     * @param pos 0 好友 1 朋友圈
     * @param title 主标题
     * @param subTitle 副标题
     */
    Native.prototype.share = function (type, pos, title, subTitle, info) {
        if (type === void 0) { type = 1; }
        if (pos === void 0) { pos = 0; }
        if (title === void 0) { title = ""; }
        if (subTitle === void 0) { subTitle = ""; }
        if (Native.instance.isNative) {
            var imgUrl;
            //分享房号
            if (type == 1) {
                var data = Native.instance.getShareInfo(); //{link,desc,title,imgUrl}
                // alert("result11");
                // Laya.loader.load([{ url: "wx/shareIcon/icon.png", type: Laya.Loader.IMAGE }], Laya.Handler.create(this, (a) => {
                // 	var arrayBuff = Laya.loader.getRes("wx/shareIcon/icon.png");
                // 	Laya.Browser.window.conch.saveAsPng(arrayBuff, 131, 131, "wx/shareIcon/icon.png");
                // 	NativeHelper.instance.wxShareWebPage(pos, data.link, Laya.Browser.window.conch.getCachePath() + "/shareicon.png", data.title, data.desc, function (result) {
                // 		alert("result");
                // 	});
                // }));
                // alert(JSON.stringify(data));
                NativeHelper.instance.wxShareWebPage(pos, data.link, "", data.title, data.desc, function (result) {
                });
            }
            else if (type == 3 || type == 4) {
                var data_1 = Native.instance.getMatchRankInfo(info, type, title, subTitle);
                NativeHelper.instance.wxShareWebPage(pos, data_1.link, "", data_1.title, data_1.desc, function (result) {
                });
            }
            //分享截屏
            else {
                Laya.Browser.window.conch.captureScreen(function (arrayBuff, width, height) {
                    // alert(Laya.Browser.window.conch.getCachePath());
                    //存储文件的方式
                    Laya.Browser.window.conch.saveAsPng(arrayBuff, width, height, Laya.Browser.window.conch.getCachePath() + "/share.png");
                    Laya.Browser.window.globalImage = window.document.createElement("img");
                    Laya.Browser.window.globalImage.onload = function () {
                        // ...使用image对象
                    };
                    Laya.Browser.window.globalImage.src = "file:///" + Laya.Browser.window.conch.getCachePath() + "/share.png";
                    log("[SHARE] file:" + Laya.Browser.window.conch.getCachePath() + "/share.png");
                    NativeHelper.instance.wxShareImg(pos, Laya.Browser.window.conch.getCachePath() + "/share.png", function (result) {
                    });
                    //
                    // Laya.Browser.window.image = window.document.createElement("img");
                    // Laya.Browser.window.image.putImageData(arrayBuff, width, height);
                    //...使用image对象
                    // data/user/0/com.simjoys.h5gameapp//LayaCache//appCache
                });
            }
        }
        else {
            HintCtrl.instance.show(GameConfig.language.wx_share);
        }
    };
    /**
     * return {link,desc,title,imgUrl}
     */
    Native.prototype.getShareInfo = function () {
        var link = GameConfig.GAME_URL + "agent/loadShare/index.html";
        var desc = "";
        var title = "";
        var imgUrl = GameConfig.WX_URL + "shareIcon/" + GameConfig.APPAREA + ".png";
        if (server.code) {
            link += "?page=1&cmd=sharegame&gamearea=" + GameConfig.APPAREA + "&roomcode=" + server.code + "&game_rule=" + GameConfig.DESC[server.code] + "&gametype=" + BaseGameData.gameType;
            var matchRule = matchSign.MatchSignData.getMatchShareDesc(Number(server.code));
            var tmp = GameConfig.DESC[server.code];
            if (matchRule) {
                var data = matchSign.MatchSignData.getInfoByCode(parseInt(server.code));
                var text = "比赛";
                desc = matchRule;
                if (data) {
                    if (data.gamemode >= 160) {
                        text = "钻石赛";
                        desc = "精彩赛事不间断，可赢得钻石奖励！快来参与吧！";
                    }
                    else if (data.gamemode >= 150) {
                        text = "官方赛";
                    }
                }
                title += StringUtils.format(GameConfig.language.share_2, GameConfig.language.share_game_name2[BaseGameData.gameType] + text, server.code);
                link += "&match_rule=" + matchRule;
            }
            else {
                title += StringUtils.format(GameConfig.language.share_2, GameConfig.language.share_game_name[BaseGameData.gameType], server.code);
                if (tmp)
                    desc += tmp + ",就等你来嗨！";
            }
            link += "&pid=" + server.uid;
            link = encodeURI(link);
        }
        else {
            link += "?page=2&cmd=sharegame&gamearea=" + GameConfig.APPAREA;
            link += "&pid=" + server.uid;
            title += StringUtils.format(GameConfig.language.share_1, GameConfig.APPNAME);
            desc += GameConfig.APPDESC;
        }
        // alert(desc); 
        return { link: link, desc: desc, title: title, imgUrl: imgUrl };
    };
    Native.prototype.iapSetVerifyUrl = function (url) {
        if (this.OS != OSConfig.IOS_NATIVE_STORE) {
            return;
        }
        var call = Laya.PlatformClass.createClass("IAPManager");
        call.call("setVerifyUrl:", url);
    };
    Native.prototype.iapRecharge = function (id, pkey) {
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_ATONCE, null, null, null, 30000);
        webService.rechagre(id, "", function (response) {
            if (response.code != 0 || response.data == null || response.data.product_id == null || response.data.order_id == null) {
                LoadingUI.instance.hide();
                Native.instance.shopOrderFail(response.code, response.message);
            }
            else {
                var str = JSON.stringify({ product_id: pkey, order_id: response.data.order_id });
                var call = Laya.PlatformClass.createClass("IAPManager");
                call.callWithBack(function (result) {
                    if (result == 0) {
                        GameLogic.selfData.getInfo(true);
                        AlertInGameCtrl.instance.show("充值成功", null, 0, false);
                    }
                    else if (result == 100) {
                        AlertInGameCtrl.instance.show("充值失败", null, 0, false);
                    }
                    else if (result == 99) {
                        AlertInGameCtrl.instance.show("参数错误", null, 0, false);
                    }
                    else if (result == 98) {
                        AlertInGameCtrl.instance.show("当前环境无法支付", null, 0, false);
                    }
                    else if (result == 97) {
                        AlertInGameCtrl.instance.show("获取商店商品信息失败", null, 0, false);
                    }
                    else if (result == 96) {
                        AlertInGameCtrl.instance.show("充值失败", null, 0, false);
                    }
                    else if (result == 1) {
                        AlertInGameCtrl.instance.show("验证订单失败，请稍后再试", null, 0, false);
                    }
                    else {
                        AlertInGameCtrl.instance.show("充值失败", null, 0, false);
                    }
                    LoadingUI.instance.hide();
                }, "iapRecharge:", str);
            }
        });
    };
    /**
     * 充值
     * @param id 商品id
     */
    Native.prototype.recharge = function (id, pkey) {
        //测试
        //this.iapRecharge(id);
        var _this = this;
        var cburl = GameConfig.GAME_URL + "index.html";
        if (server.code)
            cburl += "?share_room=" + server.code;
        if (Native.instance.isNative) {
            if (this.OS == OSConfig.IOS_NATIVE_STORE) {
                this.iapRecharge(id, pkey);
            }
            else {
                webService.rechagre(id, "", function (response) {
                    if (response.code == 0) {
                        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_ATONCE, null, null, null, 2000);
                        var l = 0;
                        var t = 0;
                        var w = window.innerWidth - l * 2;
                        var h = window.innerHeight - t * 2;
                        // Laya.Browser.window.conch.setExternalLinkEx(response.data.payInfo, l, t, w, h, true);
                        // Laya.Browser.window.conch.hideWebview();
                        console.info(response.data);
                        NativeHelper.instance.wxPay(function (code) {
                            if (code.length > 0) {
                                LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY);
                                // GameLogic.selfData.startQuery();
                                // alert("充值成功");
                                HintCtrl.instance.show("支付成功");
                                // console.log("")
                                // webService.loginByWxFromWechat(code, this.onVerifyResponse.bind(this));
                            }
                            else {
                                HintCtrl.instance.show("微信支付失败");
                            }
                        }.bind(_this), response.data);
                        // NativeHelper.instance.openURL(response.data.payInfo)
                        localStorage.setItem(GameLogic.selfData.uid + GameConfig.CP_TRAN_NO, response.data.order_id);
                        GameLogic.selfData.startQuery();
                    }
                    else {
                        Native.instance.shopOrderFail(response.code, response.message);
                    }
                });
            }
        }
        else {
            if (Native.instance.isWeiXin) {
                webService.rechagre(id, "", function (response) {
                    if (response.code == 0) {
                        Native.instance.onBridgeReady(response.data.payInfo, response.data.order_id);
                        // Native.instance.showIframe(response.data.payInfo);
                        // localStorage.setItem(GameLogic.selfData.uid+GameConfig.CP_TRAN_NO, response.data.cpTranNo);
                        // Laya.Browser.window.location.href = response.data.payInfo;
                    }
                    else
                        Native.instance.shopOrderFail(response.code, response.message);
                });
            }
            //不在微信浏览器
            else {
                webService.rechagre(id, cburl, function (response) {
                    if (response.code == 0) {
                        // Native.instance.showIframe(response.data.payInfo);
                        localStorage.setItem(GameLogic.selfData.uid + GameConfig.CP_TRAN_NO, response.data.order_id);
                        Laya.Browser.window.location.href = response.data.payInfo;
                    }
                    else
                        Native.instance.shopOrderFail(response.code, response.message);
                });
            }
        }
    };
    Native.prototype.shopOrderFail = function (code, msg) {
        if (msg === void 0) { msg = ""; }
        //AlertInGameCtrl.instance.show(StringUtils.format(GameConfig.language.shop_order_fail, code), null, 0, false);
        AlertInGameCtrl.instance.show(StringUtils.format(msg, code), null, 0, false);
    };
    // private showIframe(url: string): void {
    // 	var iframe = laya.utils.Browser.window.document.getElementById('recharge_iframe');
    // 	if (iframe) {
    // 		if (iframe.parentNode)
    // 			iframe.parentNode.removeChild(iframe);
    // 		return;
    // 	}
    // 	iframe = laya.utils.Browser.window.document.createElement('iframe');
    // 	iframe.id = "recharge_iframe";
    // 	iframe.setAttribute('src', url);
    // 	iframe.setAttribute('frameborder', 0);
    // 	var body = laya.utils.Browser.window.document.getElementsByTagName("body")[0];
    // 	body.appendChild(iframe);
    // 	//适配处理
    // 	var frameWidth = AppControl.getInstance().stage.width - 40;
    // 	var frameHeight = AppControl.getInstance().stage.height - 40;
    // 	// var styleStr = "position: absolute; left: 20px; top: 20px; z-index: 100009;";//laya 的index是100000
    // 	var styleStr = "position: absolute; left:5%; top:5%; z-index: 100009;";//laya 的index是100000
    // 	iframe.setAttribute('width', "90%");
    // 	iframe.setAttribute('height', "90%");
    // 	iframe.setAttribute('style', styleStr);
    // }
    /**
    * 充值 微信公众号
    */
    Native.prototype.rechargeInWXMP = function (response, cpTranNo) {
        Laya.Browser.window.WeixinJSBridge.invoke('getBrandWCPayRequest', {
            "appId": response.appId,
            "timeStamp": response.timeStamp,
            "nonceStr": response.nonceStr,
            "package": response.package,
            "signType": response.signType,
            "paySign": response.paySign //微信签名 
        }, function (res) {
            if (res.err_msg == "get_brand_wcpay_request:ok") {
                localStorage.setItem(GameLogic.selfData.uid + GameConfig.CP_TRAN_NO, cpTranNo);
                GameLogic.selfData.startQuery();
                alert("充值成功");
            }
            else if (res.err_msg == "get_brand_wcpay_request:cancel") {
                //                alert("");
            }
            else if (res.err_msg == "get_brand_wcpay_request:fail") {
                // alert("充值失败");
            } // 使用以上方式判断前端返回,微信团队郑重提示：res.err_msg将在用户支付成功后返回    ok，但并不保证它绝对可靠。 
            //	           window.location.href = url;
        });
    };
    Native.prototype.onBridgeReady = function (response, cpTranNo) {
        if (typeof Laya.Browser.window.WeixinJSBridge == "undefined") {
            if (Laya.Browser.document.addEventListener) {
                Laya.Browser.document.addEventListener('WeixinJSBridgeReady', function () {
                    Native.instance.rechargeInWXMP(response, cpTranNo);
                }, false);
            }
            else if (Laya.Browser.document.attachEvent) {
                Laya.Browser.document.attachEvent('WeixinJSBridgeReady', function () {
                    Native.instance.rechargeInWXMP(response, cpTranNo);
                });
                Laya.Browser.document.attachEvent('onWeixinJSBridgeReady', function () {
                    Native.instance.rechargeInWXMP(response, cpTranNo);
                });
            }
        }
        else {
            Native.instance.rechargeInWXMP(response, cpTranNo);
        }
    };
    /**
     * 检查版本更新
     */
    Native.prototype.checkUpdata = function () {
        var _this = this;
        if (Native.instance.isNative) {
            webService.checkUpdata(function (response) {
                // alert(JSON.stringify(response));
                if (response.code == 0 && response.hasOwnProperty("newver") && response.hasOwnProperty("url")) {
                    Laya.timer.clear(_this, _this.checkUpdata);
                    if (server.code) {
                        _this._hasNewVersion = true;
                        _this._newver = response.newver;
                        _this._newverurl = response.url;
                        _this._newTips = response.tips;
                    }
                    else
                        UpdateCtrl.instance.show(response.newver, response.url, response.tips);
                }
                else
                    Laya.timer.once(30 * 60 * 1000, _this, _this.checkUpdata);
            });
        }
    };
    /**
     * 已有更新情况下，在大厅弹出
     */
    Native.prototype.checkNewVer = function () {
        if (Native.instance.isNative) {
            if (this._hasNewVersion)
                UpdateCtrl.instance.show(this._newver, this._newverurl, this._newTips);
        }
    };
    /**
     * 设置电池信息回调
     *
     * @author DB
     * @param {Function} callback
     * @memberof NativeHelper
     */
    Native.prototype.setBatteryCallback = function (callback) {
        if (callback === void 0) { callback = null; }
        if (Native.instance.isNative)
            NativeHelper.instance.setBatteryCallback(Native.instance.onBatteryChanged);
    };
    Native.prototype.setGroundCallback = function (callback) {
        if (callback === void 0) { callback = null; }
        if (Native.instance.isNative)
            NativeHelper.instance.setGroundCallback(Native.instance.onEnterBackGround);
    };
    Native.prototype.onEnterBackGround = function (isEnterBackGround) {
        if (isEnterBackGround) {
            SoundManager.instance.stopMusic();
            if (!TableEndCtrl.instance.parent && !TableEndShuCtrl.instance.parent && !DialogManager.instance.hasDialog("MATCH_OVER") &&
                !DialogManager.instance.hasDialog("MATCH_OUT_WIN") && !DialogManager.instance.hasDialog("MATCH_OUT_LOSE")) {
                server.close();
            }
        }
        else {
            SoundManager.instance.playBg("bg1");
            if (!TableEndCtrl.instance.parent && !TableEndShuCtrl.instance.parent && !DialogManager.instance.hasDialog("MATCH_OVER") &&
                !DialogManager.instance.hasDialog("MATCH_OUT_WIN") && !DialogManager.instance.hasDialog("MATCH_OUT_LOSE")) {
                server.reconnect();
            }
        }
    };
    /**
     *
     * @param state 电量改变
     * @param level
     */
    Native.prototype.onBatteryChanged = function (state, level) {
        if (state != -1 && level != -1) {
            Native.instance.batteryLevel = level;
            Native.instance.batteryState = state;
        }
        Dispatcher.dispatch(EventNames.BATTERY_CHANGE, [Native.instance.batteryState, Native.instance.batteryLevel]);
    };
    /**
     * 注册语音状态回调
     */
    Native.prototype.voiceMemberVoiceCallback = function () {
        NativeHelper.instance.voiceMemberVoiceCallback(this.onMemberVoice);
    };
    /**
     * 玩家语音状态发生变化
     * @param {number} memberID 玩家 id
     * @param {number} status 0:停止说话 1:开始说话 2:继续说话 98取消禁言 99禁言
     * @param {string} roomName  所在房间名
     */
    Native.prototype.onMemberVoice = function (memberID, status, roomName) {
        Dispatcher.dispatch(EventNames.VOICE_CHANGE, [memberID, status, roomName]);
    };
    /**
    * 屏蔽玩家语音
    * @param {string} roomName
    * @param {number} memberID
    * @param {number} enable 0 禁言 1不禁言
    * @param {Function} callback
    */
    Native.prototype.voiceForbidMemberVoice = function (roomName, memberID, enable, callback) {
        LoadingUI.instance.show(LoadingUI.TYPE_NO_BG_DELAY);
        NativeHelper.instance.voiceForbidMemberVoice(roomName, memberID, enable, function (code) {
            if (code == 0) {
                if (enable) {
                    // HintCtrl.instance.show("禁言成功")
                    Dispatcher.dispatch(EventNames.VOICE_CHANGE, [memberID, 99, roomName]);
                }
                else {
                    // HintCtrl.instance.show("取消禁言成功")
                    Dispatcher.dispatch(EventNames.VOICE_CHANGE, [memberID, 98, roomName]);
                }
                callback();
            }
            LoadingUI.instance.hide();
        });
    };
    Native.prototype.deepLinkCallback = function () {
        //native网页跳转参数
        NativeHelper.instance.deepLinkCallback(function (json, url) {
            try {
                var response = JSON.parse(json); //https://auhblo.mlinks.cc/AduS?code=123456&cmd=sharegame&pid=123456                
            }
            catch (error) {
            }
            if (response.hasOwnProperty("pid")) {
                GameConfig.pid = response.pid;
                webService.getUserInfo(server.uid, function (response) { });
            }
            if (response.hasOwnProperty("roomcode") && response.hasOwnProperty("cmd") && Number(response.roomcode) > 0) {
                if (response.cmd == "sharegame") {
                    if (server.code) {
                        if (server.code != response.roomcode)
                            AlertInGameCtrl.instance.show(StringUtils.format(GameConfig.language.already_in_room, response.roomcode), null, 0, false);
                    }
                    else {
                        LoginManager.instance.roomcode = response.roomcode;
                        LoginManager.instance.checkJoinTable();
                    }
                }
            }
        });
    };
    Native.prototype.gotoDownload = function () {
        var url = GameConfig.GAME_URL + "agent/loadShare/index.html?gamearea=" + GameConfig.APPAREA;
        Laya.Browser.window.location.href = url;
    };
    return Native;
}(Laya.EventDispatcher));
//# sourceMappingURL=Native.js.map
/**
* @author seacole
* 程序入口
*/
var LayaAir3D = /** @class */ (function () {
    function LayaAir3D() {
        // layacmd resourceVersion -i res -o . -n 1.0.0
        /**
         * 版本管理
         */
        this._manifestUrl = "manifest.json?" + Math.random();
        //初始化引擎
        // Laya3D.init(960, 640, true);
        Laya.init(TableLayout.STAGE.width, TableLayout.STAGE.height, Laya.WebGL);
        Laya.stage.bgColor = "#ffffff";
        log("width" + Laya.stage.width);
        log("height" + Laya.stage.height);
        // Laya.init(960,640,Laya.WebGL);
        //适配模式
        // Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_HEIGHT;
        Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_WIDTH;
        Laya.stage.screenMode = Laya.Stage.SCREEN_HORIZONTAL;
        //DEBUG信息
        // Laya.Stat.show();
        if (Laya.Browser.window.conchConfig)
            NativeHelper.instance.init();
        Native.instance.getDeviceUUID(function (args) {
            webService.uuid = args.uuid;
            log(args);
        }, "");
        AppControl.getInstance().start(Laya.stage);
        Dispatcher.init();
        AppControl.getInstance().AppStage.registUnauthorized();
        this.loadManifest();
        // if (Laya.Browser.window.loadingView) {
        //     Laya.Browser.window.conch.showLoadingView(false);
        // }
    }
    LayaAir3D.prototype.loadManifest = function () {
        Laya.ResourceVersion.enable(this._manifestUrl, Laya.Handler.create(this, this.onLoadManifestComplete));
    };
    LayaAir3D.prototype.onLoadManifestComplete = function () {
        this.loadUrlConfig();
    };
    /**
     * 加载url配置信息
     */
    LayaAir3D.prototype.loadUrlConfig = function () {
        GameConfig.randomNum = Math.random();
        Laya.loader.load([{ url: ResourceConfig.URL_CONFIG, type: Laya.Loader.JSON }], Laya.Handler.create(this, this.onLoadUrlConfigComplete));
    };
    LayaAir3D.prototype.onLoadUrlConfigComplete = function () {
        GameConfig.getCfg();
        Reportor.instance.start();
        this.loadPreload();
    };
    /**
    * 加载Preload LOADING界面所需资源
    */
    LayaAir3D.prototype.loadPreload = function () {
        PreLoadingUI.instance.show([{ url: ResourceConfig.SHEET_PRELOAD, type: Laya.Loader.ATLAS }], PreLoadingUI.instance, PreLoadingUI.instance.onShowDetail);
        Dispatcher.on(EventNames.PRELOADING_FINISH, this, this.onLoadPreloadComplete);
    };
    /**
    * Preload加载完成
    */
    LayaAir3D.prototype.onLoadPreloadComplete = function () {
        var _this = this;
        log("prload load success");
        Dispatcher.off(EventNames.PRELOADING_FINISH, this, this.onLoadPreloadComplete);
        Native.instance.getIOSType(function () {
            _this.init();
            _this.loadCfg();
        });
    };
    /**
     * 各种初始化
     */
    LayaAir3D.prototype.init = function () {
        ProtoIDs.init();
        GameLogic.init();
        EffectManager.instance.init();
        FontManager.instance.init();
        MaskManager.instance.init();
        LineRendererManager.instance.init();
        View.regComponent("BaseButton", component.BaseButton);
        View.regComponent("ScaleButton", component.ScaleButton);
        View.regComponent("State4Button", component.State4Button);
        View.regComponent("BasePlayer", component.BasePlayer);
        NativeHelper.instance.wxSetAppId(GameConfig.WX_APPID);
        Native.instance.iapSetVerifyUrl(GameConfig.WEB_SERVICE_URL + "agent/public/notify/result?cid=1&channel=tongjiang");
    };
    /**
     * 加载配置文件。
     */
    LayaAir3D.prototype.loadCfg = function () {
        PreLoadingUI.instance.show([{ url: ResourceConfig.LANG, type: Laya.Loader.JSON }, { url: ResourceConfig.CONFIG_AUDIO, type: Laya.Loader.JSON },
            { url: ResourceConfig.CONFIG_GAME_LIST, type: Laya.Loader.JSON }, { url: ResourceConfig.BG_LOADING, type: Laya.Loader.IMAGE },
            { url: ResourceConfig.SHEET_LOADING, type: Laya.Loader.ATLAS }, { url: ResourceConfig.BG_MENU, type: Laya.Loader.IMAGE }], this, this.onLoadLangComplete);
    };
    /**
     * 语言包加载成功callback。
     */
    LayaAir3D.prototype.onLoadLangComplete = function () {
        log("lang load success");
        PreLoadingUI.instance.clearTime();
        GameConfig.init();
        this.onGetUrlComplete();
    };
    /**
    * URL配置加载完成
    */
    LayaAir3D.prototype.onGetUrlComplete = function () {
        this.ctrlRegister();
    };
    /**
    * control注册
    */
    LayaAir3D.prototype.ctrlRegister = function () {
        // var arrMenuPage = [{ url: ResourceConfig.SHEET_MENU, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_ICON, type: Laya.Loader.ATLAS }];
        // var arrLoginPage = [{ url: ResourceConfig.SHEET_LOGIN, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_TONGYONG, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_GAME_NAME, type: Laya.Loader.ATLAS }];
        // var arrTablePage = [{ url: ResourceConfig.SHEET_TABLE, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_GAME_LOGO, type: Laya.Loader.ATLAS },
        // { url: ResourceConfig.SHEET_CHAT, type: Laya.Loader.ATLAS }, { url: ResourceConfig.BG_TABLE, type: Laya.Loader.IMAGE },
        // { url: ResourceConfig.BITMAP_FONT_WAKENG1_JSON, type: Laya.Loader.JSON }, { url: ResourceConfig.BITMAP_FONT_WAKENG1_PNG, type: Laya.Loader.IMAGE }
        //     , { url: ResourceConfig.SHEET_PLAY_SHEET, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_DIALOG, type: Laya.Loader.ATLAS },
        // { url: ResourceConfig.BITMAP_FONT_MENU1_JSON, type: Laya.Loader.JSON }, { url: ResourceConfig.BITMAP_FONT_MENU1_PNG, type: Laya.Loader.IMAGE },
        // { url: ResourceConfig.BITMAP_FONT_MENU2_JSON, type: Laya.Loader.JSON }, { url: ResourceConfig.BITMAP_FONT_MENU2_PNG, type: Laya.Loader.IMAGE }];
        // var arrMJPage = arrTablePage.concat([{ url: ResourceConfig.SHEET_OPT, type: Laya.Loader.ATLAS },
        // { url: ResourceConfig.SHEET_TIME_LIMIT, type: Laya.Loader.ATLAS },
        // { url: ResourceConfig.SHEET_CARD, type: Laya.Loader.ATLAS },
        // { url: ResourceConfig.SHEET_CARD_1, type: Laya.Loader.ATLAS },
        // { url: ResourceConfig.SHEET_CARD_2, type: Laya.Loader.ATLAS },
        // { url: ResourceConfig.SHEET_CARD_3, type: Laya.Loader.ATLAS },
        // { url: ResourceConfig.SHEET_CARD_4, type: Laya.Loader.ATLAS },
        // { url: ResourceConfig.SHEET_CARD_5, type: Laya.Loader.ATLAS },
        // { url: ResourceConfig.SHEET_DICE, type: Laya.Loader.ATLAS },
        // { url: ResourceConfig.SHEET_GAME_END, type: Laya.Loader.ATLAS },
        // { url: ResourceConfig.SHEET_TING, type: Laya.Loader.ATLAS }
        // ]);
        // var arrPokerPage = arrTablePage.concat([{ url: ResourceConfig.SHEET_POKER_CARD_BIG, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_POKER_CARD_SMALL, type: Laya.Loader.ATLAS },
        // { url: ResourceConfig.SHEET_POKER, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_GAME_END, type: Laya.Loader.ATLAS }]);
        // var arrWaKengPage = arrPokerPage.concat([{ url: ResourceConfig.SHEET_WAKENG, type: Laya.Loader.ATLAS }, { url: ResourceConfig.BITMAP_FONT_WAKENG2_JSON, type: Laya.Loader.JSON },
        // { url: ResourceConfig.BITMAP_FONT_WAKENG2_PNG, type: Laya.Loader.IMAGE }, { url: ResourceConfig.BITMAP_FONT_WAKENG3_JSON, type: Laya.Loader.JSON },
        // { url: ResourceConfig.BITMAP_FONT_WAKENG3_PNG, type: Laya.Loader.IMAGE }, { url: ResourceConfig.SHEET_EFFECT_BOOM, type: Laya.Loader.ATLAS },
        // { url: ResourceConfig.SHEET_EFFECT_SHUANGSHUN, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_EFFECT_DANSHUN, type: Laya.Loader.ATLAS }]);
        // var totalData = GameConfig.cfgH5Effect;
        // for (var i in totalData) {
        //     var scene: number = parseInt(totalData[i].scene);
        //     var res: string = totalData[i].res;
        //     var type: number = totalData[i].type;
        //     var arr;
        //     switch (scene) {
        //         case ResourceConfig.MenuPage_SCEEN:
        //             arr = arrMenuPage;
        //             break;
        //         case ResourceConfig.LoginPage_SCEEN:
        //             arr = arrLoginPage;
        //             break;
        //         case ResourceConfig.GamePage_SCEEN:
        //             arr = arrGamePage;
        //             break;
        //         default:
        //             break;
        //     }
        //     if (type == 2)
        //         arr.push({ url: totalData[i].url, type: Laya.Loader.JSON });
        //     else if (res != '')
        //         arr.push({ url: totalData[i].res, type: Laya.Loader.ATLAS });
        // }
        // AppPage.register(MenuPage, arrMenuPage);
        // AppPage.register(LoginPage, arrLoginPage);
        // AppPage.register(TablePage, arrTablePage);
        // AppPage.register(BaseMJPage, arrMJPage);
        // AppPage.register(WaKengPage, arrWaKengPage);
        // AppPage.register(ShanXiMjPage, arrMJPage);
        // AlertCtrl.instance.start([]);
        var i;
        AlertInGameCtrl.instance.start([{ url: ResourceConfig.SHEET_TONGYONG, type: Laya.Loader.ATLAS }]);
        CreateTableCtrl.instance.start([{ url: ResourceConfig.SHEET_CREATE_TABLE, type: Laya.Loader.ATLAS }]);
        CreateRoomCtrl.instance.start([{ url: ResourceConfig.SHEET_CREATEROOM, type: Laya.Loader.ATLAS }]);
        JoinTableCtrl.instance.start([{ url: ResourceConfig.SHEET_JOIN_TABLE, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.BITMAP_FONT_JOINTABLE1_JSON, type: Laya.Loader.JSON }, { url: ResourceConfig.BITMAP_FONT_JOINTABLE1_PNG, type: Laya.Loader.IMAGE },
            { url: ResourceConfig.BITMAP_FONT_JOINTABLE2_JSON, type: Laya.Loader.JSON }, { url: ResourceConfig.BITMAP_FONT_JOINTABLE2_PNG, type: Laya.Loader.IMAGE }]);
        ReportCtrl.instance.start([{ url: ResourceConfig.SHEET_REAL_TIME, type: Laya.Loader.ATLAS }]);
        GameEndCtrl.instance.start([{ url: ResourceConfig.SHEET_GAME_END, type: Laya.Loader.ATLAS }]);
        ChatCtrl.instance.start([{ url: ResourceConfig.SHEET_CHAT, type: Laya.Loader.ATLAS }]);
        SetupCtrl.instance.start([{ url: ResourceConfig.SHEET_SETUP, type: Laya.Loader.ATLAS }]);
        TableEndCtrl.instance.start([{ url: ResourceConfig.SHEET_GAME_NAME, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_FENSHU_FNT, type: Laya.Loader.JSON }, { url: ResourceConfig.SHEET_FENSHU, type: Laya.Loader.IMAGE }]);
        ShopVCtrl.instance.start([{ url: ResourceConfig.SHEET_SHOP, type: Laya.Loader.ATLAS }, { url: ResourceConfig.BITMAP_FONT_SHOP1_JSON, type: Laya.Loader.JSON }, { url: ResourceConfig.BITMAP_FONT_SHOP_PNG, type: Laya.Loader.IMAGE }]);
        ShopHCtrl.instance.start([{ url: ResourceConfig.SHEET_SHOP, type: Laya.Loader.ATLAS }, { url: ResourceConfig.BITMAP_FONT_SHOP1_JSON, type: Laya.Loader.JSON }, { url: ResourceConfig.BITMAP_FONT_SHOP_PNG, type: Laya.Loader.IMAGE }]);
        UpdateCtrl.instance.start([{ url: ResourceConfig.SHEET_TONGYONG, type: Laya.Loader.ATLAS }]);
        club.ClubCtrl.instance.start([{ url: ResourceConfig.SHEET_CLUB, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_JOIN_TABLE, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.BITMAP_FONT_JOINTABLE1_JSON, type: Laya.Loader.JSON }, { url: ResourceConfig.BITMAP_FONT_JOINTABLE1_PNG, type: Laya.Loader.IMAGE },
            { url: ResourceConfig.BITMAP_FONT_JOINTABLE2_JSON, type: Laya.Loader.JSON }, { url: ResourceConfig.BITMAP_FONT_JOINTABLE2_PNG, type: Laya.Loader.IMAGE }]);
        // var helpArr: Array<any> = [{ url: ResourceConfig.SHEET_HELP, type: Laya.Loader.ATLAS }];
        // for (i = 0; i < GameConfig.GAMES.length; i++) {
        //     var type: number = GameDef.getGameTypeByGameName(GameConfig.GAMES[i]);
        //     if (type)
        //         helpArr.push("res/rule/ruler_" + type + ".png");
        // }
        // HelpCtrl.instance.start(helpArr);
        var matchSignArr = [{ url: ResourceConfig.SHEET_MATCHSIGN, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_TONGYONG, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.SHEET_JOIN_TABLE, type: Laya.Loader.ATLAS }, { url: ResourceConfig.SHEET_CREATE_TABLE, type: Laya.Loader.ATLAS },
            { url: ResourceConfig.BITMAP_FONT_JOINTABLE1_JSON, type: Laya.Loader.JSON }, { url: ResourceConfig.BITMAP_FONT_JOINTABLE1_PNG, type: Laya.Loader.IMAGE },
            { url: ResourceConfig.BITMAP_FONT_JOINTABLE2_JSON, type: Laya.Loader.JSON }, { url: ResourceConfig.BITMAP_FONT_JOINTABLE2_PNG, type: Laya.Loader.IMAGE },
            { url: ResourceConfig.BITMAP_FONT_MATCHSIGN1_JSON, type: Laya.Loader.JSON }, { url: ResourceConfig.BITMAP_FONT_MATCHSIGN1_PNG, type: Laya.Loader.IMAGE }];
        matchSign.MatchSignCtrl.instance.start(matchSignArr);
        matchSign.MatchSignCreateCtrl.instance.start(matchSignArr);
        matchSign.MatchSignInfoCtrl.instance.start(matchSignArr);
        MatchHistoryCtrl.instance.start(matchSignArr);
        //加载位图字体
        Dispatcher.on(EventNames.FONT_BITMMAP, this, this.loadProto);
        FontBitmapManger.instance.loadFontArr();
    };
    /**
     * 加载PTOTO BUFFER
     */
    LayaAir3D.prototype.loadProto = function () {
        Laya.Browser["window"].protobuf.load([ResourceConfig.PROTO_GAME + "?v=" + Math.random()], this.onProtoLoaded.bind(this));
    };
    /**
     * 加载PTOTO BUFFER完成
     */
    LayaAir3D.prototype.onProtoLoaded = function (err, root) {
        server.initData(root);
        this.createGameScene();
    };
    /**
    * 初始化完毕，创建场景
    */
    LayaAir3D.prototype.createGameScene = function () {
        Native.instance.setBatteryCallback();
        Native.instance.setGroundCallback();
        Native.instance.checkUpdata();
        GameConfig.getShopCfg();
        var isAutoLogin = LoginManager.instance.orderedLogin(true);
        if (!isAutoLogin)
            AppControl.getInstance().showPage(LoginPage, LoginPage.PARAMS0_FIRST_ENTER);
        // WxWeb.instance.getLongitudeAndLatitude()
    };
    return LayaAir3D;
}());
new LayaAir3D();
//# sourceMappingURL=LayaAir3D.js.map